<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-R3-blog-posts.xml</id>
  <title>SAP Community - SAP R/3</title>
  <updated>2025-09-15T11:13:35.885478+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP R/3/pd-p/01200245450800000002" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP R/3 blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-6-installation-configuration-troubleshooting/ba-p/13566652</id>
    <title>abap2UI5 – (6) Installation, Configuration &amp; Troubleshooting</title>
    <updated>2023-04-14T17:28:49+02:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 6 of this blog series introducing &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;abap2UI5&lt;/A&gt;&lt;/STRONG&gt; — an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;This post explains the installation, configuration&lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp;and troubleshooting steps of abap2UI5.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can find all the information about this project on &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub,&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;stay up-to-date by following on &lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter&lt;/A&gt; &lt;/STRONG&gt;and be sure to explore the other articles of this blog series:&lt;BR /&gt;
&lt;TABLE border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;
&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This post covers the following areas:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Installation&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Install the Project&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create a new HTTP Service&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Implement the Handler Method&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Configuration&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Options &amp;amp; URL Parameters&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Title&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Synchronize the Configuration&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Theme&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Bootstrapping&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Launchpad&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CSS&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Security&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Debugging&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Frontend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Backend&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Conclusion&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let’s begin with the first topic.&lt;BR /&gt;
&lt;H3 id="toc-hId-1092176735"&gt;&lt;STRONG&gt;1. Installation&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1024745949"&gt;&lt;STRONG&gt;1.1. Install the project with abapGit&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
If you are new to abapGit, start by reviewing this &lt;A href="https://docs.abapgit.org/user-guide/getting-started/install.html" rel="nofollow noopener noreferrer" target="_blank"&gt;&lt;STRONG&gt;Guideline&lt;/STRONG&gt;&lt;/A&gt; for on-premise systems and this &lt;STRONG&gt;&lt;A href="https://developers.sap.com/tutorials/abap-environment-abapgit.html" rel="noopener noreferrer" target="_blank"&gt;Tutorial&lt;/A&gt;&lt;/STRONG&gt; for cloud environments.&lt;BR /&gt;
&lt;BR /&gt;
The project is based on a single code line for both language versions (ABAP Cloud, Standard ABAP), so you can pull this &lt;STRONG&gt;&lt;A href="https://github.com/oblomov-dev/abap2UI5/tree/main" target="_blank" rel="nofollow noopener noreferrer"&gt;repository&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;in both cases. For lower releases (NW 7.03 to 7.40) use this &lt;A href="https://github.com/oblomov-dev/abap2UI5-downport" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;downport repository.&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-828232444"&gt;&lt;A id="user-content-2-create-a-new-http-service" class="anchor" href="https://github.com/oblomov-dev/abap2ui5/wiki/Installation#2-create-a-new-http-service" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;&lt;STRONG&gt;1.2. Create a new HTTP Service&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
Next, create a new HTTP service in your system. In an on-premise environment, you need to create and configure a new ICF service. Follow this &lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_FOR_SOH_740/753088fc00704d0a80e7fbd6803c8adb/48d182abf6c96745e10000000a421937.html?version=7.40.24&amp;amp;locale=en-US" rel="noopener noreferrer" target="_blank"&gt;guideline&lt;/A&gt;&lt;/STRONG&gt; for that and see how to develop a new HTTP request handler &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_FOR_SOH_740/753088fc00704d0a80e7fbd6803c8adb/48d402801904154ee10000000a421937.html?version=7.40.24&amp;amp;locale=en-US" rel="noopener noreferrer" target="_blank"&gt;&lt;STRONG&gt;here.&lt;/STRONG&gt;&lt;/A&gt; In a cloud scenario, follow this &lt;A href="https://developers.sap.com/tutorials/abap-environment-create-http-service.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;tutorial.&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-631718939"&gt;&lt;STRONG&gt;1.3. Implement the Handler Method&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
Now copy the following implementation into your new handle_request method.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;ABAP Standard:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;METHOD if_http_extension~handle_request.&lt;BR /&gt;
&lt;BR /&gt;
   DATA(lv_resp) = SWITCH #( server-&amp;gt;request-&amp;gt;get_method( )&lt;BR /&gt;
      WHEN 'GET'  THEN z2ui5_cl_fw_http_handler=&amp;gt;http_get( )&lt;BR /&gt;
      WHEN 'POST' THEN z2ui5_cl_fw_http_handler=&amp;gt;http_post( server-&amp;gt;request-&amp;gt;get_cdata( ) ) ).&lt;BR /&gt;
&lt;BR /&gt;
   server-&amp;gt;response-&amp;gt;set_header_field( name = `cache-control` value = `no-cache` ).&lt;BR /&gt;
   server-&amp;gt;response-&amp;gt;set_cdata( lv_resp ).&lt;BR /&gt;
   server-&amp;gt;response-&amp;gt;set_status( code = 200 reason = `success` ).&lt;BR /&gt;
&lt;BR /&gt;
ENDMETHOD.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;A id="user-content-abap-cloud" class="anchor" href="https://github.com/oblomov-dev/abap2ui5/wiki/Installation#abap-cloud" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;&lt;STRONG&gt;ABAP Cloud:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;METHOD if_http_service_extension~handle_request.&lt;BR /&gt;
&lt;BR /&gt;
   DATA(lv_resp) = SWITCH #( request-&amp;gt;get_method( )&lt;BR /&gt;
      WHEN 'GET'  THEN z2ui5_cl_fw_http_handler=&amp;gt;http_get( )&lt;BR /&gt;
      WHEN 'POST' THEN z2ui5_cl_fw_http_handler=&amp;gt;http_post( request-&amp;gt;get_text( ) ) ).&lt;BR /&gt;
&lt;BR /&gt;
   response-&amp;gt;set_status( 200 )-&amp;gt;set_text( lv_resp&lt;BR /&gt;
      )-&amp;gt;set_header_field( i_name = `cache-control` i_value = `no-cache` ).&lt;BR /&gt;
&lt;BR /&gt;
ENDMETHOD.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;BR /&gt;
By calling your new HTTP handler via browser, you can start abap2UI5 and see the landing page:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-14-um-13.05.32.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Landing Page&lt;/P&gt;&lt;BR /&gt;
Optionally you can install the abap2UI5 &lt;A href="https://github.com/abap2UI5/abap2UI5-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;samples repository&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;next and check out all the examples:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-08-02-um-10.59.07.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Samples Repository&lt;/P&gt;&lt;BR /&gt;
Now you are ready to develop your first own app. See the first &lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;blog post&lt;/STRONG&gt;&lt;/A&gt; to find more information about the development process.&lt;BR /&gt;
&lt;H3 id="toc-hId-306122715"&gt;&lt;STRONG&gt;2. Configuration&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-238691929"&gt;&lt;STRONG&gt;&lt;SPAN style="font-size: 1rem"&gt;2.1. Options and URL Parameters&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
There are two ways to set the configuration: one is by setting it via URL parameter, and the other option is by importing it as a configuration by calling the index HTML.&lt;BR /&gt;
&lt;BR /&gt;
By default, the following parameters are set:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;lt_config = VALUE #(&lt;BR /&gt;
   (  n = `src`                       v = `https://sdk.openui5.org/resources/sap-ui-cachebuster/sap-ui-core.js` )&lt;BR /&gt;
   (  n = `data-sap-ui-theme`         v = `sap_horizon` )&lt;BR /&gt;
   (  n = `data-sap-ui-async`         v = `true` )&lt;BR /&gt;
   (  n = `data-sap-ui-bindingSyntax` v = `complex` )&lt;BR /&gt;
   (  n = `data-sap-ui-frameOptions`  v = `trusted` )&lt;BR /&gt;
   (  n = `data-sap-ui-compatVersion` v = `edge` ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
If you want to make changes, simply copy the table, adjust the necessary parameters and then import the table again when calling the method:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DATA(lt_config) = VALUE z2ui5_if_client=&amp;gt;ty_t_name_value( &lt;BR /&gt;
      (  n = `data-sap-ui-theme`         v = `sap_belize` ) "&amp;lt;- adjusted&lt;BR /&gt;
      (  n = `src`                       v = `https://sdk.openui5.org/resources/sap-ui-cachebuster/sap-ui-core.js` )&lt;BR /&gt;
      (  n = `data-sap-ui-async`         v = `true` )&lt;BR /&gt;
      (  n = `data-sap-ui-bindingSyntax` v = `complex` )&lt;BR /&gt;
      (  n = `data-sap-ui-frameOptions`  v = `trusted` )&lt;BR /&gt;
      (  n = `data-sap-ui-compatVersion` v = `edge` ) ).&lt;BR /&gt;
&lt;BR /&gt;
DATA(lv_resp) = SWITCH #( request-&amp;gt;get_method( )&lt;BR /&gt;
   WHEN 'GET'  THEN z2ui5_cl_fw_http_handler=&amp;gt;http_get( lt_config )&lt;BR /&gt;
   WHEN 'POST' THEN z2ui5_cl_fw_http_handler=&amp;gt;http_post( request-&amp;gt;get_text( ) ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
You can find a list of all configuration parameters &lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_751_IP/468a97775123488ab3345a0c48cadd8f/91f2d03b6f4d1014b6dd926db0e91070.html" target="_blank" rel="noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt; Additionally, you can modify these parameters with the sap-ui- prefix to use them as URL parameters.&lt;BR /&gt;
&lt;H4 id="toc-hId-42178424"&gt;&lt;STRONG&gt;2.2. Title&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
You can set the title with the following snippet in your definition of the view:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DATA(view) = z2ui5_cl_xml_view=&amp;gt;factory( ).&lt;BR /&gt;
view-&amp;gt;_z2ui5( )-&amp;gt;title( i_client-&amp;gt;_bind_edit( `My Title` )&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-14-um-13.57.42.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 with changed title&lt;/P&gt;&lt;BR /&gt;
Check out the following &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_125.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;sample.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--154335081"&gt;&lt;STRONG&gt;2.4. Synchronize the Configuration&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
You can also synchronize your configurations with all other ui5 apps in your system by reading the customizing from the following table prior to making the method call (Enjoy the view – this is the only SAP GUI screenshot included in this blog series &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&lt;span class="lia-unicode-emoji" title=":disappointed_face:"&gt;😞&lt;/span&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/228519154-7938e4eb-c582-41e5-8e87-1d6ecf3c6c85.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Configuration SAP UI5 Bootstrapping&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--350848586"&gt;&lt;STRONG&gt;2.4. Theme&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
The most common change is to the theme. You can find all available themes &lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/da0d2e78e5414e199507cd6365d3add2" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;here&lt;/STRONG&gt;&lt;/A&gt;. The newest theme is Horizon (sap_horizon) and it is used in all the demos of this blog series. Other popular themes are:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 10px"&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/sap_belize.gif" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/sap-fiori3.gif" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%"&gt;&lt;SPAN class="ph uicontrol"&gt;Belize (sap_belize)&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%"&gt;Quartz Light (sap_fiori_3)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 10px"&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_dark.gif" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_hcb.gif" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 10px"&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;&lt;SPAN class="ph uicontrol"&gt;Evening Horizon (sap_horizon_dark)&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 49.92%;height: 10px"&gt;High Contrast Black (sap_horizon_hcb)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--547362091"&gt;&lt;STRONG&gt;2.5. Bootstrapping&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
In an on-premise landscape, you can bootstrap the UI5 library from your local system. Typically, the path is "/sap/public/bc/ui5_ui5/resources/sap-ui-core.js" or "resources/sap-ui-core.js". In a cloud scenario, you can refer to SAP guidelines available &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/2d3eb2f322ea4a82983c1c62a33ec4ae.html" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--1241592691"&gt;&lt;STRONG&gt;2.6. Launchpad&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
Abap2UI5 is based on a single-page index.html, which makes it not compatible with FLP out-of-the-box (since FLP replaces the index.html). However, it is no problem to encapsulate abap2UI5 in a UI5 standard app for the use with launchpads. Check out and install this additional &lt;A href="https://github.com/abap2UI5/ext-service_integration" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;repository.&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--1438106196"&gt;&lt;STRONG&gt;2.7. CSS&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
You can change the CSS by sending HTML with your View in your app. An example can be found &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_app_demo_50.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;here:&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-06-um-20.56.06.png" height="164" width="466" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 app with changed CSS&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1341216694"&gt;&lt;STRONG&gt;3. Security&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
At the backend, abap2UI5 is a plain HTTP handler that every user creates and configures by themselves (visibility, authentication &amp;amp; other security parameters). In the implementation of your apps you have to take care of a secure programming style like always when developing HTTP-Handlers (call authorization checks, avoid dynamic SQL etc.). Check &lt;A href="https://www.dsag.de/wp-content/uploads/2021/12/dsag_recommendation_abap_development.pdf" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;this&lt;/STRONG&gt;&lt;/A&gt; for more information.&lt;BR /&gt;
&lt;BR /&gt;
At the frontend, abap2UI5 is a normal one page UI5 application. It loads the external library UI5 from a CDN or your own customized directory. The UI5 framework is used to render the HTML and only methods of the UI5 framework are called to handle the all events.&lt;BR /&gt;
&lt;BR /&gt;
Additionally to prevent cross-site-scripting the following parameter are set in the index.html:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' ui5.sap.com *.ui5.sap.com sdk.openui5.org *.sdk.openui5.org cdn.jsdelivr.net *.cdn.jsdelivr.net"/&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It only allows libraries from the same server, ui5.sap.com, openui5.com or cdn.jsdelivr.net, which we needed to use for some external libraries. Adjust the importing parameter 'content-security-policy' when you want to include more external URLs:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DATA(lv_resp) = SWITCH #( request-&amp;gt;get_method( )&lt;BR /&gt;
           WHEN 'GET'  THEN z2ui5_cl_fw_http_handler=&amp;gt;http_get(&lt;BR /&gt;
                          content_security_policy = `&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' ui5.sap.com *.ui5.sap.com sdk.openui5.org *.sdk.openui5.org cdn.jsdelivr.net *.cdn.jsdelivr.net"/&amp;gt;` ) &lt;BR /&gt;
           WHEN 'POST' THEN z2ui5_cl_fw_http_handler=&amp;gt;http_post( request-&amp;gt;get_text( ) ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
You can find more information about CSP &lt;A href="https://content-security-policy.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;here.&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1537730199"&gt;&lt;STRONG&gt;4. Debugging&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
When your app is in the development process, you can activate the debugging tools by changing the following parameter:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DATA(lv_resp) = SWITCH #( request-&amp;gt;get_method( )&lt;BR /&gt;
       WHEN 'GET'  THEN z2ui5_cl_fw_http_handler=&amp;gt;http_get(&lt;BR /&gt;
                           check_debugging = abap_true )&lt;BR /&gt;
       WHEN 'POST' THEN z2ui5_cl_fw_http_handler=&amp;gt;http_post( request-&amp;gt;get_text( ) ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--2027646711"&gt;&lt;STRONG&gt;4.1. Frontend&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;After that, you can can start an app and press the shortcut STRG+A and the debugging tools are displayed:&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirmfoto-2023-12-24-um-14.41.48.png" height="344" width="604" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Debugging Tools&lt;/P&gt;&lt;BR /&gt;
Next follow the left menu and press for example View XML:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirmfoto-2023-12-24-um-14.44.03.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Debugging Tools - XML-View&lt;/P&gt;&lt;BR /&gt;
Most of the issues arise because the XML is not valid. You can check it there or copy &amp;amp; paste it to an XML validator. Another good way to test the XML are UI5 sandboxes, such as the &lt;STRONG&gt;&lt;A href="https://codesandbox.io/s/ui5-example-pglil?from-embed=&amp;amp;file=/webapp/App.view.xml" target="_blank" rel="noopener nofollow noreferrer"&gt;OpenUI5 Sandbox.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can also check the View Model and previous request here. If a parameter is bound with _bind_one, it should be written in the oViewModel. If a parameter is bound with _bind, it should be written in oUpdate.&amp;nbsp;You can also check the last request to ensure that all updated values have been sent to the server.&lt;BR /&gt;
&lt;BR /&gt;
To take a more detailed look at the UI, use the &lt;A href="https://chrome.google.com/webstore/detail/ui5-inspector/bebecogbafbighhaildooiibipcnbngo" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;UI5 Inspector&lt;/STRONG&gt;&lt;/A&gt;. This tool is helpful for analyzing and checking certain controls:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-03-um-14.38.51.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;UI5 Inspector with an abap2UI5 app&lt;/P&gt;&lt;BR /&gt;
You can find more guidelines &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/76e789ea418a48a1a27916b63a30fb72" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Also, keep in mind that abap2UI5 is based on REST, so you don't need to restart the app all the time after a change, like in the former screen logic where changes were only visible after restarting. Just triggering a server roundtrip is enough to see the changes:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_dv.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;View Development in abap2UI5&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-2070807080"&gt;&lt;STRONG&gt;4.2. Backend&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
Set a breakpoint in your app and check the values that abap2UI5 provides you, as well as the values you give back to abap2UI5. Check if the view XML is filled and if it is valid. Normally, abap2UI5 throws an exception if something unexpected happens, which can help you to identify the problem. If you want to gain a deeper understanding, you can also debug the framework itself.&lt;BR /&gt;
&lt;BR /&gt;
The framework is based on a single http handler. Set a breakpoint here and check incoming requests and outgoing responses:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-17.33.52.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 HTTP Handler&lt;/P&gt;&lt;BR /&gt;
The initial request loads the UI5 index.html, which is independent of your application and should normally not cause any problems:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-17.35.48.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Get Handler (index.html)&lt;/P&gt;&lt;BR /&gt;
After this, the AJAX roundtrip logic begins. Every event and interaction creates a new HTTP Post request, which triggers the following method:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-17.36.51.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Post Handler&lt;/P&gt;&lt;BR /&gt;
As you can see, we call the user's app on line 44. You can also check if your app has been successfully updated after the frontend on line 39 and check the following method:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-13-um-09.18.50.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Update app after frontend (PAI)&lt;/P&gt;&lt;BR /&gt;
And the reverse direction, setting the response with the values of your app in this method:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-13-um-09.19.47.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;Create frontend model before output (PBO)&lt;/P&gt;&lt;BR /&gt;
If you find a bug in the framework or running into problems with your app, feel free to open an &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--2127270714"&gt;&lt;STRONG&gt;5. Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This was part six of this introduction to &lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;abap2UI5.&lt;/STRONG&gt;&lt;/A&gt; You now have an understanding how to install &amp;amp; configure it and got insights into troubleshooting &amp;amp; debugging.&lt;BR /&gt;
&lt;BR /&gt;
In the next &lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;blog post&lt;/STRONG&gt;&lt;/A&gt;, we will focus on the technical background of this framework and summarize all the project's key ideas by covering topics such as its architecture, codebase and compatibility.&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading! Your questions, comments and wishes for this project are always welcome, create an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;or leave a comment.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-6-installation-configuration-troubleshooting/ba-p/13566652"/>
    <published>2023-04-14T17:28:49+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/sap-isu-intercompany-and-data-exchange-choice/ba-p/13556462</id>
    <title>SAP ISU Intercompany and Data Exchange : Choice</title>
    <updated>2023-04-21T01:26:31+02:00</updated>
    <author>
      <name>mayankchourasia</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/760782</uri>
    </author>
    <content>&lt;P id="a479" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;In this blog I will discuss about what do you mean by Intercompany and Data Exchange.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="047a" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;Let’s Consideration and Scenario where in your area Electricity is providing from various Supplier A, Supplier B , Supplier C, etc. Generally in deregulated market we have this option to choose the energy suppliers.&lt;BR /&gt;
Deregulated in Utilities Market means where you will purchase the Electricity and then Supply to the Customers in short you will not generate the electricity you will purchase and then sell the electricity, where as Regulated in Utilities Market means generating electricity and distribution to the customers up to services you will give.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="e214" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;Deregulation of market has given consumers the freedom to choose their energy suppliers and to change the supplier if they are not satisfied with the services of the supplier they can leave the exciting supplier and choose a new supplier.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="1b7d" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;For Deregulated market it will not possible to manage lots of data of the customers keeping a track because lots of data will be shared between retailer and distributor. To help this&amp;nbsp;&lt;STRONG class="mo hy"&gt;SAP&amp;nbsp;&lt;/STRONG&gt;comes up a sub module called&amp;nbsp;&lt;STRONG class="mo hy"&gt;Intercompany Data Exchange {IDE}&lt;/STRONG&gt;. This will helps to automates data between retailer and distributor in a deregulated market.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="8953" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;In IDE {&lt;STRONG class="mo hy"&gt;Intercompany Data Exchange}&amp;nbsp;&lt;/STRONG&gt;will contain 3 main parts.&lt;BR /&gt;
1. Grid.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="69eb" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;2. Communication Control.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="4fda" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;3. Process management.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="12e2" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;Let’s understand one by one.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;UL class=""&gt;&lt;BR /&gt;
 	&lt;LI id="5c2b" class="uo up sl mo b tj tk tm tn tp uq tt ur tx us ub ut uu uv uw bi" data-selectable-paragraph=""&gt;Grid: It contains the generation of service and distribution of service to particular period.&lt;BR /&gt;
For example a customer is on Supplier A with for 10 years and now want to switch to new Supplier i.e. Supplier B. This will help in technical way to understand which supplier had supplied in a particular range of Months or Years.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI id="327f" class="uo up sl mo b tj ux tm uy tp uz tt va tx vb ub ut uu uv uw bi" data-selectable-paragraph=""&gt;Communication Control: The flow of data will be sending and receiving. In SAP it is possible with the help of IDOC’s.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI id="c978" class="uo up sl mo b tj ux tm uy tp uz tt va tx vb ub ut uu uv uw bi" data-selectable-paragraph=""&gt;Process Management: Let’s a customer wants to update the Mobile number then retail supplier should update the info accordingly.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P id="00ca" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;IDE process allows processing of multiple message formats, thus providing options for using the same system to support different markets scenario’s.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="dbfd" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;In short we can modify the details customer details, switching the customers to different provider, etc.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="a5db" class="pw-post-body-paragraph th ti sl mo b tj tk jj tl tm tn jn to tp tq tr ts tt tu tv tw tx ty tz ua ub el bi" data-selectable-paragraph=""&gt;Thanks for reading the blog.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/sap-isu-intercompany-and-data-exchange-choice/ba-p/13556462"/>
    <published>2023-04-21T01:26:31+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-7-technical-background-under-the-hood-of-abap2ui5/ba-p/13566459</id>
    <title>abap2UI5 – (7) Technical Background: Under the Hood of abap2UI5</title>
    <updated>2023-04-26T10:37:54+02:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>&lt;P&gt;Welcome to part 7 of this blog series introducing &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;abap2UI5&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;— an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;This post will focus on the technical background and summarize all the project's key ideas by covering topics such as its architecture, codebase and compatibility.&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;You can find all the information about this project on &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub,&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;stay up-to-date by following on &lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter&lt;/A&gt; &lt;/STRONG&gt;and be sure to explore the other articles of this blog series:&lt;/P&gt;&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshoooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;(7) Technical Background: Under the Hood of abap2UI5 (this blog post)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;/P&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;This post delves into the inner workings of abap2UI5, guiding you from the basics to more advanced concepts. Simply follow the sections from (1) to (30).&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-1092174820"&gt;&lt;STRONG&gt;Technical Background&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;abap2UI5 is designed as an open-source project. The goal in doing this is not only to make it accessible to everyone, but also allow for exchange of ideas. Therefore, this last blog post contains all technical details: It shares the underlying concept behind this approach, explains its adaptation to the ABAP Environment, its differences to RAP and finally focuses on its code line. While my background is mostly in traditional ABAP and UI5 areas, I am not an expert in all of the topics I will touch upon, but I was interested in what they can bring to the project. This being said, if you catch any mistakes, please feel free to correct me. As always, I welcome all feedback.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(1) HTML Over the Wire&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Let's start by taking a closer look at the concept of "HTML Over the Wire", an approach that influenced abap2UI5 and is well explained in this &lt;A href="https://m.signalvnoise.com/html-over-the-wire/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;blog post:&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;&lt;BLOCKQUOTE&gt;&lt;EM&gt;You can write fast, modern, responsive web applications by generating your HTML on the server, and delivering that (with a little help) directly to the browser. You don’t need JSON as an in-between format. You don’t need client-side MVC frameworks. You don’t need complicated bundling and transpiling pipelines. But you do need to think different. [...] &lt;/EM&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;EM&gt;This is what HTML Over The Wire is all about. It’s a celebration of the simplicity in HTML as the format for carrying data and presentation together, whether this is delivered on the first load or with subsequent dynamic updates.&lt;/EM&gt;&lt;/BLOCKQUOTE&gt;&lt;P&gt;I came across this concept on SCN when I read this &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2022/02/10/fiori-like-web-app-development-in-pure-abap-with-htmx-and-fundamental/" target="_blank" rel="noopener noreferrer"&gt;blog post,&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;which explained how to use &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&lt;A href="https://htmx.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;htmx&lt;/A&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; to create Fiori-like apps. Over-the-wire approaches include server-side rendering (SSR) similar to that of a multi-page application (MPA). However, after the initial request, the browser retrieves only HTML fragments asynchronously via AJAX, so the entire page is not re-rendered anymore. Unlike a single-page application (SPA), the server handles also the application's logic and state:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-16.08.57.png" border="0" width="399" height="203" /&gt;&lt;/P&gt;&lt;P class=""&gt;HTML "Over the Wire" Lifecycle &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2022/02/10/fiori-like-web-app-development-in-pure-abap-with-htmx-and-fundamental/" target="_blank" rel="noopener noreferrer"&gt;(Quelle)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The idea of combining View &amp;amp; Data and transferring them together to the frontend is significantly distinct from most of the current approach where HTML, CSS &amp;amp; JavaScript are strictly separated and stored at the frontend whereas the data is sent by the backend.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(2) Hypermedia Driven Application (HDA)&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;This leads to a concept that we could refer to as a hypermedia-driven application (HDA), which is introduced &lt;A href="https://htmx.org/essays/hypermedia-driven-applications/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;here.&lt;/STRONG&gt;&lt;/A&gt; Let's compare this approach to that of multi-page applications (MPA) and single-page applications (SPA):&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-30-um-20.28.26.png" border="0" /&gt;&lt;/P&gt;&lt;P class=""&gt;MPA vs. SPA vs. HDA &lt;STRONG&gt;&lt;A href="https://craftcms.com/events/dot-all-2022/sessions/a-practical-guide-to-html-over-the-wire" target="_blank" rel="noopener nofollow noreferrer"&gt;(Quelle)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In a hypermedia-driven application (HDA), the browser is limited to displaying HTML, processing JavaScript and CSS, but has no knowledge of the application's state (i.e., what has happened before and what will happen next). The application's logic is completely maintained on the server. In contrast, in a single-page application (SPA), all routes and potential actions are defined upfront and implemented at the frontend. As a result, any modifications to the application requires rebuilding the frontend app (more information &lt;A href="https://htmx.org/essays/hateoas/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;here).&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(3) Separation of Concerns&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;In a HDA, the idea of separation of concerns is not highly prioritized. CSS, JavaScript, and HTML are not cleanly separated, and the backend is responsible not only for the data but also for generating the UI and the program flow. However, the advantage of this approach is that we can maintain and customize everything in one place, as we're accustomed to in the past for example in former SAP GUI applications (more information &lt;A href="https://htmx.org/essays/locality-of-behaviour/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;here).&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(4) Dive Deeper&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;The first approaches in this direction were introduced back in &lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;A href="https://elixirforum.com/t/phoenix-liveview-info/16569" target="_blank" rel="noopener nofollow noreferrer"&gt;Phoenix LiveView (2018)&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt; and in &lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;A href="https://calebporzio.com/proof-of-concept-phoenix-liveview-for-laravel" target="_blank" rel="noopener nofollow noreferrer"&gt;Laravel Livewire (2019).&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&amp;nbsp;Now, there are several frameworks that work on similar principles, such as &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&lt;A href="https://htmx.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;htmx&lt;/A&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;, &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&lt;A href="https://hotwired.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;hotwire&lt;/A&gt; &lt;/STRONG&gt;or&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;A href="https://unpoly.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;unpoly&lt;/A&gt; &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;(c&lt;/SPAN&gt;&lt;/SPAN&gt;heck out newer blog posts &lt;STRONG&gt;&lt;A href="https://thenewstack.io/javascript-framework-unpoly-and-the-html-over-the-wire-trend/" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; and &lt;STRONG&gt;&lt;A href="https://blog.codecentric.de/hotwire-new-approach-for-modern-web-applications" target="_blank" rel="noopener nofollow noreferrer"&gt;here)&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;&lt;BR /&gt;In the end, all of these concepts share the belief that it's possible to develop apps with much less complexity, but only slightly lower level of UI fidelity compared to SPAs. Or, when we try to illustrate it visually, they aim to find a "sweet spot" between MPAs and SPAs:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-27-um-23.09.40.png" border="0" width="421" height="241" /&gt;&lt;/P&gt;&lt;P class=""&gt;"Sweet Spot" between SPA and MPA &lt;STRONG&gt;&lt;A href="https://unpoly.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;(Quelle)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Most of my knowledge about this subject comes from this &lt;A href="https://htmx.org/essays/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;blog posts&lt;/STRONG&gt;&lt;/A&gt;, and it's still relatively new to me (so I don't consider myself an expert). However, it's fascinating to see the existing frameworks and to contemplate what might be achievable in the future, such as selectively re-rendering specific parts of the view or implementing smoother page transitions. I recommend taking an hour to watch this &lt;A href="https://craftcms.com/events/dot-all-2022/sessions/a-practical-guide-to-html-over-the-wire" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;video&lt;/STRONG&gt;&lt;/A&gt;, where all of these concepts are presented very well.&lt;BR /&gt;&lt;BR /&gt;But now let's start to ask what we can bring of this concept to UI5 and the ABAP environment?&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(5) UI5 Architecture&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;UI5&lt;/STRONG&gt;&lt;/A&gt; differs significantly from frameworks like &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&lt;A href="https://htmx.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;htmx&lt;/A&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; and &lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;A href="https://unpoly.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;unpoly&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;. In an UI5 app, all of the logic is handled at the frontend, while the backend utilizes an OData-Implementation. This means that ABAP is only used for delivering data and has no opportunities to implement its own logic or UI. We have a "heavy javascript" approach here in a classic SPA architecture (we'll take a closer look at RAP later).&lt;BR /&gt;&lt;BR /&gt;But one specific characteristic we should examine closely is how the UI5 framework creates views. Each HTML output is rendered from an XML-View (let's ignore the former HTML/JS/JSON-Views), with its associated data from the server. The view is stored at the frontend as part of the app:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-10-um-16.56.08.png" border="0" width="420" height="168" /&gt;&lt;/P&gt;&lt;P class=""&gt;UI5 normally - ABAP delivers only Data&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(6) "UI5 Over the Wire" Architecture&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;And here is now the trick: what if, in addition to sending data from the backend, we also send the view?&lt;BR /&gt;&lt;BR /&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-30-um-20.50.18.png" border="0" width="422" height="167" /&gt;&lt;EM&gt;"UI5 Over the Wire" - ABAP delivers Data &amp;amp; View together&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Despite still relying on frontend HTML rendering, all necessary information (view &amp;amp; data) is now retrieved via AJAX from the backend. As a result, the UI5 app remains a SPA, but its role is now reduced to that of a HDA, which is responsible solely for displaying the view and its data:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-30-um-20.47.34.png" border="0" width="482" height="131" /&gt;&lt;/P&gt;&lt;P class=""&gt;UI5 app downgraded to an HDA - Displaying Data &amp;amp; View received from the server&lt;/P&gt;&lt;P&gt;This means that the frontend app is not aware of what it is currently displaying (whether it's a table, list or input) and neither is it aware of what actions will be taken next. The app logic remains completely on the server and the frontend app is just a small HDA transmitted with the first request:&lt;BR /&gt;&lt;BR /&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-19.34.39.png" border="0" width="510" height="294" /&gt;&lt;/P&gt;&lt;P class=""&gt;"UI5 Over the Wire" - Server to Client Communication&lt;/P&gt;&lt;P&gt;The HDA displays the view with its data and sends back each event to the server for determination of the next action and output. This process is somewhat similar to the PAI/PBO process used in former SAP GUI apps:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-19.55.11.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;UI5 vs. "UI5 Over the Wire" - Communication&lt;/P&gt;&lt;P&gt;We use an AJAX roundtrip logic similar to "HTML Over the Wire" approaches, but in this case, we cannot send HTML directly. Instead, we send a View combined with its Data. This results in a concept that we could refer to as "UI5-View Over the Wire".&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(7) Carrying Data and Presentation together&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;A typical "UI5-View Over the Wire" response looks like this:&lt;BR /&gt;&lt;BR /&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-03-um-13.53.51.png" border="0" width="539" height="228" /&gt;&lt;/P&gt;&lt;P class=""&gt;"UI5 Over the Wire" - Response with View &amp;amp; Data together&lt;/P&gt;&lt;P&gt;But is this maybe just the same like &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/fc4c71aa50014fd1b43721701471913d/289477a81eec4d4e84c0302fb6835035.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;RAP,&lt;/STRONG&gt;&lt;/A&gt; but in a different format?&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(8) RAP&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/fc4c71aa50014fd1b43721701471913d/289477a81eec4d4e84c0302fb6835035.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;RAP&lt;/STRONG&gt;&lt;/A&gt; also aims to find a "sweet spot" between a SPA and MPA. I am not certain of the exact approach they use to bring their view and model to the frontend, but they enrich responses either within the JSON itself or within the metadata of the initial OData-Request and the view and the model is defined previously in CDS Views in the backend:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-07.25.09.png" border="0" width="462" height="527" /&gt;&lt;/P&gt;&lt;P class=""&gt;RAP - Definition of Views with UI Annotations&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-07.27.04.png" border="0" width="460" height="311" /&gt;&lt;/P&gt;&lt;P class=""&gt;RAP - Definition of Data Models with DDL&lt;/P&gt;&lt;P&gt;This approach also leads to an architecture with a thin frontend and a strong backend similar to an HDA. But RAP aims to achieve this in a well-organized and controlled manner: Every API is based on the OData-Protocol, Views are defined with UI Annotations, Data Models are defined in DDL, Model updates are developed in local implementations of RAP classes and everything is separated in different layers that are orchestrated in a &lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/8308e6d301d54584a33cd04a9861bc52/0a875bc7a005465aad92c08becc11776.html" target="_blank" rel="noopener noreferrer"&gt;Virtual Data Model.&lt;/A&gt;&lt;/STRONG&gt; Finally, this approach ensures a highly organized development process which is effective in most use cases.&lt;BR /&gt;&lt;BR /&gt;However, in situations where significant Model and View changes are needed, especially at runtime, this approach can be a bit too unflexibel. Model changes with RTTI are not supported, and extending the view quickly goes beyond the functional scope of backend annotations, requiring development of Apps with &lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/03265b0408e2432c9571d6b3feb6b1fd" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;Fiori Elements&lt;/STRONG&gt;&lt;/A&gt; (with the need for extra deployment again).&lt;BR /&gt;&lt;BR /&gt;Overall RAP does not mix View, Model and Logic as radically as the "Over the Wire" approaches. Luckily in an open-source project we do not need to take care of any conventions and can risk a little bit more. As we have seen in (6) where the first trick was sending Views from the backend instead of storing them at the frontend app, we can now further enhance flexibility (9)(10).&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(9) Define one generic HTTP-Service for all Apps&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;First, we do not define a specific HTTP-Service for transmitting the View and the Data. Instead, every app uses the same generic HTTP-Handler including two strings (one for the View and one for the Data) eliminating the need to develop individual OData-Services with SEGW or CDS. During runtime the ABAP variables &amp;amp; tables are transformed into a JSON-Model and transmitted as a string to the frontend. In JavaScript it is parsed again into a JSON-Model and binded to the UI5-View:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-06.30.11.png" border="0" width="523" height="174" /&gt;&lt;/P&gt;&lt;P class=""&gt;Data Transfer in abap2UI5 - ABAP variables &amp;amp; tables are automatically synchronized with the UI5-Model&lt;/P&gt;&lt;P&gt;Furthermore we not only send the data but also the metadata (Data Model) with every request (7). This is different from classic OData communication, where the metadata is sent with the initial OData request to establish the model at the beginning, and only the data is exchanged afterward. With this approach, we can now send different models with every request:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-02-um-06.43.22.png" border="0" width="553" height="215" /&gt;&lt;/P&gt;&lt;P class=""&gt;OData vs. UI5 Over the Wire - Model &amp;amp; Data transfer&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(10) Define Model at Runtime&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;This enables the possibility to define models not only at design time, but also at runtime. The user doesn't have to do any extra work because abap2UI5 handles the entire process in the background during every AJAX request:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-17.40.48.jpeg" border="0" width="469" height="326" /&gt;&lt;/P&gt;&lt;P class=""&gt;abap2UI5 - Dynamic Data Binding &amp;amp; Model Creation&lt;/P&gt;&lt;P&gt;In apps we can use RTTI now again in a way that is similar to how it was used with ALVs. This means that there is no need to create separated apps for each model. In &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_061.clas.abap" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;this demo,&lt;/STRONG&gt;&lt;/A&gt; you can see an abap2UI5 app with a view including a table output that displays a generic table and its type is created and modified at runtime (similar to SE16):&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_se16_2.gif" border="0" width="547" height="354" /&gt;&lt;/P&gt;&lt;P class=""&gt;Replacing the Model (metadata) at Runtime&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;(11) Define View at Runtime&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Same for the view: In RAP, only certain predefined control attributes can be modified at runtime, while the view is defined in CDS artifacts with UI annotations previously. However, in an abap2UI5 app, it is possible to replace entire view controls. For example, in the &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_046.clas.abap" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;following app&lt;/STRONG&gt;&lt;/A&gt;, a table control is replaced with a list control and vice versa:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_ui_change2-1.gif" border="0" width="502" height="314" /&gt;&lt;/P&gt;&lt;P class=""&gt;Replacing the View at Runtime&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;(12) View &amp;amp; Model independent from the HTTP-Service&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;In the end, the View &amp;amp; Model are defined independent from the HTTP-Service and we are no longer forced to deliver a predefined static OData-Service for every app, as is the case in RAP. The number of backend artifacts is significantly reduced:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-27-um-23.26.34.png" border="0" width="396" height="259" /&gt;&lt;/P&gt;&lt;P class=""&gt;RAP vs. Model &amp;amp; View decoupled from the (single &amp;amp; generic) HTTP-Service&lt;/P&gt;&lt;P&gt;Let's take a look to the HTTP-Handler that provides us with this flexibility.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(13) HTTP-Service&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;All apps and data models use the same single generic HTTP-Handler, which can be observed by setting a breakpoint in your app and examining the call stack.&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-13.43.14.png" border="0" width="463" height="146" /&gt;&lt;/P&gt;&lt;P class=""&gt;Call stack of an abap2UI5 app&lt;/P&gt;&lt;P&gt;Every app implementation is a REST-based HTTP-Post implementation, in which no session is maintained between two requests.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(14) REST&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;This makes it compatible with all mobile use cases and devices, as well as with 'RESTful' Environments such as the BTP ABAP Environment and the new language version 'ABAP Cloud'. Similar to an OData-Implementation, where data changes are reflected in the app without requiring an app restart, it is now possible to develop the entire application and modify its view without restarting the frontend app. Take a look at this demo:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/gif_dev.gif" border="0" width="633" height="313" /&gt;&lt;/P&gt;&lt;P class=""&gt;Developing the ABAP class without restarting the frontend app&lt;/P&gt;&lt;P&gt;We get also the advantage shared by all over-the-wire approaches that there is no need for cache busting anymore, as the frontend app remains unchanged during the development process.&lt;BR /&gt;&lt;BR /&gt;Up until now, we have observed that the abap2UI5 frontend app is unaware of the specific application, just like the generic HTTP-Service on the server, which has also no knowledge of the particular model and view it is transmitting. So, which layer ultimately defines what happens in this architecture?&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(15) The abap2UI5 App&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;The only non-generic part of this concept is the app of the user implementing the interface z2ui5_if_app:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-17.52.43.png" border="0" width="478" height="512" /&gt;&lt;/P&gt;&lt;P class=""&gt;abap2UI5 app - one place for everything&lt;/P&gt;&lt;P&gt;In this architecture, the app has complete freedom in creating the view and the model, but it also bears full responsibility for ensuring that everything else functions correctly.&amp;nbsp;The app must handle the program logic, application states, and remember where it was coming from and where it want to go next. All of this is concentrated in this single app layer.&lt;BR /&gt;&lt;BR /&gt;However, this is not a big deal for ABAP! From an ABAP perspective, this is similar to past practices of using selection screens or working with ALVs. Every SAP GUI app was, in a way, an HDA where ABAP performs all the necessary functions (it was just not a browser-based environment). Moreover, in this architecture, we are not limited to implementing an OData-Service or confined to a local implementation of a global RAP class with restrictions, such as commit sequences, anymore. We can now leverage the full capabilities of the ABAP stack again. Creating data models based on internal tables is straightforward, working with generic data models, as seen in (10), is easily achievable at runtime with RTTI and extended ABAP concepts like serialization are also applicable, as we will see in the next section.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(16) Draft&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;With RAP, users can save interim results in drafts, giving them the opportunity to interrupt their work and continue later. The abap2UI5 architecture works as if we send a completely new app to the frontend after every event, but we still want to preserve the inputs and state that the user has made before. To achieve this, the z2ui5_if_app interface includes the if_serializable_object interface, which enables us to serialize and persist all important information of every request (such as the current view or its status):&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-13.52.24.png" border="0" width="487" height="124" /&gt;&lt;/P&gt;&lt;P class=""&gt;z2ui5_t_draft - the abap2UI5 persistence for interim results&lt;/P&gt;&lt;P&gt;Furthermore, these drafts help us jump back to previous states with minimal effort, reducing the complexity that we would typically encounter in an HDA scenario when implementing a cancel or exit event of a view. Similar to the HTTP-Service, these drafts are also defined only in a generic way, eliminating the need to manually create typed draft tables for every data model, as required in RAP, and reducing again the number of backend artifacts:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-27-um-23.30.50.png" border="0" width="444" height="255" /&gt;&lt;/P&gt;&lt;P class=""&gt;RAP vs. Single (generic) Draft Table in abap2UI5&lt;/P&gt;&lt;P&gt;With this approach, we achieve a stateful-like PAI/PBO feeling similar to SAP GUI apps, even though we are still operating within the AJAX roundtrip logic. Furthermore since every request can be made to a different application server, abap2UI5 is compatible with scalable cloud environments, ensuring compatibility for future use:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-29-um-11.53.23.png" border="0" width="513" height="283" /&gt;&lt;/P&gt;&lt;P class=""&gt;SAP GUI (stateful) vs. abap2UI5 (restful)&lt;/P&gt;&lt;P&gt;However, it is important to note that this feature should only be used for interim results and be cautious when serializing other parts of your app.&lt;BR /&gt;&lt;BR /&gt;We have gained a lot of flexibility with (9) (10) (11) (16), now the next sections will focus more on how the framework tries to reduce its complexity. Let's begin by taking a look at the initial request.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(17) Initial Request&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;The first GET request sends the artifacts of the UI5 (HDA) app to the browser. Typically, we would deploy a BSP to the ABAP stack for this, but in abap2UI5, the code is copied as a string into the implementation of the initial request of the HTTP-Handler:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-14.40.14.png" border="0" width="481" height="153" /&gt;&lt;/P&gt;&lt;P class=""&gt;index.html stored in ABAP Source Code instead of using a BSP&lt;/P&gt;&lt;P&gt;This provides us a 100% abapGit project that solely uses ABAP source code, making it easily installable on every ABAP system by eliminating the need for separated frontend artifacts or deployments.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;(18) Everything is maintained &amp;amp; developed in the Backend&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Considering the fact that all user apps are also in pure ABAP, we can now maintain and develop everything in the backend. Duplicating apps, making changes, renaming or other refactoring takes only a few moments. The deployment process is reduced to just activating an ABAP class, enabling us to create many apps in a short amount of time. For example, all the apps of the &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/tree/main/src/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;sample section&lt;/STRONG&gt;&lt;/A&gt; were created rapidly using mostly copy-pasting, which would have been unfeasible for separately developed and deployed frontend apps. This represents a significant reduction in complexity and an advantage of all 'Over the Wire' apps, as we observed in (3).&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(19) No Extra Layer &lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Another way to reduce complexity is by avoiding the creation of extra customizing layers. As shown in (13), there is only one stack call between the user's app and the HTTP-Handler, and there are no additional layers such as OData, SADL or Gateway. This allows us to bring the UI5 frontend framework and its functionality as pure as possible to the abap2UI5 apps in the backend.&lt;BR /&gt;&lt;BR /&gt;UI5 is evolving rapidly, and additional layers can quickly become outdated. With this approach, all UI5-Controls which will be released in the future will also be automatically useable in abap2UI5. However, a potential downside is that we have to deal with the complexity of the frontend UI5 API and learn the concepts of XML-Views and UI5 Controls. Ultimately, it comes down to personal preference whether you prefer to learn &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/cc0c305d2fab47bd808adcad3ca7ee9d/f8af07bb0770414bb38a25cae29a12e9.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;UI Annotations&lt;/STRONG&gt;&lt;/A&gt; or directly learn the concepts of &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/topic" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP UI5.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(20) No Hiding of Complexity&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;But not having an extra layer also means that the framework does not necessarily abstract away complexity, unlike what other frameworks aim for. In abap2UI5, the user directly sends his XML-View to the frontend and is responsible for ensuring that it is valid and executable:&lt;/P&gt;&lt;P class=""&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-20-um-16.36.26.png" border="0" width="504" height="83" /&gt;&lt;/P&gt;&lt;P class=""&gt;XML-View created by the user and ready for the 'Wire'&lt;/P&gt;&lt;P&gt;Luckily, we can significantly simplify the creation process by creating utility classes. For instance, by offering with &lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/z2ui5_cl_xml_view.clas.abap" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;z2ui5_cl_xml_view&lt;/STRONG&gt;&lt;/A&gt; a class-based approach to create views that provide access to the &lt;A href="https://sapui5.hana.ondemand.com/#/api" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;UI5 API&lt;/STRONG&gt; &lt;/A&gt;via ADT code completion:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-21-um-11.06.21.png" border="0" width="422" height="139" /&gt;&lt;/P&gt;&lt;P class=""&gt;z2ui5_cl_xml_view - UI5 API (frontend) used for Code Completion in ADT (backend)&lt;/P&gt;&lt;P&gt;This is in contrast to RAP, where you benefit of well-documented and organized extra layers, but sometimes they have limited functionality. Take side effects for example. In RAP, you are restricted to use the +, -, and * operators. In abap2UI5 you have to write JavaScript directly, which requires a lot more knowledge, but it provides the benefit of accessing the full expression binding functionality available at the frontend:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-20-um-16.22.14.png" border="0" width="497" height="78" /&gt;&lt;/P&gt;&lt;P class=""&gt;Expression Binding (Side Effects) in abap2UI5 - Mixture of ABAP and JavaScript&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(21) Separated _bind and _event method&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;In the &lt;A href="https://blogs.sap.com/2023/01/22/abap2ui5-project-development-of-ui5-selection-screens-in-pure-abap-no-app-deployment-or-javascript-needed/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;first approach&lt;/STRONG&gt;&lt;/A&gt; of this framework the event and data binding were included in every method call:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-19-um-12.56.13.png" border="0" width="446" height="170" /&gt;&lt;/P&gt;&lt;P class=""&gt;First approach - Data binding and events are not separated from the view&lt;/P&gt;&lt;P&gt;In the current approach, they are separated from the view and created using additional methods. Moreover, the entire process of data binding and transfer is automatically handled by the framework (9):&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-20-um-16.34.00.png" border="0" width="490" height="171" /&gt;&lt;/P&gt;&lt;P class=""&gt;Actual Approach - extra methods for the event and binding&lt;/P&gt;&lt;P&gt;This is a difference from many other UI rendering processes, where data and UI are usually imported together. Separating them here simplifies the view creation process, avoids data redundancies, and prevent the framework from becoming messy. The current approach has fewer lines of code than the &lt;A href="https://blogs.sap.com/2023/01/22/abap2ui5-project-development-of-ui5-selection-screens-in-pure-abap-no-app-deployment-or-javascript-needed/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;first approach&lt;/STRONG&gt;&lt;/A&gt; that only focused on selection screens, because the entire view creation process is clearly separated from the rest now and kept outside of the framework.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;(22) "Over the Wire" sending JS, HTML &amp;amp; CSS&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Furthermore we can also &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;add extra functionality&lt;/A&gt;&lt;/STRONG&gt; (JS, HTML, CSS) without extending the framework itself or changing the abap2UI5 frontend app. For instance, let's take the &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_app_demo_75.clas.abap" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;Upload Files App&lt;/STRONG&gt;&lt;/A&gt; as an example, which has its own custom control that is not part of the framework and is sent "Over the Wire" after calling the app:&lt;/P&gt;&lt;P class=""&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-19-um-12.52.40.png" border="0" width="487" height="183" /&gt;&lt;/P&gt;&lt;P class=""&gt;App delivering its own JavaScript "Over the Wire"&lt;/P&gt;&lt;P&gt;With any request there is the chance to sent own JavaScript or Custom Controls to the frontend. The abap2UI5 framework just sends it as it is to the frontend. All upcoming requests can now use this JavaScript for example to use Custom Controls in their UI5 Views:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-05-01-um-17.31.45.png" border="0" width="508" height="279" /&gt;&lt;/P&gt;&lt;P class=""&gt;abap2UI5 app sending custom Javascript to the client&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(23) As simple as possible&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;So, we have seen in (22), apps can be made very complex, but the opposite is also possible - we can make them extremely simple. One beautifully minimalistic approach is the use of if_oo_adt_classrun. By implementing just one method, we can generate an output with a single click (F9). This is extremely efficient and was one of the role models for abap2UI5. Here's a comparison of both approaches:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-23-um-21.13.40-1.png" border="0" width="403" height="245" /&gt;&lt;/P&gt;&lt;P class=""&gt;if_oo_adt_classrun vs. abap2UI5&lt;/P&gt;&lt;P&gt;To summarize what we have covered so far, abap2UI5 is built in a highly generic manner, placing most of the responsibility on the user's apps. As a result, we gain a a lot of flexibility and freedom in the app implementation, but we also have full responsibility for the view creation and the program flow. Furthermore we have to keep the following downsides in mind.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(24) Downsides compared to UI5 &amp;amp; RAP&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Most notably, compared to UI5, we cannot implement offline capabilities because in such a situation we cannot continuously ask the server after every event to determine what will happen next.&lt;BR /&gt;&lt;BR /&gt;Furthermore, using HANA DB capabilities directly at the frontend leads to problems. By using the same generic HTTP-Service for every app, we have decoupled the UI from the rest. However, in a RAP scenario, they use a typed OData and can directly touch HANA capabilities via a CDS View (and skip the ABAP layer). With this approach, pagination or fuzzy searchs can be easily integrated in UI5 freestyle or RAP apps. The combination of OData-Service directly calling a CDS View of HANA is extremely effective here.&lt;BR /&gt;&lt;BR /&gt;Of course, we can also select from CDS Views in an abap2UI5 app and send the result to the frontend. But implementing this manually requires more effort, and we cannot render a fuzzy search help at the frontend, because we are forced to replace the entire view after every request with this approach. As always, every advantage we gain with abap2UI5, such as flexibility in creating models, comes with a corresponding trade-off of lower functionality in other areas.&lt;BR /&gt;&lt;BR /&gt;Additionally Fiori Elements with all its floorplans &amp;amp; templates is very straightforward and will also get a lot of updates in the future. In the end the wide range of UI5 use cases makes a comparison of the different approaches very difficult and cannot bet finally discussed here. Now, let's continue to the last part of this blog post and take a closer look at the framework's code line.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(25) System Footprint&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;The system footprint is kept as small as possible, abap2UI5 is based only on ABAP classes without the use of CDS and RAP artifacts. Most of the coding is outside of the framework delegated to the user (21) (22). In total the framework consists only around of 2,300 lines of code, spread over one HTTP-Handler, two interfaces and one database table:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-17-um-13.53.27.png" border="0" width="410" height="134" /&gt;&lt;/P&gt;&lt;P class=""&gt;System footprint of abap2UI5&lt;/P&gt;&lt;P&gt;The entire framework logic is implemented in the HTTP-Handler class:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-24-um-15.03.53.png" border="0" width="434" height="322" /&gt;&lt;/P&gt;&lt;P class=""&gt;This is all that abap2UI5 does&lt;/P&gt;&lt;P&gt;The functionality focuses solely on the communication between the backend and frontend, controlling the application flow, and creating the view model. We saw the initial GET request in (17). The POST request is handled by this implementation:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-23-um-21.27.09.png" border="0" width="515" height="296" /&gt;&lt;/P&gt;&lt;P class=""&gt;AJAX Post Handler&lt;/P&gt;&lt;P&gt;In the end, we get a pure source code-based framework, which offers us the following possibility.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(26) Running Everywhere Apps&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Essentially, abap2UI5 generates two strings, one containing an XML-View and the other containing the JSON-View-Model. These strings are then transmitted to and from the frontend. As a result, there is no need for a high ABAP release, as this can be accomplished even with very old releases. This approach allows us to run on both the latest ABAP Cloud stack and on-premise systems, as well as very old releases, making it a release-independent solution. Additionally, we do not necessarily lose access to new UI5 features, as we have the option to bootstrap the UI5 framework at the frontend from a Content Delivery Network (CDN) and use the latest UI5 version even on very old releases:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-16.32.35.png" border="0" width="406" height="158" /&gt;&lt;/P&gt;&lt;P class=""&gt;Local Bootstrapping - UI5 version depends on the SAP release&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-16.32.41.png" border="0" width="412" height="213" /&gt;&lt;/P&gt;&lt;P class=""&gt;CDN Bootstrapping - UI5 version independent from the SAP release&lt;/P&gt;&lt;P&gt;As a result, abap2UI5 apps can also be developed to be portable across various SAP systems, releases, and environments. If an app is developed once on ABAP Cloud 2305, it can also be used on lower releases. Similarly, apps developed on older Netweaver releases can run on BTP ABAP Environment or S/4 Public Cloud ABAP Environment. However, for this compatibility to be possible, abap2UI5 and its apps need to be designed to work with both language versions, 'ABAP Cloud' and 'Standard ABAP'. To avoid redundancy, abap2UI5 tries to achieve this by using a single code line.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(27) One-Code-Line&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;With this approach, the use of dependencies is limited to cloud-released APIs and functions available in lower Netweaver releases simultaneously. To handle this, abap2UI5 only uses SAP dependencies when it is really needed -- for instance in the GUID creation:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Bildschirm­foto-2023-03-30-um-09.01.34.png" border="0" width="461" height="188" /&gt;&lt;/P&gt;&lt;P class=""&gt;GUID creation compatible to ABAP Cloud and Standard ABAP&lt;/P&gt;&lt;P&gt;As you can see, creating methods that are compatible with both 'ABAP Cloud' and 'Standard ABAP' is considerably more complex. Fortunately, abapUI5 only requires GUIDs as a dependency. However, when developing apps, you must be aware of this (and I have no experience if this is feasable). But in the end, it does have a key advantage: abap2UI5 runs on ABAP 2305 and is still portable down to NetWeaver v702.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;(28) Compatibility &amp;amp; Downporting&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Downporting abap2UI5 code normally would result in a release that is difficult to maintain and debug. To avoid this, abap2UI5 is divided into two repositories: a &lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;main repository&lt;/STRONG&gt;&lt;/A&gt; (compatible from NW 7.50 to ABAP 2305) and a &lt;A href="https://github.com/abap2UI5/abap2UI5-downport" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;downport repository&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;(compatible down to NW 7.02).&lt;BR /&gt;&lt;BR /&gt;The low-syntax branch is automatically generated using &lt;A href="https://abaplint.app/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;abaplint&lt;/STRONG&gt;&lt;/A&gt;. The separate branch enables development with all new ABAP expressions available since ABAP v750 while still ensuring that all abap2UI5 features added in the future are automatically downported and available for ABAP v702.&lt;BR /&gt;&lt;BR /&gt;The functionality of automated ABAP downporting is impressive and greatly improves efficiency. Check out the &lt;A href="https://abaplint.app/stats/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;abaplint dashboard&lt;/STRONG&gt;&lt;/A&gt; of this project.&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;Besides &lt;STRONG&gt;&lt;A href="https://abaplint.app/" target="_blank" rel="noopener nofollow noreferrer"&gt;abaplint&lt;/A&gt;&lt;/STRONG&gt; this framework uses &lt;A href="https://abapgit.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;abapGit&lt;/STRONG&gt;&lt;/A&gt; and benefits from the work &lt;A href="https://abapgit.org/sponsor.html" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;STRONG&gt;of the people who built it:&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/Bildschirm­foto-2023-04-28-um-17.04.22.png" border="0" width="483" height="157" /&gt;&lt;/P&gt;&lt;P class=""&gt;abap2UI5 runs on every system with abapGit &amp;amp; abaplint&lt;/P&gt;&lt;H3 id="toc-hId-895661315"&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Long blog post short: Inspired by "HTML Over the Wire" (1)(2)(3) we mixed UI and Data together (7) and created an "UI5 Over the Wire" approach by sending the XML-View from the server (6). Then we used a single generic HTTP-Service for all apps (13) independent from the View and Data Model (12). It provides us with great flexibility allowing us to dynamically create Data Models (10) and Views (11) at runtime, resulting in a significantly reduced number of backend artifacts.&lt;/P&gt;&lt;P class=""&gt;Next, we explored various ideas on how the framework reduces its own complexity by avoiding frontend artifacts (17), eliminating extra customizing layers (19), and separating the view from the framework (21), as well as app-specific JS or HTML (22). Finally, we got a pure source code approach with only one database table, two interfaces, one class and just 2,300 lines of code (25). It is developed in a single code line (27), making it cloud and on-premises ready and downportable to old releases (28). Its apps in combination with abapGit can be developed that they are running on nearly every release (29).&lt;BR /&gt;&lt;BR /&gt;All in all, with abap2UI5, you need to disregard some common rules: there is no separation between View and Model in the HTTP communication (12), HTML &amp;amp; JavaScript are stored directly in the source code (17) (22), we don't use OData or RAP (7) and there are other downsides to consider (24). However, if you accept all of this, you get a very minimalistic approach where you only need to implement a single method to develop standalone UI5 applications (15).&lt;/P&gt;&lt;H3 id="toc-hId-699147810"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;Going into this, I had no idea whether or not this idea would be interesting or find its audience. It surprised me how many people were installing it, and it really inspired me to keep putting ideas into the project over the past couple month. I’m not sure how many of these apps will find themselves in a productive system or if they’ll just stay as testing or tooling for developers, but regardless I hope working with abap2UI5 has been fun. I’d like to thank everyone who was willing to give this approach a try and 'hop over the wire'. &lt;span class="lia-unicode-emoji" title=":upside_down_face:"&gt;🙃&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;In the&lt;STRONG&gt;&amp;nbsp;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;next part&lt;/A&gt;,&lt;/STRONG&gt; we will see how the project is organized on GitHub with the tools abapGit, open-abap and abaplint.&lt;BR /&gt;&lt;BR /&gt;Thank you for reading! Your questions, comments and wishes for this project are always welcome, leave a comment or create an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-7-technical-background-under-the-hood-of-abap2ui5/ba-p/13566459"/>
    <published>2023-04-26T10:37:54+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/error-quot-person-already-hired-quot-while-replicating-employee-master-data/ba-p/13551949</id>
    <title>Error "Person Already Hired" While Replicating Employee Master Data From SAP SuccessFactors Employee Central To SAP S/4HANA Or SAP ERP HCM System.</title>
    <updated>2023-06-11T09:29:51+02:00</updated>
    <author>
      <name>zainabfatima28</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/117288</uri>
    </author>
    <content>&lt;SPAN style="font-weight: 400"&gt;Hello Reader,&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;How are you? I hope you are fine. Today I will be sharing with you one of the reasons of the error “person already hired” while trying to replicate the Employee Master data from SAP SuccessFactors Employee Center to SAP S∕4HANA . If you are an Integration Consultant and you are a beginner at Replication of Employee Master Data from SAP SuccessFactors Employee Center to SAP S∕4HANA then this blog is for you. Even if you have a little bit of experience, you can also read the blog and provide any comments or suggestions about the topic and also provide your valuable feedback.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;So let us start the blog.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;If you are integrating the SAP SuccessFactors Employee Center with the On-premise SAP S∕4HANA system then the first step is data migration. You first need to migrate the existing employee master data and organizational data from SAP S∕4HANA to SAP SuccessFactors Employee Central. It is strongly recommended to use standard SAP Infoporter tool for the migration in order to avoid any errors while replicating back the employee master data to SAP S∕4HANA.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;But you can also migrate the data by custom approach for example by CSV import of all data into SAP SuccessFactors Employee Central. Which in turn can cause problems while replicating master data back to SAP S/4HANA.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Why not using an SAP infoporter tool can cause problems?&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;When we use the standard SAP infoporter tool for migration of data from SAP S/4HANA to SAP SuccessFactors Employee Central, all the employees that we migrate from SAP S/4HANA to SAP SuccessFactors Employee Central will have their PERNR ( employee id / userId) stored in a Employee Key mapping table (ECPAO_EE_KMAP). So that when we run the replication of all employees from SAP SuccessFactors Employee Central to SAP S/4HANA, the existing PERNR are utilized instead of assigning new PERNR.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;If you do not use the standard approach for migration of data then the Employee Key mapping table would not get populated. When we run the replication of all employees from&amp;nbsp; SAP SuccessFactors Employee Central to SAP S/4HANA, all the employees will try to create a new PERNR in SAP S/4HANA. But for employees that already exist in SAP S/4HANA with the same PERNR, the replication process would throw an error that says “person already hired”.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Now you are not trying to rehire the employee but still you are getting this error. This is because when the system is checking for the PERNR in employee key mapping table (ECPAO_EE_KMAP), it does not find it so the program considers it as a new employee so it tries to hire it in the system but since the employee already exist in the system, it will resist and hence throw the error “person already hired” ( as shown in screenshot below).&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/Untitled-1.jpeg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Error person already hired&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&lt;STRONG&gt;Resolution:&lt;/STRONG&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Now that you have used a custom approach to migrate the data from SAP S/4HANA to SAP SuccessFactors Employee Central and you do not have any entries in employee key mapping table (ECPAO_EE_KMAP) for the existing employees in SAP S/4HANA, you would have to populate the ECPAO_EE_KMAP table for all the employees that already exist in SAP S/4HANA.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Since there is no standard report for this, you would need to create a custom report to fill this data in the ECPAO_EE_KMAP table. You can check the table in transaction se16 and then search for ECPAO_EE_KMAP table.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Now try to replicate the employee master data, you will no longer get the error “person already hired”.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Conclusion:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In this article, we can conclude that we should always follow the standard approach (Infoporter) while migrating data from SAP S/4HANA system to SAP SuccessFactors Employee Central. But if you have already followed the custom approach, we still have a work around as given in this blog.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Similar articles:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://userapps.support.sap.com/sap/support/knowledge/en/2758271" target="test_blank" rel="noopener noreferrer"&gt;https://userapps.support.sap.com/sap/support/knowledge/en/2758271&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://answers.sap.com/questions/209772/employee-key-mapping-from-ec-to-sap.html" target="test_blank" rel="noopener noreferrer"&gt;https://answers.sap.com/questions/209772/employee-key-mapping-from-ec-to-sap.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading this blog. Please comment if you have any queries, also share your valuable feedbacks.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thank you,&lt;BR /&gt;
&lt;BR /&gt;
Zainab Fatima</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/error-quot-person-already-hired-quot-while-replicating-employee-master-data/ba-p/13551949"/>
    <published>2023-06-11T09:29:51+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/how-to-provide-developer-access-key-object-keys-in-sap/ba-p/13561909</id>
    <title>How to provide Developer Access Key/ Object Keys in SAP</title>
    <updated>2023-06-19T15:44:50+02:00</updated>
    <author>
      <name>former_member778236</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/778236</uri>
    </author>
    <content>&lt;DIV&gt;&lt;BR /&gt;
&lt;BR /&gt;
My Second Blog post!&lt;BR /&gt;
&lt;BR /&gt;
In this blog, I will explain on how to generate developer keys or object access keys &amp;amp; also explain on the below topics:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;What is Developer Key&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;What is Object Key&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Which table stores them?&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;STRONG&gt;Developer Key:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Developer key is required to register user as developer in SAP service marketplace so that they perform customization in SAP system. Whenever developer try to create and changes program (or) object, it will ask to enter developer key to perform the changes.&lt;BR /&gt;
&lt;BR /&gt;
There are two types of objects:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Repository Objects&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Customer specific objects&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Changing a repository object requires you both Developer Key and Object Key (also called as Object Access Key, Developer Access Key).&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Object Access Key:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
For every object you change it will ask for an &lt;STRONG&gt;Object Access key&lt;/STRONG&gt;, with which can change SAP source or SAP dictionary object; this task is in general done by Basis team. User sends a request to Basis team for generating the key.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Note: In some cases, security team provides Developer access key or object key.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The developer key is issued by SAP for an individual developer user account, and Object access keys are issued for the development object that needs to be changed.&lt;BR /&gt;
&lt;BR /&gt;
However, changing a program /object starting Z* i.e. customer specific object, you just need a developer key.&lt;BR /&gt;
&lt;BR /&gt;
It can be access in Service Market Place at&amp;nbsp;&lt;A href="http://service.sap.com/sscr" target="_blank" rel="noopener noreferrer"&gt;http://service.sap.com/sscr&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;STRONG&gt;Steps to register developer key:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;1. Select&amp;nbsp; &lt;STRONG&gt;Launch the SCCR Application,&amp;nbsp;&lt;/STRONG&gt;a new dialog box appears to enter S-User ID &amp;amp; password. Security/basis people will logon with their S-User ID credentials.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;2. On the left pane--&amp;gt; you will see the option&amp;nbsp;&lt;STRONG&gt;Developer--&amp;gt;&amp;nbsp;&lt;/STRONG&gt;click on developer.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;3. On the below right screen, you will see an option to register developer. Click on&amp;nbsp;&lt;STRONG&gt;Register&amp;nbsp;&lt;/STRONG&gt;button. A pop-screen will appear.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;4. Enter the user ID, whose ID needs to registered as a developer &amp;amp; in the below tab select the SAP system installation number.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;5. SAP installation number can be find from SAP system --&amp;gt;&lt;STRONG&gt;status screen.&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;6.Once the details are filled, click on submit to complete the process.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;7. You will get a message on top screen that the developer is register successfully &amp;amp; you can see the developer key in the message. copy &amp;amp; provide these details with the user.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;Developer access key details are stored in a&amp;nbsp;&lt;STRONG&gt;DEVACCESS&amp;nbsp;&lt;/STRONG&gt;table if user is already registered as a developer for a particular SAP system.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;Execute SE16 t-code --&amp;gt; enter the table&amp;nbsp;&lt;STRONG&gt;DEVACCESS--&amp;gt;&amp;nbsp;&lt;/STRONG&gt;Enter the User ID &amp;amp; execute to see the DEV key details for the user.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;STRONG&gt;Steps to register Object key:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;1. Select&amp;nbsp; &lt;STRONG&gt;Launch the SCCR Application,&amp;nbsp;&lt;/STRONG&gt;a new dialog box appears to enter S-User ID &amp;amp; password. Security/basis people will logon with their S-User ID credentials.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;2. On the left pane--&amp;gt; you will see the option&amp;nbsp;&lt;STRONG&gt;Objects--&amp;gt; &lt;/STRONG&gt;click on object button.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;3. On the below right screen, you will see an option to register object keys. Click on &lt;STRONG&gt;Register&amp;nbsp;&lt;/STRONG&gt;button. A pop-screen will appear.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;4. Enter the Basis release details, Program ID, Type &amp;amp; Object name details received from user &amp;amp; select the installation number.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;5. SAP installation number can be find from SAP system --&amp;gt;&lt;STRONG&gt;status screen.&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;6.Once the details are filled, click on submit to complete the process.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;7. You will get a message on top screen that the Object key is register successfully &amp;amp; you can see the &lt;STRONG&gt;object key&lt;/STRONG&gt; in the message. copy &amp;amp; provide these details with the user.&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;STRONG&gt;Tables storing them:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;Developer access key details are stored in a&amp;nbsp;&lt;STRONG&gt;DEVACCESS&amp;nbsp;&lt;/STRONG&gt;table if user is already registered as a developer for a particular SAP system.&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;Execute SE16 t-code --&amp;gt; enter the table&amp;nbsp;&lt;STRONG&gt;ADIRACCESS--&amp;gt; &lt;/STRONG&gt;Enter the Program ID, Type &amp;amp; Object name &amp;amp; execute to see the DEV key details for the user.&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;EM&gt;&lt;A href="https://launchpad.support.sap.com/#/notes/2501703" target="_blank" rel="noopener noreferrer"&gt;2501703&lt;/A&gt;&amp;nbsp;- Frequently asked questions about SAP Software Change Registration (SSCR)&lt;/EM&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;BR /&gt;
I hope in this blog you have learned what is a developer key or object access key, the steps to generate them &amp;amp; the tables storing them.&lt;BR /&gt;
&lt;BR /&gt;
In case you have any queries, leave a comment below. I will help you.&lt;BR /&gt;
&lt;BR /&gt;
Or you can post your questions in our community &lt;A href="https://answers.sap.com/tags/01200615320800000659" target="_blank" rel="noopener noreferrer"&gt;Ask Questions&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/how-to-provide-developer-access-key-object-keys-in-sap/ba-p/13561909"/>
    <published>2023-06-19T15:44:50+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/what-is-condition-update-in-sap-sd/ba-p/13578396</id>
    <title>What is Condition Update in SAP SD</title>
    <updated>2023-08-12T16:36:00+02:00</updated>
    <author>
      <name>meghnadwivedi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/665152</uri>
    </author>
    <content>&lt;P id="f24b" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;As an SAP SD consultant, I come across many such magical configurations and settings after analyzing the screens day in and day out. Here are my findings for all SAP Consultants out there, making their life easier.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="303a" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;So, today we are going to talk about the use of "Condition Update" in SAP SD. This is one of the most commonly asked questions in SAP SD Interviews too.&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Pre-req: You should be well aware of SAP SD Pricing Procedure configuration and assignment.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="356c" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;What does every SAP Consultant know?&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;"Condition Update" is one of the characteristics of "Condition Type" that helps control discounts. It lets us set limits on how much discount or how many orders can get a particular discount. It's useful to manage discounts and make sure they are used the way we want.&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Now what is Condition Type? Condition type is an element assigned to each category of pricing element while setting up the pricing. For eg: Freight, Discount, Surcharge, Tax, List Price, Min Order Charge, etc are all different type of pricing elements that sums up to reach the final price for a product. These are all Condition Types. Enough of condition type! (Tcode: V/06) Can we get back to the original topic? CONDITION UPDATE!&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;So, the condition update is a boolean attribute that can be checked or unchecked in the Condition Type configuration screen. This attribute sets a limit on Condition type based on the below restrictions:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Maximum Cond. Value&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Maximum Number of Sales Orders&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Maximum Cond. Base Value&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
If either of the above settings is maintained then the condition type would behave according to it. If Max. cond. value is reached then the condition type would not trigger an additional discount.&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Which information do SAP Consultants miss out on?&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Well, all of the above makes sense, but how does it work in action? How system identifies that the above condition type is not applicable anymore as it had a "condition update" setup as per either of the three criteria?&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Let's dive deeper.&lt;/P&gt;&lt;BR /&gt;
&lt;P data-selectable-paragraph=""&gt;Condition Update in action:&lt;/P&gt;&lt;BR /&gt;
As we enable this "Condition Update" configuration in the condition type config screen, its impact would be visible while maintaining the condition record (Tcode: VK13). Each condition record created for the above condition type would have the option to set up any of the below three condition update settings.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Maximum Condition Value:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
For Example: if we set up a Maximum Condition Value of 100 Euros in the discount condition record for a discount condition type, that means this condition type would be triggered in orders and show the corresponding discount condition value till the maximum discount of 100 Euros is not reached. If the discount condition value comes out to be more than 100 Euros, then the discount condition value will reflect a maximum discount of 100 Euros only and not the expected discount of 125 Euros.&lt;BR /&gt;
&lt;BR /&gt;
MRP of Heater: 100 Eu&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 167pt" width="222"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 84pt;height: 15.0pt" width="112" height="20"&gt;Discount scheme&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 83pt" width="110"&gt;25 Eu per heater&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Max Cond. Value&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;100 Eu&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 368pt" width="491"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 84pt;height: 15.0pt" width="112" height="20"&gt;Transactions&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;Prod&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;Qty&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;MRP&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" style="width: 48pt" width="64"&gt;Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 92pt" width="123"&gt;Expected Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Order 1&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;5&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;500&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" align="right"&gt;100&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl68" align="right"&gt;&lt;EM&gt;&lt;STRONG&gt;125&lt;/STRONG&gt;&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Order 2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;200&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl69" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Real-time scenario: If you buy a heater from us, you will get a discount of 2000 per piece maximum of up to 10000 Rs.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Maximum Number of sales orders:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
For Example: If the Maximum Number of sales orders = 2 for X001 condition type.&lt;BR /&gt;
&lt;BR /&gt;
The condition type X001 would not trigger from the 3rd order onwards which would have otherwise expected.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 170pt" width="227"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 18.75pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 88pt;height: 18.75pt" width="117" height="25"&gt;Discount Scheme&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 83pt" width="110"&gt;25% per heater&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Max no. of orders&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;2&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 368pt" width="491"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 84pt;height: 15.0pt" width="112" height="20"&gt;Transactions&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;Prod&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;Qty&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 48pt" width="64"&gt;MRP&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" style="width: 48pt" width="64"&gt;Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 92pt" width="123"&gt;Expected Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Order 1&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;5&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;500&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" align="right"&gt;125&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl68" align="right"&gt;125&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Order 2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;200&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl69" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15.0pt" height="20"&gt;Order 3&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;1&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" align="right"&gt;100&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" align="right"&gt;0&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl69" align="right"&gt;&lt;EM&gt;&lt;STRONG&gt;25&lt;/STRONG&gt;&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Real-time scenario: 50% discount for the first three orders.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Maximum Cond. Base Value:&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
It is named as Base value but it is actually a quantity indicator.&lt;BR /&gt;
&lt;BR /&gt;
For Example: If we set up a Maximum Cond. base Value of 10 Each for a discount condition type X001. That means this condition type would be triggered in orders and show the corresponding discount till the maximum discount of 10 quantities of that line item is not reached. If the quantity comes out to be more than 10 Each, then the discount condition value will reflect a maximum discount of 10 quantities only and not what is otherwise expected.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 411px;height: 60px" width="331"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 18.75pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 181px;height: 18.75pt" height="25"&gt;Discount Scheme&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 264px"&gt;10 Eu Discount per heater for 10 heaters&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15pt;width: 181px" height="20"&gt;Max Cond. Base value&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 264px" align="right"&gt;10&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 368pt" width="491"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 112px;height: 15pt" width="112" height="20"&gt;Transactions&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 65px" width="64"&gt;Prod&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 63px" width="64"&gt;Qty&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 64px" width="64"&gt;MRP&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" style="width: 66px" width="64"&gt;Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 183px" width="123"&gt;Expected Discount&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15pt;width: 112px" height="20"&gt;Order 1&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 65px"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 63px" align="right"&gt;12&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 64px" align="right"&gt;1200&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" style="width: 66px" align="right"&gt;100&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl68" style="width: 183px" align="right"&gt;&lt;EM&gt;&lt;STRONG&gt;120&lt;/STRONG&gt;&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 15.0pt"&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="height: 15pt;width: 112px" height="20"&gt;Order 2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 65px"&gt;Heater&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 63px" align="right"&gt;5&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl16" style="width: 64px" align="right"&gt;500&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl67" style="width: 66px" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;TD class="xl69" style="width: 183px" align="right"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Real-time scenario: If you buy a laptop from us, you will get Rs.1000 discount per laptop for the first 4 quantities.&lt;BR /&gt;
&lt;BR /&gt;
Now how system remembers these updates like 9 quantities are ordered and now only 1 more quantity can have a discount. Post that, stop giving discounts. That is stored in an info structure: S071 (Tcode: OMO1, Table: S071). Orders containing that condition type (with condition update) would be recorded in this info structure and the same record would keep updating and help determine the restriction during sales order creation.&lt;BR /&gt;
&lt;BR /&gt;
Wait a sec, What is info structure? How it's different than regular tables? Well! info structure is again a table but is maintained for a different purpose. This table is created for operative purposes, that stores data along with frequency. Three main fields of info structure are period units, characteristics, and key figures. Period stores frequency like a day week, month, etc, and characteristic is master data that stores data like plant, company code. etc and key figures store transactional data like sales volume, value, etc. Want to know more? click &lt;A href="https://blogs.sap.com/2013/05/31/information-structures-in-sap/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Key Pointers:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;This config. is generally used during NPI (New Product introduction) when the seller tries to increase product adoption. So, you might not find it used often.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;For percentage condition types (like K007), Maximum Cond. Base Value - Condition Update setting is not present as a parameter to restrict condition types.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Gap: SAP ECC allows only "01"-"03" as input for the "Maximum Number of Orders" field. For more than that, additional ABAP changes (code changes) would be required.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generally, "Maximum Cond. Value" is utilized for providing discounts. So when you maintain it in the VK13 condition record, make sure you input "-" minus along with the amount and unit of measurement as well.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;"Maximum Number of sales orders" is generally used for the condition types where "Calculation type" is equal to a percentage (Calcul. Type: A).&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;"Maximum Cond. Base Value" does not work for the condition types where "Calculation type" is equal to a percentage (Calcul. Type: A).&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Pricing Tables-fields: Maximum Cond. Value = KONP-KOMXWRT, Maximum No. of Orders = KONP-ANZAUF, Maximum Cond. Base Value = MXKBAS.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;P id="44fb" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;I hope this will help you. Please leave comments in case I missed anything.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="d6c3" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;Thank you.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="82a3" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;Happy learning &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/what-is-condition-update-in-sap-sd/ba-p/13578396"/>
    <published>2023-08-12T16:36:00+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/what-is-sales-area-in-sap-sd/ba-p/13578941</id>
    <title>What is Sales Area in SAP SD?</title>
    <updated>2023-08-15T11:22:18+02:00</updated>
    <author>
      <name>meghnadwivedi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/665152</uri>
    </author>
    <content>This is probably the first thing you learn when you start with SAP SD Module. I know there are many articles, blogs, and videos on this topic and you probably would think what else this article is going to offer?&lt;BR /&gt;
&lt;BR /&gt;
Well! Stay with me for a few more minutes.&lt;BR /&gt;
&lt;BR /&gt;
Let's start with:&lt;BR /&gt;
&lt;BR /&gt;
What does every SAP Consultant know?&lt;BR /&gt;
&lt;BR /&gt;
In simple terms, Sales Area = Sales Org + Dist. Channel + Division. We maintain this assignment in SPRO.&lt;BR /&gt;
&lt;BR /&gt;
By definition, Sales Area is a combination of three organizational units that define customer and material reach. It excludes non-required or unfeasible combinations of different organizational units. It looks pretty simple, but what if I tell you have missed a lot of things?&lt;BR /&gt;
&lt;BR /&gt;
Components of Sales Area:&lt;BR /&gt;
&lt;BR /&gt;
Sales Org: It is an organization unit that sells, distributes, and negotiates terms of sales for products.&lt;BR /&gt;
&lt;BR /&gt;
Distribution Channel: This is a channel via which products/services reach customers. For e.g.: Retail, Online, E-commerce, and direct sales.&lt;BR /&gt;
&lt;BR /&gt;
Division: It is a grouping of broad categories of products in one organization unit. For every division, you can make customer-specific agreements on, for example, partial deliveries, pricing, and terms of payment.&lt;BR /&gt;
&lt;BR /&gt;
Which information do SAP Consultants miss out on?&lt;BR /&gt;
&lt;BR /&gt;
The Sales Area assignment sets the base of your ERP Implementation. Most of the companies which are already on SAP ERP have this assignment in place and would rarely change it. The scenario where a company would need a new Sales Area assignment would be during introducing a new Distribution Channel or introducing a new division of products.&lt;BR /&gt;
&lt;BR /&gt;
Sales Area is more than just an assignment. We should define sales areas considering a lot of factors like Pricing Strategy, Legal observation, Business Practices, etc. It touches every point of the Order to Cash (OTC) cycle from quotation to revenue recognition. &lt;SPAN style="font-size: 1rem"&gt;Let's dive deeper to understand how Sales Area and its associated data impacts on overall organization's ERP setup:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
What all gets Influenced by the Sales Area:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Pricing: One of the most important impacts of the Sales Area is on product pricing strategies. We can maintain different product pricing in different Sales Areas. We can configure SAP Sales order pricing for the same product &amp;amp; customer based on &lt;STRONG&gt;Sales Area.&amp;nbsp;&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Master Data Defaults: There are some sales region-specific attributes that should be present in the system prior to successful order processing. We store all these customer-specific attributes in Customer Master Data (Tcode: VD03) and material-specific attributes in Material Master Data (Tcode: MM03) under Sales Area Specific section. If plan to create only Sale Area but you see a lot of multi-valued attributes and you cannot fit them all under one sales area, then probably you should go back and check if you need to create one more sales area? Some examples of these attributes are: Customer Group, Sales District, Default Currency, Terms of payment, Invoicing Dates, Shipping conditions, Delivery priority, Business Partners, Material Group, Unit of measurement, Tax settings, etc. This information gets defaulted in the sales order as per your selection of Sales Area but can be modified in the sales order manually if needed. Remember, changing important parameters like tax setting, and incoterm in sales orders will re-trigger the order pricing.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Reporting: Sales Area is your first differentiator in all your business reports. Be it sales orders created in the past month, or orders invoiced in the past year, sales area becomes one of the most important factors for business reports.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Sales Order Processing: Each sales order you process in SAP requires Sales Area as a pre-requisite. So when you provide a sales area, you narrow down the region &amp;amp; rules in which customers and materials should transact.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Shipping &amp;amp; Deliveries: You would say that shipping point determination is determined based on the storage location, delivering Plant, and loading group. So the Sales area is not directly involved. However, one attribute, "Delivering Plant" is determined from Master Data - Sales Area tab. Delivery attributes for the same customer may vary for each sales region and hence we should have sales area data as an umbrella to hold all sales region-specific master data attributes.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Credit Management: Credit limits, exposure, and risk categories may vary per sales region.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Localization&lt;STRONG&gt;:&lt;/STRONG&gt; Sales Area Data allows localization of sales operations, considering local business practices, languages, and legal requirements.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Compliance and Legal Requirements: Different sales areas might have unique legal and compliance requirements, which can be managed effectively through sales area data.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Listings &amp;amp; Exclusions (L&amp;amp;E): When any organization receives an order to produce a product exclusive to a particular client, then they would have to hide that product from other clients. In that case, you use the L&amp;amp;E feature in SAP. This feature allows you to set the rules based on Sales Area.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Intercompany Sales: This is an internal sale between two wings of the same company. In this scenario, the purchasing company should be extended to the Sales Area of the Selling Company.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Remember: Once you create Sales Area Data in Customer or Material Master, you can not delete it.&lt;BR /&gt;
&lt;P id="44fb" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;I hope this will give you a holistic perspective.&lt;/P&gt;&lt;BR /&gt;
&lt;P class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;For Sure, I am missing many more such Sales Area dependencies. Please add them to the comments.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="82a3" class="pw-post-body-paragraph abw abx wu nj b aby abz aca acb acc acd ace acf mt acg ach aci my acj ack acl nd acm acn aco acp jy bp" data-selectable-paragraph=""&gt;Happy learning&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/what-is-sales-area-in-sap-sd/ba-p/13578941"/>
    <published>2023-08-15T11:22:18+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-8-repository-organization-working-with-abapgit-abaplint-open-abap/ba-p/13562086</id>
    <title>abap2UI5 - (8) Repository Organization: Working with abapGit, abaplint &amp; open-abap</title>
    <updated>2023-08-21T08:07:06+02:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 8 of this blog series introducing &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;abap2UI5&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;— an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
This post delves into the repository organization of abap2UI5 and its utilization of &lt;STRONG&gt;&lt;A href="https://github.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;GitHub&lt;/A&gt;&lt;/STRONG&gt;, &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt;, &lt;STRONG&gt;&lt;A href="https://abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abaplint&lt;/A&gt;&lt;/STRONG&gt; and &lt;STRONG&gt;&lt;A href="https://github.com/open-abap" target="_blank" rel="nofollow noopener noreferrer"&gt;open-abap&lt;/A&gt;&lt;/STRONG&gt;. In my prior experience, I was mainly working on projects following classic CTS and only occasionally using abapGit to pull in open-source projects. However, this project offered a valuable opportunity to understand how to establish a thoroughly tested Git repository for the ABAP community, and it was a great learning experience! While seasoned ABAP developers might be familiar with these tools, my aim is to introduce them to those less acquainted with them.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;This post will lead you through the abap2UI5 repository setup, step by step, beginning with abapGit, and then progressively introducing additional settings and tools.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can find all the information about this project on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;and stay up-to-date by following on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter.&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;Also, make sure to explore the other articles in this blog series.&lt;BR /&gt;
&lt;TABLE border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;
&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This post covers the following areas:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Git - GitHub &amp;amp; abapGit&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;GitHub - Working with Separated Branches&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;abaplint - Syntax Check &amp;amp; Code Compatibility&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;abaplint - Static Code Analysis&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;abaplint - Quickfixes&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;abaplint - Cross Checks&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;abaplint - Dashboard&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;GitHub - Contribution with Forks &amp;amp; Pull Requests&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;GitHub - Branch Protection&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;open-abap - Downport Functionality&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;open-abap - Unit Testing&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;open-abap - abap2UI5-web&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Conclusion&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let’s begin with the first topic.&lt;BR /&gt;
&lt;H3 id="toc-hId-1092051902"&gt;&lt;STRONG&gt;1. Git - GitHub &amp;amp; abapGit&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The codebase of abap2UI5 is version-controlled in a public Git repository on &lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;GitHub&lt;/STRONG&gt;.&lt;/A&gt; This means that the code is not managed on an SAP system, as is typically done with ABAP projects and from where it can be transported to other systems. Instead, it is centrally stored in a public repository, allowing the current state of the project to be accessible at any time to everyone and installable on any system:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-15.41.20.png" height="225" width="386" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Public Repository of abap2UI5&lt;/P&gt;&lt;BR /&gt;
Before making changes, the current code state is initially pulled (downloaded) onto a private ABAP system and after implementing the changes, the updated code is always pushed back to the public GitHub repository. The current coding state on the ABAP system is thus used solely as temporary storage:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-20-um-21.47.09.png" height="136" width="462" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Code Changes of the public abap2UI5 repository&lt;/P&gt;&lt;BR /&gt;
And the leading and authoritative code version is the one stored on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-15.43.43.png" height="209" width="391" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/z2ui5_cl_fw_app_hello_world.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;Source Code&lt;/A&gt;&lt;/STRONG&gt; of abap2UI5&lt;/P&gt;&lt;BR /&gt;
In addition to public accessibility, this approach offers the advantage that the entire project exists independently of an ABAP system, and changes can be developed periodically on various systems, such as shared ABAP Cloud Trial, ABAP Dev Edition, or S/4. For instance, a significant portion of the project was created using the shared ABAP Cloud Trial on which you cannot guarantee that no one will modify your code or that your changes won't be removed after a few days. But storing the code on GitHub solves this concern.&lt;BR /&gt;
&lt;BR /&gt;
Furthermore, all the features of GitHub can now be utilized. To highlight just two examples, take a closer look at the &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/issues" target="_blank" rel="nofollow noopener noreferrer"&gt;issue management&lt;/A&gt;&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-15.50.10.png" height="240" width="421" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Overview of Issues&lt;/P&gt;&lt;BR /&gt;
Or tracking code changes with the &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/commits/main" target="_blank" rel="nofollow noopener noreferrer"&gt;commit history&lt;/A&gt;&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-15.51.49.png" height="236" width="410" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Commit History&lt;/P&gt;&lt;BR /&gt;
This significantly enhances the transparency of the entire project! Changes can be retraced, actual problems are documented in issues, new requirements can be collected and evaluated. This is only possible because of the open-source project &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt;, which integrates every ABAP system from version 702 and higher with GitHub.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-15.53.33.png" height="89" width="299" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abapGit - Git Client for ABAP&lt;/P&gt;&lt;BR /&gt;
If you're new to Git and &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt;, the following &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2017/06/21/abapgit-so-easy/" target="_blank" rel="noopener noreferrer"&gt;blog post&lt;/A&gt;&lt;/STRONG&gt; is a good starting point. A big thank you to this excellent tool and and the &lt;STRONG&gt;&lt;A href="https://abapgit.org/sponsor.html" target="_blank" rel="nofollow noopener noreferrer"&gt;team&lt;/A&gt;&lt;/STRONG&gt; behind it.&lt;BR /&gt;
&lt;H3 class="p1" id="toc-hId-895538397"&gt;&lt;STRONG&gt;2. GitHub - Working with Separated Branches&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Given this setup, a question arises: what happens when I pause my work and fail to complete my current task? It's possible that I've just begun making a change but have been unable to test and finish it, which leaves the code in an incomplete state. Pushing this into the main branch would result in a scenario where everyone could potentially download a non-functional abap2UI5 version containing errors.&lt;BR /&gt;
&lt;BR /&gt;
To address this, the code within each git repository can be segmented into multiple branches. For simplicity, we'll only divide the repository into two branches now. The initial repository stands as our main branch, housing the latest functioning "stable" version and remains available for others to download. The second branch assumes the role of a &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/tree/_dev" target="_blank" rel="nofollow noopener noreferrer"&gt;development branch&lt;/A&gt;&lt;/STRONG&gt; ("dev"), which is a duplicate of the code and is intended for active changes:&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-09.55.56.png" /&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Separated Development Branch for working on a New Feature&lt;/P&gt;&lt;BR /&gt;
The "dev" branch contains the changes until the new feature is ready. Upon completion, it is merged into the main branch with a Pull Request (PR), making the feature accessible to everyone:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.18.06.png" height="250" width="433" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub Pull Request - Incorporating Changes from the Dev Branch into the Main Branch&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-09.57.39.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Repository after Merge - Both Branches Now Contain the Updated Source Code&lt;/P&gt;&lt;BR /&gt;
As you can see the separate branch ensures that only finalized and tested features find their way into the main branch.&lt;BR /&gt;
&lt;H3 id="toc-hId-699024892"&gt;&lt;STRONG&gt;3. abaplint - Syntax Check and Code Compatibility&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
But how can we guarantee that the code we push to the main branch, tested on one system, will function across all the other ABAP systems it's downloaded to?&lt;BR /&gt;
&lt;BR /&gt;
As previously mentioned, a significant portion of abap2UI5 is developed on a shared ABAP Cloud Trial System, containing types and functions that are unavailable on lower releases like NetWeaver v7.50. Additionally, there are two language flavors: 'Standard ABAP' and 'ABAP for Cloud,' both requiring consideration. Fortunately, the open-source project &lt;A href="https://abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abaplint&lt;/STRONG&gt;&lt;/A&gt; addresses these concerns:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.26.15.png" height="237" width="354" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Static Code Analysis&lt;/P&gt;&lt;BR /&gt;
The tool &lt;A href="https://abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abaplint&lt;/STRONG&gt;&lt;/A&gt; can be setup in various ways; in the case of abap2UI5, it is used as a GitHub Addon:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.28.06.png" height="107" width="408" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Installation as a GitHub Add-on&lt;/P&gt;&lt;BR /&gt;
For the project-specific setup, simply add an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/abaplint.jsonc" target="_blank" rel="nofollow noopener noreferrer"&gt;abaplint.json&lt;/A&gt;&lt;/STRONG&gt; file to the repository. This file contains all settings and is structured as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.29.32.png" height="178" width="324" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/abaplint.jsonc" target="_blank" rel="nofollow noopener noreferrer"&gt;Configuration&lt;/A&gt;&lt;/STRONG&gt; via abaplint.json&lt;/P&gt;&lt;BR /&gt;
First we aim to ensure that the written code is executable down to Netweaver version 7.50 by configuring the following option in line 12:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;  "syntax": {&lt;BR /&gt;
    "version": "v750",&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
You can choose the version that suits your needs. With this setup, abaplint now checks the source code after each change, ensuring syntax validity down to ABAP v7.50:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.40.19.png" height="208" width="455" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Checking the ABAP code&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.40.53.png" height="166" width="456" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Identifying Incompatible Syntax&lt;/P&gt;&lt;BR /&gt;
In this case we used the "cmis_string" type, which is unavailable in NetWeaver 7.50 and causing findings:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.41.03.png" height="245" width="447" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Detailed Overview of Identified Issues&lt;/P&gt;&lt;BR /&gt;
These checks provide us with the opportunity to address issues before they are integrated into the main branch and preventing potential problems during the installation on other systems. This serves as an aid in identifying mistakes at an early stage and reduces significantly the effort required to solve them. After fixing the error, abaplint performs another check:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.44.03.png" height="172" width="480" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Checks Passed Succesfully&lt;/P&gt;&lt;BR /&gt;
This time, no issues are found anymore, and the code changes can be merged into the main branch with confidence it'll function on any release down to NW 7.50. The setup now appears as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-10.02.19.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Repository with abaplint Syntax Check for Different ABAP Systems&lt;/P&gt;&lt;BR /&gt;
But this was just the beginning; abaplint is more than only a syntax checking tool to regain control over all the different ABAP releases and language flavors (although this alone would be impressive enough) -- it is a static code analysis tool with a lot of more possibilities, which we'll delve into next.&lt;BR /&gt;
&lt;H3 id="toc-hId-502511387"&gt;&lt;STRONG&gt;4. abaplint - Static Code Analysis&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
When developing new features, static code checks play a significant role in enhancing code quality. We can achieve this using abaplint and have access to over 159 distinct rules. You can check them &lt;A href="https://rules.abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;here&lt;/STRONG&gt;:&lt;/A&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-19.59.58.png" height="417" width="379" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Rules for Static Code Analysis&lt;/P&gt;&lt;BR /&gt;
The &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/36c4c10101df018e1e374ba6ff7d91156573c571/abaplint.jsonc#L16" target="_blank" rel="nofollow noopener noreferrer"&gt;configuration&lt;/A&gt;&lt;/STRONG&gt; file shows which ones are activated for the project:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-07-um-20.01.36.png" height="202" width="355" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Rule Configuration via Package.json&lt;/P&gt;&lt;BR /&gt;
For example, classic checks like "no database access in loops" &lt;A href="https://rules.abaplint.org/db_operation_in_loop/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;(here)&lt;/STRONG&gt;&lt;/A&gt;:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;   "db_operation_in_loop": true,&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Or &lt;A href="https://github.com/SAP/styleguides/blob/main/clean-abap/CleanABAP.md" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;ABAP Style Guideline&lt;/STRONG&gt;&lt;/A&gt;-influenced recommendations, such as better boolean usage &lt;STRONG&gt;&lt;A href="https://rules.abaplint.org/prefer_xsdbool/" target="_blank" rel="nofollow noopener noreferrer"&gt;(here):&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt; "prefer_xsdbool": true,&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Checks for unused variables and types (in cases where we might have overlooked this in Eclipse)&lt;A href="https://rules.abaplint.org/unused_variables/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;(here)&lt;/STRONG&gt;&lt;/A&gt;:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;    "unused_types": true,&lt;BR /&gt;
    "unused_variables": {&lt;BR /&gt;
      "severity": "Error",&lt;BR /&gt;
      "exclude": ["z2ui5_cl_fw_utility.clas.testclasses.abap"],&lt;BR /&gt;
      "skipNames": ["lv_dummy", "i_mv_editor"]&lt;BR /&gt;
    },&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Analyses of the overall code complexity of functions, for example the &lt;STRONG&gt;&lt;A href="https://www.mathworks.com/discovery/cyclomatic-complexity.html#:~:text=Cyclomatic%20complexity%20metrics%20are%20an%20important%20indicator%20of%20your%20source,and%20other%20code%20complexity%20metrics." target="_blank" rel="nofollow noopener noreferrer"&gt;cyclomatic complexity&lt;/A&gt; &lt;A href="https://rules.abaplint.org/cyclomatic_complexity/" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"cyclomatic_complexity": {&lt;BR /&gt;
    "exclude": [],&lt;BR /&gt;
    "severity": "Error",&lt;BR /&gt;
    "max": 20&lt;BR /&gt;
  }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Or checks enhancing readibilty, like avoiding 'exporting' in method calls &lt;A href="https://rules.abaplint.org/exporting/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;(here)&lt;/STRONG&gt;&lt;/A&gt;:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"exporting" : true&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I recommend reviewing all of these rules; some are vital for quality maintenance, while others suit personal or project-specific needs. Collectively, they elevate the codebase significantly. With activated rules and abaplint as a GitHub AddOn, the code is checked now with each push to the main branch:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-10.08.21.png" height="208" width="433" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Pull Request successfully checked with abaplint&lt;/P&gt;&lt;BR /&gt;
Of course, this isn't a guarantee that everything will function flawlessly, but it does provide a robust additional safeguard. The project setup appears with this as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-10.05.00.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;abap2UI5 Setup - Repository Organization with Static Code Checks using abaplint&lt;/P&gt;&lt;BR /&gt;
But why not perform this directly in Eclipse and conduct static code analysis with ATC? One downside is that ATC checks are system-dependent, which means that if I want to make changes today on system A and continue tomorrow on system B, I have to set up ATC again. This can also pose challenges when different people on various systems collaborate. With abaplint, we can carry out centralized static code checks at the repository level on GitHub, which is a significant advantage over ATC.&lt;BR /&gt;
&lt;H3 id="toc-hId-305997882"&gt;&lt;STRONG&gt;5. abaplint - Quickfixes&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Abaplint also provides Quickfixes as we know them from ATC. They are accessible directly on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.25.32.png" height="268" width="363" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Quickfixes on GitHub&lt;/P&gt;&lt;BR /&gt;
Alternatively, they can be accessed via the command line. In the following example, we use GitHub Spaces. After installing abaplint, we can add a new check and execute automated Quickfixes:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/afix01-1.gif" height="296" width="512" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Installation and Automated Quickfixes (Part I)&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/afix02.gif" height="298" width="516" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Installation and Automated Quickfixes (Part II)&lt;/P&gt;&lt;BR /&gt;
In this case, a fix is added to remove double spaces (more complex fixes are also available). You can observe abaplint's code adjustments:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-12-um-19.27.19.png" height="286" width="497" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Code Adjusted by abaplint&lt;/P&gt;&lt;BR /&gt;
Lastly, we simply need to merge these modifications back into the _dev branch concluding the process -- everything only takes a few moments. Visit the &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="nofollow noopener noreferrer"&gt;repository&lt;/A&gt;&lt;/STRONG&gt; and explore for yourself! Begin by initiating a new GitHub Codespace and executing the following commands in the terminal:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Install the abaplint CLI globally by running:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;npm install @abaplint/cli -g&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Perform automated code fixing by entering:&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;abaplint --fix&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
But might we be encompassing functionalities that are also offered, for example, by &lt;A href="https://github.com/SAP/abap-cleaner" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;ABAP Cleaner&lt;/STRONG&gt;&lt;/A&gt;? While ABAP Cleaner is unquestionably a valuable tool, abaplint boasts a multitude of capabilities beyond code verification and aesthetics, as we'll explore further later on. But the reason I once again prefer abaplint is because of its project-level configuration on GitHub, which eliminates the requirement to install and set up a local Eclipse AddOn (a step that would also be necessary for everyone undertaking a code modification) which saves a lot of time.&lt;BR /&gt;
&lt;BR /&gt;
For further information on setting up abaplint you can also check out this&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/16/getting-started-with-abaplint/" target="_blank" rel="noopener noreferrer"&gt; blog post&lt;/A&gt;&lt;/STRONG&gt; and now let's delve into another very useful feature of this tool: its cross-checks.&lt;BR /&gt;
&lt;H3 id="toc-hId-109484377"&gt;&lt;STRONG&gt;6. abaplint - Cross Checks&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;abap2UI5-samples&lt;/A&gt;&lt;/STRONG&gt; repository depends on artifacts from abap2UI5. For example, when both are installed on an ABAP server, syntax checks verify method calls and API compatibility. But how to manage these dependencies when both repositories are on GitHub, and changes occur independently in different systems? The abaplint Cross Check offers a solution for this. Project dependencies can be customized in the abalint.json file of each repository, as demonstrated &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/f71a3419afbc19bf899a340a1ba60ac88df404e6/abaplint.jsonc#L12" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-13-um-17.35.01.png" height="201" width="461" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Define Dependencies&lt;/P&gt;&lt;BR /&gt;
Now, modifying a method in the main abap2UI5 repository automatic triggers checks for syntax compatibility of the samples repository. To illustrate, we change the importing parameters of an abap2UI5 method:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-15-um-08.26.21.png" height="118" width="376" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Incompatible Code Change in the Main Repository&lt;/P&gt;&lt;BR /&gt;
Attempting to update the abap2UI5 main branch with a PR now encounters abaplint cross-check failures and triggers errors:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-15-um-08.24.40.png" height="221" width="462" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Cross Check Failures due to Missing Importing Parameter used by the Samples Repository&lt;/P&gt;&lt;BR /&gt;
The more apps utilizing abap2UI5, the harder managing dependencies gets. Cross-checks significantly assist in handling this complexity. If you have a GitHub project using abap2UI5, set up abaplint and customize a dependency to abap2UI5. This way, you will receive early warnings about incompatible changes. The repository configuration is now as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-10.32.50.png" height="203" width="514" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Repository with abaplint Cross-Checks&lt;/P&gt;&lt;BR /&gt;
For more details about cross-checks, refer also to this &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2022/05/03/cross-repository-syntax-check-before-merge/" target="_blank" rel="noopener noreferrer"&gt;blog post.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--87029128"&gt;&lt;STRONG&gt;7. abaplint - Dashboard&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Abaplint is powerful, with much more to explore, while we only focused on a few aspects. For a good overview of all features you can also take a look at the &lt;STRONG&gt;&lt;A href="https://abaplint.app/stats" target="_blank" rel="nofollow noopener noreferrer"&gt;dashboards&lt;/A&gt;&lt;/STRONG&gt; of public ABAP projects using abaplint:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 50%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.30.51.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.31.04.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 50%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.31.48.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.32.23.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
All these charts and statistics provide a comprehensive and transparent overview of the code quality of each project. This can also help you make informed decisions when you are uncertain about public repositories and whether you want to download it or not.&lt;BR /&gt;
&lt;H3 id="toc-hId--283542633"&gt;&lt;STRONG&gt;8. GitHub - Contribution with Forks &amp;amp; Pull Requests&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Abap2UI5 is open source and developed alongside other projects or during free time. Contributions to this project are greatly appreciated, check out this &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-documentation/blob/main/CONTRIBUTING.md" target="_blank" rel="nofollow noopener noreferrer"&gt;contribution guideline.&lt;/A&gt;&lt;/STRONG&gt; But what happens when someone wants to make a modification to the actual source code of the project? In this case they can create a Fork of the repository, obtaining a personal copy of the complete repository to implement changes:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-11-um-14.38.16.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Create a new Fork&lt;/P&gt;&lt;BR /&gt;
Upon completion, they open a Pull Request, notifying the abap2UI5 repository owner about the change:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Unbenanntes-Bild.png" height="219" width="507" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Create a Pull Request from a new Fork&lt;/P&gt;&lt;BR /&gt;
The changes can now be reviewed by the repository owner and additionally abaplint runs its checks. Very useful: The PR creator is also promptly notified about the abaplint results upon opening the PR:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Unbenanntes-Bild2.png" height="274" width="435" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - abaplint checks Pull Requests&lt;/P&gt;&lt;BR /&gt;
On this way the contributor gains access to all the essential information regarding the required Code Standards of the project and is enabled to improve the code of the Pull Request also by himself. The inclusion of abaplint checks on GitHub streamlines this contribution process and significantly reduces coordination efforts. The whole setup appears now as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-15-um-08.00.29.png" height="229" width="414" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Contribution with Forks&lt;/P&gt;&lt;BR /&gt;
Check out all Forks of abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/forks" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; and see who already contributed to the project &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/graphs/contributors" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId--480056138"&gt;&lt;STRONG&gt;9. GitHub - Branch Protection&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
When collaborating, another feature enhances teamwork. All abaplint checks configured thus far (syntax check, static code checks, cross checks) can be made mandatory. This prevents accidental pushing of changes to the main branch or bypassing these tests. This feature is provided by GitHub's branch protection rules:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-08.55.36.png" height="180" width="341" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub - Setup Branch Protection Rules&lt;/P&gt;&lt;BR /&gt;
Now, merging is deactivated until all tests run successfully, and the repository setup appears as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-08.05.38.png" height="258" width="477" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Repository with Branch Protection&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--676569643"&gt;&lt;STRONG&gt;10. open-abap - Unit Testing&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Now, returning to code quality: Good code quality encompasses more than just static checks&amp;nbsp; and one important aspect we haven't examined yet are unit tests. ABAP unit tests are typically executed on the ABAP Server (initiated through Eclipse or a background job):&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-08-um-09.02.10.png" height="123" width="434" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Unit Tests running on an ABAP Server&lt;/P&gt;&lt;BR /&gt;
But how do we ensure Pull Request submitters perform unit tests, confirming their changes are well-tested? Therefore, in addition to conducting static code checks, it is essential to run unit tests on GitHub as well. The challenge lies in being able to run these tests in a non-ABAP environment and automating this process.&lt;BR /&gt;
To achieve automation, we can leverage GitHub Actions and for running unit tests we can use the open-source project &lt;STRONG&gt;&lt;A href="https://github.com/open-abap" target="_blank" rel="nofollow noopener noreferrer"&gt;open-abap&lt;/A&gt;:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-08.12.16.png" height="106" width="502" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;open-abap - Any platform ABAP, serverless ABAP, ABAP on Node.js&lt;/P&gt;&lt;BR /&gt;
Open-abap transpiles ABAP code into JavaScript, enabling its execution on a Node.js server. This capability permits us to run unit tests on Node.js directly on GitHub within a GitHub Action. The configuration for this action looks like &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/_dev/.github/workflows/test.yml" target="_blank" rel="nofollow noopener noreferrer"&gt;this:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-08.19.46.png" height="264" width="442" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;GitHub Action - Unit Tests with open-abap&lt;/P&gt;&lt;BR /&gt;
With each code change the unit tests are now running as you can see for example &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/actions/runs/5848523872/job/15855913768?pr=483" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-08.21.41.png" height="248" width="426" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub Action - Running Unit Tests with open-abap&lt;/P&gt;&lt;BR /&gt;
This feature is truly remarkable! It decouples the entire testing process from any specific ABAP server and ensures that only thoroughly tested code makes its way to the main branch. The project setup is as follows now:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-08.24.33.png" height="258" width="457" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Running Unit Tests with open-abap&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--948314517"&gt;&lt;STRONG&gt;11. abaplint - Downport Functionality&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
After configuring multiple static checks and unit tests, we now circle back to where we began: Syntax checking for different systems. While we have ensured compatibility down to ABAP 750, let's now delve into what I consider one of abaplint's most valuable features: its downport functionality.&lt;BR /&gt;
&lt;BR /&gt;
It's somewhat discreetly accessible as a quick fix, yet it holds a strong functionality playing a significant importance for the project. This function facilitates automatic downporting from higher releases to lower ones. In practical terms, this means we can maintain the main branch using 750 syntax with all its new language features, while still ensuring the project remains installable on an ABAP 702 system through abaplint's downport capability.&lt;BR /&gt;
&lt;BR /&gt;
The function can be executed by adjusting the syntax to 702 in the abaplint configuration and then initiating the downport via automated quickfixes. You can see a demonstration here:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/gif_downport_01.gif" height="260" width="450" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Downporting 7.50 Syntax down to 7.02 Syntax (Part I)&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/gif_downport_2.gif" height="263" width="455" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint - Downporting 7.50 Syntax down to 7.02 Syntax (Part II)&lt;/P&gt;&lt;BR /&gt;
Check the &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-downport" target="_blank" rel="nofollow noopener noreferrer"&gt;downport repository&lt;/A&gt;&lt;/STRONG&gt; to see that all new language features are downported to compatible 702 syntax:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 288px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 288px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-10.38.59.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 288px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-10.38.06.png" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Before: 7.50 Syntax&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;After: 7.02 Syntax&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
Furthermore, to eliminate manual effort, this process can be also automated using a GitHub Action, similar to what we have already employed for unit tests. We establish an additional &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-downport" target="_blank" rel="nofollow noopener noreferrer"&gt;downport repository&lt;/A&gt;&lt;/STRONG&gt; that automatically receives updates with every code change from the abap2UI5 main branch. The GitHub Action responsible for this task is configured&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/.github/workflows/build_downport.yaml" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-10.43.17.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;GitHub Action - Automated Downporting with abaplint&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;And the downported code is stored &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-downport" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-10.44.48.png" /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Downport Repository&lt;/P&gt;&lt;BR /&gt;
This is once again an impressive feature! Attempting to downport every abap2UI5 version manually would remain unfeasible especially in a hobby-like project. And beginning development entirely in 702 would render the code quite challenging to understand and maintain (not to mention, it would also be unenjoyable to write).&lt;BR /&gt;
&lt;BR /&gt;
Ultimately, we add now one final GitHub Action which tests and guarantees the error-free downportability of the code before merging it into the main branch. As a result, the definitive setup for abap2UI5 is as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-14-um-10.46.26.png" height="320" width="566" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Setup - Final Configuration&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1144828022"&gt;&lt;STRONG&gt;12. abap2UI5-web with &lt;/STRONG&gt;&lt;STRONG&gt;open-abap&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Details of the tools' inner workings are beyond this article's scope. Essentially, during unit tests, code is initially downported to version 702 and transpiled to JavaScript. It's then executed on a Node.js server. However, if it's executable there, why not directly use Node.js to use abap2UI5?&lt;BR /&gt;
&lt;BR /&gt;
As a final showcase, let's turn our attention to the project &lt;STRONG&gt;&lt;A href="https://github.com/larshp/abap2ui5-web" target="_blank" rel="nofollow noopener noreferrer"&gt;abap2UI5-web&lt;/A&gt;&lt;/STRONG&gt;, which demonstrates the capabilities of all the tools we've utilized in this blog post. In this project, the complete abap2UI5 source code is transpiled and executed on a Node.js server. This enables the launch of abap2UI5 apps directly from GitHub Codespaces without any reliance on an ABAP server.&lt;BR /&gt;
&lt;BR /&gt;
Don't miss to try this out yourself! Simply navigate to the &lt;STRONG&gt;&lt;A href="https://github.com/larshp/abap2ui5-web" target="_blank" rel="nofollow noopener noreferrer"&gt;repository&lt;/A&gt;&lt;/STRONG&gt; and initiate a new GitHub Codespace. Then, open a new terminal and execute the following commands:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;npm install&lt;BR /&gt;
npm test&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And that's it! You can now try abap2UI5 apps on a Node.js server. Explore this final demonstration:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/a2ui5-web_01.gif" height="276" width="478" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5-web - Running abap2UI5 on Node.js (Part I)&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/a2ui5-web_02.gif" height="273" width="472" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5-web - Running abap2UI5 on Node.js (Part II)&lt;/P&gt;&lt;BR /&gt;
The ABAP Server is now entirely bypassed! Regard this as an experiment, yet it underscores the potential that these tools hold for the future. Can we also create UIs in ABAP using browser based &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/liveEditor" target="_blank" rel="nofollow noopener noreferrer"&gt;playgrounds&lt;/A&gt;&lt;/STRONG&gt; similar to those found in UI5? The capability to directly modify and execute ABAP code in a browser is still available as you can try &lt;STRONG&gt;&lt;A href="https://transpiler.abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; and &lt;STRONG&gt;&lt;A href="https://playground.abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;BR /&gt;
&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-16-um-12.29.13.png" height="158" width="400" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;ABAP Code transpiled to JavaScript &lt;STRONG&gt;&lt;A href="https://transpiler.abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;(Demo)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1341341527"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirmfoto-2023-08-16-um-12.28.52.png" height="234" width="396" /&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abaplint running on open-abap &lt;STRONG&gt;&lt;A href="https://playground.abaplint.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;(Demo)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
If you want to learn more about this topic, check out this &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2022/02/04/writing-multitarget-abap-applications/" target="_blank" rel="noopener noreferrer"&gt;blog post.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1537855032"&gt;&lt;STRONG&gt;13. Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This concludes the journey through the tooling utilized by abap2UI5. As you have likely gathered from this article, I am truly impressed! I never anticipated such seamless integration of these tools (abapGit, abaplint, open-abap) with ABAP, a language deeply intertwined with SAP's proprietary environments and solutions (SE80, ADT, CTS or gCTS).&lt;BR /&gt;
&lt;BR /&gt;
Going the open-source way and configuring these tools on GitHub for an ABAP project has been an enlightening experience! Many thanks to &lt;STRONG&gt;&lt;SPAN class="mention-scrubbed"&gt;lars.hvam&lt;/SPAN&gt;&lt;/STRONG&gt; for the exceptional work and support in setting this up, as well as to all other contributors who have played a role in developing these tools. &lt;span class="lia-unicode-emoji" title=":folded_hands:"&gt;🙏&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
Their continuous efforts over the years in developing these tools have not only made organizing an ABAP Project on GitHub possible but have also elevated Static Code Checks and DevOps to a very high standard. Attempting to achieve all of this without these tools or solely on an ABAP Server would have required much more effort (or maybe even been impossible).&lt;BR /&gt;
&lt;BR /&gt;
I hope that this article sparked your interest and motivated you to give these tools a try. Perhaps you now also want to manage your upcoming ABAP project with abapGit and abaplint? Feel free to share your ideas and experiences, or if there's something I missed out on, I welcome your insights.&lt;BR /&gt;
&lt;BR /&gt;
In the &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;next part&lt;/A&gt;,&lt;/STRONG&gt; we'll explore various new features added over recent months to abap2UI5.&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading! Your questions, comments and wishes for this project are always welcome, leave a comment or create an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt;.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-8-repository-organization-working-with-abapgit-abaplint-open-abap/ba-p/13562086"/>
    <published>2023-08-21T08:07:06+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-9-update-i-community-feedback-new-features-september-2023/ba-p/13561966</id>
    <title>abap2UI5 - (9) Update I: Community Feedback &amp; New Features - September 2023</title>
    <updated>2023-09-11T07:47:21+02:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 9 of this blog series introducing &lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abap2UI5&lt;/STRONG&gt;&lt;/A&gt; — an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;In the last few months, a bunch of new features – both big and small – have been added to abap2UI5. Some were in response to issues, some from pull requests and some were inspired by SAP UI5 documentation. These all work to further enhance the functionality of abap2UI5 – which we'll explore in this blog post.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
We'll begin with tree controls and move on to partial rerendering with model updates &amp;amp; nested views. Then we explore the use of dynamically created data models, for example, for importing CSVs. Additionally, we'll examine additional UI5 controls like Navigation Container, Gantt Charts, Planning Calendars, Message Managers, and extensions related to Excel Downloads and Generic Search Helps. Finally, we'll delve into a full demo app and explore the use of abap2UI5 in different ABAP extensibility scenarios.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can find all the information about this project on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;and stay up-to-date by following on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter.&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;Also, make sure to explore the other articles in this blog series.&lt;BR /&gt;
&lt;TABLE border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023 (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;
&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This post covers the following areas:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Tree Controls&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Partly View Rendering with Model Updates&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Partly View Rendering with Nested Views&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Displaying Dynamic Data with S-RTTI&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CSV Upload/Download&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Excel Upload/Download&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Navigation Container&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Visualization with Planning Calender, Gantt Charts and Process Flows&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Message Manager&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generic Search Help&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Developer Code Challenge&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Demo &amp;amp; Samples Repository&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Conclusion&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let’s begin with the first topic.&lt;BR /&gt;
&lt;H3 id="toc-hId-1092030698"&gt;&lt;STRONG&gt;1. Tree Controls&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
In addition to displaying tables and lists, it is now also possible to use controls based on tree models. This enables the visualization of hierarchies:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-19-um-14.06.05.png" height="174" width="628" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Displaying UI5 Tree Controls&lt;/P&gt;&lt;BR /&gt;
Among many other use cases, tree structures can also be used to create popups for selecting items:&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/gif_popup_tree.gif" height="427" width="573" /&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Popup with Tree Control to Select an Item&lt;/P&gt;&lt;BR /&gt;
To generate the output shown above, you need to define a nested structure in ABAP as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;TYPES: &lt;BR /&gt;
    BEGIN OF ts_tree_row_base,&lt;BR /&gt;
             object TYPE string,&lt;BR /&gt;
             col2   TYPE string,&lt;BR /&gt;
             col3   TYPE string,&lt;BR /&gt;
             col4   TYPE string,&lt;BR /&gt;
    END OF ts_tree_row_base.&lt;BR /&gt;
 &lt;BR /&gt;
TYPES: &lt;BR /&gt;
    BEGIN OF ts_tree_level2.&lt;BR /&gt;
             INCLUDE TYPE ts_tree_row_base,&lt;BR /&gt;
    END OF ts_tree_level2.&lt;BR /&gt;
 &lt;BR /&gt;
TYPES tt_tree_level2 TYPE STANDARD TABLE OF ts_tree_level2 WITH KEY object.&lt;BR /&gt;
 &lt;BR /&gt;
TYPES:&lt;BR /&gt;
    BEGIN OF ts_tree_level1,&lt;BR /&gt;
             INCLUDE TYPE ts_tree_row_base,&lt;BR /&gt;
             categories TYPE tt_tree_level2.&lt;BR /&gt;
    END OF ts_tree_level1.&lt;BR /&gt;
 &lt;BR /&gt;
TYPES tt_tree_level1 TYPE STANDARD TABLE OF ts_tree_level1 WITH KEY object.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.m.Tree" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 Tree Control&lt;/A&gt;&lt;/STRONG&gt; is used in the view definition:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DATA(tab) = page-&amp;gt;tree_table(&lt;BR /&gt;
        rows = `{path:'` &amp;amp;&amp;amp; client-&amp;gt;_bind( val = mt_tree path = abap_true ) &amp;amp;&amp;amp; &lt;BR /&gt;
               `', parameters: {arrayNames:['CATEGORIES']}}` ).&lt;BR /&gt;
tab-&amp;gt;tree_columns( )-&amp;gt;tree_column( label = 'Object'&lt;BR /&gt;
        )-&amp;gt;tree_template(&lt;BR /&gt;
        )-&amp;gt;text( text = '{OBJECT}')-&amp;gt;get_parent( )-&amp;gt;get_parent(&lt;BR /&gt;
        )-&amp;gt;tree_column( label = 'Column2'&lt;BR /&gt;
        )-&amp;gt;tree_template(&lt;BR /&gt;
        )-&amp;gt;text( text = '{COL2}')-&amp;gt;get_parent( )-&amp;gt;get_parent(&lt;BR /&gt;
        )-&amp;gt;tree_column( label = 'Column3'&lt;BR /&gt;
        )-&amp;gt;tree_template(&lt;BR /&gt;
        )-&amp;gt;text( text = '{COL3}')-&amp;gt;get_parent( )-&amp;gt;get_parent(&lt;BR /&gt;
        )-&amp;gt;tree_column( label = 'Column4'&lt;BR /&gt;
        )-&amp;gt;tree_template(&lt;BR /&gt;
        )-&amp;gt;text( text = '{COL4}').&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
You can check the full source code of these examples &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_007.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt; &lt;/STRONG&gt;and&lt;STRONG&gt; &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_068.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;Thank you to &lt;STRONG&gt;&lt;A href="https://github.com/axelmohnen" target="_blank" rel="nofollow noopener noreferrer"&gt;axelmohnen&lt;/A&gt;&lt;/STRONG&gt; and &lt;STRONG&gt;&lt;A href="https://github.com/WegnerDan" target="_blank" rel="nofollow noopener noreferrer"&gt;WegnerDan&lt;/A&gt;&lt;/STRONG&gt; for their contributions and examples in this direction.&lt;BR /&gt;
&lt;H3 class="p1" id="toc-hId-895517193"&gt;&lt;STRONG&gt;2. Partly View Rendering I (Model Update)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
In the initial version of abap2UI5, the standard approach involved rerendering the entire view after each request. This approach can be beneficial when making full changes to the entire application or when the entire UI changes with a page transition. However, in cases where only specific entries in a table or the values of an input field need to change, repeatedly rerendering the entire view can result in an uncomfortable user experience. For example it disrupts the user's current focus and scroll position. Therefore, abap2UI5 has now been extended to allow updating only the view model and keeping the view stable during a backend request. Rerendering is now controlled by two different methods:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;view_display - This method rerenders the entire view&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;view_model_update - This method updates only the view model, and the UI5 framework will rerender only the affected controls&lt;CODE&gt;&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let's consider the following example: Initially, a new view is created with a table and a search field. Subsequently, with each input change, the backend sends the newly matching table, and only the table entries in the UI are rerendered. The rest of the UI remains stable and the focus also stays unchanged in the input field:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_filter.gif" height="349" width="617" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Model Update after Input Change&lt;/P&gt;&lt;BR /&gt;
Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_059.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;This becomes even more useful when you have a table and have scrolled to a certain position. Take a look at &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_028.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;this demo&lt;/A&gt; &lt;/STRONG&gt;where new entries are added to a table every few seconds, and the scroll position and focus remain unchanged:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_scroll.gif" height="348" width="615" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Stable Focus and Scroll Position after Backend Model Updates&lt;/P&gt;&lt;BR /&gt;
As a general recommendation, it is advisable not to rerender the whole view unnecessarily, but only when it is required. While some UI5 Controls may need a complete rerendering, most cases can avoid it. However, it is essential to ensure that the entire view is rerendered after leaving or returning to an app. For this purpose, the event 'on_navigated' can now be checked, which is always true after an app navigation:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;if client-&amp;gt;get( )-check_on_navigated = abap_true.&lt;BR /&gt;
   "rerender the whole View&lt;BR /&gt;
endif.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Next, let's explore another method for partial rerendering.&lt;BR /&gt;
&lt;H3 id="toc-hId-699003688"&gt;&lt;STRONG&gt;3. Partly View Rendering II (Nested Views)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Another approach for selectively rerendering views involves using nested views. This allows you to create, for example, a master-detail page. You can use two independent views displaying a tree control on the left side and another view with inputs and buttons on the right side. Take a look at &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_066.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;this example:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_master_detail.gif" height="356" width="628" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Master-Detail Layout with Nested Views&lt;/P&gt;&lt;BR /&gt;
Many other use cases are possible. To mention just one more, you can display two tables and move entries from the left one to the right table:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_two_tabs.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Nested Views with Interacting Tables&lt;/P&gt;&lt;BR /&gt;
Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_097.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;The nested view is added to the main view with the following function:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;client-&amp;gt;nest_view_display(&lt;BR /&gt;
      val            = lo_view_nested-&amp;gt;stringify( )&lt;BR /&gt;
      id             = `ParentView`&lt;BR /&gt;
      method_insert  = 'addMidColumnPage'&lt;BR /&gt;
      method_destroy = 'removeAllMidColumnPages'&lt;BR /&gt;
    ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And the methods to rerender the nested view are similar to the ones of the main view:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;nest_view_display - This method rerenders the entire nested view&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;nest_view_model_update - This method updates only the view model, and the UI5 framework will rerender only the affected controls in the nested view&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
A big thank you to &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; for the example and testing abap2UI5 with nested views.&lt;BR /&gt;
&lt;H3 id="toc-hId-502490183"&gt;&lt;STRONG&gt;4. Displaying Generic Data References with S-RTTI&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
One common requirement in ABAP is displaying tables which are typed during runtime. Sometimes you only know during runtime which database table you need to display or have to create a table with RTTI depending on local created types. When it comes to ALVs, this is not a problem because you can also create field catalogs dynamically. Here the abap2UI5 approach reaches its limits because we serialize the app with XSLT after every request and unfortunately generic data references with locally created types cause XSLT errors during serialization:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-19-um-14.23.22.png" height="317" width="441" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;XSLT Serialization Error - Locally Created Types not supported&lt;/P&gt;&lt;BR /&gt;
Fortunately the open source project &lt;STRONG&gt;&lt;A href="https://github.com/sandraros/S-RTTI" target="_blank" rel="nofollow noopener noreferrer"&gt;S-RTTI&lt;/A&gt;&lt;/STRONG&gt; solves this problem:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Bildschirm­foto-2023-08-19-um-14.15.35.png" height="327" width="543" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Open Source Project S-RTTI&lt;/P&gt;&lt;BR /&gt;
With S-RTTI, we can serialize and save the RTTI of every variable, enabling us to clear it at the end of each request. Then, with the next request, the variable is recreated again based on the S-RTTI information. When encountering XSLT errors, abap2UI5 now automatically checks if this framework is installed and uses S-RTTI for serialization. As a result, generic data references with locally created types can now be seamlessly used with abap2UI5. Many thanks to &lt;STRONG&gt;&lt;SPAN class="mention-scrubbed"&gt;sandra.rossi&lt;/SPAN&gt;&lt;/STRONG&gt; for this idea and excellent &lt;STRONG&gt;&lt;A href="https://github.com/sandraros/S-RTTI" target="_blank" rel="nofollow noopener noreferrer"&gt;project.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 class="p1" id="toc-hId-305976678"&gt;&lt;STRONG&gt;5. CSV Upload &amp;amp; Download&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
One compelling use case for the functionality described above is the import of tables via CSV. The following application reads the file and, based on its contents, creates an internal table with the data from the CSV. Finally, it displays the table in a UI5 Table Control. Take a look at this example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_csv.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Upload CSV and Create Internal Table with its Content&lt;/P&gt;&lt;BR /&gt;
By utilizing S-RTTI in combination with abap2UI5, only about 153 lines of ABAP are needed to fulfill this requirement. You can check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_074.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-109463173"&gt;&lt;STRONG&gt;6. Excel Upload &amp;amp; Download&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Besides CSV, another common requirement is the use of Excel files, especially downloading internal tables as Excel files. In UI5, this is achieved using the &lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.ui.export.Spreadsheet" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Spreadsheet Control&lt;/STRONG&gt;&lt;/A&gt;. However, they rely on frontend JavaScript logic and are not usable without additional work in abap2UI5. Fortunately, &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; contributed a custom control that encapsulates the frontend logic within a UI5 control, making it usable in a view definition of abap2UI5. Take a look at this example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_excel.gif" height="280" width="501" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Excel Download via Custom Control&lt;/P&gt;&lt;BR /&gt;
You can find the logic of the custom control &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/z2ui5_cl_xml_view.clas.abap#L5137" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; and the source code of the demo &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_077.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;This approach combines JavaScript Logic at the frontend with ABAP Logic at the backend. Thank you &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; for this extension.&lt;BR /&gt;
&lt;BR /&gt;
Another approach for handling Excel files could be to keep the entire logic in the backend and send and receive only the final file to the frontend, similar to what we did with the CSV. You can achieve this by using the project &lt;A href="https://github.com/abap2xlsx/abap2xlsx" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abap2xlsx&lt;/STRONG&gt;&lt;/A&gt; combined with abap2UI5. Currently, there is no working Excel functionality usable in both language versions ('ABAP for Cloud' and 'Standard ABAP'), but maybe in the future, there will be a chance for this, allowing for the entire logic to be held in ABAP without the need for extra JavaScript or the use of UI5 Spreadsheet Controls (pure ABAP &lt;span class="lia-unicode-emoji" title=":smiling_face_with_heart_eyes:"&gt;😍&lt;/span&gt;). Feel free to support this idea &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/07/18/abap-excel-why-cant-we-just-have-something-nice/" target="_blank" rel="noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Next let's explore some more UI5 Controls.&lt;BR /&gt;
&lt;H3 class="p1" id="toc-hId--87050332"&gt;&lt;STRONG&gt;7. Navigation Container&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
First we take a look at the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/sdk/#/api/sap.m.NavContainer" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 Navigation Container&lt;/A&gt;&lt;/STRONG&gt;. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_nav_cont.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - nav container&lt;/P&gt;&lt;BR /&gt;
You can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_088.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. The Navigation Container allows you to structure your output with multiple views, switching between them using an event. You can achieve this behavior by calling the following method in abap2UI5:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;client-&amp;gt;_event_client( val = 'NAV_TO' t_arg  = VALUE #( ( `NavCon` ) ( mv_selected_key ) ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Furthermore, a lot of new controls for visualization are available.&lt;BR /&gt;
&lt;H3 id="toc-hId--283563837"&gt;&lt;STRONG&gt;8. Visualization with Planning Calender, Gantt Chart and Process Flow&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Look for example at this demo with &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.gantt.simple.GanttChartWithTable" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 Gantt Charts:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/Bildschirmfoto-2023-09-06-um-14.08.53.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Gantt Chart&lt;/P&gt;&lt;BR /&gt;
Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_076.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;Or the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.m.PlanningCalendar" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 Planning Calender:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/Bildschirmfoto-2023-09-06-um-14.09.06.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Planning Calender&lt;/P&gt;&lt;BR /&gt;
Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_080.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;And the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.suite.ui.commons.ProcessFlow" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 Process Flow:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/Bildschirmfoto-2023-09-06-um-14.09.20.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Process Flow&lt;/P&gt;&lt;BR /&gt;
Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_091.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;All of these controls assist in visualizing your data in a format other than a table or list. Thank you &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; for these extensions.&lt;BR /&gt;
&lt;H3 id="toc-hId--480077342"&gt;&lt;STRONG&gt;9. Message Manager&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Message Handling can be done in UI5 with the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.core.message.MessageManager" target="_blank" rel="nofollow noopener noreferrer"&gt;Message Manager.&lt;/A&gt;&lt;/STRONG&gt; Depending an input field types it is automatically filled with message and the output is seamlessly integrated to the UI. Look at this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_message_manager.gif" height="343" width="614" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Message Manager&lt;/P&gt;&lt;BR /&gt;
In abap2UI5, you can now add messages, delete messages, or read its messages. Thank you &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; for the demo, you can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_084.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 class="p1" id="toc-hId--676590847"&gt;&lt;STRONG&gt;10. Generic Search Help&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
When users input data, in addition to the message manager, search helps are a valuable assistance to fill input fields. While, of course, with abap2UI5, you have the capability to create your own popups and develop search helps manually, wouldn't it be nice to leverage the search helps that are still available in the ABAP System?&lt;BR /&gt;
&lt;BR /&gt;
Fortunately, &lt;STRONG&gt;&lt;A href="https://github.com/axelmohnen" target="_blank" rel="nofollow noopener noreferrer"&gt;axelmohnen&lt;/A&gt;&lt;/STRONG&gt; put in some effort and created an initial approach in the form of a generic Search Help Popup App. This app reads the standard SAP Search help and generates an abap2UI5 Popup from it, reminiscent of the previous SAP GUI popups:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_search.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Generic Search Help (Activated DDIC Objects)&lt;/P&gt;&lt;BR /&gt;
As an example the demo above shows the search help for all activated Dictionary Objects. Check out the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_105.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt; &lt;/STRONG&gt;and the generic popup app &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_104.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt; &lt;/STRONG&gt;Of course, there is still some work to do, but even now it shows how easily you can work with generic typed tables and generic created popups in abap2UI5. Once again, the open-source project S-RTTI is used for realizing generic serialization. Thank you a lot &lt;STRONG&gt;&lt;A href="https://github.com/axelmohnen" target="_blank" rel="nofollow noopener noreferrer"&gt;axelmohnen&lt;/A&gt;&lt;/STRONG&gt; for your contribution and for sharing this idea.&lt;BR /&gt;
&lt;H3 id="toc-hId--948335721"&gt;&lt;STRONG&gt;11. Developer Code Challenge&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
During the &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/05/10/sap-developer-code-challenge-open-source-abap/" target="_blank" rel="noopener noreferrer"&gt;SAP ABAP Developer Challenge&lt;/A&gt;&lt;/STRONG&gt; last May,&amp;nbsp;abap2UI5 was used to create text adventure games based on &lt;STRONG&gt;&lt;A href="https://github.com/Ennowulff/axage" target="_blank" rel="nofollow noopener noreferrer"&gt;Axage&lt;/A&gt;&lt;/STRONG&gt; by &lt;STRONG&gt;&lt;SPAN class="mention-scrubbed"&gt;enno.wulff&lt;/SPAN&gt;&lt;/STRONG&gt;. One particularly remarkable solution was developed by &lt;SPAN class="mention-scrubbed"&gt;jacques.nomssi&lt;/SPAN&gt;, which includes images, text areas, input controls and many more. Look at this solution:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/thequest_view.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Open-Source Axage with Magical World in ABAP&lt;/P&gt;&lt;BR /&gt;
For more information about this project, you can refer to his blog post about the "Magical World in ABAP" &lt;A href="https://blogs.sap.com/2023/07/09/discover-a-magical-world-in-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;here&lt;/STRONG&gt;&lt;/A&gt;. He also has developed an abap2UI5 version of his &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2018/02/01/announcing-the-abap-scheme-workbench/" target="_blank" rel="noopener noreferrer"&gt;ABAP Scheme&lt;/A&gt;&lt;/STRONG&gt; project. Thank you &lt;SPAN class="mention-scrubbed"&gt;jacques.nomssi&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1144849226"&gt;&lt;STRONG&gt;12. Demo &amp;amp; Sample Repository&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Let's conclude the blog post with a complete demo where we can see that by combining a variety of controls, we are able to create apps with comprehensive functionality. This demo showcases tables, item navigation, rating indicators, pictures, text areas, search functionalities, and many more features:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gif_demo.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Complete Demo&lt;/P&gt;&lt;BR /&gt;
The source code is a bit more complex, as you can see &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_085.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt; However, it shows that creating more intricate apps is also possible. While abap2UI5 apps only implement a single method of an interface, you can easily also further encapsulate your apps to manage the growing logic of your views and controller. A big thank you to &lt;A href="https://github.com/Th0masMa" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Th0masMa&lt;/STRONG&gt;&lt;/A&gt; for this great demo!&lt;BR /&gt;
&lt;BR /&gt;
All code snippets and demos in the blog series are collected in the &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/tree/main" target="_blank" rel="nofollow noopener noreferrer"&gt;abap2UI5 samples repository:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/gut.png" height="549" width="446" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Samples&lt;/P&gt;&lt;BR /&gt;
Feel free to explore it; the code snippets can be quickly copied &amp;amp; pasted and are ready-to-use for your own development.&lt;BR /&gt;
&lt;H3 id="toc-hId--1341362731"&gt;&lt;STRONG&gt;13. Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This concludes the update on the functionalities of abap2UI5. Feel free to try out the new features in your own abap2UI5 apps, and should you encounter any problems, please don’t hesitate to open an &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/issues" target="_blank" rel="nofollow noopener noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt;. Many of the new functionalities have been developed in response to issues raised in the past months. This proactive approach helps to identify areas where additional functionality is needed and it makes sense to extend abap2UI5.&lt;BR /&gt;
&lt;BR /&gt;
I also encourage everyone to contribute to the project by submitting pull requests or expanding the samples repository. With abap2UI5, copying &amp;amp; pasting apps or functionalities is straightforward, so the more publicly available code snippets exist, the easier it gets to create apps with abap2UI5. Therefore, if you create your own app, also consider sharing it via a public git repository or as a pull request to the samples repository. Up until now, the number of samples has grown to nearly 100, which was only possible with the help of contributors from the ABAP community. &lt;span class="lia-unicode-emoji" title=":folded_hands:"&gt;🙏&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the&lt;STRONG&gt;&amp;nbsp;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;next part&lt;/A&gt;,&lt;/STRONG&gt; we will extend abap2UI5 with external libraries.&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading! Your questions, comments and wishes for this project are always welcome, leave a comment or create an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-9-update-i-community-feedback-new-features-september-2023/ba-p/13561966"/>
    <published>2023-09-11T07:47:21+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/human-capital-management-blog-posts-by-members/creation-and-mapping-of-a-new-pay-group-from-successfactors-to-the-s-4/ba-p/13573657</id>
    <title>Creation and mapping of a new pay group from SuccessFactors to the S/4 system in SAP</title>
    <updated>2023-11-02T15:53:12+01:00</updated>
    <author>
      <name>aravind2</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/170198</uri>
    </author>
    <content>&lt;P style="color: #252525;text-align: justify"&gt;Dear all,&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;In this blog, I am discussing the creation and mapping of a new pay group from SuccessFactors to the SAP S/4 system. I will be explaining each step of the process, from creating a new pay group in SF to mapping to the S/4 system, followed by the data replication process.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;&lt;STRONG style="color: #252525"&gt;1. Creating a new pay group in SuccessFactors&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;In manage data, create a new pay group with your preference. It is recommended to have two digits as an external code for your pay group. Once the pay group external code is provided, enter the description and set the status to active. Parallelly, enter the payment frequency as per your requirement. Finally, map the legal entity for which this pay group you are creating and save it. Below is the screenshot attached for your reference.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-11-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-9-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Pay group creation and mapping a legal entity&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;&lt;STRONG style="color: #252525"&gt;2. Creating a payroll area in the SAP S/4 system&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;Go to: SPRO--IMG--Personnel Management--Personnel Administration--Organisational Data--Organisational Assignment--Create a payroll area.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-10-2.png" height="24" width="535" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;text-align: left"&gt;Once the payroll area is created in the S/4 system, we need to &lt;STRONG style="color: #252525"&gt;allow data replication from EC for payroll areas in correction phase&lt;/STRONG&gt;. So, even if your payroll control is in the correction phase, it would not affect your data replication. The below step is the way to enable this functionality.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-6-1.png" height="200" width="466" /&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;text-align: center"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-6-2.png" height="96" width="546" /&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-7-1.png" height="14" width="547" /&gt;&lt;EM&gt;Enabling data replication from EC for payroll areas in the correction phase&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In the above image, it is shown that the allow replication check box is enabled for my newly created payroll area. Do not forget to check this box.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;&lt;STRONG style="color: #252525"&gt;3. Mapping pay group to payroll area.&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;After doing this step, the real mapping part begins. We need to map the pay group, which is created in SuccessFactors, to the payroll area, which is created in the SAP S/4 system.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;Go to SPRO--IMG--Personnel Management--Integration with SuccessFactors Employee Central--Business Integration Builder--Basic Settings--Define value mapping details and execute.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-8.png" height="312" width="422" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Then select the EC instance and value mapping entity as the pay group.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-4-3.png" height="220" width="496" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Enter the ERP key that you have created as a payroll area code in the SAP S/4 system and the EC key that you have created as a pay group external code in SF.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-4-2.png" height="54" width="554" /&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-5-2.png" height="24" width="556" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Mapping the ERP key to the EC key&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;color: #252525;text-align: justify"&gt;&lt;STRONG style="color: #252525"&gt;4. Create a payroll control record.&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;Create a payroll control record for your newly created payroll area in PA03 T-code.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;Note: Make sure you have created a payroll control record first before starting a replication process from SuccessFactors to the SAP S/4 system.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/14-18.png" height="201" width="340" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;&lt;STRONG style="color: #252525"&gt;5. Pay group change in SuccessFactors and replication of data.&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;After completing all the above processes, we need to upload the changes for the pay group for the required employees in SuccessFactors by navigating to import employee data. Download the compensation and job history templates and upload the compensation template first, followed by the job history template with the effective date.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;Note: Select incremental load for the additional changes, which will keep the previous records in the system. The full purge is for the fresh import, which will clear all the existing data. Based on your requirements, select your purge type. Do not forget to validate your file before importing it into the system.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-14.png" height="204" width="540" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;text-align: left"&gt;You can run replication using the T-code &lt;STRONG&gt;ECPAO_EE_ORG_REPL_QUERY&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;. &lt;/STRONG&gt;If you are running replication for one employee, then enter the employee ID in the External Employee ID field, or else ignore that. Followed by selecting the enable payload logging and enable extended verbose logging check boxes and test mode if testing is required.&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-10-1.png" height="265" width="547" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;&lt;SPAN style="font-size: 1rem;color: #252525"&gt;By completing all those steps above, your payroll area will be updated in the SAP S/4 system. Now you are ready to run the payroll for those employees.&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;Thanks for referring to my blog. Keep supporting me in posting more blogs.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="color: #252525;text-align: justify"&gt;Regards,&lt;BR style="color: #252525" /&gt;Aravind R&lt;BR style="color: #252525" /&gt;HXM consultant&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/human-capital-management-blog-posts-by-members/creation-and-mapping-of-a-new-pay-group-from-successfactors-to-the-s-4/ba-p/13573657"/>
    <published>2023-11-02T15:53:12+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cds2alv-generate-alv-list-reports-for-cds-views/ba-p/13581380</id>
    <title>cds2alv – Generate ALV list reports for CDS views</title>
    <updated>2023-11-21T00:27:44+01:00</updated>
    <author>
      <name>chris_graw</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/46033</uri>
    </author>
    <content>Welcome to this blog post introducing &lt;A href="https://github.com/rku-it-GmbH/cds2alv" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;cds2alv&lt;/STRONG&gt;&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://github.com/rku-it-GmbH/cds2alv" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;cds2alv&lt;/STRONG&gt;&lt;/A&gt; is an open source project offering a framework to generate ALV list reports for CDS Consumption Views similar to Fiori Elements. It was originally created as an environment to allow developers to learn CDS and SAP Fiori independently.&lt;BR /&gt;
&lt;BR /&gt;
It has since evolved into a tool for quickly creating monitoring transactions based on CDS and serves as an intermediate step in the transition from ALV list reports using ABAP SQL to SAP Fiori apps using CDS and OData.&lt;BR /&gt;
&lt;BR /&gt;
The project is available on &lt;A href="https://github.com/rku-it-GmbH/cds2alv" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;GitHub&lt;/STRONG&gt;&lt;/A&gt; and featured on &lt;STRONG&gt;&lt;A href="https://dotabap.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;dotabap&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;H1 id="toc-hId-835706592"&gt;Features&lt;/H1&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Easy to learn:&lt;/STRONG&gt; Report generation requires no further knowledge apart from CDS&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Consistent User Experience:&lt;/STRONG&gt; The generated reports share a common Look and Feel&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Interactive:&lt;/STRONG&gt; The generated reports support Intent-Based Navigation similar to SAP Fiori and BOPF actions&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Future Ready:&lt;/STRONG&gt; By Design, CDS views created to be used with this framework, can later be used as a basis for SAP Fiori Elements apps offering the same or similar functionality&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Extensible:&lt;/STRONG&gt; Reports can be enhanced by additional features that can be switched on or off for each view individually&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
The project is to be installed using &lt;A href="https://abapgit.org" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abapGit&lt;/STRONG&gt;&lt;/A&gt;. For further information please refer to the &lt;A href="https://github.com/rku-it-GmbH/cds2alv/blob/main/docs/installation_guide.md" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;installation guide&lt;/STRONG&gt;&lt;/A&gt;. It is maintained on release R/3 NetWeaver AS ABAP 7.50, and it runs on S/4HANA On-Premise with minor adjustments.&lt;BR /&gt;
&lt;H1 id="toc-hId-639193087"&gt;Evolution&lt;/H1&gt;&lt;BR /&gt;
The framework came to be as the result of several efforts to streamline and automate various repetitive tasks during the development process of list reports. The desire for this first arose in a project in late 2017. Over the course of this project several reports had the be developed, all of which featured almost the exact same selection screen, selection logic, ALV layout and event handling.&lt;BR /&gt;
&lt;BR /&gt;
In the end this led to the development of a custom ALV wrapper class with a simplified interface to allow efficient and uniform integration of ALV into custom reports and classes. The other three pain points, uniform treatment of selection screens, selection logic and event handling, remained unsolved for the time being.&lt;BR /&gt;
&lt;BR /&gt;
The next step towards a solution was the discovery of CDS and the Virtual Data Model (VDM). The Interface Views served as an elegant solution to the problem of reusable selection logic.&lt;BR /&gt;
&lt;BR /&gt;
Finally, the problem of finding a generic solution for selection screens and event handling could be solved using CDS annotations and Intent-Based Navigation, borrowing the respective solutions from SAP Fiori elements.&lt;BR /&gt;
&lt;BR /&gt;
The first version of cds2alv was finished in late 2021, but that version was still rather unpolished. Over the course of the last two years it was revised and refined to its present state.&lt;BR /&gt;
&lt;BR /&gt;
If you want to learn more about the tool‘s history and its underlying ideas, please check out my talk from the ABAPconf 2021 (in German language): &lt;A href="https://www.youtube.com/watch?v=nWr6liYWbJ0" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;ABAPConf 2021&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-442679582"&gt;Usage&lt;/H1&gt;&lt;BR /&gt;
Reports are generated and executed via transaction code ZCDS_ALV_START. This transaction code works similarly to the classical SE16 transaction. Reports for specific CDS views can be made available individually by means of a parameter transaction.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/ZCDS_ALV_START.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif;text-align: left"&gt;Initial Screen of Transaction ZCDS_ALV_START&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H1 id="toc-hId-246166077"&gt;Demo&lt;/H1&gt;&lt;BR /&gt;
The repository contains a subfolder with a simple demo showcasing the basic features. Alternatively, the framework can also provide a demonstration by itself by using it to generate list reports for the framework’s own CDS views.&lt;BR /&gt;
&lt;H1 id="toc-hId-49652572"&gt;Development Process&lt;/H1&gt;&lt;BR /&gt;
Using cd2alv, developing an ALV list report boils down to creating and annotating the CDS Consumption View and possibly defining a parameter transaction for individual use. An overview of &lt;A href="https://github.com/rku-it-GmbH/cds2alv/blob/main/docs/annotations.md" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;supported annotations&lt;/STRONG&gt;&lt;/A&gt; is given as part of the &lt;A href="https://github.com/rku-it-GmbH/cds2alv/tree/main/docs" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;documentation&lt;/STRONG&gt;&lt;/A&gt;.&lt;BR /&gt;
&lt;H1 id="toc-hId--146860933"&gt;Intent-Based Navigation&lt;/H1&gt;&lt;BR /&gt;
There are several possible ways in which cds2alv can handle Intent-Based navigation:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Individual implementation:&lt;/STRONG&gt; Handling for a specific CDS view can be implemented using an exit class.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Standard implementation: &lt;/STRONG&gt;Three options for reusable Handling are supported:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Function Module:&lt;/STRONG&gt; The value of a cell with in the ALV grid is passed as an importing parameter to a function module.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Business Object Method:&lt;/STRONG&gt; The value of a cell is used as key value to instantiate a BOR object. Subsequently a method of this object is called.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Transaction call:&lt;/STRONG&gt; The value of a cell is stored in a SET-/GET-Parameter, follow by calling a transaction.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
We plan to add support for static methods and instance methods of classes with public parameter-less constructors in the near future. The standard implementations are defined using the framework’s own view cluster ZVC_CDS_ALV_FW.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/CDS_ALV_SM34.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Definition of Intent-Based Navigation in View Cluster ZVC_CDS_ALV_FW&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H1 id="toc-hId--343374438"&gt;Extensibility&lt;/H1&gt;&lt;BR /&gt;
The reports generated by cds2alv can be extended by predefined plug-in extensions. These extensions can enhance several steps of the program flow as described in the &lt;A href="https://github.com/rku-it-GmbH/cds2alv/blob/main/docs/program_extensions.md" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;documentation&lt;/STRONG&gt;&lt;/A&gt;. We also plan to offer a selection of ready made extensions as part of a separate repository in the near future.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cds2alv-generate-alv-list-reports-for-cds-views/ba-p/13581380"/>
    <published>2023-11-21T00:27:44+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-10-extensions-i-exploring-external-libraries-native-device/ba-p/13576910</id>
    <title>abap2UI5 - (10) Extensions I: Exploring External Libraries &amp; Native Device Capabilities</title>
    <updated>2023-12-04T09:28:37+01:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 10 of this blog series introducing &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;abap2UI5&lt;/A&gt; &lt;/STRONG&gt;— an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;So far, we've focused on utilizing standard UI5 controls and primarily adopting UI5 samples for integration with abap2UI5. However, we also have the opportunity to use third-party libraries or harness native device capabilities at the frontend. This includes functionalities like barcode scanning, image capture, and geolocation services. In this blog, we will delve into these advanced features and their integration with abap2UI5&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
All demos showcased in this blog are ready for use and can be easily tried out by installing the &lt;A href="https://github.com/abap2UI5/abap2UI5-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abap2UI5-samples&lt;/STRONG&gt;&lt;/A&gt; with &lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abapGit&lt;/STRONG&gt;&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Find all the information about this project on &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub,&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;stay up-to-date by following on &lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter&lt;/A&gt; &lt;/STRONG&gt;and exploring the other articles of this blog series:&lt;BR /&gt;
&lt;TABLE style="height: 98px" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating Views with XML, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Setup: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Updates I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: &lt;SPAN style="font-family: inherit;font-size: inherit"&gt;Guideline for Developing New Features in JavaScript&lt;/SPAN&gt;&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;
&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1093103013"&gt;&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This article covers the following areas:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Displaying Barcodes with bwip-js&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Scanning Barcodes with the UI5 Barcode Scanner&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Reading Frontend Information (UI5 Version, Device Information etc.)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Reading Geolocation &amp;amp; Visualizing with the UI5 Map Container&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Capturing Pictures and Sending them to the Backend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Highlighting &amp;amp; Providing Contextual Help with driver.js&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;More Libraries (FontAwesome, ImageMapster...&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let's begin with the first topic:&lt;BR /&gt;
&lt;H3 id="toc-hId-896589508"&gt;&lt;STRONG&gt;(1) Display Barcodes with bwip-js&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
There are numerous libraries available for rendering barcodes at the frontend. For this example we use the open-source framework bwip-js, although other libraries could also be suitable. You can explore the repository &lt;STRONG&gt;&lt;A href="https://github.com/metafloor/bwip-js" target="_new" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; and view a demo of all its capabilities at &lt;A href="http://bwip-js.metafloor.com/demo/demo.html" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;this&lt;/STRONG&gt; &lt;STRONG&gt;link&lt;/STRONG&gt;.&lt;/A&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-11.39.55.png" height="193" width="529" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;JavaScript Framework bwip-js&lt;/P&gt;&lt;BR /&gt;
Many types of barcodes are available, and you can find a list of all supported barcode types &lt;STRONG&gt;&lt;A href="http://bwip-js.metafloor.com/" target="_new" rel="noopener nofollow noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-11.40.09.png" height="395" width="432" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Supported Barcodes of bwip-js&lt;/P&gt;&lt;BR /&gt;
To use this library in abap2UI5, the functionality is encapsulated within a custom control. You can view the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/02/z2ui5_cl_cc_bwipjs.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. The output of the demo app looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-13.13.14.png" height="220" width="392" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;bwip-js integrated in abap2UI5&lt;/P&gt;&lt;BR /&gt;
This encapsulation allows abap2UI5 app developers to easily utilize bwip-js features through properties, similar to how they do with any other UI5 control. The complexity of the bwip-js framework stays in the custom control, simplifying development at the app level. Take a look at the following view definition, which generates the barcode at the frontend:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;cont-&amp;gt;simple_form( title = 'Barcode' editable = abap_true&lt;BR /&gt;
      )-&amp;gt;_z2ui5( )-&amp;gt;bwip_js(&lt;BR /&gt;
              bcid = ms_barcode-sym&lt;BR /&gt;
              text = ms_barcode-text&lt;BR /&gt;
              scale = mv_scale_x&lt;BR /&gt;
              height = conv string( mv_scale_y + mv_scale_x ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The bwip-js demo in action looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_barcode.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Displaying Barcodes Using bwip-js&lt;/P&gt;&lt;BR /&gt;
As you can observe, it resembles the original demo, but it is now fully integrated into abap2UI5, allowing bwip-js to be used entirely in pure ABAP. The app's source code comprises just 137 lines. You can view the full example on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.20.15.png" height="238" width="488" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Displaying Barcodes in Pure ABAP with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_102.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
The bwip-js library and the Custom Control's code are loaded beforehand. This is done as &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/0d71a1451b94c58d30350788d10170b698723ce8/src/z2ui5_cl_demo_app_102.clas.abap#L119" target="_blank" rel="nofollow noopener noreferrer"&gt;follows:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;cont-&amp;gt;_generic( ns = `html` name = `script` )-&amp;gt;_cc_plain_xml( z2ui5_cl_cc_bwipjs=&amp;gt;get_js( ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This loading process occurs at the app level to minimize the framework's load time at startup and ensure it is only loaded when necessary. Alternatively, the loading can also be initiated at the framework's start. An importing parameter is available for loading custom JavaScript at startup &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/41f2d056e85546b5de9c7690f86d4c75d7f700cc/src/01/01/z2ui5_cl_fw_http_handler.clas.abap#L18" target="_new" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. Some Custom Controls with basic functionality are always preloaded, as you can find &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/41f2d056e85546b5de9c7690f86d4c75d7f700cc/src/02/01/z2ui5_cl_cc__factory_fw.clas.abap#L21" target="_blank" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-700076003"&gt;&lt;STRONG&gt;(2) Scan Barcodes with the UI5 Barcode Scanner&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Displaying barcodes is useful, but their functionality is limited without the ability to scan them. Initially, UI5 lacked native barcode scanning capabilities. This gap was bridged by developing custom controls to integrate libraries like Zbar, ScanBot, or Quagga.js into UI5. However, in recent years, this additional effort has become redundant as UI5 now incorporates scanner libraries built upon the &lt;STRONG&gt;&lt;A href="https://github.com/zxing/zxing" target="_blank" rel="nofollow noopener noreferrer"&gt;zxing&lt;/A&gt;&lt;/STRONG&gt; scanner engine. These functionalities are encapsulated within the sap.ndc.BarcodeScanner controls. Check out the samples &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/entity/sap.ndc.BarcodeScannerButton" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.01.15.png" height="210" width="515" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;UI5 Barcode Scanner Control&lt;/P&gt;&lt;BR /&gt;
This integration allows them to run seamlessly with both UI5 and abap2UI5 right out of the box. We can simply use this UI5 Control in our view as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;)-&amp;gt;barcodescannerbutton(&lt;BR /&gt;
     scansuccess = client-&amp;gt;_event( &lt;BR /&gt;
           val   = 'ON_SCAN_SUCCESS' &lt;BR /&gt;
           t_arg = VALUE #( ( `${$parameters&amp;gt;/text}`   ) &lt;BR /&gt;
                            ( `${$parameters&amp;gt;/format}` ) ) )&lt;BR /&gt;
     dialogtitle = `Barcode Scanner` ).&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
After each button click, a popup appears, allowing you to scan. The scanned format and text are then sent with the event "ScanSuccess" to the backend. See this demo, recorded on an iPhone:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_scan2.gif" height="563" width="260" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Scanning QR-Codes (Running on an iPhone)&lt;/P&gt;&lt;BR /&gt;
Similar to the first example, we can access the entire functionality through the properties of the UI5 control. This simplifies its use with abap2UI5, and only a small implementation logic is required for the above example. You can find the full source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.20.15-1.png" height="237" width="486" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Scanning Barcodes in Pure ABAP with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_124.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-503562498"&gt;&lt;STRONG&gt;(3) Read Frontend &amp;amp; Device Information&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Sometimes, you may want to respond within the application based on specific factors like the actual device, UI5 library version, or other frontend information. We can easily send this information to the backend, enabling you to respond in the ABAP code to certain situations. You can obtain some information using the following method:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-03-um-09.09.49.png" height="138" width="485" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Return Values of the Method client-&amp;gt;get( )&lt;/P&gt;&lt;BR /&gt;
Additionally, the framework now features a custom control, included &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/01/z2ui5_cl_cc_info_frontend.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;, to read more information from the frontend. Explore this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-03-um-09.11.38.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 - Read Frontend Information via Custom Control&lt;/P&gt;&lt;BR /&gt;
It can be utilized in the same manner as all other UI5 Controls, as demonstrated here:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt; client-&amp;gt;view_display( view-&amp;gt;shell(&lt;BR /&gt;
          )-&amp;gt;page(  title = 'abap2UI5'&lt;BR /&gt;
          )-&amp;gt;_z2ui5( )-&amp;gt;info_frontend(&lt;BR /&gt;
                finished          = client-&amp;gt;_event( `INFO_FINISHED` )&lt;BR /&gt;
                device_browser    = client-&amp;gt;_bind_edit( device_browser )&lt;BR /&gt;
                device_os         = client-&amp;gt;_bind_edit( device_os )&lt;BR /&gt;
                device_systemtype = client-&amp;gt;_bind_edit( device_systemtype )&lt;BR /&gt;
                ui5_gav           = client-&amp;gt;_bind_edit( ui5_gav )&lt;BR /&gt;
                ui5_theme         = client-&amp;gt;_bind_edit( ui5_theme )&lt;BR /&gt;
                ui5_version       = client-&amp;gt;_bind_edit( ui5_version ) &lt;BR /&gt;
          )-&amp;gt;stringify( ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Explore the full source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-04-um-08.20.58.png" height="243" width="460" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Reading Frontend Information in Pure ABAP with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_122.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
Further enhancements can be added in the future.&lt;BR /&gt;
&lt;H3 id="toc-hId-307048993"&gt;&lt;STRONG&gt;(4) Reading Geolocation &amp;amp; Visualizing with the UI5 Map Control&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The frontend's geolocation can be accessed using the &lt;A href="https://www.w3schools.com/html/html5_geolocation.asp" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Geolocation API&lt;/STRONG&gt;&lt;/A&gt;. For example, the source code for the frontend might look as follows:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;script&amp;gt;&lt;BR /&gt;
const x = document.getElementById("demo");&lt;BR /&gt;
&lt;BR /&gt;
function getLocation() {&lt;BR /&gt;
  if (navigator.geolocation) {&lt;BR /&gt;
    navigator.geolocation.getCurrentPosition(showPosition);&lt;BR /&gt;
  } else {&lt;BR /&gt;
    x.innerHTML = "Geolocation is not supported by this browser.";&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
function showPosition(position) {&lt;BR /&gt;
  x.innerHTML = "Latitude: " + position.coords.latitude +&lt;BR /&gt;
  "&amp;lt;br&amp;gt;Longitude: " + position.coords.longitude;&lt;BR /&gt;
}&lt;BR /&gt;
&amp;lt;/script&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
For integration with abap2UI5, the following &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/01/z2ui5_cl_cc_geolocation.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;custom control&lt;/A&gt;&lt;/STRONG&gt; encapsulates this functionality and it can be utilized in a view definition like this:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;)-&amp;gt;_z2ui5( )-&amp;gt;geolocation(&lt;BR /&gt;
      finished         = client-&amp;gt;_event(  )&lt;BR /&gt;
      longitude        = client-&amp;gt;_bind_edit( longitude )&lt;BR /&gt;
      latitude         = client-&amp;gt;_bind_edit( latitude )&lt;BR /&gt;
      altitude         = client-&amp;gt;_bind_edit( altitude )&lt;BR /&gt;
      altitudeaccuracy = client-&amp;gt;_bind_edit( altitudeaccuracy )&lt;BR /&gt;
      accuracy         = client-&amp;gt;_bind_edit( accuracy )&lt;BR /&gt;
      speed            = client-&amp;gt;_bind_edit( speed )&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It reads out the latitude, longitude, etc.:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_geo.gif" height="307" width="516" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Calling the Geolocation API at the Frontend&lt;/P&gt;&lt;BR /&gt;
However, it becomes fascinating when visualized on a map. While options like Google Maps or OpenStreetMap are available, we opt for a simpler approach by just integrating the UI5 Map Container Control into abap2UI5. Check out the control samples &lt;STRONG&gt;&lt;A href="https://ui5.sap.com//#/entity/sap.ui.vk.MapContainer" target="_blank" rel="noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.43.37.png" height="199" width="446" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;UI5 Map Container Control&lt;/P&gt;&lt;BR /&gt;
The Map Container Control in an abap2UI5 view looks like this:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;  )-&amp;gt;map_container(  autoadjustheight = abap_true&lt;BR /&gt;
                    )-&amp;gt;content( ns = `vk`&lt;BR /&gt;
                        )-&amp;gt;container_content(&lt;BR /&gt;
                          title = `Analytic Map`&lt;BR /&gt;
                          icon  = `sap-icon://geographic-bubble-chart`&lt;BR /&gt;
                            )-&amp;gt;content( ns = `vk`&lt;BR /&gt;
                                )-&amp;gt;analytic_map(&lt;BR /&gt;
                                  initialposition = `9.933573;50;0`&lt;BR /&gt;
                                  initialzoom = `6`&lt;BR /&gt;
                                )-&amp;gt;vos(&lt;BR /&gt;
                                    )-&amp;gt;spots( client-&amp;gt;_bind( mt_spot )&lt;BR /&gt;
                                    )-&amp;gt;spot(&lt;BR /&gt;
                                      position      = `{POS}`&lt;BR /&gt;
                                      contentoffset = `{CONTENTOFFSET}`&lt;BR /&gt;
                                      type          =  `{TYPE}`&lt;BR /&gt;
                                      scale         =  `{SCALE}`&lt;BR /&gt;
                                      tooltip       =  `{TOOLTIP}`&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And here is a demo combining the Geolocation and UI5 Map Container in a single, integrated example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_geolocation.gif" height="339" width="534" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Geolocation Information Visualized with the UI5 Map Container&lt;/P&gt;&lt;BR /&gt;
Explore the full source code of the demo on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.25.56.png" height="209" width="414" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Reading and Displaying the Geolocation in Pure ABAP with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_120.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
The map container also offers a lot more functionality - it's possible to display multiple spots or visualize complete routes:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.44.48.png" height="272" width="464" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;UI5 Map Container Control - More Features&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-110535488"&gt;&lt;STRONG&gt;(5) Capturing Pictures&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Capturing screenshots in modern browsers is accomplished using the &lt;STRONG&gt;&lt;A href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API" target="_blank" rel="nofollow noopener noreferrer"&gt;Media Capture and Streams API&lt;/A&gt;&lt;/STRONG&gt;. Similar to previous examples, for integration with abap2UI5, we encapsulate this functionality in a custom control, as shown &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/02/z2ui5_cl_cc_camera_picture.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. It can be utilized in a view definition as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;page-&amp;gt;_z2ui5( )-&amp;gt;camera_picture(&lt;BR /&gt;
          value    = client-&amp;gt;_bind_edit( mv_picture_base )&lt;BR /&gt;
          onphoto  = client-&amp;gt;_event( 'CAPTURE' ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
We send a user command to the backend with the event "onPhoto" and use a two-way binding for the data of the picture. This means when a picture is taken, it's transmitted to the backend in base64 format. To avoid unnecessary data transfer, we immediately clear this property and only send the picture to the frontend when it's needed:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;CASE client-&amp;gt;get( )-event.&lt;BR /&gt;
      WHEN 'CAPTURE'.&lt;BR /&gt;
        INSERT VALUE #( data = mv_picture_base time = sy-uzeit ) INTO TABLE mt_picture.&lt;BR /&gt;
        CLEAR mv_picture_base.&lt;BR /&gt;
        client-&amp;gt;view_model_update( ).&lt;BR /&gt;
&lt;BR /&gt;
     "....&lt;BR /&gt;
ENDCASE.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
A complete demo looks as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/camera.gif" height="589" width="387" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Capturing Pictures (Running on an iPad Mini)&lt;/P&gt;&lt;BR /&gt;
Again, the encapsulation into a custom control keeps the abap2UI5 app compact, requiring only 120 lines of code. You can view the complete source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.29.12.png" height="261" width="483" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Capturing Pictures in Pure ABAP with abap2UI5&lt;STRONG&gt;&amp;nbsp;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_137.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
This only represents the basic functionality of the Camera API at the frontend. Looking ahead, there's potential to upgrade the Custom Control to alter resolution or more camera settings. Although this app served primarily as a test case, photos frequently prove invaluable in business contexts, especially for documentation purposes. Whether they are stored as GOS attachments in an on-premise system or used with SAP BTP Document Management Service in cloud scenarios, you can also consider implementing these use cases with abap2UI5.&lt;BR /&gt;
&lt;H3 id="toc-hId--85978017"&gt;&lt;STRONG&gt;(6) Highlights &amp;amp; Contextual Help with driver.js&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
A few weeks ago, I received an excellent pull request from &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt;. It introduced the JavaScript framework driver.js designed to present contextual help or highlight specific areas of the screen as user guidance. Check out the framework &lt;STRONG&gt;&lt;A href="https://driverjs.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.41.57.png" height="294" width="438" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;JavaScript Framework driver.js&lt;/P&gt;&lt;BR /&gt;
This framework can be seamlessly integrated into abap2UI5. Here's what the demo looks like:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_driverjs.gif" height="281" width="472" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App in Action: Highlights &amp;amp; Contextual Help with driver.js&lt;/P&gt;&lt;BR /&gt;
The full source code is available on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-03-um-15.40.20.png" height="264" width="502" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code for Using driver.js in Pure ABAP with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_119.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
In this example, only basic functionality is implemented, but it effectively showcases its potential. The combination of UI5 together with driver.js opens up various additional use cases for the future.&lt;BR /&gt;
&lt;BR /&gt;
Special thanks to &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; for contributing this custom control and demo to abap2UI5. Another addition from him is Font Awesome and ImageMapster, which we will explore next.&lt;BR /&gt;
&lt;H3 id="toc-hId--282491522"&gt;&lt;STRONG&gt;(7) More Libraries...&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
There is a wide range of libraries compatible with both UI5 and abap2UI5. To see what has been integrated thus far, you can visit &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/tree/main/src/02" target="_blank" rel="nofollow noopener noreferrer"&gt;this folder&lt;/A&gt;&lt;/STRONG&gt;. Smaller libraries can also be quite useful for specific use cases. As an final example, let's take a look at the Font Awesome icons &lt;STRONG&gt;&lt;A href="https://fontawesome.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;here:&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.33.37.png" height="216" width="409" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App using Font Awesome&lt;/P&gt;&lt;BR /&gt;
And check out the full source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-02-um-23.34.48.png" height="240" width="492" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code of Font Awesome used with abap2UI5 &lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_118.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;(here)&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
Or take a look to the ImageMapster Example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-15.46.45-scaled.jpeg" height="375" width="530" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App using ImageMapster&lt;/P&gt;&lt;BR /&gt;
It can handle Events by clicking on certain Image areas, check out the full source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-15.52.19.png" height="280" width="490" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code of ImageMapster used with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_142.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
And finally check out &lt;STRONG&gt;&lt;A href="https://animate.style/" target="_blank" rel="nofollow noopener noreferrer"&gt;Animate.css&lt;/A&gt;&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_anmiate_css.gif" height="285" width="507" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 App using animate.css&lt;/P&gt;&lt;BR /&gt;
And check out the source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-19-um-16.36.40.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code of animate.css used with abap2UI5 &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_146.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--479005027"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
It was exciting to experiment with all these features to explore what's possible with the abap2UI5 approach. Although this was just a start, and much more can be developed in the future, it already showcases its potential: The use of native device capabilities with external libraries encapsulated within custom controls allows straightforward accessibility through properties in pure ABAP. It opens up a lot of use cases while keeping the development effort on app level very low.&lt;BR /&gt;
&lt;BR /&gt;
All these features have now been integrated into the abap2UI5 framework and are ready to run out-of-the-box after installation with &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt;. Storing JavaScript in ABAP classes may seem unconventional, but it ensures full compatibility&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;across any ABAP system and language version. This strategy eliminates the need for deployment of additional frontend artifacts or further configurations beyond the ABAP source code. Additionally, all applications developed using these functionalities also automatically qualify as &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt; apps, facilitating easy transport and exchange between systems.&lt;BR /&gt;
&lt;BR /&gt;
Are you using external libraries with UI5? Consider contributing them to abap2UI5, I always welcome new pull requests and have recently updated the repository to streamline the process of adding new custom controls.&lt;BR /&gt;
&lt;BR /&gt;
In the &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;next part&lt;/A&gt;&lt;/STRONG&gt;, you find a guideline of how to include your own JavaScript functionality to abap2UI5.&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading and I hope you enjoy experimenting with the new demos. Your feedback is always appreciated. Feel free to raise an &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/issues" target="_blank" rel="nofollow noopener noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt; or leave a comment.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-10-extensions-i-exploring-external-libraries-native-device/ba-p/13576910"/>
    <published>2023-12-04T09:28:37+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-11-extensions-ii-guideline-for-developing-new-features-in/ba-p/13576797</id>
    <title>abap2UI5 - (11) Extensions II: Guideline for Developing New Features in JavaScript</title>
    <updated>2023-12-11T11:05:38+01:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 11 of this blog series introducing &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;abap2UI5&lt;/A&gt; &lt;/STRONG&gt;— an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;In the last post, we explored various additional functionalities and external libraries that can be integrated with abap2UI5, but without delving into the technical background. Now, we aim to address that. This blog post will explain how to enhance abap2UI5 with custom functionalities and additional JavaScript logic. It is designed as a step-by-step guide for UI5 developers, demonstrating how they can develop frontend logic and make it accessible for the use in ABAP through abap2UI5 apps.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Check out the the corresponding GitHub repository &lt;A href="https://github.com/abap2UI5/abap2UI5-template_cc_development" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;here.&lt;/STRONG&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Find all the information about this project on &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub,&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;stay up-to-date by following on &lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter&lt;/A&gt; &lt;/STRONG&gt;and explore the other articles of this blog series:&lt;BR /&gt;
&lt;TABLE style="height: 98px" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2024/01/08/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/" target="_blank" rel="noopener noreferrer"&gt;(12) Update II: Community Feedback, New Features &amp;amp; Outlook - Jan. 2024&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1093101346"&gt;&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
We will start from the ground up, creating a new project and integrating all the essential logic required for frontend and backend communication. Finally, we will adapt this logic into an abap2UI5 artifact and use it in an abap2UI5 app in the backend. The content is structured as follows:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;General Idea &amp;amp;&amp;nbsp; Creating a new UI5 project&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Frontend Development (JS)&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Creating a new Custom Control&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Receiving data in the Frontend (JS) sent from the backend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Invoking backend functions (ABAP) from the frontend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Receiving data in the backend (ABAP) sent from the frontend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Calling frontend functions (JS) from the backend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Optional I: Implementing faceless controls (without UI)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Optional II: Loading external libraries&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Backend Development (ABAP)&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Migrating frontend logic to the ABAP Backend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Developing an abap2UI5 app using the new Custom Control&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Additional Comments&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Conclusion&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let’s begin with the first topic:&lt;BR /&gt;
&lt;H3 id="toc-hId-896587841"&gt;&lt;STRONG&gt;1. General Idea &amp;amp; Creating a New UI5 Project&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This guideline is centered around one core concept: We rigorously encapsulate all JavaScript logic within a Custom Control (CC). This approach offers the following advantages:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;It ensures that there are no dependencies outside of the Custom Control. This means we can easily copy and paste it into the backend with confidence in its correct functionality&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;We can use the properties of the Custom Control in the XML view for data exchange and communication between JS and ABAP. The Event and Data Binding functionality of the UI5 framework ensure smooth operation and ease of use&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;By avoiding globally defined variables and relying solely on the UI5 API, we guarantee that the application functions correctly even when the UI5 version is updated or when abap2UI5 operates in different contexts, such as the Fiori Launchpad or SAP Build Workzone Service&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let's start by launching your preferred development environment. Here we use Business Application Studio as it comes pre-equipped with UI5 tooling and create a new UI5 freestyle application. Upon completion, your project folder should resemble the following structure:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-06-um-14.51.57.png" height="253" width="481" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Structure of a new UI5 Freestyle App&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-700074336"&gt;&lt;STRONG&gt;2.1. Creating a new Custom Control (CC)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Numerous guidelines are available for developing Custom Controls in SAP UI5, such as blog articles and documentation. We will now follow the recommended approach from the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/d12d2ee6a5454d799358d425f9e7c4db.html" target="_blank" rel="nofollow noopener noreferrer"&gt;documentation&lt;/A&gt;&lt;/STRONG&gt; to create a new Custom Control. This process begins with creating a new folder and file:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-09.12.20.png" height="168" width="370" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;New Folder &amp;amp; File for the Custom Control (CC)&lt;/P&gt;&lt;BR /&gt;
Next, copy &amp;amp; paste the following snippet as your starting point:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl",[&lt;BR /&gt;
	"sap/ui/core/Control"&lt;BR /&gt;
], (Control) =&amp;gt; {&lt;BR /&gt;
	"use strict";&lt;BR /&gt;
&lt;BR /&gt;
	return Control.extend("project1.control.MyCustomControl", {&lt;BR /&gt;
&lt;BR /&gt;
		renderer(oRM, oControl) {&lt;BR /&gt;
            oRM.openStart("div", oControl);&lt;BR /&gt;
            oRM.openEnd();&lt;BR /&gt;
            oRM.write( 'test');&lt;BR /&gt;
            oRM.close("div");&lt;BR /&gt;
        }&lt;BR /&gt;
	});&lt;BR /&gt;
});&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Basic HTML is used for creating a first output. Integrate the new Custom Control (CC) into your XML View by making the following adjustment to the file View1.view.xml:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;mvc:View controllerName="project1.controller.View1"&lt;BR /&gt;
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"&lt;BR /&gt;
    xmlns="sap.m" xmlns:z2ui5="project1.control"&amp;gt;&lt;BR /&gt;
    &amp;lt;Page id="page" title="{i18n&amp;gt;title}"&amp;gt;&lt;BR /&gt;
        &amp;lt;content&amp;gt;&lt;BR /&gt;
        &amp;lt;z2ui5:MyCustomControl id="test" /&amp;gt;&lt;BR /&gt;
        &amp;lt;/content&amp;gt;&lt;BR /&gt;
    &amp;lt;/Page&amp;gt;&lt;BR /&gt;
&amp;lt;/mvc:View&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This XML View will be later created in ABAP on the backend, which means any configurations we establish here can be transmitted from the server. Meanwhile, we can use the CC to add all JavaScript logic we later want to process on the frontend.&lt;BR /&gt;
&lt;BR /&gt;
Now we will extend step-by-step the functionality of this Custom Control.&lt;BR /&gt;
&lt;H3 id="toc-hId-503560831"&gt;&lt;STRONG&gt;2.2 Receiving Data in the Frontend (JS) Sent from to the Backend (ABAP)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
First we want to send values from ABAP to the frontend Javascript Logic. We start by setting the property value in your XML view (this can later be done in ABAP):&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;mvc:View controllerName="project1.controller.View1"&lt;BR /&gt;
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"&lt;BR /&gt;
    xmlns="sap.m" xmlns:z2ui5="project1.control"&amp;gt;&lt;BR /&gt;
    &amp;lt;Page id="page" title="{i18n&amp;gt;title}"&amp;gt;&lt;BR /&gt;
        &amp;lt;content&amp;gt;&lt;BR /&gt;
        &amp;lt;z2ui5:MyCustomControl id="test" value="MyBackendValue"/&amp;gt;&lt;BR /&gt;
        &amp;lt;/content&amp;gt;&lt;BR /&gt;
    &amp;lt;/Page&amp;gt;&lt;BR /&gt;
&amp;lt;/mvc:View&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And we add the property "value" to the Custom Control (together with a setter and getter method) that it can receive its data:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl",[&lt;BR /&gt;
	"sap/ui/core/Control"&lt;BR /&gt;
], (Control) =&amp;gt; {&lt;BR /&gt;
	"use strict";&lt;BR /&gt;
&lt;BR /&gt;
	return Control.extend("project1.control.MyCustomControl", {&lt;BR /&gt;
	    metadata : {&lt;BR /&gt;
&lt;BR /&gt;
                 properties : { value: 	{type : "string" } },&lt;BR /&gt;
&lt;BR /&gt;
	    setValue(value){&lt;BR /&gt;
		this.setProperty("value", value);&lt;BR /&gt;
             },&lt;BR /&gt;
	    getValue(){&lt;BR /&gt;
		return this.getProperty("value");&lt;BR /&gt;
              },&lt;BR /&gt;
&lt;BR /&gt;
            renderer(oRM, oControl) {&lt;BR /&gt;
                oRM.openStart("div", oControl);&lt;BR /&gt;
                oRM.openEnd();&lt;BR /&gt;
                oRM.write( oControl.getValue("value") );&lt;BR /&gt;
                oRM.close("div");&lt;BR /&gt;
  } }); });&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
We display the value in the rendering method to verify if it is correctly transmitted to the frontend. When you begin testing this demo in a terminal (using the command 'npm run start'), you should observe the following result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-09.27.23.png" height="179" width="430" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC - Displaying values sent from the backend&lt;/P&gt;&lt;BR /&gt;
As you can observe, the values are successfully sent to the Custom Control. This illustrates how we can later transmit data from the backend to the frontend. Just add more properties and retrieve the backend values at the frontend by simply reading the control's property using the following command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;oControl.getValue("value");&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Next you can use these backend values to implement your JavaScript logic. But at a certain stage, it will become necessary to interact with the backend again. In the next section, we will trigger backend interactions, by focusing on the use of events in Custom Controls.&lt;BR /&gt;
&lt;H3 id="toc-hId-307047326"&gt;&lt;STRONG&gt;2.3 Invoking Backend Functions (ABAP) from the Frontend&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
In addition to the properties, we can enhance the Custom Control by adding events. We'll setup a "change" event which is triggered after a delay of 5 seconds. Typically, you would implement logic that culminates in triggering an event; however, for this example, we're adopting a straightforward approach to emphasize the underlying principle. The updated snippet for the Custom Control now appears as follows:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl",[&lt;BR /&gt;
	"sap/ui/core/Control"&lt;BR /&gt;
], (Control) =&amp;gt; {&lt;BR /&gt;
	"use strict";&lt;BR /&gt;
&lt;BR /&gt;
	return Control.extend("project1.control.MyCustomControl", {&lt;BR /&gt;
		metadata: {&lt;BR /&gt;
&lt;BR /&gt;
			properties: {&lt;BR /&gt;
				value: { type: "string" }&lt;BR /&gt;
			},&lt;BR /&gt;
			events: {&lt;BR /&gt;
				change: {}&lt;BR /&gt;
			}&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		setValue(value) {&lt;BR /&gt;
			this.setProperty("value", value);&lt;BR /&gt;
		},&lt;BR /&gt;
		getValue() {&lt;BR /&gt;
			return this.getProperty("value");&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		onAfterRendering() {&lt;BR /&gt;
&lt;BR /&gt;
			setTimeout((oControl) =&amp;gt; {&lt;BR /&gt;
				oControl.fireChange();&lt;BR /&gt;
			}, 5000, this);&lt;BR /&gt;
&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		renderer(oRM, oControl) {&lt;BR /&gt;
			oRM.openStart("div", oControl);&lt;BR /&gt;
			oRM.openEnd();&lt;BR /&gt;
			oRM.write(oControl.getValue("value"));&lt;BR /&gt;
			oRM.close("div");&lt;BR /&gt;
		}&lt;BR /&gt;
	});&lt;BR /&gt;
});&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Next, we need to manage the event in our controller, which is a process we will later replicate in ABAP. To begin, make the following adjustments to the XML:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;mvc:View controllerName="project1.controller.View1"&lt;BR /&gt;
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"&lt;BR /&gt;
    xmlns="sap.m" xmlns:z2ui5="project1.control"&amp;gt;&lt;BR /&gt;
    &amp;lt;Page id="page" title="{i18n&amp;gt;title}"&amp;gt;&lt;BR /&gt;
        &amp;lt;content&amp;gt;&lt;BR /&gt;
        &amp;lt;z2ui5:MyCustomControl id="test" value="MyBackendValue" change="onMyBackendChangeHandler" /&amp;gt;&lt;BR /&gt;
        &amp;lt;/content&amp;gt;&lt;BR /&gt;
    &amp;lt;/Page&amp;gt;&lt;BR /&gt;
&amp;lt;/mvc:View&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And the following adjustments to the controller:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl",[&lt;BR /&gt;
    "sap/ui/core/mvc/Controller"&lt;BR /&gt;
],&lt;BR /&gt;
&lt;BR /&gt;
    function (Controller) {&lt;BR /&gt;
        "use strict";&lt;BR /&gt;
&lt;BR /&gt;
        return Controller.extend("project1.controller.View1", {&lt;BR /&gt;
&lt;BR /&gt;
            onMyBackendChangeHandler: function (){&lt;BR /&gt;
                sap.m.MessageToast.show( 'Frontend Event raised, and processed in the backend');&lt;BR /&gt;
            }&lt;BR /&gt;
        });&lt;BR /&gt;
    });&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
When we test the application again, we observe that the Control is loaded and, after five seconds, the event is triggered. It is then handled in the controller by displaying a message toast. In a later step, we will implement the call of the message toast in ABAP:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-09.44.57.png" height="264" width="440" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC - Invoking backend functions from the frontend&lt;/P&gt;&lt;BR /&gt;
We can use this event now and start to process some backend logic. But normally after the frontend logic some data is also changed, consequently, a new question arises: How can we transmit updated frontend values to the backend for processing in our ABAP event handler?&lt;BR /&gt;
&lt;H3 id="toc-hId-110533821"&gt;&lt;STRONG&gt;2.4 Receiving Data in the Backend (ABAP) Sent from the Frontend&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The simplest method is to use data binding, a common practice in UI5 development for monitoring value changes. For instance, this is useful when a user modifies an input field at the UI and you need to track this change in JavaScript. Therefore, instead of directly entering the value into the XML view, we utilize data binding now and adjust the view as follows:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;mvc:View controllerName="project1.controller.View1"&lt;BR /&gt;
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"&lt;BR /&gt;
    xmlns="sap.m" xmlns:z2ui5="project1.control"&amp;gt;&lt;BR /&gt;
    &amp;lt;Page id="page" title="{i18n&amp;gt;title}"&amp;gt;&lt;BR /&gt;
        &amp;lt;content&amp;gt;&lt;BR /&gt;
        &amp;lt;z2ui5:MyCustomControl id="test" value="{MY_BINDED_VALUE}" change="onMyBackendChangeHandler" /&amp;gt;&lt;BR /&gt;
        &amp;lt;/content&amp;gt;&lt;BR /&gt;
    &amp;lt;/Page&amp;gt;&lt;BR /&gt;
&amp;lt;/mvc:View&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And we adjust the controller (which again only simulates the ABAP backend and will be replaced later):&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl", [&lt;BR /&gt;
    "sap/ui/core/mvc/Controller"&lt;BR /&gt;
],&lt;BR /&gt;
&lt;BR /&gt;
    function (Controller) {&lt;BR /&gt;
        "use strict";&lt;BR /&gt;
&lt;BR /&gt;
        return Controller.extend("project1.controller.View1", {&lt;BR /&gt;
            onInit: function () {&lt;BR /&gt;
&lt;BR /&gt;
                var data = { 'MY_BINDED_VALUE' : "backend value" };&lt;BR /&gt;
                var oModel = new sap.ui.model.json.JSONModel(data);&lt;BR /&gt;
                this.oView.setModel( oModel );&lt;BR /&gt;
&lt;BR /&gt;
            },&lt;BR /&gt;
            onMyBackendChangeHandler: function (oEvent){&lt;BR /&gt;
                var data = this.oView.getModel().getData();&lt;BR /&gt;
                sap.m.MessageToast.show( 'Frontend Event raised, and processed in the backend, value: ' + data.MY_BINDED_VALUE );&lt;BR /&gt;
            }&lt;BR /&gt;
        });&lt;BR /&gt;
    });&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Next we modify this value at the frontend by updating the property. We'll achieve this by enhancing our setTimeout method to include the setValue method call:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;			setTimeout((oControl) =&amp;gt; {&lt;BR /&gt;
				oControl.setValue("frontend value");&lt;BR /&gt;
				oControl.fireChange();&lt;BR /&gt;
			}, 3000, this);&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The outcome appears as follows: initially, the view is rendered using the value received from the backend:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-10.06.23.png" height="233" width="365" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC - Initial Load (1/2)&lt;/P&gt;&lt;BR /&gt;
And after 5 seconds, it is replaced with the frontend value set by the JavaScript logic:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-10.06.27.png" height="211" width="336" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC - Setting data in the frontend and sent to the backend (2/2)&lt;/P&gt;&lt;BR /&gt;
As you can see, we simply need to update the property using the command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;oControl.setValue("frontend value");&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The SAP UI5 framework automatically manages the remaining processes, significantly reducing the complexity that we typically encounter when handling frontend-to-backend data exchange. Furthermore, we will later observe that the abap2UI5 framework also streamlines the transfer of data binding to the attributes of the ABAP classes implementing 'z2ui5_if_app,' requiring no further actions.&lt;BR /&gt;
&lt;BR /&gt;
Now let's assume that some backend logic is processed in response to the updated frontend values and the event. The final step is to determine a way to trigger a specific function on the frontend from the backend, which we will do next.&lt;BR /&gt;
&lt;H3 id="toc-hId--85979684"&gt;&lt;STRONG&gt;2.5 Calling Frontend Functions (JS) from the Backend&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
To prepare for this, we first include in our Custom Control a new frontend function and property:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sap.ui.define("project1/control/MyCustomControl",[&lt;BR /&gt;
	"sap/ui/core/Control"&lt;BR /&gt;
], (Control) =&amp;gt; {&lt;BR /&gt;
	"use strict";&lt;BR /&gt;
&lt;BR /&gt;
	return Control.extend("project1.control.MyCustomControl", {&lt;BR /&gt;
		metadata: {&lt;BR /&gt;
&lt;BR /&gt;
			properties: {&lt;BR /&gt;
				value: { type: "string" },&lt;BR /&gt;
				checkCallMyFunction: { type : "boolean" }&lt;BR /&gt;
			},&lt;BR /&gt;
			events: {&lt;BR /&gt;
				change: {}&lt;BR /&gt;
			}&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		setValue(value) {&lt;BR /&gt;
			this.setProperty("value", value);&lt;BR /&gt;
		},&lt;BR /&gt;
		getValue() {&lt;BR /&gt;
			return this.getProperty("value");&lt;BR /&gt;
		},&lt;BR /&gt;
		setCheckCallMyFunction(checkCallMyFunction) {&lt;BR /&gt;
			if (checkCallMyFunction) {&lt;BR /&gt;
				this.myFrontendFunction();&lt;BR /&gt;
			}&lt;BR /&gt;
			this.setProperty("checkCallMyFunction", false);&lt;BR /&gt;
		},&lt;BR /&gt;
		init() {&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		myFrontendFunction(){&lt;BR /&gt;
			sap.m.MessageToast.show( 'myFrontendFunction called' );&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		onAfterRendering() {&lt;BR /&gt;
&lt;BR /&gt;
			setTimeout((oControl) =&amp;gt; {&lt;BR /&gt;
				oControl.setValue("frontend value");&lt;BR /&gt;
				oControl.fireChange();&lt;BR /&gt;
			}, 3000, this);&lt;BR /&gt;
&lt;BR /&gt;
		},&lt;BR /&gt;
&lt;BR /&gt;
		renderer(oRM, oControl) {&lt;BR /&gt;
			oRM.openStart("div", oControl);&lt;BR /&gt;
			oRM.openEnd();&lt;BR /&gt;
			oRM.write(oControl.getValue("value"));&lt;BR /&gt;
			oRM.close("div");&lt;BR /&gt;
		}&lt;BR /&gt;
	});&lt;BR /&gt;
});&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
To keep it simple, we just call a message toast, but of course, more complex logic can be implemented here. The key to calling this function from the backend is to use a boolean property that we transport as an attribute and can toggle in the backend to true. Then every time the backend sets it to true, the function is called at the frontend. The following changes to the XML are necessary:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;mvc:View controllerName="project1.controller.View1"&lt;BR /&gt;
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"&lt;BR /&gt;
    xmlns="sap.m" xmlns:z2ui5="project1.control"&amp;gt;&lt;BR /&gt;
    &amp;lt;Page id="page" title="{i18n&amp;gt;title}"&amp;gt;&lt;BR /&gt;
        &amp;lt;content&amp;gt;&lt;BR /&gt;
        &amp;lt;z2ui5:MyCustomControl id="test" value="{/MY_BINDED_VALUE}" change="onMyBackendChangeHandler" checkCallMyFunction="true"/&amp;gt;&lt;BR /&gt;
        &amp;lt;/content&amp;gt;&lt;BR /&gt;
    &amp;lt;/Page&amp;gt;&lt;BR /&gt;
&amp;lt;/mvc:View&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And now, when we test the application, we can observe that the function is being called:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-10.30.39.png" height="231" width="355" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC - Processing JS function, triggered from the backend&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 100%"&gt;&lt;STRONG&gt;Info:&lt;/STRONG&gt; We now have established all the essential communication mechanisms between the backend and frontend. Both sides are capable of exchanging data and triggering each other's functions.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;2.6 Optional I: Implementing Faceless Controls&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The example above includes the rendering of a UI. However, if your goal is solely to call functions at the frontend or integrate your JavaScript logic, you can opt to skip the rendering part and use it as a 'faceless' Custom Control. In this scenario, only properties are transferred through the XML view, the rendere method is empty and there is no impact on the UI. For example take a look to the CC to set the title &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/01/03/z2ui5_cl_fw_cc_title.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt; or to read frontend information &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/01/03/z2ui5_cl_fw_cc_info_frontend.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2.7 Optional II: Loading External Libraries&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
More functionality can be included by using external libraries. You can also load these libraries in your custom controls, as demonstrated in the bwip-js custom control example. Check it out &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/z2ui5_cl_cc_bwipjs.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId--282493189"&gt;&lt;STRONG&gt;3. Backend Development (ABAP)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Now, we want to transfer the Custom Control functionality to abap2UI5. If you're primarily a UI5 developer, this would be the perfect moment to reach out to your ABAP colleagues for assistance... 🦖🦖🦖&lt;BR /&gt;
&lt;H3 id="toc-hId--479006694"&gt;&lt;STRONG&gt;3.1 Migrating Frontend Logic to the ABAP Backend&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Access your ABAP backend system and create a new ABAP class with a new method named 'get_js' and a single return parameter. Next, ensure that the following option is activated in Eclipse:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-11.09.06.png" height="205" width="320" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Eclipse - Setting to copy &amp;amp; paste large string from the clipboard&lt;/P&gt;&lt;BR /&gt;
Now, we copy &amp;amp; paste the entire Source Code of the Custom Control into Eclipse:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-11.10.57.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;press strg+v now!&lt;/P&gt;&lt;BR /&gt;
The snippet of the ABAP class now looks as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-07-um-11.11.34.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Javascript of the CC after copy &amp;amp; paste to ABAP&lt;/P&gt;&lt;BR /&gt;
Next, we replace the namespace for its use in abap2UI5. In our case, the original namespace was 'project1.control'. We will substitute this with 'z2ui5':&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-24-um-14.37.28.png" height="307" width="469" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;CC with replaced Namespaces and with added sap.declare function at the beginning&lt;/P&gt;&lt;BR /&gt;
Check out the full source code on Github:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-08-um-09.13.15.png" height="208" width="371" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-template_cc_development/blob/main/src/zcl_a2ui5_my_custom_control.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--675520199"&gt;&lt;STRONG&gt;3.2. Developing an abap2UI5 Application Using the New Custom Control&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
As mentioned earlier, the controller and XML View that we initially developed in JavaScript will now be implemented in ABAP. Therefore, we are now creating an abap2UI5 app. For this, we create another class and implement the interface 'z2ui5_if_app'. In the abap2UI5 app, the XML View with the new CC from above now appears as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    DATA(view) = z2ui5_cl_xml_view=&amp;gt;factory( ).&lt;BR /&gt;
    client-&amp;gt;view_display( view-&amp;gt;shell(&lt;BR /&gt;
      )-&amp;gt;page( 'abap2UI5 - My CC App'&lt;BR /&gt;
      )-&amp;gt;_generic(&lt;BR /&gt;
        name   = `MyCustomControl`&lt;BR /&gt;
        ns     = `z2ui5`&lt;BR /&gt;
        t_prop = VALUE #(&lt;BR /&gt;
            ( n = `value`               v = client-&amp;gt;_bind_edit( mv_binded_value ) )&lt;BR /&gt;
            ( n = `change`              v = client-&amp;gt;_event( 'MY_FRONTEND_EVENT' ) )&lt;BR /&gt;
            ( n = `checkCallMyFunction` v = `true` )&lt;BR /&gt;
             )&lt;BR /&gt;
      )-&amp;gt;stringify( ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And the logic for the controller in JavaScript now looks in ABAP in the abap2UI5 app as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    CASE client-&amp;gt;get( )-event.&lt;BR /&gt;
      WHEN 'ON_CC_LOADED'.&lt;BR /&gt;
        display_view( ).&lt;BR /&gt;
      WHEN 'MY_FRONTEND_EVENT'.&lt;BR /&gt;
        client-&amp;gt;message_box_display( |Frontend Event raised, and processed in the backend, value: { mv_binded_value }| ).&lt;BR /&gt;
      WHEN 'BACK'.&lt;BR /&gt;
        client-&amp;gt;nav_app_leave( client-&amp;gt;get_app( client-&amp;gt;get( )-s_draft-id_prev_app_stack  ) ).&lt;BR /&gt;
    ENDCASE.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Additionally, we need to implement some logic to ensure that the Custom Control is loaded first upon the application's start before we can utilize it in our view. We will set up this process as follows:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    DATA(view) = z2ui5_cl_xml_view=&amp;gt;factory( ).&lt;BR /&gt;
    client-&amp;gt;view_display(&lt;BR /&gt;
      view-&amp;gt;_generic( ns = `html` name = `script` )-&amp;gt;_cc_plain_xml( zcl_a2ui5_my_custom_control=&amp;gt;get_js( )&lt;BR /&gt;
          )-&amp;gt;_z2ui5( )-&amp;gt;timer( client-&amp;gt;_event( `ON_CC_LOADED` )&lt;BR /&gt;
          )-&amp;gt;stringify( ) ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Check out the full source code on GitHub:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/Bildschirmfoto-2023-12-08-um-09.14.11.png" height="242" width="436" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Source Code of the abap2UI5 Demo App &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-template_cc_development/blob/main/src/z2cl_a2ui5_my_test_app.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;(here)&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
Now, you can start the new app. The entire logic that was previously processed as a UI5 frontend application is now integrated into the backend and can be utilized through abap2UI5 apps. The final demo, running in abap2UI5, now appears as follows:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/gif_demo.gif" height="250" width="458" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 app - Demo using the new CC&lt;/P&gt;&lt;BR /&gt;
This concludes our development journey, which began at the frontend, progressed into the backend, and finally ends in the use within an abap2UI5 app. The Custom Control till now just contains basic functions, you can now begin to enhance it with more JavaScript logic.&lt;BR /&gt;
&lt;H3 id="toc-hId--947265073"&gt;&lt;STRONG&gt;4. Additional Comments&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
There are multiple ways to develop and encapsulate JavaScript logic and integrate it into abap2UI5. The method explained here is simply the one that has worked best so far. The ease of using data binding and events on the frontend greatly simplifies interaction with the backend. And in the backend, the Custom Control ensures seamless use in ABAP via properties in Views in abap2UI5 apps.&lt;BR /&gt;
&lt;BR /&gt;
However, improvements are always possible. If you prefer other methods, feel free to use what works best for you. As highlighted in &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;part 5&lt;/A&gt;&lt;/STRONG&gt; of the series, you can send plain JavaScript, CSS, and HTML to the frontend. Essentially, you have complete freedom in your approach and you might find more suitable methods to meet your specific needs.&lt;BR /&gt;
&lt;BR /&gt;
Furthermore, this was just a basic example. Custom Controls can be developed to be much more complex, for example with features like aggregations. Be sure to also explore more blog posts about Custom Control development and experiment for yourself.&lt;BR /&gt;
&lt;BR /&gt;
The full source code is available on GitHub, check it out &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-template_cc_development" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. It's open for future extensions, and you're welcome to create issues and PRs.&lt;BR /&gt;
&lt;H3 id="toc-hId--1143778578"&gt;&lt;STRONG&gt;5. Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This concludes our guideline on how to enhance abap2UI5 with new JavaScript logic.&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading, and I hope this inspires you to experiment with adding your own functionalities to abap2UI5. 👷‍&lt;span class="lia-unicode-emoji" title=":female_sign:"&gt;♀️&lt;/span&gt;👷&lt;BR /&gt;
&lt;BR /&gt;
Your feedback is always appreciated. Feel free to raise an &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt; or leave a comment.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-11-extensions-ii-guideline-for-developing-new-features-in/ba-p/13576797"/>
    <published>2023-12-11T11:05:38+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/third-party-system-approvals-substitution-to-s4-system-through-interface/ba-p/13578916</id>
    <title>Third party system approvals substitution to S4 System through interface</title>
    <updated>2023-12-14T22:07:28+01:00</updated>
    <author>
      <name>suryag</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/775700</uri>
    </author>
    <content>&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The development of this interface will facilitate the entry of delegation values into the standard SAP table HRUS_D2. 3PL system will provide a file that will be sent to SAP nightly utilizing PI for processing. The&amp;nbsp;file will be tab delimited in format and will be placed in be placed in a SAPIN folder: \\saptest\\sapin\erp\\folder&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Overview:-&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;1)&amp;nbsp;3PL system will provide a file.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2) The file will be tab delimited in format and will be placed in be placed in a SAPIN folder.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;3) Path \\saptest\\sapin\\erp\\folder&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;4) Check conditions. If yes, based on conditions data will be created or updated or modified&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;in HRUS_D2 table. Send log information through email.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;5) If no, continue business process.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step By Step Procedure for Creating Proxy&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
1.The Proxy Service Interface has to be created by PI consultant from PI side. This will further reflect in ABAP side in T-Code “SPROXY”.&lt;BR /&gt;
&lt;BR /&gt;
2.Create the Proxy from T-Code “SPROXY”.&lt;BR /&gt;
&lt;BR /&gt;
3.The Proxy created from PI side will be reflected with following details in SPROXY.&lt;BR /&gt;
Software Component: Service_1.0_of_erp.com&lt;BR /&gt;
Namespace:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;A href="http://erp.com//3PLtoSAPService" target="test_blank" rel="nofollow noopener noreferrer"&gt;http://erp.com//3PLtoSAPService&lt;/A&gt;&lt;BR /&gt;
Service Interfaces:&amp;nbsp; &amp;nbsp; &amp;nbsp; Service_Async_Out&lt;BR /&gt;
&lt;BR /&gt;
4. Proxy Name will be available once we generate the Proxy.&lt;BR /&gt;
&lt;BR /&gt;
To generate proxy we need to right click on Service Interface “Service_Async_Out” for Outbound and&amp;nbsp; &amp;nbsp; &amp;nbsp;click on “Create Proxy”.&lt;BR /&gt;
&lt;BR /&gt;
5.We need to give the “Package” and “Transport Request” to which the Proxy needs to be saved.&lt;BR /&gt;
&lt;BR /&gt;
6.Once the proxy is created for a service interface then that Interface will be marked as Green.&lt;BR /&gt;
&lt;BR /&gt;
7. we can find the Proxy Name when we double click on the generated Service Interface. In this case since the Outbound Proxy was already generated we can find the Proxy name of that.&lt;BR /&gt;
&lt;BR /&gt;
8 .The objects created when we generate a Proxy is as follows&lt;BR /&gt;
I. Data Type&lt;BR /&gt;
ii. Message Type&lt;BR /&gt;
iii. Proxy Class.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Implement proxy class method&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the&amp;nbsp;&lt;STRONG&gt;Properties&lt;/STRONG&gt; tab. Double-click the implementing class. and then double-click the method.&lt;BR /&gt;
&lt;BR /&gt;
Maintain the implementation of the method.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Purpose:&lt;/STRONG&gt; Upload data into HRUS_D2 table(Substituted by User).using below function modules in our interface.&lt;BR /&gt;
&lt;BR /&gt;
SAP_WAPI_SUBSTITUTE_DELETE&lt;BR /&gt;
SAP_WAPI_SUBSTITUTE_MAINTAIN&lt;BR /&gt;
RH_UPDATE_SUBST_LIST_SERVER&lt;BR /&gt;
&lt;BR /&gt;
Total 3 scenarios are there&lt;BR /&gt;
&lt;BR /&gt;
Once the file triggers proxy then checking the conditions. Based on conditions data will be created or updated or modified.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Scenario1:&lt;/STRONG&gt; If file data not in a table, then it inserts a new record same as in file.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Scenario2:&lt;/STRONG&gt; If file data in a table, then it updates existing record same as in file.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Scenario3:&lt;/STRONG&gt; Table data not in a file then need to update end date and active with ‘space’.&lt;BR /&gt;
&lt;BR /&gt;
After file execution sent an email with log information (which email is maintained in ZEMAIL table).&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;METHOD zclii_service_async_in~service_async_in.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
*/ Structure declarations&lt;BR /&gt;
TYPES: BEGIN OF ty_input,&lt;BR /&gt;
us_name TYPE xubname,&lt;BR /&gt;
rep_name TYPE xubname,&lt;BR /&gt;
begda TYPE begdatum,&lt;BR /&gt;
endda TYPE enddatum,&lt;BR /&gt;
reppr TYPE hr_rep_prf,&lt;BR /&gt;
active TYPE hs_rep_act,&lt;BR /&gt;
END OF ty_input.&lt;BR /&gt;
TYPES: BEGIN OF ty_final,&lt;BR /&gt;
us_name TYPE xubname,&lt;BR /&gt;
rep_name TYPE xubname,&lt;BR /&gt;
begda TYPE begdatum,&lt;BR /&gt;
endda TYPE enddatum,&lt;BR /&gt;
reppr TYPE hr_rep_prf,&lt;BR /&gt;
active TYPE hs_rep_act,&lt;BR /&gt;
message(100) TYPE c,&lt;BR /&gt;
END OF ty_final.&lt;BR /&gt;
&lt;BR /&gt;
DATA: substituted_obj TYPE swragent,&lt;BR /&gt;
substitute TYPE swragent,&lt;BR /&gt;
sub_beg TYPE swr_substbegin,&lt;BR /&gt;
sub_end TYPE swr_substend,&lt;BR /&gt;
sub_pfile TYPE swr_substprof,&lt;BR /&gt;
sub_act TYPE swr_substactive,&lt;BR /&gt;
lang TYPE sylangu,&lt;BR /&gt;
ext_badi TYPE xfeld,&lt;BR /&gt;
ret_code TYPE sysubrc,&lt;BR /&gt;
msg_lines TYPE TABLE OF swr_messag,&lt;BR /&gt;
msg_str TYPE TABLE OF swr_mstruc,&lt;BR /&gt;
subs_tab TYPE TABLE OF swragent,&lt;BR /&gt;
date(2) TYPE c,&lt;BR /&gt;
month(2) TYPE c,&lt;BR /&gt;
year(4) TYPE c,&lt;BR /&gt;
lv_datum(8) TYPE c,&lt;BR /&gt;
lv_dat(8) TYPE c.&lt;BR /&gt;
&lt;BR /&gt;
*/ Data declarations&lt;BR /&gt;
DATA:&lt;BR /&gt;
*/ Internal Tables&lt;BR /&gt;
lt_input TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_output TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_modify TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_temp TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_insert TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_update TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_updatex TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_deletex TYPE TABLE OF ty_input,&lt;BR /&gt;
lt_email_address TYPE ifp_tab_address,&lt;BR /&gt;
lt_binary_content TYPE solix_tab,&lt;BR /&gt;
lt_email_body TYPE TABLE OF tline,&lt;BR /&gt;
&lt;BR /&gt;
*/ Local Reference&lt;BR /&gt;
lo_email TYPE REF TO zcl_gen_utilities,&lt;BR /&gt;
&lt;BR /&gt;
*/ Local Structures&lt;BR /&gt;
ls_output TYPE ty_input,&lt;BR /&gt;
ls_insert TYPE ty_input,&lt;BR /&gt;
ls_update TYPE ty_input,&lt;BR /&gt;
ls_updatex TYPE ty_input,&lt;BR /&gt;
ls_deletex TYPE ty_input,&lt;BR /&gt;
ls_email_body TYPE tline,&lt;BR /&gt;
ls_email_address TYPE ifp_str_address,&lt;BR /&gt;
&lt;BR /&gt;
*/ Local Variables&lt;BR /&gt;
lv_string TYPE string,&lt;BR /&gt;
lv_size TYPE so_obj_len,&lt;BR /&gt;
lv_subject(50),&lt;BR /&gt;
lv_enddate TYPE sy-datum,&lt;BR /&gt;
lv_err TYPE c,&lt;BR /&gt;
lc_tab TYPE c VALUE cl_bcs_convert=&amp;gt;lc_tab,&lt;BR /&gt;
lc_crlf TYPE c VALUE cl_bcs_convert=&amp;gt;lc_crlf.&lt;BR /&gt;
&lt;BR /&gt;
DATA:&lt;BR /&gt;
subst_tab TYPE STANDARD TABLE OF hrus_d2, "TABLES PARAM&lt;BR /&gt;
wa_subst_tab LIKE LINE OF subst_tab,&lt;BR /&gt;
err_tab TYPE STANDARD TABLE OF hrscmperr, "TABLES PARAM&lt;BR /&gt;
wa_err_tab LIKE LINE OF err_tab.&lt;BR /&gt;
&lt;BR /&gt;
DATA: lt_final TYPE TABLE OF ty_final,&lt;BR /&gt;
ls_final TYPE ty_final,&lt;BR /&gt;
lt_hrus TYPE TABLE OF hrus_d2,&lt;BR /&gt;
lt_temp TYPE TABLE OF hrus_d2.&lt;BR /&gt;
&lt;BR /&gt;
*/ Constants Declarations&lt;BR /&gt;
&lt;BR /&gt;
CONSTANTS: lc_eamt_parameters TYPE string VALUE 'ZEMAIL', "&lt;BR /&gt;
lc_ricefid_1234 TYPE zparam_name VALUE 'EMAIL1234', "&lt;BR /&gt;
lc_param_name TYPE zmaptype1 VALUE 'Z1234_EMAIL'. "&lt;BR /&gt;
"lc_eamt_parameters TYPE string VALUE 'ZEAMT_PARAMETERS', "&lt;BR /&gt;
&lt;BR /&gt;
REFRESH: lt_input, lt_output, lt_update, gt_insert, lt_updatex,&lt;BR /&gt;
lt_final, lt_hrus, lt_temp, lt_temp, subst_tab, err_tab, gt_deletex.&lt;BR /&gt;
CLEAR: ls_final, ls_output, ls_insert, gs_update, ls_updatex, ls_deletex.&lt;BR /&gt;
&lt;BR /&gt;
IF input-delegation_update_sap IS NOT INITIAL.&lt;BR /&gt;
MOVE-CORRESPONDING input-delegation_update_sap-record TO lt_input.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_input INTO DATA(ls_input).&lt;BR /&gt;
ls_output-us_name = ls_input-us_name.&lt;BR /&gt;
ls_output-rep_name = ls_input-rep_name.&lt;BR /&gt;
ls_output-begda = ls_input-begda.&lt;BR /&gt;
ls_output-endda = ls_input-endda.&lt;BR /&gt;
ls_output-reppr = ls_input-reppr.&lt;BR /&gt;
ls_output-active = ls_input-active.&lt;BR /&gt;
APPEND ls_output TO lt_output.&lt;BR /&gt;
CLEAR:ls_output,&lt;BR /&gt;
ls_input.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_output INTO DATA(ls_output) WHERE reppr = '0003'.&lt;BR /&gt;
month = ls_output-begda+0(2).&lt;BR /&gt;
date = ls_output-begda+2(2).&lt;BR /&gt;
year = ls_output-begda+4(4).&lt;BR /&gt;
CONCATENATE year month date INTO ls_output-begda.&lt;BR /&gt;
&lt;BR /&gt;
month = ls_output-endda+0(2).&lt;BR /&gt;
date = ls_output-endda+2(2).&lt;BR /&gt;
year = ls_output-endda+4(4).&lt;BR /&gt;
CONCATENATE year month date INTO ls_output-endda.&lt;BR /&gt;
&lt;BR /&gt;
SELECT SINGLE * FROM hrus_d2 INTO &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(ls_hrus) WHERE us_name = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1398583"&gt;@LieneS&lt;/a&gt;_output-us_name&lt;BR /&gt;
AND rep_name = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1398583"&gt;@LieneS&lt;/a&gt;_output-rep_name&lt;BR /&gt;
AND begda = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1398583"&gt;@LieneS&lt;/a&gt;_output-begda.&lt;BR /&gt;
"Case1 File data not in a table then insert a record&lt;BR /&gt;
IF sy-subrc &amp;lt;&amp;gt; 0 AND ls_hrus IS INITIAL.&lt;BR /&gt;
MOVE-CORRESPONDING ls_output TO ls_insert.&lt;BR /&gt;
APPEND ls_insert TO gt_insert.&lt;BR /&gt;
"Case2 File data in a table then update a record&lt;BR /&gt;
ELSEIF ls_hrus IS NOT INITIAL.&lt;BR /&gt;
&lt;BR /&gt;
IF ls_output-endda = ls_hrus-endda. "It triggers Maintain Function module&lt;BR /&gt;
MOVE-CORRESPONDING ls_output TO gs_update.&lt;BR /&gt;
APPEND ls_update TO lt_update.&lt;BR /&gt;
ELSEIF ls_output-endda &amp;lt;&amp;gt; ls_hrus-endda.. "It triggers delete FM and insert a record&lt;BR /&gt;
MOVE-CORRESPONDING ls_output TO ls_updatex.&lt;BR /&gt;
APPEND ls_updatex TO lt_updatex.&lt;BR /&gt;
&lt;BR /&gt;
MOVE-CORRESPONDING ls_output TO ls_deletex.&lt;BR /&gt;
ls_deletex-endda = ls_hrus-endda. "need&lt;BR /&gt;
APPEND ls_deletex TO gt_deletex.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
CLEAR: ls_insert, ls_output, ls_hrus, gs_update, ls_updatex, ls_deletex.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
"Case3 Table data not in a file then need to update enddate and active&lt;BR /&gt;
LOOP AT lt_output INTO DATA(gs_modify).&lt;BR /&gt;
month = gs_modify-begda+0(2).&lt;BR /&gt;
date = gs_modify-begda+2(2).&lt;BR /&gt;
year = gs_modify-begda+4(4).&lt;BR /&gt;
CONCATENATE year month date INTO gs_modify-begda.&lt;BR /&gt;
&lt;BR /&gt;
month = gs_modify-endda+0(2).&lt;BR /&gt;
date = gs_modify-endda+2(2).&lt;BR /&gt;
year = gs_modify-endda+4(4).&lt;BR /&gt;
CONCATENATE year month date INTO gs_modify-endda.&lt;BR /&gt;
&lt;BR /&gt;
APPEND gs_modify TO lt_temp.&lt;BR /&gt;
CLEAR: gs_modify.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
IF lt_temp IS NOT INITIAL.&lt;BR /&gt;
SELECT * FROM hrus_d2 INTO TABLE lt_temp WHERE reppr = '0003'.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_temp INTO DATA(gs_temp).&lt;BR /&gt;
DELETE lt_temp WHERE us_name = gs_temp-us_name&lt;BR /&gt;
AND rep_name = gs_temp-rep_name&lt;BR /&gt;
AND begda = gs_temp-begda.&lt;BR /&gt;
CLEAR: gs_temp.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
lt_hrus = lt_temp.&lt;BR /&gt;
&lt;BR /&gt;
"Delete the records&lt;BR /&gt;
LOOP AT lt_temp INTO DATA(ls_temp) WHERE active = 'X'.&lt;BR /&gt;
substituted_obj-otype = 'US'.&lt;BR /&gt;
substituted_obj-objid = ls_temp-us_name.&lt;BR /&gt;
&lt;BR /&gt;
substitute-otype = 'US'.&lt;BR /&gt;
substitute-objid = ls_temp-rep_name.&lt;BR /&gt;
APPEND substitute TO subs_tab.&lt;BR /&gt;
&lt;BR /&gt;
sub_beg = ls_temp-begda.&lt;BR /&gt;
sub_end = ls_temp-endda.&lt;BR /&gt;
&lt;BR /&gt;
CALL FUNCTION 'SAP_WAPI_SUBSTITUTE_DELETE'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
substituted_obj = substituted_obj&lt;BR /&gt;
start_date = sub_beg&lt;BR /&gt;
end_date = sub_end&lt;BR /&gt;
delete_without_date = 'X'&lt;BR /&gt;
lang = sy-langu&lt;BR /&gt;
ext_badi = ' '&lt;BR /&gt;
IMPORTING&lt;BR /&gt;
ret_code = ret_code&lt;BR /&gt;
TABLES&lt;BR /&gt;
substitutes = subs_tab&lt;BR /&gt;
msg_lines = msg_lines&lt;BR /&gt;
msg_str = msg_str.&lt;BR /&gt;
CLEAR: ls_temp.&lt;BR /&gt;
REFRESH: subs_tab.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
"Change end date and active with space&lt;BR /&gt;
LOOP AT lt_hrus INTO ls_hrus.&lt;BR /&gt;
IF ls_hrus-active = 'X'.&lt;BR /&gt;
gs_modify-us_name = ls_hrus-us_name.&lt;BR /&gt;
gs_modify-rep_name = ls_hrus-rep_name.&lt;BR /&gt;
gs_modify-begda = ls_hrus-begda.&lt;BR /&gt;
lv_datum = sy-datum.&lt;BR /&gt;
lv_dat = lv_datum - 1.&lt;BR /&gt;
year = lv_dat+0(4).&lt;BR /&gt;
month = lv_dat+4(2).&lt;BR /&gt;
date = lv_dat+6(2).&lt;BR /&gt;
CONCATENATE year month date INTO gs_modify-endda. "need to modify&lt;BR /&gt;
gs_modify-reppr = ls_hrus-reppr.&lt;BR /&gt;
gs_modify-active = ls_hrus-active.&lt;BR /&gt;
APPEND gs_modify TO lt_modify.&lt;BR /&gt;
CLEAR: gs_modify, ls_hrus, lv_dat.&lt;BR /&gt;
ELSE.&lt;BR /&gt;
MOVE-CORRESPONDING ls_hrus TO gs_modify.&lt;BR /&gt;
APPEND gs_modify TO lt_modify.&lt;BR /&gt;
CLEAR: gs_modify, ls_hrus.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_deletex INTO ls_deletex.&lt;BR /&gt;
substituted_obj-otype = 'US'.&lt;BR /&gt;
substituted_obj-objid = ls_deletex-us_name.&lt;BR /&gt;
substitute-otype = 'US'.&lt;BR /&gt;
substitute-objid = ls_deletex-rep_name.&lt;BR /&gt;
APPEND substitute TO subs_tab.&lt;BR /&gt;
sub_beg = ls_deletex-begda.&lt;BR /&gt;
sub_end = ls_deletex-endda.&lt;BR /&gt;
&lt;BR /&gt;
CALL FUNCTION 'SAP_WAPI_SUBSTITUTE_DELETE'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
substituted_obj = substituted_obj&lt;BR /&gt;
start_date = sub_beg&lt;BR /&gt;
end_date = sub_end&lt;BR /&gt;
delete_without_date = 'X'&lt;BR /&gt;
lang = sy-langu&lt;BR /&gt;
ext_badi = ' '&lt;BR /&gt;
IMPORTING&lt;BR /&gt;
ret_code = ret_code&lt;BR /&gt;
TABLES&lt;BR /&gt;
substitutes = subs_tab&lt;BR /&gt;
msg_lines = msg_lines&lt;BR /&gt;
msg_str = msg_str.&lt;BR /&gt;
CLEAR: ls_deletex.&lt;BR /&gt;
REFRESH: subs_tab.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
"Case1 Create a new record&lt;BR /&gt;
IF lt_insert IS NOT INITIAL.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_insert INTO ls_insert.&lt;BR /&gt;
substituted_obj-otype = 'US'.&lt;BR /&gt;
substituted_obj-objid = ls_insert-us_name.&lt;BR /&gt;
substitute-otype = 'US'.&lt;BR /&gt;
substitute-objid = ls_insert-rep_name.&lt;BR /&gt;
sub_beg = ls_insert-begda.&lt;BR /&gt;
sub_end = ls_insert-endda.&lt;BR /&gt;
sub_pfile = ls_insert-reppr.&lt;BR /&gt;
sub_act = ls_insert-active.&lt;BR /&gt;
&lt;BR /&gt;
CALL FUNCTION 'SAP_WAPI_SUBSTITUTE_MAINTAIN'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
substituted_obj = substituted_obj&lt;BR /&gt;
substitute = substitute&lt;BR /&gt;
sub_beg = sub_beg&lt;BR /&gt;
sub_end = sub_end&lt;BR /&gt;
sub_pfile = sub_pfile&lt;BR /&gt;
sub_act = sub_act&lt;BR /&gt;
lang = sy-langu&lt;BR /&gt;
ext_badi = ' '&lt;BR /&gt;
IMPORTING&lt;BR /&gt;
ret_code = ret_code&lt;BR /&gt;
TABLES&lt;BR /&gt;
msg_lines = msg_lines&lt;BR /&gt;
msg_str = msg_str.&lt;BR /&gt;
&lt;BR /&gt;
IF ret_code = 0.&lt;BR /&gt;
ls_final-us_name = ls_insert-us_name.&lt;BR /&gt;
ls_final-rep_name = ls_insert-rep_name.&lt;BR /&gt;
ls_final-begda = ls_insert-begda.&lt;BR /&gt;
ls_final-endda = ls_insert-endda.&lt;BR /&gt;
ls_final-reppr = ls_insert-reppr.&lt;BR /&gt;
ls_final-active = ls_insert-active.&lt;BR /&gt;
ls_final-message = 'Create a new record'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ELSE.&lt;BR /&gt;
ls_final-us_name = ls_insert-us_name.&lt;BR /&gt;
ls_final-rep_name = ls_insert-rep_name.&lt;BR /&gt;
ls_final-begda = ls_insert-begda.&lt;BR /&gt;
ls_final-endda = ls_insert-endda.&lt;BR /&gt;
ls_final-reppr = ls_insert-reppr.&lt;BR /&gt;
ls_final-active = ls_insert-active.&lt;BR /&gt;
ls_final-message = 'Record is already existed'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
CLEAR: ls_insert, ls_final.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
"Case2 Update a existing record&lt;BR /&gt;
IF lt_update IS NOT INITIAL. "It triggers update a existing record&lt;BR /&gt;
LOOP AT lt_update INTO gs_update.&lt;BR /&gt;
substituted_obj-otype = 'US'.&lt;BR /&gt;
substituted_obj-objid = gs_update-us_name.&lt;BR /&gt;
substitute-otype = 'US'.&lt;BR /&gt;
substitute-objid = gs_update-rep_name.&lt;BR /&gt;
sub_beg = gs_update-begda.&lt;BR /&gt;
sub_end = gs_update-endda.&lt;BR /&gt;
sub_pfile = gs_update-reppr.&lt;BR /&gt;
sub_act = gs_update-active.&lt;BR /&gt;
&lt;BR /&gt;
CALL FUNCTION 'SAP_WAPI_SUBSTITUTE_MAINTAIN'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
substituted_obj = substituted_obj&lt;BR /&gt;
substitute = substitute&lt;BR /&gt;
sub_beg = sub_beg&lt;BR /&gt;
sub_end = sub_end&lt;BR /&gt;
sub_pfile = sub_pfile&lt;BR /&gt;
sub_act = sub_act&lt;BR /&gt;
lang = sy-langu&lt;BR /&gt;
ext_badi = ' '&lt;BR /&gt;
IMPORTING&lt;BR /&gt;
ret_code = ret_code&lt;BR /&gt;
TABLES&lt;BR /&gt;
msg_lines = msg_lines&lt;BR /&gt;
msg_str = msg_str.&lt;BR /&gt;
&lt;BR /&gt;
IF ret_code = 0.&lt;BR /&gt;
ls_final-us_name = gs_update-us_name.&lt;BR /&gt;
ls_final-rep_name = gs_update-rep_name.&lt;BR /&gt;
ls_final-begda = gs_update-begda.&lt;BR /&gt;
ls_final-endda = gs_update-endda.&lt;BR /&gt;
ls_final-reppr = gs_update-reppr.&lt;BR /&gt;
ls_final-active = gs_update-active.&lt;BR /&gt;
ls_final-message = 'Modified Existing Record'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ELSE.&lt;BR /&gt;
ls_final-us_name = gs_update-us_name.&lt;BR /&gt;
ls_final-rep_name = gs_update-rep_name.&lt;BR /&gt;
ls_final-begda = gs_update-begda.&lt;BR /&gt;
ls_final-endda = gs_update-endda.&lt;BR /&gt;
ls_final-reppr = gs_update-reppr.&lt;BR /&gt;
ls_final-active = gs_update-active.&lt;BR /&gt;
ls_final-message = 'Record is already existed'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
CLEAR: gs_update, ls_final.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
IF lt_updatex IS NOT INITIAL. "It triggers delete FM and insert a new record&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_updatex INTO ls_updatex.&lt;BR /&gt;
wa_subst_tab-us_name = ls_updatex-us_name.&lt;BR /&gt;
wa_subst_tab-rep_name = ls_updatex-rep_name.&lt;BR /&gt;
wa_subst_tab-begda = ls_updatex-begda.&lt;BR /&gt;
wa_subst_tab-endda = ls_updatex-endda.&lt;BR /&gt;
wa_subst_tab-reppr = ls_updatex-reppr.&lt;BR /&gt;
wa_subst_tab-active = ls_updatex-active.&lt;BR /&gt;
APPEND wa_subst_tab TO subst_tab.&lt;BR /&gt;
&lt;BR /&gt;
CALL FUNCTION 'RH_UPDATE_SUBST_LIST_SERVER'&lt;BR /&gt;
TABLES&lt;BR /&gt;
subst_tab = subst_tab&lt;BR /&gt;
err_tab = err_tab&lt;BR /&gt;
EXCEPTIONS&lt;BR /&gt;
no_wf_plvar = 1&lt;BR /&gt;
. " RH_UPDATE_SUBST_LIST_SERVER&lt;BR /&gt;
&lt;BR /&gt;
IF sy-subrc EQ 0.&lt;BR /&gt;
"All OK&lt;BR /&gt;
ELSEIF sy-subrc EQ 1. "Exception&lt;BR /&gt;
"Add code for exception here&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
wait = '1'&lt;BR /&gt;
* IMPORTING&lt;BR /&gt;
* RETURN =&lt;BR /&gt;
.&lt;BR /&gt;
WAIT UP TO 1 SECONDS.&lt;BR /&gt;
IF sy-subrc = 0.&lt;BR /&gt;
ls_final-us_name = ls_updatex-us_name.&lt;BR /&gt;
ls_final-rep_name = ls_updatex-rep_name.&lt;BR /&gt;
ls_final-begda = ls_updatex-begda.&lt;BR /&gt;
ls_final-endda = ls_updatex-endda.&lt;BR /&gt;
ls_final-reppr = ls_updatex-reppr.&lt;BR /&gt;
ls_final-active = ls_updatex-active.&lt;BR /&gt;
ls_final-message = 'Modified Existing Record'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ELSE.&lt;BR /&gt;
ls_final-us_name = ls_updatex-us_name.&lt;BR /&gt;
ls_final-rep_name = ls_updatex-rep_name.&lt;BR /&gt;
ls_final-begda = ls_updatex-begda.&lt;BR /&gt;
ls_final-endda = ls_updatex-endda.&lt;BR /&gt;
ls_final-reppr = ls_updatex-reppr.&lt;BR /&gt;
ls_final-active = ls_updatex-active.&lt;BR /&gt;
ls_final-message = 'Record is already existed'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
CLEAR: ls_final, ls_updatex, wa_subst_tab.&lt;BR /&gt;
REFRESH: subst_tab.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
"Case3 modify a existing record&lt;BR /&gt;
IF lt_modify IS NOT INITIAL.&lt;BR /&gt;
LOOP AT lt_modify INTO gs_modify WHERE active = 'X'.&lt;BR /&gt;
wa_subst_tab-us_name = gs_modify-us_name.&lt;BR /&gt;
wa_subst_tab-rep_name = gs_modify-rep_name.&lt;BR /&gt;
wa_subst_tab-begda = gs_modify-begda.&lt;BR /&gt;
wa_subst_tab-endda = gs_modify-endda.&lt;BR /&gt;
wa_subst_tab-reppr = gs_modify-reppr.&lt;BR /&gt;
wa_subst_tab-active = ''.&lt;BR /&gt;
APPEND wa_subst_tab TO subst_tab.&lt;BR /&gt;
CALL FUNCTION 'RH_UPDATE_SUBST_LIST_SERVER'&lt;BR /&gt;
TABLES&lt;BR /&gt;
subst_tab = subst_tab&lt;BR /&gt;
err_tab = err_tab&lt;BR /&gt;
EXCEPTIONS&lt;BR /&gt;
no_wf_plvar = 1&lt;BR /&gt;
. " RH_UPDATE_SUBST_LIST_SERVER&lt;BR /&gt;
&lt;BR /&gt;
IF sy-subrc EQ 0.&lt;BR /&gt;
"All OK&lt;BR /&gt;
ELSEIF sy-subrc EQ 1. "Exception&lt;BR /&gt;
"Add code for exception here&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'&lt;BR /&gt;
EXPORTING&lt;BR /&gt;
wait = '1'&lt;BR /&gt;
* IMPORTING&lt;BR /&gt;
* RETURN =&lt;BR /&gt;
.&lt;BR /&gt;
WAIT UP TO 1 SECONDS.&lt;BR /&gt;
IF sy-subrc = 0.&lt;BR /&gt;
ls_final-us_name = gs_modify-us_name.&lt;BR /&gt;
ls_final-rep_name = gs_modify-rep_name.&lt;BR /&gt;
ls_final-begda = gs_modify-begda.&lt;BR /&gt;
ls_final-endda = gs_modify-endda.&lt;BR /&gt;
ls_final-reppr = gs_modify-reppr.&lt;BR /&gt;
ls_final-active = ''.&lt;BR /&gt;
ls_final-message = 'Modified Existing Record'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ELSE.&lt;BR /&gt;
ls_final-us_name = gs_modify-us_name.&lt;BR /&gt;
ls_final-rep_name = gs_modify-rep_name.&lt;BR /&gt;
ls_final-begda = gs_modify-begda.&lt;BR /&gt;
ls_final-endda = gs_modify-endda.&lt;BR /&gt;
ls_final-reppr = gs_modify-reppr.&lt;BR /&gt;
ls_final-active = ''.&lt;BR /&gt;
ls_final-message = 'Record is already existed'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
CLEAR: gs_modify, ls_final, wa_subst_tab.&lt;BR /&gt;
REFRESH: subst_tab.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
"table data not in a file then need to update end date and active with ‘space’.&lt;BR /&gt;
LOOP AT lt_modify INTO gs_modify WHERE active = ''.&lt;BR /&gt;
ls_final-us_name = gs_modify-us_name.&lt;BR /&gt;
ls_final-rep_name = gs_modify-rep_name.&lt;BR /&gt;
ls_final-begda = gs_modify-begda.&lt;BR /&gt;
ls_final-endda = gs_modify-endda.&lt;BR /&gt;
ls_final-reppr = gs_modify-reppr.&lt;BR /&gt;
ls_final-active = ''.&lt;BR /&gt;
ls_final-message = 'Activate with set to space'.&lt;BR /&gt;
APPEND ls_final TO lt_final.&lt;BR /&gt;
CLEAR: gs_modify, ls_final.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
*/Sending email notification&lt;BR /&gt;
&lt;BR /&gt;
IF lt_final IS NOT INITIAL. "Email&lt;BR /&gt;
&lt;BR /&gt;
CREATE OBJECT lo_email.&lt;BR /&gt;
&lt;BR /&gt;
lv_string = lv_string &amp;amp;&amp;amp;&lt;BR /&gt;
'User Name'(012) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'User Name'(013) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'Start Date'(014) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'End Date'(015) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'Substitute Profile'(016) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'Substitution Active'(017) &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
'Message'(018) &amp;amp;&amp;amp; lc_crlf.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_final ASSIGNING FIELD-SYMBOL(&amp;lt;fs_output&amp;gt;).&lt;BR /&gt;
&lt;BR /&gt;
lv_string = lv_string &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-us_name &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-rep_name &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-begda &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-endda &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-reppr &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-active &amp;amp;&amp;amp; lc_tab &amp;amp;&amp;amp;&lt;BR /&gt;
&amp;lt;fs_output&amp;gt;-message &amp;amp;&amp;amp; lc_crlf .&lt;BR /&gt;
&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = 'Hi'.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = ''.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = ''.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = 'Pleae see the attached file for the 3PL Substitution to S4'.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = 'Can you please check the records'.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = ''.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = ''.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
ls_email_body-tdline = 'Thank you'.&lt;BR /&gt;
APPEND ls_email_body TO lt_email_body.&lt;BR /&gt;
CLEAR ls_email_body.&lt;BR /&gt;
&lt;BR /&gt;
* Convert the inernal table data into binary format.&lt;BR /&gt;
IF lv_string IS NOT INITIAL.&lt;BR /&gt;
lo_email-&amp;gt;create_excel_content( EXPORTING&lt;BR /&gt;
email_data = lv_string&lt;BR /&gt;
IMPORTING&lt;BR /&gt;
binary_content = lt_binary_content&lt;BR /&gt;
size = lv_size ).&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
* Append all the emails&lt;BR /&gt;
DATA(l_util) = NEW zcl_gen_utilities( ).&lt;BR /&gt;
l_util-&amp;gt;read_parameters_table( EXPORTING table = lc_eamt_parameters&lt;BR /&gt;
name = lc_ricefid_1234&lt;BR /&gt;
maptype1 = lc_param_name&lt;BR /&gt;
IMPORTING data = DATA(lt_param_tab) ).&lt;BR /&gt;
&lt;BR /&gt;
CLEAR lt_email_address.&lt;BR /&gt;
&lt;BR /&gt;
LOOP AT lt_param_tab INTO DATA(lw_param_tab).&lt;BR /&gt;
CLEAR ls_email_address.&lt;BR /&gt;
ls_email_address-address = lw_param_tab-param1.&lt;BR /&gt;
APPEND ls_email_address TO lt_email_address.&lt;BR /&gt;
CLEAR ls_email_address.&lt;BR /&gt;
ENDLOOP.&lt;BR /&gt;
&lt;BR /&gt;
CLEAR lv_subject.&lt;BR /&gt;
lv_subject = '3PL Substitution to S4'.&lt;BR /&gt;
&lt;BR /&gt;
IF lt_email_address IS NOT INITIAL.&lt;BR /&gt;
&lt;BR /&gt;
lo_email-&amp;gt;send_email_with_xls_attachment( EXPORTING&lt;BR /&gt;
subject = lv_subject&lt;BR /&gt;
email_address = lt_email_address&lt;BR /&gt;
binary_content = lt_binary_content&lt;BR /&gt;
size = lv_size&lt;BR /&gt;
email_body_tab = lt_email_body ).&lt;BR /&gt;
&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
ENDIF. "Email&lt;BR /&gt;
&lt;BR /&gt;
ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;ENDMETHOD.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/third-party-system-approvals-substitution-to-s4-system-through-interface/ba-p/13578916"/>
    <published>2023-12-14T22:07:28+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/ba-p/13575561</id>
    <title>abap2UI5 - (12) Update II: Community Feedback, New Features &amp; Outlook - January 2024</title>
    <updated>2024-01-08T09:16:02+01:00</updated>
    <author>
      <name>oblomov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44240</uri>
    </author>
    <content>Welcome to part 12 of this blog series introducing &lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;abap2UI5&lt;/STRONG&gt;&lt;/A&gt; — an open-source project for developing UI5 apps purely in ABAP.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Happy New Year, everyone! &lt;span class="lia-unicode-emoji" title=":fireworks:"&gt;🎆&lt;/span&gt;&lt;span class="lia-unicode-emoji" title=":sparkler:"&gt;🎇&lt;/span&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;As we enter 2024, let's take a moment to check out the new features added to abap2UI5 towards the end of last year and then delve into the ongoing changes currently underway. Some updates were in response to user issues, while others were inspired by community pull requests.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Blog Series &amp;amp; More&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can find all the information about this project on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;and stay up-to-date by following on&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://twitter.com/abap2UI5" target="_blank" rel="noopener nofollow noreferrer"&gt;Twitter.&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;Also, make sure to explore the other articles in this blog series.&lt;BR /&gt;
&lt;TABLE style="height: 168px" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-development-of-ui5-apps-in-pure-abap-1-3/" target="_blank" rel="noopener noreferrer"&gt;(1) Introduction: Developing UI5 Apps Purely in ABAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/02/22/abap2ui5-output-of-lists-and-tables-toolbar-and-editable-2-3/" target="_blank" rel="noopener noreferrer"&gt;(2) Displaying Selection Screens &amp;amp; Tables&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/03/30/abap2ui5-3-4-flow-logic-pop-ups-f4-help/" target="_blank" rel="noopener noreferrer"&gt;(3) Popups, F4-Help, Messages &amp;amp; Controller Logic&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/02/abap2ui5-4-5-additional-features-demos/" target="_blank" rel="noopener noreferrer"&gt;(4) Advanced Functionality &amp;amp; Demonstrations&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/12/abap2ui5-5-6-extensions-with-xml-views-html-js-custom-controls/" target="_blank" rel="noopener noreferrer"&gt;(5) Creating UIs with XML Views, HTML, CSS &amp;amp; JavaScript&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/04/14/abap2ui5-6-7-installation-configuration-debugging/" target="_blank" rel="noopener noreferrer"&gt;(6) Installation, Configuration &amp;amp; Troubleshooting&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="height: 14px;width: 603px"&gt;&lt;A href="https://blogs.sap.com/2023/04/26/abap2ui5-7-7-technical-background-under-the-hood-of-abap2ui5/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(7) Technical Background: Under the Hood of abap2UI5&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;A href="https://blogs.sap.com/2023/08/21/abap2ui5-a1-repository-setup-with-abapgit-abaplint-open-abap/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;(8) Repository Organization: Working with abapGit, abaplint &amp;amp; open-abap&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/09/11/abap2ui5-a2-community-feedback-new-features/" target="_blank" rel="noopener noreferrer"&gt;(9) Update I: Community Feedback &amp;amp; New Features - Sep. 2023&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/04/abap2ui5-a3-extensions-i-exploring-external-libraries-native-device-capabilities/" target="_blank" rel="noopener noreferrer"&gt;(10) Extensions I: Exploring External Libraries &amp;amp; Native Device Capabilities&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;&lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;(11) Extensions II: Guideline for Developing New Features in JavaScript&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 603px;height: 14px"&gt;(12) Update II: Community Feedback &amp;amp; New Features - Jan. 2024 (this blog post)&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Content&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This post covers the following areas:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;New Controls&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Splitting Container&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Timeline&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Feed Input&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Side Panel&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;New Custom Controls&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;cl_demo_output&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Multi Input Ext.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Table Filtering Ext.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;New Functions&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Nested Views with 3 Levels&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Data Binding on Cell Level&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Debugging Tools&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Community Feedback&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;TechEd&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Advent of Code&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Developer News&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Actual Changes &amp;amp; Outlook&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Integration with Launchpad &amp;amp; BTP&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;UI5 Version 2.x&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP UI5 Roadmap 2024&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Let’s begin with the first topic.&lt;BR /&gt;
&lt;H3 id="toc-hId-1093069534"&gt;&lt;STRONG&gt;1. New Controls&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
An increasing number of controls from the &lt;STRONG&gt;&lt;A href="https://sapui5.hana.ondemand.com/#/api" target="_blank" rel="nofollow noopener noreferrer"&gt;UI5 API&lt;/A&gt;&lt;/STRONG&gt; are being integrated into abap2UI5 and can be utilized through the class &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/10/01/z2ui5_cl_xml_view.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;z2ui5_cl_xml_view&lt;/A&gt;&lt;/STRONG&gt;. A special thanks to &lt;STRONG&gt;&lt;A href="https://github.com/choper725" target="_blank" rel="nofollow noopener noreferrer"&gt;choper725&lt;/A&gt;&lt;/STRONG&gt; and all others who have contributed PRs in this direction over the last few months.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;1.1. Splitting Container&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Organize your view using a Splitting Container; this control allows you to divide the view as needed and makes the sizes dynamically adjustable. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_splitting.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Splitting Container in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the full source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_103.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;1.2. Timeline&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Visualize your time-dependent data with the Timeline Control. Check out the following example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_timeline.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Timeline in abap2UI5&lt;/P&gt;&lt;BR /&gt;
Filtering and sorting on the frontend work out-of-the-box. You can find the full source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_113.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;1.3. Feed Input&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Display chat and message texts using the Feed Input. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_feed.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Feed Input in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the full source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_101.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;1.4. Side Panel&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Try out the Side Panel to display a menu alongside your main page:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_side_panel.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Side Panel in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_108.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId-896556029"&gt;&lt;STRONG&gt;2. New Custom Controls&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Custom controls are an effective way to incorporate additional JavaScript logic into abap2UI5 and access it from the backend. You can find more information about this concept in the previous blog post &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/12/11/abap2ui5-a4-extensions-ii-guideline-for-developing-new-features-in-javascript/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. The following new custom controls are now part of abap2UI5.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2.1 CL_DEMO_OUTPUT / IF_OO_ADT_CLASSRUN&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Building on these two classes, numerous test programs have been created. If you also want to send their output to a browser, you can now do so with abap2UI5. A &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/02/z2ui5_cl_cc_demo_output.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;Demo Output Custom Control&lt;/A&gt;&lt;/STRONG&gt; has been developed that sends the HTML output of cl_demo_output to the frontend. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_demo_output.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;cl_demo_output Displayed in abap2UI5&lt;/P&gt;&lt;BR /&gt;
Check out the full source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_115.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. The same functionality works for the interface that creates output in ADT; check it out &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_116.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2.2 Multi Input Extension&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Sometimes, UI5 controls require additional JavaScript logic, because their current state cannot be easily transmitted to the backend through an event. This is particularly true for the Multi Input control, which involves additional token handling that is not automatically sent to the backend with the Multi Input Control's events. To address this, an additional &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/01/03/z2ui5_cl_fw_cc_multiinput_ext.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;Multi Input Custom Control&lt;/A&gt; &lt;/STRONG&gt;has been created to ensure that all tokens are sent to the backend, and vice versa. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/token_gif.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Multi Input &amp;amp; Token Handling in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_078.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2.3 Table Filtering Extension&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
One advantage of the ui.table control is that many functionalities work at the frontend without the need for additional logic. For example, you can use filtering. Unfortunately, when making a backend request and performing a model update, these filters are deleted. To address this, a small &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5/blob/main/src/01/03/z2ui5_cl_fw_cc_uitable_ext.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;Table Custom Control&lt;/A&gt;&lt;/STRONG&gt; has been added which enhances the filter functionality. It saves the current filter values and reapplies them after a model update. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_ui_filter.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Table with Filtered Values After Model Updates in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_143.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId-700042524"&gt;&lt;STRONG&gt;3. New Functions&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
From time to time, the abap2UI5 framework itself requires extensions. The following new features have made their way into abap2UI5 over the last few months:&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;3.1 Nested Views with 3 Levels&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Nested views offer a way to partially rerender specific parts of the view. It is now possible to use up to two nested views and for example combine them for displaying positions and item details. Check out this demo:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_nest.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Nested Views with 3 Levels in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the source code &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_098.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;3.2 Binding on Cell Level&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Previously, it was only possible to bind the value of variables, components of structures, and tables to attributes of the view. Now, you can also bind values to specific cells of internal tables. This is especially helpful, for example, in generating multiple input fields based on table entries. To achieve this, simply extend the _bind method with the table and the index of your row:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;LOOP AT t_tab REFERENCE INTO DATA(lr_row).&lt;BR /&gt;
   DATA(lv_tabix) = sy-tabix.&lt;BR /&gt;
   page-&amp;gt;input( value = client-&amp;gt;_bind_edit( val = lr_row-&amp;gt;title tab = t_tab tab_index = lv_tabix ) ).&lt;BR /&gt;
   page-&amp;gt;input( value = client-&amp;gt;_bind_edit( val = lr_row-&amp;gt;value tab = t_tab tab_index = lv_tabix ) ).&lt;BR /&gt;
ENDLOOP.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This code snippet generates an input control for each cell within the internal table. Here's the code in action:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_cell_binding.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Data Binding on Cell Level in abap2UI5&lt;/P&gt;&lt;BR /&gt;
You can find the full example &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-samples/blob/main/src/z2ui5_cl_demo_app_144.clas.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;3.3 Debugger Tools&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The only way to validate the XML View, Models, and Responses was by using the console. Now, by pressing CTRL+F12, a new popup opens, providing all information on Views, Models, and backend communication.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_debugging_tools.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Debugging Tools of abap2UI5&lt;/P&gt;&lt;BR /&gt;
This simplifies issue identification, and further functionalities can be integrated into this popup in the future.&lt;BR /&gt;
&lt;H3 id="toc-hId-503529019"&gt;&lt;STRONG&gt;4. Community Feedback&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
It's always gratifying to see the project gaining attention from other developers, being utilized in various projects, or featured in presentations. From this perspective, abap2UI5 enjoyed a very successful conclusion to last year. &lt;span class="lia-unicode-emoji" title=":party_popper:"&gt;🎉&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;4.1 SAP TechEd&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The SAP Developer Advocates highlighted ABAP Open Source projects and showcased a small abap2UI5 demo with a Feed Control during last year's SAP TechEd Developer Keynote.&lt;BR /&gt;
&lt;BR /&gt;
This achievement wouldn't have been possible without the great &lt;STRONG&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt;&lt;/STRONG&gt; project, which is essential for open source development in ABAP. I hope I've emphasized enough in this blog series how much abap2UI5 benefits from the contributions of other developers &amp;amp; open source projects. Much of this groundwork was done even before abap2UI5 existed. A big thank you for the showcase and to all developers who are actively engaged in the ABAP Open Source Community! &lt;span class="lia-unicode-emoji" title=":folded_hands:"&gt;🙏&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://www.youtube.com/watch?v=kLbF0ooStZs&amp;amp;t=3052s" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://www.youtube.com/watch?v=kLbF0ooStZs&amp;amp;t=3052s&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;4.2 Advent of Code&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This year, in the Advent of Code, &lt;STRONG&gt;&lt;SPAN class="mention-scrubbed"&gt;jorgen_lindqvist41&lt;/SPAN&gt; &lt;/STRONG&gt;gave abap2UI5 a try. He created an excellent template for solving the daily puzzles, which you can view in his &lt;STRONG&gt;&lt;A href="https://blogs.sap.com/2023/11/27/preparing-for-advent-of-code-2023/" target="_blank" rel="noopener noreferrer"&gt;blog post&lt;/A&gt;&lt;/STRONG&gt;. The template is available on GitHub &lt;STRONG&gt;&lt;A href="https://github.com/joltdx/abap-advent-2023-template" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;, and his solution can be seen &lt;STRONG&gt;&lt;A href="https://github.com/joltdx/abap-advent-2023" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Actually this inspired me to join the Advent of Code as well, but instead of solving puzzles, I ended up adding a new feature - cell binding - to abap2UI5, filling a missing aspect of the framework, as I found in his repository &lt;STRONG&gt;&lt;A href="https://github.com/joltdx/abap-advent-2023/blob/9a2b3899d92f937e9543b4b6ab9797d841c42935/src/zcl_advent_2023_a2ui5.clas.abap#L28" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;/STRONG&gt;. But perhaps I'll return to it one day or use this template to join again next year. 🧑‍&lt;span class="lia-unicode-emoji" title=":christmas_tree:"&gt;🎄&lt;/span&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/aba2UI5_advent_01.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Advent of Code with abap2UI5&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;4.3. SAP Developer News&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This blog series concluded last year with a final post on extending abap2UI5 with new features using custom controls. A big thank you for featuring this article in the Developer News! Let's see which additional custom controls will find their way into abap2UI5 in 2024!&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://www.youtube.com/watch?v=CfH9L03WUCg&amp;amp;t=350s" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://www.youtube.com/watch?v=CfH9L03WUCg&amp;amp;t=350s&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-307015514"&gt;&lt;STRONG&gt;5. Actual Changes &amp;amp; 2024&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Currently, most changes are being made with a focus on ensuring compatibility with upcoming updates of the UI5 library and enabling the integration of abap2UI5 with launchpads and BTP Cloud Services.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;5.1. Launchpad &amp;amp; BTP Integration&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
abap2UI5 is designed for simplicity, operating on a single HTTP handler. This design allows easy installation on both 'ABAP Cloud' and 'Standard ABAP'. However, sometimes it's useful to have an independent UI5 app that isn't tied to the ABAP artifacts, making it deployable to BTP or other services. To address this, you have now also the option to use a standalone UI5 app which interacts with the backend via the HTTP handler, displaying abap2UI5 apps:&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-btp_proxy_app" target="_new" rel="noopener nofollow noreferrer"&gt;abap2UI5 Extension - BTP Proxy App&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
There is still some work to do, but if you're interested in beta testing, please explore this project and report any issues encountered. Upon completion of testing, I might take this opportunity to explore the new SCN blog platform and write a detailed article on this topic.&lt;BR /&gt;
&lt;BR /&gt;
This integration approach is also applicable for the integration with on-premise launchpads. The following repository offers an UI5 app as a BSP, ensuring a straightforward installation with abapGit:&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/abap2UI5-launchpad_on_premise" target="_new" rel="noopener nofollow noreferrer"&gt;abap2UI5 Extension - On-Premise Launchpad&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Feel free to explore this repository as well and report any encountered issues.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;5.2 UI5 Version 2.x&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Another current focus is ensuring compatibility with future improvements of the UI5 Library. Towards the end of last year, the initial version of UI5 2.x was released. For more information, refer to this blog post:&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2023/12/21/introducing-openui5-2.x/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2023/12/21/introducing-openui5-2.x/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
This new version removes certain dependencies, resulting in limitations on using specific UI5 features. For example, module loading is now constrained, and the use of UI5's jQuery is no longer supported. You can conduct tests by bootstrapping from the following source:&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://sdk.openui5.org/nightly/2/index.html" target="_blank" rel="nofollow noopener noreferrer"&gt;https://sdk.openui5.org/nightly/2/index.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Changes have already been implemented in recent weeks, allowing abap2UI5 to operate with the new UI5 version:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/gif_ui2.gif" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;abap2UI5 Bootstrapped with UI5 Version 2.x&lt;/P&gt;&lt;BR /&gt;
In some custom controls and demos, there are still some changes to be made, but these will be addressed in the future. I also suggest periodically bootstrapping with UI5 2.x to ensure proper functionality of your apps. Should you encounter any problems, please create an issue.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;5.3 UI5 Roadmap 2024&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Moreover, several new functionalities for the UI5 Library are currently under development. You can find more details about them in the UI5 roadmap available here:&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://roadmaps.sap.com/board?PRODUCT=73554900100800001361" target="_blank" rel="noopener noreferrer"&gt;https://roadmaps.sap.com/board?PRODUCT=73554900100800001361&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
It will be exciting to see how many of these changes can also be integrated into abap2UI5.&lt;BR /&gt;
&lt;H3 id="toc-hId-110502009"&gt;&lt;STRONG&gt;6. Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This concludes the update on abap2UI5 functionalities. Feel free to experiment with the new features in your own abap2UI5 apps. This project is continuously evolving without a fixed roadmap or specific goal. Every pull request is appreciated, and now I'm eagerly looking forward to what 2024 will bring to the project. &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading! Your questions, comments, and wishes for this project are always welcome. Leave a comment or create an &lt;STRONG&gt;&lt;A href="https://github.com/abap2UI5/ABAP2UI5/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;issue&lt;/A&gt;&lt;/STRONG&gt;.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap2ui5-12-update-ii-community-feedback-new-features-outlook-january-2024/ba-p/13575561"/>
    <published>2024-01-08T09:16:02+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/release-of-new-podcast-episode-sap-r-3-port-to-linux/ba-p/13918445</id>
    <title>Release of new Podcast Episode “SAP R/3 Port to Linux”</title>
    <updated>2024-10-25T09:41:44.320000+02:00</updated>
    <author>
      <name>Fempel</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/10046</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;4th Anniversary of “The Open Source Way” Podcast &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With an interesting new episode taking you three decades back in time, we would like to celebrate the 4th anniversary of the &lt;A href="https://podcast.opensap.info/open-source-way/" target="_blank" rel="noopener nofollow noreferrer"&gt;open source podcast&lt;/A&gt; series hosted by the SAP Open Source Program Office. Reflecting on this milestone for 'The Open Source Way' podcast, the OSPO team would like to thank all the contributors and listeners, and extend a big kudos to &lt;A href="https://de.linkedin.com/in/karsten-hohage-0180312?trk=public_post-text" target="_self" rel="nofollow noopener noreferrer"&gt;Karsten Hohage&lt;/A&gt; for moderating the series since its inception! We would also like to express our gratitude to &lt;A href="https://www.linkedin.com/in/sezgin-devran-a8b64717b/" target="_self" rel="nofollow noopener noreferrer"&gt;Sezgin Devran&lt;/A&gt;, who had the initial idea and started this podcast in 2020.&lt;/P&gt;&lt;P&gt;The experts talking to Karsten have shared very personal stories, expertise, and insights into their activities in open source. The topics of the &lt;STRONG&gt;45 episodes&lt;/STRONG&gt; are as diverse as the field of open source itself – from open-source projects to compliance and security, collaboration models, and global initiatives such as foundations. We look forward to many more engaging episodes and conversations in the future.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SAP R/3 Port to Linux (October 2024 episode)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the latest &lt;A href="https://podcast.opensap.info/open-source-way/2024/10/24/sap-r3-port-to-linux/" target="_blank" rel="noopener nofollow noreferrer"&gt;podcast episode&lt;/A&gt;, we take a fascinating journey back to the 1990s – a pivotal time in the world of technology – when the SAP software stack was first ported to Linux. Two industry pioneers, &lt;A href="https://de.linkedin.com/in/hcrohland?trk=public_post-text" target="_self" rel="nofollow noopener noreferrer"&gt;Christoph Rohland&lt;/A&gt; (former SAP, now at Software AG) and &lt;A href="https://www.linkedin.com/in/harald-kuck-2863b0153?miniProfileUrn=urn%3Ali%3Afs_miniProfile%3AACoAACTmUIYBWkr3GyxK4rtluI0D8JNGdV4NtyA&amp;amp;lipi=urn%3Ali%3Apage%3Ad_flagship3_search_srp_all%3BHcl%2Bb7ZYS4ONbl0p72GEwA%3D%3D" target="_self" rel="nofollow noopener noreferrer"&gt;Harald Kuck&lt;/A&gt; (SAP, ABAP Platform) discuss the challenges, triumphs, and transformative moments of this significant transition. They offer very personal insights into how they led the transition of R/3 and its stack to run on Linux.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Picture1.png" style="width: 698px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/183271iB62560113519E837/image-dimensions/698x256?v=v2" width="698" height="256" role="button" title="Picture1.png" alt="Picture1.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why this episode matters&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Today, Linux serves as the backbone of many SAP solutions, providing a robust open-source operating system infrastructure. However, the path to this point was anything but straightforward. Christoph and Harald share their first-hand experiences from the early days of open source at SAP, shedding light on how their innovative efforts laid the groundwork for the collaborative software landscape we enjoy today. They take us to the early years of Linux, when 8 CPUs were still a really big thing for a developer, when you tested external software on CDs, and when using fax for sending personal documents was still the modus operandi.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Key highlights from the episode:&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Anecdotes from the frontlines:&lt;/STRONG&gt; Listen to unique stories and insights from Christoph and Harald about the challenges they faced while porting the SAP software stack to Linux.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SAP’s role for Linux:&amp;nbsp;&lt;/STRONG&gt;You might be surprised to hear how some essential parts of the Linux kernel were really contributed by SAP in the late 1990s.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;The evolution of Open Source:&lt;/STRONG&gt; Hear about the times when open source began to play a role within SAP and the broader tech community and how these early efforts have influenced our approach to software development and collaboration.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;The future of Linux and SAP solutions:&lt;/STRONG&gt; Christoph and Harald discuss the ongoing relevance of Linux in the SAP ecosystem, and what the future may hold for open-source initiatives at SAP.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;The key to driving innovation:&lt;/STRONG&gt; Harald and Christoph emphasize the importance of developer initiative, a supportive management, and listening to your customers when pursuing innovative ideas.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Tune In Now!&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Whether you're an SAP user, an open-source enthusiast, or simply curious about the technological advancements that shaped our current landscape, this &lt;A href="https://podcast.opensap.info/open-source-way/2024/10/24/sap-r3-port-to-linux/" target="_blank" rel="noopener nofollow noreferrer"&gt;episode&lt;/A&gt; is a must-watch. Join us as we celebrate the pioneers of open source at SAP and explore the impact of their work on the industry.&lt;/P&gt;&lt;P&gt;"Would you rather have Bill Gates know your name or an Email discussion with Linus Torvalds" (feel free to comment) was one question to Harald and Christoph. Hear the answer in the &lt;A href="https://podcast.opensap.info/open-source-way/2024/10/24/sap-r3-port-to-linux/" target="_blank" rel="noopener nofollow noreferrer"&gt;podcast&lt;/A&gt;. Let us know in the comments, if you have any particular topic of interest for future episodes or reach out to the &lt;A href="mailto:ospo@sap.com" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP OSPO team&lt;/A&gt; directly.&lt;/P&gt;&lt;P&gt;_____________________________________________________________________________&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;About the authors&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Ulrike Fempel, SAP Open Source Program Office&lt;/LI&gt;&lt;LI&gt;Ajinkya Patil, SAP Open Source Program Office, responsible for the podcast production&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;More information / links&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://opensource.sap.com/" target="_blank" rel="noopener noreferrer"&gt;Open Source @ SAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/sap" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP GitHub&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/SAP/open-source-manifesto" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Open Source Manifesto&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://pages.community.sap.com/topics/open-source" target="_blank" rel="noopener noreferrer"&gt;Open Source Community @ SAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://podcast.opensap.info/open-source-way/" target="_blank" rel="noopener nofollow noreferrer"&gt;Podcast series "The Open Source Way"&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://webinars.sap.com/ospo-webinar-series/en/home" target="_blank" rel="noopener noreferrer"&gt;Webinar series "SAP Open Source"&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/release-of-new-podcast-episode-sap-r-3-port-to-linux/ba-p/13918445"/>
    <published>2024-10-25T09:41:44.320000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/how-to-release-pr-document-from-hold-or-park-status-using-bapi/ba-p/14007072</id>
    <title>How to Release PR document from HOLD or PARK status using BAPI</title>
    <updated>2025-02-21T09:28:32.886000+01:00</updated>
    <author>
      <name>rohithkumar15</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/837411</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1831017622"&gt;&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;A purchase requisition is an internal document used in an organization to request the procurement of goods or services. In SAP, efficient management of purchase requisitions is crucial for smooth procurement operations. This blog will provide a clear guide on releasing PR documents from HOLD or PARK status using BAPIs and releasing the document for further processing.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1634504117"&gt;&lt;STRONG&gt;Understanding Parked and Hold Documents in SAP:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;First, let's understand the PARK and HOLD options in SAP. These functionalities are essential for managing purchasing documents, allowing users to save them temporarily for later processing.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Hold: &lt;/STRONG&gt;If the document has incorrect or incomplete data and you want to save it temporarily to process later, use the Hold option.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Park: &lt;/STRONG&gt;If the document has complete and correct data but needs further workflow approvals or budget checks, use the Park functionality.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1437990612"&gt;&lt;STRONG&gt;Activating Hold and Park options:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;To activate the PARK and HOLD options in transactions ME51N, ME52N, and ME53N, follow these two steps:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;Activate Business Functionality&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Go to T-Code SPRO.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;Click on Activate Business Functions&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Activate Business Functionality.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/228250i49A6F0A5595B665A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Activate Business Functionality.jpg" alt="Activate Business Functionality.jpg" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Expand the folder Enterprise_Business_Functions and activate the functionality &lt;STRONG&gt;LOG_MM_CI_3&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Park &amp;amp; Hold - Business Functionality .jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/228249i1913B2DF4DD7F4BF/image-size/large?v=v2&amp;amp;px=999" role="button" title="Park &amp;amp; Hold - Business Functionality .jpg" alt="Park &amp;amp; Hold - Business Functionality .jpg" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. Enable PARK and HOLD Features In T-Code SPRO, follow this path:&lt;SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Materials Management --&amp;gt; Purchasing --&amp;gt; Environment Data --&amp;gt; Activate 'Park and Hold' in Purchasing Documents.&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Activate Park &amp;amp; Hold option in Purchasing Documents.jpg" style="width: 829px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/228251iD3B68DBCA03353E8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Activate Park &amp;amp; Hold option in Purchasing Documents.jpg" alt="Activate Park &amp;amp; Hold option in Purchasing Documents.jpg" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;By completing these steps, you will enable the PARK and HOLD functionalities for purchasing documents in your SAP system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1241477107"&gt;&lt;STRONG&gt;Changing PR document status from HOLD or PARKED to SAVED using BAPI:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;To change the status of a purchase requisition document from HOLD or PARKED to SAVED, you can use the BAPI&amp;nbsp;“&lt;STRONG&gt;BAPI_PR_CHANGE.”.&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Below is an example of how to implement this in ABAP:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: ls_prheader  TYPE bapimereqheader,
      ls_prheaderx TYPE bapimereqheaderx,
      lt_return    TYPE TABLE OF bapiret2.

IF  ls_prheader-preq_no IS NOT INITIAL.

 ls_prheader = VALUE #( preq_no       = |{ ls_prheader-preq_no ALPHA = IN }|
                        park_complete = abap_false
                        hold_complete = abap_false
                        memorytype    = abap_false ).
  
 ls_prheaderx = VALUE #( preq_no       = abap_true
                         park_complete = abap_true
                         hold_complete = abap_true
                         memorytype    = abap_true ).

CALL FUNCTION 'BAPI_PR_CHANGE'
  EXPORTING
   number     = ls_prheader-preq_no “Your PR Number
    prheader  = ls_prheader
    prheaderx = ls_prheaderx
  TABLES
    return   = lt_return.
IF VALUE #( lt_return[ type = 'S' ] OPTIONAL ) IS NOT INITIAL.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
       wait = abap_true.
ELSE.
    ROLLBACK WORK.
ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1174046321"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H3 id="toc-hId-848450097"&gt;&lt;STRONG&gt;Release Strategy:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;The release strategy in SAP defines the approval process for purchase requisitions:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;STRONG&gt;Purpose:&lt;/STRONG&gt; Ensures PRs are reviewed and approved before conversion to purchase orders.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Release Codes:&lt;/STRONG&gt; Each strategy can have up to eight release codes, indicating who must approve the requisition.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Approval Sequence:&lt;/STRONG&gt; Specifies the order in which approvals must be obtained.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;Assignment:&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Release strategies are assigned based on release conditions like document type and value.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-651936592"&gt;&lt;STRONG&gt;Release Code:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;A release code is a two-character ID that authorizes a person to approve or release a purchase requisition or external purchasing document.&lt;/SPAN&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;STRONG&gt;Purpose:&lt;/STRONG&gt; It serves as an electronic signature, replacing traditional handwritten approvals. This digitization streamlines the approval process and enhances efficiency.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;Assignment:&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Release codes are assigned to employees based on their roles and authorization levels within the organization. For example, a clerk might have a release code for initial approvals, while a manager has a higher-level code.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;Configuration:&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;SPAN&gt;You can define up to eight release codes within a release strategy.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Each code is linked to specific approval levels, ensuring that the correct personnel review PRs based on their value or other criteria.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;Approval Process:&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;SPAN&gt; The release strategy specifies which release codes must be used and the sequence of approvals required.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-455423087"&gt;&lt;STRONG&gt;Releasing PR documents using BAPI:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;To release a PR that needs approval from respective employees/approvers in your organization, you can use the&amp;nbsp;BAPI - “&lt;STRONG&gt;BAPI_REQUISITION_RELEASE_GEN”&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Below is an example implementation:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA : lt_return TYPE TABLE OF bapireturn.
 
 CALL FUNCTION 'BAPI_REQUISITION_RELEASE_GEN'
   EXPORTING
     number     = iv_pr_num       “Your PR Number
     rel_code   = iv_release_code “Release code
   TABLES
     return      = lt_return.
 IF VALUE #( lt_return[ type = 'S' ] OPTIONAL ) IS NOT INITIAL OR 
    lt_return IS INITIAL.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
       wait = abap_true.
 ELSE.
    ROLLBACK WORK.
 ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-387992301"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H3 id="toc-hId-62396077"&gt;&lt;STRONG&gt;Finding Release Codes:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;You can find release codes under the Release Strategy tab in transactions ME51N, ME52N, and ME53N.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The following tables are useful for retrieving relevant information:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;EBAN: To get the release group and release strategy for the PR number.&lt;/LI&gt;&lt;LI&gt;T16FS: To get release codes for a particular release group &amp;amp; strategy.&lt;/LI&gt;&lt;LI&gt;T16FW: To get approver names/IDs for a release code.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId--502751804"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H3 id="toc-hId--405862302"&gt;&lt;STRONG&gt;Conclusion:&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;This blog emphasized the significance of parked and hold documents, the activation of essential functionalities, and the use of BAPIs to change PR statuses. We also explored the release procedure and strategy, illustrating how structured approvals can enhance efficiency in your procurement processes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Thank you for reading!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/how-to-release-pr-document-from-hold-or-park-status-using-bapi/ba-p/14007072"/>
    <published>2025-02-21T09:28:32.886000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/streamlining-sap-background-job-execution-with-event-based-triggers/ba-p/14075250</id>
    <title>Streamlining SAP Background Job Execution with Event-Based Triggers</title>
    <updated>2025-04-16T10:37:33.019000+02:00</updated>
    <author>
      <name>Richa27</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/167247</uri>
    </author>
    <content>&lt;P&gt;In some Business Scenarios, we need to collaborate with third-party solutions, such as bank integrations within the system. In such scenarios, scheduling pre-defined standard programs as part of the overall process is often necessary. We encountered a recurring issue with one such program (RFEBKA00), scheduled as a background job in our system to run hourly, checking an Application Server directory for the presence of specific files. Whenever a file was available, the job executed perfectly. However, if no file was present at the time of execution, the job would fail, resulting in unnecessary alerts and false alarms in our monitoring systems. Over time, this not only created confusion but also masked genuine job failures that required immediate attention.&lt;/P&gt;&lt;P&gt;To address this efficiently without deviating from SAP standards, I developed an innovative yet straightforward solution to prevent frequent false alerts and maintain accurate and clean monitoring while still using the original standard program.&lt;/P&gt;&lt;P&gt;There can be other business scenarios as well where this solution can help.&lt;/P&gt;&lt;H2 id="toc-hId-1708341826"&gt;Solution Design:&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="1_new.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/250389i8F37C3EAB4F9A8B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="1_new.jpg" alt="1_new.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;a) To resolve this, we implemented a wrapper program serving as a pre-check mechanism. This wrapper performs the following actions:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Checks the necessary prerequisites (e.g., file presence in an Application Server directory).&lt;/LI&gt;&lt;LI&gt;If prerequisites are met, it triggers the standard SAP job - RFEBKA00 (program - RFEBKA00).&lt;/LI&gt;&lt;LI&gt;If prerequisites are not met, it gracefully exits with an informational message, thus keeping our monitoring precise and relevant.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;b) Set up this wrapper program (ZXXX)&amp;nbsp;as background job every hour and change current setup for ‘RFEBKA00’ job to trigger only for event - Z_EVENT’ raised by ZXXX program.&lt;/P&gt;&lt;P&gt;c)&amp;nbsp;If team needs to check what time the file was found, they can still check the background job – ‘RFEBKA00’. Else, if this job was not run, that means, there was no file found at that time.&lt;/P&gt;&lt;H2 id="toc-hId-1511828321"&gt;Technical Steps:&lt;/H2&gt;&lt;P&gt;1. Create a new Background Event (Z_EVENT) in Tcode - SM62 (don’t check system event checkbox):&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="2_new.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/250416i4E542A6104F53BB0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="2_new.jpg" alt="2_new.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;2. Create an External Command 'Z_LS' in Tcode - SM49:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="3_new.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/250432i3D564E29ED00E76A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="3_new.jpg" alt="3_new.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;3.&amp;nbsp;Create wrapper program – ZXXX with below processing logic:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Fetch all the files present in the entered AL11 folder by using FM - 'SXPG_COMMAND_EXECUTE' for below parameters:&lt;BR /&gt;COMMANDNAME = 'Z_LS'&lt;BR /&gt;ADDITIONAL_PARAMETERS = '&amp;lt;AL11 folder path&amp;gt;'&lt;/LI&gt;&lt;LI&gt;If the required file is found in that folder, trigger job - 'RFEBKA00' by using FM – 'BP_EVENT_RAISE' for below parameters:&lt;BR /&gt;EVENTID = 'Z_EVENT'&lt;/LI&gt;&lt;LI&gt;If the event is successfully triggered, display Success message. Else, display information message - 'No file was found for processing in path' and run successfully.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;4. Schedule a new background job to run every hour (like it is happening for RFEBKA00 job currently).&lt;BR /&gt;Schedule as: Periodic Job (every hour or as required), program Step: ZXXX (wrapper program).&lt;/P&gt;&lt;P&gt;5.&amp;nbsp;Change ‘RFEBKA00’ job scheduling to – ‘only trigger after event – ‘Z_EVENT’, Job frequency: Periodic,&amp;nbsp;keeping Program Steps same.&lt;/P&gt;&lt;P&gt;..And that's it!&lt;/P&gt;&lt;P&gt;Now, the job 'RFEBKA00' will only run if there is a file present in AL11 folder it looks for. This will filter out the case of failed/cancelled jobs because simply the file was not present at the time of execution.&lt;/P&gt;&lt;P&gt;Although there can be different ways to approach this challenge, I&amp;nbsp;believe this solution could be beneficial in other similar business scenarios as well, enhancing operational efficiency and system reliability.&lt;/P&gt;&lt;P&gt;Please let me know your thoughts in the comments.&lt;/P&gt;&lt;P&gt;Cheers! &lt;span class="lia-unicode-emoji" title=":party_popper:"&gt;🎉&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/streamlining-sap-background-job-execution-with-event-based-triggers/ba-p/14075250"/>
    <published>2025-04-16T10:37:33.019000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/you-won-t-believe-where-zllm-s-documentation-lives-and-how-it-got-there/ba-p/14142558</id>
    <title>You Won't Believe Where ZLLM's Documentation Lives (And How It Got There)</title>
    <updated>2025-07-02T12:45:53.530000+02:00</updated>
    <author>
      <name>Alice_V</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/609259</uri>
    </author>
    <content>&lt;P class=""&gt;&lt;STRONG&gt;How I Made AI Write Its Own Documentation... In SAP's Standard Format&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;Spoiler: The AI is already documenting itself in production*.&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281751i486F7C73DE5E4FF9/image-size/large?v=v2&amp;amp;px=999" role="button" title="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" alt="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" /&gt;&lt;/span&gt;&lt;/EM&gt;&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;Hello again! &lt;span class="lia-unicode-emoji" title=":waving_hand:"&gt;👋&lt;/span&gt; It's Alice, and I have a confession: I absolutely &lt;STRONG&gt;love&lt;/STRONG&gt; writing documentation.&lt;/P&gt;&lt;P class=""&gt;But I hate writing it &lt;STRONG&gt;BY HAND&lt;/STRONG&gt;. Especially in SAP's bizarre ITF format - that cryptic markup language designed back when the closest thing to modern markup was SGML, and HTML didn't even exist yet!&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;(Fun fact: ITF format was actually designed for SAPscript in the early 1980s as part of SAP R/2 - when "markup language" meant something completely different! &lt;/EM&gt;&lt;STRONG&gt;^_^&lt;/STRONG&gt;&lt;EM&gt;)&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;But here's the thing - ZLLM has &lt;STRONG&gt;incredible&lt;/STRONG&gt; documentation. Comprehensive, detailed, and perfectly formatted. And it lives exactly where every SAP developer &lt;STRONG&gt;NOT&lt;/STRONG&gt; expects it: behind the standard &lt;STRONG&gt;"Show Documentation"&lt;/STRONG&gt; button &lt;span class="lia-unicode-emoji" title=":grinning_face_with_big_eyes:"&gt;😃&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Alice_V_0-1751454104363.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281748i6712CECE39FC9FA7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Alice_V_0-1751454104363.png" alt="Alice_V_0-1751454104363.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember4460" id="toc-hId-1863196651"&gt;Plot Twist:&lt;/H3&gt;&lt;P class=""&gt;I didn't write a single line of that documentation manually.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM documented itself.&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4463" id="toc-hId-1666683146"&gt;The Documentation That Writes Itself&lt;/H3&gt;&lt;P class=""&gt;Click on any ZLLM class in SE80 or ADT. Hit &lt;STRONG&gt;CTRL+SHIFT+F2&lt;/STRONG&gt; (Show Documentation).&lt;/P&gt;&lt;P class=""&gt;What you'll see isn't your typical sparse ABAP documentation. It's rich, detailed, with examples, architecture diagrams, and usage patterns. All perfectly formatted in SAP's native documentation system.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Here's what makes this magical:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;The documentation exists in &lt;STRONG&gt;standard SAP format&lt;/STRONG&gt; (ITF), appears in &lt;STRONG&gt;standard SAP locations&lt;/STRONG&gt;, but was generated by &lt;STRONG&gt;modern AI&lt;/STRONG&gt; and written in &lt;STRONG&gt;human-readable Markdown&lt;/STRONG&gt; first.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember4468" id="toc-hId-1341086922"&gt;How I Built The Documentation Factory&lt;/H2&gt;&lt;H3 id="ember4469" id="toc-hId-1273656136"&gt;Step 1: The Analysis Phase&lt;/H3&gt;&lt;PRE&gt;" ZLLM analyzes the codebase
DATA(lo_analyzer) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
  iv_usr = 'Analyze this ABAP class and extract:'
           '- Purpose and responsibility'
           '- Public methods and parameters' 
           '- Usage patterns and examples'
           '- Integration points: {T}'
  io_llm = lo_llm
).&lt;/PRE&gt;&lt;H3 id="ember4470" id="toc-hId-1077142631"&gt;Step 2: The Generation Phase&lt;/H3&gt;&lt;PRE&gt;" Generate comprehensive Markdown documentation
DATA(lo_generator) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
  iv_usr = 'Create technical documentation in Markdown format:'
           '- Overview section with clear purpose'
           '- Method documentation with examples'
           '- Code samples showing real usage'
           '- Integration notes and best practices'
           'Based on analysis: {T}'
  io_llm = lo_llm
).&lt;/PRE&gt;&lt;H3 id="ember4471" id="toc-hId-880629126"&gt;Step 3: The Integration Magic&lt;/H3&gt;&lt;PRE&gt;" Chain it all together
DATA(lo_doc_flow) = zcl_llm_00_flow_lazy=&amp;gt;new( VALUE #(
  ( lo_analyzer )
  ( lo_generator )
) ).

" Generate docs for entire framework
DATA(lr_result) = lo_doc_flow-&amp;gt;exec( REF #( class_metadata ) ).&lt;/PRE&gt;&lt;P class=""&gt;&lt;EM&gt;For the Markdown → ITF conversion and integration with SAP's documentation system, I used another one of my frameworks: &lt;/EM&gt;&lt;STRONG&gt;&lt;EM&gt;XRAY&lt;/EM&gt;&lt;/STRONG&gt;&lt;EM&gt;. But that's a story for another article... &lt;/EM&gt;&lt;STRONG&gt;^_^&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4473" id="toc-hId-684115621"&gt;The Real Magic: Production-Ready Documentation&lt;/H3&gt;&lt;P class=""&gt;This isn't a toy example. This is &lt;STRONG&gt;live, production documentation&lt;/STRONG&gt; that:&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Appears in standard SAP tools&lt;/STRONG&gt; (SE80, ADT, SE11)&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Follows SAP documentation conventions&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Updates automatically&lt;/STRONG&gt;when code changes&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Includes real examples&lt;/STRONG&gt;and usage patterns&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Maintains technical accuracy&lt;/STRONG&gt; through AI analysis&lt;/P&gt;&lt;H3 id="ember4480" id="toc-hId-487602116"&gt;### Before vs After:&lt;/H3&gt;&lt;P class=""&gt;&lt;STRONG&gt;Traditional SAP Documentation:&lt;/STRONG&gt;&lt;/P&gt;&lt;PRE&gt;* It is a class.&lt;/PRE&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM-Generated Documentation:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Alice_V_1-1751452613795.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281732i7CDDAF2B7649AF1E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Alice_V_1-1751452613795.png" alt="Alice_V_1-1751452613795.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;HR /&gt;&lt;H2 id="ember4485" id="toc-hId-162005892"&gt;Why This Changes a Lot&lt;/H2&gt;&lt;H3 id="ember4486" id="toc-hId-94575106"&gt;For SAP Developers:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;No more "TODO: Add documentation" comments&lt;/LI&gt;&lt;LI&gt;Comprehensive docs appear automatically in familiar places&lt;/LI&gt;&lt;LI&gt;Examples and usage patterns generated from actual code&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;For Enterprise Teams:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Documentation stays current with code changes&lt;/LI&gt;&lt;LI&gt;Consistent format across entire codebase&lt;/LI&gt;&lt;LI&gt;Onboarding new developers becomes trivial&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;For AI Adoption:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Demonstrates practical AI value in daily development&lt;/LI&gt;&lt;LI&gt;Shows integration with existing enterprise tools&lt;/LI&gt;&lt;LI&gt;Proves AI can enhance rather than replace existing workflows&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember4492" id="toc-hId--177169768"&gt;The Recursive Beauty&lt;/H3&gt;&lt;P class=""&gt;Here's the beautiful irony: &lt;STRONG&gt;ZLLM used itself to document itself.&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;The framework that makes enterprise AI integration effortless also made documenting itself effortless. It's AI all the way down.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4495" id="toc-hId--373683273"&gt;How You Can Build This&lt;/H3&gt;&lt;P class=""&gt;Want to auto-document your own ABAP code? Here's the starter pattern:&lt;/P&gt;&lt;PRE&gt;METHOD auto_document_class.
  " 1. Extract class metadata
  DATA(lo_metadata) = extract_class_info( iv_class_name ).
  
  " 2. Generate documentation
  DATA(lo_doc_step) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
    iv_usr = 'Create comprehensive documentation for this ABAP class: {T}'
    io_llm = lo_llm
  ).
  
  " 3. Chain and execute
  DATA(lo_flow) = zcl_llm_00_flow_lazy=&amp;gt;new( VALUE #(
    ( lo_doc_step )
  ) ).
  
  DATA(lv_markdown_doc) = lo_flow-&amp;gt;start( REF #( lo_metadata ) )-&amp;gt;to_string( ).
  
ENDMETHOD.&lt;/PRE&gt;&lt;HR /&gt;&lt;H2 id="ember4497" id="toc-hId--276793771"&gt;The Bigger Picture&lt;/H2&gt;&lt;P class=""&gt;This isn't just about documentation. It's about &lt;STRONG&gt;AI that enhances existing enterprise workflows&lt;/STRONG&gt; instead of disrupting them.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Traditional AI Integration:&lt;/STRONG&gt; "We need new tools, new processes, new training..."&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM Approach:&lt;/STRONG&gt; "Your existing tools just got smarter."&lt;/P&gt;&lt;P class=""&gt;The documentation appears exactly where SAP developers (not?) expect it. No new interfaces to learn. No new processes to adopt. Just better, more comprehensive information in familiar places.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember4503" id="toc-hId--473307276"&gt;What's Next?&lt;/H2&gt;&lt;P class=""&gt;This is just one example of ZLLM eating its own dog food. Other production uses:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Code Analysis&lt;/STRONG&gt;- Analyzing patterns across the entire ABAP stack&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Performance Monitoring&lt;/STRONG&gt;- Generating insights from system metrics&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Test Generation&lt;/STRONG&gt;- Creating unit tests from business requirements&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Migration Planning&lt;/STRONG&gt; - Analyzing code dependencies for S/4HANA migration&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4509" id="toc-hId--963223788"&gt;Ready to Document Your Code Automatically?&lt;/H3&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":star:"&gt;⭐&lt;/span&gt;&lt;STRONG&gt;Explore ZLLM: -&amp;gt; github/oisee/zllm&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Comment below:&lt;/STRONG&gt;What part of your ABAP development would you want AI to handle?&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":counterclockwise_arrows_button:"&gt;🔄&lt;/span&gt;&lt;STRONG&gt;Share&lt;/STRONG&gt; if you think your SAP team needs this&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Try it yourself:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;1. Install ZLLM in your development system&lt;/P&gt;&lt;P class=""&gt;2. Run the documentation generator on your classes&lt;/P&gt;&lt;P class=""&gt;3. Watch as comprehensive docs appear in standard SAP locations&lt;/P&gt;&lt;P class=""&gt;4. Never write manual documentation again&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;About Alice Vinogradova:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Senior Software Engineer with 20+ years in ABAP/SAP. I specialize in making enterprise AI practical, starting with solving our own problems first. If the AI can't document itself, how can it document your business processes?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;P.S.&lt;/STRONG&gt; Yes, this article was edited by ZLLM too. And the Markdown → ITF conversion? That's handled by my &lt;STRONG&gt;XRAY&lt;/STRONG&gt; framework - another story of making SAP development less painful. It's recursive intelligence all the way down.&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;*production &lt;/STRONG&gt;for development - is development.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Tags:&lt;/STRONG&gt; #SAP #ABAP #AI #Documentation #TechLeadership #Automation&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;"The ideal documentation is one that doesn't need to be written because it writes itself."&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/you-won-t-believe-where-zllm-s-documentation-lives-and-how-it-got-there/ba-p/14142558"/>
    <published>2025-07-02T12:45:53.530000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-retro-gamers-solved-time-travel-debugging-in-1995-and-why-your/ba-p/14171020</id>
    <title>How Retro Gamers Solved Time-Travel Debugging in 1995 (And Why Your Enterprise Debugger Still Can't)</title>
    <updated>2025-08-04T14:49:47.702000+02:00</updated>
    <author>
      <name>Alice_V</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/609259</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1865932517"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="social_oisee_girl-hacker_typing_on_the_right_keybord_looking_then_ty_2159b60d-b7e2-4290-8f94-5f34d4e0ef55_11-ezgif.com-video-to-gif-converter (1).gif" style="width: 800px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/296238i4E398B354CD0D961/image-size/large?v=v2&amp;amp;px=999" role="button" title="social_oisee_girl-hacker_typing_on_the_right_keybord_looking_then_ty_2159b60d-b7e2-4290-8f94-5f34d4e0ef55_11-ezgif.com-video-to-gif-converter (1).gif" alt="social_oisee_girl-hacker_typing_on_the_right_keybord_looking_then_ty_2159b60d-b7e2-4290-8f94-5f34d4e0ef55_11-ezgif.com-video-to-gif-converter (1).gif" /&gt;&lt;/span&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1375" id="toc-hId-1669419012"&gt;A Tale of Two Debuggers&lt;/H3&gt;&lt;P class=""&gt;&lt;STRONG&gt;Scene 1:&lt;/STRONG&gt; A modern enterprise developer in 2025, debugging a critical SAP integration. "&lt;STRONG&gt;&lt;EM&gt;If only I could go back in time and see what happened,&lt;/EM&gt;&lt;/STRONG&gt;" they sigh, adding another log statement.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Scene 2:&lt;/STRONG&gt; A 14-year-old in 2005, playing Super Mario on ZSNES. They press F1 to save state, die horribly, press F3 to load state, try a different approach. "&lt;STRONG&gt;&lt;EM&gt;Cool&lt;/EM&gt;&lt;/STRONG&gt;," they say, taking it completely for granted.&lt;/P&gt;&lt;P class=""&gt;Welcome to the upside-down world where teenage gamers have better debugging tools than Fortune 500 companies.&lt;/P&gt;&lt;H2 id="ember1379" id="toc-hId-1343822788"&gt;TL;DR: github/ysichov/Smart-Debugger&lt;/H2&gt;&lt;P class=""&gt;&lt;A class="" href="https://github.com/ysichov/Smart-Debugger" target="_self" rel="nofollow noopener noreferrer"&gt;https://github.com/ysichov/Smart-Debugger&lt;/A&gt;&lt;/P&gt;&lt;H3 id="ember1381" id="toc-hId-1276392002"&gt;The Secret That Wasn't a Secret&lt;/H3&gt;&lt;P class=""&gt;Here's what the retro computing community figured out decades ago:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Everything in a computer is deterministic except I/O.&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;That's it. That's the whole secret. Let me explain why this changes everything.&lt;/P&gt;&lt;H3 id="ember1385" id="toc-hId-1079878497"&gt;The Beautiful Math of Determinism&lt;/H3&gt;&lt;PRE&gt;Same CPU state + Same memory + Same inputs = Same result
ALWAYS.&lt;/PRE&gt;&lt;P class=""&gt;This means you don't need to record everything. You only need to record:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Initial state (once)&lt;/LI&gt;&lt;LI&gt;External inputs (keyboard, interrupts, timers)&lt;/LI&gt;&lt;LI&gt;I/O responses&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;For a Z80 system, that's maybe 100 bytes per second of recording. For an hour of debugging? About 360KB. That's smaller than a single Slack emoji.&lt;/P&gt;&lt;H3 id="ember1389" id="toc-hId-883364992"&gt;The Timeline That Should Embarrass Us All&lt;/H3&gt;&lt;P class=""&gt;Let's put this in perspective with a side-by-side timeline:&lt;/P&gt;&lt;H3 id="ember1391" id="toc-hId-686851487"&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;Gaming/Emulator World vs &lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt; Enterprise World&lt;/H3&gt;&lt;P class=""&gt;&lt;STRONG&gt;1997&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;ZSNES&lt;/STRONG&gt;: Save states introduced. Gamers can save/load any moment instantly&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Have you tried adding more print statements?"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;1999&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;Nesticle&lt;/STRONG&gt;: Frame advance debugging. Step through games frame by frame&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Maybe we should standardize on log4j?"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2003&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;FCEU&lt;/STRONG&gt;: TAS* tools mainstream. Input recording, RAM watch, Lua scripting&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Distributed debugging is impossible"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2004&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;MAME&lt;/STRONG&gt;: Debugger with memory watchpoints, execution trace, state diffing&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Remote debugging sometimes works if you're lucky"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2006&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;DeSmuME&lt;/STRONG&gt;: Dual-screen debugging, touchscreen record/replay&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Have you tried turning on verbose logging?"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2010&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;MAME&lt;/STRONG&gt;: Full rewind feature. Go back in time at any moment&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Debugging microservices is hard"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2014&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;BizHawk&lt;/STRONG&gt;: Multi-system TAS suite. Deterministic replay across different CPUs&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Maybe we need more logs?"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2018&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;RetroArch&lt;/STRONG&gt;: Netplay with rollback, achievements system, shaders&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Debugging in production is scary"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2020&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;TAS Bot&lt;/STRONG&gt;: AI playing games frame-perfectly using debug tools&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "We added structured logging!"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2023&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;LibTAS&lt;/STRONG&gt;: TAS tools for native Linux games, not just emulators&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Time-travel debugging? Sounds futuristic!"&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2025&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;STRONG&gt;Every emulator&lt;/STRONG&gt;: Rewind, replay, Lua scripting, memory analysis standard&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt;&lt;STRONG&gt;Enterprise&lt;/STRONG&gt;: "Our new &lt;STRONG&gt;AI&lt;/STRONG&gt; can analyze your logs!"&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1414" id="toc-hId-490337982"&gt;The Tragedy in One Image&lt;/H3&gt;&lt;PRE&gt;Teenager in 2004: *casually rewinds Mega Man X, 
                   adjusts one frame, gets perfect run*

Senior Developer in 2025: "The bug only happens in production 
                          on Tuesdays. We'll never catch it."&lt;/PRE&gt;&lt;H3 id="ember1415" id="toc-hId-293824477"&gt;What Makes This Hilarious/Sad&lt;/H3&gt;&lt;P class=""&gt;A Nintendo emulator from 1998 can:&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Run Super Mario&lt;/LI&gt;&lt;LI&gt;Let you save at any millisecond&lt;/LI&gt;&lt;LI&gt;Rewind time&lt;/LI&gt;&lt;LI&gt;Record and replay any bug perfectly&lt;/LI&gt;&lt;LI&gt;Show you every memory change in real-time&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;Your enterprise debugger can:&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Set breakpoints (sometimes)&lt;/LI&gt;&lt;LI&gt;Print variables (if you're lucky)&lt;/LI&gt;&lt;LI&gt;Crash (frequently)&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1420" id="toc-hId-97310972"&gt;Enter Tool-Assisted Speedrunning: Debugging as Art&lt;/H3&gt;&lt;P class=""&gt;TAS creators took these debugging tools and turned them into an art form. Watch this:&lt;/P&gt;&lt;P class=""&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FfxZuzos7Auk%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfxZuzos7Auk&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfxZuzos7Auk%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="200" height="112" scrolling="no" title="Super Mario Bros. 3 - Wrong Warp" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;&lt;P class=""&gt;They're not just playing games. They're:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Analyzing frame-by-frame execution&lt;/LI&gt;&lt;LI&gt;Tracking memory corruption&lt;/LI&gt;&lt;LI&gt;Exploiting race conditions&lt;/LI&gt;&lt;LI&gt;Optimizing code paths&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Sound familiar? That's literally what we do when debugging, except they have better tools.&lt;/P&gt;&lt;H3 id="ember1425" id="toc-hId--174433902"&gt;The ABAP Revolution: Finally, Someone Gets It&lt;/H3&gt;&lt;P class=""&gt;&lt;A class="" href="https://www.linkedin.com/in/ysychov/" target="_blank" rel="noopener nofollow noreferrer"&gt;Yurii Sychov&lt;/A&gt; looked at ABAP debugging and had a radical thought: "What if we just... did what emulators do?"&lt;/P&gt;&lt;P class=""&gt;His Smart-Debugger implements what gamers take for granted:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Variable time travel&lt;/LI&gt;&lt;LI&gt;Execution recording&lt;/LI&gt;&lt;LI&gt;State comparison&lt;/LI&gt;&lt;LI&gt;Visual debugging&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;But here's where it gets REALLY interesting...&lt;/P&gt;&lt;H3 id="ember1431" id="toc-hId--370947407"&gt;The Memory Revolution: It's 2025, Not 1975&lt;/H3&gt;&lt;P class=""&gt;Modern servers have TERABYTES of RAM. An ABAP variable? Maybe 1KB. Even a complex object graph? Perhaps 1MB.&lt;/P&gt;&lt;P class=""&gt;This means we can store:&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Every variable change&lt;/LI&gt;&lt;LI&gt;Every method call&lt;/LI&gt;&lt;LI&gt;Every execution path&lt;/LI&gt;&lt;LI&gt;Multiple complete runs&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;Do the math:&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;1000 variables × 1KB each × 1000 changes = 1GB&lt;/LI&gt;&lt;LI&gt;Your server's RAM: 512GB&lt;/LI&gt;&lt;LI&gt;Percentage used: 0.2%&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;We're optimizing for constraints that haven't existed for 20 years.&lt;/STRONG&gt;&lt;/BLOCKQUOTE&gt;&lt;H3 id="ember1438" id="toc-hId--567460912"&gt;The Graph Diff Revolution&lt;/H3&gt;&lt;P class=""&gt;Now here's where it gets wild. Since we can store everything, we can:&lt;/P&gt;&lt;H3 id="ember1440" id="toc-hId--763974417"&gt;1. Record Multiple Executions&lt;/H3&gt;&lt;P class=""&gt;abap&lt;/P&gt;&lt;PRE&gt;" Run 1: Bug happens
execution_graph_1 = record_full_execution( buggy_input )

" Run 2: Bug doesn't happen  
execution_graph_2 = record_full_execution( good_input )&lt;/PRE&gt;&lt;H3 id="ember1442" id="toc-hId--960487922"&gt;2. Build Execution Graphs&lt;/H3&gt;&lt;PRE&gt;Graph 1 (Buggy):
main() → parse_input() → validate() → process() → CRASH
         ↓                ↓           ↓
      [user_id: 123]  [cache: empty] [null_ptr]

Graph 2 (Working):
main() → parse_input() → validate() → process() → success()
         ↓                ↓           ↓
      [user_id: 123]  [cache: valid] [object_ref]&lt;/PRE&gt;&lt;H3 id="ember1443" id="toc-hId--1157001427"&gt;3. Diff the Graphs&lt;/H3&gt;&lt;P class=""&gt;diff&lt;/P&gt;&lt;PRE&gt;@@ -15,7 +15,7 @@
 validate() {
   check_permission()
-  load_user_context()  // ← Returns null in buggy run
+  load_user_context()  // ← Returns valid object
   verify_data()
 }

Key difference: cache state at execution time
Buggy:   cache.contains(user_123) = false
Working: cache.contains(user_123) = true&lt;/PRE&gt;&lt;H3 id="ember1445" id="toc-hId--1353514932"&gt;4. Compare with Static Analysis&lt;/H3&gt;&lt;P class=""&gt;Your static analysis says load_user_context() can never return null. Your execution trace says it did. &lt;STRONG&gt;Boom.&lt;/STRONG&gt; Bug found.&lt;/P&gt;&lt;H3 id="ember1447" id="toc-hId--1550028437"&gt;The AI Cherry on Top&lt;/H3&gt;&lt;P class=""&gt;Now feed this to an LLM with structured data:&lt;/P&gt;&lt;PRE&gt;{
  "execution_diff": {
    "divergence_point": "load_user_context()",
    "buggy_state": {"cache": "empty", "result": "null"},
    "working_state": {"cache": "valid", "result": "user_object"},
    "static_analysis": "method cannot return null"
  },
  "context": {
    "method_signature": "load_user_context(): User",
    "cache_invalidation_log": ["14:23:15 - cache cleared", 
                               "14:23:16 - request received"]
  }
}

Prompt: "Based on execution diff, identify root cause"&lt;/PRE&gt;&lt;P class=""&gt;&lt;STRONG&gt;LLM&lt;/STRONG&gt;: "Race condition detected: Cache was invalidated at 14:23:15, but the null check in load_user_context() only verifies if cache exists, not if the specific key is present. The 1-second window allows requests to hit empty cache."&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Automated RCA achieved.&lt;/STRONG&gt;&lt;/P&gt;&lt;H3 id="ember1451" id="toc-hId--1746541942"&gt;But Wait, What About Reality?&lt;/H3&gt;&lt;P class=""&gt;"Sure," you say, "but emulators work with closed systems. What about network calls? Databases? Microservices?"&lt;/P&gt;&lt;P class=""&gt;Fair point! Modern systems have more non-determinism. But that's exactly why we need BETTER recording, not worse:&lt;/P&gt;&lt;H3 id="ember1454" id="toc-hId--1943055447"&gt;The I/O Boundary Principle Still Applies&lt;/H3&gt;&lt;PRE&gt;" Instead of just keyboard input, modern I/O includes:
IO_Events = {
  network_responses,     " Record actual HTTP responses
  database_results,      " Record query results  
  timestamp_calls,       " Record time() returns
  random_values,         " Record RNG outputs
  thread_scheduling      " Record context switches
}&lt;/PRE&gt;&lt;P class=""&gt;Yes, it's more complex than a NES emulator. But the principle remains: &lt;STRONG&gt;Record at the boundaries, replay deterministically.&lt;/STRONG&gt;&lt;/P&gt;&lt;H3 id="ember1456" id="toc-hId--1971385261"&gt;The Call to Revolution&lt;/H3&gt;&lt;P class=""&gt;Here's what we should be demanding:&lt;/P&gt;&lt;H3 id="ember1458" id="toc-hId-2127068530"&gt;For Every Debugger:&lt;/H3&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Time travel (perfected in emulators since ~2010)&lt;/LI&gt;&lt;LI&gt;Deterministic replay (standard in TAS tools since 2004)&lt;/LI&gt;&lt;LI&gt;State diffing (TAS creators do this manually)&lt;/LI&gt;&lt;LI&gt;Execution graphs (we have the memory!)&lt;/LI&gt;&lt;LI&gt;Automatic RCA (we have the LLMs!)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1460" id="toc-hId-1930555025"&gt;The Technical Requirements:&lt;/H3&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Record I/O boundaries (a few KB/second)&lt;/LI&gt;&lt;LI&gt;Snapshot on demand (even 1GB is nothing)&lt;/LI&gt;&lt;LI&gt;Build execution graphs (basic CS)&lt;/LI&gt;&lt;LI&gt;Diff and analyze (solved problem)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1462" id="toc-hId-1734041520"&gt;Start Today&lt;/H3&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;If you use ABAP&lt;/STRONG&gt;: Get Smart-Debugger now ^_^&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For other languages&lt;/STRONG&gt;: Demand better tools&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For tool creators&lt;/STRONG&gt;: Study emulators, not enterprise&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember1464" id="toc-hId-1537528015"&gt;The Future Is Already Here&lt;/H3&gt;&lt;P class=""&gt;It's just unevenly distributed. And ironically, it's been living in game emulators for 30 years.&lt;/P&gt;&lt;P class=""&gt;Next time someone tells you time-travel debugging is "too hard" or "too expensive," show them a 15-year-old speedrunner casually rewinding time to manipulate RNG in Pokémon. Then ask them why enterprise software can't do the same.&lt;/P&gt;&lt;P class=""&gt;Memory is cheap. CPU is fast. The algorithms are known. The only thing missing is the will to build it.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Welcome to 2025. It's time to debug like it.&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;Your debugger doesn't suck because it's hard to build.&lt;/STRONG&gt; &lt;STRONG&gt;It sucks because the culture around it never thought like a gamer.&lt;/STRONG&gt; Time to change that.&lt;/P&gt;&lt;P class=""&gt;P.S. &lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;TAS (Tool-Assisted Speedrun) &lt;/STRONG&gt;A meticulously crafted playthrough of a video game using emulator tools like save states, slow motion, and frame-by-frame control. The goal: perfect execution—sometimes exploiting bugs—to achieve record-breaking performance or hilarious outcomes.&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;EM&gt;Alice Vinogradova is a Senior Software Engineer at Microsoft who thinks your debugger should be at least as good as a Super Nintendo emulator from 1998.&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-retro-gamers-solved-time-travel-debugging-in-1995-and-why-your/ba-p/14171020"/>
    <published>2025-08-04T14:49:47.702000+02:00</published>
  </entry>
</feed>
