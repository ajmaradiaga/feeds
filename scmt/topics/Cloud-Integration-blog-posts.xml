<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/Cloud-Integration-blog-posts.xml</id>
  <title>SAP Community - Cloud Integration</title>
  <updated>2025-07-23T05:00:10.030429+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/Cloud Integration/pd-p/67837800100800006801" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>Cloud Integration blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/utilization-of-sap-integration-suite-to-incorporate-satellite-iot-data-into/ba-p/14132061</id>
    <title>Utilization of SAP Integration suite to incorporate satellite IOT data into SAP Systems.</title>
    <updated>2025-06-24T10:04:36.856000+02:00</updated>
    <author>
      <name>Swaita_Banerjee</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2148248</uri>
    </author>
    <content>&lt;P&gt;Hi All,&lt;/P&gt;&lt;P&gt;We can be able to integrate SAP Integration suite with the satellite IoT Data Providers which is an innovative as well as an emerging concept that has vast applications in logistics, defense and agriculture. It involves capturing of the data from satellites which includes geolocation, weather and asset movement while integrating it into the SAP systems like S/4 Hana, EWM and TM via SAP Integration Suite.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;U&gt;&lt;STRONG&gt;USECASE:&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;Imagining a logistics company with the fleets operating in some remote areas where GSM/4G signals are not available. Now, satellite IoT devices are often installed on the devices that could send telemetry data like location, temperature via satellite to a cloud provider or ground station. SAP Integration suite can then&lt;BR /&gt;ingest, process and roue this data into the SAP backend systems.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Architecture Overview:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Swaita_Banerjee_1-1749403006538.png" style="width: 441px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271472i1C0A067BCDA491F4/image-dimensions/441x337?v=v2" width="441" height="337" role="button" title="Swaita_Banerjee_1-1749403006538.png" alt="Swaita_Banerjee_1-1749403006538.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Technical Flow:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Swaita_Banerjee_2-1749406245831.png" style="width: 482px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271484iE91B8D9E318ED8C5/image-dimensions/482x284?v=v2" width="482" height="284" role="button" title="Swaita_Banerjee_2-1749406245831.png" alt="Swaita_Banerjee_2-1749406245831.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Swaita_Banerjee_3-1749406311058.png" style="width: 428px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271485iDFFC21523710D1DD/image-dimensions/428x254?v=v2" width="428" height="254" role="button" title="Swaita_Banerjee_3-1749406311058.png" alt="Swaita_Banerjee_3-1749406311058.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;U&gt;&lt;EM&gt;&lt;STRONG&gt;i-Flow&amp;nbsp;Design Steps in SAP Integration Suite:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/U&gt;​&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Sender: HTTP Receiver from cloud IoT platform with the JSON&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;payload.​&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Content Modifier: Extracting GPS, temperature as well as&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;timestamp​&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Router: For applying the conditional logic.​&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Mapping: Conversion of the data type formats which can include&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;JSON-&amp;gt;&amp;nbsp;XML&amp;nbsp;or it can be JSON-&amp;gt; SAP OData Format.​&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Receiver: Pushes data&amp;nbsp; into SAP backend using HTTP or OData&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;destination.​&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;EM&gt;&lt;STRONG&gt;TESTING:&lt;/STRONG&gt;&lt;/EM&gt;​&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can simulate IoT platform using tools like Postman.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion:​&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This integration would open doors to the smarter asset tracking as well as real-time decision making areas where GSM (Global System for Mobile Communication) is not available.&amp;nbsp; Hence, SAP Integration Suite makes it possible to diminish the gap between remote IoT data as well as the enterprise systems.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/utilization-of-sap-integration-suite-to-incorporate-satellite-iot-data-into/ba-p/14132061"/>
    <published>2025-06-24T10:04:36.856000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/reusable-sap-cpi-interface-for-proxies-using-groovy-simple-proxy-xml-to/ba-p/14130287</id>
    <title>Reusable SAP CPI Interface for Proxies Using Groovy: Simple Proxy XML to JSON Integration</title>
    <updated>2025-06-24T10:06:56.005000+02:00</updated>
    <author>
      <name>RameshVaranganti</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/51927</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1733128038"&gt;Introduction&lt;/H2&gt;&lt;P&gt;This blog will show you how to create a single interface in SAP CPI that can be reused for processing proxy XML data from SAP S4/SAP systems or any other systems also.&lt;/P&gt;&lt;H2 id="toc-hId-1536614533"&gt;Use Case&lt;/H2&gt;&lt;P&gt;We will come across situations where we need to send different sets of data with different XML structures from SAP or SAP S4 to a target application using SAP CPI.&lt;/P&gt;&lt;P&gt;Normally, we design a specific proxy structure for XML that the ABAP team can use to send data to the middleware. But when there are multiple XML structures and the data needs to be sent separately from the source system, we often need to create multiple proxy structures. Also, if a field name needs to be changed or a new field needs to be added, the interface must be updated each time.&lt;/P&gt;&lt;P&gt;I came across this situation where SAP needed to send different XML messages, and the ABAP team asked for multiple proxy structures and changes. Each different message was going to the same target application but with a different resource path. This is going to take lot of time and different interfaces are needed as each message use different path in the HTTP.&lt;/P&gt;&lt;P&gt;To avoid this, I used a standardized XML format with simple &amp;lt;FieldName&amp;gt; and &amp;lt;FieldValue&amp;gt; pairs, and I added a resource path identifier in the header. This way, I was able to create just one reusable interface in SAP CPI that could handle all the different incoming messages, which I then sent to the target application.&lt;/P&gt;&lt;H2 id="toc-hId-1340101028"&gt;Architecture&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ProcessFlowDiagram.svg" style="width: 601px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/275532i4F92294BF1DAE635/image-size/large?v=v2&amp;amp;px=999" role="button" title="ProcessFlowDiagram.svg" alt="ProcessFlowDiagram.svg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Development Steps&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_0-1750348469253.png" style="width: 815px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276395i5EC7CF8CDA9A843E/image-dimensions/815x159?v=v2" width="815" height="159" role="button" title="RameshVaranganti_0-1750348469253.png" alt="RameshVaranganti_0-1750348469253.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Standardize Input XML in SAP&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;I have created Standardize SAP proxy structures into a common, uniform format with header&lt;/P&gt;&lt;P&gt;&amp;lt;FieldName&amp;gt; and &amp;lt;FieldValue&amp;gt; XML pair structure&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RameshVaranganti_1-1750348505072.png" style="width: 733px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276396iE9DCF11B6B273AF4/image-dimensions/733x165?v=v2" width="733" height="165" role="button" title="RameshVaranganti_1-1750348505072.png" alt="RameshVaranganti_1-1750348505072.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This contains Header section I will be using to identify my resource path&lt;/P&gt;&lt;P&gt;In SAP CPI , I have used content modifier to capture the proxy header table data and saved it in property to use in HTTP receiver adapter. This property dynamically call the endpoint.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_2-1750348562227.png" style="width: 767px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276397i3D4C6919A939BC91/image-dimensions/767x219?v=v2" width="767" height="219" role="button" title="RameshVaranganti_2-1750348562227.png" alt="RameshVaranganti_2-1750348562227.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Groovy Script in CPI for XML to Json&lt;/LI&gt;&lt;/OL&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;This Groovy script parses the incoming XML, extracts field-value pairs, and builds a JSON structure:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message;
import java.util.HashMap;
import groovy.xml.*
import groovy.json.*
def Message processData(Message message)
{
    def xml = message.getBody(java.lang.String)
    def records = new XmlSlurper().parseText(xml)
    def jsonList = records.Record.collect { record -&amp;gt;
    def map = [:]
    record.Item.each { item -&amp;gt;
        map[item.FieldName.text()] = item.FieldValue.text()
    }
    return map
    }
    def json = JsonOutput.prettyPrint(JsonOutput.toJson(jsonList))
    message.setBody(json)
    return message;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&amp;nbsp;Post Transformed JSON Data to Target Endpoint&lt;P&gt;HTTP Adapter configuration: In previous Content Modifier I have used Tablename to dynamically identify target URL.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_3-1750348605531.png" style="width: 611px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276398iAB5584FE86D11973/image-dimensions/611x58?v=v2" width="611" height="58" role="button" title="RameshVaranganti_3-1750348605531.png" alt="RameshVaranganti_3-1750348605531.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-1143587523"&gt;Testing&lt;/H2&gt;&lt;P&gt;Input XML1&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;Header&amp;gt;
		&amp;lt;TableName&amp;gt;KLAH&amp;lt;/TableName&amp;gt;
		&amp;lt;Plant&amp;gt;001&amp;lt;/Plant&amp;gt;
	&amp;lt;/Header&amp;gt;
	&amp;lt;Record&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;MANDT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;300&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;CLINT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;1234&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;KLART&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;003&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
	&amp;lt;/Record&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Output Json1:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;[
	{
		"MANDT": "300",
		"CLINT": "1234",
		"KLART": "003"
	}
]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;example2:&lt;/P&gt;&lt;P&gt;Input XML&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;message&amp;gt;
	&amp;lt;Record&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;MANDT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;300&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;TPLNR&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;001A&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;SPRAS&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;E&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;PLTXT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;CheckPLTXTValueRecord1&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;PLTXU&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;CheckPLTXUTValueRec1&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
	&amp;lt;/Record&amp;gt;
	&amp;lt;Record&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;MANDT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;300&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;TPLNR&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;001B&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;SPRAS&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;E&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;PLTXT&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;CheckPLTXTValueRecord2&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
		&amp;lt;Item&amp;gt;
			&amp;lt;FieldName&amp;gt;PLTXU&amp;lt;/FieldName&amp;gt;
			&amp;lt;FieldValue&amp;gt;CheckPLTXUTValueRec2&amp;lt;/FieldValue&amp;gt;
		&amp;lt;/Item&amp;gt;
	&amp;lt;/Record&amp;gt;
&amp;lt;/message&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;OutputJson:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;[
    {
        "MANDT": "300",
        "TPLNR": "001A",
        "SPRAS": "E",
        "PLTXT": "CheckPLTXTValueRecord1",
        "PLTXU": "CheckPLTXUTValueRec1"
    },
    {
        "MANDT": "300",
        "TPLNR": "001B",
        "SPRAS": "E",
        "PLTXT": "CheckPLTXTValueRecord2",
        "PLTXU": "CheckPLTXUTValueRec2"
    }
]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-947074018"&gt;Take Away&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;This design&amp;nbsp;reusable, scalable integration strategy in SAP CPI using Groovy scripting and a generalized XML structure for simple transmissions.&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Implementing a single interface capable of handling multiple tables data with dynamic fields, this solution simplifies integration architecture, accelerates delivery, and reduces ongoing maintenance.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Finally it eliminates the need of create multiple interfaces for similar data transmissions if we could able to handle simple design approcahes in SAP CPI.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/reusable-sap-cpi-interface-for-proxies-using-groovy-simple-proxy-xml-to/ba-p/14130287"/>
    <published>2025-06-24T10:06:56.005000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sftp-authentication-setup-in-sap-btp-integration-suite-a-step-by-step-guide/ba-p/14132661</id>
    <title>SFTP Authentication Setup in SAP BTP Integration Suite: A Step-by-Step Guide.</title>
    <updated>2025-06-24T10:32:30.878000+02:00</updated>
    <author>
      <name>NaveenReddy_06</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2162931</uri>
    </author>
    <content>&lt;P class="lia-align-left" style="text-align : left;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;The objective of this tutorial is to guide users through the step-by-step process of setting up SFTP authentication within an SAP Business Technology Platform (BTP) landscape using SAP Integration Suite. The tutorial focuses on configuring secure key-based authentication by generating SSH key pairs, uploading keys to the SFTP server and BTP keystore, and integrating the configuration into an iFlow.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;Access the SFTP Platform :-&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Visit the URL:&lt;A href="https://sftpcloud.io/tools/free-sftp-server" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sftpcloud.io/tools/free-sftp-server&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Click on the &lt;STRONG&gt;Login&lt;/STRONG&gt; button located at the top right corner.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_0-1750403717574.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276635iB77BDE96C1FF1483/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_0-1750403717574.png" alt="nr_blogs_0-1750403717574.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; Sign Up / Log In&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Use the '&lt;STRONG&gt;Sign Up / Log In&lt;/STRONG&gt;' option to register or enter your account.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_1-1750403717576.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276634i9711A98E8ECFF606/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_1-1750403717576.png" alt="nr_blogs_1-1750403717576.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; Create SFTP instance&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;After a successful login, To Create New SFTP instance.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_2-1750403717579.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276636iF52096DA52027256/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_2-1750403717579.png" alt="nr_blogs_2-1750403717579.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Next, Open the SFTP instance, click on 'Users', and then go to 'Connection Details’.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_3-1750403717583.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276637iA73F33079F75C060/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_3-1750403717583.png" alt="nr_blogs_3-1750403717583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;After configure SFTP server, we will have some info of it as&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;User name&lt;/LI&gt;&lt;LI&gt;Password phrase&lt;/LI&gt;&lt;LI&gt;Host name&lt;/LI&gt;&lt;LI&gt;SFTP Port&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_4-1750403717588.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276639iB40BE422F42A2C6A/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_4-1750403717588.png" alt="nr_blogs_4-1750403717588.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;Install WinSCP&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Visit the URL:&lt;A href="https://winscp.net/eng/download.php" target="_blank" rel="noopener nofollow noreferrer"&gt;https://winscp.net/eng/download.php&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Open WinSCP and login using the Host Name, User Name, and Password from the SFTP server.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_5-1750403717589.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276638i0A86647AD6D82CD6/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_5-1750403717589.png" alt="nr_blogs_5-1750403717589.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Here, we create a directory or file in WinSCP to upload or download files from the SFTP server.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_6-1750403717619.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276642i68DBE8FCBE13794A/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_6-1750403717619.png" alt="nr_blogs_6-1750403717619.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-2120439553"&gt;&amp;nbsp; &amp;nbsp; Create Known Host in CPI&lt;/H5&gt;&lt;OL&gt;&lt;LI&gt;Go to integration Suite Application&lt;/LI&gt;&lt;LI&gt;Go to Design integration flow&lt;/LI&gt;&lt;LI&gt;Go to Monitor item in left menu&lt;/LI&gt;&lt;LI&gt;Go to Connectivity Test&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_7-1750403717620.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276640i9313A5828EB05C91/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_7-1750403717620.png" alt="nr_blogs_7-1750403717620.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_8-1750403717624.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276641iF6ECD14C19A24D27/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_8-1750403717624.png" alt="nr_blogs_8-1750403717624.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Open Notepad, paste the Host Key, and save the file with an appropriate name (e.g.,hostkey.txt).&lt;/LI&gt;&lt;LI&gt;Add this known host into CPI&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_9-1750403717626.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276643i91AEA6B6F23EF1D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_9-1750403717626.png" alt="nr_blogs_9-1750403717626.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; Create User Credentials&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Go to integration Suite Application&lt;/LI&gt;&lt;LI&gt;Go to Design integration flow&lt;/LI&gt;&lt;LI&gt;Go to Monitor item in left menu&lt;/LI&gt;&lt;LI&gt;Go to Security Material&lt;/LI&gt;&lt;LI&gt;Click on create&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_10-1750403717627.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276644iB8D1D47D35D06C3F/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_10-1750403717627.png" alt="nr_blogs_10-1750403717627.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_11-1750403717634.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276645i500ECE6F575A16D6/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_11-1750403717634.png" alt="nr_blogs_11-1750403717634.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;To check the user credentials, go to 'Connectivity Test' and click on 'SSH'.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_12-1750403717641.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276648i6A5EE6287A5E729B/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_12-1750403717641.png" alt="nr_blogs_12-1750403717641.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;STRONG&gt;1. Username/Password :-&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP SENDER IFLOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Create/Configure an Integration Flow&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_13-1750403717643.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276646i386C27ABF8B833B2/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_13-1750403717643.png" alt="nr_blogs_13-1750403717643.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;We are using HTTPS to send the data {\"productIdentifier\":\"HT-2000\"} because this value needs to be passed to the OData service.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_14-1750403717645.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276647iBD3821669257F583/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_14-1750403717645.png" alt="nr_blogs_14-1750403717645.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. The JSON to XML Converter is used to convert incoming JSON data into XML, as required&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;by the OData service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_15-1750403717646.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276650i7D2DE727B3BECEF2/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_15-1750403717646.png" alt="nr_blogs_15-1750403717646.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;3. Use the Content Modifier to assign information to headers.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_16-1750403717647.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276651i945ABDCDE1602B35/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_16-1750403717647.png" alt="nr_blogs_16-1750403717647.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;4. Use the Request-Reply step to fetch product details from the OData service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_17-1750403717648.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276649i48099E6C1A476485/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_17-1750403717648.png" alt="nr_blogs_17-1750403717648.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;5. The OData service is being accessed from the SAP Business Accelerator Hub (&lt;A href="http://api.sap.com" target="_blank" rel="noopener noreferrer"&gt;api.sap.com&lt;/A&gt;).&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;In the SAP Business Accelerator Hub, navigate to APIs → ODATA V2, then search for 'Product&amp;nbsp; Master'.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_18-1750403717660.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276654i1B2CE93F26E2C0B3/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_18-1750403717660.png" alt="nr_blogs_18-1750403717660.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Click on "Show API Key" to get the key needed for authentication.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_19-1750403717673.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276653iE3D6521D8141C55A/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_19-1750403717673.png" alt="nr_blogs_19-1750403717673.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;In the API Specification, you can download the OData EDMX, which is useful when integrating in SAP Cloud Integration (CPI) for OData service modeling.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_20-1750403717675.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276652i86E65E091D941ED6/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_20-1750403717675.png" alt="nr_blogs_20-1750403717675.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;In the Configuration Details section, the Sandbox URL helps in forming the complete endpoint URL by replacing the {host} placeholder with the actual hostname when configuring the OData connection in SAP Cloud Integration (CPI).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_21-1750403717678.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276655i86383AE9BF53007B/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_21-1750403717678.png" alt="nr_blogs_21-1750403717678.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;6. Now in the connection, use the Sandbox URL as the Address.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_22-1750403717680.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276657i2EEA8A546DCAF1DB/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_22-1750403717680.png" alt="nr_blogs_22-1750403717680.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;We are using the data {\"productIdentifier\":\"HT-2000\"} to retrieve the specific product details from the OData service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_23-1750403717684.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276656i30BF515E69ED2090/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_23-1750403717684.png" alt="nr_blogs_23-1750403717684.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;7. Next, use the XML to CSV Converter to send data to the receiver, as the SFTP server only accepts CSV format.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_24-1750403717686.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276658i136791A62298F2ED/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_24-1750403717686.png" alt="nr_blogs_24-1750403717686.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;8. The SFTP Adapter is configured at the receiver end to deliver the converted CSV file. The directory and address are taken from the SFTP server, the file name is created dynamically, and the credentials are retrieved from the security material.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_25-1750403717690.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276660i8598B56064E4C769/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_25-1750403717690.png" alt="nr_blogs_25-1750403717690.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_26-1750403717693.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276659i7F43804F5ABB85DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_26-1750403717693.png" alt="nr_blogs_26-1750403717693.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;9. Next, save and deploy the integration. Then, open Manage Integration Content and copy the Endpoint URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_27-1750403717705.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276663iA47984407E069DE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_27-1750403717705.png" alt="nr_blogs_27-1750403717705.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;10. Go to Postman, select the GET method, and paste the endpoint URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_28-1750403717706.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276661i6A5A4BA334E3836E/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_28-1750403717706.png" alt="nr_blogs_28-1750403717706.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;In the Auth type, select OAuth 2.0, and provide the Client ID, Client Secret, and Token URL from the service instance. Then, click Get New Access Token.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_29-1750403717711.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276662iA3C2DB5A20918889/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_29-1750403717711.png" alt="nr_blogs_29-1750403717711.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_30-1750403717713.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276664iF006453711FC7A4A/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_30-1750403717713.png" alt="nr_blogs_30-1750403717713.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_31-1750403717738.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276666i6F05ABEF49A99B11/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_31-1750403717738.png" alt="nr_blogs_31-1750403717738.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Provide the body data, click on &lt;STRONG&gt;Send&lt;/STRONG&gt;, and view the result.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_32-1750403717741.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276665iD9B41A5078C47A17/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_32-1750403717741.png" alt="nr_blogs_32-1750403717741.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;11. Now, go to WinSCP, where you can see the CSV file or data in the specified directory.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_33-1750403717744.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276667iF5B27327582954C7/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_33-1750403717744.png" alt="nr_blogs_33-1750403717744.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP RECEIVER IFLOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Create/Configure an Integration Flow&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_34-1750403717747.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276669i2DEB9BC6C0AE43D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_34-1750403717747.png" alt="nr_blogs_34-1750403717747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open or create an Integration Flow (iFlow).&lt;/LI&gt;&lt;LI&gt;Connect the sender participant to Start and select the SFTP as adapter. Configure the SFTP adapter as per requirements.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_35-1750403717751.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276668i47CA3F794576AE5C/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_35-1750403717751.png" alt="nr_blogs_35-1750403717751.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Make sure that the SFTP credentials are deployed in the below path&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Overview --&amp;gt; Manage Security --&amp;gt; Security Material --&amp;gt; Create/Upload Credentials&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Check the connectivity test of SFTP adapter in Test Connectivity in the below path&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Overview --&amp;gt; Manage Security --&amp;gt; Connectivity Tests --&amp;gt; SSH&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Copy the Host Key and paste it in notepad &amp;amp; deploy it in Known Hosts(SSH) file in the below path.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Overview --&amp;gt; Manage Security --&amp;gt; Security Material --&amp;gt; Upload Known Hosts(SSH)&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;3. In the processing tab also configure as per your requirement whether you want to Archive, Keep File and Process Again.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_36-1750403717756.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276672iC86155D847E45295/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_36-1750403717756.png" alt="nr_blogs_36-1750403717756.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;4. In the scheduler tab also we need to choose how many times this particular interface needs to be run.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_37-1750403717760.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276671i26A1EAF6318BFFDF/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_37-1750403717760.png" alt="nr_blogs_37-1750403717760.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;5. Use the CSV to XML Converter to transform the incoming CSV file into structured XML format&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_38-1750403717761.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276670i4A9AB27BF1098ECF/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_38-1750403717761.png" alt="nr_blogs_38-1750403717761.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;6. After saving and deploying the integration, go to Monitor → Message Processing →Message Processing Run, click on the end of the run to view the XML data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_39-1750403717765.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276675i1A53DB06CEE78DF9/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_39-1750403717765.png" alt="nr_blogs_39-1750403717765.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;STRONG&gt;2. PUBLIC KEY :-&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create SSH KEY :&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;Go to Monitor &amp;gt; Integrations and APIs, open Manage Keystore, click Create, and select SSH Key to generate a new SSH key.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_40-1750403717770.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276674iF6DBA98F8211BFE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_40-1750403717770.png" alt="nr_blogs_40-1750403717770.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. After creating the SSH key, click on the three dots (︙) and select &lt;STRONG&gt;Download Public OpenSSH Key&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_41-1750403717771.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276673iBB1329743AA333E2/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_41-1750403717771.png" alt="nr_blogs_41-1750403717771.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Now open the SFTP server. In Windows PowerShell, run the following commands:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;cd .\Downloads\ – to change the directory to Downloads&lt;/LI&gt;&lt;LI&gt;ls – to list the files and confirm your SSH key is there&lt;/LI&gt;&lt;LI&gt;cat &amp;lt;your_ssh_key_name&amp;gt;.pub – to display the public SSH key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_42-1750403717772.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276676i58038BE175C5FD7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_42-1750403717772.png" alt="nr_blogs_42-1750403717772.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;3. Copy the displayed public SSH key, open the SFTP server, navigate to Public Keys, paste the key, and click Save.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_43-1750403717778.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276677i40A4213EE79E0E57/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_43-1750403717778.png" alt="nr_blogs_43-1750403717778.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP SENDER IFLOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Using the same flows, just changing the authentication method from username/password to private key.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the receiver SFTP adapter, select 'Public Key' for authentication, and provide the private key alias and the user name from the SFTP server.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_44-1750403717780.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276678i90FA4E6F65858688/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_44-1750403717780.png" alt="nr_blogs_44-1750403717780.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. Next, save and deploy the integration. Then, open Manage Integration Content and copy the Endpoint URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_45-1750403717787.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276681iB67E02082D79DAAD/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_45-1750403717787.png" alt="nr_blogs_45-1750403717787.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;3. In the Auth type, select OAuth 2.0, and provide the Client ID, Client Secret, and Token URL from the service instance. Then, click Get New Access Token. Provide the body data, click on &lt;STRONG&gt;Send&lt;/STRONG&gt;, and view the result.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_46-1750403717789.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276679i781B01533C4B8CC1/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_46-1750403717789.png" alt="nr_blogs_46-1750403717789.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;4. Now, go to WinSCP, where you can see the CSV file or data in the specified directory.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_47-1750403717792.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276680iD99FB8782AA0BF25/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_47-1750403717792.png" alt="nr_blogs_47-1750403717792.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP RECEIVER IFLOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;Open the sender SFTP adapter, select 'Public Key' for authentication, and provide the private key alias and the user name from the SFTP server.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_48-1750403717795.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276682iE824DE4231CA6127/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_48-1750403717795.png" alt="nr_blogs_48-1750403717795.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. After saving and deploying the integration, go to Monitor → Message Processing →Message Processing Run, click on the end of the run to view the XML data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_49-1750403717800.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276684i8960EC0F55061A7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_49-1750403717800.png" alt="nr_blogs_49-1750403717800.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;STRONG&gt;3. DUAL :-&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP SENDER IFOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Using the same flows, just changing the authentication method to Dual.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the receiver SFTP adapter, select 'Dual' for authentication, and provide the private key alias and the Credential name.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_50-1750403717802.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276683iF3C9DAEA23ABEA65/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_50-1750403717802.png" alt="nr_blogs_50-1750403717802.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. Next, save and deploy the integration. Then, open Manage Integration Content and copy the Endpoint URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_51-1750403717808.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276687i409EF9610A692C4C/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_51-1750403717808.png" alt="nr_blogs_51-1750403717808.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3. In the Auth type, select OAuth 2.0, and provide the Client ID, Client Secret, and Token URL from the service instance. Then, click Get New Access Token. Provide the body data, click on &lt;STRONG&gt;Send&lt;/STRONG&gt;, and view the result.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_52-1750403717811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276685i7058ED5E801351CF/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_52-1750403717811.png" alt="nr_blogs_52-1750403717811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 4. Now, go to WinSCP, where you can see the CSV file or data in the specified directory.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_53-1750403717814.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276686iD843F1CB67EBE030/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_53-1750403717814.png" alt="nr_blogs_53-1750403717814.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SFTP RECEIVER IFOW&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Using the same flows, just changing the authentication method to Dual.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the receiver SFTP adapter, select 'Dual' for authentication, and provide the private key alias and the Credential name.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_54-1750403717817.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276689i3A8390FC1B96BB8D/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_54-1750403717817.png" alt="nr_blogs_54-1750403717817.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. After saving and deploying the integration, go to Monitor → Message Processing →Message Processing Run, click on the end of the run to view the XML data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="nr_blogs_55-1750403717821.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276688i64A6B230556A65CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="nr_blogs_55-1750403717821.png" alt="nr_blogs_55-1750403717821.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The content of this blog is based on personal experience and is intended for educational and informational purposes only. The steps and configurations shared here are specific to the SAP Business Technology Platform (BTP) and SAP Integration Suite and may vary depending on your organization’s security policies and infrastructure setup. Always follow your organization's guidelines and consult official SAP documentation when implementing security configurations or deploying to production environments. The author is not responsible for any issues arising from improper use or application of the information provided.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sftp-authentication-setup-in-sap-btp-integration-suite-a-step-by-step-guide/ba-p/14132661"/>
    <published>2025-06-24T10:32:30.878000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-soap-sender-amp-receiver-adapters-your-integration-game-changers/ba-p/14134755</id>
    <title>SAP SOAP Sender &amp; Receiver Adapters: Your Integration Game Changers</title>
    <updated>2025-06-24T10:55:52.351000+02:00</updated>
    <author>
      <name>Rishikasairi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1940355</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;SOAP Sender and Receiver Adapters in SAP Cloud Platform Integration (CPI)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Ever felt lost in the maze of SAP integration options? You’re not alone! I’m Rishika Sairi, an SAP Integration Specialist passionate about making complex topics simple. In this blog, I’ll show you how to use the SOAP Sender Adapter in SAP CPI to connect inbound SOAP requests with an OData receiver—step by step and hands-on.&lt;/P&gt;&lt;P&gt;If you find this guide helpful, drop a comment or give a thumbs up—your kudos keep me motivated to share more!&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_0-1750723478771.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277859iE91C4A1FA183DAD1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_0-1750723478771.png" alt="Rishikasairi_0-1750723478771.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;Use Case Overview&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We want to expose a SOAP service that:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Accepts an order number via a SOAP request.&lt;/LI&gt;&lt;LI&gt;Fetches the shipment date using an OData service.&lt;/LI&gt;&lt;LI&gt;Responds back with the enriched order response.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Why use SOAP instead of REST, OData, or GraphQL?&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;SOAP&lt;/STRONG&gt; is chosen for strict data contracts, strong security, and reliable messaging—ideal for enterprise and SAP integration. It uses XML and works well for complex operations and when both sender and receiver must agree on message formats. REST and GraphQL are more flexible and modern, but SOAP’s structure is better for scenarios needing formal agreements and type safety&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;WSDL and Its Role in SOAP&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;WSDL (Web Services Description Language)&lt;/STRONG&gt; is an XML file that describes what a SOAP service can do: available operations, input/output formats, and where to access it.&lt;/LI&gt;&lt;LI&gt;The WSDL acts as a contract. Both sender and receiver use it to generate code and ensure messages match exactly, reducing errors and making integration predictable.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Summary Table&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SOAP (with WSDL)&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;REST/OData/GraphQL&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;Contract&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Strict (WSDL)&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Flexible/Schema-based&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;Security&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Built-in (WS-Security)&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Custom/simple&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;Data Format&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;XML&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;JSON/XML&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;Complexity&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Higher&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Lower&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;SOAP + WSDL = strong contract, type safety, and predictable integration—best for SAP scenarios needing reliability and clear structure&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-by-Step iFlow Design&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1. Start a New Integration Flow Project&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Open SAP Integration Suite → Design → Create an Integration Flow.&lt;/LI&gt;&lt;LI&gt;Name: SOAP_sender_Adapter.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2. Configure the SOAP Sender Adapter&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Drag the &lt;STRONG&gt;SOAP&lt;/STRONG&gt; sender from the &lt;STRONG&gt;Sender&lt;/STRONG&gt; section.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_1-1750723478777.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277861i5AD67DCB4ED532B9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_1-1750723478777.png" alt="Rishikasairi_1-1750723478777.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Field&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Value used&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Explanation / What You Need to Do&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Address&lt;/STRONG&gt;*&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;/SoapUIdemo&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The endpoint path for the SOAP sender. Clients will call the service at https://&amp;lt;tenant_url&amp;gt;/cxf/SoapUIdemo.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Service Definition&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;WSDL&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Indicates the service is defined via a WSDL file.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Use WS-Addressing&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;EM&gt;Unchecked&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Leave unchecked unless the client requires &lt;SPAN&gt;&lt;A href="https://en.wikipedia.org/wiki/WS-Addressing" target="_blank" rel="noopener nofollow noreferrer"&gt;WS-Addressing&lt;/A&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;URL to WSDL&lt;/STRONG&gt;*&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;/wsdl/GetOrderShipmentDetails.wsdl&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Relative path to the uploaded WSDL file within the CPI tenant. Make sure this WSDL is uploaded under the "Resources" section of the iFlow.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Service&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;p2:GetOrderShipDetailsService&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The &lt;STRONG&gt;service name&lt;/STRONG&gt; defined in the WSDL (&amp;lt;wsdl:service&amp;gt; tag). Must match the WSDL exactly.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Endpoint&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;p2:GetOrderShipDetailsServiceSoap&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The &lt;STRONG&gt;port/endpoint name&lt;/STRONG&gt; from the WSDL (&amp;lt;wsdl:port&amp;gt; inside the &amp;lt;service&amp;gt;). Also must match exactly.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Processing Settings&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Robust&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Recommended setting for reliable SOAP communication. Ensures message persistence and retries in case of failure.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Authorization&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;User Role&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Indicates that clients must authenticate using a role-based access policy.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;User Role&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;ESBMessaging.send&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;CPI's default role for sending messages. The calling user (e.g., a technical user) must be assigned this role in the SAP BTP cockpit.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What You Need to Configure&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;WSDL File Upload&lt;/STRONG&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Go to your iFlow → &lt;STRONG&gt;Resources&lt;/STRONG&gt; → &lt;STRONG&gt;WSDL&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Upload the file named GetOrderShipmentDetails.wsdl.&lt;/LI&gt;&lt;LI&gt;Get the wsdl file from this drive [&amp;nbsp;&lt;A href="https://drive.google.com/drive/folders/14OdkKwHEkMeH_Jdfvamj4LaAWvgNlP9x?usp=sharing" target="_blank" rel="nofollow noopener noreferrer"&gt;https://drive.google.com/drive/folders/14OdkKwHEkMeH_Jdfvamj4LaAWvgNlP9x?usp=sharing&lt;/A&gt;&amp;nbsp;]&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Ensure the file path matches /wsdl/GetOrderShipmentDetails.wsdl.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Correct Service and Endpoint Names&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;&amp;lt;wsdl:service name="GetOrderShipDetailsService"&amp;gt;&lt;/LI&gt;&lt;LI&gt;&amp;lt;wsdl:port name="GetOrderShipDetailsServiceSoap"&amp;gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Open the WSDL and verify:&lt;/LI&gt;&lt;LI&gt;The namespace prefix p2: should also match the targetNamespace in the WSDL.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Security Role Assignment&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Assign the role ESBMessaging.send to the user/service instance that will invoke this SOAP service.&lt;/LI&gt;&lt;LI&gt;Use Basic Authentication or OAuth as required.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;In SAP BTP Cockpit:&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Endpoint URL for Clients&lt;/STRONG&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Your external client can access the service via: https://&amp;lt;your-cpi-tenant&amp;gt;/cxf/SoapUIdemo&lt;/LI&gt;&lt;LI&gt;Make sure this is reachable from the client environment (firewall, IP allowlist, etc.).&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_2-1750723478782.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277860i7A830070946A5888/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_2-1750723478782.png" alt="Rishikasairi_2-1750723478782.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3. &lt;/STRONG&gt;Add a &lt;STRONG&gt;Content Modifier&lt;/STRONG&gt; to extract and store the &lt;STRONG&gt;Order Number&lt;/STRONG&gt; from the SOAP payload.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Field&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Value&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Explanation&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Action&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Create&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Creates a new message header with the name specified. If the header already exists, it will overwrite it.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;OrderNumber&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Name of the message header being created. It will be available throughout the iFlow.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Source Type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;XPath&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Extracts the value using an XPath expression from the incoming XML payload.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;//OrderNumber&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The XPath expression pointing to the OrderNumber element in the request payload.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;java.lang.String&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The expected data type of the header value.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_3-1750723478788.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277863i619C13AB526A5180/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_3-1750723478788.png" alt="Rishikasairi_3-1750723478788.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Using OData&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Request-Reply&lt;/STRONG&gt; step to call the OData backend.&lt;/LI&gt;&lt;LI&gt;Drag and connect an &lt;STRONG&gt;OData Adapter&lt;/STRONG&gt; to a &lt;STRONG&gt;Receiver&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why Am I using Northwind Service:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;I chose the Northwind service because it offers ready-to-use sample order data with no authentication required, follows standard OData conventions for easy querying, and is well-documented, making it perfect for quick testing and integration scenarios&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Field&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Value&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Explanation&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Address&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://services.odata.org/NorthWind/Northwind.svc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://services.odata.org/NorthWind/Northwind.svc&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;The base URL of the OData service endpoint.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Proxy Type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Internet&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Connects over the internet. Choose "On-Premise" if using a Cloud Connector.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;None&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;This public service does not require authentication. Use "Basic" or "OAuth2" if needed.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;CSRF Protected&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Unchecked&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Not needed for GET requests; CSRF is typically used with POST, PUT, DELETE.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Reuse Connection&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Checked&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Improves performance by reusing HTTP connections.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_4-1750723478794.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277864i6860C9CF7FDEF04C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_4-1750723478794.png" alt="Rishikasairi_4-1750723478794.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Field&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Value&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Explanation&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Operation Details&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Query (GET)&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Fetch data using a GET request.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Resource Path&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Orders&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Target entity set from the OData service.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Query Options&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;$select=OrderID,CustomerID,...&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Only selected fields are fetched for better performance. Complete list: OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, ShipVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Enable Batch Processing&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Unchecked&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Not needed for single queries. Enable for multiple operations.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Custom Query Options&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Empty&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Can be used for filters or $expand if needed.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Content Type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Atom&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;XML-based format. Change to JSON if preferred and supported by target service.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Page Size&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Empty&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Optional. Used for pagination in large result sets.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_5-1750723478800.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277862i1106B732352B1A71/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_5-1750723478800.png" alt="Rishikasairi_5-1750723478800.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The Connection Source has two options, one is Remote and the other one is Local EDMX file. As the NorthWindService doesn’t have any kind of authentication to clear I have used up the Remote one.&lt;/LI&gt;&lt;LI&gt;The operation is set to Query (GET) for the order details&lt;/LI&gt;&lt;LI&gt;Entity – Orders, we must select the fields what we needed according to requirement. I have selected all the fields.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_6-1750723478806.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277867i894A864AD5137D47/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_6-1750723478806.png" alt="Rishikasairi_6-1750723478806.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_7-1750723478811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277866iAA63AC303C726329/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_7-1750723478811.png" alt="Rishikasairi_7-1750723478811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Verify the Query after selecting fields, If any changes need to be in the query we must modify in the step 3.&lt;/LI&gt;&lt;LI&gt;Click Finish.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_8-1750723478815.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277865i9E7B40AF70C74B95/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_8-1750723478815.png" alt="Rishikasairi_8-1750723478815.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Mapping the Response&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Message Mapping&lt;/STRONG&gt; step to map the OData response to the final SOAP response structure.&lt;/LI&gt;&lt;LI&gt;Input: OData format.&lt;/LI&gt;&lt;LI&gt;Output: SOAP structure.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Why Is Mapping Needed?&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;OData responses are typically in JSON or XML with a different format than the SOAP response.&lt;/LI&gt;&lt;LI&gt;Mapping helps &lt;STRONG&gt;reshape&lt;/STRONG&gt; this data into the required SOAP structure.&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;After the SOAP request is received, the &lt;STRONG&gt;OData call&lt;/STRONG&gt; fetches additional data (e.g., &lt;STRONG&gt;shipment date&lt;/STRONG&gt;) related to the order.&lt;/LI&gt;&lt;LI&gt;The final SOAP response must follow a specific &lt;STRONG&gt;schema or structure&lt;/STRONG&gt; defined by the SOAP service (WSDL/XSD).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_9-1750723478821.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277868iCAC88B5B557374F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_9-1750723478821.png" alt="Rishikasairi_9-1750723478821.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_10-1750723478828.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277870iCCC6447BCEEC0B6F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_10-1750723478828.png" alt="Rishikasairi_10-1750723478828.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;NOTE: Here in the mapping the 1:1 mapping are always mandatory. I have taken the reference of the names from both sides and matched them accordingly.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Add End Event&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Place an &lt;STRONG&gt;End Message&lt;/STRONG&gt; after the mapping to complete the flow.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 7:&lt;/STRONG&gt; Deploy the Integration flow and Note the URL (Needs to send to the receiver).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SOAP API EXECUTION USING SOAP UI: &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;You can download the Soap UI from here &lt;A href="https://www.soapui.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.soapui.org/&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Create a new soap project and import the necessary WSDL File&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_11-1750723478829.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277869i5203AA29D3BFCC1F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_11-1750723478829.png" alt="Rishikasairi_11-1750723478829.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_12-1750723478830.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277872iD8CE2B5C030DD0C8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_12-1750723478830.png" alt="Rishikasairi_12-1750723478830.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_13-1750723478835.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277873iC6752E9E1A10B21A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_13-1750723478835.png" alt="Rishikasairi_13-1750723478835.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_14-1750723478838.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277871iF59DF8B517F9AC3C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_14-1750723478838.png" alt="Rishikasairi_14-1750723478838.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Place the SOAP API URL in the designated place&lt;/LI&gt;&lt;LI&gt;Set the Auth to basic and give me the SOAP API tenants Integration flow service key credentials&lt;/LI&gt;&lt;LI&gt;Send the request by tapping the play symbol along with filling the OrderNumber to be 10250[My reference].&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;SOAP Receiver Adapter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In this, we'll walk through designing an iFlow where a client sends an HTTPS request (in JSON), and the integration flow:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Converts it to XML,&lt;/LI&gt;&lt;LI&gt;Maps the data,&lt;/LI&gt;&lt;LI&gt;Sends it to a SOAP backend via &lt;STRONG&gt;SOAP Receiver Adapter&lt;/STRONG&gt;,&lt;/LI&gt;&lt;LI&gt;And returns the response.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;RESONS FOR SECOND IFLOW&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;We are consuming the SOAP Service that is in the first integration flow like exploring the SOAP Receiver Adapter&lt;/LI&gt;&lt;LI&gt;Instead of using the SOAP UI for sending the request we are using the REST API thorough HTTP to consume the Soap API Service.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;Use Case Overview&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;An external application (HTTPS client) sends a &lt;STRONG&gt;JSON request&lt;/STRONG&gt;. The iFlow:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Converts JSON to XML.&lt;/LI&gt;&lt;LI&gt;Maps the message to match the SOAP backend schema.&lt;/LI&gt;&lt;LI&gt;Sends the message to a backend system using the &lt;STRONG&gt;SOAP receiver&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Returns the backend response to the client.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step-by-Step iFlow Design&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step1: Create a New Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Go to SAP Integration Suite → Design → Create iFlow.&lt;/LI&gt;&lt;LI&gt;Name: Soap_Receiver_Adapter.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_15-1750723478843.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277874iD42BEBD439F3A6EA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_15-1750723478843.png" alt="Rishikasairi_15-1750723478843.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_16-1750723478848.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277875i7F4C9EDB88975D92/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_16-1750723478848.png" alt="Rishikasairi_16-1750723478848.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Configure HTTPS Sender&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;HTTPS&lt;/STRONG&gt; sender adapter.&lt;/LI&gt;&lt;LI&gt;Configure the &lt;STRONG&gt;Address&lt;/STRONG&gt; (e.g., /Receiveradapterr).&lt;/LI&gt;&lt;LI&gt;Authorization- UserRole&amp;gt;ESBMessaging.send&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_17-1750723478852.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277876i20D96C70FC9DF135/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_17-1750723478852.png" alt="Rishikasairi_17-1750723478852.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Convert JSON to XML&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Use a &lt;STRONG&gt;JSON to XML Converter&lt;/STRONG&gt; step.&lt;/LI&gt;&lt;LI&gt;This is required because SOAP backends typically consume &lt;STRONG&gt;XML&lt;/STRONG&gt;, not JSON.&amp;nbsp;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_18-1750723478854.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277877i200F93A121B0361B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_18-1750723478854.png" alt="Rishikasairi_18-1750723478854.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Message Mapping&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Add a Message Mapping step to convert incoming XML structure to the format expected by the SOAP backend.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_19-1750723478857.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277878i45CA6DDE44A2FBF2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_19-1750723478857.png" alt="Rishikasairi_19-1750723478857.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Source: Accepts XSD. Convert the xml payload that you have sent in postman.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Simulation&lt;/STRONG&gt;&lt;STRONG&gt;: &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The sample payload in this case is&lt;BR /&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&amp;lt;root&amp;gt;&lt;SPAN&gt;&amp;lt;productIdentifier&amp;gt;HT-2000&amp;lt;/productIdentifier&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/root&amp;gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;This is the XML file that is used after adding the root element to the payload that you are sending through the postman&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_20-1750723478862.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277879i755AB7EB19272E7B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_20-1750723478862.png" alt="Rishikasairi_20-1750723478862.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Connection Details:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Address:&lt;/STRONG&gt; The service endpoint URL is: &lt;A href="https://5b61c35atrial-it-cpitrial05-rt.cfapps.us10-001.hana.ondemand.com/cxf/SoapUIdemo" target="_blank" rel="noopener nofollow noreferrer"&gt;https://5b61c35atrial-it-cpitrial05-rt.cfapps.us10-001.hana.ondemand.com/cxf/SoapUIdemo&lt;/A&gt;&lt;BR /&gt;This is the actual URL where the SOAP request will be sent(from the sender).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Proxy Type:&lt;/STRONG&gt;&lt;BR /&gt;Set to Internet, which means the connection is routed through the CPI internet proxy.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;URL to WSDL:&lt;/STRONG&gt;&lt;BR /&gt;/wsdl/GetOrderShipmentDetails.wsdl&lt;BR /&gt;This is the relative path to the WSDL file used to define the SOAP service.&lt;/LI&gt;&lt;LI&gt;Service, Endpoint, and Operation Name:&lt;BR /&gt;These are parsed from the WSDL:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Service: p1:GetOrderShipDetailsService&lt;/LI&gt;&lt;LI&gt;Endpoint: p1:GetOrderShipDetailsServiceSoap&lt;/LI&gt;&lt;LI&gt;Operation Name: p1:GetOrderShipmentDetails&lt;BR /&gt;This operation will be triggered when the message is sent.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication:&lt;/STRONG&gt;&lt;BR /&gt;Set to Basic with the Credential Name as Servicekey.&lt;BR /&gt;CPI will look up a credential entry with this name (maintained in the Security Material) and use its username/password.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Timeout (in ms):&lt;/STRONG&gt;&lt;BR /&gt;Set to 60000, meaning the integration flow will wait up to 60 seconds for a response.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Keep-Alive:&lt;/STRONG&gt;&lt;BR /&gt;Enabled. This allows the connection to be reused, improving performance on multiple requests.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_21-1750723478865.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277880i7122451918737F45/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_21-1750723478865.png" alt="Rishikasairi_21-1750723478865.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;WS-Security Configuration (SOAP Receiver Adapter)&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;None – No WS-Security headers added. Use when not required by the service.&lt;/LI&gt;&lt;LI&gt;Based on Policies in WSDL – Auto-applies security from WSDL-defined policies.&lt;/LI&gt;&lt;LI&gt;Via Manual Configuration in Channel – Add custom WS-Security headers manually (e.g., UsernameToken, Signature).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Use based on target service’s security needs.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Deploy the Integration Flow and monitor it in the Trace mode.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Trigger the HTTP endpoint with the appropriate payload using postman and generate token using service key from integration flow instance. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_28-1750724205302.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277884i7DA132B9045CE667/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_28-1750724205302.png" alt="Rishikasairi_28-1750724205302.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_29-1750724279148.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277886i35B4C060F704580E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_29-1750724279148.png" alt="Rishikasairi_29-1750724279148.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Rishikasairi_30-1750724290075.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277887i32A8E1B2B9F22857/image-size/large?v=v2&amp;amp;px=999" role="button" title="Rishikasairi_30-1750724290075.png" alt="Rishikasairi_30-1750724290075.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt;&lt;BR /&gt;All the views and opinions in this blog are my own and are made in my personal capacity. SAP shall not be responsible or liable for any of the contents published in this blog.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-soap-sender-amp-receiver-adapters-your-integration-game-changers/ba-p/14134755"/>
    <published>2025-06-24T10:55:52.351000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-connect-a-third-party-application-to-sap-cpi-using-apis-and-access/ba-p/14136667</id>
    <title>How to Connect a Third-Party Application to SAP CPI Using APIs and  Access Token – A GreytHR Example</title>
    <updated>2025-06-26T09:37:25.001000+02:00</updated>
    <author>
      <name>D_Simon</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1666556</uri>
    </author>
    <content>&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction&lt;/STRONG&gt;&lt;BR /&gt;In modern integration scenarios, many third-party applications expose APIs to exchange data. SAP&lt;BR /&gt;Integration Suite (CPI) allows us to consume these APIs easily, even when token-based authentication is&lt;BR /&gt;required.&lt;BR /&gt;In this blog, I’ll walk you through how I integrated the GreytHR HRMS application with SAP using API&lt;BR /&gt;endpoints and access tokens. We'll fetch employee master data using a secure, token-based flow.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;Topics Covered&lt;/STRONG&gt;&lt;BR /&gt;• What is an API First Approach?&lt;BR /&gt;• What are APIs?&lt;BR /&gt;• Types of APIs.&lt;BR /&gt;• using API How to connect third party Applications.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;•&amp;nbsp; What is an API First Approach?&lt;BR /&gt;&lt;/STRONG&gt;The API First Approach is an approach to software design that focuses on the API to create applications that can be easily connected to each other. API First creates ecosystems of applications that are modular, reusable, and extensible, just like Lego bricks.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;An API First Approach means that your APIs are treated as first class citizens. Everything revolves around the end product being used by mobile devices and client applications. An API First approach involves developing APIs that are consistent and reusable. This is achieved by using an API description language.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_0-1750852143080.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278639i706B7D116EDD10C7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Diddela_0-1750852143080.png" alt="Diddela_0-1750852143080.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The graphic shows an example of API First Approach. Information is provided in the following text.&lt;BR /&gt;Explanation:&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;API Provider :&lt;BR /&gt;An API provider provides an interface with technical features (No. 1). Symbolically, this is shown in this picture with the ball- or lollipop notation. This interface can be consumed by a service (No. 5). There presentation corresponds to the socket notation (No. 2). The service acts in the role of the API consumer.&lt;BR /&gt;&lt;BR /&gt;API Consumer :&lt;BR /&gt;The API consumer requires an interface (No. 3). The representation corresponds to the socket notation (No. 4). In this case, the API provider is the service (No. 5). The presentation is again made with the ball-or lollipop notation.&lt;/P&gt;&lt;P&gt;Find More Information at:&lt;BR /&gt;Understanding the API-First Approach to Building Products.&lt;BR /&gt;It is not Cloud first or API first but Strategy first. API Management Strategy in Mult iCloud Environments | SAP Blogs.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;• What are APIs?&lt;/STRONG&gt;&lt;BR /&gt;API stands for Application Programming Interface. An API specifies the operations as well as inputs and outputs of a software component. It defines functionalities that are independent of their respective implementations, so that these implementations can vary without affecting the user of the API.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;• Types of APIs.&lt;BR /&gt;&lt;/STRONG&gt;In the literature, there are many overviews of different types of APIs. Below is a simple overview of the APIs that we must understand for this course.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_1-1750852584020.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278642iEFCF98BB65766A2F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_1-1750852584020.png" alt="Diddela_1-1750852584020.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The graphic shows an overview of APIs. Information is provided in the following text.&lt;BR /&gt;Here, four different APIs are defined under the superset of APIs, based on their use.&lt;BR /&gt;Databased APIs These are intended for file exchange between systems. Files can be, for example, configuration files.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;Object-orientated APIs&lt;BR /&gt;These are used in object-oriented programming languages to define the communication of the classes with each other.&lt;BR /&gt;Remote APIs (No. 1)&lt;BR /&gt;This includes today's important web APIs, such as REST and SOAP APIs. REST itself is not a protocol but a software architectural style.&lt;BR /&gt;Messaging APIs (No. 2)&lt;BR /&gt;•&amp;nbsp; These are asynchronous APIs that send events based on events. These are used in Event Driven&lt;BR /&gt;architectures.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;• using API How to connect Third party Applications.&lt;BR /&gt;&lt;/STRONG&gt;I am trying to connect the GreytHR application to SAP CPI using APIs.&lt;BR /&gt;Step-1&lt;BR /&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Step 1: Create API in GreytHR&lt;BR /&gt;• Log into your GreytHR portal&lt;BR /&gt;• Navigate to the API Management section&lt;BR /&gt;• Click Create API&lt;BR /&gt;• Provide:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_2-1750852950587.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278643iE68861BCD39BC8A0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_2-1750852950587.png" alt="Diddela_2-1750852950587.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;• API Name&lt;BR /&gt;• Role access (select “All Roles”)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_3-1750853015275.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278644iB747610FC8CE400F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_3-1750853015275.png" alt="Diddela_3-1750853015275.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Click on Next Save the generated Username and Password&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_4-1750853067855.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278645iA5A9E40F429700B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_4-1750853067855.png" alt="Diddela_4-1750853067855.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Step 2: Store Credentials in CPI&lt;BR /&gt;• In SAP Integration Suite, go to:&lt;BR /&gt;• Monitoring → Manage Security → Security Material&lt;BR /&gt;• Create a User Credential&lt;BR /&gt;• Enter the username and password received from GREYTHR&lt;BR /&gt;• Name it: GREYTHR_CREDENTIALS&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_5-1750853185294.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278652i20E5D9E78DC91540/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_5-1750853185294.png" alt="Diddela_5-1750853185294.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Step 3: Create Access Token Flow in CPI&lt;BR /&gt;• Open your design workspace and create a new Integration Flow&lt;BR /&gt;• Use a Timer as the start event (for scheduled execution)&lt;BR /&gt;• Add a Request-Reply block&lt;BR /&gt;• Use an HTTP Adapter with:&lt;BR /&gt;• Method: POST&lt;BR /&gt;• URL: GreytHR’s Access Token Endpoint&lt;BR /&gt;• Authentication: use GREYTHR_CREDENTIALS&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_6-1750853264876.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278654i0802C0D440D96B6E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_6-1750853264876.png" alt="Diddela_6-1750853264876.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Step 4: Convert JSON to XML (if necessary) and Store Access Token&lt;BR /&gt;If the response is in JSON format (which is common for most token APIs):&lt;BR /&gt;• Add a JSON to XML Converter immediately after the Request-Reply step&lt;BR /&gt;• This ensures the token response can be processed in SAP CPI (which primarily works with XML)&lt;BR /&gt;If the response is already in XML format, you can skip the converter step&lt;BR /&gt;• Add a Content Modifier after the token call&lt;BR /&gt;• Extract the ACCESS_TOKEN from the response JSON&lt;BR /&gt;• Store it as a property: ${header . ACCESS_TOKEN}&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_7-1750853359318.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278655iB276A721756189E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_7-1750853359318.png" alt="Diddela_7-1750853359318.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Step 5: Call GreytHR API to Fetch Data&lt;BR /&gt;• Add another Request-Reply block&lt;BR /&gt;• HTTP Adapter configuration:&lt;BR /&gt;• Method: GET or POST&lt;BR /&gt;• URL: GREYTHR API endpoint for employee data&lt;BR /&gt;• Authorization: Bearer ${header. ACCESS_TOKEN}&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Diddela_8-1750853546074.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278658i7D89B3359FDA2BC2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Diddela_8-1750853546074.png" alt="Diddela_8-1750853546074.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Deploy the iFlow&lt;BR /&gt;• If successful, you’ll receive employee master data from GREYTHR!&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;&amp;nbsp;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;BR /&gt;• Using APIs and token-based authentication, SAP CPI can securely connect to third-party systems&lt;BR /&gt;like GreytHR. This approach is:&lt;BR /&gt;• Scalable&lt;BR /&gt;• Reusable&lt;BR /&gt;• Suitable for any modern integration scenario&lt;BR /&gt;The same logic can be extended to tools like Salesforce, Zoho, or OpenWeatherMap.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-connect-a-third-party-application-to-sap-cpi-using-apis-and-access/ba-p/14136667"/>
    <published>2025-06-26T09:37:25.001000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/timer-and-trigger-based-sap-cpi-integration/ba-p/14133456</id>
    <title>Timer and Trigger based SAP CPI Integration</title>
    <updated>2025-06-26T09:47:02.425000+02:00</updated>
    <author>
      <name>RameshVaranganti</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/51927</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In this blog post, we’ll explore how to design a single CPI interface that will work with scheduled based and also on demand trigger based.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Business Scenario&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In most SuccessFactors integrations, we often need to schedule interfaces based on a timer. These interfaces read messages from SuccessFactors using the last modified date timestamp and process the data to target applications. Once the data is sent to the target application, we update the last modified date and store it in a variable. During the next run, the interface reads data based on the timestamp and processes the records.&lt;/P&gt;&lt;P&gt;We design the interface to avoid updating the timestamp if any errors occur. For example:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If the target application is down or there are connection issues.&lt;/LI&gt;&lt;LI&gt;If mandatory data is missing for some cases.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;This approach works well if the target application processes all records as a single message. However, there are situations where we need to read all employee data during a specific time interval and process each employee's data individually employee by employee. In the Splitter:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If we enable &lt;EM&gt;stop on exception&lt;/EM&gt; it will halt all record processing.&lt;/LI&gt;&lt;LI&gt;If we do not enable &lt;EM&gt;stop on exception &lt;/EM&gt;we might miss processing some records.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For example, if we apply a last modified date query to employment data and encounter an issue, we can correct it, and the next run will process the modified data.&lt;/P&gt;&lt;P&gt;In another case, if we navigate to emergency contact data from the employment portlet and apply the last modified date query on employment data, any error in the emergency contact data will prevent the record from being processed to the target. Even after updating the emergency contact, it will not process because the query's last modified date is based on employment and not on emergency contact. To handle this, we can create another integration process with a trigger-based approach in the same iFlow to query and retrieve the data, then process it from the local integration. With this trigger we can manually run the integration by passing the employee id.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Solution Architecture&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="TriggerSchedule.drawio.svg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277226i91E20CFBFBAAC9D2/image-size/large?v=v2&amp;amp;px=999" role="button" title="TriggerSchedule.drawio.svg" alt="TriggerSchedule.drawio.svg" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SAP CPI Development&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_0-1750432910304.png" style="width: 930px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277228i402EEA64B87345E8/image-dimensions/930x600?v=v2" width="930" height="600" role="button" title="RameshVaranganti_0-1750432910304.png" alt="RameshVaranganti_0-1750432910304.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In the above SAP CPI screenshot we have two integration Process&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Time Based Integration: This will execute based on the pre-defined time interval Steps are below explained&lt;UL&gt;&lt;LI&gt;Content Modifier for Schedule Query: This one will be used to read time stamp and also scheduled query to pass in next step.&lt;/LI&gt;&lt;LI&gt;Local Integration Process: This one will be main local integration process, based on the query received, it will call SF and do mapping and send details to the target application.&lt;/LI&gt;&lt;LI&gt;Write Time stamp in the variable. This will store last modified date to process in next run.&lt;/LI&gt;&lt;LI&gt;Application Id, this is optional , used for additional monitoring to know from and last modified date.&lt;/LI&gt;&lt;LI&gt;Below is Externalized Content Modifier&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_2-1750433794997.png" style="width: 1134px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277233i8F9A3D07F53735D5/image-dimensions/1134x54?v=v2" width="1134" height="54" role="button" title="RameshVaranganti_2-1750433794997.png" alt="RameshVaranganti_2-1750433794997.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Trigger Based Integration: This will have HTTP sender and it is trigger based. An Ad-Hoc basic, team will call this end point. We can use this in some UI and give it to business to run themselves&lt;UL&gt;&lt;LI&gt;Content Modifier for Trigger Query: This one will be used read parameters from trigger and form the query to next step.&lt;/LI&gt;&lt;LI&gt;Local Integration Process: This one will be main local integration process, based on the query received, it will call SF and do mapping and send details to the target application.&lt;/LI&gt;&lt;LI&gt;Additional logging.&lt;/LI&gt;&lt;LI&gt;Below is externalized query in Content Modifier&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_1-1750433653201.png" style="width: 839px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277232iA1E5C686EC66C393/image-dimensions/839x48?v=v2" width="839" height="48" role="button" title="RameshVaranganti_1-1750433653201.png" alt="RameshVaranganti_1-1750433653201.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Once iflow deployed it will looks like below&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Trigger endpoint URL&lt;/LI&gt;&lt;LI&gt;Timer execution for schedule.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RameshVaranganti_0-1750445986913.png" style="width: 849px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277252iC5DCD199A68E986A/image-dimensions/849x330?v=v2" width="849" height="330" role="button" title="RameshVaranganti_0-1750445986913.png" alt="RameshVaranganti_0-1750445986913.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Testing&lt;/P&gt;&lt;P&gt;Schedule Run&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_1-1750446194110.png" style="width: 640px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277254iFAA2CC863621A32E/image-dimensions/640x256?v=v2" width="640" height="256" role="button" title="RameshVaranganti_1-1750446194110.png" alt="RameshVaranganti_1-1750446194110.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;In the Timer I have used Application message id to know the time interval.&lt;/P&gt;&lt;P&gt;Trigger Run&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;postman for trigger&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_2-1750446347574.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277256i215770563BF21770/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RameshVaranganti_2-1750446347574.png" alt="RameshVaranganti_2-1750446347574.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;Monitoring&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_3-1750446594226.png" style="width: 507px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277257i3568E967ED2325B7/image-dimensions/507x232?v=v2" width="507" height="232" role="button" title="RameshVaranganti_3-1750446594226.png" alt="RameshVaranganti_3-1750446594226.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Note in the Trigger content modifier I have used&amp;nbsp;${header.SapAuthenticatedUserName} to know who triggered iflow.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="RameshVaranganti_4-1750446690964.png" style="width: 669px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277258i31D702D860C2E354/image-dimensions/669x87?v=v2" width="669" height="87" role="button" title="RameshVaranganti_4-1750446690964.png" alt="RameshVaranganti_4-1750446690964.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;We can design SAP CPI ilfows to work with&amp;nbsp; both Timer based and also trigger based approaches. Depending on the requirements we can modify these as needed. Additionally,&amp;nbsp; we can provide a trigger endpoint to API or UI application for business team use.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Integration+Suite/pd-p/73554900100800003241" class="lia-product-mention" data-product="23-1"&gt;SAP Integration Suite&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/API+Management/pd-p/67838200100800006828" class="lia-product-mention" data-product="358-1"&gt;API Management&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+SuccessFactors+Platform/pd-p/73555000100800000775" class="lia-product-mention" data-product="171-1"&gt;SAP SuccessFactors Platform&lt;/a&gt;&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/timer-and-trigger-based-sap-cpi-integration/ba-p/14133456"/>
    <published>2025-06-26T09:47:02.425000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/using-trading-partner-management-with-ai/ba-p/14139457</id>
    <title>Using Trading Partner Management with AI</title>
    <updated>2025-07-02T13:53:34.118000+02:00</updated>
    <author>
      <name>1nbuc</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1669029</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1733397986"&gt;Extending AI Capabilities: Diving Deeper with the MCP Trading Partner Management Server&lt;/H2&gt;&lt;P&gt;Following up on my previous article, "&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/using-integration-suite-with-the-power-of-ai/ba-p/14067293" target="_blank"&gt;Using Integration Suite with the Power of AI&lt;/A&gt;," where I showcased how to extend Integration Suite development with AI and the ModelContextProtocol (MCP), I'm excited to introduce a specialized enhancement: the **MCP Trading Partner Management (TPM) Server**.&lt;/P&gt;&lt;P&gt;While the initial MCP Integration Suite Server provides broad tools for general CPI functions like Integration Flows and Message Mappings, many enterprise integration scenarios heavily rely on managing B2B relationships. This new server is purpose-built to give AI chat clients direct access to and control over the rich capabilities of SAP Integration Suite's Trading Partner Management. It makes sense to install both servers together to have access to both tools combined.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1536884481"&gt;What Can You Do With It? A Comprehensive Toolset&lt;/H2&gt;&lt;P&gt;The MCP Trading Partner Management Server empowers AI assistants with a wide array of tools to manage your B2B integration aspects. Here's an overview of its core capabilities:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Trading Partner Management&lt;/STRONG&gt;: Create, retrieve, and manage trading partners, their systems, identifiers, communication channels, and even signature verification configurations.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Agreement Management&lt;/STRONG&gt;: Work with B2B agreements, including creation from templates, retrieving details, and managing their associated technical B2B scenarios and deployments.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Implementation Guideline (MIG) Management&lt;/STRONG&gt;: Access and manipulate MIGs, including inspecting nodes and fields, applying proposals, and creating new MIG drafts.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Mapping Guideline (MAG) Management&lt;/STRONG&gt;: Create mapping guidelines and test them with example data&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Monitoring&lt;/STRONG&gt;: Search for interchanges, retrieve payload data, download specific payloads, and access error details for TPM message monitoring.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Other Utilities&lt;/STRONG&gt;: Get details on type systems, messages within them, create custom messages, and retrieve master data like business process roles, countries, and product classifications.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1340370976"&gt;Setup and Configuration&lt;/H2&gt;&lt;P&gt;As with the previous server, I highly recommend using this tool with &lt;A href="https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev" target="_blank" rel="noopener nofollow noreferrer"&gt;Cline&lt;/A&gt;, the VSCode extension, or any other MCP-compatible client.&lt;/P&gt;&lt;P&gt;This server requires **Java (version 17 or higher)** and **Gradle (version 8 or higher)** to be installed on your machine. Once you have these prerequisites, get started by cloning the project and building it:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;git clone https://github.com/1nbuc/mcp-is-tpm.git
cd mcp-is-tpm
./gradlew build&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next, you'll need to add the MCP Trading Partner Management Server to your AI Client's MCP configuration. This is typically done alongside your existing `mcp-is` configuration to provide the full spectrum of tools. The `env` variables below should be configured with your SAP Integration Suite URL and user credentials.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note on Credentials:&lt;/STRONG&gt; If your S or P user is associated with a Universal ID, ensure you provide your Universal ID password and email (`CPI_UNIVERSAL_MAIL`). If you have a standalone S-User, simply omit the `CPI_UNIVERSAL_MAIL` variable.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "mcpServers": {
    "mcp-is": {
      "command": "node",
      "args": [
        "&amp;lt;project path for mcp-integration-suite&amp;gt;/dist/index.js"
      ],
      "autoApprove": []
    },
    "mcp-is-tpm": {
      "command": "java",
      "args": [
        "-Dlogging.pattern.console=",
        "-Dspring.main.web-application-type=none",
        "-Dspring.ai.mcp.server.stdio=true",
        "-jar",
        "&amp;lt;project path for mcp-is-tpm&amp;gt;/app/build/libs/app-0.0.1-SNAPSHOT.jar"
      ],
      "autoApprove": [],
      "env": {
        "CPI_URL": "https://your.cpi.url.hana.ondemand.com",
        "CPI_USER": "S001234567",
        "CPI_PASSWORD": "myPass123",
        "CPI_UNIVERSAL_MAIL": "mail@company.de"
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Remember to replace `&amp;lt;project path for mcp-integration-suite&amp;gt;` and `&amp;lt;project path for mcp-is-tpm&amp;gt;` with the actual local paths to your cloned repositories.&lt;/P&gt;&lt;P&gt;For optimal interaction and to guide the AI effectively, I highly recommend starting each chat session with a &lt;A href="https://github.com/1nbuc/mcp-integration-suite?tab=readme-ov-file#custom-prompt" target="_blank" rel="noopener nofollow noreferrer"&gt;custom prompt&lt;/A&gt;, similar to the approach outlined in my previous blog post.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1143857471"&gt;What Can You Actually Do With It? (Conceptual Examples)&lt;/H2&gt;&lt;P&gt;With the comprehensive toolset provided by the MCP Trading Partner Management Server, you can instruct your AI assistant to handle intricate TPM tasks. Here are a few conceptual examples:&lt;/P&gt;&lt;H4 id="toc-hId-1205509404"&gt;Example 1: Create new Partners and Communication with them&lt;/H4&gt;&lt;P&gt;&lt;EM&gt;You are a fishing shop with SAP ERP and SAP Integration suite &lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Here is a list of trading partners, look if they exist already otherwise create them.&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Rod Supplier rody&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Fishermans port LLC&lt;/EM&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;EM&gt;Here is a list of transactions I do with partners. For every partnertransaction find a suitable Agreement template and create an agreement based on it.&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;All partners use AS2. If there is no fitting System with communication please create it. Deploy the agreements afterwards&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Send orders D01B to rody&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Receive D01B invoices from rody&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;Send TRADACOMS invoices to fishermans port&lt;/EM&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;This could also be done if a list of 100+ User is provided e.g. if you would have an excel sheet with some partners and want to save time by not having to click create such many times.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1008995899"&gt;Example 2: Analyzing an Existing Trading Partner Configuration&lt;/H4&gt;&lt;P&gt;&lt;EM&gt;"Get details about Partner XY and list all their configured systems and communication channels."&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This is also usefull for summerizing or finding stuff.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;"Find all Partners that use a SOAP Channel"&lt;/EM&gt;&lt;/P&gt;&lt;H4 id="toc-hId-812482394"&gt;Example 3: Creating a New MIG for an Inbound PO&lt;/H4&gt;&lt;P&gt;&lt;EM&gt;"Create a new Message Implementation Guideline for an inbound Purchase Order (PO) based on the EDIFACT D.96A standard. Then, get the proposal and select all fields which have over 50% probability."&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This highlights the ability to automate the creation of structured message guidelines, which are foundational for B2B document exchange.&lt;/P&gt;&lt;H4 id="toc-hId-615968889"&gt;Example 4: Troubleshooting an Inbound B2B Message&lt;/H4&gt;&lt;P&gt;&lt;EM&gt;"Search for all interchanges with errors in the last day from partner 'XYSolutions'. For the latest error message, get the interchange payloads and identify the root cause from the last error details."&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This scenario leverages the monitoring tools to quickly pinpoint and diagnose issues in B2B message processing.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;If you are interested do not hesitate to check out the&amp;nbsp;&lt;A href="https://github.com/1nbuc/mcp-is-tpm" target="_blank" rel="noopener nofollow noreferrer"&gt;project on github&lt;/A&gt; for more details. I look forward to hearing your thoughts and experiences in the comments, also let me know if you have any features or promps you would like to see! Also thanks to figaf for providing an&amp;nbsp;&lt;A href="https://github.com/figaf/tpm-api" target="_self" rel="nofollow noopener noreferrer"&gt;API&lt;/A&gt;&amp;nbsp;for lots of TPM Capabilities.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/using-trading-partner-management-with-ai/ba-p/14139457"/>
    <published>2025-07-02T13:53:34.118000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/building-blocks-of-sap-btp-integration-flows/ba-p/14141572</id>
    <title>BUILDING BLOCKS OF SAP BTP INTEGRATION FLOWS</title>
    <updated>2025-07-02T14:08:17.408000+02:00</updated>
    <author>
      <name>Vyshnavi_bandi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2106126</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1603185161" id="toc-hId-1605001478"&gt;&lt;STRONG&gt;What is an Integration Flow?&lt;/STRONG&gt;&lt;/H1&gt;&lt;DIV&gt;An Integration Flow is a visual model and runtime artifact that defines how messages are routed, transformed, and processed between two or more systems within SAP Cloud Integration.&lt;/DIV&gt;&lt;DIV class="lia-align-left" style="text-align : left;"&gt;* It can also be known as (CPI) Cloud Platform Integration.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;It is designed in SAP Web UI and can include logic, routing conditions, transformations, and various adapters.&lt;/DIV&gt;&lt;DIV&gt;Now let's have a look on Core Elements of an Integration Flow:&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;U&gt;&lt;STRONG&gt;1. The Starting Point: Sender Adapter&lt;/STRONG&gt;&lt;/U&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;In an integration flow, the Sender Adapter is where your journey starts. It's the "ear" that listens for incoming messages from your source system.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* What it does:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;It connects to your source system (could be SAP ECC, S/4HANA, a third-party application, or even a file server) and receives the data.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;A post office waiting for you to drop off a letter. It knows how to receive mail from different places (HTTP, SFTP, SOAP, IDoc, OData etc.).&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;STRONG&gt;&lt;U&gt;2. The Heart of the Flow: Integration Process&lt;/U&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;Once the message is received, it enters the Integration Process. This is where the magic happens – the actual steps your data takes to get from point A to point B, with all the necessary transformations and logic.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;*Types of Integration Process:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;a) Main Integration Process:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;The central logic container.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&lt;EM&gt;b) Local Integration Process:&lt;/EM&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Reusable subprocess within the iFlow.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&lt;EM&gt;c) Exception Subprocess:&lt;/EM&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Handles exceptions, errors, or retries.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;if a target system is down.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* What it does:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;This is where you define the sequence of operations. It's like the "workflow" of your data. You'll see things like mapping data, applying conditions, splitting messages, and more here.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;The journey of your letter inside the post office. It gets sorted, stamped, maybe combined with other letters, and prepared for its next destination.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;STRONG&gt;&lt;U&gt;3. The Connectors &amp;amp; Transformers: Pallet Steps&lt;/U&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;Within the Integration Process, you'll use various "steps" from the palette. These are your tools to manipulate and route the message. Here are some major categories of Message Flow Steps:&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&lt;EM&gt;* Message Mapping:&lt;/EM&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Performs graphical or script-based transformation between source and target data structures. we can say, it is where you translate the data format from your source system to the target system's expected format.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Translating a message from English to German so the receiver understands it.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;* Content Modifier:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Used to set or modify message headers, properties, and payload elements. In our words, when we need to add a fixed value, remove a field, or build a new piece of data? This step is our go-to.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;Adding a return address label to your letter or crossing out an old address.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&lt;EM&gt;* Router:&lt;/EM&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Implements conditional logic to route messages based on content or properties (XPaths, expressions, etc.).&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT size="2"&gt;&amp;nbsp;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;A railway switch, directing a train to one track or another based on its destination.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;* Filter:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Stops a message based on certain conditions. This step lets you filter out unwanted data.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Tossing out junk mail and only keeping the important letters.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;* Aggregator:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Combine multiple messages into a single, larger message. Useful for batch processing.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;* Think of it like:&lt;/FONT&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Bundling several small letters into one big package.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;* Splitter:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Vice-versa of an Aggregator! Take one large message and break it down into multiple smaller ones.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;Opening a large package and distributing its individual contents.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;*Script Step:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Executes Groovy or JavaScript to handle custom logic.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;FONT size="2"&gt;* Think of it like:&lt;/FONT&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;dynamic endpoint URL construction.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;*Transformation Elements:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT color="#333333"&gt;&amp;nbsp;&lt;STRONG&gt;&lt;EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;a. XSLT Mapping&lt;/EM&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;XML-based transformation – powerful but verbose.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT color="#800000"&gt;&lt;EM&gt;&lt;STRONG&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT color="#333333"&gt;b. Message Mapping (Graphical)&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Drag-and-drop style UI to map data from one schema to another.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT color="#333333"&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;&lt;STRONG&gt;c. Java/Groovy Scripts&lt;/STRONG&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;When logic is too complex for visual mapping.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;*Data Stores &amp;amp; Variables:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Data Store Operations:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Temporary message persistence.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT size="2"&gt;&amp;nbsp;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;storing failed messages.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Properties &amp;amp; Headers:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Useful for passing values dynamically between steps.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;There are many more steps, each designed for a specific purpose, but these are some of the heavy-hitters you'll encounter often.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;U&gt;&lt;STRONG&gt;4. The Destination: Receiver Adapter&lt;/STRONG&gt;&lt;/U&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;Finally, after all the processing, your message needs to reach its final destination. That's the job of the Receiver Adapter.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;EM&gt;&lt;STRONG&gt;Receiver:&lt;/STRONG&gt;&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;This is where you connect to the next system in your flow.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* What it does:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;It connects to your target system endpoint and sends the processed message.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;STRONG&gt;* Think of it like:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;The delivery person dropping off your letter at its final address. It knows how to send mail to different places.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;U&gt;&lt;STRONG&gt;5. Keeping an Eye on Things: Monitoring &amp;amp; Logging&lt;/STRONG&gt;&lt;/U&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;While not a direct "component" within the flow itself, Monitoring is absolutely critical. Once your flow is deployed, you need to be able to see if messages are flowing correctly, if there are any errors, and how long things are taking. SAP BTP Integration Suite provides excellent monitoring tools to give you this visibility like wise -&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; a) Use Log, Trace, and Audit Logs to monitor message flow.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp; b) Implement Custom Logging with Script or Content Modifier for troubleshooting.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#993300"&gt;&lt;U&gt;&lt;STRONG&gt;6. Security &amp;amp; Certificates:&lt;/STRONG&gt;&lt;/U&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;SAP Integration Suite supports Keystores, Trust Stores, OAuth 2.0, Basic Auth, and SAML for secure communication.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;EM&gt;Tip to follow:&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Keep certificates and credentials in the Security Material section—not hardcoded in iFlows.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;FONT color="#800000"&gt;&lt;STRONG&gt;&lt;U&gt;Summary:&lt;/U&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;An Integration Flow is more than just a connector between systems—it's a modular, secure, and intelligent process that allows businesses to automate and integrate operations across cloud and on-premise systems.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;Understanding these core components will give you a solid foundation for building and troubleshooting your own integration flows in SAP BTP Integration Suite. It's all about making your business systems communicate seamlessly!&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/building-blocks-of-sap-btp-integration-flows/ba-p/14141572"/>
    <published>2025-07-02T14:08:17.408000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/step-by-step-guide-how-to-set-up-sap-integration-suite-in-btp-cockpit/ba-p/14141566</id>
    <title>Step-by-Step Guide: How To Set Up SAP Integration Suite in BTP Cockpit</title>
    <updated>2025-07-02T14:09:09.015000+02:00</updated>
    <author>
      <name>Anamika25</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2148333</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Step 1: Login to SAP BTP Cockpit&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Go to&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://cockpit.hanatrial.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP BTP Cockpit&lt;/A&gt;&amp;nbsp;and log in using your SAP credentials. You will be directed to the SAP BTP Trial page—there, click on&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Go to Your Trial Account&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_0-1751366155718.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281258iC88E4ACCC25EF26B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_0-1751366155718.png" alt="Anamika25_0-1751366155718.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 2: Create a Subaccount&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Go to your&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Global Account&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, then click on&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create Subaccount&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;and select the type of Subaccount from the available options.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_1-1751366156505.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281259i8EB575564E8738E5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_1-1751366156505.png" alt="Anamika25_1-1751366156505.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the required details such as the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;name&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;(e.g., trial&lt;/SPAN&gt;&lt;SPAN&gt;), choose the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;region&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;as&amp;nbsp;&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;US East (VA)&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;, and then click the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_2-1751366157081.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281257iE65058892CB4E2AF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_2-1751366157081.png" alt="Anamika25_2-1751366157081.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_3-1751366154001.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281265iBCBE97FFBAC6E0FD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_3-1751366154001.png" alt="Anamika25_3-1751366154001.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 3: Add Entitlements for Integration Suite&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To add entitlements for the Integration Suite, go to&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Entitlements &amp;gt; Configure Entitlements&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, click on&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Add Service Plans&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, search for&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Integration Suite&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, add the required plans, and finally click&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Save&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 4: Subscribe to Integration Suite&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the Service go to Service Marketplace section, search for Integration Suite, click create.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_4-1751366154082.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281264iAC5B2D3FFB7A1A00/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_4-1751366154082.png" alt="Anamika25_4-1751366154082.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It will open the Instance and Subscription screen—here, select the service as&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Integration Suite&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;and the plan as&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;trial&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, then click the Create button.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_5-1751366156191.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281263i6FDC43A52B322C59/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_5-1751366156191.png" alt="Anamika25_5-1751366156191.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This will create a new instance for the Integration Suite.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_6-1751366154761.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281271iCA25D43FBB710FB8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_6-1751366154761.png" alt="Anamika25_6-1751366154761.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 5: Add Capabilities to Integration Suite&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After creating the instance, select the required capabilities such as Cloud Integration, API Management, Open Connectors, and Integration Advisor, then click Enable or Save to proceed.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_7-1751366156425.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281269iE0674F16F0EAE560/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_7-1751366156425.png" alt="Anamika25_7-1751366156425.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This will take around 5 minutes to process, and once it's completed, the status will show as Active—then click on the OK button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 6: Assign Roles (Important for Access)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To ensure proper access to the Integration Suite, go to&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Security &amp;gt; User and click on arrow.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_8-1751366155551.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281270i0BE5248D2E18107D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_8-1751366155551.png" alt="Anamika25_8-1751366155551.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Under Role Collections, click on Assign Role Collection.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_9-1751366154919.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281275i432580D888B49A56/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_9-1751366154919.png" alt="Anamika25_9-1751366154919.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Assign the necessary roles such as PI_Administrator, PI_ReadOnly, and more.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_10-1751366157242.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281276i994230BA63096B3B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_10-1751366157242.png" alt="Anamika25_10-1751366157242.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Click on&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Assign Role Collection&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;—this will complete the setup and allow you to access the Integration Suite.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anamika25_11-1751366155393.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281277i086938CECE460BBC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Anamika25_11-1751366155393.png" alt="Anamika25_11-1751366155393.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/step-by-step-guide-how-to-set-up-sap-integration-suite-in-btp-cockpit/ba-p/14141566"/>
    <published>2025-07-02T14:09:09.015000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/comparing-two-xml-element-groups-using-xslt-a-practical-approach-for-data/ba-p/14140313</id>
    <title>Comparing Two XML Element Groups Using XSLT: A Practical Approach for Data Synchronization</title>
    <updated>2025-07-02T14:14:01.277000+02:00</updated>
    <author>
      <name>purna22</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1507330</uri>
    </author>
    <content>&lt;P&gt;This blog post walks through a common integration scenario: comparing two XML structures using&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;XSLT&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;to identify what has changed and needs to be synchronized. We'll detect&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;added&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;updated&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;elements and generate a clean&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;delta XML&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for downstream processing.&lt;/P&gt;&lt;H3 id="toc-hId-1862485629" id="toc-hId-1863135018"&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Use Case&lt;/H3&gt;&lt;P&gt;Imagine the following XML document representing two data sources:&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="purna22_1-1751280810687.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280582i8D5F5AB7A8B3A4FA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="purna22_1-1751280810687.png" alt="purna22_1-1751280810687.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;PRE&gt;We aim to compare R1 (source) and User (target) to detect:&lt;/PRE&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Fields in R1&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;missing&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in User → flagged as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ADD&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Fields in both, but with different values → flagged as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UPDATE&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Nested elements like Address are also compared deeply&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1665972124" id="toc-hId-1666621513"&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;XSLT Logic&lt;/H3&gt;&lt;P&gt;Below is the complete&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;XSLT 1.0 code&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that performs the comparison and outputs the results in a &amp;lt;Root&amp;gt;&amp;lt;R2&amp;gt; structure. This can be used in&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP Cloud Integration’s message mappings&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;PI/PO mappings&lt;/STRONG&gt;, or any tool that supports XSLT.&lt;/P&gt;&lt;H4 id="toc-hId-1598541338" id="toc-hId-1599190727"&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Full XSLT Code&lt;/H4&gt;&lt;PRE&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;
  
  &amp;lt;xsl:output method="xml" indent="yes"/&amp;gt;

  &amp;lt;xsl:template match="/Main"&amp;gt;
    &amp;lt;Root&amp;gt;
      &amp;lt;R2&amp;gt;
        &amp;lt;xsl:variable name="r1" select="R1"/&amp;gt;
        &amp;lt;xsl:variable name="r2" select="User"/&amp;gt;

        &amp;lt;!-- Add operation: elements present in R1 but not in User --&amp;gt;
        &amp;lt;xsl:for-each select="$r1/*"&amp;gt;
          &amp;lt;xsl:variable name="name" select="name()"/&amp;gt;
          &amp;lt;xsl:if test="not($r2/*[name() = $name])"&amp;gt;
            &amp;lt;Add&amp;gt;
              &amp;lt;operation&amp;gt;ADD&amp;lt;/operation&amp;gt;
              &amp;lt;xsl:copy-of select="."/&amp;gt;
            &amp;lt;/Add&amp;gt;
          &amp;lt;/xsl:if&amp;gt;
        &amp;lt;/xsl:for-each&amp;gt;

        &amp;lt;!-- Update operation --&amp;gt;
        &amp;lt;xsl:for-each select="$r1/*"&amp;gt;
          &amp;lt;xsl:variable name="name" select="name()"/&amp;gt;
          &amp;lt;xsl:variable name="r1node" select="."/&amp;gt;
          &amp;lt;xsl:variable name="r2node" select="$r2/*[name() = $name]"/&amp;gt;

          &amp;lt;!-- Direct value changes (non-nested) --&amp;gt;
          &amp;lt;xsl:if test="$r2node and not($r1node/*) and normalize-space($r1node) != normalize-space($r2node)"&amp;gt;
            &amp;lt;update&amp;gt;
              &amp;lt;operation&amp;gt;Update&amp;lt;/operation&amp;gt;
              &amp;lt;xsl:copy-of select="$r1node"/&amp;gt;
            &amp;lt;/update&amp;gt;
          &amp;lt;/xsl:if&amp;gt;

          &amp;lt;!-- Nested structure comparison --&amp;gt;
          &amp;lt;xsl:if test="$r1node/* and $r2node/*"&amp;gt;
            &amp;lt;xsl:variable name="hasDifference"&amp;gt;
              &amp;lt;xsl:for-each select="$r1node/*"&amp;gt;
                &amp;lt;xsl:variable name="subname" select="name()"/&amp;gt;
                &amp;lt;xsl:variable name="r1sub" select="."/&amp;gt;
                &amp;lt;xsl:variable name="r2sub" select="$r2node/*[name() = $subname]"/&amp;gt;
                &amp;lt;xsl:if test="normalize-space($r1sub) != normalize-space($r2sub)"&amp;gt;
                  &amp;lt;xsl:text&amp;gt;yes&amp;lt;/xsl:text&amp;gt;
                &amp;lt;/xsl:if&amp;gt;
              &amp;lt;/xsl:for-each&amp;gt;
            &amp;lt;/xsl:variable&amp;gt;
            &amp;lt;xsl:if test="contains($hasDifference, 'yes')"&amp;gt;
              &amp;lt;update&amp;gt;
                &amp;lt;operation&amp;gt;Update&amp;lt;/operation&amp;gt;
                &amp;lt;xsl:copy-of select="$r1node"/&amp;gt;
              &amp;lt;/update&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/xsl:if&amp;gt;
        &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/R2&amp;gt;
    &amp;lt;/Root&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;&lt;/PRE&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1272945114" id="toc-hId-1273594503"&gt;🧾 Sample Output&lt;/H3&gt;&lt;P&gt;With the above input and XSLT, the result is:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="purna22_4-1751280810760.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280584i7761C88D1B30248A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="purna22_4-1751280810760.png" alt="purna22_4-1751280810760.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This output structure is ideal for triggering update APIs, generating change logs, or sending notification messages.&lt;BR /&gt;&lt;BR /&gt;If you're working with XML transformations in&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP Cloud Integration (CPI)&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and need to identify differences between nested XML structures, this XSLT-based approach can save you hours of manual comparison and debugging.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Have you encountered similar scenarios in CPI where comparing XML payloads was necessary? Share your solutions, questions, or challenges in the comments—let’s learn from each other!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/comparing-two-xml-element-groups-using-xslt-a-practical-approach-for-data/ba-p/14140313"/>
    <published>2025-07-02T14:14:01.277000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448</id>
    <title>General Data Splitter Tool for Optimized Efficient Data Processing and Scalable Integration</title>
    <updated>2025-07-02T14:22:03.206000+02:00</updated>
    <author>
      <name>ManaswiniPuli</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1940178</uri>
    </author>
    <content>&lt;P&gt;Struggling with handling massive data files in your integration flows? You're not alone! I'm Manaswini Puli , committed to break down complex integration challenges. In this hands-on guide, I'll walk you through using the&amp;nbsp;&lt;STRONG&gt;General Splitter tool&lt;/STRONG&gt;&amp;nbsp;in SAP Integration Suite to efficiently break down large messages into manageable segments—boosting processing speed and scalability while handling structured XML/JSON data with ease.&lt;/P&gt;&lt;P&gt;Follow along as we transform complex data streams into optimized, scalable workflows step by step. If this solves your data bottleneck challenges, I'd love to hear your thoughts in the comments.&lt;/P&gt;&lt;P&gt;Below is the complete&lt;STRONG&gt; iFlow&lt;/STRONG&gt;, featuring the use of a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; to process structured messages effectively, along with &lt;STRONG&gt;OData&lt;/STRONG&gt; integration for seamless data exchange.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_16-1750756348215.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278173iE626C00B60699642/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_16-1750756348215.png" alt="ManaswiniPuli_16-1750756348215.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1604196073"&gt;Step-by-Step Guide: General Data Splitter Tool for Optimized, Efficient Data Processing and Scalable Integration&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Access Integration Suite&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to &lt;STRONG&gt;SAP BTP Cockpit&lt;/STRONG&gt; using your registered email and password.&lt;/LI&gt;&lt;LI&gt;Go to your Subaccount and navigate to &lt;STRONG&gt;Subscriptions&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click on &lt;STRONG&gt;Integration Suite&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create a Package&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In Integration Suite, go to the &lt;STRONG&gt;Design&lt;/STRONG&gt; tab and click &lt;STRONG&gt;Packages&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create Package&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create an Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the package you created.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create&lt;/STRONG&gt;, select &lt;STRONG&gt;Integration Flow&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt; to open the editor.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Configure HTTPS Sender Adapter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_1-1750756263825.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278157i0EC4E6DDECD49BDC/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_1-1750756263825.png" alt="ManaswiniPuli_1-1750756263825.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;HTTPS sender&lt;/STRONG&gt; to receive incoming data.&lt;/LI&gt;&lt;LI&gt;Under the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Set the &lt;STRONG&gt;Address Path&lt;/STRONG&gt; to /Products/Details.&lt;/LI&gt;&lt;LI&gt;Set &lt;STRONG&gt;Authorization&lt;/STRONG&gt; to User Role.&lt;/LI&gt;&lt;LI&gt;Enter &lt;STRONG&gt;User Role&lt;/STRONG&gt;: ESBMessaging.send.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The Address Path defines the endpoint where the integration flow listens for incoming HTTPS requests, allowing external systems to send product data.&lt;/LI&gt;&lt;LI&gt;The ESBMessaging.send role ensures only authorized clients can access the endpoint.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Add General Splitter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_2-1750756263830.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278155iC925069B590AFE2B/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_2-1750756263830.png" alt="ManaswiniPuli_2-1750756263830.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. Add&amp;nbsp; a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; step after the HTTPS sender.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2.&amp;nbsp; Under the &lt;STRONG&gt;Processing tab&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Expression Type&lt;/STRONG&gt; to &lt;STRONG&gt;XPath&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;:&lt;SPAN&gt;The payload is in XML format, so setting the expression type to XPath enables precise navigation and extraction of relevant data elements.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;XPath Expression&lt;/STRONG&gt; to &lt;STRONG&gt;//productIdentifier&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: productIdentifier is the key element in the payload that uniquely identifies each product, enabling extraction and individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Grouping&lt;/STRONG&gt; to &lt;STRONG&gt;1&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Grouping controls how many split messages are processed together.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: The payload will be taking 3 product Identifiers, so the messages will be divided into 3 groups, each containing a single product Identifier for individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Add Content Modifier&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_3-1750756263836.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278158i5039FF91F5DCC591/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_3-1750756263836.png" alt="ManaswiniPuli_3-1750756263836.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Content Modifier&lt;/STRONG&gt; step after the HTTPS sender.&lt;/LI&gt;&lt;LI&gt;Go to the &lt;STRONG&gt;Message Header&lt;/STRONG&gt; section and click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Configure the header as follows:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Type&lt;/STRONG&gt;: XPath&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;: //productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;: java.lang.String&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;&lt;EM&gt;:&lt;/EM&gt; This extracts the productIdentifier value from the XML payload and stores it as a string in the message header for use in subsequent processing steps.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 7: Add OData Request-Reply&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;OData Request-Reply&lt;/STRONG&gt; step after the &lt;STRONG&gt;General Splitter&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab, configure the following:&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_4-1750756263842.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278159i1553BC749B29B9DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_4-1750756263842.png" alt="ManaswiniPuli_4-1750756263842.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Address&lt;/STRONG&gt;:&lt;A href="https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: This OData endpoint is used to retrieve product data based on the productIdentifier stored in the message header.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3.In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure the following&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_5-1750756263847.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278160i326B8121202D57A2/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_5-1750756263847.png" alt="ManaswiniPuli_5-1750756263847.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Set Operation Details&lt;/STRONG&gt; to &lt;STRONG&gt;Query (GET)&lt;/STRONG&gt; to retrieve data.&lt;BR /&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt; Using the GET query operation allows fetching specific data from the OData service efficiently based on defined query parameters.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Click Select&lt;/STRONG&gt; under &lt;STRONG&gt;Resource Path&lt;/STRONG&gt; to specify the data source:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 1: Connect to System&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_6-1750756263849.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278161i21860A4BCBC0DAF6/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_6-1750756263849.png" alt="ManaswiniPuli_6-1750756263849.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Choose &lt;STRONG&gt;Remote&lt;/STRONG&gt; as the connection source to connect to the external OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Step 2: Select Entity &amp;amp; Define Operation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_7-1750756263852.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278163i7502D56265537ACA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_7-1750756263852.png" alt="ManaswiniPuli_7-1750756263852.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;From the dropdown list, select the entity you want to query (for example, &lt;STRONG&gt;Products&lt;/STRONG&gt;).&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;After selecting the entity, specify the fields to optimize the data returned by the OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 3: Configure Filter &amp;amp; Sorting&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_8-1750756263855.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278162i56DB2BFC26951F92/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_8-1750756263855.png" alt="ManaswiniPuli_8-1750756263855.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Under &lt;STRONG&gt;Filter By&lt;/STRONG&gt;, set the filter condition:&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;productId equals ${header.productIdentifier}&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Click Finish&lt;/STRONG&gt; to complete the configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Add Gather &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_9-1750756263859.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278165iD7C0BE9EB3F7278D/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_9-1750756263859.png" alt="ManaswiniPuli_9-1750756263859.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Gather&lt;/STRONG&gt; step at the end of the flow, after the OData Request-Reply.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Incoming Format&lt;/STRONG&gt;: XML&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Aggregation Algorithm&lt;/STRONG&gt;: Combine&lt;BR /&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;:&lt;/STRONG&gt; The input messages are in XML format, and the Combine algorithm joins them into one XML message. This helps gather all individual responses into a single output.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 9: Deploy and Test Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Deploy&lt;/STRONG&gt; your integration flow from the editor.&lt;/LI&gt;&lt;LI&gt;After deployment, get the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; generated for the HTTPS sender adapter.&lt;/LI&gt;&lt;LI&gt;Open &lt;STRONG&gt;Postman&lt;/STRONG&gt; to test the integration flow.&lt;/LI&gt;&lt;LI&gt;Set the &lt;STRONG&gt;HTTP method&lt;/STRONG&gt; to &lt;STRONG&gt;POST&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Use the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; as the request URL.&lt;/LI&gt;&lt;LI&gt;Under &lt;STRONG&gt;Authorization&lt;/STRONG&gt;, select &lt;STRONG&gt;OAuth 2.0&lt;/STRONG&gt; and provide the following details from the service key created for the integration flow:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Client ID&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Client Secret&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token URL&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_17-1750756556074.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278174i70969EA3FCA5B331/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_17-1750756556074.png" alt="ManaswiniPuli_17-1750756556074.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;7.In the &lt;STRONG&gt;Body&lt;/STRONG&gt; tab, provide the XML payload or data you want to send.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;

&amp;lt;root&amp;gt;

  &amp;lt;record&amp;gt;

    &amp;lt;Products&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-2000&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1138&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1137&amp;lt;/productIdentifier

    &amp;lt;/Products&amp;gt;

  &amp;lt;/record&amp;gt;

&amp;lt;/root&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8.Send the request and verify the response.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 10: Check the Processed Output&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The input payload includes 3 productIdentifier entries.&lt;/LI&gt;&lt;LI&gt;With the General Splitter configured to group by 1, the message is split into 3 individual groups, each containing 1 product.&lt;/LI&gt;&lt;LI&gt;The following is Group 1, containing 1 productIdentifier as a result of the splitter configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_11-1750756263866.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278164i9B43F8BCD2767D5E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_11-1750756263866.png" alt="ManaswiniPuli_11-1750756263866.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-square"&gt;&lt;LI&gt;The following is&amp;nbsp; the OData response, which returns the &lt;STRONG&gt;product details&lt;/STRONG&gt; for that specific productIdentifier.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_12-1750756263873.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278169iCB80B0664EA864C0/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_12-1750756263873.png" alt="ManaswiniPuli_12-1750756263873.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;At the Gather step, these messages are reassembled into a single message that contains all 3 processed product entries.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_13-1750756263878.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278168iC873367E0AE90592/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_13-1750756263878.png" alt="ManaswiniPuli_13-1750756263878.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_14-1750756263883.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278167i0A50803457C44552/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_14-1750756263883.png" alt="ManaswiniPuli_14-1750756263883.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;All the views and opinions in this blog are my own and are made in my personal capacity. SAP shall not be responsible or liable for any of the contents published in this blog.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448"/>
    <published>2025-07-02T14:22:03.206000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/modernizing-for-a-clean-core-idoc-to-events-amp-apis-in-sap-pi-po-to/ba-p/14144273</id>
    <title>Modernizing for a Clean Core: IDoc to Events &amp; APIs in SAP PI/PO to Integration Suite Migration</title>
    <updated>2025-07-04T08:14:01.213000+02:00</updated>
    <author>
      <name>arunmaarirajha_kv</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2033343</uri>
    </author>
    <content>&lt;P&gt;Many organizations with an SAP-centric ERP landscape are embarking on business transformation journeys, moving from SAP ECC to S/4HANA. At the middleware layer, this shift is accompanied by migrating from the trusted workhorse SAP PI/PO to the more modern SAP Integration Suite. To support customers on this path, SAP continues to innovate — for example, by introducing support for pipeline approach in migration tooling, providing Clean Core modernization recommendations, and much more.&lt;/P&gt;&lt;P&gt;Today, let’s explore one specific area: IDoc-based scenarios in SAP PI/PO and their evolution in a cloud-native world.&lt;/P&gt;&lt;P&gt;IDoc has long been a reliable standard for data interchange in SAP, especially in B2B contexts. While IDocs are still supported in SAP Integration Suite via native IDOC adapter, modern cloud-native integration architectures increasingly emphasize open standards and protocols like OData, REST APIs, AMQP and so on. In line with this, SAP recommends adopting modern patterns such as events and APIs instead of IDocs, aligning with the broader&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://learning.sap.com/learning-journeys/managing-clean-core-for-sap-s-4hana-cloud/exploring-how-to-make-landscapes-core-compliant-1" target="_blank" rel="noopener noreferrer"&gt;Clean Core philosophy&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;This article demonstrates how an IDoc-based scenario in SAP PI/PO can be migrated to Integration Suite through modernization — not merely a lift-and-shift approach. While modernization may take more effort initially, it delivers long-term benefits: interoperability, cloud-native agility, future readiness to absorb SAP released innovation and upgrades. The good news? With the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://roadmaps.sap.com/board?q=idoc&amp;amp;range=FIRST-LAST#;INNO=FB43B7777CB01EEFA79DB3AABB235A78" target="_blank" rel="noopener noreferrer"&gt;Clean Core modernization recommendations for IDocs&lt;/A&gt;, released in Q2 2025, migration assessment reports now directly suggest API and event-based alternatives to achieve the same functional requirement.&lt;/P&gt;&lt;P&gt;Let’s illustrate this with an example.&lt;/P&gt;&lt;P&gt;In our SAP PI/PO system, we have an outbound IDoc interface (ADRMAS03) used to push Business Partner (BP) address changes to an external application, SAP Commerce Cloud, through REST API.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="228.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282606iBD943F56E696556C/image-size/large?v=v2&amp;amp;px=999" role="button" title="228.png" alt="228.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="229.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282608i487C6E7ADA117BE1/image-size/large?v=v2&amp;amp;px=999" role="button" title="229.png" alt="229.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When we run the scenario evaluation using&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/what-is-migration-assessment" target="_blank" rel="noopener noreferrer"&gt;Migration Assessment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;capability of Integration Suite, on this SAP PI/PO system, the report (with the new recommendations feature) suggests usage of Business Events and APIs, as modern successors to the ADRMAS03 IDoc.&lt;/P&gt;&lt;P&gt;In the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Recommendations&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;sheet of the report, we can see the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/modernization-recommendations" target="_blank" rel="noopener noreferrer"&gt;Modernization Recommendation&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;applicable for this interface, for each modernization category.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="230.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282609iD76F587095E3992C/image-size/large?v=v2&amp;amp;px=999" role="button" title="230.png" alt="230.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Further, in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;API Recommendations&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Business Event Recommendations&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;sheets, we can notice relevant APIs (SOAP, OData) and events being recommended.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="232.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282611i3B1DF45E82FBAE74/image-size/large?v=v2&amp;amp;px=999" role="button" title="232.png" alt="232.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="231.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282610iCA1858A6353A087A/image-size/large?v=v2&amp;amp;px=999" role="button" title="231.png" alt="231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;We can explore the schema (list of fields and whether its for bulk request or delta), mode (push/pull), pattern (sync/async) from&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://hub.sap.com/" target="_blank" rel="noopener noreferrer"&gt;SAP business accelerator hub&lt;/A&gt;. Selecting the right one is a combined architectural &amp;amp; functional design decision. In any case, always prioritize standard APIs and events before considering custom implementations — this is the essence of the Clean Core approach.&lt;/P&gt;&lt;P&gt;For our scenario, we use the BP Change event to receive a notification whenever an address-related attribute of a Business Partner changes in S/4HANA. The necessary backend setup in S4HANA such as outbound channel creation, bindings, etc. are completed. When a BP address change occurs, an event is triggered to SAP Event Mesh.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="233.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282612iE0B0CFA4ACF07DB9/image-size/large?v=v2&amp;amp;px=999" role="button" title="233.png" alt="233.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then, we consume this event in a Cloud Integration iFlow. Since the event payload only contains minimal details (event type and BP number), we enrich it by calling an S/4HANA OData API (as recommended in the migration assessment) to fetch detailed BP address information.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="234.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282613i459B7A5037B59316/image-size/large?v=v2&amp;amp;px=999" role="button" title="234.png" alt="234.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;From the S4HANA system, let us modify some address related attributes for a BP#.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="235.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282614iAAD78D8F4653F32E/image-size/large?v=v2&amp;amp;px=999" role="button" title="235.png" alt="235.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="236.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282615iDD0FC18818C194AC/image-size/large?v=v2&amp;amp;px=999" role="button" title="236.png" alt="236.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="237.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282616iC6EAD0422A2CD249/image-size/large?v=v2&amp;amp;px=999" role="button" title="237.png" alt="237.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Following is the OData adapter configuration. We fetch the BP number from the event payload using a content modifier and assign to exchange property, for using in the Odata call.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="241.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282617i679B4D892C470AE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="241.png" alt="241.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="242.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282618iC53D67B107F8F296/image-size/large?v=v2&amp;amp;px=999" role="button" title="242.png" alt="242.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="238.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282619i436D63A23293EB8A/image-size/large?v=v2&amp;amp;px=999" role="button" title="238.png" alt="238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Next, we transform this enriched response into the schema expected by the target application — matching the existing interface design from SAP PI/PO (screenshot below for reference).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="239.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282620iECDF09B2A2DC04BA/image-size/large?v=v2&amp;amp;px=999" role="button" title="239.png" alt="239.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="240.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282621i2E7D300D5CEF0E3A/image-size/large?v=v2&amp;amp;px=999" role="button" title="240.png" alt="240.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="243.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282622i59701734DC38E1CE/image-size/large?v=v2&amp;amp;px=999" role="button" title="243.png" alt="243.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Thus, we have modernized an idoc based SAP PI/PO interface into one that leverages modern cloud native patterns such as APIs and event, without losing the functional need. This pattern is significant given that the communication with external application is API based. IDoc usage still makes sense in certain scenarios, especially for EDI (Electronic Data Interchange) with external partners. Therefore, this type of extensive evaluation is required to ensure adoption of best-fit integration architecture.&lt;/P&gt;&lt;P&gt;The bottom line is that migration isn’t simply a lift-and-shift undertaking; it’s a strategic modernization initiative. Ultimately, thoughtful architectural decisions guided by each business scenario are key to reaping long term benefits. This is why modernization takes time — and why it’s important to start your SAP PI/PO to Integration Suite journey early, leveraging the available time to build a future-ready, clean-core integration landscape.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/modernizing-for-a-clean-core-idoc-to-events-amp-apis-in-sap-pi-po-to/ba-p/14144273"/>
    <published>2025-07-04T08:14:01.213000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/adapters-in-sap-cloud-integration-when-and-how-to-use-them/ba-p/14138566</id>
    <title>Adapters in SAP Cloud Integration: When and how to use them</title>
    <updated>2025-07-05T11:08:26.522000+02:00</updated>
    <author>
      <name>Imon12</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2106155</uri>
    </author>
    <content>&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;INTRODUCTION&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;The links that are identified as adapters in SAP Cloud Platform Integration allows the integration layer to communicate with both internal and external systems using a variety of protocols, data formats, and authentication techniques.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;APPLICATIONS OF Adapters&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;Whenever possible, use an adaptor which includes:&lt;/DIV&gt;&lt;OL&gt;&lt;LI&gt;&amp;nbsp;Two systems interact via different protocols (e.g., SOAP to HTTP).&lt;/LI&gt;&lt;LI&gt;Data is required to be sent to or received from a system.&lt;/LI&gt;&lt;LI&gt;Either synchronous (HTTP, OData) or asynchronous (IDoc, AS2) communication is utilized in the data exchange.&lt;/LI&gt;&lt;LI&gt;The system needs specific security requirements (OAuth, SAML, certificates) and formats (XML, JSON, CSV).&lt;/LI&gt;&lt;/OL&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;When to Use an Adapter and How to Apply in CPI?&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;The&lt;STRONG&gt; Hypertext Transfer Protocol&lt;/STRONG&gt; is used to receive webhook calls or establish a connection using REST APIs. To expose an endpoint, use HTTP Sender; to use an API, use HTTP Receiver. Set authentication, headers, and the method (GET/POST).&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;SOAP&lt;/STRONG&gt; when utilising WSDL-based SOAP web services. Either define a WSDL structure in the Sender or configure a WSDL URL in the SOAP Receiver. Make use of certificates and Basic/Auth.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;OData&lt;/STRONG&gt; for SuccessFactors or S/4HANA CRUD operations. Use a receiver adapter for OData V2/V4. Entity, headers, and SAML or OAuth2 authentication needs to be specified.&lt;/DIV&gt;&lt;DIV&gt;For structured SAP messages, starting with those from SAP ECC/S4, use &lt;STRONG&gt;IDoc&lt;/STRONG&gt; in order to get IDocs from SAP and to use IDoc Sender. Also, it would be able to push information into SAP via RFC, using IDoc Receiver which requires connectivity to SAP.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;SFTP&lt;/STRONG&gt; is used for file-based integration (which includes uploads and downloads in.csv and.xml formats). Besides it is used to poll files from various servers, use SFTP Sender. SFTP is also used to upload files using Receiver while setting up user/key authentication, host, and port.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Mail&lt;/STRONG&gt; is used when email sending or receiving is necessary for integration. For sending emails, we can use a mail receiver (SMTP). To check the inbox, use Mail Sender (IMAP/POP3). Making use of MIME converters.&lt;/DIV&gt;&lt;DIV&gt;The &lt;STRONG&gt;Success Factors&lt;/STRONG&gt; is used to integrate with SF Employee Central via OData. Utilize the appropriate OData entity routes, set up your OAuth2 credentials, and use the SuccessFactors Receiver Adapter.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;AS2&lt;/STRONG&gt; is used for secure B2B/EDI communication (pharma, retail, etc.).For outgoing messages, use AS2 Receiver; for incoming messages, use AS2 Sender. In addition to that AS2 can set up partner agreements, EDI settings, and digital certificates.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;JDBC &lt;/STRONG&gt;adapter is used while logging into SQL, Oracle, or MySQL databases on-premises. For secure on-premises access, utilize the JDBC Receiver and set up drivers, SQL queries, and Cloud Connector.&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Ariba&lt;/STRONG&gt; is used for SAP Ariba integration which is related to procurement. Ariba Network Adapter should be used for setting up document types (PO, invoice) and certifications which is typically asynchronous.&lt;/DIV&gt;&lt;DIV&gt;"&lt;STRONG&gt;Twitter/FB/3rd&lt;/STRONG&gt;" is utilized when public APIs or social media are used for integration. Use an appropriate API endpoint with an HTTP adapter which can manage API keys or OAuth2 tokens.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Essential Setup Procedures (How to Apply in Integration Flow)&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;1. Select the adapter:&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;In your iFlow, drag a Sender or Receiver participant.&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;2. Set up the adapter:&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;Select the appropriate adapter type, such as OData or HTTP.&lt;/LI&gt;&lt;LI&gt;Add details specific to the protocol (URL, method, headers).&lt;/LI&gt;&lt;LI&gt;Establish authentication.&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;3. Transform and Map:&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;To format or update the message, use Script, Message Mapping, or Content Modifier.&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;4. Examine the iFlow:&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;Install the Monitor and use it to look for incoming and outgoing messages.&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Ideal Methods&lt;/STRONG&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;Use externalized parameters (such as credentials or URLs) through Value Mapping or security artifacts whenever possible .&lt;/LI&gt;&lt;LI&gt;Use secure authentication methods like OAuth2, SAML, or certificates for sensitive systems (like IDoc and OData).&lt;/LI&gt;&lt;LI&gt;To cope with adapter problems (which might include file not found or timeout), use Exception Subprocesses.&lt;/LI&gt;&lt;LI&gt;Install Cloud Connector if you're interacting with on-premise services&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;CONCLUSION&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Adapters enables systems to interact via different protocols synchronously or asynchronously. Adapters also enforces security, helps in implementing message transformations exchanged between different protocols or data formats and scheduling event-driven integration.&amp;nbsp; Hence adapters are one of the best tools in SAP CPI which helps developers to maintain an effective and secure way to send data within different systems .&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/adapters-in-sap-cloud-integration-when-and-how-to-use-them/ba-p/14138566"/>
    <published>2025-07-05T11:08:26.522000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/creating-migs-and-mags-using-integration-advisor-in-sap-btp-cockpit/ba-p/14143413</id>
    <title>Creating MIGs and MAGs Using Integration Advisor in SAP BTP Cockpit</title>
    <updated>2025-07-05T11:12:38.722000+02:00</updated>
    <author>
      <name>ManaswiniPuli</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1940178</uri>
    </author>
    <content>&lt;P&gt;As I began working with SAP’s Integration Advisor, I realized how much it simplifies defining message structures and mappings. I discovered a step-by-step approach to creating message guidelines and mappings. In this blog, I will walk you through how to leverage MIGs and MAGs in SAP BTP Cockpit to efficiently build message structures and mappings that comply with standards.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What are MIGs and MAGs?&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Message Implementation Guidelines (MIGs)&lt;/STRONG&gt; define the structure and format of messages, helping to create custom, standard-compliant message templates.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Message Guidelines(MAGs)&lt;/STRONG&gt; specify how different message formats map to each other, enabling seamless data transformation between systems.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1605059914"&gt;Step-by-Step Guide: Creating MIG for Purchase Order&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Access Integration Suite&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to &lt;STRONG&gt;SAP BTP Cockpit&lt;/STRONG&gt; using your registered &lt;STRONG&gt;email and password&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Go to your &lt;STRONG&gt;Subaccount&lt;/STRONG&gt; and navigate to &lt;STRONG&gt;Subscriptions&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click on&lt;STRONG&gt;&amp;nbsp; Integration Suite&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Navigate to MIGs&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In the Integration Suite launchpad, go to the left-hand menu.&lt;/LI&gt;&lt;LI&gt;Under the &lt;STRONG&gt;Design&lt;/STRONG&gt; section, click on &lt;STRONG&gt;MIGs (Message Implementation Guidelines)&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_0-1751524033508.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282005i6CF87AC0E8F4E5E7/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_0-1751524033508.png" alt="ManaswiniPuli_0-1751524033508.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create a New MIG for Purchase Order&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;1.Click on the &lt;STRONG&gt;“Create”&lt;/STRONG&gt; button at the top right.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_1-1751524033511.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282007i0B5C4C02B62DD7C9/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_1-1751524033511.png" alt="ManaswiniPuli_1-1751524033511.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;2. In the &lt;/SPAN&gt;&lt;STRONG&gt;Type System&lt;/STRONG&gt;&lt;SPAN&gt; section, under the &lt;/SPAN&gt;&lt;STRONG&gt;Standard&lt;/STRONG&gt;&lt;SPAN&gt; field, select &lt;/SPAN&gt;&lt;STRONG&gt;X12&lt;/STRONG&gt;&lt;SPAN&gt; (for ANSI X12 standard).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_2-1751524033514.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282006iA8A0553A36B234FE/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_2-1751524033514.png" alt="ManaswiniPuli_2-1751524033514.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;3. On clicking &lt;/SPAN&gt;&lt;STRONG&gt;X12&lt;/STRONG&gt;&lt;SPAN&gt; in the &lt;/SPAN&gt;&lt;STRONG&gt;Standard&lt;/STRONG&gt;&lt;SPAN&gt; field, a list of available &lt;/SPAN&gt;&lt;STRONG&gt;message types&lt;/STRONG&gt;&lt;SPAN&gt; will appear.&amp;nbsp;&lt;/SPAN&gt;In the search bar, type &lt;STRONG&gt;850&lt;/STRONG&gt; and select:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Message Type&lt;/STRONG&gt;: 850 – Purchase Order&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_3-1751524033517.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282010iCAA789F67686F6CC/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_3-1751524033517.png" alt="ManaswiniPuli_3-1751524033517.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;4. After selecting the message type, a list of available &lt;/SPAN&gt;&lt;STRONG&gt;versions&lt;/STRONG&gt;&lt;SPAN&gt; will appear.&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Choose the appropriate version, typically &lt;/SPAN&gt;&lt;STRONG&gt;004010&lt;/STRONG&gt;&lt;SPAN&gt; for X12.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_4-1751524033518.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282008iA283D3D1DB3B01F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_4-1751524033518.png" alt="ManaswiniPuli_4-1751524033518.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;5. Once the version is selected, the &lt;/SPAN&gt;&lt;STRONG&gt;Envelope&lt;/STRONG&gt;&lt;SPAN&gt; selection screen appears. From the available options, choose &lt;/SPAN&gt;&lt;STRONG&gt;None&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;This means the message will not be wrapped in any predefined envelope structure.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_5-1751524033520.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282009i3554D04631F643A5/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_5-1751524033520.png" alt="ManaswiniPuli_5-1751524033520.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;6. The next screen shows the &lt;/SPAN&gt;&lt;STRONG&gt;Sample Payload&lt;/STRONG&gt;&lt;SPAN&gt;, which you can skip by clicking &lt;/SPAN&gt;&lt;STRONG&gt;Next&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;/&lt;/SPAN&gt;&lt;STRONG&gt;Continue&lt;/STRONG&gt;&lt;SPAN&gt; without making any changes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_6-1751524033522.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282011iA11E25AABE4F8584/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_6-1751524033522.png" alt="ManaswiniPuli_6-1751524033522.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;7. In the final step, provide the following details&lt;/SPAN&gt;&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name&lt;/STRONG&gt;: Enter a meaningful name, e.g., &lt;STRONG&gt;X12_850_PurchaseOrder_MIG&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Direction&lt;/STRONG&gt;: Choose the option that best fits your integration scenario:&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Inbound&lt;/STRONG&gt;: When your system is receiving data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Outbound&lt;/STRONG&gt;: When your system is sending data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Both&lt;/STRONG&gt;: When your system will both send and receive data.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;EM&gt;Here, we are selecting &lt;STRONG&gt;Inbound&lt;/STRONG&gt; since the system is receiving data.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_7-1751524033524.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282013i9307A89E6947BBEA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_7-1751524033524.png" alt="ManaswiniPuli_7-1751524033524.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Own Business Context&lt;/STRONG&gt;: Select the appropriate business context that matches your integration scenario.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; This helps categorize and manage your MIG efficiently.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;For example, select &lt;STRONG&gt;Business Process Role&lt;/STRONG&gt; and choose &lt;STRONG&gt;Request Order&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_8-1751524033526.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282012iA270C2AD834BFA57/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_8-1751524033526.png" alt="ManaswiniPuli_8-1751524033526.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;8. Click &lt;/SPAN&gt;&lt;STRONG&gt;Create&lt;/STRONG&gt;&lt;SPAN&gt; to complete the setup and open the MIG editor.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;9. After clicking &lt;STRONG&gt;Create&lt;/STRONG&gt;, the MIG editor opens.&lt;/P&gt;&lt;P&gt;Select the required &lt;STRONG&gt;nodes&lt;/STRONG&gt; relevant to your integration scenario. Once the nodes are selected, click &lt;STRONG&gt;Save&lt;/STRONG&gt; to store the MIG configuration.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_9-1751524033531.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282016iFF0000577462AA00/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_9-1751524033531.png" alt="ManaswiniPuli_9-1751524033531.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;10.&lt;/SPAN&gt;&lt;STRONG&gt; Verify the Created MIG&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;To verify that the MIG has been created, go to the MIGs tab under the Design section and&amp;nbsp;confirm that it is listed.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_10-1751524033534.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282015i2456CCF62A82A039/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_10-1751524033534.png" alt="ManaswiniPuli_10-1751524033534.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1408546409"&gt;Step-by-Step Guide: Creating MIG for Sales Order&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create a New MIG for Sales Order&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;1. Click on the &lt;STRONG&gt;“Create”&lt;/STRONG&gt; button at the top right.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_11-1751524033536.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282014iA7CBF0D2042CD566/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_11-1751524033536.png" alt="ManaswiniPuli_11-1751524033536.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;2. In the &lt;/SPAN&gt;&lt;STRONG&gt;Type System &lt;/STRONG&gt;&lt;SPAN&gt;section, under the &lt;/SPAN&gt;&lt;STRONG&gt;Standard&lt;/STRONG&gt;&lt;SPAN&gt; field, select &lt;/SPAN&gt;&lt;STRONG&gt;SAP S/4HANA Cloud SOAP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_12-1751524033543.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282019iD43B796672A37B56/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_12-1751524033543.png" alt="ManaswiniPuli_12-1751524033543.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;3. On clicking &lt;/SPAN&gt;&lt;STRONG&gt;SAP S/4HANA Cloud SOAP&lt;/STRONG&gt;&lt;SPAN&gt; in the &lt;/SPAN&gt;&lt;STRONG&gt;Standard&lt;/STRONG&gt;&lt;SPAN&gt; field, a list of available &lt;/SPAN&gt;&lt;STRONG&gt;message types &lt;/STRONG&gt;&lt;SPAN&gt;will appear. Search and select &lt;/SPAN&gt;&lt;STRONG&gt;SalesOrderBulkRequest-SalesOrderBulkRequest&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_13-1751524033549.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282018i24BBBC5EE355D9EE/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_13-1751524033549.png" alt="ManaswiniPuli_13-1751524033549.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;4. After selecting the message type, a list of available versions will appear.&lt;/SPAN&gt;&amp;nbsp;Choose the appropriate version — typically &lt;STRONG&gt;1905&lt;/STRONG&gt; for &lt;STRONG&gt;SalesOrderBulkRequest – SalesOrderBulkRequest&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_14-1751524033550.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282017i21F8D99F9A90BDBA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_14-1751524033550.png" alt="ManaswiniPuli_14-1751524033550.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;5. The next screen shows the &lt;/SPAN&gt;&lt;STRONG&gt;Sample Payload&lt;/STRONG&gt;&lt;SPAN&gt;, which you can skip by clicking &lt;/SPAN&gt;&lt;STRONG&gt;Next&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;/&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Continue&lt;/STRONG&gt;&lt;SPAN&gt; without making any changes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_15-1751524033552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282020i22334BFAE7C433FE/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_15-1751524033552.png" alt="ManaswiniPuli_15-1751524033552.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;6. In the final step, provide the following details&lt;/SPAN&gt;&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Name&lt;/STRONG&gt;: Enter a meaningful name, e.g., &lt;STRONG&gt;SOAP_SalesOrder_MIG&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Direction&lt;/STRONG&gt;: Choose the option that best fits your integration scenario:&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Inbound&lt;/STRONG&gt;: When your system is receiving data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Outbound&lt;/STRONG&gt;: When your system is sending data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Both&lt;/STRONG&gt;: When your system will both send and receive data.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;EM&gt;Here, we are selecting &lt;STRONG&gt;Inbound&lt;/STRONG&gt; since the system is receiving data.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_16-1751524033554.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282022i18AC6DC6A708E563/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_16-1751524033554.png" alt="ManaswiniPuli_16-1751524033554.png" /&gt;&lt;/span&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Own Business Context&lt;/STRONG&gt;: Select the appropriate business context that matches your integration scenario.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;This helps categorize and manage your MIG efficiently.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; For example, select &lt;STRONG&gt;Business Process Role&lt;/STRONG&gt; and choose &lt;STRONG&gt;Request Order&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_17-1751524033556.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282021i8CAF6D10921FD82E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_17-1751524033556.png" alt="ManaswiniPuli_17-1751524033556.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;7. Click &lt;/SPAN&gt;&lt;STRONG&gt;Create&lt;/STRONG&gt;&lt;SPAN&gt; to complete the setup and open the MIG editor.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;8. After clicking &lt;STRONG&gt;Create&lt;/STRONG&gt;, the MIG editor opens. Select the required &lt;STRONG&gt;nodes&lt;/STRONG&gt; relevant to your integration scenario. Once the nodes are selected, click &lt;STRONG&gt;Save&lt;/STRONG&gt; to store the MIG configuration.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_18-1751524033560.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282023i44F52B9501FCC756/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_18-1751524033560.png" alt="ManaswiniPuli_18-1751524033560.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;9.&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Verify the Created MIG&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;To verify that the MIG has been created, go to the MIGs tab under the Design section and&amp;nbsp;confirm that it is listed.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_19-1751524033564.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282025i71D4AF7DF3C6EFA3/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_19-1751524033564.png" alt="ManaswiniPuli_19-1751524033564.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1212032904"&gt;Creating MAG (Message Mapping Guideline) in SAP Integration Suite&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Navigate to the MAGs Section&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;In the &lt;STRONG&gt;SAP Integration Suite&lt;/STRONG&gt;, go to the &lt;STRONG&gt;Design&lt;/STRONG&gt; section.&lt;/LI&gt;&lt;LI&gt;Click on the &lt;STRONG&gt;MAGs&lt;/STRONG&gt; tab.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Click on Create&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;Click the Create button to begin a new Message Mapping Guideline and select &lt;STRONG&gt;Standard MAG&lt;/STRONG&gt; as the type.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_20-1751524033566.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282024i9D76A453E7CE6113/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_20-1751524033566.png" alt="ManaswiniPuli_20-1751524033566.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Select the Source MIG&lt;/STRONG&gt;&lt;BR /&gt;In the &lt;STRONG&gt;Source&lt;/STRONG&gt; section, select the appropriate &lt;STRONG&gt;Source MIG&lt;/STRONG&gt; (e.g., X12_850_PurchaseOrder_MIG)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_21-1751524033569.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282026iD82BB6C1C1163B93/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_21-1751524033569.png" alt="ManaswiniPuli_21-1751524033569.png" /&gt;&lt;/span&gt;&lt;STRONG&gt;Step 4: Select the Target MIG&lt;/STRONG&gt;&lt;BR /&gt;In the &lt;STRONG&gt;Target&lt;/STRONG&gt; section, select the appropriate &lt;STRONG&gt;Target MIG&lt;/STRONG&gt; (e.g., SOAP_SalesOrder_MIG)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_22-1751524033571.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282028i16BB77CF421913EB/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_22-1751524033571.png" alt="ManaswiniPuli_22-1751524033571.png" /&gt;&lt;/span&gt;&lt;STRONG&gt;Step 5: Click on Create&lt;/STRONG&gt;&lt;BR /&gt;After selecting the source and target MIGs, click &lt;STRONG&gt;Create&lt;/STRONG&gt; to generate the MAG and open the mapping editor.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_23-1751524033574.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282027iB2DE625A2D4C8A3E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_23-1751524033574.png" alt="ManaswiniPuli_23-1751524033574.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Perform Field Mapping&lt;/STRONG&gt;&lt;BR /&gt;Once the MAG editor opens, map the relevant fields from the &lt;STRONG&gt;source structure&lt;/STRONG&gt; to the corresponding fields in the &lt;STRONG&gt;target structure&lt;/STRONG&gt; by dragging and dropping between them.&lt;BR /&gt;Apply any necessary transformations, constants as per your integration requirements.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_24-1751524033579.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282029i063DBFD563DA5B6B/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_24-1751524033579.png" alt="ManaswiniPuli_24-1751524033579.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7: Save the MAG&lt;/STRONG&gt;&lt;BR /&gt;After completing the field mappings, click &lt;STRONG&gt;Save&lt;/STRONG&gt; to store your MAG configuration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Export the MAG&lt;/STRONG&gt;&lt;BR /&gt;Click &lt;STRONG&gt;Export&lt;/STRONG&gt; and select &lt;STRONG&gt;SAP Cloud Integration Runtime Artifacts&lt;/STRONG&gt; to generate the artifact for use in Integration Flow.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_25-1751524033584.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282030i2810C9A24E13E216/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_25-1751524033584.png" alt="ManaswiniPuli_25-1751524033584.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 9: Extract the Exported Files&lt;/STRONG&gt;&lt;BR /&gt;Download and extract the ZIP file. It contains the Mapping, Source MIG, and Target MIG folders.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Inside the &lt;/SPAN&gt;&lt;STRONG&gt;Source&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;Target&lt;/STRONG&gt;&lt;SPAN&gt; MIG folders, you will find the required files for integration.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_0-1751526200403.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282044i98B8A5072B9CF73E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_0-1751526200403.png" alt="ManaswiniPuli_0-1751526200403.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;With MIGs and MAGs in place, you’re prepared to leverage them in integration scenarios for efficient data processing. &lt;/SPAN&gt;&lt;SPAN&gt;Stay tuned for more insights to help you build effective integrations!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;All the views and opinions in this blog are my own and are made in my personal capacity. SAP shall not be responsible or liable for any of the contents published in this blog.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-migs-and-mags-using-integration-advisor-in-sap-btp-cockpit/ba-p/14143413"/>
    <published>2025-07-05T11:12:38.722000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/master-data-replication-creation-of-communication-arrangement-sap-com-0659/ba-p/14146357</id>
    <title>Master Data Replication: Creation of Communication Arrangement SAP_COM_0659</title>
    <updated>2025-07-07T18:47:30.471000+02:00</updated>
    <author>
      <name>Janarthanan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/669</uri>
    </author>
    <content>&lt;H2 id="prerequisites" id="toc-hId-1734231173"&gt;&lt;SPAN&gt;Prerequisites&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;Before you create a communication arrangement, go to SAP BTP Cockpit, select the respective service instance, and copy the service binding&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;How to copy Service key (or) binding&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;Go to BTP :MDI subaccount and follow the below steps&lt;/P&gt;&lt;P class=""&gt;Step1: go to MDI subaccount&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;step2: Click Service binding from the instance&lt;/P&gt;&lt;P class=""&gt;Step3 : select json mode and click copy json&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Janarthanan_1-1751906351330.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283607iE67F85FD9DC3205A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Janarthanan_1-1751906351330.png" alt="Janarthanan_1-1751906351330.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;you have copied the service key&lt;/P&gt;&lt;H2 id="procedure" id="toc-hId-1537717668"&gt;&lt;SPAN&gt;Procedure&lt;/SPAN&gt;&lt;/H2&gt;&lt;DIV class=""&gt;&lt;H3 id="toc-hId-1470286882"&gt;Automated Creation&lt;/H3&gt;&lt;OL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;Log on to the SAP Fiori launchpad in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP S/4HANA Cloud Public Edition&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;system.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Select the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;Communication Arrangement&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;app.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Click&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;New&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;New Communication Arrangement&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;dialog, select the scenario&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP_COM_0659&lt;/SPAN&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Paste the service binding that you copied from the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP BTP Cockpit&lt;/SPAN&gt;. (Paste the&amp;nbsp; json)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Choose&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;Create&lt;/SPAN&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;DIV class=""&gt;Verify the auto-filled details:&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Arrangement Name&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Communication System&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Outbound Communication&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Outbound Services&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;/LI&gt;&lt;LI&gt;Save your communication arrangement.&lt;/LI&gt;&lt;/OL&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;Regards&lt;/P&gt;&lt;P&gt;Janarthanan&lt;/P&gt;&lt;P&gt;#SAP_COM_0659 #&lt;SPAN&gt;SAP Master Data Integration&lt;/SPAN&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/master-data-replication-creation-of-communication-arrangement-sap-com-0659/ba-p/14146357"/>
    <published>2025-07-07T18:47:30.471000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/regex-filtering-in-file-name-for-sftp-sender-adapter-in-cloud-integration/ba-p/14146845</id>
    <title>Regex Filtering in File Name for SFTP Sender Adapter in Cloud Integration</title>
    <updated>2025-07-08T10:06:31.288000+02:00</updated>
    <author>
      <name>RaghuVamseedhar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191580</uri>
    </author>
    <content>&lt;P&gt;SAP has quietly introduced Regex Filtering in the SFTP Sender Adapter, starting with adapter version 1.17 for SFTP Sender and version 1.18 for SFTP Poll Enrich.&lt;BR /&gt;Previously, although SAP documentation claimed regex support, it was not truly evaluated by the runtime. Only simple expressions using * and ? were interpreted:&lt;BR /&gt;* - matches zero or more characters&lt;BR /&gt;? - matches exactly one character&lt;/P&gt;&lt;P&gt;For example:&lt;BR /&gt;ab* matches: ab, abc, abcd&lt;BR /&gt;ab? matches: abc, ab1&lt;BR /&gt;This limitation created a challenge in SAP Process Orchestration (PO) to SAP Cloud Integration (CI) migration projects, where regex filtering in PO SFTP channels was already supported.&lt;/P&gt;&lt;P&gt;From SFTP adapter version 1.17 onward, a new checkbox - &lt;STRONG&gt;Regex Filtering&lt;/STRONG&gt; - is available. Once enabled, the file name input field can evaluate actual regular expressions, bringing it in line with PO capabilities.&lt;BR /&gt;For example, to pick up files named &lt;STRONG&gt;abc.txt&lt;/STRONG&gt; or &lt;STRONG&gt;123.txt&lt;/STRONG&gt;, you can now use:&lt;BR /&gt;&lt;STRONG&gt;^(abc\.txt|123\.txt)$&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="50%"&gt;Old SFTP adapter&lt;/TD&gt;&lt;TD width="50%"&gt;New SFTP adapter&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%"&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RaghuVamseedhar_3-1751961677114.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283849iD33936D10EAF294A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RaghuVamseedhar_3-1751961677114.png" alt="RaghuVamseedhar_3-1751961677114.png" /&gt;&lt;/span&gt;&lt;/TD&gt;&lt;TD width="50%"&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RaghuVamseedhar_2-1751961570062.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283846i64C528206248AD8E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RaghuVamseedhar_2-1751961570062.png" alt="RaghuVamseedhar_2-1751961570062.png" /&gt;&lt;/span&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;If you are not Seeing the 'Regex Filtering' Option, it likely means you are using an older adapter version.&lt;BR /&gt;Solution: Delete the existing SFTP channel and create a new one using the latest adapter version.&lt;/P&gt;&lt;P&gt;FYI...You can take AI (ChatGPT, Copilot) help to come up with regex you need and use it in SFTP channel.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/regex-filtering-in-file-name-for-sftp-sender-adapter-in-cloud-integration/ba-p/14146845"/>
    <published>2025-07-08T10:06:31.288000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/streamlining-b2b-integration-with-ai-powered-sap-cpi-accelerating-data/ba-p/14143578</id>
    <title>Streamlining B2B Integration with AI-Powered SAP CPI: Accelerating Data Transformations</title>
    <updated>2025-07-14T16:07:13.979000+02:00</updated>
    <author>
      <name>ARAVINDRAJAMANI</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1692318</uri>
    </author>
    <content>&lt;P class=""&gt;In today’s interconnected business ecosystem, seamless data exchange between systems is vital for operational excellence. SAP Cloud Platform Integration (CPI), a key component of the SAP Business Technology Platform (BTP), leverages AI-driven tools like the Integration Advisor to simplify complex B2B integrations, such as transforming EDI to IDoc formats. This article explores how Integration Advisor’s AI capabilities enhance accuracy and speed, provides a practical example of a B2B transformation, and explains how to implement it in SAP CPI Integration flows&lt;/P&gt;&lt;H3 id="toc-hId-1863226504"&gt;Integration Advisor&lt;/H3&gt;&lt;P class=""&gt;The Integration Advisor, a cloud-based tool within SAP CPI, streamlines integration by automating the creation of Message Implementation Guidelines (MIGs) and Mapping Guidelines (MAGs). MIGs define source and target message structures (e.g., EDI and IDoc), while MAGs specify field mappings. Powered by machine learning, the Advisor analyzes industry standards, SAP metadata, and crowd-sourced patterns to propose mappings, validate data consistency, and provide reusable templates. This reduces manual effort, ensures compliance, and fosters collaboration across teams and partners.&lt;/P&gt;&lt;H3 id="toc-hId-1666712999"&gt;Key Features of Integration Advisor&lt;/H3&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Automated Mapping Proposals&lt;/STRONG&gt;: AI suggests field mappings based on standards and historical data.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Standard Libraries&lt;/STRONG&gt;: Supports common B2B formats for rapid setup.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Collaboration Tools&lt;/STRONG&gt;: Enables sharing of MIGs and MAGs for stakeholder alignment.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1470199494"&gt;Benefits of AI-Assisted Integration&lt;/H3&gt;&lt;P class=""&gt;Integration Advisor’s AI capabilities deliver significant advantages:&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Automation&lt;/STRONG&gt;: Generates mappings for B2B transformations, reducing setup time by up to 60%.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Accuracy&lt;/STRONG&gt;: Minimizes errors by 50–70% through data validation.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Scalability&lt;/STRONG&gt;: Reusable templates support large-scale integrations.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Collaboration&lt;/STRONG&gt;: Shared guidelines streamline coordination with partners.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1273685989"&gt;Practical Example : Transforming EDI 850 to ORDERS05 IDoc&lt;/H3&gt;&lt;P class=""&gt;Consider a global retailer integrating a supplier’s EDI purchase order with its SAP S/4HANA system, which uses IDoc for order processing. Below are the steps&lt;/P&gt;&lt;OL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Create MIGs&lt;/STRONG&gt;: Define the source MIG for the EDI message, including segments like order details, partner information, and line items. Define the target MIG for the IDoc, covering segments like header, partner, and line items.&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_0-1751536739276.png" style="width: 584px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282128i1E7FA0C2A000B582/image-dimensions/584x303?v=v2" width="584" height="303" role="button" title="ARAVINDRAJAMANI_0-1751536739276.png" alt="ARAVINDRAJAMANI_0-1751536739276.png" /&gt;&lt;/span&gt;&lt;P&gt;Now choose ASC XI2 as we will create MIG for EDI 850 first .&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_1-1751536966874.png" style="width: 569px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282129iC63C929E7692B4C5/image-dimensions/569x305?v=v2" width="569" height="305" role="button" title="ARAVINDRAJAMANI_1-1751536966874.png" alt="ARAVINDRAJAMANI_1-1751536966874.png" /&gt;&lt;/span&gt;&lt;P&gt;Now search for 850 which is for Purchase Orders&amp;nbsp; and then choose version 4010&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_4-1751537118260.png" style="width: 670px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282132iAFE2DCF86BCB5F00/image-dimensions/670x129?v=v2" width="670" height="129" role="button" title="ARAVINDRAJAMANI_4-1751537118260.png" alt="ARAVINDRAJAMANI_4-1751537118260.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_5-1751537172171.png" style="width: 682px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282133i73E887963279A42F/image-dimensions/682x79?v=v2" width="682" height="79" role="button" title="ARAVINDRAJAMANI_5-1751537172171.png" alt="ARAVINDRAJAMANI_5-1751537172171.png" /&gt;&lt;/span&gt;&lt;P&gt;In the next step , choose without envelope which skips the Edi envelopes as they are not required for our POC . In the Next Step click on skip unless we have any EDI sample File to provide&amp;nbsp; and click next&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_6-1751537302408.png" style="width: 681px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282134iA4BFE67742354A12/image-dimensions/681x80?v=v2" width="681" height="80" role="button" title="ARAVINDRAJAMANI_6-1751537302408.png" alt="ARAVINDRAJAMANI_6-1751537302408.png" /&gt;&lt;/span&gt;&lt;P&gt;In the Next step , give the name to the MIG , direction is Inbound as EDI 850 is&amp;nbsp; inbound to ECC/ S4 . Also choose a business context accordingly and click on create&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_7-1751537511733.png" style="width: 616px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282135i196C9C0FE833BF3C/image-dimensions/616x331?v=v2" width="616" height="331" role="button" title="ARAVINDRAJAMANI_7-1751537511733.png" alt="ARAVINDRAJAMANI_7-1751537511733.png" /&gt;&lt;/span&gt;&lt;P&gt;The MIG is created and we can choose the required segments for the structure and save it .&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_8-1751537636105.png" style="width: 597px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282137i9BB26FC11579FBCF/image-dimensions/597x339?v=v2" width="597" height="339" role="button" title="ARAVINDRAJAMANI_8-1751537636105.png" alt="ARAVINDRAJAMANI_8-1751537636105.png" /&gt;&lt;/span&gt;&lt;P&gt;The Get Proposals option leverages AI&amp;nbsp; and shows the confidence level for mapping and other related activities&amp;nbsp; . click on Save and then Activate&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_9-1751537816313.png" style="width: 614px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282138iF915D0370CC4B5C6/image-dimensions/614x321?v=v2" width="614" height="321" role="button" title="ARAVINDRAJAMANI_9-1751537816313.png" alt="ARAVINDRAJAMANI_9-1751537816313.png" /&gt;&lt;/span&gt;&lt;P&gt;In order to get the CPI runtime Artifacts , click on Export &amp;gt; SAP Cloud Integration Runtime Artifacts . A Zip will be extracted which contains the multiple files which can be used in Integration flows&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_10-1751538176233.png" style="width: 548px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282139iA4926C2B064019A4/image-dimensions/548x267?v=v2" width="548" height="267" role="button" title="ARAVINDRAJAMANI_10-1751538176233.png" alt="ARAVINDRAJAMANI_10-1751538176233.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;ASC-X12_850_004010.xsd&lt;/STRONG&gt;: An XSD (XML Schema Definition) file defining the structure and data types of the EDI 850 (ASC X12 004010) message. Used to validate the EDI input data against its expected format in SAP CPI.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_postproc.xsl&lt;/STRONG&gt;: An XSLT (Extensible Stylesheet Language Transformations) stylesheet applied post-processing to transform or refine the EDI data after initial parsing. Used to adjust the output for compatibility with downstream systems.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_preproc.xsl&lt;/STRONG&gt;: An XSLT stylesheet used for pre-processing the EDI 850 data before mapping. It handles tasks like segment normalization or data cleansing to prepare it for transformation.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_RD.xsd&lt;/STRONG&gt;: An XSD file representing the runtime data model or reference structure for the EDI 850 message. Used by SAP CPI to ensure the transformed data adheres to the expected runtime schema.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_testdata_CPI.xml&lt;/STRONG&gt;: An XML file containing sample test data for the EDI 850 message, formatted for CPI. Used to test and validate the integration flow within SAP CPI.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_testdata_EDI.txt&lt;/STRONG&gt;: A text file with sample EDI 850 data in its raw format. Used as input for testing the parsing and transformation process.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;X12-850_testdata_ICA.xml&lt;/STRONG&gt;: An XML file with test data structured according to the Integration Content Advisor’s intermediate format. Used to verify the mapping logic during development.&lt;/P&gt;&lt;P&gt;&amp;nbsp;In a Similar way , we can create a MIG for ORDERS05 IDOC as well&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_12-1751539209243.png" style="width: 612px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282176iB05645D330AA2C51/image-dimensions/612x306?v=v2" width="612" height="306" role="button" title="ARAVINDRAJAMANI_12-1751539209243.png" alt="ARAVINDRAJAMANI_12-1751539209243.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.&amp;nbsp; Create MAG :&amp;nbsp;&lt;/STRONG&gt;To create MAG , Click on MAGs under Design and then click create &amp;gt; choose Standard MAGs&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_13-1751539370219.png" style="width: 597px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282178i8BE725B210B637A4/image-dimensions/597x221?v=v2" width="597" height="221" role="button" title="ARAVINDRAJAMANI_13-1751539370219.png" alt="ARAVINDRAJAMANI_13-1751539370219.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now select the Source and target MIGs and then click on create&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_14-1751539551846.png" style="width: 568px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282184iB842CA02359E61F2/image-dimensions/568x304?v=v2" width="568" height="304" role="button" title="ARAVINDRAJAMANI_14-1751539551846.png" alt="ARAVINDRAJAMANI_14-1751539551846.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now the MAG is created as below and it doesn't have any mapping / transformation logic in it .&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_15-1751539626506.png" style="width: 629px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282186i7A5B49DE8A6F1877/image-dimensions/629x347?v=v2" width="629" height="347" role="button" title="ARAVINDRAJAMANI_15-1751539626506.png" alt="ARAVINDRAJAMANI_15-1751539626506.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now , click on proposal which will provide us the list of mapping proposals generated . In our case , we had 600 + proposals generated with the help of AI . Now Select Best proposal and then use Only for Valid Mappings so that the proposals get imported to the mapping .&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ARAVINDRAJAMANI_16-1751540646508.png" style="width: 646px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282194iF07E7216D84FE8B6/image-dimensions/646x358?v=v2" width="646" height="358" role="button" title="ARAVINDRAJAMANI_16-1751540646508.png" alt="ARAVINDRAJAMANI_16-1751540646508.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If any mapping logic is required apart from proposals , we can manually add them as we do in normal message&amp;nbsp; mapping . We can stimulate the mapping using the stimulate option .&amp;nbsp;&lt;/P&gt;&lt;P&gt;Once Done , save and activate the MAG. Upon clicking export Option we can get the cpi runtime components .&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Time and Cost Savings&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Manually mapping EDI to IDoc can take 6–8 hours due to complex segment structures. Integration Advisor’s AI reduces this to 2–3 hours, achieving a 60–75% time savings. Error reduction of 50–70% minimizes rework, enhancing efficiency.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Drawbacks&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This functionality is not mature enough to provide proper proposals . Multiple conflicting proposals were there and multiple important segments didnt have any proposals at all. MIG is very useful to generate the xsds of EDI and other standard formats , whereas MAG is not that useful as MIGs&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why Integration Advisor Is Transformative&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;As businesses connect ERP systems, suppliers, and third-party platforms, the demand for rapid, reliable integrations grows. Integration Advisor addresses this by automating mappings, ensuring data integrity, and adapting to B2B standards. For example, a manufacturing firm reduced integration timelines from two weeks to four days using Integration Advisor, improving supplier order accuracy.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Best Practices for Success&lt;/STRONG&gt;&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P&gt;Use Standard Libraries: Leverage metadata for accurate MIGs.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Validate Early: Test mappings with sample data to catch issues.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Collaborate: Share MIGs and MAGs for stakeholder alignment.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Monitor iFlows: Use SAP CPI’s tools to optimize performance and troubleshoot errors.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-948089765"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;SAP CPI’s Integration Advisor, with its AI-driven capabilities, revolutionizes B2B connectivity by simplifying EDI-to-IDoc transformations. By automating mappings, reducing errors, and enabling seamless iFlow integration, it empowers enterprises to achieve operational excellence. Integration professionals should harness Integration Advisor and SAP CPI iFlows to streamline workflows and drive competitive advantage.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/streamlining-b2b-integration-with-ai-powered-sap-cpi-accelerating-data/ba-p/14143578"/>
    <published>2025-07-14T16:07:13.979000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/automating-iflow-documentation-with-sap-integration-suite-and-gemini-ai/ba-p/14153802</id>
    <title>Automating iFlow Documentation with SAP Integration Suite and Gemini AI</title>
    <updated>2025-07-18T14:27:58.950000+02:00</updated>
    <author>
      <name>Andrew-Fawzy</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1691795</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1735069966"&gt;&lt;STRONG&gt;🧭 Introduction&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;Documenting integration flows in &lt;STRONG&gt;SAP Cloud Platform Integration (CPI)&lt;/STRONG&gt; is a critical but often tedious task. Manual documentation is time-consuming, error-prone, and difficult to maintain—especially in dynamic environments where iFlows evolve frequently.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;To address this, an automated documentation generator was developed, that utilizes the OData APIs from SAP Integration Suite in combination with Gemini AI. This solution dynamically extracts iFlow metadata and resources, processes them into a structured format, and sends them to Gemini AI to generate a comprehensive technical specification document. The result is a scalable, secure, and intelligent system that can document any iFlow in a subaccount on-demand or on a schedule.&lt;/P&gt;&lt;H2 id="toc-hId-1538556461"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":building_construction:"&gt;🏗&lt;/span&gt;️ Architectural Overview&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;The architecture orchestrates several components of the SAP Integration Suite and Gemini AI to automate the documentation process. Below is a visual representation of the architecture:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_0-1752743318104.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287775iB0732AD96CF5304B/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_0-1752743318104.png" alt="AndrewFawzy_0-1752743318104.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1471125675"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":repeat_button:"&gt;🔁&lt;/span&gt;CPI Integration Flow (iFlow)&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;At the heart of the solution is a &lt;STRONG&gt;CPI Integration Flow&lt;/STRONG&gt; that orchestrates the entire automation. This iFlow can be triggered:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Periodically&lt;/STRONG&gt; (e.g., every Week)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;On-demand&lt;/STRONG&gt; (via manual or external trigger)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The iFlow performs the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Retrieves iFlow metadata and resources&lt;/LI&gt;&lt;LI&gt;Prepares and formats the data&lt;/LI&gt;&lt;LI&gt;Sends it to Gemini AI&lt;/LI&gt;&lt;LI&gt;Stores the generated documentation in a Datastore&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1274612170"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":globe_with_meridians:"&gt;🌐&lt;/span&gt;Accessing SAP Integration Suite OData APIs&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;The iFlow uses &lt;STRONG&gt;OData APIs&lt;/STRONG&gt; exposed by the SAP Integration Suite to access:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;iFlow Metadata&lt;/STRONG&gt; (design-time artifacts)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Resources&lt;/STRONG&gt; such as:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Groovy scripts&lt;/LI&gt;&lt;LI&gt;XSLT mappings&lt;/LI&gt;&lt;LI&gt;EDMX schemas&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;You could try out those endpoints here: &lt;/STRONG&gt;&lt;A href="https://api.sap.com/api/IntegrationContent/tryout" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Business Accelerator Hub&lt;/STRONG&gt;&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1207181384"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":locked_with_key:"&gt;🔐&lt;/span&gt;Authentication&lt;/STRONG&gt;&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;The iFlow uses &lt;STRONG&gt;OAuth2 client credentials&lt;/STRONG&gt; to authenticate against the &lt;STRONG&gt;SAP BTP XSUAA service&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;A &lt;STRONG&gt;Process Integration Runtime (PIR)&lt;/STRONG&gt; service instance is bound to the subaccount.&lt;/LI&gt;&lt;LI&gt;Oauth Client Credential is created in the Security Materials.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1010667879"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":globe_with_meridians:"&gt;🌐&lt;/span&gt;SAP CPI Odata Interfaces&lt;/STRONG&gt;&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;iFlow Metadata&lt;/STRONG&gt;: {{CPI_Tenant_URL}}/IntegrationDesigntimeArtifacts(Id='{Id}',Version='{Version}')/$value&lt;UL&gt;&lt;LI&gt;Returns a Zip folder containing the flow's configuration file, ".iflw" file.&lt;/LI&gt;&lt;LI&gt;The retrieved data includes:&amp;nbsp;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Flow Steps&lt;/STRONG&gt;: Activities like Router, Content Modifier, Join, Splitter, Gather, etc.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Sequence Flows&lt;/STRONG&gt;: Logical connections between steps&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Metadata&lt;/STRONG&gt;: Flow name, version, and other properties&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Resource List&lt;/STRONG&gt;: {{CPI_Tenant_URL}}/IntegrationDesigntimeArtifacts(Id='{Id}',Version='{Version}')/Resources&lt;UL&gt;&lt;LI&gt;This endpoint returns a list including all resources utilized within the IFlow&lt;/LI&gt;&lt;LI&gt;The retrieved data includes resources such as Groovy scripts, XSLT mappings, EDMX files.&lt;/LI&gt;&lt;LI&gt;Sample Request:&amp;nbsp;&amp;nbsp;&lt;A href="https://sandbox.api.sap.com/cpi/api/v1/IntegrationDesigntimeArtifacts(Id=IntegrationFlowWithConfiguration,Version=active)/Resources" target="_blank" rel="noopener noreferrer"&gt;https://sandbox.api.sap.com/cpi/api/v1/IntegrationDesigntimeArtifacts(Id=IntegrationFlowWithConfiguration,Version=active)/Resources&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;UL&gt;&lt;LI&gt;Sample Response:&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt; &amp;lt;?xml version='1.0' encoding='utf-8'?&amp;gt;
&amp;lt;feed xmlns="http://www.w3.org/2005/Atom" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xml:base="https://sandbox.api.sap.com:9006/cpi/api/v1/"&amp;gt;
    &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources&amp;lt;/id&amp;gt;
    &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
    &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
    &amp;lt;author&amp;gt;
        &amp;lt;name/&amp;gt;
    &amp;lt;/author&amp;gt;
    &amp;lt;link href="Resources" rel="self" title="Resources"/&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='eDocPeruInvoiceTransmissionSimplified.wsdl',ResourceType='wsdl')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='eDocPeruInvoiceTransmissionSimplified.wsdl',ResourceType='wsdl')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='eDocPeruInvoiceTransmissionSimplified.wsdl',ResourceType='wsdl')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='eDocPeruInvoiceTransmissionSimplified.wsdl',ResourceType='wsdl')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;eDocPeruInvoiceTransmissionSimplified.wsdl&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;wsdl&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType&amp;gt;wsdl&amp;lt;/d:ReferencedResourceType&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;3307&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='billServiceFlat.wsdl',ResourceType='wsdl')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='billServiceFlat.wsdl',ResourceType='wsdl')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='billServiceFlat.wsdl',ResourceType='wsdl')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='billServiceFlat.wsdl',ResourceType='wsdl')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;billServiceFlat.wsdl&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;wsdl&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType&amp;gt;wsdl&amp;lt;/d:ReferencedResourceType&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;4992&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='PipelineNominationModify.xsd',ResourceType='xsd')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='PipelineNominationModify.xsd',ResourceType='xsd')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='PipelineNominationModify.xsd',ResourceType='xsd')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='PipelineNominationModify.xsd',ResourceType='xsd')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;PipelineNominationModify.xsd&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;xsd&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType&amp;gt;wsdl&amp;lt;/d:ReferencedResourceType&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;4235&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='AddExtensionContent.xsl',ResourceType='xslt')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='AddExtensionContent.xsl',ResourceType='xslt')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='AddExtensionContent.xsl',ResourceType='xslt')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='AddExtensionContent.xsl',ResourceType='xslt')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;AddExtensionContent.xsl&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;xslt&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;1850&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='AddSignatureInfo.xsl',ResourceType='xslt')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='AddSignatureInfo.xsl',ResourceType='xslt')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='AddSignatureInfo.xsl',ResourceType='xslt')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='AddSignatureInfo.xsl',ResourceType='xslt')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;AddSignatureInfo.xsl&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;xslt&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;2006&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='ApplicationResponseAccepted.xml',ResourceType='edmx')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='ApplicationResponseAccepted.xml',ResourceType='edmx')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='ApplicationResponseAccepted.xml',ResourceType='edmx')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='ApplicationResponseAccepted.xml',ResourceType='edmx')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;ApplicationResponseAccepted.xml&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;edmx&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;4428&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='Boleta.xml',ResourceType='edmx')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='Boleta.xml',ResourceType='edmx')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='Boleta.xml',ResourceType='edmx')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='Boleta.xml',ResourceType='edmx')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;Boleta.xml&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;edmx&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;11088&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='ApplicationResponseRejected.xml',ResourceType='edmx')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='ApplicationResponseRejected.xml',ResourceType='edmx')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='ApplicationResponseRejected.xml',ResourceType='edmx')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='ApplicationResponseRejected.xml',ResourceType='edmx')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;ApplicationResponseRejected.xml&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;edmx&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;4350&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='Invoice.xml',ResourceType='edmx')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='Invoice.xml',ResourceType='edmx')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='Invoice.xml',ResourceType='edmx')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='Invoice.xml',ResourceType='edmx')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;Invoice.xml&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;edmx&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;13667&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
    &amp;lt;entry&amp;gt;
        &amp;lt;id&amp;gt;https://sandbox.api.sap.com:9006/cpi/api/v1/Resources(Name='unzip.gsh',ResourceType='groovy')&amp;lt;/id&amp;gt;
        &amp;lt;title type="text"&amp;gt;Resources&amp;lt;/title&amp;gt;
        &amp;lt;updated&amp;gt;2025-07-15T07:57:50.251Z&amp;lt;/updated&amp;gt;
        &amp;lt;category term="com.sap.hci.api.Resource" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/&amp;gt;
        &amp;lt;link href="Resources(Name='unzip.gsh',ResourceType='groovy')" rel="edit" title="Resource"/&amp;gt;
        &amp;lt;link href="Resources(Name='unzip.gsh',ResourceType='groovy')/$value" rel="edit-media" type="application/octet-stream"/&amp;gt;
        &amp;lt;content type="application/octet-stream" src="Resources(Name='unzip.gsh',ResourceType='groovy')/$value"/&amp;gt;
        &amp;lt;m:properties&amp;gt;
            &amp;lt;d:Name&amp;gt;unzip.gsh&amp;lt;/d:Name&amp;gt;
            &amp;lt;d:ResourceType&amp;gt;groovy&amp;lt;/d:ResourceType&amp;gt;
            &amp;lt;d:ReferencedResourceType m:null="true"/&amp;gt;
            &amp;lt;d:ResourceSize&amp;gt;825&amp;lt;/d:ResourceSize&amp;gt;
            &amp;lt;d:ResourceSizeUnit&amp;gt;Bytes&amp;lt;/d:ResourceSizeUnit&amp;gt;
            &amp;lt;d:ResourceContent m:null="true"/&amp;gt;
        &amp;lt;/m:properties&amp;gt;
    &amp;lt;/entry&amp;gt;
&amp;lt;/feed&amp;gt;​&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Individual Resource Content&lt;/STRONG&gt;: /IntegrationDesigntimeArtifacts(Id='{Id}',Version='active')/Resources(Name='{Name}',ResourceType='{Type}')/$value&lt;UL&gt;&lt;LI&gt;This endpoint returns the value of the resource specified in the URL.&lt;/LI&gt;&lt;LI&gt;Sample Request:&amp;nbsp;&lt;A href="https://sandbox.api.sap.com/cpi/api/v1/IntegrationDesigntimeArtifacts(Id=IntegrationFlowWithConfiguration,Version=active)/Resources(Name=unzip.gsh,ResourceType=groovy)/$value" target="_blank" rel="noopener noreferrer"&gt;https://sandbox.api.sap.com/cpi/api/v1/IntegrationDesigntimeArtifacts(Id=IntegrationFlowWithConfiguration,Version=active)/Resources(Name=unzip.gsh,ResourceType=groovy)/$value"&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Sample Response:&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message;
import java.util.HashMap;
import java.util.zip.ZipEntry;

def Message processData(Message message) {
	
	def body = message.getBody(InputStream.class);
	def zipStream = new java.util.zip.ZipInputStream(body);
	def stringBuffer = new StringBuffer();

	ZipEntry entry=zipStream.getNextEntry();
    byte[] buf=new byte[1024];
    while (entry != null) {
      if (entry.getName().endsWith(".xml")) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        int n;
        while ((n=zipStream.read(buf,0,1024)) &amp;gt; -1) {
          out.write(buf,0,n);
        }
       	message.setBody(new String(out.toByteArray()));
      	break;
      }
      zipStream.closeEntry();
      entry=zipStream.getNextEntry();
    }

	return message;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;🧹 Pre-processing for Gemini AI&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Before sending the data to Gemini AI, the iFlow performs several pre-processing steps:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;🧩 Structuring the Input&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The metadata and resources are wrapped in XML under &amp;lt;Resources&amp;gt; and &amp;lt;FlowSteps&amp;gt; tags.&lt;/LI&gt;&lt;LI&gt;The entire structure is &lt;STRONG&gt;Base64 encoded&lt;/STRONG&gt; to ensure safe transmission.&lt;/LI&gt;&lt;LI&gt;The encoded data is embedded in a &lt;STRONG&gt;JSON payload&lt;/STRONG&gt; with system instructions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;🧠 Instruction Format&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "system_instruction": {
    "parts": [
      {
        "text": "You are an SAP CPI Developer... create a technical specification document."
      }
    ]
  },
  "contents": [
    {
      "parts": [
        {
          "inline_data": {
            "mime_type": "text/plain",
            "data": "${property.Base64Body}"
          }
        },
        {
          "text": "Here is the configuration... provide a detailed explanation..."
        }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":robot_face:"&gt;🤖&lt;/span&gt;Sending to Gemini AI&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The structured payload is sent to &lt;STRONG&gt;Gemini AI&lt;/STRONG&gt; using its REST API:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":globe_with_meridians:"&gt;🌐&lt;/span&gt;API Call&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Endpoint&lt;/STRONG&gt;: &lt;A href="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" target="_blank" rel="noopener nofollow noreferrer"&gt;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Method&lt;/STRONG&gt;: POST&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authorization:&amp;nbsp;x-goog-api-key added to request's headers&amp;nbsp;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Headers&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Content-Type: application/json&lt;/LI&gt;&lt;LI&gt;x-goog-api-key: {{Gemini_API_Key}}&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;For more information regarding Gemini APIs check &lt;A href="https://ai.google.dev/gemini-api/docs" target="_blank" rel="noopener nofollow noreferrer"&gt;Gemini Api Documentation.&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Sample Request Body:&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "contents": [
      {
        "parts": [
          {
            "text": "How does AI work?"
          }
        ]
      }
    ]
  }&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Sample Response:&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "AI, or Artificial Intelligence, is a broad field of computer science that aims to create machines that can perform tasks that typically require human intelligence. This includes things like learning, problem-solving, decision-making, understanding language, recognizing patterns, and even creativity.\n\nWhile \"AI\" can encompass many approaches, the dominant paradigm today is **Machine Learning (ML)**, and more specifically, **Deep Learning (DL)**. Here's a simplified breakdown of how it generally works:\n\n### The Core Ingredients of AI (especially Machine Learning)\n\n1.  **Data:** This is the \"fuel\" for AI. AI systems learn from vast amounts of data, much like humans learn from experience. This data can be anything:\n    *   **Labeled Data:** Images with descriptions (\"cat,\" \"dog\"), text with sentiment (\"positive,\" \"negative\"), or numerical tables with outcomes. This is used for **supervised learning**.\n    *   **Unlabeled Data:** Just raw images, text, or numbers without specific tags. This is used for **unsupervised learning** (finding patterns) or **reinforcement learning** (trial and error).\n\n2.  **Algorithms:** These are the \"recipes\" or \"instructions\" that the AI uses to learn from the data and make decisions. They are mathematical models and computational procedures. Examples include:\n    *   **Neural Networks:** Inspired by the human brain, these are layers of interconnected \"neurons\" that process information. Deep Learning uses *many* layers.\n    *   **Decision Trees:** Flowchart-like structures for making decisions.\n    *   **Regression Models:** Used for predicting continuous values (e.g., house prices).\n    *   **Clustering Algorithms:** Grouping similar data points together.\n\n3.  **Computing Power:** Training complex AI models, especially deep learning ones, requires immense computational resources.\n    *   **GPUs (Graphics Processing Units):** These are particularly good at parallel processing, making them ideal for the heavy mathematical computations involved in training neural networks.\n    *   **Cloud Computing:** Services like AWS, Google Cloud, and Azure provide scalable computing power for AI development.\n\n### How AI Learns (The Process)\n\nLet's use a common example: training an AI to recognize cats in photos.\n\n1.  **Data Collection &amp;amp; Preparation:**\n    *   You gather thousands, even millions, of images.\n    *   For supervised learning, you label each image: \"This is a cat,\" \"This is a dog,\" \"This is a car.\" This creates the dataset.\n\n2.  **Model Training (The Learning Phase):**\n    *   You feed this labeled dataset into a chosen algorithm (e.g., a deep neural network).\n    *   The algorithm starts by making random \"guesses\" about what constitutes a cat.\n    *   It then compares its guesses to the actual labels. If it misidentifies a cat as a dog, it incurs an \"error\" or \"loss.\"\n    *   Through a process called **backpropagation** (in neural networks), the algorithm adjusts its internal parameters (like the \"weights\" and \"biases\" of the connections between neurons) slightly to reduce that error.\n    *   This process is repeated thousands or millions of times, with the algorithm continuously refining its internal understanding of what patterns correlate to \"cat-ness.\"\n    *   Essentially, it learns to identify specific features (e.g., pointed ears, whiskers, specific fur patterns) and combine them to accurately classify an image as a \"cat.\"\n\n3.  **Model Evaluation:**\n    *   After training, the model is tested on a *separate* set of data it has never seen before (the \"test set\"). This ensures it has truly learned and isn't just memorizing the training data.\n    *   Its performance is measured by metrics like accuracy, precision, and recall.\n\n4.  **Inference (Prediction/Deployment):**\n    *   Once the model is trained and evaluated, it's ready for use.\n    *   When you feed a *new, unseen* image to the trained AI model, it applies the patterns it learned during training to predict whether the image contains a cat, dog, or something else. This prediction is usually very fast.\n\n### Key Branches and Concepts in AI\n\n*   **Machine Learning (ML):** The core idea is that computers learn from data without being explicitly programmed for every possible scenario.\n    *   **Supervised Learning:** Learning from labeled examples (e.g., predicting house prices based on features and past sales data).\n    *   **Unsupervised Learning:** Finding hidden patterns or structures in unlabeled data (e.g., segmenting customers into groups based on their purchasing behavior).\n    *   **Reinforcement Learning:** An agent learns by interacting with an environment, receiving rewards for good actions and penalties for bad ones (e.g., training an AI to play chess or control a robot).\n\n*   **Deep Learning (DL):** A *subset* of Machine Learning that uses Artificial Neural Networks with many layers (\"deep\" networks). This has been particularly successful in tasks like image recognition, natural language processing, and speech recognition due to its ability to learn complex patterns directly from raw data.\n\n*   **Natural Language Processing (NLP):** Enables computers to understand, interpret, generate, and manipulate human language (e.g., chatbots, translation services, spam filters).\n\n*   **Computer Vision (CV):** Allows computers to \"see\" and interpret visual information from images and videos (e.g., facial recognition, self-driving cars, medical image analysis).\n\n*   **Robotics:** Involves the design, construction, operation, and use of robots. AI often powers the \"brain\" of robots, enabling them to perceive their environment, navigate, and make decisions.\n\n### In Summary:\n\nAI, especially through Machine Learning and Deep Learning, works by providing algorithms with massive amounts of data. These algorithms then learn complex patterns and relationships within that data. Once trained, they can apply this learned \"knowledge\" to new, unseen data to make predictions, classify information, generate content, or make decisions, effectively mimicking aspects of human intelligence."
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 5,
    "candidatesTokenCount": 1294,
    "totalTokenCount": 2777,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 5
      }
    ],
    "thoughtsTokenCount": 1478
  },
  "modelVersion": "gemini-2.5-flash",
  "responseId": "w1234"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":inbox_tray:"&gt;📥&lt;/span&gt;Handling the Response&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The response contains a &lt;STRONG&gt;text block&lt;/STRONG&gt; with the generated documentation.&lt;/LI&gt;&lt;LI&gt;The iFlow uses &lt;STRONG&gt;XPath&lt;/STRONG&gt; and &lt;STRONG&gt;Content Modifier&lt;/STRONG&gt; steps to extract the relevant content.&lt;/LI&gt;&lt;LI&gt;The final output is stored for future access.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":floppy_disk:"&gt;💾&lt;/span&gt;Output Storage&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The AI-generated documentation is stored in a &lt;STRONG&gt;data store&lt;/STRONG&gt;, which can be:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;CPI’s internal datastore&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;External database&lt;/STRONG&gt; (e.g., SAP HANA, PostgreSQL)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;This allows teams to retrieve and review documentation at any time.&lt;/P&gt;&lt;H2 id="toc-hId-555988936"&gt;&lt;STRONG&gt;Step-by-Step guide on how to Implement&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;FONT color="#FF0000"&gt;&lt;STRONG&gt;N.B: Please Externalize all Parameters, URLs, and Keys when possible to avoid exposing them to AI model.&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;The Integration flow is divided into 4 processes:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-07-14 130552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287231i357C30DBC6651B85/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-14 130552.png" alt="Screenshot 2025-07-14 130552.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-488558150"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-292044645"&gt;1. Main Integration Process:&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_3-1752658031249.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287187i4FBB14A042CCBD2E/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_3-1752658031249.png" alt="AndrewFawzy_3-1752658031249.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Steps:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1. Timer Start:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;The flow runs once deployed&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AndrewFawzy_4-1752658031250.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287186iE1DACAA15E3AFF47/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_4-1752658031250.png" alt="AndrewFawzy_4-1752658031250.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. Set Parameters:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Both Flow name &lt;FONT color="#FF0000"&gt;represented by its ID&lt;/FONT&gt; and flow version of the flow that we want to create a TSD for are specified, additionally ExceptionLogging property is set to yes if we want to log error details.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_5-1752658031259.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287188iCB2D99329E744FCD/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_5-1752658031259.png" alt="AndrewFawzy_5-1752658031259.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="25%"&gt;Property Name&lt;/TD&gt;&lt;TD width="25%"&gt;Source Type&lt;/TD&gt;&lt;TD width="25%"&gt;Value&lt;/TD&gt;&lt;TD width="25%"&gt;Description&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;FlowName&lt;/TD&gt;&lt;TD width="25%"&gt;Constant&lt;/TD&gt;&lt;TD width="25%"&gt;{{Flow_ID}}&lt;/TD&gt;&lt;TD width="25%"&gt;Specify Flow ID&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;FlowVersion&lt;/TD&gt;&lt;TD width="25%"&gt;Constant&lt;/TD&gt;&lt;TD width="25%"&gt;{{Flow_Version}}&lt;/TD&gt;&lt;TD width="25%"&gt;Specify Flow Version&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;ExceptionLogging&lt;/TD&gt;&lt;TD width="25%"&gt;Constant&lt;/TD&gt;&lt;TD width="25%"&gt;{{logException}}&lt;/TD&gt;&lt;TD width="25%"&gt;use Yes if you want to log exceptions&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Parallel multicast:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A parallel multicast is used to execute the local integration processes "Get Flow Resources" and "Get Flow Steps" at the same time.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_6-1752658031262.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287189i08A41E1C6E205717/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_6-1752658031262.png" alt="AndrewFawzy_6-1752658031262.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;4. Process Calls and Gather&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Each of the parallel branches includes a Process Call component to Call the local Integration Processes.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_7-1752658031267.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287191i2820B964135D8694/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_7-1752658031267.png" alt="AndrewFawzy_7-1752658031267.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_8-1752658031274.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287190i5ACE37CADD382BAD/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_8-1752658031274.png" alt="AndrewFawzy_8-1752658031274.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;5. Join and Gather&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A join component is used to bring the messages from different routes into a single one, and the gather aggregates the different payloads into a single payload.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_9-1752658031280.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287192iBE8282596EC1B585/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_9-1752658031280.png" alt="AndrewFawzy_9-1752658031280.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;6. Gemini AI process Call:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;The returned response from the previous Process Calls is sent to the Gemini AI Process call for further processing and sending to Gemini AI.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_10-1752658031285.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287193i53E96F9204F06A18/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_10-1752658031285.png" alt="AndrewFawzy_10-1752658031285.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;7. Save response:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A Datastore is used to saves the response returned by the Gemini Process Call, it sets the ID of the message to the name of the IFlow.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_11-1752658031293.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287194i49F29CEFD1539432/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_11-1752658031293.png" alt="AndrewFawzy_11-1752658031293.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;8. Exception Handling:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;An exception subprocess is added to all Local Integration processes to handle exceptions.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_12-1752658031294.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287195i7D205EDF4C5E57A3/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_12-1752658031294.png" alt="AndrewFawzy_12-1752658031294.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Code:&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message;
def Message processData(Message message) {
  // get a map of properties
  def map = message.getProperties();
  def body = message.getBody(java.lang.String) as String;
  // get an exception java class instance
  def ex = map.get("CamelExceptionCaught");
  def exceptionLogging = map.get("ExceptionLogging");
  if (exceptionLogging != null &amp;amp;&amp;amp; exceptionLogging == "Yes" &amp;amp;&amp;amp; ex != null) {
    def messageLog = messageLogFactory.getMessageLog(message);
    messageLog.addAttachmentAsString("Exception Body ", body, "text/plain");
    // an http adapter throws an instance of
    // org.apache.camel.component.ahc.AhcOperationFailedException
    if (ex.getClass().getCanonicalName().equals(
            "org.apache.camel.component.ahc.AhcOperationFailedException")) {
      // save the http error response as a message attachment
      messageLog.addAttachmentAsString(
          "http.ResponseBody", ex.getResponseBody(), "text/plain");
      // copy the http error response to an exchange property
      message.setProperty("http.ResponseBody", ex.getResponseBody());
      // copy the http error response to the message body
      message.setBody(ex.getResponseBody());
      // copy the value of http error code (i.e. 500) to a property
      message.setProperty("http.StatusCode", ex.getStatusCode());
      // copy the value of http error text (i.e. "Internal Server Error") to a
      // property
      message.setProperty("http.StatusText", ex.getStatusText());
    }
  }
  return message;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-95531140"&gt;2. Get Flow Steps&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_13-1752658031297.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287196iD36B21CB0E99AE90/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_13-1752658031297.png" alt="AndrewFawzy_13-1752658031297.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1. Get Flow Configuration File:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&amp;nbsp; &lt;/STRONG&gt;GET&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Address:&amp;nbsp;&lt;/STRONG&gt;{{CPI_Tenant_URL}}/IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/$value&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication:&lt;/STRONG&gt; Client Secret Credential&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For creating the Oauth 2.0 client secret credential please follow this &lt;A href="https://www.abusinesstech.com/post/understanding-oauth2-client-credentials-in-sap-cpi" target="_blank" rel="noopener nofollow noreferrer"&gt;Post&lt;/A&gt;.&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_14-1752658031303.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287197i1C1B402E73F37CE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_14-1752658031303.png" alt="AndrewFawzy_14-1752658031303.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. Zip Splitter:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Zip splitter is used to iterate on the files within the zip file returned by the previous step and selects only the Flow Configuration File based on the file name pattern “.iflw”&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_15-1752658031308.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287198i2B92D0ED0FC6CFDD/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_15-1752658031308.png" alt="AndrewFawzy_15-1752658031308.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Remove Namespace XSLT&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;This step is used to remove unwanted namespaces from the IFlow's configuration file using xslt mapping file&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_16-1752658031314.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287200i7AAB520CC8C36111/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_16-1752658031314.png" alt="AndrewFawzy_16-1752658031314.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Code:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;&amp;lt;xsl:output method="xml" version="1.0" encoding="UTF-8" /&amp;gt;

        &amp;lt;xsl:template match="*"&amp;gt;

                &amp;lt;xsl:element name="{local-name()}" &amp;gt;

                        &amp;lt;xsl:apply-templates select="@* | node()"/&amp;gt;

                &amp;lt;/xsl:element&amp;gt;

        &amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;4. XML Modifier&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Remove xml declaration and external DTDs&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_17-1752658031318.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287199i20F540AA7DE77221/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_17-1752658031318.png" alt="AndrewFawzy_17-1752658031318.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;5. Zip Splitter Gather:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A gather is used to aggregate the payloads from the zip splitter into a single payload.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_18-1752658031321.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287201i7B7AC3B53B6D07A4/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_18-1752658031321.png" alt="AndrewFawzy_18-1752658031321.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--176213734"&gt;3. Get Flow Resources&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_19-1752658031324.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287202i8CF46D06728768CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_19-1752658031324.png" alt="AndrewFawzy_19-1752658031324.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1.Get Resources List:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&amp;nbsp; &lt;/STRONG&gt;GET&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Address:&amp;nbsp;&lt;/STRONG&gt;{{CPI_Tenant_URL}}/IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/Resources&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication:&lt;/STRONG&gt; Client Secret Credential&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For creating the Oauth 2.0 client secret credential please follow this &lt;A href="https://www.abusinesstech.com/post/understanding-oauth2-client-credentials-in-sap-cpi" target="_blank" rel="noopener nofollow noreferrer"&gt;Post&lt;/A&gt;.&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_20-1752658031333.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287203i84CB38555C7DDB7A/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_20-1752658031333.png" alt="AndrewFawzy_20-1752658031333.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. Remove Namespaces&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;This step is used to remove unwanted namespaces from the IFlow's configuration file using xslt mapping file&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_21-1752658031337.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287204iCEBBFBF255098C87/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_21-1752658031337.png" alt="AndrewFawzy_21-1752658031337.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;XSLT :&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;&amp;lt;xsl:output method="xml" version="1.0" encoding="UTF-8" /&amp;gt;

        &amp;lt;xsl:template match="*"&amp;gt;

                &amp;lt;xsl:element name="{local-name()}" &amp;gt;

                        &amp;lt;xsl:apply-templates select="@* | node()"/&amp;gt;

                &amp;lt;/xsl:element&amp;gt;

        &amp;lt;/xsl:template&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Iterate over Returned Resource List&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;General splitter is used to iterate over resources using xpath '//entry' as each resource is enclosed with "entry" XML tag as shown in the sample request mentioned in the "Endpoints Section".&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_22-1752658031342.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287205iE1992D7C51232DC0/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_22-1752658031342.png" alt="AndrewFawzy_22-1752658031342.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;4. Extract Resource name and&amp;nbsp; Resource type&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Those values are extracted to be used in retrieving the resource in subsequent step using Xpaths.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_23-1752658031348.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287206i96D937DDF4D3301B/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_23-1752658031348.png" alt="AndrewFawzy_23-1752658031348.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Exchange Properties:&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Name&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;//Name&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;ResourceType&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;//ResourceType&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Url&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;//entryId&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;5. Get single resource value&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&amp;nbsp; &lt;/STRONG&gt;GET&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Address:&amp;nbsp;&lt;/STRONG&gt;{{CPI_Tenant_URL}}/IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/Resources(Name='${property.Name}',ResourceType='${property.ResourceType}')/$value&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication:&lt;/STRONG&gt; Client Secret Credential&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For creating the Oauth 2.0 client secret credential please follow this &lt;A href="https://www.abusinesstech.com/post/understanding-oauth2-client-credentials-in-sap-cpi" target="_blank" rel="noopener nofollow noreferrer"&gt;Post&lt;/A&gt;.&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_24-1752658031356.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287208i7FE1CA60DF35C987/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_24-1752658031356.png" alt="AndrewFawzy_24-1752658031356.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;6. Set Resource body by enclosing the resource value by its name&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_25-1752658031363.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287207i4DDF6E142EE11C6F/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_25-1752658031363.png" alt="AndrewFawzy_25-1752658031363.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;${property.Name}&amp;gt;
    ${in.body}
&amp;lt;/${property.Name}&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;7. Gather Resources:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A gather step is used to aggregate all retrieved resources into a single payload.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_26-1752658031369.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287209iFDF961ED8C258226/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_26-1752658031369.png" alt="AndrewFawzy_26-1752658031369.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;8. Content Modifier:&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;A content modifier is used to add XML tags for Gemini to identify the resources.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_27-1752658031377.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287210iD9D9B8AE86771B32/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_27-1752658031377.png" alt="AndrewFawzy_27-1752658031377.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Sample:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;Resources&amp;gt;
    ${in.body}
&amp;lt;/Resources&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId--372727239"&gt;&amp;nbsp;4. Gemini AI utilization&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_28-1752658031382.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287211i0336D1ACBF34E113/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_28-1752658031382.png" alt="AndrewFawzy_28-1752658031382.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1. Base-64 Encoding Step:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;The XML message constructed at the previous step is encoded using 64-Base to be sent to the AI model as plain text.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_29-1752658031389.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287212i32862DA1C62E50E0/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_29-1752658031389.png" alt="AndrewFawzy_29-1752658031389.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. Formatting Body&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Remove unwanted characters Remove new lines, and carriage return&lt;/P&gt;&lt;P&gt;Code:&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message;
 def Message processData(Message message) {
     def body = message.getBody(String);
     String backspace = '\n' as char;
     String enter = '\r' as char;
     body = body.replace(backspace, "");
     body = body.trim();
     body = body.replace(enter, "");
     body = body.trim();
     message.setBody(body);
    return message;
 }&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Add headers and Create body&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Creates the JSON structure payload that is send to the Gemini AI API to generate the documentation and adds a Message Header "Content-Type" with value "application/json".&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;&lt;STRONG&gt;For more information regarding Gemini APIs check &lt;A href="https://ai.google.dev/gemini-api/docs" target="_blank" rel="noopener nofollow noreferrer"&gt;Gemini Api Documentation.&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_32-1752658031419.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287215i69A1A98D8EF323AF/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_32-1752658031419.png" alt="AndrewFawzy_32-1752658031419.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Body set to &lt;STRONG&gt;Expression&lt;/STRONG&gt;:&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "system_instruction": {
      "parts": [
        {
          "text": "You are an SAP CPI Developer, your main role is to get SAP CPI Iflows configuration and form them create a technical specification document."
        }
      ]
    },
    "contents": [
      {
        "parts": [
          {"inline_data": {"mime_type": "text/plain", "data": "${property.Base64Body}" } },
          {"text": "Here is the configurations create a Tsd providing a detailed explanation on what this iflow does and steps involved and documentation of scripts and mappings, you will find in the text the following an xml tag definition this includes the flow steps and another tag Resources which includes all scripts, mappings used are attached"}
        ]
      }
    ]
  }&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;4. POST&amp;nbsp; request to Gemini API&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&amp;nbsp; &lt;/STRONG&gt;POST&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Address:&amp;nbsp;&lt;SPAN&gt;&lt;A class="" title="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generatecontent" href="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent" target="_blank" rel="noreferrer noopener nofollow"&gt;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent&lt;/A&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication:&lt;/STRONG&gt;&amp;nbsp;added as a request header "x-goog-api-key"&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Headers:&amp;nbsp;&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Content-Type: &lt;/STRONG&gt;application/json&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;x-goog-api-key:&amp;nbsp;&lt;/STRONG&gt;{{Gemini_API_Key}}&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For creating your api key follow this &lt;A href="https://ai.google.dev/gemini-api/docs/api-key#rest" target="_blank" rel="noopener nofollow noreferrer"&gt;Gemini API Key.&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_0-1752742358554.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287757iD277BA304E767DAB/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_0-1752742358554.png" alt="AndrewFawzy_0-1752742358554.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;5. JSON to XML Converter&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;This step is used to convert the JSON body to XML to be able to extract response using Xpath.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_34-1752658031435.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287217i94B5BA86159EB427/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_34-1752658031435.png" alt="AndrewFawzy_34-1752658031435.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;6. Extract documentation from Payload:&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;Xpath is used to extract the response from the payload and stored in an Exchange Property "response" and within the same content modifier the body is set to ${property.response}&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_35-1752658031448.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287218i7AD708E7728D22BA/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_35-1752658031448.png" alt="AndrewFawzy_35-1752658031448.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="AndrewFawzy_36-1752658031455.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287219iFE52EE4FD6916893/image-size/large?v=v2&amp;amp;px=999" role="button" title="AndrewFawzy_36-1752658031455.png" alt="AndrewFawzy_36-1752658031455.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId--569240744"&gt;Deployment and Document Generation&lt;/H3&gt;&lt;P&gt;The Flow was deployed setting the Parameters to flow name and version of this IFlow.&lt;/P&gt;&lt;P&gt;Here was the response saved to the DataStore:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;Technical Specification Document: CPI Iflow - Gemini AI Integration for Technical Documentation
1. Introduction

This document outlines the technical specifications for a CPI (Cloud Platform Integration) iflow designed to automatically generate technical specification documents (TSD) from CPI iflow configurations. This iflow leverages the Gemini AI model for natural language processing and document generation.

2. Iflow Overview

The iflow automates the process of extracting iflow configuration and resources, sending them to the Gemini AI model, and receiving a generated TSD as output. The process comprises the following steps:

Triggering: A timer-based start event initiates the process at regular intervals.
Configuration Retrieval: Configuration details of the Iflow including FlowSteps and Resources like scripts and mappings are retrieved.
Data Transformation: The configurations are extracted and unwanted namespace are removed.
AI Processing: The configuration data is sent to Gemini AI model to generate the TSD based on the configurations
TSD Storage: The generated TSD is stored in a datastore.
3. Flow Steps

The iflow is structured into several interconnected integration processes and flow steps.

3.1 Main Integration Process (Process_1Integration Process)

StartEvent_4 (Start Timer):
Type: Timer Start Event
Description: Initiates the iflow execution based on a defined schedule.
Schedule: The process is scheduled to run every 5 minutes
CallActivity_30439543 (Set Parameters):
Type: Content Enricher
Description: Sets the properties ExceptionLogging, FlowVersion, and FlowName for the iflow. These properties are used in the subsequent steps for retrieving the iflow configuration and resources.
Properties:
ExceptionLogging: Set to {{ExceptionLogging}} (presumably a value defined in an externalized parameter). It controls the exception handling of Iflow.
FlowVersion: Set to {{FlowVersion}} (presumably a value defined in an externalized parameter). The version of the Iflow to retrieve.
FlowName: Set to {{FlowName}} (presumably a value defined in an externalized parameter). The name of the Iflow to retrieve.
ParallelGateway_30439597 (Parallel Multicast):
Type: Parallel Multicast
Description: Splits the process into two parallel branches to retrieve flow steps and flow resources concurrently.
Branch 1: Get Flow Steps
CallActivity_30439599 (Get Flow Steps):
Type: Process Call (Non-Looping Process)
Description: Calls the Process_30439551 local integration process to retrieve the flow steps configuration.
Branch 2: Get Flow Resources
CallActivity_30439601 (Get Flow Resources):
Type: Process Call (Non-Looping Process)
Description: Calls the Process_30439570 local integration process to retrieve the iflow's resources (scripts, mappings).
ParallelGateway_30439539 (Join):
Type: Join
Description: Waits for both parallel branches (Get Flow Steps and Get Flow Resources) to complete before merging the results.
CallActivity_30439533 (Gather flow and resources):
Type: Gather
Description: Combines the results from the two parallel branches (flow steps configuration and resources).
CallActivity_30439650 (Gemini AI):
Type: Process Call (Non-Looping Process)
Description: calls Process_30439625 Gemini AI processing to create the TSD based on the gathered Iflow definitions and Iflow Resource configurations
CallActivity_30439545 (Save Response to DataStore):
Type: Data Store Operations (Put)
Description: Saves the Gemini AI processing output (TSD) to a datastore named IflowDocumentation.
Configuration:
StorageName: IflowDocumentation
messageId: ${property.FlowName}Doc (Unique identifier for the datastore entry)
expire: 30 (Retention period in days)
visibility: local(available only to the current iflow)
EndEvent_2 (End):
Type: Message End Event
Description: Ends the iflow execution.
3.2 Get Flow Steps (Process_30439551)

StartEvent_30439552 (Start):
Type: Start Event
Description: The process is triggered from Main Integration process by calling the Process ID
ServiceTask_30439555 (GetFlow):
Type: External Call (HTTP)
Description: Retrieves Iflow Definitions, version, and ID from CPI OData API (IntegrationDesigntimeArtifacts).
Address: {{CPI_Tenant_URL}}IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/$value
Authentication: Client Secret Authentication using {{CPI_OAuth_Cred}} credential.
CallActivity_30439556 (Zip Splitter):
Type: Splitter (Zip Splitter)
Description: Splits the retrieved .iflw file content into individual entries, assuming the content comes as a zipped file.
CallActivity_30439557 (Remove Namespaces):
Type: Mapping
Description: Removes unnecessary XML namespaces from the XML structure using XSLTMapping1.xsl.
CallActivity_30439558 (XML Modifier):
Type: XML Modifier
Description: Further modifies the XML by removing external DTDs and XML declarations to clean the XML structure.
CallActivity_30439560 (Zip Splitter Gather):
Type: Gather
Description: Concatenates the split files into a single message body.
EndEvent_30439553 (End):
Type: End Event
Description: Completes the local integration process
3.3 Get Flow Resources (Process_30439570)

StartEvent_30439571 (Start):
Type: Start Event
Description: The process is triggered from Main Integration process by calling the Process ID
ServiceTask_30439574 (Get Resources):
Type: External Call (HTTP)
Description: Retrieves a list of Resources for the specified Iflow from CPI OData API.
Address: {{CPI_Tenant_URL}}IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/Resources
Authentication: Client Secret Authentication using {{CPI_OAuth_Cred}} credential.
CallActivity_30439575 (Remove Namespaces):
Type: Mapping
Description: Removes unnecessary XML namespaces from the retrieved resource data using XSLTMapping1.xsl.
CallActivity_30439576 (iterate over resources):
Type: Splitter (General Splitter)
Description: Splits the list of resources into individual resource entries to process each separately. It splits the resource from //entry xpath
CallActivity_30439577 (Extract Parameters):
Type: Content Enricher
Description: Extracts parameters such as Name, ResourceType, and URL from each resource entry. The parameters are extracted using xpath. The resources have been splitted from //entry therefore this is used as a xpath
**Properties**:
Name: //Name
ResourceType: //ResourceType
Url: //entry/id
ServiceTask_30439578 (Get Single Resource):
Type: External Call (HTTP)
Description: Retrieves the content of each resource based on extracted URL.
Address: {{CPI_Tenant_URL}}IntegrationDesigntimeArtifacts(Id='${property.FlowName}',Version='${property.FlowVersion}')/Resources(Name='${property.Name}',ResourceType='${property.ResourceType}')/$value
Authentication: Client Secret Authentication using {{CPIOAuthCred}} credential.
CallActivity_30439580 (Set Resource Body):
Type: Content Enricher
Description: Creates body for each extracted resources.
Configuration
wrapContent: "&amp;lt;${property.Name}&amp;gt; ${in.body} &amp;lt;/${property.Name}&amp;gt;"
CallActivity_30439581 (Gather Resources):
Type: Gather
Description: Concatenates all extracted resource content into a single XML structure.
CallActivity_30439582 (Add Resource Tag):
Type: Content Enricher
Description: Wraps the concatenated resource content within &amp;lt;Resources&amp;gt; tags.
Configuration
wrapContent: "&amp;lt;Resources&amp;gt;${in.body}&amp;lt;/Resources&amp;gt;"
EndEvent_30439572 (End):
Type: End Event
Description: Completes the local integration process
3.4 Gemini AI (Process_30439625)

StartEvent_30439626 (Start):
Type: Start Event
Description: The process is triggered from Main Integration process by calling the Process ID
CallActivity_30439629 (Base64 Encoder):
Type: Encoder (Base64 Encode)
Description: Encodes the body, which contains Iflow definitions and Resources, to base64
CallActivity_30439630 (Format Body):
Type: Script
Description: Removes special characters, trims the body and replaces enter and backspace characters
CallActivity_30439631 (Save and Create Body):
Type: Content Enricher
Description: Create HTTP body to be sent to Gemini API
Properties:
content-type: application/json
wrapContent:
{
    "system_instruction": {
      "parts": [
        {
          "text": "You are an SAP CPI Developer, your main role is to get SAP CPI Iflows configuration and form them create a technical specification document."
        }
      ]
    },
    "contents": [
      {
        "parts": [
          {"inline_data": {"mime_type": "text/plain", "data": "${property.Base64Body}" } },
          {"text": "Here are the configurations, create a Tsd providing a detailed explanation of what this iflow does and steps involved and documentation of scripts and mappings, you will find in the document attached the following an xml tag definitions this includes the flow steps and another tag Resources which includes all scripts, mappings used are attached"}
        ]
      }
    ]
  }
ServiceTask_30439632 (Send to Gemini):
Type: External Call (HTTP)
Description: Sends the formatted request to the Gemini AI endpoint.
Address: {{Gemini_API_Endpoint}}
HTTP Method: POST
HTTP Headers: 
Content-Type: application/json
x-goog-api-key: {{Gemini_API_Key}}
CallActivity_30439633 (JSON to XML Converter):
Type: JSON to XML Converter
Description: Converts the JSON response from Gemini AI into an XML structure.
addXMLRootElement: true
additionalRootElementName: root
CallActivity_30439634 (Extract Response):
Type: Content Enricher
Description: Extracts the generated TSD content from the XML response.
Properties
response: //text The response property is extracted using xpath from Gemini API
EndEvent_30439627 (End):
Type: End Event
Description: Completes the local integration process
4. Resources

This section describes the resources used in the iflow, including scripts, mappings, and credentials.

Scripts
script5.groovy:
Description: This script is used to format the XML body before it is passed to Gemini.
It removes special characters, trims the body and replaces enter and backspace characters
script6.groovy:
Description: Exception Handling script to log exception message along with Iflow payload in case of error.
Mappings
XSLTMapping1.xsl:
Description: Removes namespaces from a give xml
Credentials
{{CPIBasicCred}}: Client Secret authentication credential used to access the CPI OData API.
{{Gemini_API_Key}}: The Gemini API key.
5. Parameters

The following externalized parameters are used in the iflow:

{{FlowName}}: Name of the iflow to document.
{{FlowVersion}}: Version of the iflow to document.
{{CPI_Tenant_URL}}: Base URL of the CPI tenant.
{{Gemini_API_Endpoint}}: The Gemini API endpoint.
{{Client_Secret_Auth}}: Authentication method to be used
6. Error Handling

The iflow uses a local exception subprocess (SubProcess_30439605, SubProcess_30439612, SubProcess_30439619, SubProcess_30439642) to catch and handle potential errors:

StartEvent_30439606, StartEvent_30439613, StartEvent_30439620, StartEvent_30439643 (Error Start): Start events of the exception subprocesses, triggered when an error occurs.
CallActivity_30439609, CallActivity_30439616, CallActivity_30439623, CallActivity_30439646 (Print Exception): Script call activities that logs exception details into MPL.
EndEvent_30439607, EndEvent_30439614, EndEvent_30439621, EndEvent_30439644 (End): End event of the exception subprocesses.
7. Security Considerations

Sensitive information like CPI credentials and the Gemini API key must be stored securely using CPI's secure parameter store.
Access to the iflow and its configuration should be restricted to authorized personnel only.
8. Deployment

The iflow can be deployed through the SAP CPI web UI or using the Cloud Management API.
Ensure all externalized parameters are configured appropriately.
9. Monitoring

Monitor the iflow execution logs in CPI for any errors or performance bottlenecks.
Track datastore entries in IflowDocumentation datastore for completed TSD generation runs.
10. Notes

The quality of the generated TSD depends on the Gemini AI model.
The accuracy of the generated documentation relies on the configurations of the flowsteps.
This document serves as a guide for developers to support and enhance the integration.&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId--472351242"&gt;&lt;STRONG&gt;Benefits and Use Cases&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Here’s how the solution delivers &lt;STRONG&gt;real business value&lt;/STRONG&gt; across several dimensions:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;Benefits of Automated iFlow Documentation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":stopwatch:"&gt;⏱&lt;/span&gt;️ Time Saved&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Manual documentation&lt;/STRONG&gt; of iFlows typically involves opening each flow, inspecting steps, copying scripts, and writing descriptions—this can take &lt;STRONG&gt;hours per flow&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Your automated approach reduces this to &lt;STRONG&gt;minutes&lt;/STRONG&gt;, or even &lt;STRONG&gt;seconds&lt;/STRONG&gt;, by:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Programmatically retrieving metadata and resources&lt;/LI&gt;&lt;LI&gt;Using Gemini AI to generate structured documentation instantly&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;This is especially impactful in environments with &lt;STRONG&gt;dozens or hundreds of iFlows&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":clipboard:"&gt;📋&lt;/span&gt;Consistency in Documentation&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Manual documentation often varies in &lt;STRONG&gt;structure&lt;/STRONG&gt;, &lt;STRONG&gt;terminology&lt;/STRONG&gt;, and &lt;STRONG&gt;depth&lt;/STRONG&gt;, depending on who writes it.&lt;/LI&gt;&lt;LI&gt;Gemini AI ensures:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Standardized format&lt;/STRONG&gt; across all iFlows&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Consistent terminology&lt;/STRONG&gt; and technical descriptions&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Repeatable output&lt;/STRONG&gt;, regardless of who triggers the flow&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;This improves &lt;STRONG&gt;readability&lt;/STRONG&gt;, &lt;STRONG&gt;maintainability&lt;/STRONG&gt;, and &lt;STRONG&gt;collaboration&lt;/STRONG&gt; across teams.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;🧾 Use in Audits, Onboarding, and Handovers&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Audits&lt;/STRONG&gt;: Automatically generated documentation provides a clear, traceable record of integration logic and configurations, helping meet compliance requirements.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Onboarding&lt;/STRONG&gt;: New developers or integration consultants can quickly understand existing flows without needing to reverse-engineer them.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Handovers&lt;/STRONG&gt;: When projects transition between teams or vendors, having up-to-date technical specs ensures smooth knowledge transfer and reduces risk.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--668864747"&gt;&lt;STRONG&gt;Conclusion and Next Steps&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;In this project, we built an automated solution that leverages the&amp;nbsp;&lt;STRONG&gt;SAP Integration Suite OData APIs&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;Gemini AI&lt;/STRONG&gt;&amp;nbsp;to generate technical documentation for any iFlow within a subaccount. The solution:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Dynamically retrieves iFlow metadata and resources (Groovy scripts, XSLT, EDMX)&lt;/LI&gt;&lt;LI&gt;Prepares and formats the data into a structured context&lt;/LI&gt;&lt;LI&gt;Sends it to Gemini AI to generate a detailed technical specification&lt;/LI&gt;&lt;LI&gt;Stores the output in a persistent data store for future reference&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;This approach significantly reduces manual effort, ensures consistency, and supports better documentation practices across integration landscapes&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;H2 id="toc-hId--865378252"&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":raising_hands:"&gt;🙌&lt;/span&gt;Try It, Share It, Connect!&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;STRONG&gt;If you found this solution helpful or inspiring, here’s how you can take the next step:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;&amp;nbsp;Try It Out&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Clone or replicate the approach in your own SAP Integration Suite tenant.&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Customize it to fit your documentation standards or integration landscape.&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Experiment with different AI prompts or formats to tailor the output.&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":speech_balloon:"&gt;💬&lt;/span&gt;&amp;nbsp;Share Your Feedback&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;I’d love to hear how this worked for you!&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Did it save time? Improve clarity? Spark new ideas?&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Drop your thoughts in the comments or reach out directly.&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Your feedback and collaboration can help evolve this into an even more powerful tool for the SAP Integration community.&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/automating-iflow-documentation-with-sap-integration-suite-and-gemini-ai/ba-p/14153802"/>
    <published>2025-07-18T14:27:58.950000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/event-driven-architecture-postman-to-solace-event-publishing-using-sap-cpi/ba-p/14151036</id>
    <title>Event driven architecture Postman to Solace: Event Publishing Using SAP CPI  : part-4</title>
    <updated>2025-07-20T14:40:42.941000+02:00</updated>
    <author>
      <name>pavanKolla</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2108029</uri>
    </author>
    <content>&lt;P&gt;Hello SAP Community!&lt;/P&gt;&lt;P&gt;In this blog i would like to share the implementation of publisher part of my use case Event driven architecture using solace Event broker.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-1 : Setup a postman :&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Use the method POST and use the SAP cpi endpoint in the url section&amp;nbsp; and hit with the target payload that i am given below&lt;/P&gt;&lt;P&gt;Payload:&lt;/P&gt;&lt;P&gt;If its product's:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;Products&amp;gt;
    &amp;lt;Product&amp;gt;
        &amp;lt;ProductID&amp;gt;P1001&amp;lt;/ProductID&amp;gt;
        &amp;lt;ProductName&amp;gt;Wireless Mouse&amp;lt;/ProductName&amp;gt;
        &amp;lt;Category&amp;gt;Electronics&amp;lt;/Category&amp;gt;
        &amp;lt;Price&amp;gt;25.99&amp;lt;/Price&amp;gt;
        &amp;lt;Currency&amp;gt;USD&amp;lt;/Currency&amp;gt;
        &amp;lt;StockQuantity&amp;gt;150&amp;lt;/StockQuantity&amp;gt;
        &amp;lt;UnitOfMeasure&amp;gt;EA&amp;lt;/UnitOfMeasure&amp;gt;
        &amp;lt;Supplier&amp;gt;LogiTech Inc.&amp;lt;/Supplier&amp;gt;
    &amp;lt;/Product&amp;gt;
 &amp;lt;/Products&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If it's suppliers :&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;Suppliers&amp;gt;
    &amp;lt;Supplier&amp;gt;
        &amp;lt;ID&amp;gt;P1001&amp;lt;/ID&amp;gt;
        &amp;lt;Name&amp;gt;Wireless Mouse&amp;lt;/Name&amp;gt;
        &amp;lt;Category&amp;gt;Electronics&amp;lt;/Category&amp;gt;
        &amp;lt;Price&amp;gt;27.99&amp;lt;/Price&amp;gt;
        &amp;lt;Currency&amp;gt;USD&amp;lt;/Currency&amp;gt;
        &amp;lt;StockQuantity&amp;gt;200&amp;lt;/StockQuantity&amp;gt;
        &amp;lt;UnitOfMeasure&amp;gt;EA&amp;lt;/UnitOfMeasure&amp;gt;
        &amp;lt;Supplier&amp;gt;LogiTech Inc.&amp;lt;/Supplier&amp;gt;
    &amp;lt;/Supplier&amp;gt;
&amp;lt;/Suppliers&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step-2: Implementing layer-1-Routing layer:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;1.start with HTTPS sender adapter&lt;/P&gt;&lt;P&gt;2.Add the Groovy Script to separate the target 2nd layer&lt;/P&gt;&lt;P&gt;Here is the groovy code :&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message
import groovy.util.XmlSlurper

Message processData(Message message) {
    def body = message.getBody(String) // Get XML as a string
    def xml = new XmlSlurper().parseText(body) // Parse XML

    def targetRoute = ""

    // Check the root element or a specific tag (adjust as needed)
    if (xml.name() == "Products") {
        targetRoute = "publisher_solace_inbound_products_layer-2"
    } else if (xml.name() == "Suppliers") {
        targetRoute = "publisher_solace_inbound_suppliers_layer_2"
    } else {
        targetRoute = "publisher_solace_inbound_books_layer_2"
    }

    message.setProperty("routeTo", targetRoute) // Store the route in a property
    return message
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Implementation: This is the Routing layer paste the groovy code that i given above .&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="layer1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285791iF48C381B451E6CC3/image-size/large?v=v2&amp;amp;px=999" role="button" title="layer1.png" alt="layer1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Implement the Exception Handling like the below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1ex.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285793i034C0EBC623E6091/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1ex.png" alt="l1ex.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Declare the content modifier like below add Exchange properties like below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1cm1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285792i7E82A8BC3E4CC29C/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1cm1.png" alt="l1cm1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Add the routing condition to separate whether it is recoverable/non-recoverable errors&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1r1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285798i2BEB5132CC69BB50/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1r1.png" alt="l1r1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1r2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285799i63C98E8D05D6DDCB/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1r2.png" alt="l1r2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Based the routing condition above implement the Local Integration Process separately this is the&amp;nbsp;Local Integration Process for the retry purpose called by using process call&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lip1.png" style="width: 713px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285794iC71111671BFF36F5/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lip1.png" alt="l1lip1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Implement the content modifier as like the below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lipcm1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285800i9F49724C5DD8D6B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lipcm1.png" alt="l1lipcm1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Through process direct adapter call the another layers that are global retry layers and jms retry for retry purpose&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lip1processdir.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285803i580F57A13C5E319E/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lip1processdir.png" alt="l1lip1processdir.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Based the routing condition above implement the Local Integration Process separately this is the&amp;nbsp;Local Integration Process for the Mail triggering if any Business logic/non-recoverable error occurs called by using process call&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lip2.png" style="width: 697px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285795i85B14D3622E34C66/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lip2.png" alt="l1lip2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Implement the content modifier like the below for mail triggering&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lip2cm1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285801i88F68C1F014C0191/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lip2cm1.png" alt="l1lip2cm1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Through process direct adapter call the mail triggering iflow&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l1lip2processdir.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285804iCBB81ECE35FC195B/image-size/large?v=v2&amp;amp;px=999" role="button" title="l1lip2processdir.png" alt="l1lip2processdir.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-3 : Implementing layer -2: publishing layer :&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Here in this layer the data which is coming from the layer 1 is published to the solace queues and in this layer there are multiple layer-2's like products layer2 ,suppliers layer2,books layer2 bases on the first layer the target 2nd layer been hitted.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Implementation:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Configure the Process direct sender adapter that is coming from the layer-1&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="layer2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285806i754DFB221444871C/image-size/large?v=v2&amp;amp;px=999" role="button" title="layer2.png" alt="layer2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2processdirect.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285813iC9BC2FB6DB5A2FF1/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2processdirect.png" alt="l2processdirect.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Configure the Advance Event Mesh adapter to publish the data into the solace queues, before configuring it make sure you had setup the solace credentials in the Security material that i had given in the part-2 of my blog series&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2aemq.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285807i085F908775E53A57/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2aemq.png" alt="l2aemq.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2aemq2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285808iF7E9F37A30C0DE50/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2aemq2.png" alt="l2aemq2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Setup the Exception handling for retry purpose&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2ex.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285809iC2E0965EFC5D7620/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2ex.png" alt="l2ex.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Implement the Local Integration process for retry purpose&amp;nbsp; as same as the layer-1 above&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2lip1.png" style="width: 732px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285810i1F04D0EE85B899F7/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2lip1.png" alt="l2lip1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Implement the Local Integration process for mail triggering as same like the layer -1 above&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="l2lip2.png" style="width: 702px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285811i2E9A319F0145CB4E/image-size/large?v=v2&amp;amp;px=999" role="button" title="l2lip2.png" alt="l2lip2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;If you want to know how to implement Error handling using jms please refer my blog .&lt;/P&gt;&lt;P&gt;Link - [ &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/handling-connectivity-and-recoverable-errors-in-sap-cpi-with-jms-queues/ba-p/14137974" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-members/handling-connectivity-and-recoverable-errors-in-sap-cpi-with-jms-queues/ba-p/14137974&lt;/A&gt;&amp;nbsp;]&lt;/P&gt;&lt;P&gt;I would continue the Subscriber part in the part-5 Stay tuned!!!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/event-driven-architecture-postman-to-solace-event-publishing-using-sap-cpi/ba-p/14151036"/>
    <published>2025-07-20T14:40:42.941000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/improving-exception-handling-using-generative-ai-in-sap-cloud-integration/ba-p/14157298</id>
    <title>Improving Exception Handling using Generative AI in SAP Cloud Integration (SAP CI/CPI)</title>
    <updated>2025-07-20T22:13:28.565000+02:00</updated>
    <author>
      <name>adarshrao_rao</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/882299</uri>
    </author>
    <content>&lt;P&gt;When it comes to integrating different systems within a business, SAP Cloud Integration (SAP CI/CPI) capability in Integration Suite Service of SAP BTP is a go-to tool. However, as these integrations become more complex, handling exceptions - errors and issues, efficiently becomes increasingly important. Generative AI can help businesses tackle these challenges by automating error detection and providing useful insights. Here’s what you can gain from using AI:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;User - Friendly Error Messages&lt;/STRONG&gt;: Sender systems can receive clear, simple error messages that anyone can understand, not just tech experts.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Better Monitoring&lt;/STRONG&gt;: You can see these user-friendly error message logs in SAP CI/CPI dashboards, making it easier to track and fix issues.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Identify Error Causes&lt;/STRONG&gt;: AI can help identify why an error occurred, offering a better understanding of the issue.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Suggest Solutions&lt;/STRONG&gt;: It can also suggest ways to address and fix the error.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Simplify Troubleshooting&lt;/STRONG&gt;: Both tech and non-tech staff can troubleshoot errors more easily.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Reduce Resolution Time&lt;/STRONG&gt;: Speed up the process of solving errors.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Prepare for the Future&lt;/STRONG&gt;: The insights gained can improve how errors are classified and handled in the future by agentic AIs in SAP BTP.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1735183649"&gt;1. Exception Handling&lt;/H2&gt;&lt;P&gt;There are two main ways to integrate AI into your error handling processes in SAP CI/CPI:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Exception Subprocess&lt;/STRONG&gt;: Incorporate Generative AI into an existing integration flow’s exception subprocess for smooth operation. &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/handle-exceptions-guidelines-basics?locale=en-US&amp;amp;q=handling+error" target="_self" rel="noopener noreferrer"&gt;Read More&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Common Exception Handling iFlow&lt;/STRONG&gt;: Set up a separate flow dedicated to handling exceptions, where you pass error information from the main flow for centralized handling. &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/outsource-exception-handling-into-separate-integration-flow?locale=en-US&amp;amp;q=common+error+handling" target="_self" rel="noopener noreferrer"&gt;Read More&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;In this example, I have used &amp;nbsp;exception subprocess approach within a simple integration flow and Google Gemini AI model.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_0-1753038949536.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288966iBC2882D3D965BC0A/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_0-1753038949536.png" alt="adarshrao_rao_0-1753038949536.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1538670144"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-1342156639"&gt;2. Understanding Gen-AI Prompt Format and get API Key&lt;/H2&gt;&lt;P&gt;For Google Gemini, go to &lt;A href="https://aistudio.google.com/prompts/new_chat" target="_blank" rel="noopener nofollow noreferrer"&gt;https://aistudio.google.com/prompts/new_chat&lt;/A&gt; and click on Get API Key, Create API Key.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_1-1753038949539.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288967iBF9B7A104E0D596F/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_1-1753038949539.png" alt="adarshrao_rao_1-1753038949539.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_2-1753038949545.png" style="width: 631px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288968i9889286D348144CD/image-dimensions/631x470?v=v2" width="631" height="470" role="button" title="adarshrao_rao_2-1753038949545.png" alt="adarshrao_rao_2-1753038949545.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here, you can see the format of the request which is expected by Google Gemini API.&lt;/P&gt;&lt;H2 id="toc-hId-1145643134"&gt;3. Implementation Steps&lt;/H2&gt;&lt;P&gt;Following are the steps which I have implemented in Exception Subprocess&lt;/P&gt;&lt;P&gt;1. Content Modifer - Set APIKey &amp;amp; Gen-AI Prompt&lt;BR /&gt;To set the API key and content type as requested by Google Gemini&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_3-1753038949546.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288969i4D1FA3BC99C83904/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_3-1753038949546.png" alt="adarshrao_rao_3-1753038949546.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To set the required prompt format, I have created the below exchange properties and externalized it&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_4-1753038949548.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288970iB2A656592833DC0D/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_4-1753038949548.png" alt="adarshrao_rao_4-1753038949548.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Value stored in Gen AI prompt is&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{     "contents": [       {         "parts": [           {             "text": " You are an SAP Integration consultant skilled in troubleshooting in SAP Cloud Integration (CPI). Above error is persisting while sending the message from sender to receiver system. For this error, Please respond using the following format, with each section clearly separated by a single line break in a direct and professional tone: 1. User-Friendly Error Message: A one sentence error that can be easily understood by non-technical stakeholders 2. Possible Reasons for the Error: List common causes for encountering this error in SAP CPI integration scenarios. 3. Possible Steps to Resolve the Error: Provide possible troubleshooting steps to address the issue and potentially resolve it. 4. HTTP Response: Provide appropriate HTTP error code (numerical value only) to be sent to sender system. "            }         ]       }     ]   }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;EM&gt;&lt;U&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/U&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;All the values are externalized so that, different models like Microsoft Co-pilot or GTP 4 can be used.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;2. Groovy script – setGenAIPrompt&lt;/P&gt;&lt;P&gt;This script is used to get the error which is caught from the main integration process by the CamelExceptionCaught property, add this error in the prompt to get the tailored response from Gemini and set the prompt structure required by Gemini AI model.&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message



def Message processData(Message message) {

    // Retrieve properties from the message

    def camelExceptionCaught = message.getProperty("CamelExceptionCaught")

    def genAIPrompt = message.getProperty("GenAIPrompt")

    def startPrompt = message.getProperty("StartPrompt")



    // Initialize updatedGenAIPrompt as null or empty, it'll be used to set message body eventually

    def updatedGenAIPrompt = null

   

    if (genAIPrompt &amp;amp;&amp;amp; startPrompt &amp;amp;&amp;amp; camelExceptionCaught) {

        // Find the position of startPrompt in genAIPrompt

        def startIndex = genAIPrompt.indexOf(startPrompt)



        if (startIndex != -1) {

            // Insert space and CamelExceptionCaught after StartPrompt

            updatedGenAIPrompt = genAIPrompt.substring(0, startIndex + startPrompt.length()) +

                                 " " +

                                 camelExceptionCaught +

                                 genAIPrompt.substring(startIndex + startPrompt.length())

                                

            // Set the updatedGenAIPrompt back to a message property

            message.setProperty("UpdatedGenAIPrompt", updatedGenAIPrompt)

        }

    }

   

    if (updatedGenAIPrompt != null) {

        // Set the modified prompt as the message body

        message.setBody(updatedGenAIPrompt)

    }

   

    return message

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;3. Request Reply - Call Google Gemini&lt;/P&gt;&lt;P&gt;I have use HTTP adapter to call Google Gemini&lt;BR /&gt;URL: &lt;A href="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" target="_blank" rel="noopener nofollow noreferrer"&gt;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_5-1753038949550.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288971i460BFCF5B4A5CCA3/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_5-1753038949550.png" alt="adarshrao_rao_5-1753038949550.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4. Groovy script – captureGenAIResponse&lt;/P&gt;&lt;P&gt;This groovy script is used to capture Custom Error, Possible reason and Possible solution for the error from Gen AI response. Also, handle the errors caused if generative AI is not reachable&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message

import groovy.json.JsonSlurper



def Message processData(Message message) {

    // Retrieve properties

    def captureCustomErrorKey = message.getProperty("CaptureCustomError")

    def capturePossibleReasonKey = message.getProperty("CapturePossibleReason")

    def capturePossibleSolutionKey = message.getProperty("CapturePossibleSolution")

    def captureHTTPCodeKey = message.getProperty("CaptureHTTPCode")  // This should be "HTTP Response:"



    // Get the message body and parse it as JSON

    def payload = message.getBody(String)

    def jsonSlurper = new JsonSlurper()



    // Initialize extracted values

    def extractedCustomErrorMessage = null

    def extractedPossibleReason = null

    def extractedPossibleSolution = null

    def extractedPHTTPCode = null



    try {

        // Try parsing the JSON

        def parsedJson = jsonSlurper.parseText(payload)

       

        // Extract the text section from the JSON

        def textContent = parsedJson.candidates[0]?.content?.parts[0]?.text



        if (textContent) {

            // Log the text content to verify structure

            messageLogFactory.getMessageLog(message)?.addAttachmentAsString("Text Content", textContent, "text/plain")



            // Extract values based on keys

            extractedCustomErrorMessage = extractValueFollowingKey(textContent, captureCustomErrorKey)

            extractedPossibleReason = extractValueFollowingKey(textContent, capturePossibleReasonKey)

            extractedPossibleSolution = extractValueFollowingKey(textContent, capturePossibleSolutionKey)



            // Specifically extract the HTTP response code after "HTTP Response:"

            extractedPHTTPCode = extractHTTPResponseCode(textContent, captureHTTPCodeKey)

        }

    } catch (Exception e) {

        // Log exception and proceed with null outputs

        messageLogFactory.getMessageLog(message)?.addAttachmentAsString("Exception", e.toString(), "text/plain")

    }



    // Handle extraction results

    message.setProperty("ExtractedCustomErrorMessage", extractedCustomErrorMessage)

    message.setProperty("ExtractedPossibleReason", extractedPossibleReason)

    message.setProperty("ExtractedPossibleSolution", extractedPossibleSolution)

    message.setProperty("ExtractedPHTTPCode", extractedPHTTPCode)

   

    // Set HTTP Code as the message body for demonstration; it will be null if extraction fails

    message.setBody(extractedPHTTPCode)



    return message

}



// Function to extract value that follows a given key in the text content

def extractValueFollowingKey(String textContent, String key) {

    if (key) {

        def keyIndex = textContent.indexOf(key)

        if (keyIndex != -1) {

            def startIndex = keyIndex + key.length()

            if (startIndex != -1) {

                def endIndex = textContent.indexOf("\n\n", startIndex)

                endIndex = endIndex != -1 ? endIndex : textContent.length()



                def extractedText = textContent.substring(startIndex, endIndex).trim()

                extractedText = extractedText.replaceAll('\\*', '')  // Clean up undesired characters

                return extractedText

            }

        }

    }

    return null

}



// Specific extraction utility for HTTP Code.

def extractHTTPResponseCode(String textContent, String key) {

    if (key) {

        def keyIndex = textContent.indexOf(key)

        if (keyIndex != -1) {

            def startIndex = keyIndex + key.length()

            if (startIndex != -1) {

                // Find the end, which is the next newline after the code and description

                def endIndex = textContent.indexOf("\n", startIndex)

                endIndex = endIndex != -1 ? endIndex : textContent.length()



                return textContent.substring(startIndex, endIndex).trim()

            }

        }

    }

    return null

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;5. Content Modifier - Set Content Type for Error Response&lt;/P&gt;&lt;P&gt;In this content modifier the header Content-Type is explicitly set if the error response needs to be sent to the sender system.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_6-1753038949551.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288972i59DE40D618C2F062/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_6-1753038949551.png" alt="adarshrao_rao_6-1753038949551.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;6. Groovy Script – generateErrorResponse&lt;/P&gt;&lt;P&gt;This script is used to log the custom error in the error log, create custom headers and generate an error response if the sender system needs it. I have implemented all the three in this script to show that it is possible.&lt;/P&gt;&lt;P&gt;Based on your requirement, custom error log or custom header or error response can be set.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message



def Message processData(Message message) {

    // Retrieve properties

    def camelExceptionCaught = message.getProperty("CamelExceptionCaught")

    def extractedCustomErrorMessage = message.getProperty("ExtractedCustomErrorMessage")

    def extractedPossibleReason = message.getProperty("ExtractedPossibleReason")

    def extractedPossibleSolution = message.getProperty("ExtractedPossibleSolution")

    def extractedPHTTPCode = message.getProperty("ExtractedPHTTPCode")



    // Set the CamelHttpResponseCode header

    if (extractedPHTTPCode) {

        message.setHeader("CamelHttpResponseCode", extractedPHTTPCode)

    }



    // Create custom headers

    def messageLog = messageLogFactory.getMessageLog(message)

    if (messageLog != null) {

        messageLog.addCustomHeaderProperty("CustomError", extractedCustomErrorMessage ?: "No custom error message available.")

        messageLog.addCustomHeaderProperty("PossibleReason", extractedPossibleReason ?: "No possible reason available.")

        messageLog.addCustomHeaderProperty("PossibleSolution", extractedPossibleSolution ?: "No possible solution available.")

    }



    // Attach extracted values as message attachments

    def possibleReasonAttachment = extractedPossibleReason ?: "No possible reason available."

    def possibleSolutionAttachment = extractedPossibleSolution ?: "No possible solution available."

   

    if (messageLog != null) {

        messageLog.addAttachmentAsString("PossibleReason", possibleReasonAttachment, "text/plain")

        messageLog.addAttachmentAsString("PossibleSolution", possibleSolutionAttachment, "text/plain")

    }



    // Create dynamic response in XML format

    def responseXml = """&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;

&amp;lt;Error_Response&amp;gt;

    &amp;lt;SystemError&amp;gt;${camelExceptionCaught}&amp;lt;/SystemError&amp;gt;

    &amp;lt;CustomError&amp;gt;${extractedCustomErrorMessage ?: "No custom error message available."}&amp;lt;/CustomError&amp;gt;

    &amp;lt;PossibleReason&amp;gt;${extractedPossibleReason ?: "No possible reason available."}&amp;lt;/PossibleReason&amp;gt;

    &amp;lt;PossibleSolution&amp;gt;${extractedPossibleSolution ?: "No possible solution available."}&amp;lt;/PossibleSolution&amp;gt;

&amp;lt;/Error_Response&amp;gt;"""



    // Set XML response as the message body

    message.setBody(responseXml)





if (camelExceptionCaught) {

        throw new Exception("\nSystem Error: ${camelExceptionCaught}\nCustom Error from GenAI: ${extractedCustomErrorMessage ?: 'No custom error message available.'}")

    }



    return message

}&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-949129629"&gt;5. Testing&lt;/H2&gt;&lt;P&gt;To test, I am using an API client Bruno, which will mimic the sender system. I have maintained the receiver system URL as &lt;A href="http://sample.com" target="_blank" rel="noopener nofollow noreferrer"&gt;http://sample.com&lt;/A&gt;. So, the message will fail because it is not a valid URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_0-1753041124487.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288990i37656FA3E35862AC/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_0-1753041124487.png" alt="adarshrao_rao_0-1753041124487.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;1. Triggering the iflow from Bruno as shown below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_7-1753038949552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288974iBDFDD5C97258E7F1/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_7-1753038949552.png" alt="adarshrao_rao_7-1753038949552.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.&amp;nbsp; Without Exception Handling using Gen AI, I get the response as below in Bruno as shown below&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_8-1753038949552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288973i97EAFCB3DDA4BF77/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_8-1753038949552.png" alt="adarshrao_rao_8-1753038949552.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3. In the iFlow, I have checked Return Exception to Sender under Error Configuration&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_9-1753038949553.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288975i4AEAA92853922641/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_9-1753038949553.png" alt="adarshrao_rao_9-1753038949553.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4. Now, with Exception Handling using Gen AI, I get the response in Bruno as shown below&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_10-1753038949554.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288977i7669DA012F9293C0/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_10-1753038949554.png" alt="adarshrao_rao_10-1753038949554.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5. In Cloud Integration Message Monitoring we see that the message is in error&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_11-1753038949555.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288976i237CAC7C65B49FCB/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_11-1753038949555.png" alt="adarshrao_rao_11-1753038949555.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;6. Error log is as shown below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_12-1753038949557.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288978i90CBBCDD64DD9B4F/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_12-1753038949557.png" alt="adarshrao_rao_12-1753038949557.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;7. Custom Headers are successful set with Custom Error, Possible Reason and Possible Solution as shown below&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_13-1753038949559.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288980iBA66864E371C0162/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_13-1753038949559.png" alt="adarshrao_rao_13-1753038949559.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;8. Attachments are also set with Possible Reason and Possible Solution as shown below&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_14-1753038949561.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288979i0BBACD85C72B0099/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_14-1753038949561.png" alt="adarshrao_rao_14-1753038949561.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_15-1753038949563.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288981iD95F690D8E4F6E07/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_15-1753038949563.png" alt="adarshrao_rao_15-1753038949563.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_16-1753038949566.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288982i6175A8EA7C72658D/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_16-1753038949566.png" alt="adarshrao_rao_16-1753038949566.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;9. If you have a requirement to send the error response with not just custom error from Gen AI but sending possible reason and solution then set the event in the Exception Subprocess as End Message. The only downside is the message in Cloud Integration will be end with status Completed rather than Error.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_17-1753038949567.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288983i970E4AB7AE6FEACB/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_17-1753038949567.png" alt="adarshrao_rao_17-1753038949567.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Go to Groovy Script - generateErrorResponse and comment the lines 46, 47 and 48 which was done to throw custom exception as shown below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_18-1753038949567.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288985i5C433E02AD507DF2/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_18-1753038949567.png" alt="adarshrao_rao_18-1753038949567.png" /&gt;&lt;/span&gt;In the script, I am setting the appropriate HTTP code for CamelHttpResponseCode from Google Gemini response.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_19-1753038949568.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288984i4FB20C444BA295A8/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_19-1753038949568.png" alt="adarshrao_rao_19-1753038949568.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;10. When the message is triggered, we can see that the error response is received in Bruno with correct HTTP response code as shown below.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_20-1753038949574.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288986i2F379F13D938CB7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_20-1753038949574.png" alt="adarshrao_rao_20-1753038949574.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;11. If the correct response code is not set from Google Gemini, then HTTP 200 is received in sender system which will be incorrect, and we can’t identify if the message failed or not without opening the response message&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_21-1753038949576.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288987i5EB710143ECB1B9A/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_21-1753038949576.png" alt="adarshrao_rao_21-1753038949576.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_22-1753038949580.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288989i5F1B3810894EA049/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_22-1753038949580.png" alt="adarshrao_rao_22-1753038949580.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;12. Now, if there is an issue with reaching Generative AI then it is handled in Groovy Scripts. For testing, I will use incorrect URL&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="adarshrao_rao_23-1753038949583.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288988iB33A6C87CF1C1C78/image-size/large?v=v2&amp;amp;px=999" role="button" title="adarshrao_rao_23-1753038949583.png" alt="adarshrao_rao_23-1753038949583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-752616124"&gt;6. Conclusion&lt;/H2&gt;&lt;P&gt;In this blog, I have tried to provide an overview of how we can make use of Generative AI for Exception Handling in SAP Cloud Integration. Of course, the exception subprocess can be improved and tailored as per the requirement in your integration landscape.&lt;/P&gt;&lt;P&gt;Generative AI offers a new way to handle errors in SAP CI/CPI by automating processes that would typically take much longer. By enhancing error handling, businesses can reduce downtime and improve overall efficiency. With the technology constantly advancing, using AI in exception handling can help businesses stay ahead of the curve, making their operations more reliable. Through simple implementation steps, regular testing, and adapting based on feedback, businesses can fully leverage AI for a smarter, more resilient future.&lt;/P&gt;&lt;H2 id="toc-hId-556102619"&gt;7. Additional Read&lt;/H2&gt;&lt;P&gt;Exception Handling in SAP CPI : &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/handle-errors-gracefully?locale=en-US&amp;amp;q=handling+error" target="_self" rel="noopener noreferrer"&gt;SAP Help&lt;/A&gt;&lt;/P&gt;&lt;P&gt;I invite you to share your thoughts in the comments below. Whether you have questions about using generative AI for exception handling, experiences to share, or suggestions for improvement, your feedback is invaluable. It helps others who are navigating similar journeys and contributes to a community of shared knowledge. I look forward to hearing from you!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/improving-exception-handling-using-generative-ai-in-sap-cloud-integration/ba-p/14157298"/>
    <published>2025-07-20T22:13:28.565000+02:00</published>
  </entry>
</feed>
