<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-RESTful-Application-Programming-Model-blog-posts.xml</id>
  <title>SAP Community - ABAP RESTful Application Programming Model</title>
  <updated>2025-10-06T08:00:07.557984+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP RESTful Application Programming Model/pd-p/7e44126e-7b27-471d-a379-df205a12b1ff" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP RESTful Application Programming Model blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-collaborate-on-an-entity-of-a-draft-enabled-rap-business-object/ba-p/14216444</id>
    <title>How to collaborate on an entity of a draft enabled RAP Business Object ?</title>
    <updated>2025-09-13T17:11:57.556000+02:00</updated>
    <author>
      <name>Andre_Fischer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/55</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1631007969"&gt;Introduction&lt;/H1&gt;&lt;P&gt;With the latest release 2508 of SAP BTP ABAP Environment a new feature called &lt;EM&gt;&lt;STRONG&gt;Collaborative Draft&lt;/STRONG&gt;&lt;/EM&gt; has been delivered.&amp;nbsp; This feature allows that several users can work on the same draft instance of an entity of a RAP Business Object.&amp;nbsp;&lt;/P&gt;&lt;P&gt;So similar like collaborating on a file in Microsoft Teams it is now possible that several users can perform changes on an entity of a RAP Business Object at the same time.&lt;/P&gt;&lt;P&gt;The cool thing is that every draft enabled RAP BO can be enhanced so that it also supports Collaborative Draft without the need to change the existing ABAP code of your behavior implementation class(es).&lt;/P&gt;&lt;P&gt;It is only required to change a few lines of code in the behavior definition, the behavior projection and you have to create a&amp;nbsp;&lt;SPAN&gt;&lt;EM&gt;&lt;STRONG&gt;draft query view&lt;/STRONG&gt;&lt;/EM&gt;&amp;nbsp; which projects all fields of the draft table of&amp;nbsp;the "authorization&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;master&lt;/SPAN&gt;&lt;SPAN&gt;" entity which in most cases this is the root entity of your business object.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In case&amp;nbsp;your active business object view entity is protected by a DCL (which is strongly recommended for every productive RAP business object &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;ðŸ˜‰&lt;/span&gt;)&amp;nbsp; the draft query view must also be protected by a&amp;nbsp;data control language (DCL) that inherits from that existing DCL.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This because otherwise users would be able to see data in the draft they would not be allowed to see in the active data.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Please note:&amp;nbsp;&amp;nbsp;&lt;BR /&gt;As described in the section Outlook the implementation will become even easier in the future once table entities will be supported as a draft persistency instead of tables.&amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1434494464"&gt;&lt;SPAN&gt;Prerequisites&lt;/SPAN&gt;&lt;/H1&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;You need a draft enabled RAP Business object (which you can easily generate using the new "&lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/odata-ui-service-from-scratch?locale=en-US&amp;amp;state=PRODUCTION&amp;amp;version=sap_cross_product_abap" target="_blank" rel="noopener noreferrer"&gt;from scratch generator&lt;/A&gt;").&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Your user and any other user that is supposed to use / test your RAP BO must have the new&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;business catalog&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP_CORE_BC_RAP_DRAFT_PC&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;assigned which is part of the business role template&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;SAP_BR_EMPLOYEE&lt;/STRONG&gt;.&amp;nbsp;&lt;BR /&gt;You have hence first to ask your administrator to either generate an additional role based on the role template&amp;nbsp;&lt;STRONG&gt;SAP_BR_EMPLOYEE&lt;/STRONG&gt;&amp;nbsp;or let the administrator assign the business catalogue to an existing role which is assigned to developers on your SAP BTP ABAP Environment system, so that you and your colleagues can start developing and testing this cool new feature.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-1237980959"&gt;&lt;SPAN&gt;Result&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;In the following you see me (Andre Fischer) and the user ANZEIGER working on the same instance of a draft entity. As soon as a user leaves the focus of a field the changes will be updated automatically in the UI of the other user.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Demo_video.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313957iAAB37BFE5C5DA836/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Demo_video.gif" alt="Demo_video.gif" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can test the collaborative draft setup even in systems where you have just one user, like in our trial systems.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the first screen shot I am editing the field "Notes" (highlighted in red) and I can see that I am editing the field "OrderID" in the second tab (highlighted in green).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the second screen shot we see vice versa that I am there editing the field "OrderID" (highlighted in red) and that I am editing the field notes in the other session in the first tab.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="User_in_tab_1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313948iBD3D15B8542E81AE/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="User_in_tab_1.png" alt="User_in_tab_1.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="User_in_tab_2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313949iE2DB4E59DF935D61/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="User_in_tab_2.png" alt="User_in_tab_2.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1041467454"&gt;&lt;SPAN&gt;Implementation Steps&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;A step by step guide which describe how to enhance an existing draft enabled RAP Business Object has been provided for your convenience to the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/adding-collaboration-capability-to-draft-enabled-managed-business-object?locale=en-US&amp;amp;version=LATEST" target="_blank" rel="noopener noreferrer"&gt;SAP Online Help&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;An example of a RAP Business Object has also been delievered as part of the well known Flight Reference Sample with the latest version in &lt;A href="https://github.com/SAP-samples/abap-platform-refscen-flight/blob/ABAP-platform-cloud/README.md" target="_blank" rel="noopener nofollow noreferrer"&gt;Github&lt;/A&gt;&amp;nbsp;which now contains an additional sub package &lt;STRONG&gt;&lt;FONT face="courier new,courier"&gt;/DMO/FLIGHT_COLLDRAFT.&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-844953949"&gt;&lt;SPAN&gt;Implementation Walkthrough&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;I will add a few screen shots on how I have enabled my small RAP BO using the above mentioned documentation. As shown in the following screen shot only the behavior definition and the behavior projection have to be changed and two additional objects, the draft query view for the draft table of the root entity and the DCL for the draft query view have to be created.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="list_of_changed_and_new_repo_objects.png" style="width: 827px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313956iC892BB3203762888/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="list_of_changed_and_new_repo_objects.png" alt="list_of_changed_and_new_repo_objects.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-777523163"&gt;&lt;SPAN&gt;1. Changes in the behavior Definition&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;As described in the documentation the we have specify in the behavior definition that collaborative draft is used instead of exclusive draft and for the root entity we have to add the use of the draft query view for the draft table and we have to add the action &lt;STRONG&gt;Share&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="changes_in_bdef.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313952iFB7250D796996097/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="changes_in_bdef.png" alt="changes_in_bdef.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-581009658"&gt;2. Changes in the behavior projection&lt;/H2&gt;&lt;P&gt;In the behavior projection we simply have to add use statements so that the collaborative draft is used for our RAP business object and we have to enable the action &lt;STRONG&gt;Share&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="changes_in_bdef_projection.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313953i06CBFE56B1BF1659/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="changes_in_bdef_projection.png" alt="changes_in_bdef_projection.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-384496153"&gt;&lt;SPAN&gt;3. Create new object - Draft Query View&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="new_object_draft_query_view.png" style="width: 801px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313954i57652090D4856855/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="new_object_draft_query_view.png" alt="new_object_draft_query_view.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-187982648"&gt;&lt;SPAN&gt;4. Create DCL for the Draft Query View&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="new_object_draft_query_view_DCL.png" style="width: 872px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313955i9FAEBC373CCDB3D2/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="new_object_draft_query_view_DCL.png" alt="new_object_draft_query_view_DCL.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId--137613576"&gt;&lt;SPAN&gt;Outlook&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;In future releases, when table entities will be supported to store the draft data instead of tables it will not be necessary anymore to create a draft query view for the draft table. This is because in this case the table entity itself can be directly secured by a DCL.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The setup shown in this blog post will be presented in upcoming events such as the sitBE Event in Mechelen, the DevToberFest and naturally TechEd and TechConnect events later this year.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-435613002"&gt;&lt;SPAN&gt;DevToberFest Sample&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;And you can find the code of the sample application which shows a Shopping Cart with a header and a child entity for items that I will use in this blog post soon in Github as well.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For the implementation I used the "from scratch generator" and as a template for the root entity I used the following structure&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Shopping Cart Header Data'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
define structure zdmo_cart_## {

  currency                : abap.cuky;
  notes                   : abap.char(100);
  order_id                : abap.numc(8);
  requested_delivery_date : fins_caldate;
  @Semantics.amount.currencyCode : 'zdmo_cart_##.currency'
  total_price             : abap.curr(11,2);

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;while for the child entity this structure was used&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Shopping Cart Item Data'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
define structure zdmo_item_## {

  item_id         : abap.numc(8);
  ordered_item    : matnr40;
  quantity        : abap.numc(4);
  currency        : abap.cuky;
  @Semantics.amount.currencyCode : 'zdmo_item_##.currency'
  item_price      : abap.curr(11,2);
  @Semantics.amount.currencyCode : 'zdmo_item_##.currency'
  item_unit_price : abap.curr(11,2);

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-collaborate-on-an-entity-of-a-draft-enabled-rap-business-object/ba-p/14216444"/>
    <published>2025-09-13T17:11:57.556000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/a-better-way-to-create-the-root-child-grandchild-hierachy-in-rap/ba-p/14214385</id>
    <title>A better way to create the Root-Child-Grandchild hierachy in RAP</title>
    <updated>2025-09-15T08:01:50.310000+02:00</updated>
    <author>
      <name>satellarknighty</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1735497</uri>
    </author>
    <content>&lt;P&gt;The RAP Framework supports Parent - Child - Grandchild - Great Grandchild - and so forth.&lt;/P&gt;&lt;P&gt;There are beautiful blog posts on how to do this:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A title="How to design managed RAP business objects with 3 or more levels of nodes " href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-design-managed-rap-business-objects-with-3-or-more-levels-of-nodes/ba-p/13534811" target="_blank"&gt;How to design managed RAP business objects with 3 or more levels of nodes&lt;/A&gt;&amp;nbsp;: Shows the basic idea.&lt;/LI&gt;&lt;LI&gt;&lt;A title="Create Root-Child-Grandchild-Great Grandchild relationship using RAP" href="https://community.sap.com/t5/technology-blog-posts-by-members/create-root-child-grandchild-great-grandchild-relationship-using-rap/ba-p/14029438" target="_blank"&gt;Create Root-Child-Grandchild-Great Grandchild relationship using RAP&lt;/A&gt;&amp;nbsp;: Shows the actual implementation.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Both of them relies on storing a reference to the root in each and every descendant. As in: a child has a reference to the parent, and a grandchild (or great grandchild) has a reference to the root parent as well.&lt;/P&gt;&lt;P&gt;This is required so that in the Behavior Definition of each descendant, the association to the root can be used for `lock` and `authorization`.&lt;/P&gt;&lt;P&gt;But this has got me thinking: Why do we have to store the reference to the root in each descendant like this? Couldn't we do something like:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;Grandchild._Child._Parent
"or even
GreatGrandchild._Grandchild._Child._Parent&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;If this worked, we would need to store the reference to the parent only in the child, therefore saving space on Grandchild and Great Grandchild.&lt;/P&gt;&lt;P&gt;With that said, let's dive in and test this. Here I only build Parent, Child, and Grandchild.&lt;/P&gt;&lt;H2 id="toc-hId-1760030270"&gt;Database tables&lt;/H2&gt;&lt;P&gt;Parent:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'parent'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table z_parenttest {

  key client            : abap.clnt not null;
  key uuid              : sysuuid_x16 not null;
  local_created_by      : abp_creation_user;
  local_created_at      : abp_creation_tstmpl;
  local_last_changed_by : abp_locinst_lastchange_user;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
  last_changed_at       : abp_lastchange_tstmpl;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Child:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'CHILD'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table z_childtest {

  key client  : abap.clnt not null;
  key uuid    : sysuuid_x16 not null;
  parent_uuid : sysuuid_x16;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Grandchild:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Grandchild'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table z_gchildtest {

  key client : abap.clnt not null;
  key uuid   : sysuuid_x16 not null;
  child_uuid : sysuuid_x16;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;As you can see, the grandchild doesn't have a field for the parent's UUID.&lt;/P&gt;&lt;H2 id="toc-hId-1563516765"&gt;Interface View&lt;/H2&gt;&lt;P&gt;Parent&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'PARENT'
@Metadata.ignorePropagatedAnnotations: true
define root view entity ZI_PARENT
  as select from z_parenttest
  composition [0..*] of zi_child as _Child
{
  key uuid                  as Uuid,
      @Semantics.user.createdBy: true
      local_created_by      as CreatedBy,
      @Semantics.systemDateTime.createdAt: true
      local_created_at      as CreatedAt,
      @Semantics.user.lastChangedBy: true
      local_last_changed_by as LastChangedBy,
      @Semantics.systemDateTime.lastChangedAt: true
      last_changed_at       as LastChangedAt,
      @Semantics.systemDateTime.localInstanceLastChangedAt: true
      local_last_changed_at as LocalLastChangedAt,
      _Child
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Child&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'child'
@Metadata.ignorePropagatedAnnotations: true
define view entity zi_child
  as select from z_childtest
  association to parent ZI_PARENT    as _Parent on $projection.ParentUuid = _Parent.Uuid
  composition [0..*] of ZI_GRANDCHILD as _GrandChild
{
  key uuid        as Uuid,
      parent_uuid as ParentUuid,
      _Parent,
      _GrandChild
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Everything looks normal so far. Now for what we came here for: The Grandchild!&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'GRANDE'
@Metadata.ignorePropagatedAnnotations: true
define view entity ZI_GRANDCHILD
  as select from z_gchildtest
  association to parent zi_child as _Child on $projection.ChildUuid = _Child.Uuid
{
  key uuid       as Uuid,
      child_uuid as ChildUuid,
      _Child,
      //You will get an error saying you have to include this
      //If you want to use _Child._Parent
      _Child.ParentUuid as ParentUUID,
      _Child._Parent as _Parent,
      
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;And just like that, the association to parent is made, without having to store a reference.&lt;/P&gt;&lt;P&gt;From this point onward: Projection View, MDE, Behavior... Everything should be the same as in the mentioned blogs.&lt;/P&gt;&lt;P&gt;Thanks for reading my blog and I wish you a pleasant day.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/a-better-way-to-create-the-root-child-grandchild-hierachy-in-rap/ba-p/14214385"/>
    <published>2025-09-15T08:01:50.310000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-table-maintenance-reimagined-choosing-the-right-framework/ba-p/14218970</id>
    <title>SAP S/4HANA Table Maintenance Reimagined: Choosing the Right Framework</title>
    <updated>2025-09-17T12:42:25.292000+02:00</updated>
    <author>
      <name>Saurabh_Gupta1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/53365</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In this blog, weâ€™ll explore a practical use case implemented in&amp;nbsp;&lt;STRONG&gt;S/4HANA 2021 On-Premise&lt;/STRONG&gt;, where we opted for&amp;nbsp;&lt;STRONG&gt;Custom Business Objects (CBO)&lt;/STRONG&gt;&amp;nbsp;to enable table maintenance via Fiori with minimal development effort and also &lt;STRONG&gt;evaluate new frameworks&lt;/STRONG&gt; to achieve this in &lt;STRONG&gt;latest S4/HANA release 2023&lt;/STRONG&gt;.&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-2018320602"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Approach for choosing Custom Business Object&lt;/STRONG&gt; (Decision Matrix)&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;CBO is based on BOPF framework which was widely used by SAP before the era of RAP (RESTful ABAP Programming), while this is still relevant, SAP has now moved to RAP based development and a new concept called custom business configuration, both will be covered later in context of data maintenance.&lt;/FONT&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1950889816"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Why we didnâ€™t choose RAP or Custom business configuration for this use case.&lt;/FONT&gt;&lt;/H5&gt;&lt;OL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration ( Business configuration maintenance object ) â€“ This is available from S4 On-Prem 2022 onwards and the Fiori app for CUBCO is available after 2023 onwards.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;RESTful ABAP Programming â€“ SAP has provided RAP Generator which can generate all the artefacts based on a table right from views, behavior definition , service binding , generation to Fiori app however this is also not available in On-Prem 2021, the other workaround could be to build all these artefacts manually and generate Fiori app which was going to take more development time, hence it was avoided.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Since we cannot go with above 2 options, the only 2 options left are SM30 and Custom Business object, as we want to move towards Fiori first approach, Custom business object was chosen as the Go to approach. Let us deep dive in this with the help of use- case and practical tips&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1625293592"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;What is Custom Business Object â€“&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;With the Custom Business Objects Fiori app, you can create and manage custom business objects. A custom business object is a hierarchical set of database tables with an API for creation, retrieval, update and deletion of data.&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In The Fiori App â€˜Custom Business Objectâ€™, a new BO has been defined and maintained as below.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;User can choose what options do they want as part of framework, e,g, Change document, system admin date (last change at, created at etc are added by default).&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;User interface is disabled in this since it is only possible to enable if Embedded gateway is used which is not the case here.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="Saurabh_Gupta1_2-1758034866616.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315300i224DEF863855A856/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_2-1758034866616.png" alt="Saurabh_Gupta1_2-1758034866616.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You are free to choose what kind of operations, out of CUD, should be supported in the BO out of box.&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_3-1758035070410.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315301i4300283172BACF00/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_3-1758035070410.png" alt="Saurabh_Gupta1_3-1758035070410.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;This is where all the fields are defined for BO.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_4-1758035118964.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315302i70F7DFC5438ED8AD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_4-1758035118964.png" alt="Saurabh_Gupta1_4-1758035118964.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1557862806"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Final Output&lt;/STRONG&gt; â€“&lt;/FONT&gt;&lt;/H5&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Until this point, no coding has been done except for few changes in CDS Metadata for Fiori UI related cosmetic changes, all the operation are handled by framework out of box.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;An additional button â€˜Mass uploadâ€™ was added in metadata extension which is using intent-based navigation to navigate to another GUI application for mass upload of the entries.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_0-1758038827500.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315330iD5E9892D58E6AD7F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_0-1758038827500.png" alt="Saurabh_Gupta1_0-1758038827500.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1361349301"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Few Tips&lt;/STRONG&gt; -&lt;/FONT&gt;&lt;/H5&gt;&lt;OL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom Table (Type Application) is auto generated in this case with Key field as UUID.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Data entries maintained in one system cannot be transported to other system and must be maintained in target system, which was also the requirement in our use case.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Once business object is published and moved to production, Deletion is not allowed.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H4 id="toc-hId-1035753077"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How does the future look like for the same activity (Table Maintenance)-&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;As discussed above, there are 2 other ways to achieve this with minimal development efforts in new S4 HANA releases.&lt;/FONT&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;H4 id="toc-hId-839239572"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Custom Business Configuration&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;This is &lt;STRONG&gt;recommended &lt;/STRONG&gt;approach going forward where a business configuration maintenance object serves as primary entry point for maintenance.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;We have the option to use the Generate ABAP Repository Objects Wizard for Business configuration maintenance object to generate all required development objects based on a customizing table&lt;/LI&gt;&lt;LI&gt;Based on the Business configuration maintenance object, the custom business configurations app renders a&amp;nbsp;Fiori element list report for the entities exposed by the service binding to maintain the configuration entries&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_11-1758035471221.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315310i8644DD844BCAACC2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Saurabh_Gupta1_11-1758035471221.png" alt="Saurabh_Gupta1_11-1758035471221.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_12-1758035554875.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315311iD7963B6C1BF5D5BD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Saurabh_Gupta1_12-1758035554875.png" alt="Saurabh_Gupta1_12-1758035554875.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Image courtesy - SAP&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In short, Custom business configuration (Fiori app) is an umbrella under which all maintenance objects will be listed and serves as one stop shop while maintenance objects are the actual ABAP artefact which contains all the definition related to Object maintenance.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_13-1758035620891.png" style="width: 605px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315321i9C4BDEE4DBF5C59B/image-dimensions/605x198?v=v2" width="605" height="198" role="button" title="Saurabh_Gupta1_13-1758035620891.png" alt="Saurabh_Gupta1_13-1758035620891.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.20â€¯PM.png" style="width: 607px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315314iA3E7AFAAA2468BBB/image-dimensions/607x199?v=v2" width="607" height="199" role="button" title="Screenshot 2025-09-16 at 8.44.20â€¯PM.png" alt="Screenshot 2025-09-16 at 8.44.20â€¯PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Different options like SM30 are available by default such Add copy action out of box.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Add Data Consistency Check for fields with fixed domain values or foreign key screen check.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.37â€¯PM.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315317i5B28948485F2436C/image-dimensions/633x333?v=v2" width="633" height="333" role="button" title="Screenshot 2025-09-16 at 8.44.37â€¯PM.png" alt="Screenshot 2025-09-16 at 8.44.37â€¯PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;All of the below objects are created by default including CDS view, service definition, service binding, business object maintenance , transport definition, implementation classes etc.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.59â€¯PM.png" style="width: 638px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315318i40537C78E8356547/image-dimensions/638x478?v=v2" width="638" height="478" role="button" title="Screenshot 2025-09-16 at 8.44.59â€¯PM.png" alt="Screenshot 2025-09-16 at 8.44.59â€¯PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.45.18â€¯PM.png" style="width: 635px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315320i990558C08B796ACB/image-dimensions/635x487?v=v2" width="635" height="487" role="button" title="Screenshot 2025-09-16 at 8.45.18â€¯PM.png" alt="Screenshot 2025-09-16 at 8.45.18â€¯PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-771808786"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Final Output -&amp;nbsp;&lt;/FONT&gt;&lt;/H5&gt;&lt;P&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Until this point, no coding has been done; all these features are provided out of the box by the framework.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="trebuchet ms,geneva"&gt;The custom business configuration app shows all the maintenance objects for which the user is authorized. &lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_0-1758178463971.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316288i7C80DFB3C71A9925/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_0-1758178463971.png" alt="Saurabh_Gupta1_0-1758178463971.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the relevant maintenance object is selected, the Edit button would be enabled to allow creation, deletion, updation, etc. activities.&lt;/P&gt;&lt;H5 id="toc-hId-575295281"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_1-1758178556614.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316290i00ACBDF62350D6C3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_1-1758178556614.png" alt="Saurabh_Gupta1_1-1758178556614.png" /&gt;&lt;/span&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Few Practical Tips&lt;/FONT&gt; â€“&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;All tables must have a client key field and delivery class C&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Have a timestamp field with data element&amp;nbsp;ABP_LASTCHANGE_TSTMPL&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;To enable the "No Transport" option in the ADT wizard, implement SAP Note&amp;nbsp; &lt;A href="https://me.sap.com/notes/3579012" target="_blank" rel="noopener noreferrer"&gt;https://me.sap.com/notes/3579012&lt;/A&gt;.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;With few tweaks, it is possible to maintain data directly in production system instead of transporting. More details in this &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-a-rap-bo-to-change-the-content-of-a-customizing-table-in-the/ba-p/13723087" target="_blank"&gt;blog&lt;/A&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;As of version SAP S/4HANA release 2022, customers can use the generator for Business Configuration objects. The Custom Business Configurations SAP Fiori app is not yet available; app has been made available in release 2023.&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-249699057"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;2. RAP Generator&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Second approach to achieve this is using same generation wizard from context menu of table.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.45.34â€¯PM.png" style="width: 623px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315319i590CF530AE26F47A/image-dimensions/623x592?v=v2" width="623" height="592" role="button" title="Screenshot 2025-09-16 at 8.45.34â€¯PM.png" alt="Screenshot 2025-09-16 at 8.45.34â€¯PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId--737934550"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How is Custom business configuration different than plain RAP generator?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is a framework which is also built on RAP artefacts, but it has other framework related functionalities (e.g change log for auditing) in comparison to plain RAP application.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Fiori for CBC can be accessed through generic custom business configuration app serving as single source of entry whereas RAP application should be exposed as standalone app.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration app is built only around customizing tables whereas RAP generator can be built around any customizing and application tables both.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;CBC provides in built functionality to capture entries into transport request, but RAP generator requires explicit changes to incorporate transport feature.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H5 id="toc-hId--934448055"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How is Custom business configuration different than custom business object?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is built on RAP framework (SAP recommended) whereas custom business objects is built on BOPF framework.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration has transport feature for data entries whereas custom business object does not any way to transport entries from one system to other system.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is bottom-up approach where custom tables are defined first, and rest of the artifacts are generated around that whereas custom business object works on top-down approach where business object is created first then custom table is generated around BO.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration supports only OData V4 where CBO supports OData V2.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration app is built only around customizing tables whereas custom business object is built around application tables.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Once CBO has moved to production, it cannot be deleted.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In both the case, Metadata can be enhanced for any Fiori related UI changes, also additional validation, actions are supported in both.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Additional reading-&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/b5670aaaa2364a29935f40b16499972d/047e01c3bcdd4303a60b61364bd5b31d.html?locale=en-US&amp;amp;version=202310.002" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/ABAP_PLATFORM_NEW/b5670aaaa2364a29935f40b16499972d/047e01c3bcdd4303a60b61364bd5b31d.html?locale=en-US&amp;amp;version=202310.002&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/custom-business-configuration/ba-p/13647767" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-members/custom-business-configuration/ba-p/13647767&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-table-maintenance-reimagined-choosing-the-right-framework/ba-p/14218970"/>
    <published>2025-09-17T12:42:25.292000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/integrating-change-documents-into-rap-applications/ba-p/14219994</id>
    <title>Integrating Change Documents into RAP Applications</title>
    <updated>2025-09-17T13:42:38.830000+02:00</updated>
    <author>
      <name>Madhumathi_</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1500393</uri>
    </author>
    <content>&lt;P&gt;Before diving into how to integrate change documents into a RAP application, itâ€™s important to first understand what are change documents and why they matter.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Change Documents in SAP&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Change documents are records of changes made to data within SAP. These records contain detailed information such as:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The user who made the change&lt;/LI&gt;&lt;LI&gt;The time and date of the change&lt;/LI&gt;&lt;LI&gt;The specific table and field that were modified&lt;/LI&gt;&lt;LI&gt;The previous and updated values of the field&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Change documents in SAP play a crucial role in tracking modifications to critical business data. They also help in maintaining data integrity, support compliance, and provide a clear audit trail for business transactions.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Significance of Change Documents&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Change documents serve various purposes, such as:â€‹&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Auditing:&lt;/STRONG&gt;&amp;nbsp;They help track who made changes to data and when. This information is useful for detecting unauthorized changes and to identify the source of errors.â€‹&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Troubleshooting:&lt;/STRONG&gt;&amp;nbsp;They assist in resolving data- related issues. For example, if a user reports incorrect data in a field, change documents can help determine who modified it and at what time.â€‹&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Data recovery:&lt;/STRONG&gt;&amp;nbsp;They can aid in restoring data that has been accidently deleted or corrupted.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisites:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;To enable RAP change documents,&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENBDL_STRICT.html" target="_blank" rel="noopener noreferrer"&gt;BDEF strict mode&lt;/A&gt;&amp;nbsp;must be switched on.&lt;/LI&gt;&lt;LI&gt;A&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENRAP_PERSISTENT_TABLE_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;RAP persistent table&lt;/A&gt;&amp;nbsp;must be specified using the syntax addition&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENBDL_PERSISTENT_TABLE.html" target="_blank" rel="noopener noreferrer"&gt;persistent table&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Advantages: &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;No implementation in the&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENBEHAVIOR_POOL_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;ABAP behaviour pool&lt;/A&gt;&amp;nbsp;is required.&lt;/LI&gt;&lt;LI&gt;ChangeDocumentObject&amp;nbsp; can be generated by a quick fix in&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENADT_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;ABAP development tools for Eclipse&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Steps to Integrate Change Documents into RAP Applications&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step1: Mark the DDIC Data Element as Change Document Enabled.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;As in the classic ABAP environment for change documents, begin by identifying the fields in the database table that must be enabled for change document and mark the corresponding data element as &lt;EM&gt;change document enabled&lt;/EM&gt;. This process remains the same for RAP applications.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step2: Enable in RAP Behavior Definition &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the behaviour definition, add the following statement to the root entity. The keyword &lt;STRONG&gt;master&lt;/STRONG&gt; indicates that the definition applies to the root entity.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;changedocuments&lt;/STRONG&gt; &lt;STRONG&gt;master&lt;/STRONG&gt; &lt;STRONG&gt;(&lt;/STRONG&gt; ChangeDocumentObject &lt;STRONG&gt;)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;ChangeDocumentObject&amp;nbsp;refers to the name of a&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENCHANGE_DOCUMENT_OBJ_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;change document object&lt;/A&gt;. You can generate this object by a quick fix in&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENADT_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;ABAP development tools for Eclipse&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Madhumathi__0-1758108798653.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315809i780DAB0AC273A9CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Madhumathi__0-1758108798653.png" alt="Madhumathi__0-1758108798653.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step3: Define Logging Options&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To enable the logging option, add the following statement in the definition of the entity behaviour:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;changedocuments (create : key, update : data, delete : key );&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Logging options can be defined for the&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENBDL_STANDARD_OPERATIONS.html" target="_blank" rel="noopener noreferrer"&gt;standard operations&lt;/A&gt;:&amp;nbsp;&lt;EM&gt;create&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;update&lt;/EM&gt;, and&amp;nbsp;&lt;EM&gt;delete&lt;/EM&gt;. You can choose from the following logging options:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;none&lt;/STRONG&gt;:, No change document data is recorded.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;key&lt;/STRONG&gt;:, Only key values are recorded in the change documents.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;data&lt;/STRONG&gt;: A The data for change-document-relevant fields is recorded. A field is considered as relevant for change documents if its corresponding &amp;nbsp;&lt;A href="https://ldai2erx.devsys.net.sap:44300/sap/public/bc/abap/docu?sap-language=en&amp;amp;tree=x&amp;amp;version=x&amp;amp;sap-client=000&amp;amp;object=ABENDATA_ELEMENT_GLOSRY" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;EM&gt;DDIC data elemen&lt;/EM&gt;t&lt;/A&gt;&amp;nbsp;has &amp;nbsp;the&amp;nbsp;change document&amp;nbsp;flag enabled.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step4: Enable in Dependent Entities &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The change documents dependent entities are defined using the following syntax:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;changedocuments dependent&amp;nbsp;&lt;EM&gt;[&lt;/EM&gt;by _Assoc&lt;EM&gt;]&lt;/EM&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Adding&amp;nbsp;&lt;EM&gt;by _Assoc&lt;/EM&gt;&amp;nbsp;is optional. It is used to specify the association to the change documents master entity. When omitted, the&amp;nbsp;&lt;EM&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENCDS_ANCESTOR_ASSOC_GLOSRY.html" target="_blank" rel="noopener noreferrer"&gt;ancestor association&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;to the change documents master entity is used implicitly.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step5: Display on UI. &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Root BO Entity:&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Add the access control and association to the root view entity of the behaviour definition.&lt;/P&gt;&lt;P&gt;Add access control to the alias of the association &amp;lt;_chdview&amp;gt;:&lt;BR /&gt;...&lt;BR /&gt;@AccessControl.privilegedAssociations: [ '&amp;lt;_chdview&amp;gt;' ]&lt;BR /&gt;...&lt;/P&gt;&lt;P&gt;Add association with alias &amp;lt;_chdview&amp;gt;:&lt;BR /&gt;...&lt;BR /&gt;association [0..*] to I_ChangeDocument_2 as &amp;lt;_chdview&amp;gt;&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;on &amp;lt;_chdview&amp;gt;.ChangeDocObjectClass = '&amp;lt;OWN_CHANGEDOC&amp;gt;'&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;and &amp;lt;_chdview&amp;gt;.ChangeDocObject = $projection.&amp;lt;OBJECT_ID&amp;gt;&lt;BR /&gt;...&lt;BR /&gt;&lt;BR /&gt;Field $projection.&amp;lt;OBJECT_ID&amp;gt; used in the association to I_ChangeDocument_2 has to be read only.&lt;BR /&gt;Otherwise change documents won't be displayed on an object page in 'edit mode'.&lt;/P&gt;&lt;P&gt;Add reference to alias:&lt;BR /&gt;...&lt;BR /&gt;&amp;lt;_chdview&amp;gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-square"&gt;&lt;LI&gt;&lt;STRONG&gt;Projection View&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Add the access control and redirect in the projection view.&lt;/P&gt;&lt;P&gt;Add the access control to the alias of the association&amp;nbsp;&amp;lt;_chdview&amp;gt;:&lt;BR /&gt;...&lt;BR /&gt;@AccessControl.privilegedAssociations: [ '&amp;lt;_chdview&amp;gt;' ]&lt;BR /&gt;...&lt;BR /&gt;&lt;BR /&gt;Add the redirection&lt;BR /&gt;...&lt;BR /&gt;&amp;lt;_chdview&amp;gt;:redirected to C_CHANGEDOCUMENT_2&lt;/P&gt;&lt;P&gt;Add annotation: @AccessControl.privilegedAssociations: [ '_ChangeDocument'] in the projection and root BO entity.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Metadata Extension&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Add the annotation for the facet for change documents in the metadata extension of the projection view:&lt;BR /&gt;&lt;BR /&gt;...&lt;/P&gt;&lt;P&gt;{ id: '&amp;lt;CHD_ID&amp;gt;',&lt;/P&gt;&lt;P&gt;type: #LINEITEM_REFERENCE,&lt;/P&gt;&lt;P&gt;label: 'Change Documents',&lt;/P&gt;&lt;P&gt;purpose: #STANDARD,&lt;/P&gt;&lt;P&gt;position: 40,&lt;/P&gt;&lt;P&gt;targetElement: '&amp;lt;_chdview&amp;gt;'&lt;BR /&gt;}&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Service Definition. &lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Extend the service definition for the behavior definition to expose&amp;nbsp;CDS&amp;nbsp;view C_ChangeDocument_2&lt;/P&gt;&lt;P&gt;...&lt;BR /&gt;expose C_ChangeDocument_2;&lt;/P&gt;&lt;P&gt;â€¦&lt;/P&gt;&lt;P&gt;Reference:&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/integrating-change-documents#change-document-integration-in-rap" target="_blank" rel="noopener noreferrer"&gt;Integrating Change Documents | SAP Help Portal&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/integrating-change-documents-into-rap-applications/ba-p/14219994"/>
    <published>2025-09-17T13:42:38.830000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/installing-github-copilot-in-eclipse-adt/ba-p/14217834</id>
    <title>Installing GitHub Copilot in Eclipse ADT</title>
    <updated>2025-09-18T11:47:54.505000+02:00</updated>
    <author>
      <name>kunalchanda</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/890293</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1760124292"&gt;Introduction&lt;/H2&gt;&lt;P&gt;GitHub Copilot is an AI coding assistant platform that helps us while writing code by suggesting lines or blocks of code &amp;amp; troubleshooting them. This guide walks you through installing &lt;STRONG&gt;GitHub Copilot&lt;/STRONG&gt; in &lt;STRONG&gt;Eclipse ADT&lt;/STRONG&gt; (ABAP Development Tools).&lt;/P&gt;&lt;H2 id="toc-hId-1563610787"&gt;Pre-requisites&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Eclipse IDE with ADT installed&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Existing Github account&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1367097282"&gt;Steps&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Open Eclipse IDE and navigate to: Help -&amp;nbsp;Eclipse Marketplace&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="kunalchanda_2-1757948909739.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314731iC87C2A938B413472/image-size/medium?v=v2&amp;amp;px=400" role="button" title="kunalchanda_2-1757948909739.png" alt="kunalchanda_2-1757948909739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Search &amp;amp; Select GitHub Copilot then install it by following the installation prompts.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kunalchanda_4-1757949016026.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314737i074C5A96CEC35BC6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="kunalchanda_4-1757949016026.png" alt="kunalchanda_4-1757949016026.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Restart Eclipse&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;After restarting, Copilot is available in the menu bar. Sign in using Github account.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kunalchanda_5-1757949108733.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314738iEAFB2F9E7AA599AA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="kunalchanda_5-1757949108733.png" alt="kunalchanda_5-1757949108733.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1299666496"&gt;Using GitHub Copilot in Eclipse&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;U&gt;Code Suggestions:&lt;/U&gt;&amp;nbsp;Start typing your code. Copilot will automatically suggest completions. Press &lt;STRONG&gt;TAB&lt;/STRONG&gt; to accept a suggestion.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kunalchanda_7-1757949344991.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314743i7FF173DF5E78A8D2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="kunalchanda_7-1757949344991.png" alt="kunalchanda_7-1757949344991.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;Chat option:&lt;/U&gt;&amp;nbsp;Use the Open Chat option to communicate with Copilot. We can also select the context/object for which we're asking questions or resolving errors.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kunalchanda_8-1757949373300.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314745i34B0760A856F71DC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="kunalchanda_8-1757949373300.png" alt="kunalchanda_8-1757949373300.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-974070272"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;After using it for few cases of RAP, I feel it needs to be evolve further for ABAP specific developments.&amp;nbsp; On the other hand the VSCode copilot extension works better for CAP developments in case of code suggestions &amp;amp; troubleshooting.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/installing-github-copilot-in-eclipse-adt/ba-p/14217834"/>
    <published>2025-09-18T11:47:54.505000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/using-mathematical-instead-of-artificial-intelligence-in-the-abap/ba-p/14215884</id>
    <title>Using mathematical instead of artificial intelligence in the ABAP environments for 2508</title>
    <updated>2025-09-22T13:26:15.367000+02:00</updated>
    <author>
      <name>kilian_kilger</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/204709</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1760064865"&gt;1. Introduction&lt;/H2&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Do all intelligent ABAP apps use AI?&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Although using AI for all intelligent functionality is tempting, other techniques exist to gain insight. One of these is &lt;STRONG&gt;statistics&lt;/STRONG&gt;. In contrast to AI, statistics is a mathematically sound science that will not produce fake answers and hallucinations but merely hard facts. These hard facts can then be used for operational decisions. I will call this &lt;STRONG&gt;mathematical&lt;/STRONG&gt;, not &lt;STRONG&gt;artificial&lt;/STRONG&gt; &lt;STRONG&gt;intelligence&lt;/STRONG&gt;.&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Of course, there are new technologies like&amp;nbsp;&lt;A title="BDC" href="https://www.sap.com/products/data-cloud.html?campaigncode=crm-yj25-btp-3097595&amp;amp;source=ppc-de-googleads--22741048455-185762215630-bdci_bdci-x-x-aam&amp;amp;gclsrc=aw.ds&amp;amp;gad_source=1&amp;amp;gad_campaignid=22741048455&amp;amp;gbraid=0AAAABAUXsVQrP-kl-sYE9i_KlxUkBhq9N&amp;amp;gclid=Cj0KCQjw58PGBhCkARIsADbDilzUwPog1hQ-p2jsuqAWCR5iN_Dx3xqF-gQU0J-1UivT94Vy7BAx0VQaAoITEALw_wcB" target="_blank" rel="noopener noreferrer"&gt;BDC&lt;/A&gt;&amp;nbsp; for data warehousing. However, having statistics available in your transactional ABAP applications might also be of great value, as many transactional decisions might be driven by a dataset already available in ABAP.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;However, some foundations must be built to integrate statistical functions directly into the ABAP language. This blog post outlines these foundations and covers the integration of some new mathematical functions into the ABAP language in the ABAP environments for 2508.&lt;BR /&gt;&lt;BR /&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;For a concrete example of applying these functions, see the following blog post, where these are used to compute random numbers or quantiles using a C1 released cloud API.&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributions-in-the-abap-environments-for/ba-p/14173266" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributions-in-the-abap-environments-for/ba-p/14173266&lt;/A&gt;&lt;/P&gt;&lt;P&gt;The now integrated functions are also part of an agenda to bring more built-in Python or Microsoft Excel functions into ABAP. A business analyst is expected to prepare a functionality in an Excel workspace or a Python script. Later on, this can be integrated into an ABAP app.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&amp;nbsp;This is currently planned to be available on-premise and in the private cloud with the upcoming major SAP S/4HANA release in 2025. Please note that this plan is subject to change by SAP without prior notice.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1563551360"&gt;2. Let's talk about data types&lt;/H2&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;When discussing mathematical functions in ABAP, we have to talk about datatypes. For statistics, the computation must be fast. At the end, we will often calculate a percentage or some other number where only the first two decimal places are relevant.&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Implementing the float data type functionality, which provides 64 bits of binary precision and can represent up to 17 decimal places, is generally sufficient for most applications. We have also developed functions that utilize the DECFLOAT34 data type, offering 128 bits of precision. This level of precision exceeds what is readily available in most other programming languages. Yet, it integrates well within the ABAP type system, and some users might benefit from 128 bits of precision or larger numbers. Often, it is more relevant to support higher exponents than more digits of precision.&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;H2 id="toc-hId-1367037855"&gt;3. Simple combinatoric functions: factorial( ) and binomial( )&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;The first two functions covered in this article are used for combinatorics. These are very basic and occur in a wide variety of settings. These are the factorial and binomial functions. Both take integer arguments and deliver a float or decfloat34 value. As factorials can be pretty large, the extended precision of decfloat34 is beneficial here.&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Both functions return &lt;STRONG&gt;integers mathematically&lt;/STRONG&gt;, but in ABAP, they return F and DECFLOAT34 to support a wider range of input parameters.&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;H3 id="toc-hId-1299607069"&gt;a) Factorial&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Description:&lt;/STRONG&gt;&amp;nbsp;Describes the number of ways in which n items can be ordered. Written n!.&lt;/P&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;Good to know:&lt;/STRONG&gt; available in Microsoft Excel as FACT( )&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;This function appears in a wide variety of settings.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;So if we have Apple and Banana (two items), the factorial is also 2, as there are two possible orderings (Apple, Banana) and (Banana, Apple). For three items, Apple, Banana, and Orange, we have six orderings (Apple, Banana, Orange), (Apple, Orange, Banana), (Orange, Apple, Banana), (Orange, Banana, Apple), (Banana, Orange, Apple), (Banana, Apple, Orange).&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;The factorial has a simple formula:&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;n! = n*(n-1)*(n-2)*...*1&lt;/code&gt;&lt;/pre&gt;&lt;DIV class=""&gt;For the first position, we have n possibilities to choose an item, for the second position only n-1, and so on.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Factorials can be pretty large. For example:&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;50! = 30414093201713378043612608166064768844377641568960512000000000000&lt;/code&gt;&lt;/pre&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;The ABAP kernel computes the factorials using a precomputed table for small values and the transcendental gamma function for large values. This is much faster than computing n * (n-1) * ... * 1.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Here is the ABAP example:&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;data large type decfloat34.
large = factorial( 1000 ).
cl_demo_output=&amp;gt;display( large ).&lt;/code&gt;&lt;/pre&gt;&lt;DIV class=""&gt;ABAP correctly outputs: 4.023872600770937735437024339230040E+2567.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;H3 id="toc-hId-1103093564"&gt;&lt;STRONG&gt;b.)&amp;nbsp;&lt;/STRONG&gt;Binomial coefficient&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;: Describes the number of ways in which k items can be chosen out of a total set of n items.&amp;nbsp;Written&amp;nbsp;C(n, k).&lt;/P&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;Good to know&lt;/STRONG&gt;: available in Microsoft Excel as COMBIN( )&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;For example, C(5,1) equals 5, as there are five possibilities for choosing one item out of five. C(4,2) equals six, as if you have four items (1,2,3,4), you have the six possibilities {1,2}, {1,3}, {1,4}, {2,4}, {2,4}, and {3,4} to choose 2 items. Note here that the ordering is not considered, i.e., the binomial coefficient is not the number of ways to choose an ordered set of k items out of n items.&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;There is a simple formula for the binomial coefficient as well:&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;C(n,k) = n! / ( k! * (n-k)! )&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Here is a simple ABAP program to use the function:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;data large type decfloat34.
large = binomial( n = 20000 k = 5000 ).
cl_demo_output=&amp;gt;display( large ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;This correctly outputs:&amp;nbsp;&lt;SPAN&gt;1.566362779957802233492978893365436E+4882, as you have many options to choose from, 5000 items out of 20,000 items.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Note that the binomial coefficient is typically not computed by the above formula, but by the transcendental beta function. This is also done in ABAP.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-777497340"&gt;4. Basic transcendental functions: gamma( ) and log_gamma( )&lt;/H2&gt;&lt;P&gt;These basic transcendental functions appear everywhere in statistics, probability theory, and many other settings. If you don't know them, imagine them as similar to transcendental functions like sin(x), cos(x), and log(x).&lt;/P&gt;&lt;P&gt;The importance of the gamma function comes from the fact that it is defined on the whole range of real numbers (except -1, -2, ...) and that for positive integers n:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;n! = Gamma(n+1)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The gamma function is defined as an integral (for positive real numbers) as:&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 221px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314456i8F1F7182DA5B5780/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;It is essential, as it defines the probability density of the &lt;STRONG&gt;gamma probability distribution&lt;/STRONG&gt; and some other probability distributions. Thus, it is often used in statistics.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;As the gamma function grows rapidly, in practice, the function log_gamma(x) is often used, which is defined as:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;log_gamma(x) = log(abs(gamma(x))&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The computation of the log_gamma function is also more numerically stable.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Here is a picture of both functions:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 712px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313654i9E9FCDD77A85E0DB/image-dimensions/712x381?v=v2" width="712" height="381" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The usage in ABAP is simple:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; data gamma_value type decfloat34.
 data log_gamma_value type decfloat34.
 data test_log_gamma type decfloat34.
 
 gamma_value = gamma( - 1 / 2 ).
 log_gamma_value = log_gamma( - 1 / 2 ).
 test_log_gamma = log( abs( gamma( -1 / 2 ) ) ).
 
 assert log_gamma_value = test_log_gamma.
 
 cl_demo_output=&amp;gt;write( gamma_value ).
 cl_demo_output=&amp;gt;write( log_gamma_value ).
 cl_demo_output=&amp;gt;write( test_log_gamma ).
 cl_demo_output=&amp;gt;display( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;This correctly outputs:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;GAMMA_VALUE
-3.544907701811032054596334966682290

LOG_GAMMA_VALUE
1.265512123484645396488945797134706

TEST_LOG_GAMMA
1.265512123484645396488945797134706&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Good to know: &lt;/STRONG&gt;These&amp;nbsp;functions are available in Microsoft Excel as GAMMA( ) and GAMMALN( ).&lt;/P&gt;&lt;H2 id="toc-hId-580983835"&gt;&lt;STRONG&gt;5. Statistic functions: erf( ), erf_inv(), erfc(), erfc_inv()&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;The &lt;STRONG&gt;error function&lt;/STRONG&gt; is another fundamental transcendental function. The importance of the error function erf(x) comes from the fact that it is related to the distribution function of the normal probability distribution.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314463i1DC884AC1A6FBCC7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The area marked in yellow below the blue curve (which draws the probability density function of the standard normal distribution) is given by:&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 205px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314466iF098B12381E4E6C8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The yellow area gives the probability that an event is smaller than or equal to some given value.&amp;nbsp;&lt;/P&gt;&lt;P&gt;An integral again defines the error function:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 184px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314595iF481F1715B634B06/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Good to know:&lt;/STRONG&gt;&amp;nbsp;The error function is available in Microsoft Excel as ERF().&lt;/P&gt;&lt;P&gt;The graph of the function erf(x) is simple:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314469i3A803CB2802302FD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you can see from the graph, the error function is invertible on the interval (-1,1). The inverse function is called erf_inv(x) and is used to compute the &lt;STRONG&gt;quantile&lt;/STRONG&gt; of the &lt;STRONG&gt;normal distribution&lt;/STRONG&gt;. The graph of the inverse function looks like so:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314619i260476E559F615EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Good to know:&lt;/STRONG&gt;&amp;nbsp;The inverse error function is available in Microsoft Excel as ERFINV()&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In addition to the error and inverse error functions, there are the complementary error functions erfc(x) and inverse erfc_inv(x). The complementary error function is defined as:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="image.png" style="width: 154px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314635i2442525ADCFC9A8F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Why is this function needed? There are multiple reasons this function is used very often, as it appears naturally in statistics, but is also needed numerically to compute probabilities very close to 1, where erf(x) loses precision (floating point numbers are very precise around 0 and not very precise around 1).&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Good to know:&lt;/STRONG&gt;&amp;nbsp;The complementary error function is called ERFC() in Microsoft Excel.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here is a basic usage in ABAP:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; final(erf) = erf( 1 / 2 ).
 final(erfc) = erfc( 1 / 2 ).
 final(erf_inv) = erf_inv( 1 / 2 ).

 cl_demo_output=&amp;gt;write( erf ).
 cl_demo_output=&amp;gt;write( erfc ).
 cl_demo_output=&amp;gt;write( erf_inv ).
 cl_demo_output=&amp;gt;display( ).&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-384470330"&gt;6. Conclusion&lt;/H2&gt;&lt;P&gt;This article introduced 8 new mathematical functions in ABAP for the ABAP environments for 2508. These can be applied in a business context in statistical applications. A good example for this can be found in the following blog post:&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributions-in-the-abap-environments-for/ba-p/14173266" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributio...&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/using-mathematical-instead-of-artificial-intelligence-in-the-abap/ba-p/14215884"/>
    <published>2025-09-22T13:26:15.367000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-sort-data-in-value-help/ba-p/14225144</id>
    <title>ABAP RAP: Sort data in value help</title>
    <updated>2025-09-23T08:16:39.831000+02:00</updated>
    <author>
      <name>adel_adel</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/218694</uri>
    </author>
    <content>&lt;P&gt;Hi Experts,&lt;/P&gt;&lt;P&gt;I haven ABAP RAP application, is working fine. The requirement I have to add is the following:&lt;/P&gt;&lt;P&gt;The values of 1 of the fileds are coming from a domain name. The values are now populated default sorted on key value.&lt;/P&gt;&lt;P&gt;I want to sort the values ( at least on the presentation layer) based on the position as defined in the domain DD07T-VALPOS&lt;/P&gt;&lt;P&gt;Any idea how to achieve this? I have tried to add that field in the cds view and hide it and use the annotation&amp;nbsp;&lt;SPAN&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;.presentationVariant: [{sortOrder: [{ by: 'ValuePosition' , direction: #DESC}]}] -- does not help&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-sort-data-in-value-help/ba-p/14225144"/>
    <published>2025-09-23T08:16:39.831000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714</id>
    <title>ABAP Cloud Number Ranges: TheÂ ABAP RAP COMMIT WORKÂ Conflict and the Simple Fix</title>
    <updated>2025-09-23T12:45:39.845000+02:00</updated>
    <author>
      <name>suzanne_alivand</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/848404</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Many business applications require unique numbers, for example, to complete the keys of data records. In order to get numbers from an interval, a number range object must be defined which can contain different properties. Standard Number ranges are typically maintained via customizing in each system (Test and Production). However, the process for&amp;nbsp;&lt;STRONG&gt;custom&lt;/STRONG&gt;&amp;nbsp;Number Range Objects in the S/4HANA Cloud Public Edition is different.&lt;/P&gt;&lt;P&gt;These custom objects must be created in the development environment, configured in the customizing client, and then transported through the landscape. This blog outlines that end-to-end process, including a frustrating short dump I encountered and the surprisingly simple configuration change that solved it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 1: The Developer's Task - Defining the Blueprint in ADT&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Unlike the on-premises world, the process for a custom number range begins in the developer's toolkit: ABAP Development Tools (ADT). Here, you create the&amp;nbsp;&lt;EM&gt;definition&lt;/EM&gt;&amp;nbsp;or the&amp;nbsp;&lt;EM&gt;blueprint&lt;/EM&gt;&amp;nbsp;of your number range object.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In your ABAP package, right-click and choose&amp;nbsp;New&amp;nbsp;-&amp;gt;&amp;nbsp;Other ABAP Repository Object.&lt;/LI&gt;&lt;LI&gt;Search for&amp;nbsp;&lt;STRONG&gt;"Number Range Object"&lt;/STRONG&gt;, give it a name and a description.&lt;/LI&gt;&lt;LI&gt;Assign it to a&amp;nbsp;&lt;STRONG&gt;Workbench Transport&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the object editor, the most important property is the&amp;nbsp;&lt;STRONG&gt;Number Length Domain&lt;/STRONG&gt;. Itâ€™s a best practice to create a custom domain for this to define the length and type. For my&amp;nbsp;ZPO_RUN_ID, I used a domain of type&amp;nbsp;NUMC(10).&lt;/LI&gt;&lt;LI&gt;Save and&amp;nbsp;&lt;STRONG&gt;activate&lt;/STRONG&gt;&amp;nbsp;the object.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_7-1758216453231.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316647iBAD6D68F8E9EC235/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_7-1758216453231.png" alt="suzanne_alivand_7-1758216453231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The system now knows what a&amp;nbsp;ZPO_RUN_ID&amp;nbsp;is, but it has no actual number intervals defined.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 2: The Customizer's Task - Setting Intervals in Fiori&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This is where we move to the Fiori Launchpad, specifically in the&amp;nbsp;&lt;STRONG&gt;Customizing Client&lt;/STRONG&gt;.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to your Customizing client and open the&amp;nbsp;&lt;STRONG&gt;"Manage Number Range Intervals"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;LI&gt;Search for your newly created object,&amp;nbsp;ZPO_RUN_ID.&lt;/LI&gt;&lt;LI&gt;Navigate to the "Number Ranges" tab and click&amp;nbsp;&lt;STRONG&gt;"Create"&lt;/STRONG&gt;. Here you'll define your interval, for example,&amp;nbsp;01&amp;nbsp;with its lower and upper limits.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_8-1758216453232.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316646i0A9308E96CB6625D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_8-1758216453232.png" alt="suzanne_alivand_8-1758216453232.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_13-1758216499507.png" style="width: 663px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316652i70CFA2444947FDD8/image-dimensions/663x226?v=v2" width="663" height="226" role="button" title="suzanne_alivand_13-1758216499507.png" alt="suzanne_alivand_13-1758216499507.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 3: The Transport &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The system needs a&amp;nbsp;&lt;STRONG&gt;Customizing Transport&lt;/STRONG&gt;&amp;nbsp;to record this change.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In a new tab, open the&amp;nbsp;&lt;STRONG&gt;"Export Customizing Transports"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_10-1758216453236.png" style="width: 237px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316649iD7EFC91ECED66A4B/image-dimensions/237x191?v=v2" width="237" height="191" role="button" title="suzanne_alivand_10-1758216453236.png" alt="suzanne_alivand_10-1758216453236.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a new&amp;nbsp;&lt;STRONG&gt;"Customizing Request"&lt;/STRONG&gt;&amp;nbsp;and give it a description. It's a good practice to set this as your "Default" request using the "Change Category" button.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_11-1758216453238.png" style="width: 734px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316650i3B8DE8A478A85F6C/image-dimensions/734x90?v=v2" width="734" height="90" role="button" title="suzanne_alivand_11-1758216453238.png" alt="suzanne_alivand_11-1758216453238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Go back to the Number Range app and save your interval again. This time, it will find your open request and save the change successfully.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_12-1758216453239.png" style="width: 823px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316651i263BA5C692E50873/image-dimensions/823x99?v=v2" width="823" height="99" role="button" title="suzanne_alivand_12-1758216453239.png" alt="suzanne_alivand_12-1758216453239.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now you have two transports: the Workbench TR from ADT with the object definition, and the Customizing TR from Fiori with the interval data. The Workbench TR should be a prerequisite for the Customizing TR when you import them.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 4: The Payoff - Using the Number Range in RAP&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With everything configured, it was time to use it in my ABAP RAP application. The correct, released API is the class&amp;nbsp;CL_NUMBERRANGE_RUNTIME.&lt;/P&gt;&lt;P&gt;I had two main options for assigning an ID based on the business requirement:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;An&amp;nbsp;early numbering&amp;nbsp;determination, which runs before the save phase.&lt;/LI&gt;&lt;LI&gt;A&amp;nbsp;determination on save, which runs during the final save transaction.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I initially chose early numbering&amp;nbsp;determination. My&amp;nbsp;earlynumbering_create method was clean and used the correct class.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD earlynumbering_create.

    DATA: latest_num   TYPE cl_numberrange_runtime=&amp;gt;nr_number.

    DATA(All_entities) = entities.
    DELETE All_entities WHERE  RunId IS NOT INITIAL.

    TRY.
        cl_numberrange_runtime=&amp;gt;number_get(
          EXPORTING
            nr_range_nr = '01'
            object      = 'ZPO_RUN_ID'
            quantity = CONV #( lines( all_entities ) )
          IMPORTING
            number      = latest_num
            returncode = DATA(code)
            returned_quantity = DATA(return_qty) ).

      CATCH cx_nr_object_not_found INTO DATA(lx_obj_not_found).
      CATCH cx_number_ranges INTO DATA(lx_ranges_error).

        LOOP AT All_entities INTO DATA(entity_line).

          APPEND VALUE #( %cid = entity_line-%cid
                          %key  = entity_line-%key ) TO failed-run.
          APPEND VALUE #( %cid = entity_line-%cid
                          %key = entity_line-%key
                          %msg = lx_ranges_error ) TO reported-run.
        ENDLOOP.
        EXIT.
    ENDTRY.

    DATA(curr_num) = latest_num - return_qty.

    LOOP AT All_entities INTO entity_line.
      curr_num = curr_num + 1 .
      APPEND VALUE #( %cid = entity_line-%cid
      RunUuid = curr_num ) TO mapped-run.

    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I ran the app, created an entry, clicked "Save," and was met with a short dump:&amp;nbsp;&lt;STRONG&gt;ABAP Runtime error 'BEHAVIOR_ILLEGAL_STATEMENT'&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;The "Aha!" Moment: The&amp;nbsp;COMMIT WORK&amp;nbsp;Conflict and the Simple Fix&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;My code was correct. The class was correct. The configuration was correct. So, what was wrong?&lt;/P&gt;&lt;P&gt;The problem was my number range was&amp;nbsp;&lt;STRONG&gt;not buffered&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;After a long debugging session, I discovered that when&amp;nbsp;cl_numberrange_runtime&amp;nbsp;is called for a non-buffered number range, it&amp;nbsp;&lt;STRONG&gt;must&lt;/STRONG&gt;&amp;nbsp;perform an immediate database&amp;nbsp;UPDATE&amp;nbsp;and its own&amp;nbsp;COMMIT WORK&amp;nbsp;to guarantee the number is reserved. The RAP framework, in its strictly controlled Save phase, saw this independent&amp;nbsp;COMMIT&amp;nbsp;as a violation of its own transaction and triggered the dump to prevent data inconsistency.&lt;/P&gt;&lt;P&gt;The solution wasn't in my ABAP code at all. It was in the configuration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enabling buffering solves this transactional conflict.&lt;/STRONG&gt;&amp;nbsp;Hereâ€™s why:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;With buffering, the class gets the next number from the application server's&amp;nbsp;&lt;STRONG&gt;memory&lt;/STRONG&gt;, not directly from the database.&lt;/LI&gt;&lt;LI&gt;Getting a number from memory requires&amp;nbsp;&lt;STRONG&gt;no immediate database update&lt;/STRONG&gt;&amp;nbsp;and, crucially,&amp;nbsp;&lt;STRONG&gt;no conflicting&amp;nbsp;COMMIT WORK&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I edited the&amp;nbsp;&lt;STRONG&gt;Properties&lt;/STRONG&gt;&amp;nbsp;of my&amp;nbsp;ZPO_RUN_ID&amp;nbsp;object and changed the&amp;nbsp;&lt;STRONG&gt;Buffering&lt;/STRONG&gt;&amp;nbsp;type to&amp;nbsp;&lt;STRONG&gt;"Main Memory Buffering"&lt;/STRONG&gt;&amp;nbsp;with a size of 10.&lt;/P&gt;&lt;P&gt;With that one configuration change, everything worked perfectly. My&amp;nbsp;determination on save&amp;nbsp;now executes without any issues.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Final Thoughts&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the ABAP Cloud, writing correct code is only half the battle. We also have to deeply understand and respect the strict transactional model of the RAP framework. A seemingly simple configuration choice, like buffering, can be the key to resolving what looks like a complex runtime error.&lt;/P&gt;&lt;P&gt;If you ever face an unexpected&amp;nbsp;BEHAVIOR_ILLEGAL_STATEMENT&amp;nbsp;dump, consider what your code might be doing that could be trying to interfere with the framework's unit of work.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714"/>
    <published>2025-09-23T12:45:39.845000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/validations-in-bopf-and-consistency-validation-in-bopf/ba-p/14214587</id>
    <title>Validations in BOPF and Consistency Validation in BOPF</title>
    <updated>2025-09-24T07:00:43.999000+02:00</updated>
    <author>
      <name>Krishna_karale</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451081</uri>
    </author>
    <content>&lt;P&gt;Hello Everyone,&lt;/P&gt;&lt;P&gt;In this blog we will be going to learn about the Validations in BOPF.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What is Validation in BOPF?&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In BOPF, &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;a validation is a consistency check defined on a node of the business object that ensures the data fulfills specific business rules before it is saved or processed.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In BOPF, keeping the data clean and consistent is very important. Validations help achieve this by checking the data against specific rules. Just like determinations, validations are created on the node of the data model where they are needed. Today, weâ€™ll walk you through how to create a validation and write the logic for it in the implementation class.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;Procedure &amp;nbsp;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we are defining a custom Travel table (zkk_dt_travel).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Data base table for Travel Details'
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #ALLOWED
define table zkk_dt_travel {

  key client     : abap.clnt not null;
  key travel_id  : zkk_de_travel_id not null;
  key user_email : zkk_de_email not null;
  start_date     : dats;
  destination    : zkk_de_destination;
  status         : zkk_de_status;
  expense_type   : zkk_de_item_type;
  @Semantics.amount.currencyCode : 'zkk_travel_hdr.curr_key'
  total_cost     : zkk_de_cost;
  curr_key       : zkk_de_cost_key;
  remarks        : zkk_de_remarks;
  created_by     : zkk_de_createdby;
  created_on     : datum;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;The above table has the below shown data.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757594071182.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313058i31645446FA5AE134/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757594071182.png" alt="Krishna_karale_1-1757594071182.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;For the Database table we are defining the Basic view &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.sqlViewName: 'ZKK_DBV_TRAVEL'
@AbapCatalog.compiler.compareFilter: true
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface view for Travel details'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true


@ObjectModel:{
modelCategory: #BUSINESS_OBJECT,
compositionRoot: true,
transactionalProcessingEnabled: true,
writeActivePersistence: 'ZKK_dt_travel',

createEnabled: true,
updateEnabled: true,
deleteEnabled: true
}

@OData.publish: true
define view zi_kk_travel
  as select from zkk_dt_travel
{
  key travel_id,
      @ObjectModel.mandatory: true
  key user_email,
      start_date,
      destination,
      status,
      @ObjectModel.mandatory: true
      expense_type,
      @ObjectModel.mandatory: true
      total_cost,
      curr_key,
      remarks,
      created_by,
      created_on
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;For creating the Business object directly from the Eclipse editor, we have to make use of annotations which I have given with their functionality&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Hereâ€™s the explanation of each annotation in your snippet:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@ObjectModel: {&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;modelCategory: #BUSINESS_OBJECT,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;compositionRoot: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;transactionalProcessingEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;writeActivePersistence: 'ZKK_dt_travel',&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;createEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;updateEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;deleteEnabled: true&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;}&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Explanation&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;modelCategory: #BUSINESS_OBJECT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Declares that the CDS view represents a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Business Object (BO)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. This means it can be used in BOPF to handle business logic and transactional operations.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;compositionRoot: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Defines this entity as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;root node&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; of the Business Object. Other nodes (child entities) can be linked to it via composition relationships.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactionalProcessingEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Enables &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactional behavior&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (create, update, delete, save, rollback) for the entity, making it suitable for business object processing.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;writeActivePersistence: 'ZKK_dt_travel'&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Specifies the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;database table&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (&lt;/SPAN&gt;&lt;SPAN&gt;ZKK_DT_TRAVEL&lt;/SPAN&gt;&lt;SPAN&gt;) where the active (persisted) data of this entity is stored.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;createEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows the creation of new records in the entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;updateEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows modification of existing records.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;deleteEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows deletion of records.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1599241"&gt;@odata&lt;/a&gt;.publish: true&lt;/STRONG&gt;&lt;SPAN&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;turns your CDS view into an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;OData service provider&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, making its data available for consumption via OData protocols.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;In short:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This annotation block is used to define a CDS entity as a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Business Object root node&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; with full CRUD (Create, Read, Update, Delete) support and persistence in the custom table &lt;/SPAN&gt;&lt;SPAN&gt;ZKK_DT_TRAVEL&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here I am creating the Metadata extension for the Basic view (ZI_KK_TRAVEL) for consuming it in the front end.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
@UI.headerInfo: {
    typeName: 'Travel',
    typeNamePlural: 'Travel Details'
}
annotate entity zi_kk_travel
    with 
{
@UI.facet: [{ 
id: 'Travel', 
purpose: #STANDARD, 
position: 10, 
label: 'Travel Details ', 
type: #IDENTIFICATION_REFERENCE 
} ]
 @UI.lineItem: [{ position: 10, label: 'Travel Id' }]
 @UI.identification: [{ position: 10 }]
    travel_id;
 @UI.lineItem: [{ position: 20, label: 'Email' }]
 @UI.identification: [{ position: 20 }]
    user_email;
 @UI.lineItem: [{ position: 30, label: 'Travel Date' }]
 @UI.identification: [{ position: 30 }]
    start_date;
 @UI.lineItem: [{ position: 40, label: 'Destination' }]
 @UI.identification: [{ position: 40 }]
    destination;
 @UI.lineItem: [{ position: 50, label: 'Status' }]
 @UI.identification: [{ position: 50 }]
    status;
 @UI.lineItem: [{ position: 60, label: 'Expense Type' }]
 @UI.identification: [{ position: 60 }]
    expense_type;
 @UI.lineItem: [{ position: 65, label: 'Amount' }]
 @UI.identification: [{ position: 65 }]
    total_cost;
 @UI.lineItem: [{ position: 70, label: 'Currency' }]
 @UI.identification: [{ position: 70 }]
    curr_key;
 @UI.lineItem: [{ position: 80, label: 'Remarks for Expense' }]
 @UI.identification: [{ position: 80 }]
    remarks;
 @UI.lineItem: [{ position: 85, label: 'Created By' }]
 @UI.identification: [{ position: 10 }]
    created_by;
 @UI.lineItem: [{ position: 90, label: 'Created Date' }]
 @UI.identification: [{ position: 90 }]
    created_on;   
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Now activate the Basic view and the meta data extension, when it gets activated the Business Object get created implicitly.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now open the BOBX Transaction.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757592499811.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313013iA3CE0EC7DAE390B8/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Krishna_karale_0-1757592499811.png" alt="Krishna_karale_0-1757592499811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can search the business object in Home business objects or click on the below marked option.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757592499815.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313014iC696BF0CC68256E1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757592499815.png" alt="Krishna_karale_1-1757592499815.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the BO name which is our Basic View name (ZI_KK_TRAVEL)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757592550543.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313015iEB32B50190C69B55/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757592550543.png" alt="Krishna_karale_2-1757592550543.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_3-1757592550545.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313016i52BC1E6BA95F4920/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_3-1757592550545.png" alt="Krishna_karale_3-1757592550545.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now to Implement the validations expand the Node Elements &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_4-1757592664872.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313018iAD4AC1A6BC6E15F5/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_4-1757592664872.png" alt="Krishna_karale_4-1757592664872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Right Click on Validations will see the option to Create Validations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_5-1757592664876.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313019iFE10A410C3DA9B77/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_5-1757592664876.png" alt="Krishna_karale_5-1757592664876.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the Validation Name and Description and Class for implementing the validation logic.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_6-1757592724202.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313021iE409E1816592FD3A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_6-1757592724202.png" alt="Krishna_karale_6-1757592724202.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Double click on Class Name, and create a class which will be having the super class implicitly&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_7-1757592724204.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313022i60C54D71A4DAD6DC/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_7-1757592724204.png" alt="Krishna_karale_7-1757592724204.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_8-1757592724206.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313023i7D5C4DCD05FAB412/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_8-1757592724206.png" alt="Krishna_karale_8-1757592724206.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now we have to provide Triggering conditions for the validations, so select the Node instance and tick on Create, Update, Delete and Check &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_9-1757592724208.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313025i9F8AA07FF69DD538/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_9-1757592724208.png" alt="Krishna_karale_9-1757592724208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Save it and check and generate it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_10-1757592724210.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313024i2B58966A704D4508/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_10-1757592724210.png" alt="Krishna_karale_10-1757592724210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;After this we have to go&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;to eclipse and &lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt; a service definition on basic &lt;/SPAN&gt;&lt;SPAN class=""&gt;view&lt;/SPAN&gt; &lt;SPAN class=""&gt;(&lt;/SPAN&gt;&lt;SPAN class=""&gt;ZI_KK_TRAVEL)&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757593000483.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313029i1C822052AE6EFECE/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_0-1757593000483.png" alt="Krishna_karale_0-1757593000483.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now create a Service binding on top of Service definition and publish it &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757593000486.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313028i7CF7AC634D5DAC04/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757593000486.png" alt="Krishna_karale_1-1757593000486.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When we preview it &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It will be navigated to the frontend while navigating it will ask for your SAP GUI Credentials to login.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757594121268.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313059iAEC5D4AF3D524A70/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757594121268.png" alt="Krishna_karale_2-1757594121268.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now go to SE91 Transaction and create a message class &lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_3-1757593000492.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313032iC0B1ADEA725893E0/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_3-1757593000492.png" alt="Krishna_karale_3-1757593000492.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here, I am doing Validation for a Single status field only so i have passed only two messages &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_4-1757593127901.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313039iA7B37EE8E3E92A3F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_4-1757593127901.png" alt="Krishna_karale_4-1757593127901.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;Now I want to provide the Validations for Status field, so go to our class which we have created in Validations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_5-1757593127904.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313040i39BD2E5B3B58359A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_5-1757593127904.png" alt="Krishna_karale_5-1757593127904.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;Implement our Custom login in this method.&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD /bobf/if_frw_validation~execute.

    CLEAR : et_failed_key, eo_message.
    eo_message = /bobf/cl_frw_factory=&amp;gt;get_message( ).
    DATA : lt_data TYPE ztikk_travel,   " Table type for header node
           ls_msg  TYPE symsg.
    io_read-&amp;gt;retrieve(
      EXPORTING
        iv_node                 = is_ctx-node_key
        it_key                  = it_key
        iv_fill_data            = abap_true
        it_requested_attributes = VALUE #(
                                          (                 zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status )
                                         ) )
      IMPORTING
        et_data                 = lt_data
    ).
    LOOP AT lt_data REFERENCE INTO DATA(ls_data).
      IF ls_data-&amp;gt;status IS INITIAL .
        ls_msg-msgid = 'ZKK_MSG_BOPF'.
        ls_msg-msgno = '000'.
        ls_msg-msgty = 'E'.

        eo_message-&amp;gt;add_message(
          is_msg       = ls_msg                 " Message that is to be added to the message object
          iv_node      = is_ctx-node_key            " Node to be used in the origin location
          iv_key       = ls_data-&amp;gt;key            " Instance key to be used in the origin location
iv_attribute = zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status
          " Attribute to be used in the origin location
        ).

        INSERT VALUE #( key = ls_data-&amp;gt;key ) INTO TABLE et_failed_key.
      ENDIF.

      DATA(lv_status) = to_upper( condense( ls_data-&amp;gt;status ) ).
      IF lv_status NA 'ACCEPT' OR lv_status NA 'REJECT'.
        ls_msg-msgid = 'ZKK_MSG_BOPF'.
        ls_msg-msgno = '001'.
        ls_msg-msgty = 'E'.

        eo_message-&amp;gt;add_message(
          is_msg       = ls_msg
          iv_node      = is_ctx-node_key
          iv_key       = ls_data-&amp;gt;key
          iv_attribute = zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status
        ).

        INSERT VALUE #( key = ls_data-&amp;gt;key ) INTO TABLE et_failed_key.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;Now go to service binding and preview it. Try to create a new record.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here I am keeping Status field as empty so it will throw error.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757593607942.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313054i8AFBB4A6CB13AC7F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_0-1757593607942.png" alt="Krishna_karale_0-1757593607942.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now Status should accept only â€˜ACCEPTâ€™ or â€˜REJECTâ€™. If I&amp;nbsp;try to give any other value it will throw error again.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757593607945.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313055i5F011EB0883B6BFE/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757593607945.png" alt="Krishna_karale_1-1757593607945.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you give the correct value â€˜Acceptâ€™ or â€˜Rejectâ€™.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757593607947.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313053iAD827C3ADC2B81D1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757593607947.png" alt="Krishna_karale_2-1757593607947.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1889114913"&gt;&lt;U&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/U&gt;&lt;/H3&gt;&lt;P&gt;Validations in BOPF play a vital role in safeguarding data quality and enforcing business rules at the framework level. By defining validations directly on the business object nodes, we ensure that only consistent and compliant data enters the system, regardless of whether it originates from an SAP UI, an external interface, or a background process. This not only strengthens the reliability of the application but also reduces the need for redundant checks across different layers. In short, validations serve as a powerful and centralized mechanism to guarantee data integrity within the BOPF model.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/validations-in-bopf-and-consistency-validation-in-bopf/ba-p/14214587"/>
    <published>2025-09-24T07:00:43.999000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-pre-create-the-packages-for-the-abap-flight-reference-scenario/ba-p/14227008</id>
    <title>How to pre-create the packages for the ABAP Flight Reference Scenario</title>
    <updated>2025-09-24T17:26:43.147000+02:00</updated>
    <author>
      <name>Andre_Fischer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/55</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1631957317"&gt;Introduction&lt;/H1&gt;&lt;P&gt;Several customers ran into an error when trying to import the&amp;nbsp;ABAP Flight Reference Scenario using the abapGit plugin as described in this question&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-q-a/abapgit-plug-in-to-import-the-abap-flight-reference-scenario-fails-quot/qaq-p/14215307" target="_blank"&gt;abapGit plug-in to import the ABAP Flight Referenc... - SAP Community&lt;/A&gt;&lt;/P&gt;&lt;P&gt;As mentioned by a user in GitHub there is a workaround available by manually creating the packages before pulling the content of the &lt;A href="https://github.com/SAP-samples/abap-platform-refscen-flight/" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub repository of the ABAP Flight Reference Scenario&lt;/A&gt; .&lt;/P&gt;&lt;P&gt;Since this is a tedious and error-prone procedure I decided to provide a class in the Z-namespace that can be created in a package in the software component &lt;STRONG&gt;ZLOCAL&lt;/STRONG&gt; that creates all the packages which can be run by simply pressing &lt;STRONG&gt;F9&lt;/STRONG&gt;.&lt;/P&gt;&lt;H1 id="toc-hId-1435443812"&gt;How to section&lt;/H1&gt;&lt;OL&gt;&lt;LI&gt;Create a package, e.g.&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ZCREATE_DMO_PACKAGES&lt;/STRONG&gt; with &lt;STRONG&gt;ZLOCAL&lt;/STRONG&gt; as its super package.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create a class&amp;nbsp;&lt;STRONG&gt;zcl_create_dmo_packages&lt;/STRONG&gt; in that package.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Replace the code of that class with the source code shown below.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Run the class via pressing &lt;STRONG&gt;F9&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-1238930307"&gt;Result&lt;/H1&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Andre_Fischer_0-1758727005923.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319523iC640B0978ABC0CA6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Andre_Fischer_0-1758727005923.png" alt="Andre_Fischer_0-1758727005923.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1042416802"&gt;Coding explained&lt;/H1&gt;&lt;P&gt;The class starts by retrieving the names of the packages, their super packages and their descriptions using method&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;get_package_information( )&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It also retrieves a transport that is needed for the software component &lt;STRONG&gt;/DMO/SAP&lt;/STRONG&gt; according to the settings.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For each package it is being checked if it already exists, so that the class can be run several times in case something goes wrong.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using the boolean constant value&amp;nbsp;&lt;STRONG&gt;create_packages&lt;/STRONG&gt;&amp;nbsp;(which is set to &lt;STRONG&gt;abap_true&lt;/STRONG&gt;) it is managed whether the method&lt;STRONG&gt;&amp;nbsp;create_package_in_dmo_sap( )&lt;/STRONG&gt; is actually being called.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The creation of packages and the retrieval of information needed is done by using the XCO libraries that allow access to various functionalities in ABAPCloud. (&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/xco-library" target="_blank" rel="noopener noreferrer"&gt;XCO Library | SAP Help Portal&lt;/A&gt;)&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-845903297"&gt;Sourcecode -&amp;nbsp;&lt;SPAN&gt;zcl_create_dmo_packages&lt;/SPAN&gt;&lt;/H1&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_create_dmo_packages DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_oo_adt_classrun .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CONSTANTS : co_dmo_sap_package TYPE if_xco_cp_gen_devc_s_fo_proper=&amp;gt;tv_software_component VALUE '/DMO/SAP',
                test_string        TYPE string VALUE '',
                create_packages    TYPE abap_boolean VALUE abap_true.



    TYPES : BEGIN OF t_dmo_packages,
              package_name       TYPE sxco_package,
              super_package_name TYPE sxco_package,
              short_description  TYPE if_xco_cp_gen_devc_s_form=&amp;gt;tv_short_description,
            END OF t_dmo_packages.

    TYPES tt_dmo_packages TYPE STANDARD TABLE OF t_dmo_packages WITH DEFAULT KEY.

    DATA dmo_package TYPE t_dmo_packages.
    DATA dmo_packages TYPE tt_dmo_packages.
    DATA transport_request TYPE sxco_transport.


    METHODS create_package_in_dmo_sap IMPORTING
                                                i_transport          TYPE sxco_transport
                                                I_package_name       TYPE sxco_package
                                                i_super_package_name TYPE sxco_package
                                                i_short_description  TYPE if_xco_cp_gen_devc_s_form=&amp;gt;tv_short_description OPTIONAL
                                      EXPORTING findings             TYPE sxco_t_gen_o_findings
                                                exception_text       TYPE string.

    METHODS get_package_information RETURNING VALUE(r_dmo_packages) TYPE tt_dmo_packages.

    METHODS create_transport      RETURNING VALUE(lo_transport) TYPE sxco_transport.

    METHODS create_put_operation RETURNING VALUE(r_put_operation) TYPE REF TO if_xco_cp_gen_devc_d_o_put.


ENDCLASS.



CLASS zcl_create_dmo_packages IMPLEMENTATION.


  METHOD if_oo_adt_classrun~main.

    transport_request = create_transport( ).

    dmo_packages = get_package_information( ).

    LOOP AT dmo_packages INTO dmo_package.

      dmo_package-package_name = dmo_package-package_name &amp;amp;&amp;amp; test_string.

      "super package /dmo/sap must not be changed
      IF dmo_package-super_package_name &amp;lt;&amp;gt; co_dmo_sap_package.
        dmo_package-super_package_name = dmo_package-super_package_name &amp;amp;&amp;amp; test_string.
      ENDIF.

      DATA(dmo_flight_package) = xco_cp_abap_repository=&amp;gt;object-&amp;gt;devc-&amp;gt;for( dmo_package-package_name  ).
      out-&amp;gt;write( |check package { dmo_package-package_name }| ).

      IF dmo_flight_package-&amp;gt;exists(  ) = abap_true.
        out-&amp;gt;write( | package { dmo_package-package_name } does exist| ).
      ELSE.
        out-&amp;gt;write( | package { dmo_package-package_name } does not exist| ).
        IF create_packages = abap_true.
          out-&amp;gt;write( | create package { dmo_package-package_name } | ).

          create_package_in_dmo_sap(
            EXPORTING
             i_transport          = transport_request
             i_package_name       = dmo_package-package_name
             i_super_package_name = dmo_package-super_package_name
             i_short_description  = dmo_package-short_description
            IMPORTING
             findings             = DATA(findings)
             exception_text       = DATA(exception_text)
           ).
          IF findings IS NOT INITIAL.
            out-&amp;gt;write( 'Findings:' ).
            out-&amp;gt;write( findings ).
          ENDIF.
          IF exception_text IS NOT INITIAL.
            out-&amp;gt;write( |exception occured  { exception_text } | ).
          ENDIF.
        ELSE.
          out-&amp;gt;write( | demo mode | ).
        ENDIF.
      ENDIF.

    ENDLOOP.



  ENDMETHOD.

  METHOD create_package_in_dmo_sap.

    DATA put_operation TYPE REF TO if_xco_cp_gen_devc_d_o_put.
    put_operation = create_put_operation( ).

    DATA short_description TYPE if_xco_cp_gen_devc_s_form=&amp;gt;tv_short_description.
    IF i_short_description IS NOT INITIAL.
      short_description = i_short_description.
    ELSE.
      short_description = i_package_name.
    ENDIF.
    TRY.
        DATA(lo_specification) = put_operation-&amp;gt;add_object( i_package_name )-&amp;gt;create_form_specification( ).
        lo_specification-&amp;gt;set_short_description( short_description ).
        lo_specification-&amp;gt;properties-&amp;gt;set_super_package( i_super_package_name )-&amp;gt;set_software_component( co_dmo_sap_package ).
        DATA(lo_result) = put_operation-&amp;gt;execute( ).
        " handle findings
        DATA(lo_findings) = lo_result-&amp;gt;findings.
        findings = lo_findings-&amp;gt;get( ).
      CATCH cx_root INTO DATA(generation_exception).
        exception_text = generation_exception-&amp;gt;get_text(  ).
    ENDTRY.



  ENDMETHOD.

  METHOD get_package_information.
    r_dmo_packages = VALUE #(
    ( package_name = '/DMO/FLIGHT' super_package_name = '/DMO/SAP' short_description = 'Flight Reference Scenario' )
    ( package_name = '/DMO/FLIGHT_COLLDRAFT' super_package_name = '/DMO/FLIGHT' short_description =
    'Flight Reference Scenario: Collaborative Draft' )
    ( package_name = '/DMO/FLIGHT_DRAFT' super_package_name = '/DMO/FLIGHT' short_description = 'Flight Reference Scenario: Draft Guide'
    )
    ( package_name = '/DMO/FLIGHT_HIERARCHY' super_package_name = '/DMO/FLIGHT' short_description =
    'Hiearchy Guides' )
    ( package_name = '/DMO/FLIGHT_HIERARCHY_DRAFT' super_package_name = '/DMO/FLIGHT_HIERARCHY' short_description =
    'Hierarchy: Draft' )
    ( package_name = '/DMO/FLIGHT_HIERARCHY_DRAFT_D' super_package_name = '/DMO/FLIGHT_HIERARCHY_DRAFT' short_description =
    'Hierarchy: Draft: Data Generator' )
    ( package_name = '/DMO/FLIGHT_HIERARCHY_RO' super_package_name = '/DMO/FLIGHT_HIERARCHY' short_description =
    'Hierarchy: Read Only' )
    ( package_name = '/DMO/FLIGHT_HIERARCHY_RO_D' super_package_name = '/DMO/FLIGHT_HIERARCHY_RO' short_description =
    'Hierarchy: Read Only: Data Generator' )
    ( package_name = '/DMO/FLIGHT_LEGACY' super_package_name = '/DMO/FLIGHT' short_description =
    'Flight Reference Scenario: Legacy Objects' )
    ( package_name = '/DMO/FLIGHT_MANAGED' super_package_name = '/DMO/FLIGHT' short_description =
    'Flight Reference Scenario: TX managed E2E Guide' )
    ( package_name = '/DMO/FLIGHT_READONLY' super_package_name = '/DMO/FLIGHT' short_description =
    'Flight Reference Scenario: Read-Only E2E Guide' )
    ( package_name = '/DMO/FLIGHT_REUSE' super_package_name = '/DMO/FLIGHT' short_description = 'Flight Reference Scenario: Reused Entities'
    )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY' super_package_name = '/DMO/FLIGHT_REUSE' short_description =
    'Flight Reference Scenario: Agency' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_CNTRY' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY' short_description =
    'Agency Extension: Country (Behavior Extensibility)' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_DATGN' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY' short_description =
    'Agency Extension: Data Generator' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY' short_description =
    'Agency Extension: Review (Node Extensibility)' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV_A' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV' short_description
    = 'Agency Extension: Review - Average' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV_D' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV' short_description
    = 'Agency Extension: Derived Events' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV_E' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY_REV' short_description
    = 'Agency Extension: Events for Review' )
    ( package_name = '/DMO/FLIGHT_REUSE_AGENCY_SLOGN' super_package_name = '/DMO/FLIGHT_REUSE_AGENCY' short_description =
    'Agency Extension: Slogan (Field Extensibility)' )
    ( package_name = '/DMO/FLIGHT_REUSE_CARRIER' super_package_name = '/DMO/FLIGHT_REUSE' short_description =
    'Flight Reference Scenario: Carrier' )
    ( package_name = '/DMO/FLIGHT_REUSE_SUPPLEMENT' super_package_name = '/DMO/FLIGHT_REUSE' short_description =
    'Flight Reference Scenario: Supplement' )
    ( package_name = '/DMO/FLIGHT_UNMANAGED' super_package_name = '/DMO/FLIGHT' short_description =
    'Flight Reference Scenario: TX unmanaged E2E Guide' )
     ).
  ENDMETHOD.

  METHOD create_put_operation.
    DATA(environment) = xco_cp_generation=&amp;gt;environment-&amp;gt;dev_system( transport_request  )  .
    r_put_operation = environment-&amp;gt;for-devc-&amp;gt;create_put_operation( ).
  ENDMETHOD.
  METHOD create_transport.
    "create transport for /dmo/sap if needed or not (whether software component /DMO/SAP is of type 'K' or 'J')
    DATA(ls_package) = xco_cp_abap_repository=&amp;gt;object-&amp;gt;devc-&amp;gt;for( co_dmo_sap_package  ).
    IF ls_package-&amp;gt;read( )-property-record_object_changes = abap_true.
      DATA(lv_transport_layer) = ls_package-&amp;gt;read( )-property-transport_layer-&amp;gt;value.
      DATA(lv_transport_target) = ls_package-&amp;gt;read( )-property-transport_layer-&amp;gt;get_transport_target( )-&amp;gt;value.
      DATA(lo_transport_request) = xco_cp_cts=&amp;gt;transports-&amp;gt;workbench( lv_transport_target )-&amp;gt;create_request( '#Generated RAP110 tutorial transport request' ).
      lo_transport = lo_transport_request-&amp;gt;value.
    ENDIF.
  ENDMETHOD.


ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-pre-create-the-packages-for-the-abap-flight-reference-scenario/ba-p/14227008"/>
    <published>2025-09-24T17:26:43.147000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-track-data-changes-and-change-log-mechanism-in-rap/ba-p/14222838</id>
    <title>How to Track Data Changes and Change Log Mechanism in RAP.</title>
    <updated>2025-09-25T06:41:18.646000+02:00</updated>
    <author>
      <name>Gireesh_pg1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451066</uri>
    </author>
    <content>&lt;P&gt;Hi,&lt;/P&gt;&lt;P&gt;A change log table is a simple yet effective way to track data modifications without storing the complete historical snapshots of records. While the main table continues to hold only the active business data, the change log table captures essential metadata such as the record identifiers, type of change, user, and reason for the update. In a RAP scenario, determinations during the save sequence record these details before the final commit, ensuring a reliable audit trail. This approach not only supports compliance monitoring, reporting, and troubleshooting but also minimizes storage and performance overhead compared to maintaining full shadow tables.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Here we see some major key &lt;/SPAN&gt;&lt;SPAN class=""&gt;Advantages&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Simplified Design&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Only one additional table is needed, making the data model and maintenance simpler.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Faster Reporting on Changes&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ The log contains concise, relevant details, making it easier to query and generate audit reports.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Regulatory Compliance&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Still fulfills many compliance and audit requirements by showing who changed what and when.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Step&lt;/SPAN&gt;&lt;SPAN class=""&gt;s to &lt;/SPAN&gt;&lt;SPAN class=""&gt;achiev&lt;/SPAN&gt;&lt;SPAN class=""&gt;ing&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt; the&lt;/SPAN&gt; &lt;SPAN class=""&gt;Track Change Log Mechanism in RAP&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I have create 2 database tables&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;For basic details&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Capturing the changes record table&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'log chanes' 

@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 

@AbapCatalog.tableCategory : #TRANSPARENT 

@AbapCatalog.deliveryClass : #A 

@AbapCatalog.dataMaintenance : #RESTRICTED 

define table zgiri_t_emp_det { 
key id : abap.int8 not null; 

name : abap.char(30); 

department : abap.char(30); 

curr_key : abap.cuky; 

@Semantics.amount.currencyCode : ' zgiri_t_emp_det.curr_key' 

salary : abap.curr(15,2); 

created_by : syuname; 

created_at : timestampl; 

changed_by : syuname; 

changed_at :timestampl; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Table 2.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'log chanes' 

@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 

@AbapCatalog.tableCategory : #TRANSPARENT 

@AbapCatalog.deliveryClass : #A 

@AbapCatalog.dataMaintenance : #RESTRICTED 

define table zgiri_t_ch_log1 { 

key id : abap.int8 not null; 

name : abap.char(30); 

old_value : abap.string(0); 

new_value : abap.string(0); 

changed_by : syuname; 

changed_at : timestampl; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step2.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We have to create root view&amp;nbsp; on top of the database table.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE] 

@AccessControl.authorizationCheck: #NOT_REQUIRED 

@EndUserText.label: 'employee details' 

@Metadata.ignorePropagatedAnnotations: true 

@ObjectModel.usageType:{ 

serviceQuality: #X, 

sizeCategory: #S, 

dataClass: #MIXED 

} 

define view entity zgiri_i_empl1_details as select from ZGIRI_T_emp_det 

association [0..*] to zgiri_i_ch_log1 as _change on _change.id = $projection.id 

{ 

key id as Id, 

name as Name, 

department as Department, 

curr_key as CurrKey, 

@semantics.amount.currencyCode: 'CurrKey' 

salary as Salary, 

created_by as CreatedBy, 

created_at as CreatedAt, 

changed_by as ChangedBy, 

changed_at as ChangedAt, 

_change 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Then we &lt;/SPAN&gt;&lt;SPAN class=""&gt;have to&lt;/SPAN&gt;&lt;SPAN class=""&gt; create data &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition&lt;/SPAN&gt;&lt;SPAN class=""&gt; for &lt;/SPAN&gt;&lt;SPAN class=""&gt;change&lt;/SPAN&gt; &lt;SPAN class=""&gt;log&lt;/SPAN&gt;&lt;SPAN class=""&gt; also.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE] 

@AccessControl.authorizationCheck: #NOT_REQUIRED 

@EndUserText.label: 'employee details' 

@Metadata.ignorePropagatedAnnotations: true 

@ObjectModel.usageType:{ 

serviceQuality: #X, 

sizeCategory: #S, 

dataClass: #MIXED 

} 

define view entity zgiri_i_empl1_details as select from zgiri_i_ch_log1 

association [1..1] to zgiri_i_emp_det as _emp on _change.id = $projection.id 

{ 

key id as Id, 

field_name as Field_name, 

old_value as OldValue, 

new_value as NewValue, 

created_by as CreatedBy, 

_emp 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step 3.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;for the basic data &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition&lt;/SPAN&gt;&lt;SPAN class=""&gt; we have &lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt; on metadata extension for front end display.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer:#CORE 

annotate entity zgiri_i_empl_details 

with  

{ 

@UI.facet: [  

{  

id: 'object', 

label: 'Basic Data', 

type: #IDENTIFICATION_REFERENCE, 

purpose: #STANDARD, 

position: 10 }] 

 

@UI.lineItem: [{ label: 'Id' , position: 10 }] 

@UI.identification: [{ label: 'Id' , position: 10 }] 

Id; 

@UI.lineItem: [{ label: 'Name' , position: 20 }] 

@UI.identification: [{ label: 'Name' , position: 20 }] 

Name; 

@UI.lineItem: [{ label: 'Department' , position: 30 }] 

@UI.identification : [{ label: 'Department' , position: 30 }] 

Department; 

@UI.lineItem: [{ label: 'CurrKey' , position: 40 }] 

@UI.identification : [{ label: 'CurrKey' , position: 40 }] 

CurrKey; 

@UI.lineItem: [{ label: 'Salary' , position: 50 }] 

@UI.identification : [{ label: 'Salary' , position: 50 }] 

Salary; 

@UI.lineItem: [{ label: 'CreatedBy' , position: 60 }] 

CreatedBy; 

@UI.lineItem: [{ label: 'CreatedAt' , position: 70 }] 

CreatedAt; 

@UI.lineItem: [{ label: 'ChangedBy' , position: 80 }] 

ChangedBy; 

@UI.lineItem: [{ label: 'ChangedAt' , position: 90 }] 

ChangedAt; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 4.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;On top of the basic view we have to behavior definition.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_giri_i_empl_details unique; 

strict ( 2 ); 

define behavior for zgiri_i_empl_details //alias &amp;lt;alias_name&amp;gt; 

persistent table zgiri_t_emp_det 

lock master 

with additional save 

authorization master ( instance ) 

early numbering 

//etag master &amp;lt;field_name&amp;gt; 

{ 

create ( authorization : global ); 

update; 

delete; 

field ( readonly ) Id; 

mapping for zgiri_t_emp_det 

{ 

ChangedAt = changed_at; 

ChangedBy = changed_by; 

CreatedAt = created_at; 

CreatedBy = created_by; 

CurrKey = curr_key; 

Department = department; 

Id = id; 

Name = name; 

Salary = salary; 

} 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;On &lt;/SPAN&gt;&lt;SPAN class=""&gt;top&lt;/SPAN&gt;&lt;SPAN class=""&gt; the consumption view &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; have &lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt; behavior definition for consumption view.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection; 

strict ( 2 ); 

define behavior for zgiri_c_empl //alias &amp;lt;alias_name&amp;gt; 

{ 

use create; 

use update; 

use delete; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;I'm&lt;/SPAN&gt;&lt;SPAN class=""&gt; implementing logic in this class.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lsc_zgiri_i_empl_details DEFINITION INHERITING FROM cl_abap_behavior_saver. 

PROTECTED SECTION. 

METHODS save_modified REDEFINITION. 

ENDCLASS. 

CLASS lsc_zgiri_i_empl_details IMPLEMENTATION. 

METHOD save_modified. 

DATA lt_log TYPE STANDARD TABLE OF zgiri_t_ch_logs1. 

DATA lt_log1 TYPE STANDARD TABLE OF zgiri_t_ch_logs1. 


IF update-zgiri_i_empl_details iS NOT INITIAL. 

lt_log = CORRESPONDING #( update-zgiri_i_empl_details ). 

LOOP AT update-zgiri_i_empl_details ASSIGNING FIELD-SYMBOL(&amp;lt;ls_log_update&amp;gt;). 

ASSIGN lt_log[ id = &amp;lt;ls_log_update&amp;gt;-Id ] TO FIELD-SYMBOL(&amp;lt;ls_log_u&amp;gt;) .  

* / NAME UPDATE......................................... 

if &amp;lt;ls_log_update&amp;gt;-%control-Name = if_abap_behv=&amp;gt;mk-on. 

&amp;lt;ls_log_u&amp;gt;-name = &amp;lt;ls_log_update&amp;gt;-Name. 

 TRY. 

&amp;lt;ls_log_u&amp;gt;-id = cl_system_uuid=&amp;gt;create_uuid_x16_static( ). 

CATCH cx_uuid_error. 

"handle exception 

ENDTRY. 

APPEND &amp;lt;ls_log_u&amp;gt; TO lt_log1. 


ENDIF. 

ENDLOOP. 
INSERT zgiri_t_ch_logs1 FROM TABLE _log1. 

ENDIF. 
ENDMETHOD. 
ENDCLASS. 

CLASS lhc_zgiri_i_empl_details DEFINITION INHERITING FROM cl_abap_behavior_handler. 

PUBLIC SECTION. 

PRIVATE SECTION. 
METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION 

IMPORTING keys REQUEST requested_authorizations FOR zgiri_i_empl_details RESULT result. 

METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION 

IMPORTING REQUEST requested_authorizations FOR zgiri_i_empl_details RESULT result. 

METHODS earlynumbering_create FOR NUMBERING 

IMPORTING entities FOR CREATE zgiri_i_empl_details. 

ENDCLASS. 

CLASS lhc_zgiri_i_empl_details IMPLEMENTATION. 

METHOD get_instance_authorizations. 

ENDMETHOD. 

METHOD get_global_authorizations. 

ENDMETHOD. 

METHOD earlynumbering_create. 

DATA(lt_entities) = entities. 

DELETE lt_entities WHERE Id IS NOT INITIAL. 

TRY. 

cl_numberrange_runtime=&amp;gt;number_get( 

EXPORTING 

nr_range_nr = '01' 

object = '/DMO/TRV_M' 

quantity = CONV #( lines( lt_entities ) ) 

IMPORTING 

number = DATA(lv_latest_num) 

returncode = DATA(lv_code) 

returned_quantity = DATA(lv_qty) 

). 

CATCH cx_nr_object_not_found. 

CATCH cx_number_ranges INTO DATA(lo_error). 

LOOP AT lt_entities INTO DATA(ls_entities). 

APPEND VALUE #( %cid = ls_entities-%cid 

%key = ls_entities-%key ) 

TO failed-zgiri_i_empl_details. 

APPEND VALUE #( %cid = ls_entities-%cid 

%key = ls_entities-%key 

%msg = lo_error ) 

TO reported-zgiri_i_empl_details. 

ENDLOOP. 

EXIT. 

ENDTRY. 

ASSERT lv_qty = lines( lt_entities ). 

* DATA: lt_travel_tech_m TYPE TABLE FOR MAPPED EARLY yi_travel_tech_m, 

* ls_travel_tech_m LIKE LINE OF lt_travel_tech_m. 

DATA(lv_curr_num) = lv_latest_num - lv_qty. 

LOOP AT lt_entities INTO ls_entities. 

lv_curr_num = lv_curr_num + 1. 

 APPEND VALUE #( %cid = ls_entities-%cid 

ID = lv_curr_num ) 

TO mapped-zgiri_i_empl_details. 

ENDLOOP. 

ENDMETHOD. 

ENDCLASS. 
 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;On &lt;/SPAN&gt;&lt;SPAN class=""&gt;top&lt;/SPAN&gt;&lt;SPAN class=""&gt; the behavior definition we &lt;/SPAN&gt;&lt;SPAN class=""&gt;have to&lt;/SPAN&gt;&lt;SPAN class=""&gt; create service definition.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'service definition' 

define service Zgiri_rap_scn_ser { 

expose zgiri_i_empl_details; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;On &lt;/SPAN&gt;&lt;SPAN class=""&gt;top&lt;/SPAN&gt;&lt;SPAN class=""&gt; the service definition we &lt;/SPAN&gt;&lt;SPAN class=""&gt;have to&lt;/SPAN&gt; &lt;SPAN class=""&gt;create&amp;nbsp; service&lt;/SPAN&gt;&lt;SPAN class=""&gt; binding.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_0-1758351322351.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317140i5F32DECD8FC7E04B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_0-1758351322351.png" alt="Gireesh_pg1_0-1758351322351.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;after that we can preview our application.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_1-1758351367587.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317141i4B3553A7EEA41EAF/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_1-1758351367587.png" alt="Gireesh_pg1_1-1758351367587.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Im&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;taking name as example im going to update &lt;/SPAN&gt;&lt;SPAN class=""&gt;the name sham signiwis this&lt;/SPAN&gt;&lt;SPAN class=""&gt; value.&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_2-1758351455028.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317142i596B16B27E70597F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_2-1758351455028.png" alt="Gireesh_pg1_2-1758351455028.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;see we can update shyam prasad.&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;A&lt;/SPAN&gt;&lt;SPAN class=""&gt;n&lt;/SPAN&gt;&lt;SPAN class=""&gt;d&lt;/SPAN&gt;&lt;SPAN class=""&gt; we see in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;chang&lt;/SPAN&gt;&lt;SPAN class=""&gt; log table.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_3-1758351498242.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317143i5F6092F28B51C037/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_3-1758351498242.png" alt="Gireesh_pg1_3-1758351498242.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;thank you&amp;nbsp;&lt;BR /&gt;if u have any query reach out me&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-track-data-changes-and-change-log-mechanism-in-rap/ba-p/14222838"/>
    <published>2025-09-25T06:41:18.646000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/event-enabling-sap-data-replication-framework-with-advanced-event-mesh-amp/ba-p/14224298</id>
    <title>Event enabling SAP Data Replication Framework with Advanced Event Mesh &amp; RAP Business Events</title>
    <updated>2025-09-25T14:29:47.588000+02:00</updated>
    <author>
      <name>TimoMaier</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1485539</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1631870145"&gt;Introduction&lt;/H1&gt;&lt;P&gt;With todays enterprise landscapes becoming more and more distributed data movement and distribution is getting more and more relevant. In this blog I will go through the steps necessary to connect the SAP Data Replication Framework (DRF) with the SAP Integration Suite - Advanced Event Mesh (AEM) using RAP Business Events.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1564439359"&gt;Disclaimer&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;The clean core approach for a connection between DRF and AEM, and I would recommend to apply this pattern, would be the Usage of a Standard DRF Replications provided by SAP which target an Iflow on Integration Suite (SOAP, XI or IDoc Sender Adapter) and pass the Event to AEM using the AEM Adapter. This would be a configuration only scenario and also can be monitored with SAP Application Interface Framework.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The pattern explained in this blog is bypassing the BTP Cloud Integration and connecting to AEM directly. In addition especially for complex data structures a lot of development effort is required which makes it impractical for many use cases.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1367925854"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;This blog assumes that an AEM instance has already been setup and is connected to your S/4HANA system. Check out&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-1-connecting-aem-to-s-4hana-on/ba-p/13913581" target="_self"&gt;this&lt;/A&gt;&amp;nbsp;blog for a detailed setup guide.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1171412349"&gt;Setup&lt;/H2&gt;&lt;P&gt;The setup of this pattern consists of two parts. The first one is the modelling of the event itself and the second one the required setup to trigger the event from the DRF. We'll be creating the event and everything required for it, as well as creating a custom DRF outbound implementation.&lt;/P&gt;&lt;H3 id="toc-hId-1103981563"&gt;Creating the Event&lt;/H3&gt;&lt;P&gt;Before we can send data as events to the AEM we need to develop the event itself. You can checkout&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-2-creating-custom-business/ba-p/13914171" target="_self"&gt;this&lt;/A&gt;&amp;nbsp;link for a details blog on how to create such events. To start lets create our BO to hold the event, starting with the initial data definition. For this blog I'll be replicating business partner data as such I'll be using the I_BusinessPartner view as root for my BO.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Business Partner BO for DRF 2 RAP Events'
@Metadata.ignorePropagatedAnnotations: true
define root view entity Z_DRF_2_RAP_BP as select from I_BusinessPartner
{
    
    key BusinessPartner
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Next lets build the behaviour definition on top of it:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed with unmanaged save implementation in class zbp_drf_2_rap_bp unique;
strict ( 2 );

define behavior for Z_DRF_2_RAP_BP
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
{
  create;
  update;
  delete;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next we need to define the event payload itself. According to the exact requirements the payload needs to be modeled accordingly in the abstract entity. Check out&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-3-creating-events-with-deep/ba-p/13914285" target="_self"&gt;this&lt;/A&gt;&amp;nbsp;blog to see how to create more complex payloads with deep structures.&amp;nbsp;In this example I'll be creating just a very simple payload with the first and last name. The business partner number will automatically be included in the event as the key field of the BO.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Payload for BP DRF'
define abstract entity Z_DRF_2_RAP_BP_PAYLOAD
{
    FirstName : abap.char(40);
    LastName : abap.char(40);
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next lets define the event itself on the behaviour definition. Reference the abstract entity and don't forget the&amp;nbsp;&lt;EM&gt;deep&lt;/EM&gt; keyword if you are using a nested payload structure.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed with unmanaged save implementation in class zbp_drf_2_rap_bp unique;
strict ( 2 );

define behavior for Z_DRF_2_RAP_BP
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
{
  create;
  update;
  delete;

  event DRF_REPLICATION parameter Z_DRF_2_RAP_BP_PAYLOAD;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Next we can define the implementation class for our BO. As events can only be triggered within the implementation class of a BO we need to create and expose a wrapper method that we later can call from the DRF. For this lets define a class-method within our global class. This method should import the business partner number so that we can raise the specific event.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zbp_drf_2_rap_bp DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF z_drf_2_rap_bp.

    PUBLIC SECTION.
        CLASS-METHODS raise_drf_event
            IMPORTING iv_bp TYPE BU_PARTNER.

ENDCLASS.

CLASS zbp_drf_2_rap_bp IMPLEMENTATION.

    METHOD raise_drf_event.
        lcl_event_handler=&amp;gt;on_Raise_DRF_Event( iv_bp ).
    ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;We can then raise the event within the local types. I've added a select to collect all of the required data for the business partner and pass it to the event.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lcl_event_handler DEFINITION FRIENDS zbp_drf_2_rap_bp.
  PUBLIC SECTION.
    CLASS-METHODS on_Raise_DRF_Event IMPORTING iv_bp TYPE BU_PARTNER.
ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.
   METHOD on_Raise_DRF_Event.

    DATA: tt_events TYPE TABLE FOR EVENT z_drf_2_rap_bp~drf_replication.

    SELECT SINGLE
        BusinessPartner, FirstName, LastName
        FROM I_BusinessPartner
        WHERE BusinessPartner = @( |{ iv_bp ALPHA = IN }| )
        INTO (s_bupa).

    tt_events = VALUE #(
        (
            businesspartner = s_bupa-BusinessPartner
            firstName = s_bupa-FirstName
            lastName = s_bupa-LastName
        )
    ).

    RAISE ENTITY EVENT z_drf_2_rap_bp~drf_replication FROM tt_events.

   ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next lets create the event binding to assign the event a topic:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_10-1758553619268.png" style="width: 926px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318078iF966E5467722ABAE/image-dimensions/926x274?v=v2" width="926" height="274" role="button" title="TimoMaier_10-1758553619268.png" alt="TimoMaier_10-1758553619268.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;After everything is activated you can call this method from any context to trigger the event.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-907468058"&gt;DRF Customising&lt;/H3&gt;&lt;P&gt;The customising of the DRF is nearly identical to the one described in&amp;nbsp;&lt;A href="https://community.sap.com/t5/integration-blog-posts/event-enabling-sap-data-replication-framework-with-advanced-event-mesh-amp/ba-p/14156554?emcs_t=S2h8ZW1haWx8dG9waWNfc3Vic2NyaXB0aW9ufE1FTDhBOEo5SjNQMFlRfDE0MTU2NTU0fFNVQlNDUklQVElPTlN8aEs" target="_self"&gt;Alex blog&lt;/A&gt;&amp;nbsp;about connecting DRF with AIFAEM.&lt;/P&gt;&lt;P&gt;The standard object we are trying to use is 986 - Business Partner. You'll find it in DRFIMG -&amp;gt; Enhance Default Settings for Outbound Implementations -&amp;gt; Define Business Objects. The corresponding Outbound Implementation (using the standard SOAP Proxy) is 986_3. For our use case we need a custom Outbound Implementation based on this object. As such we need to copy the object to a new custom one. I named mine Z_986_3_RP&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_0-1758550286111.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318008i14B6573C670CDA4E/image-dimensions/932x608?v=v2" width="932" height="608" role="button" title="TimoMaier_0-1758550286111.png" alt="TimoMaier_0-1758550286111.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To be able to connect our RAP business event with DRF we need to adjust the outbound implementation class. Therefore we need to copy the standard implementation class of 986_3 (CL_MDG_BS_BP_REL_SERVICE_DRF) to a new custom class and reference it in our Outbound Implementation class Z_986_3_RP. I named mine Z_CL_DRF_2_RAP_BP_REPL&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_1-1758551293670.png" style="width: 930px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318054i8C1C111268684BD2/image-dimensions/930x567?v=v2" width="930" height="567" role="button" title="TimoMaier_1-1758551293670.png" alt="TimoMaier_1-1758551293670.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The class is referencing itself at multiple points. This needs to be adjusted to the new Z-Class. In addition some further mappings have to be performed which Alex described in his blog. The complete coding for the implementation of this blog can be found in the attached txt file.&lt;/P&gt;&lt;P&gt;The most important adjustment is however the call to our previously defined wrapper method&amp;nbsp;&lt;EM&gt;raise_drf_event&lt;/EM&gt; in our implementation class&amp;nbsp;&lt;EM&gt;zbp_drf_2_rap_bp.&amp;nbsp;&lt;/EM&gt;For this I added a loop over the different entries which calls this method and passes the business partner number.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;LOOP AT ls_rap_raw-business_partner_suitereplicat INTO DATA(ls_entry).

                DATA(ev_bp) = ls_entry-business_partner-internal_id.

                TRY.
                    CALL METHOD zbp_drf_2_rap_bp=&amp;gt;raise_drf_event
                     EXPORTING
                      iv_bp = ev_bp.

                CATCH cx_root INTO DATA(lx_root).
                 MESSAGE lx_root-&amp;gt;get_text( ) TYPE 'E'.
                ENDTRY.
            ENDLOOP.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Depending on the required payload of the event this can be further improved by removing the select from the method implementation and passing the data directly from the original structure.&lt;/P&gt;&lt;P&gt;This new Outbound Implementation needs to be assigned to a replication model.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_2-1758552918366.png" style="width: 930px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318062i7F92A911ECA43718/image-dimensions/930x414?v=v2" width="930" height="414" role="button" title="TimoMaier_2-1758552918366.png" alt="TimoMaier_2-1758552918366.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This also needs to be activated within "Define Replication Model" level.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-581871834"&gt;Test&lt;/H2&gt;&lt;P&gt;To test this setup lets replicate the following business partner:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_3-1758553019909.png" style="width: 930px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318063i546B6F6DF57ECC7F/image-dimensions/930x574?v=v2" width="930" height="574" role="button" title="TimoMaier_3-1758553019909.png" alt="TimoMaier_3-1758553019909.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Create the event binding by opening transaction /IWXBE/OUTBOUND_CFG, selecting your broker and creating a new topic binding for your respective topic&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_9-1758553570827.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318077i6EC9F5E03D39063B/image-dimensions/932x396?v=v2" width="932" height="396" role="button" title="TimoMaier_9-1758553570827.png" alt="TimoMaier_9-1758553570827.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Open transaction DRFOUT and select your replication model&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_4-1758553104916.png" style="width: 931px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318066iBAE77F79DB2F28F5/image-dimensions/931x640?v=v2" width="931" height="640" role="button" title="TimoMaier_4-1758553104916.png" alt="TimoMaier_4-1758553104916.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Also set the manual filter criteria:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_6-1758553204568.png" style="width: 929px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318069i8365B7137C9B28FA/image-dimensions/929x481?v=v2" width="929" height="481" role="button" title="TimoMaier_6-1758553204568.png" alt="TimoMaier_6-1758553204568.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Press execute. The logs should then display a success.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_7-1758553353942.png" style="width: 928px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318072i124EEAA35EBC6D58/image-dimensions/928x362?v=v2" width="928" height="362" role="button" title="TimoMaier_7-1758553353942.png" alt="TimoMaier_7-1758553353942.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The event itself can then be viewed in the Event Monitor (transaction /IWXBE/EVENT_MONITOR)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TimoMaier_8-1758553494458.png" style="width: 931px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318074i03774A1928EA6C6A/image-dimensions/931x570?v=v2" width="931" height="570" role="button" title="TimoMaier_8-1758553494458.png" alt="TimoMaier_8-1758553494458.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/event-enabling-sap-data-replication-framework-with-advanced-event-mesh-amp/ba-p/14224298"/>
    <published>2025-09-25T14:29:47.588000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/aunits-steps-for-rap/ba-p/14222430</id>
    <title>AUnits steps for RAP</title>
    <updated>2025-09-26T08:51:38.675000+02:00</updated>
    <author>
      <name>Nihal__Raj</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2252976</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;BR /&gt;&lt;EM&gt;AUnits are unit tests written by ABAP developers to test each functionality of their code. In RAP, AUnits are used to test functionalities such as validations, determinations, actions, and CRUD operations etc. Your AUnits should aim for maximum coverage of your code. It is recommended to follow TDD(Test Driven Development), where you write the test cases first and then implement the logic. This ensures that the test cases are based on the actual requirements and are not influenced by the implementation.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Reference link for TDD:&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-development-tools-user-guide/test-driven-development-with-abap-unit" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/abap-cloud/abap-development-tools-user-guide/test-driven-development-with-abap-unit&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Basics of AUnits:&lt;BR /&gt;&lt;/STRONG&gt;Test classes can be either local or global. Unit tests should typically be implemented as local classes within the program object that is being tested. However, you can use global test classes to host reusable logic for unit tests across different programs. In Eclipse ADT, there is a separate environment for managing local test classes.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_0-1758281914495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316896i3E810BF7DF064C47/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_0-1758281914495.png" alt="Nihal__Raj_0-1758281914495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Reference link&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://learning.sap.com/learning-journeys/acquire-core-abap-skills/implementing-code-tests-with-abap-unit_b23c7a00-c2e8-406d-8969-b00db3f1fd87" target="_blank" rel="noopener noreferrer"&gt;https://learning.sap.com/learning-journeys/acquire-core-abap-skills/implementing-code-tests-with-abap-unit_b23c7a00-c2e8-406d-8969-b00db3f1fd87&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Structure of test class:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_0-1758698995368.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319335iC3A06A8F6D15D7D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_0-1758698995368.png" alt="Nihal__Raj_0-1758698995368.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*"* use this source file for your ABAP unit test classes
class ltc_zi_lfa1_2 DEFINITION FINAL for
  TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
  CLASS-DATA environment TYPE REF TO if_cds_test_environment.
  DATA td_zlfa TYPE STANDARD TABLE OF zlfa1 with empty key.
  DATA  act_results type STANDARD TABLE OF zi_lfa1_2 WITH EMPTY KEY.
  CLASS-METHODS class_setup RAISING cx_static_check.
  CLASS-METHODS class_teardown.
  METHODS setup RAISING cx_static_check.
  METHODS prepare_testdata.
  METHODS aunit_for_cds_method FOR TESTING RAISING cx_static_check.
  ENDCLASS.
  &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;For Testing:&lt;/STRONG&gt; The addition FOR TESTING is used to identify a test class. These are the classes that will be executed when you run ABAPUnit tests. I will explain further how AUnits are triggered and how to execute them.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Risk Level:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;CRITICAL: The test changes system settings or customizing data.&lt;/LI&gt;&lt;LI&gt;DANGEROUS: The test changes persistent data.&lt;/LI&gt;&lt;LI&gt;HARMLESS: The test does not change system settings or persistent data.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Duration:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SHORT: Execution time is imperceptible, expected to take only a few seconds.&lt;/LI&gt;&lt;LI&gt;MEDIUM: Execution time is noticeable, around a minute.&lt;/LI&gt;&lt;LI&gt;LONG: Execution time is very noticeable, taking more than a minute.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Methods in Test Classes:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Helper Methods: Helper methods are ordinary methods of the test class. They are not called by the ABAP Unit framework. You can use helper methods to structure the code of your test methods. For example, prepare_testdata is a helper method.&lt;/LI&gt;&lt;LI&gt;Test Methods: Test methods are defined with the addition FORTESTING after the method name. Each test method represents one test. The ABAP Unit framework performs this test by calling the corresponding test method. Test methods must not have any parameters. In the above example, aunit_for_cds_method is your test method.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Good Practices:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Itâ€™s a good practice to have a separate method for each functionality, with no dependencies inside the method. Each method should be treated as a single test case.&lt;/LI&gt;&lt;LI&gt;Always include both positive and negative test cases.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Flow of test case:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_2-1758283483555.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316925i4D14BA272DF5A1E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_2-1758283483555.png" alt="Nihal__Raj_2-1758283483555.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CLASS_SETUP&lt;/STRONG&gt;&lt;BR /&gt;This static method is executed once before the first test of the test class. Use this method for fixtures that are time-consuming to create and for which you are sure the settings will not be changed by any of the test methods. Example: Setting up a test double in the test environment.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SETUP&lt;/STRONG&gt;&lt;BR /&gt;This instance method is called before each test of the test class. Use this method for fixtures that you want to create fresh for every test case. Example: Creating an instance of the CUT (Class Under Test).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;TEARDOWN&lt;/STRONG&gt;&lt;BR /&gt;This instance method is called after each test of the test class. Use it to undo changes made in the SETUP method. It is especially important if SETUP modifies persistent data (such as system configuration, customizing, or master data). Example: Clearing test doubles so that each test starts with fresh data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CLASS_TEARDOWN&lt;/STRONG&gt;&lt;BR /&gt;This static method is executed once after the last test of the test class. Use it to clean up or destroy the test environment set up in CLASS_SETUP, once all tests are completed. Example: Tearing down the overall test environment.&lt;/P&gt;&lt;P&gt;To run ABAP units execute ABAP Unit Test. This will trigger the test class. If you run ABAP application it will not trigger test class.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Test double framework:&lt;/STRONG&gt;&lt;BR /&gt;As I mentioned earlier, your unit tests should check only the functionality(CUT â€“ Code Under Test) that you have written the test case for. However, in real-world scenarios, each component is usually interlinked and not standalone.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What is the issue?&lt;/STRONG&gt;&lt;BR /&gt;To explain this, letâ€™s take an example. Suppose you are testing an instance authorization method. This method is dependent on an authorization object. If the AUTH-CHECK of the authorization object fails, the instance authorization method will also fail. This means that even if your instance authorization method is working correctly, the test could still fail due to its dependency. Ideally, the failure of a dependency should not cause your unit test to fail when you are testing the functionality of the CUT itself.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Examples of dependencies in RAP&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Instance and global authorizations: Dependency on authorization checks.&lt;/LI&gt;&lt;LI&gt;SAVE / SAVE_MODIFIED methods: Dependency on function modules or BAPIs.&lt;/LI&gt;&lt;LI&gt;Determinations: You might use EML of another BO, making your BO dependent.&lt;/LI&gt;&lt;LI&gt;Validations: Your CDS view could be a dependency; if the required record is not present in the CDS view, the validation might fail. And there are many more such cases.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Solution â€” Test Double Framework&lt;/STRONG&gt;&lt;BR /&gt;So, how do we overcome this? Instead of relying on dependencies that are beyond our control, we mock or stub these dependencies. This allows us to influence how they behave and interact during testing, thereby avoiding test case failures due to external dependencies. This approach is implemented using the Test Double Framework.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_4-1758284209300.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316928i44CD04D3C5CB1DC4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_4-1758284209300.png" alt="Nihal__Raj_4-1758284209300.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The main purpose of both mock and stub is to not to test from actual data but rather a fake data that we can configure. Because our test class will fail if its dependent on real time data as it will be different in different&lt;BR /&gt;environment.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;STUB:&lt;/STRONG&gt; Stubs just provide predefined response.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;MOCK:&lt;/STRONG&gt; You design how the interaction should be. Like if you provide this value this is how the output would be and also verify it.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;I will now discuss in detail how we write ABAP Unit tests with a simple example. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Requirement:&lt;/STRONG&gt;&lt;BR /&gt;Write a positive test case to check the validation check_country, which should throw an exception if we pass a country code with more than2characters. Also, remove the dependency on the CDS view.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Steps:&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;EM&gt;Identify CUT and dependencies&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;Here, I have taken a validation method as an example for testing. The CUT(Code Under Test) is the validation method, and the dependency is the CDS view. So, I will use the STUB methodology to configure the response of the CDS view.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Creation of test class&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;Once you create the test class, you need to add it as a friend in the local handler class (since we are testing a validation). This is necessary because all the methods of the local handler class are inside the private section and cannot be accessed directly.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_0-1758702188232.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319382i0998B69F77895CF8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_0-1758702188232.png" alt="Nihal__Raj_0-1758702188232.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Inside the test class&lt;BR /&gt;I have already explained the use of SETUP, CLASS_SETUP, TEARDOWN, andCLASS_TEARDOWN earlier, so I will not repeat that here.&lt;BR /&gt;In this example, validate_check_country is our test method. I have added a test double for the CDS view, because the validation should be tested using the mock data we provide, not the actual data.&lt;BR /&gt;I create the mock data and insert it, so that the CDS view returns this data. Now, when we pass parameters to the validation, we can check if we get a value in reported, since we have provided a country code with 3 characters.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; This is just an example program. Typically, mocking, adding mock data, and different functionalities would be implemented in separate methods. It is not a good practice to combine everything into a single method. Each method should have only one responsibility. Here, I have combined them solely to showcase the concept.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nihal__Raj_0-1758701394247.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319377iA0CD976E87F9620D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nihal__Raj_0-1758701394247.png" alt="Nihal__Raj_0-1758701394247.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;class ltc_lfa1_validation IMPLEMENTATION.
    METHOD class_setup.
      cds_environment = cl_cds_test_environment=&amp;gt;create( i_for_entity = 'zi_lfa1_2' ).
     ENDMETHOD.
     METHOD setup.
       CREATE object cut for testing.
       cds_encironment-&amp;gt;clear_doubles( ).
       ENDMETHOD.
     method validate_check_country.
       data: lfa1_mock_data type STANDARD TABLE OF zlfa1.
       data(system_uuid) = cl_uuid_factory=&amp;gt;create_system_uuid( ).
       DATA(uuid_x16) = system_uuid-&amp;gt;create_uuid_x16( ).
       select * FROM zi_lfa1_2 into TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(lt_result).
         lfa1_ock_data = VALUE#( ( 
                                  Lifnr = uuid_x16 Name1 = 'Raj' Land1 = 'Ind' ) )
       cds_environment-&amp;gt;insert_test_data( i_data = lfa1_mock_data ).
         select * from zi_lfa1_2 into TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(lt_result).
           i_keys = value #( ( Lifnr = uuid_x16 ) ).
           cut-&amp;gt; check_country( exporting key = i_keys
                                changing failed = c_failed reported = c_reported ).
           cl_abap_unit_assert=&amp;gt;assert_not_initial( act = c_reported msg = 'failed' ).
       ENDMETHOD.
       method teardown.
         cds_environment-&amp;gt;destroy( ).
         ENDMETHOD.
         METHOD class_teardown.
           cds_environment-&amp;gt;clear_doubles( ).
           ENDMETHOD.
    ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion: &lt;/STRONG&gt;Writing ABAP unit test in RAP ensures that the underling business logic is robust and reliable.&amp;nbsp; Structured unit test not only improve code quality and reliability but also facilitate easier maintenance and refactoring.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/aunits-steps-for-rap/ba-p/14222430"/>
    <published>2025-09-26T08:51:38.675000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-track-data-changes-in-rap-with-a-change-logs-in-rap/ba-p/14218316</id>
    <title>How to Track Data Changes in RAP with a  Change Logs in RAP.</title>
    <updated>2025-09-29T09:04:02.971000+02:00</updated>
    <author>
      <name>Gireesh_pg1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451066</uri>
    </author>
    <content>&lt;P&gt;Hi,&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A change log table alone can be used to track data modifications without storing full historical snapshots. The main table contains the active business data, while the change log table records only the metadata of each change, such as the key fields of the affected record, change type (insert, update, delete), user, and optionally the reason for change.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;During the RAP save sequence, determinations in the behavior implementation capture these details before the transaction is committed and insert them into the change log table. This approach provides a lightweight audit trail that allows you to track when and by whom changes were made, making it suitable for compliance monitoring, reporting, and troubleshooting, while avoiding the storage overhead of a shadow table that keeps the full data history.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Here we see some major key Advantages.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Lower Storage Requirements&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Since it stores only metadata (keys, change type, timestamp, user, etc.) instead of full data snapshots, it uses significantly less database space than a shadow table.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Better Performance&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Writing smaller log entries reduces the impact on transaction performance compared to saving entire records.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Simplified Design&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Only one additional table is needed, making the data model and maintenance simpler.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Faster Reporting on Changes&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ The log contains concise, relevant details, making it easier to query and generate audit reports.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Regulatory Compliance&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; â€“ Still fulfills many compliance and audit requirements by showing who changed what and when.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Steps to achieving&amp;nbsp; the Track Change Log in RAP.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;I have create 2 database tables&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;For basic details&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Capturing the changes record table&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_0-1758006070495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314993i959CCED0CE87A7D7/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_0-1758006070495.png" alt="Gireesh_pg1_0-1758006070495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;table 2.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_1-1758006096260.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314995i0CADDEB27C7D95DF/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_1-1758006096260.png" alt="Gireesh_pg1_1-1758006096260.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step2.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;We have to create root view&amp;nbsp; on top of the database table.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_2-1758006134903.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314997i0F3E918DF975DB00/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_2-1758006134903.png" alt="Gireesh_pg1_2-1758006134903.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_3-1758006160440.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/314999i24BC326893231843/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_3-1758006160440.png" alt="Gireesh_pg1_3-1758006160440.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Step 3.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;for the basic data definition we have create on metadata extension for front end display.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer:#CORE 

annotate entity zgiri_i_empl_details 

with  

{ 

@UI.facet: [  

{  

id: 'object', 

label: 'Basic Data', 

type: #IDENTIFICATION_REFERENCE, 

purpose: #STANDARD, 

position: 10 }] 

 

@UI.lineItem: [{ label: 'Id' , position: 10 }] 

@UI.identification: [{ label: 'Id' , position: 10 }] 

Id; 

@UI.lineItem: [{ label: 'Name' , position: 20 }] 

@UI.identification: [{ label: 'Name' , position: 20 }] 

Name; 

@UI.lineItem: [{ label: 'Department' , position: 30 }] 

@UI.identification : [{ label: 'Department' , position: 30 }] 

 

Department; 

@UI.lineItem: [{ label: 'CurrKey' , position: 40 }] 

@UI.identification : [{ label: 'CurrKey' , position: 40 }] 

CurrKey; 

@UI.lineItem: [{ label: 'Salary' , position: 50 }] 

@UI.identification : [{ label: 'Salary' , position: 50 }] 

Salary; 

@UI.lineItem: [{ label: 'CreatedBy' , position: 60 }] 

CreatedBy; 

 

@UI.lineItem: [{ label: 'CreatedAt' , position: 70 }] 

CreatedAt; 

@UI.lineItem: [{ label: 'ChangedBy' , position: 80 }] 

ChangedBy; 

@UI.lineItem: [{ label: 'ChangedAt' , position: 90 }] 

ChangedAt; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On top of the basic view we have to behavior definition.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_giri_i_empl_details unique; 

strict ( 2 ); 

 

define behavior for zgiri_i_empl_details //alias &amp;lt;alias_name&amp;gt; 

persistent table zgiri_t_emp_det 

lock master 

with additional save 

authorization master ( instance ) 

early numbering 

//etag master &amp;lt;field_name&amp;gt; 

{ 

create ( authorization : global ); 

update; 

delete; 

field ( readonly ) Id; 

mapping for zgiri_t_emp_det 

{ 

ChangedAt = changed_at; 

ChangedBy = changed_by; 

CreatedAt = created_at; 

CreatedBy = created_by; 

CurrKey = curr_key; 

Department = department; 

Id = id; 

Name = name; 

Salary = salary; 

} 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;On &lt;/SPAN&gt;&lt;SPAN class=""&gt;top&lt;/SPAN&gt;&lt;SPAN class=""&gt; the consumption view &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; have &lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt; behavior definition for consumption view.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection; 

strict ( 2 ); 

define behavior for zgiri_c_empl //alias &amp;lt;alias_name&amp;gt; 

{ 

use create; 

use update; 

use delete; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 5.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On top the behavior definition we have to create service definition.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'service definition' 

define service Zgiri_rap_scn_ser { 

expose zgiri_i_empl_details; 

} 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 6.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On top the service definition we have to create&amp;nbsp; service binding.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_4-1758006313143.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315003i5306EAAC914B7866/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_4-1758006313143.png" alt="Gireesh_pg1_4-1758006313143.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I'm implementing logic in this class.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lsc_zgiri_i_empl_details DEFINITION INHERITING FROM cl_abap_behavior_saver. 

PROTECTED SECTION. 

METHODS save_modified REDEFINITION. 

ENDCLASS.  

CLASS lsc_zgiri_i_empl_details IMPLEMENTATION. 

METHOD save_modified. 

DATA lt_log TYPE STANDARD TABLE OF zgiri_t_ch_logs1. 

DATA lt_log1 TYPE STANDARD TABLE OF zgiri_t_ch_logs1. 

IF update-zgiri_i_empl_details iS NOT INITIAL. 

lt_log = CORRESPONDING #( update-zgiri_i_empl_details ). 

LOOP AT update-zgiri_i_empl_details ASSIGNING FIELD-SYMBOL(&amp;lt;ls_log_update&amp;gt;). 

ASSIGN lt_log[ id = &amp;lt;ls_log_update&amp;gt;-Id ] TO FIELD-SYMBOL(&amp;lt;ls_log_u&amp;gt;) . 

* / NAME UPDATE......................................... 

if &amp;lt;ls_log_update&amp;gt;-%control-Name = if_abap_behv=&amp;gt;mk-on. 

&amp;lt;ls_log_u&amp;gt;-name = &amp;lt;ls_log_update&amp;gt;-Name. 

TRY. 

&amp;lt;ls_log_u&amp;gt;-id = cl_system_uuid=&amp;gt;create_uuid_x16_static( ). 

CATCH cx_uuid_error. 

"handle exception 

ENDTRY. 

APPEND &amp;lt;ls_log_u&amp;gt; TO lt_log1. 
ENDIF. 
ENDLOOP. 
INSERT zgiri_t_ch_logs1 FROM TABLE _log1. 

ENDIF. 
ENDMETHOD. 

ENDCLASS. 

CLASS lhc_zgiri_i_empl_details DEFINITION INHERITING FROM cl_abap_behavior_handler. 

PUBLIC SECTION. 
PRIVATE SECTION. 
METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION 

IMPORTING keys REQUEST requested_authorizations FOR zgiri_i_empl_details RESULT result. 

METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION 

IMPORTING REQUEST requested_authorizations FOR zgiri_i_empl_details RESULT result. 

METHODS earlynumbering_create FOR NUMBERING 

IMPORTING entities FOR CREATE zgiri_i_empl_details. 
ENDCLASS. 

CLASS lhc_zgiri_i_empl_details IMPLEMENTATION. 
METHOD get_instance_authorizations. 

ENDMETHOD. 
METHOD get_global_authorizations. 

ENDMETHOD. 
METHOD earlynumbering_create. 
DATA(lt_entities) = entities. 
DELETE lt_entities WHERE Id IS NOT INITIAL. 

TRY. 

cl_numberrange_runtime=&amp;gt;number_get( 

EXPORTING 

nr_range_nr = '01' 

object = '/DMO/TRV_M' 

quantity = CONV #( lines( lt_entities ) ) 

IMPORTING 

number = DATA(lv_latest_num) 

returncode = DATA(lv_code) 

returned_quantity = DATA(lv_qty) 

). 

CATCH cx_nr_object_not_found. 

CATCH cx_number_ranges INTO DATA(lo_error). 
LOOP AT lt_entities INTO DATA(ls_entities). 

APPEND VALUE #( %cid = ls_entities-%cid 

%key = ls_entities-%key ) 

TO failed-zgiri_i_empl_details. 

APPEND VALUE #( %cid = ls_entities-%cid 

%key = ls_entities-%key 

%msg = lo_error ) 

TO reported-zgiri_i_empl_details. 

ENDLOOP. 

EXIT. 

ENDTRY. 

ASSERT lv_qty = lines( lt_entities ). 

* DATA: lt_travel_tech_m TYPE TABLE FOR MAPPED EARLY yi_travel_tech_m, 

* ls_travel_tech_m LIKE LINE OF lt_travel_tech_m. 

DATA(lv_curr_num) = lv_latest_num - lv_qty. 

LOOP AT lt_entities INTO ls_entities. 

lv_curr_num = lv_curr_num + 1. 
APPEND VALUE #( %cid = ls_entities-%cid 

ID = lv_curr_num ) 

TO mapped-zgiri_i_empl_details. 

ENDLOOP. 

ENDMETHOD. 

ENDCLASS. 

 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;output&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_5-1758006486795.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315004iF9B544EF147A53A6/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_5-1758006486795.png" alt="Gireesh_pg1_5-1758006486795.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Im going to update the this value.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here the updated value&amp;nbsp; we can see.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_6-1758006520386.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315005iF0028E9CD32F5763/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_6-1758006520386.png" alt="Gireesh_pg1_6-1758006520386.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;A&lt;/SPAN&gt;&lt;SPAN class=""&gt;n&lt;/SPAN&gt;&lt;SPAN class=""&gt;d&lt;/SPAN&gt;&lt;SPAN class=""&gt; we see in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;changes&lt;/SPAN&gt;&lt;SPAN class=""&gt; log table.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gireesh_pg1_7-1758006540843.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315006i559137F5B592C239/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gireesh_pg1_7-1758006540843.png" alt="Gireesh_pg1_7-1758006540843.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;In conclusion, using a dedicated&amp;nbsp;&lt;/SPAN&gt;change log table&lt;SPAN&gt;&amp;nbsp;provides an efficient and practical way to track data modifications without the heavy storage cost of maintaining full historical snapshots. By recording only essential metadata such as key fields, change type, user, and timestamps, it creates a lightweight yet reliable audit trail. Combined with RAP determinations during the save sequence, this approach ensures that all changes are captured before commit, enabling transparency, compliance monitoring, and easier troubleshooting. Overall, it strikes the right balance between auditability and performance, making it a smart choice for scenarios where full data history is unnecessary.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;thank you if u have any query please reach out me&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/how-to-track-data-changes-in-rap-with-a-change-logs-in-rap/ba-p/14218316"/>
    <published>2025-09-29T09:04:02.971000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441</id>
    <title>Foreign entity in RAP</title>
    <updated>2025-09-29T09:05:47.440000+02:00</updated>
    <author>
      <name>Shyam4U</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1512208</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Description:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;A RAP BO entity which is not part of the BO composition tree for which it is defined. Defining a foreign entity in the behavior definition enables cross-BO message mapping between the two BOs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Key Concepts:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;RAP foreign entity is a component of the BC-ESI-RAP RESTful ABAP Programming Model. It is a representation of an external entity, such as a web service, that can be used in an ABAP program. The foreign entity is defined in the ABAP program and can be used to access data from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tips &amp;amp; Tricks:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;When defining a RAP foreign entity, it is important to ensure that all authentication information is correct. This will ensure that requests are sent securely and that responses are received correctly. Additionally, it is important to ensure that the URL of the external source is correct, as this will ensure that requests are sent to the correct location.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;How to use it:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;To use a RAP foreign entity, first define the entity in the ABAP program. This includes specifying the URL of the external source, as well as any authentication information that may be required. Once the entity is defined, it can be used to access data from the external source. This can be done using the RAP API, which provides methods for making requests and receiving responses from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758779361113.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319667i1BD7D26A3B6E12D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758779361113.png" alt="Shyam4U_0-1758779361113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Example : &lt;/STRONG&gt;&lt;/FONT&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;"In our system, we have two distinct business entities: &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Inventory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Order&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Although they are separate, they are fundamentally linked. We manage this connection by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;product ID&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; as the key identifier. This ensures that every time a sales order is created, the system automatically checks and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;deducts the correct quantity from the available stock&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the inventory. This process maintains accurate, real-time stock levels, which is critical for our operations."&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'inverty table' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_t_inventory { 

key product_id : abap.char(10) not null; 
stock_level : abap.int4; 
product_name : abap.char(40); 
create_at : timestampl; 
last_chdate : timestampl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INTERFACE VIEW INVERNTORY' 
@Metadata.ignorePropagatedAnnotations: true 
define root view entity ZSCN_i_INVENTORY as select from zscn_t_inventory 
{ 
key product_id as ProductId, 
stock_level as StockLevel, 
product_name as ProductName, 
create_at as CreateAt, 
last_chdate as LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INVENTORY CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: true 
@VDM.viewType: #TRANSACTIONAL 
define root view entity ZSCN_C_INVENTORY 
provider contract transactional_query 
as projection on ZSCN_i_INVENTORY 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Product Id' }] 
@UI.identification:[{ position: 10 , label: 'Product Id' }] 
key ProductId, 
@UI.lineItem: [{ position: 20 , label: 'Stock Level' }] 
@UI.identification:[{ position: 20 , label: 'Stock Level' }] 
StockLevel, 
@UI.lineItem: [{ position: 30 , label: 'Product Name' }] 
@UI.identification:[{ position: 30 , label: 'Product Name' }] 
ProductName, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_inventory unique; 
strict ( 2 ); 
with draft; 

define behavior for ZSCN_i_INVENTORY //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_t_inventory 
lock master 
total etag LastChdate 
draft table zscn_t_invent_d 
authorization master ( instance ) 
late numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 
create ( authorization : global ); 
update; 
delete; 
field ( readonly ) ProductId; 

validation vali_Stock on save { create; update; } 

draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_t_inventory { 
CreateAt = create_at ; 
LastChdate = last_chdate ; 
ProductId = product_id ; 
ProductName = product_name ; 
StockLevel = stock_level; 
} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758779760747.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319670i23615557B62C460B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758779760747.png" alt="Shyam4U_1-1758779760747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In our system, a key validation for inventory is to prevent the stock level from ever going into a negative value.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758780972739.png" style="width: 655px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319675i7F29A75ECBAD4A91/image-dimensions/655x264?v=v2" width="655" height="264" role="button" title="Shyam4U_0-1758780972739.png" alt="Shyam4U_0-1758780972739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD vali_Stock.
    
LOOP AT keys INTO DATA(lv_key).

      READ ENTITY IN LOCAL MODE ZSCN_i_INVENTORY
       ALL FIELDS WITH VALUE #( (  %key = lv_key-%key ) )
      RESULT DATA(lt_result).

      CHECK lt_result IS NOT INITIAL.

      LOOP AT lt_result INTO DATA(lv_result).
        IF lv_result-StockLevel &amp;lt; 0 .
          APPEND VALUE #(  %tky = lv_result-%tky  ) TO failed-zscn_i_inventory.

          APPEND VALUE #(  %tky = lv_result-%tky
                 %msg = new_message_with_text( severity =
                 if_abap_behv_message=&amp;gt;severity-error
                 text = 'Stock value should not be negative value ' &amp;amp;&amp;amp; ' ' &amp;amp;&amp;amp; lv_result-StockLevel )
                 %element-stocklevel = if_abap_behv=&amp;gt;mk-on  ) TO reported-zscn_i_inventory .

        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758781361679.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319683i21B33569A1767987/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758781361679.png" alt="Shyam4U_2-1758781361679.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Sales order Entity&amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'SALES ORDER' 
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_dt_salesord { 

key sales_order_id : abap.numc(10) not null; 
product_id : abap.char(10) not null; 
quantity : abap.numc(5); 
customer_id : abap.char(10); 
order_date : abap.dats; 
@Semantics.amount.currencyCode : 'zscn_dt_salesord.currency' 
total_amount : abap.curr(13,2); 
currency : abap.cuky; 
create_at : timestamp; 
last_changed : timestamp; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'SALESORD CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: false 
define root view entity ZSCN_C_SALESORD 
provider contract transactional_query 
as projection on ZSCN_I_SALESORD 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Sales Order Id' }] 
@UI.identification:[{ position: 10 , label: 'Sales Order Id' }] 
key SalesOrderId, 
@UI.lineItem: [{ position: 20 , label: 'Product Id' }] 
@UI.identification:[{ position: 20 , label: 'Product Id' }] 
@Consumption.valueHelpDefinition: [{ 
entity: { name: 'ZSCN_C_INVENTORY', element: 'ProductId' } }] 
ProductId, 
@UI.lineItem: [{ position: 30 , label: 'Quantity' }] 
@UI.identification:[{ position: 30 , label: 'Quantity' }] 
Quantity, 
@UI.lineItem: [{ position: 40 , label: 'Customer Id' }] 
@UI.identification:[{ position: 40 , label: 'Customer Id' }] 
CustomerId, 
@UI.lineItem: [{ position: 50 , label: 'Order Date' }] 
@UI.identification:[{ position: 50 , label: 'Order Date' }] 
OrderDate, 
@UI.lineItem: [{ position: 60 , label: 'Total Amount' }] 
@UI.identification:[{ position: 60 , label: 'Total Amount' }] 
TotalAmount, 
Currency, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChanged 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_salesord unique; 
strict ( 2 ); 
with draft; 

//foreign entity Zscn_i_inventory alias _inventory ; 
define behavior for ZSCN_I_SALESORD //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_dt_salesord 
lock master 
total etag LastChanged 
draft table zscn_dt_salord_d 
authorization master ( instance ) 
early numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 

create ( authorization : global ); 
update; 
delete; 
field ( readonly ) SalesOrderId; 

validation valid_ProductId on save { create; update; } 
determination stock_upadte on save { field Quantity; } 
 
draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_dt_salesord 
{ 
CreateAt = create_at; 
Currency = currency; 
CustomerId = customer_id; 
LastChanged = last_changed; 
OrderDate = order_date;
ProductId = product_id; 
SalesOrderId = sales_order_id; 
Quantity = quantity; 
TotalAmount = total_amount; 

} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;without the foreign entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt; &lt;SPAN class=""&gt;syntax ,&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; behavior definition of the ZSCN_I_SALESORD it only holding the structure of ZSCN_I_SALESORD it &lt;/SPAN&gt;&lt;SPAN class=""&gt;doesn't&lt;/SPAN&gt;&lt;SPAN class=""&gt; hold the structure &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt;&lt;SPAN class=""&gt; .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758782312689.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319693i04E76CF2ACE2702F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758782312689.png" alt="Shyam4U_3-1758782312689.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758782320070.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319694iBE9FAD22C19ED3EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_4-1758782320070.png" alt="Shyam4U_4-1758782320070.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Due to the separate entity definitions, errors from an inventory stock update cannot be directly propagated to the sales order user interface. In Failed and &lt;/SPAN&gt;&lt;SPAN class=""&gt;Reported structure will be miss &lt;/SPAN&gt;&lt;SPAN class=""&gt;match. &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;T&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;o propagate &lt;/SPAN&gt;&lt;SPAN class=""&gt;this&lt;/SPAN&gt;&lt;SPAN class=""&gt; we use of foreign entity syntax&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;uncomment the&amp;nbsp;//foreign entity Zscn_i_inventory alias _inventory ;&amp;nbsp; in Behavior definition of&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Zscn_i_salesord .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758782990181.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319700i976D6F6DBC5BC8E1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758782990181.png" alt="Shyam4U_0-1758782990181.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After adding the Foreign entity Zscn_i_inventory &amp;nbsp;alies _inventory ; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can see the change in the entity Zscn_i_salesord structure .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758783042974.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319701i23555758241BE272/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758783042974.png" alt="Shyam4U_1-1758783042974.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758783077463.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319702i7ED69A661F19E1EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_2-1758783077463.png" alt="Shyam4U_2-1758783077463.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758783109372.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319703iBBF8EBD3793DA2F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758783109372.png" alt="Shyam4U_3-1758783109372.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758783178499.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319704iD42E5E0BC1A228ED/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_4-1758783178499.png" alt="Shyam4U_4-1758783178499.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using the Determination we are update the stock of&amp;nbsp;the inventory table based on the Product id in Behavior definition implementation class .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A critical validation has been implemented: when a sales order is created, if the requested quantity is greater than the available stock level, an error is raised in the inventory business logic. This error is then propagated to the sales order entity, making it visible on the sales order screen.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD stock_upadte. 

LOOP AT keys INTO DATA(lv_key). 

READ ENTITY IN LOCAL MODE zscn_i_salesord ALL FIELDS WITH 
VALUE #( ( %key = lv_key-%key ) ) 
RESULT DATA(lt_result). 

CHECK lt_result IS NOT INITIAL. 

LOOP AT lt_result INTO DATA(lv_result). 
 
READ ENTITY ZSCN_i_INVENTORY 
ALL FIELDS WITH VALUE #( ( ProductId = lv_result-ProductId ) ) 
RESULT DATA(lt_result_inventory). 

LOOP AT lt_result_inventory INTO DATA(lv_inventory). 

 DATA(lv_stock) = CONV i( lv_inventory-StockLevel - lv_result-Quantity ). 

MODIFY ENTITY ZSCN_i_INVENTORY UPDATE FIELDS ( StockLevel ) 
WITH VALUE #( ( %key-ProductId = lv_inventory-%key-ProductId 
StockLevel = lv_stock ) ) REPORTED DATA(ltreported). 

if ltreported is not INITIAL. 
 
DATA: lt_dummy LIKE reported-_inventory. 
lt_dummy = CORRESPONDING #( ltreported-zscn_i_inventory ). 

APPEND LINES OF lt_dummy TO reported-_inventory.  

endif. 
      ENDLOOP. 
   ENDLOOP. 
ENDLOOP. 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;above&lt;/SPAN&gt;&lt;SPAN class=""&gt; code &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt; am using &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CORRESPONDING #( &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ltreported&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;zscn_i_inventory&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; ). &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;because &lt;/SPAN&gt;&lt;SPAN class=""&gt;of while&lt;/SPAN&gt; &lt;SPAN class=""&gt;using&lt;/SPAN&gt;&lt;SPAN class=""&gt; the EML syntax the report will be early but inside the Behavior &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition it&lt;/SPAN&gt;&lt;SPAN class=""&gt; will be late &lt;/SPAN&gt;&lt;SPAN class=""&gt;structure.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_5-1758783700742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319709i8DE267E217225D43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_5-1758783700742.png" alt="Shyam4U_5-1758783700742.png" /&gt;&lt;/span&gt;&amp;nbsp; &lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_6-1758783731326.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319710i291685CEEACF10B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_6-1758783731326.png" alt="Shyam4U_6-1758783731326.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In inventory entity this are the possible product we have in that &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; will &lt;/SPAN&gt;&lt;SPAN class=""&gt;chose&lt;/SPAN&gt;&lt;SPAN class=""&gt; Titan watch&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758784285024.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319716i82C35938198C8543/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758784285024.png" alt="Shyam4U_0-1758784285024.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When creating a sales order for a Titan watch, if the requested quantity of 50 exceeds the available stock of 40, the system will prevent the transaction and display an error.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758784335793.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319717i0D9C69770EC165AB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758784335793.png" alt="Shyam4U_1-1758784335793.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;The error which is from the inventory entity by using the foreign entity concept we are propagating the error message of &lt;/SPAN&gt;&lt;SPAN class=""&gt;inventory in&lt;/SPAN&gt;&lt;SPAN class=""&gt; sales order entity.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758784368449.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319718i9251943C19615F88/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758784368449.png" alt="Shyam4U_2-1758784368449.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related Information:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;For more information on using RAP foreign entities, please refer to the SAP Help documentation on BC-ESI-RAP RESTful ABAP Programming Model. Additionally, there are many tutorials available online which provide step-by-step instructions on how to use RAP foreign entities in an ABAP program.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Thanks for &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.erplingo.com/sap-glossary/en/bc-esi-rap/rap-foreign-entity" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;What is RAP foreign entity in SAP BC-ESI-RAP? Definition &amp;amp; Tips&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441"/>
    <published>2025-09-29T09:05:47.440000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/building-saas-products-on-sap-btp/ba-p/14231929</id>
    <title>Building SaaS Products on SAP BTP</title>
    <updated>2025-09-30T17:53:09.293000+02:00</updated>
    <author>
      <name>michal_majer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/160961</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1632710804"&gt;Building SaaS Products on SAP BTP&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt; This article was inspired by SAP's work on modern cloud development, particularly the blog "&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/how-sap-s-abap-cloud-partner-reference-app-simplifies-multi-tenant-side-by/ba-p/14223705" target="_blank"&gt;How SAP's ABAP Cloud Partner Reference App simplifies multi-tenant side-by-side extensions&lt;/A&gt;," and is intended to explore these critical architectural topics further.&lt;/P&gt;&lt;P&gt;SAP is undergoing its largest transformation in decadesâ€”moving from &lt;STRONG&gt;on-premise monoliths to cloud-native architecture&lt;/STRONG&gt;. Products like Datasphere, Analytics Cloud, and Business Data Cloud exist only in the cloud. Yet despite this fundamental shift, most software vendors still treat SAP like itâ€™s 2010.&lt;/P&gt;&lt;P&gt;Let me explain why this gap is a massive &lt;STRONG&gt;opportunity for disruption&lt;/STRONG&gt;â€”and why mastering the &lt;STRONG&gt;SAP Business Technology Platform (BTP)&lt;/STRONG&gt; is much harder than the marketing suggests.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1565280018"&gt;The Architectural Divide: From Monolith to Node&lt;/H2&gt;&lt;P&gt;To understand the &lt;STRONG&gt;BTP challenge&lt;/STRONG&gt;, we must first recognize the dramatic shift in enterprise architecture.&lt;/P&gt;&lt;H3 id="toc-hId-1497849232"&gt;The Old World: SAP as the Center of Gravity&lt;/H3&gt;&lt;P&gt;For decades, &lt;STRONG&gt;SAP ECC&lt;/STRONG&gt; was the undisputed heart of enterprise data. Every system pointed inward. CRM, warehouse management, custom applicationsâ€”everything fed data into one central, tightly coupled system.&lt;/P&gt;&lt;DIV class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;External&amp;nbsp;Systems&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;âŸ¶&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;SAP&amp;nbsp;ECC&amp;nbsp;Monolith&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;âŸ¶&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Single&amp;nbsp;Source&amp;nbsp;of&amp;nbsp;Truth&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;P&gt;This architecture made building SAP-integrated products deceptively straightforward:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Write &lt;STRONG&gt;ABAP code&lt;/STRONG&gt; directly inside the SAP system.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Deploy via Transport Requests.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Access everything natively (tables, function modules, full transaction control).&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I've seen incredibly sophisticated, high-performance solutions built entirely in ABAP. But notice this: many of these established ABAP vendors are slow to build cloud-native versions on BTP. This hesitation tells you something profound about the real challenges involved.&lt;/P&gt;&lt;H3 id="toc-hId-1301335727"&gt;The New Reality: S/4HANA as Just Another Node&lt;/H3&gt;&lt;P&gt;In today's distributed architecture, &lt;STRONG&gt;S/4HANA is simply one system among many&lt;/STRONG&gt;. It sits alongside Salesforce, Workday, custom applications, and SAPâ€™s own cloud productsâ€”all communicating through &lt;STRONG&gt;SAP BTP as the critical integration, extension, and application layer&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This fundamental change means you can no longer rely on deep, internal access to the core. It forces a complete overhaul of how you design and build &lt;STRONG&gt;SaaS products&lt;/STRONG&gt; for the SAP ecosystem.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-975739503"&gt;The BTP Reality: Why It's Harder Than It Looks&lt;/H2&gt;&lt;P&gt;The core challenge lies in bridging the gap between the &lt;STRONG&gt;ABAP world's capabilities&lt;/STRONG&gt; and the &lt;STRONG&gt;modern cloud platformâ€™s constraints&lt;/STRONG&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-908308717"&gt;The ABAP Advantage (What You Lose)&lt;/H3&gt;&lt;P&gt;When you build directly in ABAP (on-premise), you gain:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Direct access&lt;/STRONG&gt; to all SAP objects and processes.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Standardized integration patterns (BAPIs, Function Modules).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Full &lt;STRONG&gt;transactional control&lt;/STRONG&gt; and deep customization hooks.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;30+ years of accumulated frameworks and access methods.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-711795212"&gt;The BTP Reality (What You Are Limited To)&lt;/H3&gt;&lt;P&gt;On BTP, you are limited to officially sanctioned external access methods:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;APIs (REST, OData)&lt;/STRONG&gt; â€“ when they exist and are complete.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;RFC Calls/Web Services&lt;/STRONG&gt; â€“ (The "legacy" or "sidecar" approach).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Custom ABAP Extensions&lt;/STRONG&gt; â€“ (The fallback when APIs fail).&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The Technical Truth: Many older, niche, or newly migrated SAP modules do not have complete &lt;STRONG&gt;API coverage&lt;/STRONG&gt; for every critical workflow step. This is not a criticism of SAP; it's the reality of a massive platform in transition. Building true SaaS products on BTP requires mapping your entire solution against the &lt;STRONG&gt;SAP API Business Hub&lt;/STRONG&gt; before writing any code.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-386198988"&gt;The Compelling Reason to Build SaaS on BTP&lt;/H2&gt;&lt;P&gt;Despite the integration complexity, the strategic advantages of BTP are too significant for modern vendors to ignore. &lt;STRONG&gt;BTP is the enforcement mechanism for SAP's Clean Core strategy.&lt;/STRONG&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;Strategic Advantage&lt;/TD&gt;&lt;TD&gt;Why it Matters&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;1. Leverage SAP Objects Without Core Modification&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;Use SAP &lt;STRONG&gt;CAP&lt;/STRONG&gt; (Cloud Application Programming Model) or &lt;STRONG&gt;RAP&lt;/STRONG&gt; (ABAP RESTful Application Programming Model) to extend key SAP objects (Business Partners, Sales Orders, Materials) with custom fields and logic. This ensures your solution aligns with the &lt;STRONG&gt;Clean Core&lt;/STRONG&gt; approach.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;2. Instant User Management and Security&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;Integrate with BTP's &lt;STRONG&gt;XSUAA service&lt;/STRONG&gt;. You instantly inherit customer's users, &lt;STRONG&gt;SSO integration&lt;/STRONG&gt;, saving months of development and operational overhead on identity management.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;3. Customer-Specific Extensions via Multitenancy&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;Ship one product while allowing customer-specific configurations and extensions. BTP's native &lt;STRONG&gt;multitenancy&lt;/STRONG&gt; handles the data and configuration isolation, dramatically lowering codebase maintenance costs compared to the old world of branched ABAP code.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;4. Modern Deployment and Operations&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;Deploy globally without hardware investment. Scale automatically based on demand. Use modern &lt;STRONG&gt;DevOps&lt;/STRONG&gt; practices and CI/CD pipelines to update all customers simultaneouslyâ€”a logistical nightmare with on-premise solutions.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-189685483"&gt;Two Strategic Approaches to BTP SaaS&lt;/H2&gt;&lt;P&gt;Your product's architecture should align with its core purpose:&lt;/P&gt;&lt;H3 id="toc-hId-122254697"&gt;Approach 1: Extend SAP Objects&lt;/H3&gt;&lt;P&gt;Your product becomes a natural, value-add extension of core SAP functionality, leveraging the data models customers already use and understand.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Best for:&lt;/STRONG&gt; Solutions that enhance existing SAP processes (advanced analytics, specialized compliance requirements, industry-specific workflows).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Technical Focus:&lt;/STRONG&gt; Heavy reliance on &lt;STRONG&gt;CAP/RAP&lt;/STRONG&gt; to extend standard entities and leverage the existing SAP transactional context.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId--149490177"&gt;Approach 2: Build Independent with SAP Integration (Loosely Coupled)&lt;/H3&gt;&lt;P&gt;Create your own data model using modern frameworks (CAP/Node.js, Java) and integrate with SAP only as needed for master data and transactional exchange.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Best for:&lt;/STRONG&gt; Products that could exist standalone but gain significant value from SAP integration (planning tools, specialized industry solutions, asset management).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Technical Focus:&lt;/STRONG&gt; Strong emphasis on the &lt;STRONG&gt;SAP Integration Suite&lt;/STRONG&gt; and &lt;STRONG&gt;Event Mesh&lt;/STRONG&gt; for asynchronous, reliable communication.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H2 id="toc-hId--52600675"&gt;The Common Pitfalls I've Observed&lt;/H2&gt;&lt;P&gt;Architectural success on BTP is often defined by avoiding these common traps:&lt;/P&gt;&lt;H3 id="toc-hId--542517187"&gt;1. The API Gap Surprise&lt;/H3&gt;&lt;P&gt;Teams design beautiful cloud-native architecture assuming APIs exist for everything. When they discover a critical workflow is missing an API, they are forced to write custom ABAP in the S/4HANA core to create a needed OData service.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;The Lesson:&lt;/STRONG&gt; This creates a &lt;STRONG&gt;Custom ABAP Sidecar&lt;/STRONG&gt;â€”it defeats the purpose of the BTP-native, Clean Core approach for that use case, complicating deployment and creating system-specific dependencies. &lt;STRONG&gt;Map your integration requirements against actual API availability before committing to architecture.&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId--739030692"&gt;2. The Custom Integration Trap&lt;/H3&gt;&lt;P&gt;A company builds its first SAP integration for Customer A, which takes six months. Customer B has different middleware, a different S/4HANA version, and unique customizations. Three years later, the company has five customers but five completely different integrations with no reusable product.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;The Lesson:&lt;/STRONG&gt; Design for product &lt;STRONG&gt;reusability&lt;/STRONG&gt; from day one. Use &lt;STRONG&gt;BTP as the standard integration hub&lt;/STRONG&gt; for all customers. Your product should treat the S/4HANA backend as an interchangeable service, not a monolithic dependency.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId--935544197"&gt;3. The Deployment Complexity&lt;/H3&gt;&lt;P&gt;The product itself might be excellent, but if every customer implementation requires weeks of external SAP consulting to set up roles, connect services, and configure the integration, the deployment model doesn't scale economically.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;The Lesson:&lt;/STRONG&gt; Design your solution to be simple. Aim for a solution that can be deployed and configured by the customerâ€™s existing SAP team in days, not months, using automated scripts and minimal manual steps.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H2 id="toc-hId--838654695"&gt;My Strategic Focus&lt;/H2&gt;&lt;P&gt;My focus is clear: to master the architecture required to build and commercialize a &lt;STRONG&gt;CAP template SaaS solution&lt;/STRONG&gt;. By leveraging the best practices of the &lt;STRONG&gt;Cloud Application Programming Model (CAP)&lt;/STRONG&gt; and designing for &lt;STRONG&gt;native multitenancy&lt;/STRONG&gt;, I aim to provide a production-ready, clean-core blueprint that accelerates the time-to-market for modern SAP solutions. This is the strategic direction for dominating the next era of the SAP ecosystem.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/building-saas-products-on-sap-btp/ba-p/14231929"/>
    <published>2025-09-30T17:53:09.293000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/rap-using-custom-entity-with-load-multiple-data-using-pagination-and/ba-p/14233901</id>
    <title>RAP Using Custom Entity with load multiple data using Pagination and Preview using UI annotations</title>
    <updated>2025-10-03T06:01:53.175000+02:00</updated>
    <author>
      <name>RakeshZore</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1759317</uri>
    </author>
    <content>&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This blog covers RAP development using a custom entity, showcasing data with UI annotations, and surpassing the standard SAP data preview limit through the use of pagination.&lt;/P&gt;&lt;P&gt;Lets Start....&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create a custom entity with the fields that need to be displayed or sent to the frontend.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Custom entity for fetching data'
@ObjectModel.query.implementedBy: 'ABAP:ZCL_IMPLEMENT_EXT' //This is the class where the data is handle and processed
@UI:{ headerInfo:{  typeName: 'RAP Learn',
                             typeNamePlural: 'RAP Learn',
                             title: { label: 'RAP Learn',
                                       type: #STANDARD,
                                       value: 'component'
                                     },
                             description: { value: 'obj_desc' },
                                     typeImageUrl: 'sap-icon://activity-items' //Show Icon image on header of object layout
                           }
               }
@Search.searchable: true //for Searching the data from the output which is also need to implement in the implemented class above 
define root custom entity ZCE_MAIN
{
      .facet   : [{
                      id: 'ID1',
                      purpose: #STANDARD,
                      type: #IDENTIFICATION_REFERENCE,
                      label : 'Component detail',
                      position: 10
                    },
                    {
                id: 'FG1',
                purpose: #STANDARD,
                type: #FIELDGROUP_REFERENCE,
                label : 'Validity Date',
                targetQualifier: 'FG1',
                position: 10
              }]
               : {  selectionField: [{ position: 10 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                            entity : { name: 'ZIV_F4MATNR' , element: 'matnr'   } ,
                            additionalBinding: [{ localElement: 'werks', element: 'werks' },
                                                         {  localElement: 'stlan' , element: 'stlan' },
                                                         {  localElement: 'stlal' , element: 'stlal' }]}]
      @Consumption.filter.selectionType: #SINGLE
  key matnr       : matnr;
               : {  selectionField: [{ position: 20 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                      entity : { name: 'ZIV_F4WERKS', element: 'werks' }
                                                         }]
      @Consumption.filter.selectionType: #SINGLE
  key werks       : werks_d;
               : {  selectionField: [{ position: 30 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                entity : { name: 'ZIV_F4STLAN' , element: 'stlan' }
                                                   }]
      @Consumption.filter.selectionType: #SINGLE
  key stlan       : stlan;
               : {  selectionField: [{ position: 40 }]}
      @Consumption.filter.mandatory: true
      @Consumption.filter.selectionType: #SINGLE
  key stlal       : stlal;
               : { lineItem: [{ position: 10 }], identification: [{ position: 10 }]}
      @EndUserText.label: 'Level'
  key bom_level   : abap.dec( 2, 0 );
               : { lineItem: [{ position: 20 }], identification: [{ position: 20 }]}
      @EndUserText.label: 'Component'
      .defaultSearchElement: true
  key component   : idnrk;
               : {  selectionField: [{ position: 50 }]}
      @Consumption.filter.mandatory: true
      @Consumption.filter.selectionType: #SINGLE
      @EndUserText.label: 'Date'
      zdate       : abap.dats;
               : { lineItem: [{ position: 30, cssDefault: { width: '13rem' }  }], identification: [{ position: 30 }]}
      @EndUserText.label: 'Object Description'
      .defaultSearchElement: true
      obj_desc    : maktx;
               : { lineItem: [{ position: 35, cssDefault: { width: '8rem' } }], identification: [{ position: 35 }]}
      @EndUserText.label: 'Quantity'
      comp_qty    : kmpmg_bi;
               : { lineItem: [{ position: 45 }], identification: [{ position: 45 }]}
      @EndUserText.label: 'Unit'
      comp_unit   : kmpme;
               : { lineItem: [{ position: 55 }], fieldGroup: [{ position: 10 , qualifier: 'FG1', label: 'Valid From' }]}
      @EndUserText.label: 'Valid from'
      valid_from  : datuv_bi;
               : { lineItem: [{ position: 65 }], fieldGroup: [{ position: 11 , qualifier: 'FG1', label: 'Valid To' }]}
      @EndUserText.label: 'Valid to'
      valid_to    : datub_bi;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;While using the RAP framework, metadata extensions cannot be created for custom entities. Therefore, annotations must be directly included in the custom entity code itself for UI purposes.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2 : Create an implementation class for the custom entity mentioned above and name it&amp;nbsp;ZCL_IMPLEMENT_EXT&amp;nbsp;or use the custom name specified in the second line of the code.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_implement_ext DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC
  SHARED MEMORY ENABLED .

  PUBLIC SECTION.
    DATA : et_final TYPE TABLE OF zce_main.
    INTERFACES if_rap_query_provider .

  PROTECTED SECTION.
  PRIVATE SECTION.

ENDCLASS.



CLASS ZCL_IMPLEMENT_EXT IMPLEMENTATION.

  METHOD if_rap_query_provider~select.
    CASE io_request-&amp;gt;get_entity_id( ).
      WHEN 'ZCE_MAIN'.
        TRY.
            DATA(lv_skip) = io_request-&amp;gt;get_paging( )-&amp;gt;get_offset( ). "gets the skip part from URL which means number of data to be skipped and default is 0 but later on it gets add by 20... till last data not get fetched
            DATA(lv_top) = io_request-&amp;gt;get_paging( )-&amp;gt;get_page_size( ). "gets the top part from URL which means number of data required and default is 20
            DATA(lt_filter) = io_request-&amp;gt;get_filter( )-&amp;gt;get_as_ranges( ). "gets the input value which is either pass in our filters or when click on single data line item
           
          CATCH cx_rap_query_filter_no_range.
            "handle exception
        ENDTRY.

        IF lv_top &amp;lt; 0.
*********** Start Logic
"Put logic for single data fetch in which it will trigger when you are going for object page while clicking on single item from display table
"Take inputs from LT_filter table for sending that particular data click 
*********** End Logic
            IF io_request-&amp;gt;is_total_numb_of_rec_requested( ).
              io_response-&amp;gt;set_total_number_of_records( lines( et_final ) ).
            ENDIF.
            IF io_request-&amp;gt;is_data_requested(  ).
              io_response-&amp;gt;set_data( et_final ).
            ENDIF.
        ELSE.
*********** Start Logic
"Put logic for actual multiple data fetch in which it will trigger when you click go button or any sort of actions like search, sort, excel download....
"Take inputs from LT_filter table for required data fetch 
*********** End Logic
          ENDIF.
********** Searching Logic
        DATA(lv_search) = io_request-&amp;gt;get_search_expression( ). "gets the value from Search field in the UI
          IF lv_search IS NOT INITIAL.
            DATA lt_search LIKE et_final.

            lv_search = |*{ lv_search }*|.
            lt_search = VALUE #( BASE lt_search
                          FOR ls_f IN et_final
                          WHERE ( field1 CP lv_search OR  "Put required field to be search instead of field1,field2.....
                                  field2 CP lv_search  OR
                                  field3 cp lv_search OR
                                  field4 cp lv_search OR                                                                
                                                       ( ls_f ) ).
            et_final = lt_search.
          ENDIF.
***********End of Searching logic
***********Sorting logic
        DATA(lt_sort_elements) = io_request-&amp;gt;get_sort_elements( ). "gets the detail table of ascending and descending of field we wants to be sorted from UI
          IF lt_sort_elements IS NOT INITIAL.
            LOOP AT lt_sort_elements INTO DATA(ls_sort).
              IF ls_sort-descending &amp;lt;&amp;gt; 'X'.
                SORT et_final BY (ls_sort-element_name) ASCENDING.
              ELSE.
                SORT et_final BY (ls_sort-element_name) DESCENDING.
              ENDIF.
            ENDLOOP.
          ENDIF.
**********End of sorting logic
**********Paging- logic for loading more data wrt Standard set amount of data
          IF lv_top IS NOT INITIAL OR lv_skip IS NOT INITIAL.
            /iwbep/cl_mgw_data_util=&amp;gt;paging( EXPORTING is_paging = VALUE #( top  = lv_top
                                                                            skip = lv_skip )
                                             CHANGING  ct_data   = et_final ).
          ENDIF.
*********End of Pagination

          IF io_request-&amp;gt;is_total_numb_of_rec_requested( ).
            io_response-&amp;gt;set_total_number_of_records( lines( et_final ) ). "set number of initial data to display overall
          ENDIF.

          IF io_request-&amp;gt;is_data_requested(  ).
            io_response-&amp;gt;set_data( et_final ). "Set data into the entity
          ENDIF.

        ENDIF.
    ENDCASE.
  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;The aforementioned class plays a crucial role as it encapsulates the entire logic for data processing, including searching, sorting, and most importantly, setting data for our custom entity.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3 : Create Service Definition of the Custom entity&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To create a service definition, simply right-click the custom entity in the Project Explorer, click 'New Service Definition', fill in the required inputs, and your service definition will be created.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Service definition'
define service ZSD_MAIN {
  expose ZCE_MAIN;
  expose ZIV_F4MATNR; "This is for ValueHelp Definition, and it's okay not to expose it.
  expose ZIV_F4WERKS;
  expose ZIV_F4STLAN;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;Let's take a look at one of the interface views of the ValueHelpDefinition.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface view for ValueHelpDefinition - MATNR'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZIV_F4MATNR
  as select distinct from mast
    left outer join       makt on makt.matnr = mast.matnr
{
         : {  selectionField: [{ position: 10 }] , lineItem: [{ position: 10 }]}
      @EndUserText.label: 'Material No'
  key mast.matnr,
      @Consumption.filter.hidden: true
  key mast.werks,
      @Consumption.filter.hidden: true
  key mast.stlan,
      @Consumption.filter.hidden: true
  key mast.stlal,
      @Consumption.filter.hidden: true
         : {   lineItem: [{ position: 20 }]}
      @EndUserText.label: 'Material Desc'
      makt.maktx
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;Step 4 : Create a Service Binding for the aforementioned service definition.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To create a service binding, simply right-click the created service definition in the Project Explorer, click 'New Service Binding', fill in the required inputs, and your service binding will be created. While creating the Service Binding, I selected OData V2 - UI. Then, activate and publish the service. To view the UI output, you can use the Preview option in Eclipse to see the output as shown in the image below.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-10-02 211818.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322447iD800178661F5E9F5/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-10-02 211818.png" alt="Screenshot 2025-10-02 211818.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In conclusion, using RAP with custom entities and pagination facilitates efficient data handling. With UI annotations, you can easily preview and refine the user interface. We hope this guide has been helpful. Stay tuned for more tips!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Note: This program is created for a remote system. For cloud environments, you can use a service consumption model or access data through a remote system API in the implementation class.&lt;/EM&gt;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/rap-using-custom-entity-with-load-multiple-data-using-pagination-and/ba-p/14233901"/>
    <published>2025-10-03T06:01:53.175000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696</id>
    <title>Collective Search Help Using Abstract Entity in RAP</title>
    <updated>2025-10-03T11:51:37.840000+02:00</updated>
    <author>
      <name>sanjay22</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1535416</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Collective Value Help with Abstract Entity in SAP RAP&lt;/SPAN&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can define a Collective Search Help&amp;nbsp;that combines multiple elementary &lt;/SPAN&gt;&lt;SPAN class=""&gt;search&lt;/SPAN&gt;&lt;SPAN class=""&gt; helps. This allows users to choose between different search paths and fetch values from various sources in a single dialog. The same concept is available in SAP Fiori through a Collective Value Help&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;It is implemented using an Abstract &lt;/SPAN&gt;&lt;SPAN class=""&gt;Entity that&lt;/SPAN&gt;&lt;SPAN class=""&gt; aggregates multiple elementary value helps and defines potential field mappings&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;An Abstract Entity does not hold data. Instead, it acts as a container for the Collective Search Help. This means it only groups together multiple elementary value helps and defines how they are mapped, without storing any business data itself.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The Collective Value Help shall be annotated with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.collectiveValueHelp.for.element&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; pointing to the field for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The referenced field must be assigned at least one elementary value help using the annotation &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@Consumption.valueHelpDefinition.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;This setup ensures that your Collective Value Help aggregates multiple search options seamlessly for end-users.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Only specific keywords are allowed in a collective value help:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity.name&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity. Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding local Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding. Element qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create a&amp;nbsp;Abstract Entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abstract entity'
@ObjectModel.supportedCapabilities: [ #COLLECTIVE_VALUE_HELP ]
@ObjectModel.collectiveValueHelp.for.element: 'Country'
define abstract entity ZSM_ABSTRACT_CDS_ENTITY

{
  @Consumption.valueHelpDefinition: [
  {
       entity: { name: 'I_Country' },
       label: 'Search by Country'
  },
   {
      entity: {
      name: 'I_RegionVH',
      element: 'Country'
  },
  additionalBinding: [{ localElement: 'Region', element: 'Region' }],
  label   : 'Search by Region',
  qualifier: 'Regionsearch'
   }
   ]
  Country : land1;
  Region  : regio;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758879930864.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320249i89C882018112B8B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758879930864.png" alt="sanjay22_0-1758879930864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.CollectiveValueHelp.for.element &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;â†’&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Specifies the field (Country) for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;The Abstract Entity (&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;zsm_abstract_cds_entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;) &amp;nbsp;acts as a container, not holding data itself. acts as a Consumption value Help Definition search paths Defines multiple Search by Country (default value help) (alternative path with additional Search by Region binding to Region.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;@&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Consumption.valueHelpDefintion &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;â†’ Defines multiple search paths :&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Country( default Value Help )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Region( Alternate path with additional binding to Region )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create an Interface View&lt;/SPAN&gt;&lt;SPAN class=""&gt; on Database Table&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880109210.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320250i35C6CA50B680760A/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880109210.png" alt="sanjay22_0-1758880109210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Assign a Value Help for the Country field inside a &lt;/SPAN&gt;&lt;SPAN class=""&gt;Metadata Extension&lt;/SPAN&gt;&lt;SPAN class=""&gt; CDS.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880183958.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320251iCD87357B0371C953/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880183958.png" alt="sanjay22_1-1758880183958.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Here Country field uses Collective search &lt;/SPAN&gt;&lt;SPAN class=""&gt;help( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_I_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL) &lt;/SPAN&gt;&lt;SPAN class=""&gt;with&lt;/SPAN&gt;&lt;SPAN class=""&gt; binding to &lt;/SPAN&gt;&lt;SPAN class=""&gt;Region&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the above Interface View.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880250069.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320252i495BFA8BE3403846/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880250069.png" alt="sanjay22_2-1758880250069.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Projection View for the Above Interface view&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880409200.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320255iBBBDF9FB40C44CFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880409200.png" alt="sanjay22_0-1758880409200.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the Interface View&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880499246.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320256i0DAD0BA5C278B5F3/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880499246.png" alt="sanjay22_1-1758880499246.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Service Binding &lt;/SPAN&gt;&lt;SPAN class=""&gt;( OData&lt;/SPAN&gt;&lt;SPAN class=""&gt; â€“ V&lt;/SPAN&gt;&lt;SPAN class=""&gt;4 )&lt;/SPAN&gt;&lt;SPAN class=""&gt; to expose the Entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_C_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL )&lt;/SPAN&gt; &lt;SPAN class=""&gt;to the front end.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880554639.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320257i45126292733C4314/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880554639.png" alt="sanjay22_2-1758880554639.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;F4 for Country Field â€“ Search by Country&lt;/SPAN&gt;&lt;SPAN class=""&gt;, Search by region two value help screen.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_3-1758880593273.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320258i131D140173B03D26/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_3-1758880593273.png" alt="sanjay22_3-1758880593273.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696"/>
    <published>2025-10-03T11:51:37.840000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-cloud-blog-posts/validation-in-draft-with-state-messages-in-rap/ba-p/14228996</id>
    <title>Validation in Draft with State Messages in RAP</title>
    <updated>2025-10-03T16:34:11.013000+02:00</updated>
    <author>
      <name>harsh_raj1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152044</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;When we build applications using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;ABAP RESTful Application Programming Model (RAP)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, one of the big advantages is the ability to work with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;draft-enabled business objects&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Draft handling lets users edit data, save it temporarily, and only activate it when theyâ€™re ready.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;But hereâ€™s the catch: even in draft mode, we canâ€™t allow &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;just anything&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; to be saved. Business rules still need to be checked. This is where &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;validations with state messages&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; come in. They ensure data quality while giving users clear, contextual feedback right inside the Fiori UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this post, Iâ€™ll Walk you through how to set up such validations in RAP.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Why do we need validations in draft?&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We need validation in a draft&amp;nbsp;to maintain data integrity and consistency throughout the business process by identifying inconsistencies early, providing immediate feedback to the user, and ensuring that data meets business requirements before it becomes active, thereby preventing errors and improving the overall reliability of the system.&amp;nbsp;&lt;/SPAN&gt; &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Ensures Data Integrity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;Validation checks if data entered into a draft is consistent with predefined criteria, preventing the storage of incomplete or incorrect data.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Provides Immediate Feedback&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;Users receive real-time messages indicating any inconsistencies or issues within the draft, allowing them to correct them before committing to the final active state.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Supports Data Consistency&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Validations are triggered at predefined points in the transaction cycle, ensuring that draft instances remain in a consistent and reliable state.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Prevents Business Errors&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;By catching errors in the draft stage, validation prevents them from propagating to the active data, avoiding costly mistakes and ensuring the accuracy of final data.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Enhances User Experience&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;Users are informed about missing or incorrect information, allowing them to modify their input without needing to complete the entire transaction to see the problem.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Facilitates Data Reliability&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;For developers, this means the data that eventually leaves an API can be trusted because it has been validated, leading to simpler and more reliable front-end code.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Validation:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A validation is an optional part of the business object behavior that checks the consistency of business object instances based on trigger conditions.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A validation is implicitly invoked by the business objectâ€™s framework if the trigger condition of the validation is fulfilled. Trigger conditions can be&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;modify&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;operations and modified fields. The trigger condition is evaluated at the trigger time, a predefined point during the BO runtime. An invoked validation can reject inconsistent instance data from being saved by passing the keys of failed instances to the corresponding table in the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;FAILED&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;structure. Additionally, a validation can return messages to the consumer by passing them to the corresponding table in the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;REPORTED&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;structure.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Points to be noted:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When working with validations, you have to consider the following runtime specifics:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;In unmanaged scenarios, validations are only supported for draft instances, not for active instances.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL class="lia-list-style-type-disc"&gt;&lt;LI&gt;&lt;SPAN&gt;The execution order of validations is not fixed. If there is more than one validation triggered by the same condition, you cannot know which validation is executed first.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;It is not allowed to use EML modify statements in validations.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;In a managed scenario with draft, it is strongly recommended to assign validations to the PREPARE, so that state messages from the validations are returned correctly to the consumer.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Messages in RAP:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;State Messages:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;State messages refer to a business object instance and its values.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;State messages must be always bound to a business object instance.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;You mustnâ€™t define state messages in an action or function added on projection level(Dump).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Draft Scenario, Theyâ€™re persisted until the state that caused the message is changed.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Managed scenario, the messages are buffered until the end of the session.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;If a validation returns an error message regarding an incorrect value in a field,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The state message persisted until the value is changed and the save sequence is &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Triggered again.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Using State messages is only recommended for the following cases:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Business object with draft capabilities: Determinations and validation that are &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Allocated to the prepare or a determine action.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Unmanaged Business Object: Finalize/check before save code exit.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Managed Scenario: Determination/validation on save.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Transition Messages:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Refers to the current Request.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;It can either be bound or unbound (not related to business object instances).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;      APPEND VALUE #( %tky = &amp;lt;ls_keys&amp;gt;-%tky
                     %msg = NEW /dmo/cm_flight_messages(
                        textid   = /dmo/cm_flight_messages=&amp;gt;discount_invalid
                        severity = if_abap_behv_message=&amp;gt;severity-error
      )                 %element-bookingfee = if_abap_behv=&amp;gt;mk-on
                       %action-deductdiscount =  if_abap_behv=&amp;gt;mk-on )
                       TO reported-zr_travel_d1.&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;        APPEND VALUE #( %msg      = new_message_with_text(
                        severity = if_abap_behv_message=&amp;gt;severity-error
                        text = 'operation not authorized!' ) )
                        TO reported-zr_travel_d1.&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    APPEND VALUE #(
            %tky                = booking-%tky
            %state_area         = 'VALIDATE_CUSTOMER'
            %msg                = NEW /dmo/cm_flight_messages( textid   = /dmo/cm_flight_messages=&amp;gt;enter_customer_id
                                                               severity = if_abap_behv_message=&amp;gt;severity-error )
            %path               = VALUE #( zR_Travel_D1-%tky = travel_booking_links[
                                                                   KEY id
                                                                   source-%tky = booking-%tky ]-target-%tky )
            %element-CustomerID = if_abap_behv=&amp;gt;mk-on )
               TO reported-zr_booking_d1.&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Trigger condition can be: CUD operation or modified fields(Update for validation is only &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Supported in combination with create).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; validation validateCustomer on save { create; field CustomerID; }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Trigger Time:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Validation on save are executed:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;In the check Before save method of the save sequence.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;On request by executing a determine action, if the validation has been assigned to&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Such an action in the behavior definition. For more information, see Determine Actions.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_5-1758884065427.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320421iEF8CD1D080ED6C91/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_5-1758884065427.png" alt="harsh_raj1_5-1758884065427.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For making the validation you have to make field as mandatory.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;field&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;(&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;mandatory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;CustomerID&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;validation&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;validateCustomer&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;on&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;save&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;{&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;create;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;field&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;CustomerID&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;;}&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Give &lt;/SPAN&gt;&lt;SPAN&gt;implementation for&amp;nbsp;validatecustomer&amp;nbsp;method in local handler class.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;When we are working with state messages in RAP first we need to invalidate it without msg and later&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;If needed, we can validate with msg.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;      APPEND VALUE #( %tky        = travel-%tky
                      %state_area = 'VALIDATE_CUSTOMER' )
             TO reported-zr_travel_d1.&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Adding back with msg:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;If we remove state area it will become transaction message.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;      IF travel-CustomerID IS INITIAL.
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zr_travel_d1.

        APPEND VALUE #( %tky                = travel-%tky
                        %state_area         = 'VALIDATE_CUSTOMER'
                        %msg                = NEW /dmo/cm_flight_messages(
                                                      textid   = /dmo/cm_flight_messages=&amp;gt;enter_customer_id
                                                      severity = if_abap_behv_message=&amp;gt;severity-error )
                        %element-CustomerID = if_abap_behv=&amp;gt;mk-on )
               TO reported-zr_travel_d1.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;On Fiori app:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we can see Customerid is 1 and itâ€™s a valid value so it will not through any error &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Message whenever user click enter or save button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_8-1758884118570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320425iC029A38130842A81/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_8-1758884118570.png" alt="harsh_raj1_8-1758884118570.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;Now I will edit it and pass some invalid value. See how it behaves.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@Consumption.valueHelpDefinition:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;[{entity:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;{name:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;'/DMO/I_Customer_StdVH',&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;element:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;'CustomerID'&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;},&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;useForValidation:&amp;nbsp;true&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;}]&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Here am not using use for validation : true thatâ€™s why if user click on enter it will not throw any error message it will only throw error message when &amp;nbsp;User click on save button.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_9-1758884118573.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320429iB4D0F878C6A572B9/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_9-1758884118573.png" alt="harsh_raj1_9-1758884118573.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now i have added use for validation: true.&amp;nbsp;&lt;/P&gt;&lt;P&gt;See it will validate when user click on enter as well.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_10-1758884118575.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320430i2B4981D90DA5D176/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_10-1758884118575.png" alt="harsh_raj1_10-1758884118575.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;These messages are coming from read after performing&amp;nbsp; modify.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_11-1758884118576.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320428iDB8103322D917B99/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_11-1758884118576.png" alt="harsh_raj1_11-1758884118576.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;As we are reading from parent entity travel for booking.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here are minor changes in validation from travel customer validation.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Apart from this most of the things are similar.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;%path is different and link data.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    READ ENTITIES OF zR_Travel_D1 IN LOCAL MODE
         ENTITY zr_booking_d1
         FIELDS ( CustomerID )
         WITH CORRESPONDING #( keys )
         RESULT DATA(bookings).&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    READ ENTITIES OF zR_Travel_D1 IN LOCAL MODE
         ENTITY zr_booking_d1 BY \_Travel1
         FROM CORRESPONDING #( bookings )
         LINK DATA(travel_booking_links).&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;            %path               = VALUE #( zR_Travel_D1-%tky = travel_booking_links[
                                                                   KEY id
                                                                   source-%tky = booking-%tky ]-target-%tky )
            %element-CustomerID = if_abap_behv=&amp;gt;mk-on )
               TO reported-zr_booking_d1.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;For Booking:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Am not using here this annotation so here it's not validating at frontend with enter.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It will validate once user click on save button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_14-1758884118579.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320433i35F61C1F60FFA47E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_14-1758884118579.png" alt="harsh_raj1_14-1758884118579.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I will pass incorrect value for&amp;nbsp;custoimerid.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;See what happen:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_15-1758884118580.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320435iD5879396589589F6/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_15-1758884118580.png" alt="harsh_raj1_15-1758884118580.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It is accepting while click on&amp;nbsp;enter.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It is giving error only after press save button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_16-1758884118581.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320434i0428B600F861A05E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_16-1758884118581.png" alt="harsh_raj1_16-1758884118581.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Even if&amp;nbsp;customerid&amp;nbsp;is mandatory field it will accept empty value when we hit enter&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It will validate only after click on save button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_17-1758884118582.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320436i5EB8BCB53BA79A5D/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_17-1758884118582.png" alt="harsh_raj1_17-1758884118582.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_18-1758884118583.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320439i737C56412366A804/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_18-1758884118583.png" alt="harsh_raj1_18-1758884118583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;For Booking Supplement&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here am not passing any value and if we click on save button validation will be&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Trigger and throw&amp;nbsp;a&amp;nbsp;error message as Enter a&amp;nbsp;ProductID.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_19-1758884118584.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320438iDF194310794B3A8E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_19-1758884118584.png" alt="harsh_raj1_19-1758884118584.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_20-1758884118585.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320437iDDAFCD19F0616B34/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_20-1758884118585.png" alt="harsh_raj1_20-1758884118585.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If&amp;nbsp;ProductID&amp;nbsp;it is wrong, it will throw error message as&amp;nbsp;ProductID&amp;nbsp;is unknown.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_21-1758884118586.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320442iC7CCFBC722AD47B9/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_21-1758884118586.png" alt="harsh_raj1_21-1758884118586.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_22-1758884118586.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320440i72F821F6D1A40646/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_22-1758884118586.png" alt="harsh_raj1_22-1758884118586.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Things needs to define:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In behavior definition:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;field ( mandatory ) SupplementID;
  validation validateSupplement on save { create; field SupplementID; }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;In local handler class&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we need to link both parent and child as it is grandchild entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    READ ENTITIES OF zR_Travel_D1 IN LOCAL MODE
         ENTITY ZR_BookingSupplement_D1 BY \_Booking1
         FROM CORRESPONDING #( bookingsupplements )
         LINK DATA(booksuppl_booking_links).&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    READ ENTITIES OF zR_Travel_D1 IN LOCAL MODE
         ENTITY ZR_BookingSupplement_D1 BY \_Travel1
         FROM CORRESPONDING #( bookingsupplements )
         LINK DATA(booksuppl_travel_links).&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;            %path                 = VALUE #(
                zr_booking_d1-%tky = booksuppl_booking_links[ KEY id
                                                             source-%tky = &amp;lt;bookingsupplement&amp;gt;-%tky ]-target-%tky
                zR_Travel_D1-%tky  = booksuppl_travel_links[  KEY id
                                                            source-%tky = &amp;lt;bookingsupplement&amp;gt;-%tky ]-target-%tky )
            %element-SupplementID = if_abap_behv=&amp;gt;mk-on )
               TO reported-zr_bookingsupplement_d1.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;These highlighted lines such as path are different from travel and booking entity as this is a type&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Of grandchild entity. So we have to link with both entity parent such as travel and child such as booking.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;            %path               = VALUE #(
                zR_Travel_D1-%tky = travel_booking_links[ KEY id
                                                          source-%tky = booking-%tky ]-target-%tky )
            %element-CustomerID = if_abap_behv=&amp;gt;mk-on )
               TO reported-zr_booking_d1.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-cloud-blog-posts/validation-in-draft-with-state-messages-in-rap/ba-p/14228996"/>
    <published>2025-10-03T16:34:11.013000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-excel-upload-through-custom-action-popup-no-ui5-extension-no/ba-p/14234872</id>
    <title>ABAP RAP : Excel upload through custom action popup ( No UI5 Extension , No Object Page workaround )</title>
    <updated>2025-10-05T00:52:51.623000+02:00</updated>
    <author>
      <name>Ramjee_korada</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/10276</uri>
    </author>
    <content>&lt;P&gt;A frequent business requirement involves enabling mass changes to business objects via&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Excel uploads&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;executed through a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;custom action popup&lt;/STRONG&gt;. Historically, achieving this functionality has necessitated various workarounds, often involving&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI5 extensions&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;third-party solutions&lt;/STRONG&gt;, or&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Object Page manipulations&lt;/STRONG&gt;, all of which present specific implementation challenges.&lt;/P&gt;&lt;P&gt;The existing workaround approaches present several drawbacks:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Custom UI Extensions:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Require specialized&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI5 development expertise&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Third-Party Solutions:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Introduce risks related to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;licensing compliance&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and potential&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;security vulnerabilities&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Object Page Manipulations:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Involve complex, multi-step processes, such as creating a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;dummy object page&lt;/STRONG&gt;, facilitating file upload, temporarily&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;storing the file data in a table field&lt;/STRONG&gt;, and requiring a final user action (a button press) to initiate processing. This temporary data storage is often&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;unnecessary&lt;/STRONG&gt;, complicating the data model.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;However, SAP has recently introduced&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ABAP / CAP annotations&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that offer a cloud-ready solution, potentially&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;eliminating approximately 95% of the development effort&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;typically associated with integrating an Excel upload into the backend. This innovation allows developers to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;prioritize implementing core business logic&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;over developing reusable technical artifacts.&lt;/P&gt;&lt;P&gt;I will now detail the implementation steps.&lt;/P&gt;&lt;P&gt;A business requirement to manage &lt;STRONG&gt;mass processing listings for a library&lt;/STRONG&gt; was selected to demonstrate this use case. The implementation requires several steps, with steps 3 through 6 being the &lt;STRONG&gt;special or additional configurations&lt;/STRONG&gt; needed, while all others are considered routine.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_0-1759618459647.png" style="width: 691px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322875i27F4B6363B99B5FA/image-dimensions/691x376/is-moderation-mode/true?v=v2" width="691" height="376" role="button" title="Ramjee_korada_0-1759618459647.png" alt="Ramjee_korada_0-1759618459647.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1890964802"&gt;Implementation Steps&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;A database table for the &lt;STRONG&gt;listing entity&lt;/STRONG&gt; is created. This involves fields such as &lt;CODE&gt;Id&lt;/CODE&gt;, &lt;CODE&gt;Title&lt;/CODE&gt;, &lt;CODE&gt;Type&lt;/CODE&gt;, and &lt;CODE&gt;Author&lt;/CODE&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Library Listings'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zrk_lib_listings {

  key client            : abap.clnt not null;
  key listing_uuid      : sysuuid_x16 not null;
  id                    : abap.numc(10);
  title                 : abap.char(40);
  type                  : abap.char(5);
  author                : abap.char(40);
  publisher_studio      : abap.char(40);
  isbn_ean              : abap.char(40);
  language_code         : abap.lang;
  publication_year      : abap.numc(4);
  description           : abap.char(40);
  totalcopies           : abap.int2;
  available_copies      : abap.int2;
  location_shelf_id     : abap.char(40);
  lending_duration_days : abap.int2;
  status                : abap.char(40);
  cover_image_url       : abap.char(100);
  local_created_by      : abp_creation_user;
  local_created_at      : abp_creation_tstmpl;
  local_last_changed_by : abp_locinst_lastchange_user;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
  last_changed_at       : abp_lastchange_tstmpl;

}â€‹&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;2.&amp;nbsp;A &lt;STRONG&gt;RAP Business Object (BO)&lt;/STRONG&gt;&lt;SPAN&gt; is generated, followed by the requisite &lt;/SPAN&gt;&lt;STRONG&gt;UI artifacts&lt;/STRONG&gt;&lt;SPAN&gt;. The specific RAP BO scenario (Managed, Unmanaged, Draft, or Non-Draft) is noted as not influencing the core Excel upload use case. The &lt;/SPAN&gt;&lt;STRONG&gt;RAP Generator is used&lt;/STRONG&gt;&lt;SPAN&gt;&lt;SPAN&gt; to simplify the demonstration.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_0-1759617725687.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322874iBDE9FF5181449404/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Ramjee_korada_0-1759617725687.png" alt="Ramjee_korada_0-1759617725687.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3. A &lt;STRONG&gt;root&amp;nbsp;abstract entity&lt;/STRONG&gt; is created for the file to be uploaded. (This entity is highly reusable and can be applied across different RAP BOs).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abs. Entity For Attachment'
define root abstract entity ZRK_D_FILE_STREAM
{
  @Semantics.largeObject.mimeType: 'MimeType'
  @Semantics.largeObject.fileName: 'FileName'
  @Semantics.largeObject.contentDispositionPreference: #INLINE
  @EndUserText.label: 'Select Excel file'
  StreamProperty : abap.rawstring(0);
  
  .hidden: true
  MimeType : abap.char(128);
  
  .hidden: true
  FileName : abap.char(128);   
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4. The &lt;STRONG&gt;abstract behavior definition&lt;/STRONG&gt; for the file entity is implemented.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;abstract;
strict(2);
with hierarchy;
define behavior for ZRK_D_FILE_STREAM {
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;5. A second &lt;STRONG&gt;abstract entity is created&lt;/STRONG&gt; to serve as an action parameter. This entity includes an association to the file abstract entity (from Step 3).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Action Param for Uploading Excel'
define root abstract entity ZRK_D_UPLOAD_EXCEL
{
// Dummy is a dummy field
@UI.hidden: true
dummy : abap_boolean;
     _StreamProperties : association [1] to ZRK_D_FILE_STREAM on 1 = 1;
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;6. The &lt;STRONG&gt;abstract behavior definition&lt;/STRONG&gt; for the action parameter is implemented, including the association to the earlier entity.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;abstract;
strict ( 2 );
with hierarchy;
define behavior for ZRK_D_UPLOAD_EXCEL //alias &amp;lt;alias_name&amp;gt;
{
association _StreamProperties with hierarchy;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7. An &lt;STRONG&gt;action is defined&lt;/STRONG&gt; on the RAP BO Behavior definition, with the parameter specified in Step 5.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  static action ExcelUpload deep parameter ZRK_D_UPLOAD_EXCEL ;&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class ZRK_BP_R_LIB_LISTINGS unique;
strict ( 2 );
with draft;
extensible;
define behavior for ZRK_R_LIB_LISTINGS alias Listings
persistent table ZRK_LIB_LISTINGS
extensible
draft table ZRK_LIB_LSTNGS_D
etag master LocalLastChangedAt
lock master total etag LastChangedAt
authorization master( global )
{
  field ( readonly )
   ListingUUID,
   LocalCreatedBy,
   LocalCreatedAt,
   LocalLastChangedBy,
   LocalLastChangedAt,
   LastChangedAt;

  field ( numbering : managed )
   ListingUUID;


  create;
  update;
  delete;

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare;

  static action ExcelUpload deep parameter ZRK_D_UPLOAD_EXCEL ;

  mapping for ZRK_LIB_LISTINGS corresponding extensible
  {
    ListingUUID = listing_uuid;
    ID = id;
    Title = title;
    Type = type;
    Author = author;
    PublisherStudio = publisher_studio;
    IsbnEan = isbn_ean;
    LanguageCode = language_code;
    PublicationYear = publication_year;
    Description = description;
    Totalcopies = totalcopies;
    AvailableCopies = available_copies;
    LocationShelfID = location_shelf_id;
    LendingDurationDays = lending_duration_days;
    Status = status;
    CoverImageUrl = cover_image_url;
    LocalCreatedBy = local_created_by;
    LocalCreatedAt = local_created_at;
    LocalLastChangedBy = local_last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
    LastChangedAt = last_changed_at;
  }

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8. The &lt;STRONG&gt;business logic is implemented&lt;/STRONG&gt; to read the Excel content. A released API, XCO_CP_XLSX&amp;nbsp;&lt;FONT color="#000000"&gt;,&lt;/FONT&gt; is used for this demonstration.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; METHOD ExcelUpload.
    TYPES : BEGIN OF ty_sheet_data,
              id                  TYPE zrk_r_lib_listings-id,
              title               TYPE zrk_r_lib_listings-title,
              type                TYPE zrk_r_lib_listings-Type,
              author              TYPE zrk_r_lib_listings-author,
              PublisherStudio     TYPE zrk_r_lib_listings-PublisherStudio,
              IsbnEan             TYPE zrk_r_lib_listings-IsbnEan,
              LanguageCode        TYPE zrk_r_lib_listings-LanguageCode,
              PublicationYear     TYPE zrk_r_lib_listings-PublicationYear,
              description         TYPE zrk_r_lib_listings-Description,
              Totalcopies         TYPE zrk_r_lib_listings-Totalcopies,
              AvailableCopies     TYPE zrk_r_lib_listings-AvailableCopies,
              LocationShelfID     TYPE zrk_r_lib_listings-LocationShelfID,
              LendingDurationDays TYPE zrk_r_lib_listings-LendingDurationDays,
              status              TYPE zrk_r_lib_listings-Status,
            END OF ty_sheet_data.

    DATA lv_file_content   TYPE xstring.
    DATA lt_sheet_data     TYPE STANDARD TABLE OF ty_sheet_data.
    DATA lt_listing_create TYPE TABLE FOR CREATE zrk_r_lib_listings.

    lv_file_content = VALUE #( keys[ 1 ]-%param-_streamproperties-StreamProperty OPTIONAL ).

    " Error handling in case file content is initial

    DATA(lo_document) = xco_cp_xlsx=&amp;gt;document-&amp;gt;for_file_content( lv_file_content )-&amp;gt;read_access( ).

    DATA(lo_worksheet) = lo_document-&amp;gt;get_workbook( )-&amp;gt;worksheet-&amp;gt;at_position( 1 ).

    DATA(o_sel_pattern) = xco_cp_xlsx_selection=&amp;gt;pattern_builder-&amp;gt;simple_from_to(
      )-&amp;gt;from_column( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_alphabetic_value( 'A' )  " Start reading from Column A
      )-&amp;gt;to_column( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_alphabetic_value( 'N' )   " End reading at Column N
      )-&amp;gt;from_row( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_numeric_value( 2 )    " *** Start reading from ROW 2 to skip the header ***
      )-&amp;gt;get_pattern( ).

    lo_worksheet-&amp;gt;select( o_sel_pattern
                                     )-&amp;gt;row_stream(
                                     )-&amp;gt;operation-&amp;gt;write_to( REF #( lt_sheet_data )
                                     )-&amp;gt;set_value_transformation(
                                         xco_cp_xlsx_read_access=&amp;gt;value_transformation-&amp;gt;string_value
                                     )-&amp;gt;execute( ).

    lt_listing_create = CORRESPONDING #( lt_sheet_data ).

    MODIFY ENTITIES OF zrk_r_lib_listings IN LOCAL MODE
           ENTITY Listings
           CREATE AUTO FILL CID FIELDS ( Id Title Type author PublisherStudio IsbnEan LanguageCode PublicationYear description Totalcopies AvailableCopies LocationShelfID LendingDurationDays status )
           WITH lt_listing_create
           " TODO: variable is assigned but never used (ABAP cleaner)
           MAPPED DATA(lt_mapped)
           " TODO: variable is assigned but never used (ABAP cleaner)
           REPORTED DATA(lt_reported)
           " TODO: variable is assigned but never used (ABAP cleaner)
           FAILED DATA(lt_failed).

    " Communicate the messages to UI - not in scope of this demo
    IF lt_failed IS INITIAL.
      APPEND VALUE #( %msg = new_message_with_text( severity = if_abap_behv_message=&amp;gt;severity-success
                                                    text     = 'Listings have been uploaded - please refresh the list!!' ) )
             TO reported-listings.
    ENDIF.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9. The action is utilized on the &lt;STRONG&gt;projection behavior&lt;/STRONG&gt; and subsequently exposed in the &lt;STRONG&gt;metadata extension&lt;/STRONG&gt;.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  use action ExcelUpload;&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection implementation in class ZRK_BP_C_LIB_LISTINGS unique;
strict ( 2 );
extensible;
use draft;
use side effects;
define behavior for ZRK_C_LIB_LISTINGS alias Listings
extensible
use etag
{
  use create;
  use update;
  use delete;

  use action Edit;
  use action Activate;
  use action Discard;
  use action Resume;
  use action Prepare;

  use action ExcelUpload;

}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;.lineItem: [{ type:#FOR_ACTION , dataAction: 'ExcelUpload' , label: 'Upload Excel' }]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;10. The &lt;STRONG&gt;service binding is published&lt;/STRONG&gt;, and the application is then ready for execution.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_2-1759616768674.png" style="width: 739px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322868iF1985AA5BDD03A2A/image-dimensions/739x181/is-moderation-mode/true?v=v2" width="739" height="181" role="button" title="Ramjee_korada_2-1759616768674.png" alt="Ramjee_korada_2-1759616768674.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_3-1759616871331.png" style="width: 721px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322869i040F7DA1CC5515C5/image-dimensions/721x392/is-moderation-mode/true?v=v2" width="721" height="392" role="button" title="Ramjee_korada_3-1759616871331.png" alt="Ramjee_korada_3-1759616871331.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_4-1759616921974.png" style="width: 720px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322870i5364BBC5623F81B7/image-dimensions/720x117/is-moderation-mode/true?v=v2" width="720" height="117" role="button" title="Ramjee_korada_4-1759616921974.png" alt="Ramjee_korada_4-1759616921974.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_5-1759617464764.png" style="width: 743px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322872i185A7C14C9E33C7E/image-dimensions/743x390/is-moderation-mode/true?v=v2" width="743" height="390" role="button" title="Ramjee_korada_5-1759617464764.png" alt="Ramjee_korada_5-1759617464764.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_6-1759617503382.png" style="width: 736px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322873iF922947957F6C08B/image-dimensions/736x407/is-moderation-mode/true?v=v2" width="736" height="407" role="button" title="Ramjee_korada_6-1759617503382.png" alt="Ramjee_korada_6-1759617503382.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1694451297"&gt;Note:&lt;/H3&gt;&lt;P&gt;This feature is currently &lt;STRONG&gt;functional on the BTP ABAP Environment&lt;/STRONG&gt;. However, an issue appears to exist with metadata generation on &lt;STRONG&gt;S/4HANA 2023 On-Premise&lt;/STRONG&gt; deployments, even though the objects are syntactically correct. It is anticipated that this constraint will be addressed in the &lt;STRONG&gt;S/4HANA 2025 release&lt;/STRONG&gt;, making the full feature set available on the S/4HANA On-Premise version following a brief waiting period.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-excel-upload-through-custom-action-popup-no-ui5-extension-no/ba-p/14234872"/>
    <published>2025-10-05T00:52:51.623000+02:00</published>
  </entry>
</feed>
