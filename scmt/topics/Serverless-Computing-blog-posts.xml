<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/Serverless-Computing-blog-posts.xml</id>
  <title>SAP Community - Serverless Computing</title>
  <updated>2025-10-27T00:27:41.051223+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/Serverless Computing/pd-p/d8b91196-9b35-4926-b0a4-15c4ab809d8a" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>Serverless Computing blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/event-driven-architecture-now-available-for-sap-ecc-users/ba-p/13452636</id>
    <title>Event-driven architecture – now available for SAP ECC users</title>
    <updated>2020-07-01T10:30:19+02:00</updated>
    <author>
      <name>martin_bachmann</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/182107</uri>
    </author>
    <content>&lt;H2 id="toc-hId-933422122"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
&lt;A href="https://en.wikipedia.org/wiki/Event-driven_architecture" target="_blank" rel="nofollow noopener noreferrer"&gt;Wikipedia&lt;/A&gt; defines an event as a “significant change in state”. If for example a Material Master is being updated, other processes in other systems need to be informed. This whole journey of generating the event, channeling and processing is called Event-driven architecture (EDA).&lt;BR /&gt;
&lt;BR /&gt;
According to industry analysts, customers and user group feedback, event-driven architecture is already an important topic and will most likely become even more central in the future. As an example I still remember the last DSAG annual meeting in Mannheim (sitting in the keynote together with 1000nds of people…), listening to the great &lt;A href="https://www.youtube.com/watch?v=sJBJVXWzCQA" target="_blank" rel="nofollow noopener noreferrer"&gt;Keynote&lt;/A&gt; from Steffen Pietsch (in German only, from 0:32:00 on).&lt;BR /&gt;
&lt;H2 id="toc-hId-736908617"&gt;Event-driven architecture with SAP&lt;/H2&gt;&lt;BR /&gt;
In the last couple of years, SAP has put a lot of effort into providing holistic support for EDA, just to mention a few highlights:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Enabled Backend Systems&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;S/4HANA Enterprise Events&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/810dfd34f2cc4f39aa8d946b5204fd9c/1909.001/en-US/c200f98fadb64ff1828ed5696c86fca2.html" target="_blank" rel="noopener noreferrer"&gt;On Premise&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/a630d57fc5004c6383e7a81efee7a8bb/2005.500/en-US/56cf82e75f2a42de827b5dc30e48db64.html" target="_blank" rel="noopener noreferrer"&gt;Cloud&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2019/01/17/sap-cloud-platform-enterprise-messaging-as-an-eventbus-for-successfactors/" target="_blank" rel="noopener noreferrer"&gt;SAP SuccessFactors&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://api.sap.com/package/SAPSubscriptionBillingBusinessEvents?section=Artifacts" target="_blank" rel="noopener noreferrer"&gt;SAP Subscription Billing&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2019/07/04/how-to-connect-sap-cloud-platform-enterprise-messaging-to-sap-marketing-cloud/" target="_blank" rel="noopener noreferrer"&gt;SAP Marketing Cloud&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Central Event Bus&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/product/SAP_ENTERPRISE_MESSAGING/Cloud/en-US" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Platform Enterprise Messaging&lt;/A&gt; as the central Event-Bus&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/368c481cd6954bdfa5d0435479fd4eaf/Cloud/en-US/5cc1a71231cb4cbfbfedb0cdc63e1488.html" target="_blank" rel="noopener noreferrer"&gt;AMQP Adapter for SAP Cloud Platform Integration&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://api.sap.com/themes/Events" target="_blank" rel="noopener noreferrer"&gt;SAP API Business Hub&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Connected Systems&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;AMQP or Cloud Events Trigger at Cloud Functions inside the&lt;A href="https://help.sap.com/viewer/bf7b2ff68518427c85b30ac3184ad215/Cloud/en-US/9e0b187eb42941e6949a5b9e37102683.html" target="_blank" rel="noopener noreferrer"&gt; SAP Cloud Platform Extension Factory, serverless runtime&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2020/03/03/sap-cloud-application-programming-model-and-enterprise-messaging-1-intro/" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Application Programming Model&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
One missing – but important – stakeholder was the group of the SAP ECC customers. To let this group also participate on event-driven architecture we just released the ABAP Add-On&amp;nbsp;&lt;STRONG&gt;SAP NetWeaver, add-on for event enablement&lt;/STRONG&gt;. This Add-On works as an SDK, customers will be able to enable objects with just a few clicks, generating their own content (events). Of course the events generated in an SAP ECC System will follow the same standard (&lt;A href="https://cloudevents.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://cloudevents.io/&lt;/A&gt;) as events coming from an S/4HANA System.&lt;BR /&gt;
&lt;H2 id="toc-hId-540395112"&gt;What is the benefit, especially for SAP ECC customers?&lt;/H2&gt;&lt;BR /&gt;
Event-driven architecture in general is offering a lot of advantages like decoupling or the avoiding of polling. With this new Add-On, SAP ECC customers particularly, will be able to leverage SAP Cloud Platform as an extension platform even more – as now the event-centric pattern is also supported in addition to REST / OData via SAP Gateway. In combination with SAP S/4HANA this will open up some great new opportunities:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;In order to serialize activities during the SAP S/4HANA Migration, it is now easier to port existing event-driven extensions from SAP ECC to SAP Cloud Platform. A guide on the general topic of side-by-side extensions is available &lt;A href="https://www.sap.com/documents/2020/03/ceeea71f-8a7d-0010-87a3-c30de2ffd8ff.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This will bring back your SAP ECC System closer to the standard – and this will then reduce complexity during the migration to SAP S/4HANA&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;As SAP S/4HANA already supports events, the switch to SAP S/4HANA will be easy – if you already designed the cloud extension with the SAP S/4HANA Events and OData services accordingly.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Several missions are available showing in more detail on how to extend an S/4HANA System based on event-driven architecture (e.g &lt;A href="https://discovery-center.cloud.sap/#/missiondetail/3156/3192" target="_blank" rel="nofollow noopener noreferrer"&gt;https://discovery-center.cloud.sap/#/missiondetail/3156/3192&lt;/A&gt;). We are currently working on the same scenario – only using an SAP ECC system instead of an S/4HANA system.&lt;BR /&gt;
&lt;H2 id="toc-hId-343881607"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
The Add-On &lt;STRONG&gt;SAP NetWeaver, add-on for event enablement&lt;/STRONG&gt; (ASANWEE) is available for NetWeaver 7.31 and higher (&lt;A href="https://help.sap.com/viewer/e966e6c0e61443ebaa0270a4bae4b363/1.0/en-US/3eba827c531344eb879d8e35022d90ba.html" target="_blank" rel="noopener noreferrer"&gt;Documentation&lt;/A&gt;) and is based on an ABAP Add-On from the partner company ASAPIO (&lt;A href="https://www.asapio.com/en/index.html" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.asapio.com/en/index.html&lt;/A&gt;), but adapted for the usage with the SAP Cloud Platform.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;2020 - Dec 22nd - Update:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Mission now available:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="margin: 0mm;margin-bottom: .0001pt"&gt;Public Mission Board link: &lt;A href="https://discovery-center.cloud.sap/missiondetail/3338/3384" target="_blank" rel="nofollow noopener noreferrer"&gt;https://discovery-center.cloud.sap/missiondetail/3338/3384&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="margin: 0mm;margin-bottom: .0001pt"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="margin: 0mm;margin-bottom: .0001pt"&gt;Public Github link : &lt;A href="https://github.com/SAP-samples/cloud-extension-ecc-business-process/tree/mission/mission" target="_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/SAP-samples/cloud-extension-ecc-business-process/tree/mission/mission&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Mentioned at TechEd Keynote 2020: &lt;A href="https://youtu.be/wP0pL_Ps1dM?t=1195" target="_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/wP0pL_Ps1dM?t=1195&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;STRONG&gt;2021 - June 1st - Update&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;AddOn is now also available for S/4HANA&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2021/06/01/sap-netweaver-addon-for-event-enablement-now-also-released-for-s-4hana/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2021/06/01/sap-netweaver-addon-for-event-enablement-now-also-released-for-s-4hana/&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.sap.com/dmc/exp/2021-06-sapphireinnovation-news/sap-enhances-support-for-event-based-integration/" target="_blank" rel="noopener noreferrer"&gt;https://www.sap.com/dmc/exp/2021-06-sapphireinnovation-news/sap-enhances-support-for-event-based-integration/&amp;nbsp;&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/event-driven-architecture-now-available-for-sap-ecc-users/ba-p/13452636"/>
    <published>2020-07-01T10:30:19+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-5-top-secret/ba-p/13469715</id>
    <title>Writing Function-as-a-Service [5]: Top Secret</title>
    <updated>2020-07-07T13:37:43+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>With other words:&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;Secrets&lt;/STRONG&gt; and &lt;STRONG&gt;Config Maps&lt;/STRONG&gt;&lt;BR /&gt;
in&lt;BR /&gt;
&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
What's that?&lt;/P&gt;&lt;BR /&gt;
This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#projectfiles" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Code&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;So what about those Secrets and Config Maps?w&lt;/SPAN&gt;&lt;BR /&gt;
Short answer:&lt;BR /&gt;
To me, they look like simple property files&lt;BR /&gt;
&lt;BR /&gt;
Example:&lt;BR /&gt;
We want to write a function which needs to call a different REST endpoint&lt;BR /&gt;
We don’t want to hardcode the URL and credentials in the code&lt;BR /&gt;
So we're looking for a way to store such info outside the code, somehow in some property files&lt;BR /&gt;
In the &lt;STRONG&gt;server&lt;/STRONG&gt;&lt;SPAN style="font-size: smaller"&gt;-and-file-system-&lt;/SPAN&gt;&lt;STRONG&gt;less Function&lt;/STRONG&gt;&amp;nbsp;world, there’s a special mechanism to do so.&lt;BR /&gt;
&lt;BR /&gt;
In this blog, we’re going through a simple example.&lt;BR /&gt;
We're going to define a Secret and access it from within the code&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
This blog shows the usage of Extension Center, but everything can be done in your &lt;A href="https://blogs.sap.com/2020/06/24/writing-function-as-a-service-2-local-development" target="_blank" rel="noopener noreferrer"&gt;local&lt;/A&gt; dev environment as well&lt;BR /&gt;
&lt;H2 id="toc-hId-934555078"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
You should already be familiar with the Function-as-a-Service part of &lt;STRONG&gt;SAP Cloud Platform Extension Center, serverless runtime&lt;/STRONG&gt;&lt;BR /&gt;
Otherwise, see &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-738041573"&gt;Create Project&lt;/H2&gt;&lt;BR /&gt;
We can &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-1.1-first-function-using-extension-center/" target="_blank" rel="noopener noreferrer"&gt;create&lt;/A&gt; a new Extension (Functions project) or reuse an existing project&lt;BR /&gt;
&lt;BR /&gt;
In my example, using "Template with function":&lt;BR /&gt;
Extension name: &lt;EM&gt;topsecret&lt;/EM&gt;&lt;BR /&gt;
Runtime: &lt;EM&gt;nodejs10&lt;/EM&gt;&lt;BR /&gt;
Function name : &lt;EM&gt;secretfunction&lt;/EM&gt;&lt;BR /&gt;
HTTP trigger name : &lt;EM&gt;showsecret&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
After project creation, we want to define &lt;EM&gt;secret&lt;/EM&gt; and &lt;EM&gt;config map&lt;/EM&gt;.&lt;BR /&gt;
Currently, there’s no UI support, so we have to create files and folders and edit the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; manually&lt;BR /&gt;
&lt;H2 id="toc-hId-541528068"&gt;Define secret&lt;/H2&gt;&lt;BR /&gt;
First of all, we have to understand that a secret is a logical artifact, handled by the FaaS runtime&lt;BR /&gt;
A secret points to a folder, where a file is located (can be multiple)&lt;BR /&gt;
That file contains the secret information&lt;BR /&gt;
&lt;BR /&gt;
To me, a &lt;EM&gt;secret&lt;/EM&gt; is like a secret treasure map. It doesn’t contain the treasure itself, only the path&lt;BR /&gt;
The hidden treasure can be found there and it contains …. tasty cat food&lt;BR /&gt;
&lt;BR /&gt;
So let's create files and folders first&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
As usual, by choosing silly names, I’ve tried to make clear that you’re free to choose the file and folder names&lt;BR /&gt;
There’s only one exception:&lt;BR /&gt;
The “data” folder must have name as “data”&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Create Folder&lt;BR /&gt;
&lt;/SPAN&gt;To create a folder, select the &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;Code&lt;/SPAN&gt; folder, then press the create-folder symbol&lt;BR /&gt;
Enter folder name as &lt;STRONG&gt;data&lt;/STRONG&gt;&lt;BR /&gt;
Then click on the new &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;data&lt;/SPAN&gt; folder and create a subfolder called &lt;STRONG&gt;donotopenthisfolder&lt;BR /&gt;
&lt;/STRONG&gt;Click on folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;donotopenthisfolder&lt;/SPAN&gt; and press the file symbol&lt;BR /&gt;
Enter file name as &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;hiddensecret.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Enter secret values&lt;/SPAN&gt;&lt;BR /&gt;
Now open the file&amp;nbsp; &lt;SPAN style="font-family: Courier New"&gt;hiddensecret.json&lt;BR /&gt;
&lt;/SPAN&gt;Paste the following content:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "Max": {&lt;BR /&gt;
    "username": "max@maxmail.com",&lt;BR /&gt;
    "password": "max123"&lt;BR /&gt;
  },&lt;BR /&gt;
  "Joe": {&lt;BR /&gt;
    "username": "joe@joemail.com",&lt;BR /&gt;
    "password": "joe123"&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
That’s not it&lt;BR /&gt;
I mean, we've only created a file with secret info.&lt;BR /&gt;
That's not THE &lt;EM&gt;secret &lt;/EM&gt;yet&lt;BR /&gt;
Although the file is located in&amp;nbsp;a folder which nobody would dare to open&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Make sure to press “Save And Deploy” from time to time&lt;BR /&gt;
&lt;H2 id="toc-hId-345014563"&gt;Define Config Map&lt;/H2&gt;&lt;BR /&gt;
A &lt;EM&gt;config map&lt;/EM&gt; is similar like a secret, but not so top secret.&lt;BR /&gt;
We use &lt;EM&gt;config maps&lt;/EM&gt; to store any configuration info which we don’t want to hardcode in the javascript module&lt;BR /&gt;
Again, a config map is a file, located in a subfolder of the “data” folder&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Create folder&lt;/SPAN&gt;&lt;BR /&gt;
Select the folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;data&lt;/SPAN&gt; and create a subfolder with name &lt;STRONG&gt;cfg&lt;BR /&gt;
&lt;/STRONG&gt;Select the folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;cfg&lt;/SPAN&gt; and create a file with name &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;addressconfig.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Enter configuration values&lt;/SPAN&gt;&lt;BR /&gt;
Paste the following content which contains an example for possible REST endpoint URLs&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "dev": {&lt;BR /&gt;
    "user": "Max",&lt;BR /&gt;
    "url": "http://maxservice/endpoint"&lt;BR /&gt;
  },&lt;BR /&gt;
  "prod": {&lt;BR /&gt;
    "user": "Joe",&lt;BR /&gt;
    "url": "http://joeservice/endpoint"&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Create another folder&lt;/SPAN&gt;&lt;BR /&gt;
Select the folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;cfg&lt;/SPAN&gt; and create a file with name &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;addresstext.de&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Enter configuration value&lt;/SPAN&gt;&lt;BR /&gt;
This file contains an example for plain text in German language:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;Guten Morgen&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
Finally, our FaaS project should look like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/projectStructure.jpg" height="226" width="196" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-148501058"&gt;Now really define Secret and Config Map&lt;/H2&gt;&lt;BR /&gt;
Up to now we’ve only created files.&lt;BR /&gt;
Now we need to declare them in the manifest file, such that the FaaS runtime can take care of them&lt;BR /&gt;
So now we really DEFINE the secret and config maps&lt;BR /&gt;
&lt;BR /&gt;
We open &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;BR /&gt;
&lt;/SPAN&gt;Since we’ve used the template to create the extension project, the file initially would look like this:&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/faasjson1.jpg" height="267" width="377" /&gt;&lt;/P&gt;&lt;BR /&gt;
We can see the elements which sound promising: “secrets” and “configs”&lt;BR /&gt;
And we can see that the secrets are defined and where they are referenced:&lt;BR /&gt;
A function has to declare which secret and config it wants to use&lt;BR /&gt;
&lt;BR /&gt;
So now we can go ahead and enter the declarations and usages&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/faasjson2.jpg" height="209" width="392" /&gt;&lt;/P&gt;&lt;BR /&gt;
As mentioned, a &lt;EM&gt;secret&lt;/EM&gt; is a logical artifact which is defined as an entry in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
To make it less logical and more physical, it has the &lt;SPAN style="font-family: Courier New"&gt;source&lt;/SPAN&gt; property which points to a directory.&lt;BR /&gt;
It is the directory which contains the files with configuration info&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"secrets": {&lt;BR /&gt;
  "mysecret": {&lt;BR /&gt;
    "source": "./data/donotopenthisfolder"&lt;BR /&gt;
  }&lt;BR /&gt;
},&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And the secret has a name of our choice, such that it can be referenced.&lt;BR /&gt;
&lt;BR /&gt;
BTW, same procedure with &lt;EM&gt;config&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Next step:&lt;BR /&gt;
If we want to access secret info from the implementation of our function, we need to explicitly reference it.&lt;BR /&gt;
To reference a secret, we just write the name in an array (can reference multiple secrets)&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"functions": {&lt;BR /&gt;
   "secretfunction": {&lt;BR /&gt;
      "secrets": ["mysecret"],&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Finally, the full &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; looks as follows&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"project": "topsecret",&lt;BR /&gt;
	"version": "0.0.1",&lt;BR /&gt;
	"runtime": "nodejs10",&lt;BR /&gt;
	"library": "./lib",&lt;BR /&gt;
	"secrets": {&lt;BR /&gt;
        "mysecret": {&lt;BR /&gt;
          "source": "./data/donotopenthisfolder"&lt;BR /&gt;
        }&lt;BR /&gt;
	},&lt;BR /&gt;
	"configs": {&lt;BR /&gt;
        "myconfiguration": {&lt;BR /&gt;
          "source": "./data/cfg"&lt;BR /&gt;
        }&lt;BR /&gt;
	},&lt;BR /&gt;
	"functions": {&lt;BR /&gt;
		"secretfunction": {&lt;BR /&gt;
			"module": "index.js",&lt;BR /&gt;
			"handler": "handler",&lt;BR /&gt;
			"secrets": ["mysecret"],&lt;BR /&gt;
			"configs": ["myconfiguration"]&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"triggers": {&lt;BR /&gt;
		"showsecret": {&lt;BR /&gt;
			"type": "HTTP",&lt;BR /&gt;
			"function": "secretfunction"&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note: saveanddeploy&lt;BR /&gt;
&lt;H2 id="toc-hId--48012447"&gt;View the values&lt;/H2&gt;&lt;BR /&gt;
Now let’s explore what we’ve just defined&lt;BR /&gt;
In Extension Center, click on Form View, then “Secrets” tab and finally on the icon to view the details&lt;BR /&gt;
The content of the secret is visualized in a nice way:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/secretDetails.jpg" height="141" width="303" /&gt;&lt;/P&gt;&lt;BR /&gt;
The dialog is well aware that the value of a secret is secret&lt;BR /&gt;
Anyways, I still believe it looks like cat food in a treasure chest...&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/catfood.jpg" height="145" width="258" /&gt;&lt;/P&gt;&lt;BR /&gt;
Let’s also view the details of the config:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/configDetails.jpg" height="334" width="347" /&gt;&lt;/P&gt;&lt;BR /&gt;
We can see that we have 2 config maps and that one has json content and the second one has string content (german string, BTW)&lt;BR /&gt;
&lt;BR /&gt;
Note the terminology:&lt;BR /&gt;
The file name is the &lt;EM&gt;key&lt;/EM&gt;, the file content is the &lt;EM&gt;value&lt;/EM&gt;&lt;BR /&gt;
In fact, it is a (config) map with key and value&lt;BR /&gt;
We will need that later&lt;BR /&gt;
&lt;H2 id="toc-hId--244525952"&gt;Access secret and config in function code&lt;/H2&gt;&lt;BR /&gt;
We didn’t create the secret only for playing hide and seek&lt;BR /&gt;
We want to access it in the impementation and extract the value&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;How to do this?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
It is done with support of FaaS runtime, which offers a convenient API for it&lt;BR /&gt;
When the runtime invokes our handler function, it passes an object to us which contains all required info: the &lt;SPAN style="font-family: Courier New"&gt;context&lt;/SPAN&gt; object&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/contextParam.jpg" height="49" width="238" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;How to use it?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The convenience API offers access to the value of the &lt;EM&gt;secret&lt;/EM&gt;, based on the name of the &lt;EM&gt;secret&lt;/EM&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;context.getSecretValue...&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Furthermore, we can choose if we want the response as plain String or as JSON&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;context.getSecretValueJSON(…)&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Next, we have to pass the information about which secret we want to use&lt;BR /&gt;
Since there can be multiple secrets defined in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; and referenced by any function, we have to pass the &lt;EM&gt;secret&lt;/EM&gt; name as first param&lt;BR /&gt;
&lt;BR /&gt;
Remember that the secret basically is a folder, such that we also have to pass the file name as second param:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;context.getSecretValueJSON('mysecret', 'hiddensecret.json')&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
As a response we get a JSON object (depending on the API-method we’ve chosen)&lt;BR /&gt;
Example for node10 syntax:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const credentials = await context.getSecretValueJSON('mysecret', 'hiddensecret.json');&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The API overview can be found in the &lt;A href="https://help.sap.com/viewer/bf7b2ff68518427c85b30ac3184ad215/Cloud/en-US/8382ef0e89044fb8b294660ae2f2bb14.html" target="_blank" rel="noopener noreferrer"&gt;SAP Help Portal&lt;/A&gt;&lt;BR /&gt;
Example for the syntax&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;getSecretValueJSON(name, key)&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Explanation:&lt;BR /&gt;
As already explained, the&lt;BR /&gt;
“name” is the secret name (pointing to a folder)&lt;BR /&gt;
“key” is the file name&lt;BR /&gt;
&lt;BR /&gt;
Now we can open our function in the Code editor and replace the generated content with the following snippet:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = { &lt;BR /&gt;
	handler: async function (event, context) { &lt;BR /&gt;
        const credentials = await context.getSecretValueJSON('mysecret', 'hiddensecret.json');&lt;BR /&gt;
        const config = await context.getConfigValueJSON('myconfiguration', 'addressconfig.json')&lt;BR /&gt;
        const greeting = await context.getConfigValueString('myconfiguration', 'addresstext.de');&lt;BR /&gt;
    &lt;BR /&gt;
        const url = config.dev.url;&lt;BR /&gt;
        const user = credentials.Max.username&lt;BR /&gt;
        const pwd = credentials.Max.password&lt;BR /&gt;
        &lt;BR /&gt;
        console.log(`Calling URL: '${url}' with user '${user}' and password '${pwd}' and greeting '${greeting}'`)&lt;BR /&gt;
        return "Top Secret";&lt;BR /&gt;
	} &lt;BR /&gt;
 }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The example shows the usage of API for secret and configs and it shows how the different content is accessed: JSON and String&lt;BR /&gt;
The example assumes that we would use the info for sending a request to a REST endpoint…&lt;BR /&gt;
But we can skip that and just write the info to the log&lt;BR /&gt;
&lt;BR /&gt;
Note: saveanddeploy&lt;BR /&gt;
&lt;H2 id="toc-hId--441039457"&gt;Run&lt;/H2&gt;&lt;BR /&gt;
After paste and save and deploy, we can invoke the function with the generated HTTP trigger URL&lt;BR /&gt;
Our browser response contains just a silly text.&lt;BR /&gt;
Now we regret that we’ve written the info text to the log instead to the HTTTP response&lt;BR /&gt;
So we have to continue cligging digging for the treasure chest&lt;BR /&gt;
Finally we find it:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/logoutput.jpg" height="148" width="370" /&gt;&lt;/P&gt;&lt;BR /&gt;
What we see:&lt;BR /&gt;
The secret information was extracted from the secret and config maps&lt;BR /&gt;
Good job done nicely by the FaaS runtime&lt;BR /&gt;
Maybe we think that it wasn’t a good idea to write the sensitive info to the log – but who cares what is done in a simple example?&lt;BR /&gt;
We can also see that the runtime provides some info about the used environment, which is the nodejs runtime and the existing secrets and configs&lt;BR /&gt;
This is another convenient service for us&lt;BR /&gt;
&lt;H2 id="toc-hId--637552962"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
We've learned that secrets and config maps are elements in the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; which point to simple property files&lt;BR /&gt;
And we've learned how to access the content of such files from the implementation code&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--834066467"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
Create files and folders to store the desired config data&lt;BR /&gt;
Concrete: create "data" folder and another subfolder and store the files there&lt;BR /&gt;
&lt;BR /&gt;
Define the secret in the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;BR /&gt;
"secrets": {&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;"mysecret": {&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 40px"&gt;"source": "./data/donotopenthisfolder"&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;}&lt;/SPAN&gt;&lt;BR /&gt;
},&lt;BR /&gt;
&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Reference it from function in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;"secrets": ["mysecret"],&lt;/SPAN&gt;&lt;BR /&gt;
&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In code:&lt;BR /&gt;
Use helper methods to access the secret, and pass secret name and file name:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;context.getSecretValueJSON('mysecret', 'filename.json')&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="projectfiles" id="toc-hId--683325615"&gt;Appendix: All Sample Project Files&lt;/H2&gt;&lt;BR /&gt;
For your convenience, see here the project structure:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/projectStructure-1.jpg" height="193" width="168" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"project": "topsecret",&lt;BR /&gt;
	"version": "0.0.1",&lt;BR /&gt;
	"runtime": "nodejs10",&lt;BR /&gt;
	"library": "./lib",&lt;BR /&gt;
	"secrets": {&lt;BR /&gt;
        "mysecret": {&lt;BR /&gt;
          "source": "./data/donotopenthisfolder"&lt;BR /&gt;
        }&lt;BR /&gt;
	},&lt;BR /&gt;
	"configs": {&lt;BR /&gt;
        "myconfiguration": {&lt;BR /&gt;
          "source": "./data/cfg"&lt;BR /&gt;
        }&lt;BR /&gt;
	},&lt;BR /&gt;
	"functions": {&lt;BR /&gt;
		"secretfunction": {&lt;BR /&gt;
			"module": "index.js",&lt;BR /&gt;
			"handler": "handler",&lt;BR /&gt;
			"secrets": ["mysecret"],&lt;BR /&gt;
			"configs": ["myconfiguration"]&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"triggers": {&lt;BR /&gt;
		"showsecret": {&lt;BR /&gt;
			"type": "HTTP",&lt;BR /&gt;
			"function": "secretfunction"&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;index.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = { &lt;BR /&gt;
	handler: async function (event, context) { &lt;BR /&gt;
        const credentials = await context.getSecretValueJSON('mysecret', 'hiddensecret.json');&lt;BR /&gt;
        const config = await context.getConfigValueJSON('myconfiguration', 'addressconfig.json')&lt;BR /&gt;
        const greeting = await context.getConfigValueString('myconfiguration', 'addresstext.de');&lt;BR /&gt;
    &lt;BR /&gt;
        const url = config.dev.url;&lt;BR /&gt;
        const user = credentials.Max.username&lt;BR /&gt;
        const pwd = credentials.Max.password&lt;BR /&gt;
        &lt;BR /&gt;
        console.log(`Calling URL: '${url}' with user '${user}' and password '${pwd}' and greeting '${greeting}'`)&lt;BR /&gt;
        return "Top Secret";&lt;BR /&gt;
	} &lt;BR /&gt;
 }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--879839120"&gt;Appendix: The Hidden Secret&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/cat_hidden.jpg" height="416" width="234" /&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-5-top-secret/ba-p/13469715"/>
    <published>2020-07-07T13:37:43+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-6-values-yaml/ba-p/13474508</id>
    <title>Writing Function-as-a-Service [6]: values.yaml</title>
    <updated>2020-07-10T10:36:45+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;BR /&gt;
&lt;/STRONG&gt;Nice.&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
In the &lt;A href="https://blogs.sap.com/2020/07/07/writing-function-as-a-service-5-top-secret/" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt; we learned how to extract secret sensitive values from the code into some property files&lt;BR /&gt;
We defined &lt;EM&gt;secret&lt;/EM&gt; and &lt;EM&gt;config maps&lt;/EM&gt; to store the sensitive values&lt;BR /&gt;
Nice.&lt;BR /&gt;
But when the time has come to move from silly prototypes to productive projects, then we want… no: YOU want (because I continue with silly examples) to upload your project to GIT (or similar) and you don’t want to upload files with passwords etc&lt;BR /&gt;
&lt;BR /&gt;
FaaS has a solution for it: it supports values-files&lt;BR /&gt;
Nice.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;How does it work?&lt;BR /&gt;
&lt;/SPAN&gt;We extract the sensitive info from the “secret”-file into a values-file&lt;BR /&gt;
That values-file is not uploaded to GIT&lt;BR /&gt;
The “secret”-file (which is uploaded to GIT) contains placeholder instead of passwords&lt;BR /&gt;
During deployment, the placeholders are replaced by the values from the values-file&lt;BR /&gt;
That’s all.&lt;BR /&gt;
Nice.&lt;BR /&gt;
&lt;BR /&gt;
Now we only need to go through a silly example to learn how to do it&lt;BR /&gt;
Nice.&lt;BR /&gt;
&lt;BR /&gt;
Note that this tutorial is only possible for local development, such that it is a&lt;BR /&gt;
&lt;H2 id="toc-hId-935327694"&gt;Prerequisite&lt;/H2&gt;&lt;BR /&gt;
to go through the 2 local tutorials, to learn about &lt;A href="https://blogs.sap.com/2020/06/24/writing-function-as-a-service-2-local-development" target="_blank" rel="noopener noreferrer"&gt;xfsrt-cli&lt;/A&gt; and &lt;A href="https://blogs.sap.com/2020/06/29/writing-function-as-a-service-3-real-local-development/" target="_blank" rel="noopener noreferrer"&gt;faas-sdk&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Another prerequisite is the usual blabla that you have to be familiar, etc, so please don’t ask me “What is FaaS”, and instead go through some of my &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs" target="_blank" rel="noopener noreferrer"&gt;tutorials&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Although this tutorial is based on the &lt;A href="https://blogs.sap.com/2020/07/07/writing-function-as-a-service-5-top-secret/" target="_blank" rel="noopener noreferrer"&gt;previous&lt;/A&gt; one, you can skip that silly top-secret-blog and use your own project, as long as it has any secrets and configs&lt;BR /&gt;
&lt;H2 id="toc-hId-738814189"&gt;Create Project&lt;/H2&gt;&lt;BR /&gt;
Sorry for the wrong wording:&lt;BR /&gt;
we don’t create a project, we download the project which we created in previous blog, from Extension Center to our local file system&lt;BR /&gt;
We go to Extension Center, open our project and press the “download” button&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/download.jpg" height="86" width="427" /&gt;&lt;/P&gt;&lt;BR /&gt;
And extract the project to a location of our boring choice.&lt;BR /&gt;
The boring choice, like in my example: &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\topsecret&lt;/SPAN&gt;&lt;BR /&gt;
The project looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/projectStructure-2.jpg" height="192" width="174" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-542300684"&gt;Create values file&lt;/H2&gt;&lt;BR /&gt;
Correct wording.&lt;BR /&gt;
But not good.&lt;BR /&gt;
In fact, we don’t create that file:&lt;BR /&gt;
We let the &lt;STRONG&gt;faas-sdk&lt;/STRONG&gt; generate it&lt;BR /&gt;
&lt;BR /&gt;
On command line, we jump into the project folder, then execute the following command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;faas-sdk init-values -y ./_tmp/mydeployvalues.yaml&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The syntax:&lt;BR /&gt;
&lt;SPAN style="background-color: black;font-family: Courier New"&gt;&lt;SPAN style="color: #ffffff"&gt;faas-sdk init-values&lt;/SPAN&gt; &lt;SPAN style="color: #ffcc00"&gt;--deploy-values&lt;/SPAN&gt; &lt;SPAN style="color: #00ff00"&gt;&amp;lt;yourFilePath&amp;gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
We can use abbreviation -y&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
File extension (currently) must be &lt;SPAN style="font-family: Courier New"&gt;.yaml&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The command will generate the &lt;SPAN style="font-family: Courier New"&gt;.yaml&lt;/SPAN&gt; file with the given name in the specified folder.&lt;BR /&gt;
If you don’t specify a folder, then a folder with name “deploy” will be generated.&lt;BR /&gt;
&lt;BR /&gt;
In our example, the result looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/command.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
In our case, we get a warning.&lt;BR /&gt;
Reason: for a config map, we used a file extension which is unknown to the parser.&lt;BR /&gt;
It was skipped, but that doesn’t matter for us. it doesn’t contain sensitive information, so we don’t need to extract the content into the values-file&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;What has happened?&lt;BR /&gt;
&lt;/SPAN&gt;The &lt;SPAN style="font-family: Courier New"&gt;init-values&lt;/SPAN&gt; command parses the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; file and collects all secrets and configs which are declared there (also registered services).&lt;BR /&gt;
In addition, all files which are found are listed as keys with the file-content as values&lt;BR /&gt;
All is pulled out of the project and pushed into one values-file&lt;BR /&gt;
&lt;BR /&gt;
In our example, it looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/values-content.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
We can see the silly names which we had chosen in the previous blog for secret names and file names.&lt;BR /&gt;
We can see that the file content has been copied into this file, along with file names and secret names&lt;BR /&gt;
&lt;H2 id="toc-hId-345787179"&gt;Replace the values&lt;/H2&gt;&lt;BR /&gt;
The title of this chapter could also be replaced by:&lt;BR /&gt;
“Extract the values”&lt;BR /&gt;
Or&lt;BR /&gt;
“Move the sensitive content from all files of secrets and config maps to the new values-file”&lt;BR /&gt;
&lt;BR /&gt;
Anyways, the next step is to fill the generated values-file with the sensitive information&lt;BR /&gt;
&lt;BR /&gt;
In our case, it is already there.&lt;BR /&gt;
But if you start a project from scratch - in future - you might create the secrets with placeholders instead of passwords&lt;BR /&gt;
&lt;BR /&gt;
OK, in our example, we now have to delete all passwords etc from our secrets and configs&lt;BR /&gt;
&lt;BR /&gt;
We open &lt;SPAN style="font-family: Courier New"&gt;hiddensecret.json&lt;/SPAN&gt;, delete the values for "username" and "password" and replace them with anything silly that comes into our mind&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/values-placeholder.jpg" height="187" width="363" /&gt;&lt;/P&gt;&lt;BR /&gt;
Similar with file &lt;SPAN style="font-family: Courier New"&gt;addressconfig.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
That’s it&lt;BR /&gt;
&lt;H2 id="toc-hId-149273674"&gt;Deploy&lt;/H2&gt;&lt;BR /&gt;
This title is correct and good&lt;BR /&gt;
But before we deploy….&lt;BR /&gt;
Wrong: nothing needs to be done before deployment&lt;BR /&gt;
But &lt;EM&gt;when&lt;/EM&gt; we deploy, we have to tell the deployer where to find the values&lt;BR /&gt;
Because the deployer will replace the silly placeholders with the serious values.&lt;BR /&gt;
So we have to add&amp;nbsp;the &lt;SPAN style="font-family: Courier New"&gt;-y&lt;/SPAN&gt; flag to the deploy command (or &lt;SPAN style="font-family: Courier New"&gt;--deploy-values&lt;/SPAN&gt;)&lt;BR /&gt;
As such, in our example, the deploy command looks like this:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;xfsrt-cli faas project deploy -y ./_tmp/mydeployvalues.yaml&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The syntax:&lt;BR /&gt;
&lt;SPAN style="background-color: black;font-family: Courier New"&gt;&lt;SPAN style="color: #ffffff"&gt;xfsrt-cli faas project deploy&lt;/SPAN&gt; &lt;SPAN style="color: #ffcc00"&gt;--deploy-values&lt;/SPAN&gt; &lt;SPAN style="color: #00ff00"&gt;&amp;lt;yourFilePath&amp;gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
After deployment we call the function and check the log to verify if the values really have been replaced&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/log.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Looks as expected.&lt;BR /&gt;
Isn’t it a nice feature? Our placeholders are replaced with the real values during deployment&lt;BR /&gt;
&lt;BR /&gt;
If you don’t believe it and if you think it was just an illusion or a coincidence… try it with different values in the values-file&lt;BR /&gt;
&lt;H2 id="toc-hId--47239831"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
We’ve learned how to move sensitive information out of the secrets into a values file&lt;BR /&gt;
Reason: secrets are part of the dev project and need to be uploaded to GIT&lt;BR /&gt;
The values-file mechanism helps to keep sensitive information out of GIT&lt;BR /&gt;
The FaaS SDK supports with generation of the values-file&lt;BR /&gt;
The XFRST-CLI allows to deploy with values-files parameter&lt;BR /&gt;
The Extension Center does (currently) not offer any support here&lt;BR /&gt;
Nice.&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--243753336"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
Project: remove the passwords (etc) from secrets (etc), replace with placeholder&lt;BR /&gt;
Laptop: generate values-file with command (run in project root):&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;faas-sdk init-values -y ./mypath/mydeployvalues.yaml&lt;BR /&gt;
&lt;/SPAN&gt;FaaS: deploy the project with configured values-file&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project deploy -y ./mypath/mydeployvalues.yaml&lt;/SPAN&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-6-values-yaml/ba-p/13474508"/>
    <published>2020-07-10T10:36:45+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-7-how-to-use-platform-services/ba-p/13484087</id>
    <title>Writing Function-as-a-Service [7]: How to use Platform Services</title>
    <updated>2020-07-16T16:12:31+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#sampleproject" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Project&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
In a &lt;A href="https://blogs.sap.com/2020/07/07/writing-function-as-a-service-5-top-secret" target="_blank" rel="noopener noreferrer"&gt;previous blog&lt;/A&gt;, we had a little introduction into the usage of &lt;EM&gt;secrets&lt;/EM&gt; and &lt;EM&gt;config maps&lt;BR /&gt;
&lt;/EM&gt;Today, I’d like to go through an example which shows how to connect a function to a service running in &lt;EM&gt;SAP Cloud Platform, Cloud Foundry Environment&lt;BR /&gt;
&lt;/EM&gt;As an example, we’re going to use the &lt;EM&gt;Destination service&lt;/EM&gt; and call a configured destination&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Any useful purpose to do that?&lt;/SPAN&gt;&lt;BR /&gt;
Surprisingly: yes&lt;BR /&gt;
This example could be enhanced to a checktool which runs every night and checks if the destinations are still responding as expected&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Why useful?&lt;/SPAN&gt;&lt;BR /&gt;
It would help with troubleshooting &amp;nbsp;and early identify errors&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Indeed&lt;BR /&gt;
&lt;/SPAN&gt;Anyways, this sample can be modified to use any other platform service&lt;BR /&gt;
&lt;H2 id="toc-hId-936246657"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
To follow this tutorial, you should be familiar with FaaS (see &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series&lt;/A&gt;)&lt;BR /&gt;
The function code is based on &lt;EM&gt;Node.js&lt;/EM&gt;&lt;BR /&gt;
As usual, this tutorial can be followed in &lt;EM&gt;Extension Center&lt;/EM&gt; or with l&lt;A href="https://blogs.sap.com/2020/06/29/writing-function-as-a-service-3-real-local-development/" target="_blank" rel="noopener noreferrer"&gt;ocal dev&lt;/A&gt; environment&lt;BR /&gt;
&lt;H2 id="toc-hId-739733152"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Configure Destination in the cloud cockpit&lt;BR /&gt;
Create Destination Service Instance and Service Key&lt;BR /&gt;
Create Destination Configuration&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;OL start="2"&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create function which uses the destination&lt;BR /&gt;
Create Function Project with &lt;EM&gt;secret&lt;/EM&gt; and &lt;EM&gt;config map&lt;BR /&gt;
&lt;/EM&gt;Implement Function, calling destination service, using secret&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;OL start="3"&gt;&lt;BR /&gt;
 	&lt;LI&gt;Run the sample&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-543219647"&gt;1. Configure Destination in the cloud cockpit&lt;/H2&gt;&lt;BR /&gt;
In our example, we want to use destinations from our function.&lt;BR /&gt;
Destinations are usually used whenever a cloud app calls a URL of an external service.&lt;BR /&gt;
With destinations, we can avoid hardcoding URLs, it solves CORS issues and maintenance&lt;BR /&gt;
&lt;H3 id="toc-hId-475788861"&gt;1.1. Create Destination Service Instance&lt;/H3&gt;&lt;BR /&gt;
So the first step is to create a service instance of "Destination" service&lt;BR /&gt;
In your Space, go to Service Marketplace and search for the tile "Destination"&lt;BR /&gt;
If you don't find it, you might need to add "Entitlement" (see &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-0.1-preparation/#entitlements" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; for general description)&lt;BR /&gt;
When creating the service instance,&lt;BR /&gt;
no params are required&lt;BR /&gt;
and the name can be&amp;nbsp;&lt;EM&gt;destinationinstance&lt;/EM&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-279275356"&gt;1.2. Create Service Key&lt;/H3&gt;&lt;BR /&gt;
In the server-more world, we would deploy an app, with manifest, where we would define a binding to the service instance. Then, in the code, we access the service-credentials via env variables&lt;BR /&gt;
&lt;BR /&gt;
In the serverless world, we don't deploy an app, so we don't have binding and no env variables&lt;BR /&gt;
That's why we need to create a service key for the service instance.&lt;BR /&gt;
The service key provides us with same credentials which we would get with binding&lt;BR /&gt;
&lt;BR /&gt;
We click on the created instance name&lt;BR /&gt;
Then choose “Service Keys” in the left pane&lt;BR /&gt;
Finally we press “Create Service Key” and enter a name like &lt;EM&gt;skfordestination&lt;BR /&gt;
&lt;/EM&gt;Now we can view the content of the service key&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/dest_sk.jpg" height="153" width="366" /&gt;&lt;/P&gt;&lt;BR /&gt;
I’ve marked the relevant properties&lt;BR /&gt;
But for the moment, we leave it like it is&lt;BR /&gt;
We don't close the browser window, as we'll need the service key content later&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Why?&lt;/SPAN&gt;&lt;BR /&gt;
We need these credentials to call the destination programmatically&lt;BR /&gt;
&lt;H3 id="toc-hId-82761851"&gt;1.3. Create Destination Configuration&lt;/H3&gt;&lt;BR /&gt;
Until now we’ve only created a &lt;EM&gt;destination service&lt;/EM&gt; instance&lt;BR /&gt;
Yes, it was necessary, otherwise we couldn't read the &lt;EM&gt;destination configuration&lt;BR /&gt;
&lt;/EM&gt;Now we create a &lt;EM&gt;configuration&lt;/EM&gt; for a destination that should point to any URL&lt;BR /&gt;
&lt;BR /&gt;
In the cockpit, we need to go to our subaccount, then expand “Connectivity”, click on “Destinations” and press “New Destination”&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/dest_config-1.jpg" height="115" width="337" /&gt;&lt;/P&gt;&lt;BR /&gt;
We create a destination of our choice, it doesn’t matter which URL, we won’t really use it seriously.&lt;BR /&gt;
The screenshot shows an example&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/dest_config_details_wiki-1.jpg" height="173" width="343" /&gt;&lt;/P&gt;&lt;BR /&gt;
The above example points to an existing URL.&lt;BR /&gt;
It specifies user credentials which aren't required. Just as example for later usage in the code&lt;BR /&gt;
&lt;BR /&gt;
To illustrate the advantage of a destination:&lt;BR /&gt;
The admin can decide to change the host of the destination to a different country, for example, (or landscape upgrade), and our function code wouldn't need to be adapted&lt;BR /&gt;
&lt;H2 id="toc-hId--242834373"&gt;2. Create Function which uses the Destination&lt;/H2&gt;&lt;BR /&gt;
Nest step is to create a function which programmatically uses the destination&lt;BR /&gt;
&lt;H3 id="toc-hId--310265159"&gt;2.1. Create Project Artifacts&lt;/H3&gt;&lt;BR /&gt;
I assume that you're familiar with Function-as-a-Service in &lt;EM&gt;serverless runtime&lt;/EM&gt;, so let's only roughly go through the required steps&lt;BR /&gt;
Please refer to the &lt;A href="#sampleproject" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt; for the file content&lt;BR /&gt;
&lt;H4 id="toc-hId--377695945"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.1. Create Project&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
We create a project with name &lt;EM&gt;destichecker&lt;/EM&gt; and runtime &lt;EM&gt;nodejs10&lt;/EM&gt;&lt;BR /&gt;
Can be a project on local machine, or an "Extension" if you use the &lt;EM&gt;Extension Center&lt;/EM&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--574209450"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.2. Define Secret&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
We define a &lt;EM&gt;secret&lt;/EM&gt; (with name "destinationsecret") in the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;BR /&gt;
&lt;/SPAN&gt;We create &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;data&lt;/SPAN&gt; folder and &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;secrets&lt;/SPAN&gt; subfolder and create a file (with name &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;destsrv.json&lt;/SPAN&gt;) to carry the secret content&lt;BR /&gt;
In our example, the file content is the content of the service key&lt;BR /&gt;
As such, we go to our cloud cockpit and view the service key which we created above&lt;BR /&gt;
We can just copy the whole content (yes, everything, including all the stuff which we’re not interested in) and we paste it into the file for our secret&lt;BR /&gt;
And we save&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/secret_content-1.jpg" height="205" width="313" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--1268440050"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.3. Define Config Map&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
We define a &lt;EM&gt;config&lt;/EM&gt; in the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;BR /&gt;
&lt;/SPAN&gt;In the &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;data&lt;/SPAN&gt; folder, we create a file (&lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;destcfg.json&lt;/SPAN&gt;) to carry some configuration values&lt;BR /&gt;
In our example, we store the name(s) of the &lt;EM&gt;destination configuration(s)&lt;/EM&gt; created above&lt;BR /&gt;
Make sure to copy&amp;amp;paste the destination name correctly&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/config_content.jpg" height="170" width="312" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--1464953555"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.4. Create Function&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
In our &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, we define a function (e.g. "checkdestfun") with module and handler and reference to the secret and the config.&lt;BR /&gt;
We create the &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;lib&lt;/SPAN&gt; folder (because predefined in the generated faas manifest) and the javascript file (&lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;destichecker.js&lt;/SPAN&gt;)&lt;BR /&gt;
The javascript file contains the handler and some silly test code (for a first test)&lt;BR /&gt;
&lt;H4 id="toc-hId--1661467060"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.5. Define Trigger&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
To test our example, we create a HTTP trigger (with name "checkdest"), later we can create an additional timer trigger to let our function do its useful work on a regular basis&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Later?&lt;/SPAN&gt;&lt;BR /&gt;
Yes, but not in this blog&lt;BR /&gt;
&lt;H4 id="toc-hId--1857980565"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.1.6. Try the Function&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
After verifying that our &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; looks like the one in the &lt;A href="#sampleproject" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt;, we deploy our function project and invoke it with the HTTP trigger URL&lt;BR /&gt;
e.g.&lt;BR /&gt;
&lt;SPAN style="color: #0000ff"&gt;&lt;A href="https://123-faas-http.tenant.eu10.functions.xfs.cloud.sap/checkdest" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://123-faas-http.tenant.eu10.functions.xfs.cloud.sap/checkdest&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;
It should work as expected&lt;BR /&gt;
&lt;H3 id="toc-hId--1761091063"&gt;2.2. Implement Function&lt;/H3&gt;&lt;BR /&gt;
Now we come to the implementation part.&lt;BR /&gt;
This is about how to use the destination service programmatically.&lt;BR /&gt;
The code is not specific for serverless functions.&lt;BR /&gt;
The only difference is that we get the credentials - which are required to call the destination service - from the FaaS runtime instead of accessing the environment variables&lt;BR /&gt;
&lt;BR /&gt;
What our function should do:&lt;BR /&gt;
. Access the service credentials&lt;BR /&gt;
. Call the destination service to get the configured destinations&lt;BR /&gt;
. Afterwards, read the destination configuration to get the URL and authentication&lt;BR /&gt;
. Finally, execute the URL&lt;BR /&gt;
&lt;H4 id="toc-hId-2043959721"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.1. Access the Service Credentials&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
Above, we created a Service Key&lt;BR /&gt;
Then stored the content (JSON) in a &lt;EM&gt;secret&lt;/EM&gt;&lt;BR /&gt;
Now we use the API of the FaaS runtime to obtain the properties which we need from the service key:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const credentials = await context.getSecretValueJSON('destinationsecret', 'destsrv.json')&lt;BR /&gt;
&lt;BR /&gt;
const destSrvUrl = credentials.uri&lt;BR /&gt;
const oauthUrl = credentials.url&lt;BR /&gt;
const clientId = credentials.clientid&lt;BR /&gt;
const clientSecret = credentials.clientsecret&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Similar approach to get the destination name from the &lt;EM&gt;config map&lt;/EM&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1847446216"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.2. Call the Destination Service&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
The Destination Service itself is protected with OAuth.&lt;BR /&gt;
As such, we need 2 steps for calling the Destination Service:&lt;BR /&gt;
1. Fetch JWT token&lt;BR /&gt;
Here we need the info from the service key (clientid, clientsecret and oauthUrl)&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const _fetchJwtToken = async function(oauthUrl, oauthClient, oauthSecret) {&lt;BR /&gt;
...	&lt;BR /&gt;
   const options = {&lt;BR /&gt;
      host:  oauthUrl.replace('https://', ''),&lt;BR /&gt;
      path: '/oauth/token?grant_type=client_credentials&amp;amp;response_type=token',&lt;BR /&gt;
      headers: {&lt;BR /&gt;
         Authorization: "Basic " + Buffer.from(oauthClient + ':' + oauthSecret).toString("base64")&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
2. Call Destination Service&lt;BR /&gt;
Once we have the JWT token, we can use the Url from service key to call the service, and we use the destinationName which we had stored in a &lt;EM&gt;config map&lt;/EM&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const _readDestinationConfig = async function(destinationName, destUri, jwtToken){&lt;BR /&gt;
...	&lt;BR /&gt;
   const options = {&lt;BR /&gt;
      host:  destUri.replace('https://', ''),&lt;BR /&gt;
      path:  '/destination-configuration/v1/destinations/' + destinationName,&lt;BR /&gt;
      headers: {&lt;BR /&gt;
         Authorization: 'Bearer ' + jwtToken&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1650932711"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.3. Read Destination Configuration&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
The result of the call to the Destination Service is the destination configuration for the requested destination name&lt;BR /&gt;
In our Example, the destination configuration is simple.&lt;BR /&gt;
We need the URL and the authentication info&lt;BR /&gt;
We don't need to encode the user and password, this is done conveniently by the destination service&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;destiConfi.destinationConfiguration.URL &lt;BR /&gt;
destiConfi.authTokens[0].http_header.value&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1454419206"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.4. Call the target endpoint&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
Now we have all information we need to call the endpoint which is configured in the destination configuration&lt;BR /&gt;
Usually, in a destination configuration, we would extract only the variable part of a URL.&lt;BR /&gt;
Which usually would be the host.&lt;BR /&gt;
That's what we've done in our example&lt;BR /&gt;
As such, in the code, we have to append all stable segments to the URL which we obtained from the destination configuration.&lt;BR /&gt;
In our example, we call the info about "Cat" (hardcoded)&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const _callEndpoint = async function(url, auth){&lt;BR /&gt;
...&lt;BR /&gt;
   const options = {&lt;BR /&gt;
      host:  url.replace('https://', ''),&lt;BR /&gt;
      path:  '/Cat',&lt;BR /&gt;
      headers: {&lt;BR /&gt;
         Authorization: auth.http_header.value&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
See &lt;A href="#sampleproject" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt; for full file content&lt;BR /&gt;
&lt;H4 id="toc-hId-1257905701"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.5. Small Recap&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
In our function implementation, we want to call a target URL&lt;BR /&gt;
The full URL is not stored in our function project.&lt;BR /&gt;
We want to use a Destination&lt;BR /&gt;
To call the destination service, we use credentials which we had stored in a &lt;EM&gt;secret&lt;/EM&gt;&lt;BR /&gt;
First get a token&lt;BR /&gt;
Then use it to get the destination config&lt;BR /&gt;
Then read the config info to call the target endpoint&lt;BR /&gt;
&lt;H2 id="toc-hId-1816381901"&gt;3. Run the sample&lt;/H2&gt;&lt;BR /&gt;
So finally, we copy all the function code from the appendix.&lt;BR /&gt;
After deploy, we open the URL of our function and we get the expected result&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/result.jpg" height="169" width="494" /&gt;&lt;/P&gt;&lt;BR /&gt;
Of course, the next step would be to improve our checker:&lt;BR /&gt;
Refactor the code, use config map for destination name, support multiple/all destinations check, support control URL parameters, send JSON response, support timer trigger,store check results in servless BackendService&lt;BR /&gt;
etc&lt;BR /&gt;
However, no next steps in this blog nor in future blogs&lt;BR /&gt;
&lt;H2 id="toc-hId-1619868396"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
In this tutorial we've learned how to consume the destination service from a serverless function&lt;BR /&gt;
The sample code can easily be adapted to any other service of SAP Cloud Platform&lt;BR /&gt;
The essential learning was to copy a service key to the function project&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId-1423354891"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
To consume a service in a function we have to:&lt;BR /&gt;
- create service key for the service we want to use&lt;BR /&gt;
- copy the service key into a file in the FaaS project&lt;BR /&gt;
- define a &lt;EM&gt;secret&lt;/EM&gt; which points to that file&lt;BR /&gt;
- in the function code, access the &lt;EM&gt;secret&lt;/EM&gt;&lt;BR /&gt;
- use the credentials properties in order to call the cloud service&lt;BR /&gt;
&lt;H2 id="sampleproject" id="toc-hId-1226841386"&gt;All Sample Project Files&lt;/H2&gt;&lt;BR /&gt;
Project Structure&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/projectStructure-3.jpg" height="182" width="126" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "project": "destichecker",&lt;BR /&gt;
  "version": "0.0.1",&lt;BR /&gt;
&lt;BR /&gt;
  "runtime": "nodejs10",&lt;BR /&gt;
  "library": "./lib",&lt;BR /&gt;
&lt;BR /&gt;
  "secrets": {&lt;BR /&gt;
    "destinationsecret": {&lt;BR /&gt;
      "source": "./data/secrets"&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
  "configs": {&lt;BR /&gt;
    "destinationconfig": {&lt;BR /&gt;
      "source" : "./data"&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
  "functions": {&lt;BR /&gt;
    "checkdestfun": {&lt;BR /&gt;
      "module": "destichecker.js",&lt;BR /&gt;
      "handler": "doDestinationCheck",&lt;BR /&gt;
      "secrets": ["destinationsecret"],&lt;BR /&gt;
      "configs": ["destinationconfig"]&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
&lt;BR /&gt;
  "triggers": {&lt;BR /&gt;
    "checkdest": {&lt;BR /&gt;
      "type": "HTTP",&lt;BR /&gt;
      "function": "checkdestfun"&lt;BR /&gt;
    }&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;destsrv.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"uaadomain": "authentication.eu10.hana.ondemand.com",&lt;BR /&gt;
	"tenantmode": "dedicated",&lt;BR /&gt;
	"clientid": "sb-clone123!b22273|destination-xsappname!0000",&lt;BR /&gt;
	"instanceid": "34ea5555-bbbb-bbbb-9999-4444200bbbbb",&lt;BR /&gt;
	"verificationkey": "-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwThn6OO9kj0bchkOGkqYBnV1dQ3zU/xxxxxxx+5/yDZUc0IXXyIWPZD+XdL+0EogC3d4+fqyvg/BF/F0t2hKHWr/UTXE6zrGhBKaL0d8rKfYd6olGWigFd+3+24CKI14zWVxUBtC+P9Fhngc9DRzkXqhxOK/EKn0HzSgotf5duq6Tmk9DCNM4sLW4+ERc6xzrgbeEexakabvax/Az9WZ4qhwgw+fwIhKIC7WLwCEJaRsW4m7NKkv+++++LKYesuQ9SVAJ3EXV86RwdnH4uAv7lQHsKURPVAQBlranSqyQu0EXs2N9OlWTxe8SoKJnRcRF2KxWKs355FhpHpzqyZflO5l98+O8wOsFjGpL9d0ECAwEAAQ==-----END PUBLIC KEY-----",&lt;BR /&gt;
	"xsappname": "clone34ea5555b4ee4bbb9999db444444b888!b22222|destination-xsappname!b000",&lt;BR /&gt;
	"identityzone": "myzone",&lt;BR /&gt;
	"clientsecret": "c2D3E4F5G6A1B2C3D4E5=",&lt;BR /&gt;
	"tenantid": "628e9f87-e539-49fc-a54f-1a1a1a1a1a",&lt;BR /&gt;
	"uri": "https://destination-configuration.cfapps.eu10.hana.ondemand.com",&lt;BR /&gt;
	"url": "https://mysubaccount.authentication.eu10.hana.ondemand.com"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;destcfg.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"name": "dest_wiki_en"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;destichecker.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const https = require('https');&lt;BR /&gt;
&lt;BR /&gt;
// main entry&lt;BR /&gt;
const _doDestinationCheck = async function (event, context) {&lt;BR /&gt;
	&lt;BR /&gt;
	// we stored the desired destination name in a config map  &lt;BR /&gt;
    const config = await context.getConfigValueJSON('destinationconfig', 'destcfg.json')&lt;BR /&gt;
	const destinationName = config.name&lt;BR /&gt;
&lt;BR /&gt;
	// use faas API to get credentials stored in secret&lt;BR /&gt;
	const credentials = await context.getSecretValueJSON('destinationsecret', 'destsrv.json')&lt;BR /&gt;
	const destSrvUrl = credentials.uri&lt;BR /&gt;
	const oauthUrl = credentials.url&lt;BR /&gt;
	const clientId = credentials.clientid&lt;BR /&gt;
	const clientSecret = credentials.clientsecret&lt;BR /&gt;
	&lt;BR /&gt;
	// execute required steps to call the target URL&lt;BR /&gt;
	const jwtToken = await _fetchJwtToken(oauthUrl, clientId, clientSecret)&lt;BR /&gt;
	const destiConfi = await _readDestinationConfig(destinationName, destSrvUrl, jwtToken)&lt;BR /&gt;
	const result = await _callEndpoint(destiConfi.destinationConfiguration.URL, destiConfi.authTokens[0])&lt;BR /&gt;
	&lt;BR /&gt;
	return `Check Result:\n${result.message}`&lt;BR /&gt;
} &lt;BR /&gt;
&lt;BR /&gt;
// JWT token is required to call the Destination Service&lt;BR /&gt;
const _fetchJwtToken = async function(oauthUrl, oauthClient, oauthSecret) {&lt;BR /&gt;
	return new Promise ((resolve, reject) =&amp;gt; {&lt;BR /&gt;
	   	const options = {&lt;BR /&gt;
		  	host:  oauthUrl.replace('https://', ''),&lt;BR /&gt;
		  	path: '/oauth/token?grant_type=client_credentials&amp;amp;response_type=token',&lt;BR /&gt;
		  	headers: {&lt;BR /&gt;
			 	Authorization: "Basic " + Buffer.from(oauthClient + ':' + oauthSecret).toString("base64")&lt;BR /&gt;
		  	}&lt;BR /&gt;
	   	}&lt;BR /&gt;
	   	https.get(options, res =&amp;gt; {&lt;BR /&gt;
		  	res.setEncoding('utf8')&lt;BR /&gt;
		  	let response = ''&lt;BR /&gt;
		  	res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
				response += chunk&lt;BR /&gt;
			})&lt;BR /&gt;
			res.on('end', () =&amp;gt; {&lt;BR /&gt;
				try {&lt;BR /&gt;
					const responseAsJson = JSON.parse(response)&lt;BR /&gt;
					const jwtToken = responseAsJson.access_token            &lt;BR /&gt;
					if (!jwtToken) {&lt;BR /&gt;
						return reject(new Error('Error while fetching JWT token'))&lt;BR /&gt;
					}&lt;BR /&gt;
					resolve(jwtToken)&lt;BR /&gt;
				} catch (error) {&lt;BR /&gt;
					return reject(new Error('Error while fetching JWT token'))               &lt;BR /&gt;
				}&lt;BR /&gt;
			})&lt;BR /&gt;
		})&lt;BR /&gt;
	   .on("error", (error) =&amp;gt; {&lt;BR /&gt;
		  console.log("Error: " + error.message);&lt;BR /&gt;
		  return reject({error: error})&lt;BR /&gt;
	   });&lt;BR /&gt;
	})   &lt;BR /&gt;
 }&lt;BR /&gt;
 &lt;BR /&gt;
// Call Destination Service. Result will be an object with Destination Configuration info&lt;BR /&gt;
const _readDestinationConfig = async function(destinationName, destUri, jwtToken){&lt;BR /&gt;
	return new Promise((resolve, reject) =&amp;gt; {&lt;BR /&gt;
		const options = {&lt;BR /&gt;
			host:  destUri.replace('https://', ''),&lt;BR /&gt;
			path:  '/destination-configuration/v1/destinations/' + destinationName,&lt;BR /&gt;
			headers: {&lt;BR /&gt;
				Authorization: 'Bearer ' + jwtToken&lt;BR /&gt;
			}&lt;BR /&gt;
		}		&lt;BR /&gt;
		https.get(options, res =&amp;gt; {&lt;BR /&gt;
			res.setEncoding('utf8')&lt;BR /&gt;
			let response = ''&lt;BR /&gt;
			res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
			  	response += chunk&lt;BR /&gt;
			})   &lt;BR /&gt;
			res.on('end', () =&amp;gt; {&lt;BR /&gt;
			   	try {&lt;BR /&gt;
				  	const destInfo = JSON.parse(response);						&lt;BR /&gt;
				  	resolve(destInfo)&lt;BR /&gt;
			   	} catch (error) {&lt;BR /&gt;
				  	return reject(new Error('Error while parsing destination configuration'))               &lt;BR /&gt;
			   	}&lt;BR /&gt;
			})&lt;BR /&gt;
		})&lt;BR /&gt;
		.on("error", (error) =&amp;gt; {&lt;BR /&gt;
			console.log("Error while calling Destination Service : " + error.message);&lt;BR /&gt;
			return reject({error: error})&lt;BR /&gt;
		});		  &lt;BR /&gt;
	})&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// call the URL extracted from Destination Config. Manually append required URI segments&lt;BR /&gt;
const _callEndpoint = async function(url, auth){&lt;BR /&gt;
	return new Promise((resolve, reject) =&amp;gt; {&lt;BR /&gt;
		const options = {&lt;BR /&gt;
			host:  url.replace('https://', ''),&lt;BR /&gt;
			path:  '/wiki/Cat',&lt;BR /&gt;
			headers: {&lt;BR /&gt;
				Authorization: auth.http_header.value&lt;BR /&gt;
			}&lt;BR /&gt;
		}		&lt;BR /&gt;
		https.get(options, res =&amp;gt; {&lt;BR /&gt;
			const status = res.statusCode&lt;BR /&gt;
			if(status &amp;lt; 400){&lt;BR /&gt;
				resolve({message: `Successfully called destination with target URL: ${url}${res.req.path}`})&lt;BR /&gt;
			}else{&lt;BR /&gt;
				reject({error: {message: `Invalid Url: ${url} with status ${status}`}})&lt;BR /&gt;
			}&lt;BR /&gt;
		})&lt;BR /&gt;
		.on("error", (error) =&amp;gt; {&lt;BR /&gt;
			reject({error: error})&lt;BR /&gt;
		});		  &lt;BR /&gt;
	})&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// export the handler function with readable alias&lt;BR /&gt;
module.exports = {&lt;BR /&gt;
	doDestinationCheck : _doDestinationCheck&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-7-how-to-use-platform-services/ba-p/13484087"/>
    <published>2020-07-16T16:12:31+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-8-how-to-easily-use-platform-services/ba-p/13463926</id>
    <title>Writing Function-as-a-Service [8]: How to (easily) use Platform Services</title>
    <updated>2020-07-23T17:18:59+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>With other words:&lt;BR /&gt;
&lt;P style="text-align: center"&gt;How to write serverless function&lt;BR /&gt;
in&lt;BR /&gt;
&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
and using&lt;BR /&gt;
&lt;STRONG&gt;Service Registration&lt;BR /&gt;
&lt;/STRONG&gt;aka&lt;BR /&gt;
&lt;STRONG&gt;Credential Store&lt;/STRONG&gt;&lt;BR /&gt;
to reference&lt;BR /&gt;
Platform Services&lt;/P&gt;&lt;BR /&gt;
This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#localdev" target="_blank" rel="nofollow noopener noreferrer"&gt;Local development&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#sampleproject" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Project&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
The &lt;A href="https://blogs.sap.com/2020/07/16/writing-function-as-a-service-7-how-to-use-platform-services" target="_blank" rel="noopener noreferrer"&gt;previous blog&lt;/A&gt; was not good&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Why?&lt;/SPAN&gt;&lt;BR /&gt;
Too complicated&lt;BR /&gt;
The same can be achieved more easily using the &lt;EM&gt;Service Registration&lt;/EM&gt; feature offered by FaaS&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;What's this?&lt;BR /&gt;
&lt;/SPAN&gt;Let's see:&lt;BR /&gt;
&lt;BR /&gt;
In the previous blog,&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;we created a service instance and service key&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;we created a project&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;we created a file to store the service key&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;we created a secret pointing to the file&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
To facilitate using a service instance, FaaS offers a feature to register a service instance in FaaS&lt;BR /&gt;
This means that we don't need to create a secret anymore&lt;BR /&gt;
We just reference the registered service&lt;BR /&gt;
Furthermore, the service is registered globally in FaaS, making it available for all projects&lt;BR /&gt;
&lt;BR /&gt;
In this tutorial, we're going to learn how to use the service registration feature in the &lt;STRONG&gt;Extension Center&amp;nbsp;&lt;/STRONG&gt;but also how to achieve the same with the &lt;STRONG&gt;command line client&lt;/STRONG&gt; for local development&lt;BR /&gt;
&lt;BR /&gt;
As example, we're going to use the platform service &lt;STRONG&gt;Enterprise Messaging&lt;/STRONG&gt;, and we'll connect our function to it.&lt;BR /&gt;
Our scenario is:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Whenever a message is sent to Messaging,&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 50px"&gt;then our function will be triggered&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 80px"&gt;and it will do nothing&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-934378286"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Access to &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-0.1-preparation" target="_blank" rel="noopener noreferrer"&gt;FaaS&lt;/A&gt; which is currently only available in productive landscape&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Basic knowledge about &lt;A style="font-size: 1rem" href="https://nodejs.org/" target="_blank" rel="noopener noreferrer nofollow"&gt;Node.js&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Access to &lt;A style="font-size: 1rem" href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-1.1-first-function-using-extension-center" target="_blank" rel="noopener noreferrer"&gt;Extension Center&lt;/A&gt;&lt;SPAN style="font-size: 1rem"&gt; is &lt;/SPAN&gt;&lt;SPAN style="text-decoration: underline"&gt;not&lt;/SPAN&gt;&lt;SPAN style="font-size: 1rem"&gt; required, everything can be done with local dev environment&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;To follow this tutorial, it is necessary to be able to use &lt;A style="font-size: 1rem" href="https://help.sap.com/viewer/bf82e6b26456494cbdd197057c09979f/Cloud/en-US/df532e8735eb4322b00bfc7e42f84e8d.html" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Platform Enterprise Messaging&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-737864781"&gt;Preparation&lt;/H2&gt;&lt;BR /&gt;
In this tutorial, we want to learn how to register a service instance.&lt;BR /&gt;
As such, the first step is to create such instance&lt;BR /&gt;
A nice side-effect: we learn how to connect FaaS to Enterprise Messaging&lt;BR /&gt;
&lt;BR /&gt;
If you aren't familiar at all with messaging, you can have a look in a rough description I wrote &lt;A href="https://blogs.sap.com/2020/03/03/sap-cloud-application-programming-model-and-enterprise-messaging-1-intro" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Command line users see &lt;A href="#localdev" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-670433995"&gt;1. Create instance of service Enterprise Messaging&lt;/H3&gt;&lt;BR /&gt;
We create an instance of the Enterprise Messaging service.&lt;BR /&gt;
We use the following JSON parameters:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"options": {&lt;BR /&gt;
		"management": true,&lt;BR /&gt;
		"messagingrest": true,&lt;BR /&gt;
		"messaging": true&lt;BR /&gt;
	},&lt;BR /&gt;
	"rules": {&lt;BR /&gt;
		"topicRules": {&lt;BR /&gt;
			"publishFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			],&lt;BR /&gt;
			"subscribeFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			]&lt;BR /&gt;
		},&lt;BR /&gt;
		"queueRules": {&lt;BR /&gt;
			"publishFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			],&lt;BR /&gt;
			"subscribeFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			]&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"version": "1.1.0",&lt;BR /&gt;
	"emname": "faas_msg_client",&lt;BR /&gt;
	"namespace": "comp/busi/crm"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
And as name for the service instance, we enter &lt;STRONG&gt;faas_msg_instance&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
As you know, I like to use silly names in my tutorials, I believe it makes the learning easier, because the name always tells what it is about and it makes clear that an arbitrary name can be chosen&lt;BR /&gt;
Of course, it is &lt;SPAN style="text-decoration: underline"&gt;not&lt;/SPAN&gt; recommended to use silly names in productive environment&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
If you don't find the Messaging service, you might need to configure &lt;A href="https://blogs.sap.com/2020/03/03/sap-cloud-application-programming-model-and-enterprise-messaging-1-intro/#entitlements" target="_blank" rel="noopener noreferrer"&gt;Entitlements&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-473920490"&gt;2. Create Service Key for the instance&lt;/H3&gt;&lt;BR /&gt;
After creating the service instance, we need a Service Key.&lt;BR /&gt;
It provides credentials which allow to access the service externally, without binding an application&lt;BR /&gt;
&lt;BR /&gt;
To create a service key, we have to click on the newly created service instance&lt;BR /&gt;
In our example, we enter the name as &lt;STRONG&gt;faas_service_key&lt;BR /&gt;
&lt;/STRONG&gt;We don’t close the browser page, we will need to view the service key content later on&lt;BR /&gt;
&lt;H3 id="toc-hId-277406985"&gt;3. Configure Messaging&lt;/H3&gt;&lt;BR /&gt;
After creating the messaging instance, we can &lt;A href="https://blogs.sap.com/2020/03/03/sap-cloud-application-programming-model-and-enterprise-messaging-1-intro/#open_dashboard" target="_blank" rel="noopener noreferrer"&gt;open the messaging dashboard&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
We go to messaging client created above (property "emname": &lt;EM&gt;faas_msg_client&lt;/EM&gt;)&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/msgDashboard1.jpg" height="145" width="207" /&gt;&lt;/P&gt;&lt;BR /&gt;
We create queue with name &lt;STRONG&gt;queue/for/faas&lt;BR /&gt;
&lt;/STRONG&gt;This will result in full queue name &lt;STRONG&gt;comp/busi/crm/queue/for/faas&lt;BR /&gt;
&lt;/STRONG&gt;The queue is used for receiving and queuing messages.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/msgDashboard2.jpg" height="160" width="147" /&gt;&lt;/P&gt;&lt;BR /&gt;
That's it for the preparation.&lt;BR /&gt;
&lt;BR /&gt;
Small Recap:&lt;BR /&gt;
We've created messaging instance and service key&lt;BR /&gt;
We've created a queue in our client&lt;BR /&gt;
&lt;H2 id="toc-hId--48189239"&gt;Extension Center&lt;/H2&gt;&lt;BR /&gt;
Now we want to use this service in a Function&lt;BR /&gt;
I've promised that it is easy.&lt;BR /&gt;
Yes&lt;BR /&gt;
&lt;H3 id="toc-hId--115620025"&gt;1. Register Service Instance&lt;/H3&gt;&lt;BR /&gt;
FaaS provides built-in support for connecting to Platform services&lt;BR /&gt;
Prerequisites are: service instance and service key&lt;BR /&gt;
Fortunately, we just created both in the chapter above&lt;BR /&gt;
So we’re lucky enough to use them&lt;BR /&gt;
The FaaS feature to support the Platform services includes a kind of service registration&lt;BR /&gt;
Independent of any specific function project, we can register a service instance in the FaaS runtime&lt;BR /&gt;
It will safeguard the service instance credentials against any malicious phishing hooks&lt;BR /&gt;
No secret required, no tedious copy&amp;amp;pasting of clientids and so on&lt;BR /&gt;
And whenever we need it, we can just use it&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-size: 60%"&gt;I like to compare it to a dog show in a circus:&lt;BR /&gt;
If you say "hepp", the dog will jump, etc&lt;BR /&gt;
If you say “enterprise-messaging”, the function will connect to the registered service instance&lt;BR /&gt;
(BTW, why I’ve never seen a cat show in a circus…?)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;How to register a service instance?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In Extension Center, we &lt;SPAN style="text-decoration: underline"&gt;don’t&lt;/SPAN&gt; click on “Extensions”&lt;BR /&gt;
We don’t create any project&lt;BR /&gt;
Instead, on the left menu pane, we expand “Configurations” and click on “Extensions”&lt;BR /&gt;
Yes, it's quite similar name&lt;BR /&gt;
The "Extension Credentials" screen is shown&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/CredScreen.jpg" height="126" width="344" /&gt;&lt;/P&gt;&lt;BR /&gt;
Here we can store credentials of a service instance. As mentioned above, the service key of a service instance is used for external access.&lt;BR /&gt;
Since we cannot &lt;EM&gt;bind&lt;/EM&gt; a function to a service, it will always be external.&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Problem?&lt;/SPAN&gt;&lt;BR /&gt;
No.&lt;BR /&gt;
&lt;BR /&gt;
In the “Extension Credentials” screen we can register a service instance.&lt;BR /&gt;
It is clear that changes in this screen are not related to individual projects.&lt;BR /&gt;
Services are registered globally in FaaS and can be used by multiple projects (extensions)&lt;BR /&gt;
With other words: using the Extension Center, we can store credentials.&lt;BR /&gt;
&lt;BR /&gt;
So let's go ahead and press “New Credentials”&lt;BR /&gt;
In the creation dialog, we have to enter following values:&lt;BR /&gt;
&lt;BR /&gt;
Type:&lt;BR /&gt;
This is the service offering of the SAP Cloud Platform, the service names as displayed in the service marketplace. Luckily, we have tool support, such that we don't need to look up the type names.&lt;BR /&gt;
For our example, we choose "enterprise-messaging"&lt;BR /&gt;
&lt;BR /&gt;
Service Instance:&lt;BR /&gt;
Here we enter the name of the instance of the Enterprise Messaging service which we created in the preparation section above.&lt;BR /&gt;
In our example: &lt;STRONG&gt;faas_msg_instance&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Service Key:&lt;BR /&gt;
Similarly, we enter the name of the service key created above&lt;BR /&gt;
In our example: &lt;STRONG&gt;faas_service_key&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Credentials:&lt;BR /&gt;
Here we enter the value of the service key.&lt;BR /&gt;
Remember I told you to not close the browser window...?&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/credWizard.jpg" height="291" width="298" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--312133530"&gt;2. Use Registered Service&lt;/H3&gt;&lt;BR /&gt;
As we’ve seen, the service is registered in the FaaS runtime on global level&lt;BR /&gt;
With other words, we've stored service credentials in the Extension Center&lt;BR /&gt;
Now we can use it in a project&lt;BR /&gt;
So let’s create a new Faas Project, or, with other words, a new Extension&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Create Extension&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In our example, we create an extension that consumes messages from a message queue and writes any silly statement to the log&lt;BR /&gt;
&lt;BR /&gt;
In the creation wizard, we choose use the "Blank Template"&lt;BR /&gt;
And we give a name like "tracker"&lt;BR /&gt;
&lt;BR /&gt;
&lt;U&gt;Create Function&lt;/U&gt;&lt;BR /&gt;
&lt;BR /&gt;
We create a new Function with the following sample values:&lt;BR /&gt;
&lt;TABLE style="height: 39px;width: 100%;border-collapse: collapse;border-style: hidden" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;Function Name&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;&lt;EM&gt;tracker-func&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;Module Name&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;&lt;EM&gt;trackerimpl.js&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;Handler Name&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 13px;border-style: hidden"&gt;&lt;EM&gt;msgreceiver&lt;/EM&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
The function implementation could be as follows:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = { &lt;BR /&gt;
   msgreceiver: function (event, context) { &lt;BR /&gt;
      console.log(event.data)&lt;BR /&gt;
   } &lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
As usual, to keep the code simple and readable, the function implementation does:&lt;BR /&gt;
nothing.&lt;BR /&gt;
Just log the payload of the received message&lt;BR /&gt;
In a productive scenario, the function would do anything more interesting, process the message and call any other component of the extension scenario&lt;BR /&gt;
&lt;SPAN style="font-size: 60%"&gt;(Otherwise it would be a shame: wake up the function, just to do nothing...)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;U&gt;Create&lt;/U&gt;&lt;U&gt; AMQP Trigger&lt;/U&gt;&lt;BR /&gt;
&lt;BR /&gt;
In Extension Center, press "Add Trigger" and choose type &lt;EM&gt;AMQP&lt;BR /&gt;
&lt;/EM&gt;Step through the wizard and enter the following values:&lt;BR /&gt;
&lt;BR /&gt;
Step 1:&lt;BR /&gt;
Trigger Name: &lt;EM&gt;amqp-tracker-tricker&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Step 2:&lt;BR /&gt;
Incoming link name: &lt;EM&gt;msg-to-faas-link&lt;BR /&gt;
&lt;/EM&gt;Source Address: &lt;EM&gt;queue:comp/busi/crm/queue/for/faas&lt;BR /&gt;
&lt;/EM&gt;With other words: the full queue name as created in the preparation section, preceded by "queue:"&lt;BR /&gt;
To add the link, we press the PLUS icon&lt;BR /&gt;
&lt;BR /&gt;
Step 3: Outgoing Link:&lt;BR /&gt;
We don't enter anything here&lt;BR /&gt;
Only press “step 4”&lt;BR /&gt;
&lt;BR /&gt;
Step 4: Rules&lt;BR /&gt;
Filter: &lt;EM&gt;msg-to-faas-link&lt;BR /&gt;
&lt;/EM&gt;Invoke Function: &lt;EM&gt;tracker-func&lt;BR /&gt;
&lt;/EM&gt;On failure: &lt;EM&gt;reject message&lt;BR /&gt;
&lt;/EM&gt;And we press the +&lt;BR /&gt;
&lt;BR /&gt;
Step 5: Credentials&lt;BR /&gt;
Press “use existing credentials store”&lt;BR /&gt;
Type: &lt;EM&gt;enterprise-messaging&lt;/EM&gt;&lt;BR /&gt;
Instance: &lt;EM&gt;faas_msg_instance&lt;/EM&gt;&lt;BR /&gt;
Key: &lt;EM&gt;faas_service_key&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Finally confirm and close the wizard&lt;BR /&gt;
&lt;BR /&gt;
We can check the extension project to verify what the wizard has done for us:&lt;BR /&gt;
&lt;BR /&gt;
In file system:&lt;BR /&gt;
Created folders to carry config files&lt;BR /&gt;
Created config files to carry the configs&lt;BR /&gt;
Created configs for the messaging trigger, containing the config we entered in the wizard&lt;BR /&gt;
&lt;BR /&gt;
In &lt;SPAN style="font-family: Courier New"&gt;faas.json:&lt;BR /&gt;
&lt;/SPAN&gt;Defined a reference to the service which we registered in FaaS (Credentials store)&lt;BR /&gt;
Defined a config map (generated name)&lt;BR /&gt;
Defined the trigger which uses the config and the service-reference&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Small recap&lt;BR /&gt;
&lt;/SPAN&gt;Connecting a function to messaging involves:&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;Create and use service registration (alternatively, use secret)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 15px"&gt;Create AMQP triger and configure it with queue / topic names and rules&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--508647035"&gt;3. Run the scenario&lt;/H3&gt;&lt;BR /&gt;
Remember the scenario:&lt;BR /&gt;
A message is sent to the Messaging service, which causes the AMQP-trigger to wake up the function&lt;BR /&gt;
Fortunately, the dashboard offers a little tool which allows to send messages.&lt;BR /&gt;
&lt;BR /&gt;
So we go to the Enterprise Messaging dashboard&lt;BR /&gt;
To send a message to the queue which we defined above:&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;We select the messaging client created above&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;We select the Tab “Test”&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;We choose Action as “Publish Message to a Queue”&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Then we select our queue&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Obviously, we enter a silly useless message&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Finally, we press “Publish”&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/sendMsg.jpg" height="270" width="250" /&gt;&lt;/P&gt;&lt;BR /&gt;
What's happening now?&lt;BR /&gt;
&lt;BR /&gt;
The Test tool has sent a message to the queue&lt;BR /&gt;
We can see in the same tool ui, that the “Number of Messages” has been increased from 0 to 1&lt;BR /&gt;
The message would wait there in the queue until it is picked up&lt;BR /&gt;
(That’s why a queue is called queue)&lt;BR /&gt;
Now, we have somebody who is watching that queue and picks the messages which are dropped there:&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Yes.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Us.&lt;/SPAN&gt;&lt;BR /&gt;
OK, but also the AMQP trigger is watching the queue (we configured it)&lt;BR /&gt;
And whenever an innocent message falls into the queue, the trigger will wake up the function&lt;BR /&gt;
Before it wakes up the function, the trigger checks the rules, of course&lt;BR /&gt;
The function then receives the message in the parameter “event”&lt;BR /&gt;
Like that, the function implementation can access the message payload&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;That's what we did&lt;/SPAN&gt;&lt;BR /&gt;
And the function can do something with the payload&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;That's what we didn’t do&lt;/SPAN&gt;&lt;BR /&gt;
Since the trigger has picked the message from the queue, the “Number of Messages” in the dashboard is reduced from 1 to 0&lt;BR /&gt;
We can check that in the dashboard (&lt;EM&gt;Queues&lt;/EM&gt; tab)&lt;BR /&gt;
&lt;BR /&gt;
What we need to check as well: the FaaS log&lt;BR /&gt;
Here we can see the log output which was written by our function.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/log-1.jpg" height="133" width="424" /&gt;&lt;/P&gt;&lt;BR /&gt;
This makes our little scenario complete:&lt;BR /&gt;
A message is sent to Enterprise Messaging and the connected FaaS reacts and reads the message&lt;BR /&gt;
&lt;H2 id="localdev" id="toc-hId--834243259"&gt;Local Development&lt;/H2&gt;&lt;BR /&gt;
The following description is meant for those of you who are used to work locally and interact with FaaS using the command line&lt;BR /&gt;
Since you're anyways the experts, I'm only giving some useful commands&lt;BR /&gt;
No explanations&lt;BR /&gt;
&lt;H3 id="toc-hId--976905414"&gt;Preparation&lt;/H3&gt;&lt;BR /&gt;
Create instance of Enterprise Messaging service:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs enterprise-messaging default faas_msg_instance -c &amp;lt;jsonFileWithParams&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Create service key&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf csk messaginginstance serviceKeyForMessaging&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
View the created service key&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf service-key faas_msg_instance faas_service_key&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
It is not required to copy the content&lt;BR /&gt;
However, we will need to view the ID of the messaging service instance&lt;BR /&gt;
So don't close this command shell&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/cli_instanceid.jpg" height="127" width="364" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1173418919"&gt;1. Register Service Instance&lt;/H3&gt;&lt;BR /&gt;
Very first step: login to cloud foundry using the CF CLI&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf login&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
First step: login to the FaaS runtime using the FaaS CLI&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli login&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Or we might want to check to which subaccount our FaaS CLI is currently pointing at&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli target&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now, to register an existing instance of Enterprise Messaging in FaaS, we use the following command&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service register -s faas_msg_instance -b faas_service_key&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Syntax:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;xfsrt-cli faas service register&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New;padding-left: 40px"&gt;--service-name &amp;lt;name of instance&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New;padding-left: 40px"&gt;--service-binding &amp;lt;name of service key&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
You need to be logged in Cloud Foundry using the CF CLI&lt;BR /&gt;
If not, you might get an error message and it might be required to execute the service-registration command twice&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
The FaaS CLI is so convenient that it proposes the existing service instances, so we can skip the parameters of the command&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/cli_reg.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
I have to repeat that the FaaS CLI is a really great and convenient tool&lt;BR /&gt;
&lt;BR /&gt;
Few more commands:&lt;BR /&gt;
&lt;BR /&gt;
To view already registered service instances:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service list&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
To unregister a service instance&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service delete&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
then wait and choose the desired service&lt;BR /&gt;
&lt;H3 id="toc-hId--1369932424"&gt;2. Use Registered Service&lt;/H3&gt;&lt;BR /&gt;
&lt;U&gt;Create a project &lt;/U&gt;&lt;BR /&gt;
&lt;BR /&gt;
On our local file system, we create a project based on the sample code in the appendix&lt;BR /&gt;
&lt;BR /&gt;
To use the registered service, we define a reference to it&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"services": {&lt;BR /&gt;
   "cs1": {&lt;BR /&gt;
      "type": "enterprise-messaging",&lt;BR /&gt;
      "instance": "a1b2c3d4-a1b2-1234-a1b2-a1b2c3d4e5f6",&lt;BR /&gt;
      "key": "faas_service_key"&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Then we can use the service reference in our trigger:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"triggers": {&lt;BR /&gt;
   "amqp-tracker-tricker": {&lt;BR /&gt;
      "type": "AMQP",&lt;BR /&gt;
      "service": "cs1",&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
In the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, which is the manifest of our project, we define a reference to a registered service. Like that, we can use it in our project. The reference points to the registered service instance. It has to point to the unique name of the service instance. Otherwise there might be name clashes. As such, we have to look for the instance ID. We find it in the service key content&lt;BR /&gt;
&lt;BR /&gt;
&lt;U&gt;Deploy&lt;/U&gt;&lt;BR /&gt;
&lt;BR /&gt;
Jump into the project root directory (same folder where faas.json is located) and execute&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project deploy&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Even for service references it is possible to provide deploy values, as described &lt;A href="https://blogs.sap.com/2020/07/10/writing-function-as-a-service-6-values.yaml" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1566445929"&gt;3. Run the scenario&lt;/H3&gt;&lt;BR /&gt;
To run our scenario, send messages from Enterprise Messaging Dashboard and make sure that they are consumed (number of messages in the queue must decrease to 0)&lt;BR /&gt;
&lt;BR /&gt;
Check the logs to view if our function works as expected&lt;BR /&gt;
Jump into the project folder (to make the command easier), then execute&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project logs&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the logs we can see the payload of the messages that we send&lt;BR /&gt;
&lt;H2 id="toc-hId--1469556427"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
In this tutorial we've learned how to register an existing service instance in FaaS&lt;BR /&gt;
With other words, we've learned how to store credentials in Extension Center&lt;BR /&gt;
And we've learned how to use them in a FaaS project&lt;BR /&gt;
To showcase it, we've used an instance of Enterprise Messaging service.&lt;BR /&gt;
More precisely, we've used the registered service from an AMQP trigger&lt;BR /&gt;
&lt;H2 id="toc-hId--1666069932"&gt;Troubleshooting&lt;/H2&gt;&lt;BR /&gt;
If you have headache because messages aren't arriving in Messaging Queue, you should check &lt;A href="https://blogs.sap.com/2020/08/27/enterprise-event-enablement-troubleshooting/" target="_blank" rel="noopener noreferrer"&gt;this guide&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--1862583437"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
An existing service instance can be registered globally in FaaS (service key is required)&lt;BR /&gt;
In Extension Center, it is done via top level menu "Configuration"&lt;BR /&gt;
With command line: &lt;SPAN style="font-family: Courier New"&gt;xfsrt-cli faas service register&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
To use the registered service (credentials) in a faas.json:&lt;BR /&gt;
Define new service reference under element "services"&lt;BR /&gt;
Use service reference from trigger definition&lt;BR /&gt;
Also (not covered in this blog), the stored credentials can be accessed from function code&lt;BR /&gt;
&lt;H2 id="sampleproject" id="toc-hId--2059096942"&gt;Appendix: All Sample Project Files&lt;/H2&gt;&lt;BR /&gt;
I’ve downloaded the project from Extension Center and for your convenience, pasting the file content here&lt;BR /&gt;
Note that I would have chosen different names, where it is visible that names were generated by Extension Center&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
In the faas.json we have to enter the ID of the instance of the Enterprise Messaging service.&lt;BR /&gt;
When registering the service instance, we can choose the instance by name&lt;BR /&gt;
However, when defining the reference in the faas.json, we have to enter the ID&lt;BR /&gt;
To retrieve the ID, proceed as follows&lt;BR /&gt;
Go to chapter "Preparation-&amp;gt;Create Service Key" and copy the value of property instanceid&lt;BR /&gt;
If you coincidentally closed the window, proceed as follows&lt;BR /&gt;
Open the content of the service key with command csk&lt;BR /&gt;
Then search for the property instanceid (usually at the end of the json )&lt;BR /&gt;
The value of the instanceid usually looks like this:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;a1b2c3d4- a1b2- a1b2- a1b2- a1b2c3d4e5f6&lt;/SPAN&gt;&lt;BR /&gt;
This has to be entered as value for the property instance in the faas.json&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/projectStructure-4.jpg" height="139" width="153" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"project": "tracker",&lt;BR /&gt;
	"version": "0.0.1",&lt;BR /&gt;
	"runtime": "nodejs10",&lt;BR /&gt;
	"library": "./lib",&lt;BR /&gt;
	"configs": {&lt;BR /&gt;
		"amqp-tracker-tricker-config": {&lt;BR /&gt;
			"source": "./data/amqp-tracker-tricker-config"&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"functions": {&lt;BR /&gt;
		"tracker-func": {&lt;BR /&gt;
			"module": "trackerimpl.js",&lt;BR /&gt;
			"handler": "msgreceiver",&lt;BR /&gt;
			"timeout": 180&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"triggers": {&lt;BR /&gt;
		"amqp-tracker-tricker": {&lt;BR /&gt;
			"type": "AMQP",&lt;BR /&gt;
			"service": "cs1",&lt;BR /&gt;
			"config": "amqp-tracker-tricker-config"&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"services": {&lt;BR /&gt;
		"cs1": {&lt;BR /&gt;
			"type": "enterprise-messaging",&lt;BR /&gt;
			"instance": "c2ab778a-0c68-4523-b7df-ce188bc67337",&lt;BR /&gt;
			"key": "faas_service_key"&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;amqp.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"incoming": {&lt;BR /&gt;
		"msg-to-faas-link": {&lt;BR /&gt;
			"sourceAddress": "queue:comp/busi/crm/queue/for/faas"&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;bind.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"functions": {&lt;BR /&gt;
		"tracker-func": {}&lt;BR /&gt;
	},&lt;BR /&gt;
	"rules": [&lt;BR /&gt;
		{&lt;BR /&gt;
			"filter": {&lt;BR /&gt;
				"incoming": "msg-to-faas-link"&lt;BR /&gt;
			},&lt;BR /&gt;
			"action": {&lt;BR /&gt;
				"function": "tracker-func",&lt;BR /&gt;
				"failure": "reject",&lt;BR /&gt;
				"content": "application/json"&lt;BR /&gt;
			}&lt;BR /&gt;
		}&lt;BR /&gt;
	]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;trackerimpl.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = { &lt;BR /&gt;
   msgreceiver: function (event, context) { &lt;BR /&gt;
      console.log(event.data)&lt;BR /&gt;
   } &lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Params for messaging instance:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"options": {&lt;BR /&gt;
		"management": true,&lt;BR /&gt;
		"messagingrest": true,&lt;BR /&gt;
		"messaging": true&lt;BR /&gt;
	},&lt;BR /&gt;
	"rules": {&lt;BR /&gt;
		"topicRules": {&lt;BR /&gt;
			"publishFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			],&lt;BR /&gt;
			"subscribeFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			]&lt;BR /&gt;
		},&lt;BR /&gt;
		"queueRules": {&lt;BR /&gt;
			"publishFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			],&lt;BR /&gt;
			"subscribeFilter": [&lt;BR /&gt;
				"${namespace}/*"&lt;BR /&gt;
			]&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"version": "1.1.0",&lt;BR /&gt;
	"emname": "faas_msg_client",&lt;BR /&gt;
	"namespace": "comp/busi/crm"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-8-how-to-easily-use-platform-services/ba-p/13463926"/>
    <published>2020-07-23T17:18:59+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/ba-p/13467981</id>
    <title>Writing Function-as-a-Service [9]: How to call OAuth-protected endpoint</title>
    <updated>2020-08-19T10:32:42+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Code&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-934497631"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
In function code we can do basically anything that is possible in &lt;A href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer nofollow"&gt;Node.js&lt;/A&gt;&lt;BR /&gt;
Sounds good, but sometimes there are hurdles&lt;BR /&gt;
Like the (necessary but tedious) security aspects&lt;BR /&gt;
If we do a demo and call a REST service endpoint from within a function:&lt;BR /&gt;
then that endpoint will always be open, to make the demo small and nice&lt;BR /&gt;
However, usually, REST endpoints are protected and users need to authenticate with user/password&lt;BR /&gt;
-&amp;gt; That’s easy, just provide basic auth&lt;BR /&gt;
Other endpoints require an apiKey&lt;BR /&gt;
-&amp;gt; No prob, we set it as header&lt;BR /&gt;
Prof endpoints are protected with OAuth authentication&lt;BR /&gt;
-&amp;gt; Here it gets more complicated, but I showed it in &lt;A href="https://blogs.sap.com/2020/07/16/writing-function-as-a-service-7-how-to-use-platform-services/" target="_blank" rel="noopener noreferrer"&gt;previous blog&lt;/A&gt;&lt;BR /&gt;
Really prof endpoints are OAuth protected and require authorization&lt;BR /&gt;
-&amp;gt; This is a bit more tricky and requires some config in addition to the OAuth flow&lt;BR /&gt;
&lt;BR /&gt;
Why tricky? Just assign a role to the user...?&lt;BR /&gt;
Stop:&lt;BR /&gt;
A function is not a user and we cannot assign the required role to the function like we would assign it to a user&lt;BR /&gt;
Luckily, this tutorial shows how to achieve that:&lt;BR /&gt;
Write a function that calls an endpoint that is protected with OAuth and requires scope&lt;BR /&gt;
&lt;BR /&gt;
With other words, about the tricky part:&lt;BR /&gt;
How to assign a scope to a function in client-credentials flow&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Remember OAuth 2.0:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In order to access a resource (REST endpoint), we need a JWT token.&lt;BR /&gt;
We get that token from “Authorization Server” (XSUAA)&lt;BR /&gt;
To get it, there are several “grant types”:&lt;BR /&gt;
- “Resource Owner Password Credentials”: human user authenticates with password (login screen) and token contains scopes based on his roles&lt;BR /&gt;
- “client credentials”: from app to app, no login&lt;BR /&gt;
(see &lt;A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; for more info)&lt;BR /&gt;
&lt;BR /&gt;
In our scenario, the function runs without user context&lt;BR /&gt;
As such we’re talking about “client credentials” flow&lt;BR /&gt;
We don’t have user password.&lt;BR /&gt;
We cannot get a user password by opening a login screen&lt;BR /&gt;
&lt;BR /&gt;
Of course, we know how to obtain a JWT token from XSUAA service instance&lt;BR /&gt;
But that token doesn’t contain the scope which is required by the protected REST endpoint&lt;BR /&gt;
&lt;BR /&gt;
So what needs to be done in order to get a JWT token containing a certain scope?&lt;BR /&gt;
The trick is in the configuration of the xsuaa instances&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Of course, it is possible to call a function from e.g. a UI5 application, which is user centric and has user login&lt;BR /&gt;
In that scenario, the function would receive the JWT token from the UI5 application, so nothing needs to be done&lt;BR /&gt;
So no tutorial required&lt;BR /&gt;
This tutorial is for the non-user-centric scenario, no UI, no user, no fun&lt;BR /&gt;
&lt;H2 id="prerequisites" id="toc-hId-737984126"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
– Access to&amp;nbsp;&lt;EM&gt;SAP Cloud Platform&lt;/EM&gt;, productive account. Trial is (currently) not supported&lt;BR /&gt;
– Instance of &lt;EM&gt;Serverless Runtime (s&lt;/EM&gt;ee&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-0.1-preparation/" target="_blank" rel="noopener noreferrer"&gt;Preparation blog&lt;/A&gt;)&lt;BR /&gt;
– Cloud Foundry CLI installed locally (see&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-0.1-preparation/#local" target="_blank" rel="noopener noreferrer"&gt;same Preparation blog&lt;/A&gt;)&lt;BR /&gt;
– Functions CLI available locally (see&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-0.1-preparation/#local" target="_blank" rel="noopener noreferrer"&gt;still same link&lt;/A&gt;)&lt;BR /&gt;
–&amp;nbsp;&lt;A href="https://nodejs.org/" target="_blank" rel="noopener noreferrer nofollow"&gt;Node.js&lt;/A&gt;&amp;nbsp;installed&lt;BR /&gt;
– Basic knowledge of writing functions in SAP Cloud Platform serverless runtime&lt;BR /&gt;
&lt;H2 id="toc-hId-541470621"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
In the first part of this tutorial, we’re creating a very basic app which exposes an endpoint which is protected with OAuth and which requires a certain scope&lt;BR /&gt;
In the second part, we’re creating a Function which tries to call that endpoint&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="#part1" target="_blank" rel="nofollow noopener noreferrer"&gt;Part 1&lt;/A&gt;: The Protected App&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create xsuaa, define scope&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create app, check scope&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="#part2" target="_blank" rel="nofollow noopener noreferrer"&gt;Part 2&lt;/A&gt;: The Calling Function&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create xsuaa, define authority&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create Function, do OAuth flow&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="preparation" id="toc-hId-344957116"&gt;Preparation: Create Project Structure&lt;/H2&gt;&lt;BR /&gt;
In our example, we're using one root Project &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe&lt;/SPAN&gt;&lt;BR /&gt;
containing 2 working directories,&lt;BR /&gt;
for the secure app &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\safeapp&lt;/SPAN&gt;&lt;BR /&gt;
and for the Function &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\unsafefunction&lt;/SPAN&gt;&lt;BR /&gt;
So let's create the folder structure:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/projectStructure.jpg" height="240" width="182" /&gt;&lt;/P&gt;&lt;BR /&gt;
Beautiful.&lt;BR /&gt;
&lt;H2 id="part1" id="toc-hId-148443611"&gt;Part 1: &lt;STRONG&gt;The Protected App&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
We use &lt;A href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer nofollow"&gt;Node.js&lt;/A&gt; and &lt;A href="https://www.npmjs.com/package/express" target="_blank" rel="noopener noreferrer nofollow"&gt;express&lt;/A&gt; to create a simple app which provides a REST endpoint&lt;BR /&gt;
We use &lt;A href="https://www.npmjs.com/package/passport" target="_blank" rel="noopener noreferrer nofollow"&gt;passport&lt;/A&gt; and &lt;A href="https://www.npmjs.com/package/@sap/xssec" target="_blank" rel="noopener noreferrer nofollow"&gt;@sap/xssec&lt;/A&gt; to protect it with OAuth 2.0&lt;BR /&gt;
We use &lt;A href="http://deadLink" target="_blank" rel="noopener noreferrer nofollow"&gt;manual code&lt;/A&gt; to enforce the required authorization&lt;BR /&gt;
We use an instance of &lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/51ec15a8979e497fbcaadf80da9b63ba.html" target="_blank" rel="noopener noreferrer"&gt;XSUAA&lt;/A&gt; service for managing the OAuth flow&lt;BR /&gt;
&lt;H3 id="toc-hId-81012825"&gt;1.1. Security Configuration&lt;/H3&gt;&lt;BR /&gt;
Security for our app is carried out by an instance of XSUAA&lt;BR /&gt;
We configure it with the following params&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforsafeapp",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "scopes": [{&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeformysafety",&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ "$XSAPPNAME(application, xsappforfaas)"]&lt;BR /&gt;
  }]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This content can be pasted during instance creation in cloud cockpit, but for better handling, we store above content in a file with a name of our choice.&lt;BR /&gt;
In my example, the file has a silly name to avoid confusion: &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;xs-security-safe.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Short explanation&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;BR /&gt;
&lt;/SPAN&gt;The name of the security artifact (Internally, it is treated like an application).&lt;BR /&gt;
Security artifacts to be distinguished by XSUAA and by us.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;scope&lt;/SPAN&gt;&lt;BR /&gt;
We declare: we require that anybody who calls our endpoint should have special permission.&lt;BR /&gt;
To distinguish “our” permission from others, we give a name to “our” special permission&lt;BR /&gt;
This is the "scope".&lt;BR /&gt;
Note: we aren’t defining a “role”. This means that no human user will be able to call our endpoint&lt;BR /&gt;
In our tutorial we don’t need it&lt;BR /&gt;
So let’s keep the file short and focus on the essential&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;"grant-as-authority-to-apps"&lt;/SPAN&gt;&lt;BR /&gt;
This is the essential line:&lt;BR /&gt;
Instead of assigning a “role” to a human user, we assign it to an application.&lt;BR /&gt;
Because that’s what we want to learn in this tutorial: how a function from FaaS can call a protected app that requires a special "scope"&lt;BR /&gt;
Our app is protected with oauth and requires a scope.&lt;BR /&gt;
And "grant" is the mechanism how an external application (FaaS in our case) can get the permission/authorization to call the protected endpoint&lt;BR /&gt;
Note:&lt;BR /&gt;
We have to understand that we’re not assigning the scope to the name of a deployed Node.js application (or whatever)&lt;BR /&gt;
What we’re explicitly writing here: the name of the security artifact. The name of the security artifact is the value of the property &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;BR /&gt;
&lt;/SPAN&gt;To avoid confusion, I always give stupid names to all artifacts, that makes it easier to distinguish.&lt;BR /&gt;
As such, if a name starts with xsapp..., it is the name of a security artifact&lt;BR /&gt;
In the current tutorial, we will create a second instance of xsuaa and we will name it &lt;EM&gt;xsappforfaas&lt;BR /&gt;
&lt;/EM&gt;So that's what we write here: We "grant" the new scope to the security artifact with name &lt;EM&gt;xsappforfaas&lt;/EM&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
The syntax for defining the permitted application:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;"$XSAPPNAME(&amp;lt;service_plan&amp;gt;, &amp;lt;name_of_xsapp_attribute&amp;gt;)"&lt;BR /&gt;
&lt;/SPAN&gt;Note:&lt;BR /&gt;
In the section below, there will be a note to type the value of &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;/SPAN&gt; exactly like here&lt;BR /&gt;
Or we can say: here we have to type the value of &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;/SPAN&gt; exactly like we’ll type it in the section below&lt;BR /&gt;
Doesn't matter: No typos allowed for &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;/SPAN&gt; attribute, otherwise we'll get errors&lt;BR /&gt;
&lt;BR /&gt;
Anyways, creating a file is not enough: this isn’t a deployment artifact, it is just a source file containing the security description&lt;BR /&gt;
So now we have to go ahead and create an instance of XSUAA service&lt;BR /&gt;
As everybody knows, it can be done in the cockpit (then point to this file) or on command line (and point to this file)&lt;BR /&gt;
In my example, we jump into &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\safeapp&lt;/SPAN&gt; and run the following command&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs xsuaa application xsuaaforsafetyapp -c xs-security-safe.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--115500680"&gt;1.2. Create Application&lt;/H3&gt;&lt;BR /&gt;
Now it is time to protect our created application&lt;BR /&gt;
Sorry, my fault&lt;BR /&gt;
I wanted to say:&lt;BR /&gt;
Now it is time to create our protected application&lt;BR /&gt;
&lt;BR /&gt;
We've already created the project structure, we only need to copy and paste the file contents from the &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
As usual, the app does nothing.&lt;BR /&gt;
Only be there&lt;BR /&gt;
And be protected&lt;BR /&gt;
&lt;BR /&gt;
So what we have to do:&lt;BR /&gt;
In order to "be there" we have to do nothing&lt;BR /&gt;
In order to “be protected” we have to do two things:&lt;BR /&gt;
&lt;BR /&gt;
We have to “wish” that the caller has that scope when he or it calls our endpoint&lt;BR /&gt;
We have to enforce that the caller has the "wished" scope&lt;BR /&gt;
&lt;BR /&gt;
This is done manually by checking the scope and refusing the access to our endpoint&lt;BR /&gt;
To manually check the scope, we have to do 2 things:&lt;BR /&gt;
&lt;BR /&gt;
We have call a helper to do the work (check scope)&lt;BR /&gt;
We have to act upon the result:&lt;BR /&gt;
If we don’t like the result of the scope check, we say it&lt;BR /&gt;
&lt;BR /&gt;
This has been confusing.&lt;BR /&gt;
Let's try again:&lt;BR /&gt;
&lt;BR /&gt;
The "passport" node module does the authentication check before our code is reached&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const jwtStrategy = new JWTStrategy(xsuaaCredentials)&lt;BR /&gt;
passport.use(jwtStrategy)&lt;BR /&gt;
...&lt;BR /&gt;
app.use(passport.authenticate('JWT', { session: false }));&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The "passport" module itself is configured with specific xsuaa implementation for OAuth&lt;BR /&gt;
As such, passport can check if a JWT token is present and if it is valid&lt;BR /&gt;
Afterwards, our endpoint-implementation is invoked and we can check manually if the JWT token contains the scope that we wish.&lt;BR /&gt;
We use a helper method for that check:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const fullScopeName = xsuaaCredentials.xsappname + '.scopeformysafety'&lt;BR /&gt;
if(! req.authInfo.checkScope(fullScopeName)){&lt;BR /&gt;
   return res.status(403).json({&lt;BR /&gt;
      message: "We don't like the scopes in the JWT token"&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Our error response is not polite, but clear&lt;BR /&gt;
&lt;H3 id="toc-hId--312014185"&gt;1.3. Deploy and Run the App&lt;/H3&gt;&lt;BR /&gt;
We create a &lt;SPAN style="font-family: Courier New"&gt;manifest.yml&lt;/SPAN&gt; file according to the &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt; section.&lt;BR /&gt;
It might be required to change the app name in the manifest, in case it is already taken&lt;BR /&gt;
&lt;BR /&gt;
In the manifest, we declare that we want to bind the app to the instance of XSUAA service which we created above&lt;BR /&gt;
Like that, our app has access to the XSUAA server which is necessary to protect our app with OAuth 2.0&lt;BR /&gt;
&lt;BR /&gt;
We deploy the app to our SAP Cloud Platform space, located in the same subaccount like our serverless runtime instance&lt;BR /&gt;
&lt;BR /&gt;
After deployment, we can try to invoke our endpoint in the browser&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #0000ff"&gt;&lt;A href="https://safetyapp.cfapps.eu10.hana.ondemand.com/securedEntry" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://safetyapp.cfapps.eu10.hana.ondemand.com/securedEntry&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The response is &lt;SPAN style="font-family: Courier New"&gt;Unauthorized&lt;/SPAN&gt; with status code 401&lt;BR /&gt;
This response sounds quite polite, so it is not ours... it is provided by the FWK which we’ve used&lt;BR /&gt;
Since we’ve invoked the endpoint in the browser, there’s no JWT token present at all, so our call is immediately rejected&lt;BR /&gt;
&lt;H3 id="toc-hId--508527690"&gt;1.4. Small Recap&lt;/H3&gt;&lt;BR /&gt;
We’ve created an instance of XSUAA service&lt;BR /&gt;
We’ve configured it with our desired scope and grant&lt;BR /&gt;
We’ve created an application with an endpoint, to be secured&lt;BR /&gt;
We’ve bound it to the instance of XSUAA, such that XSUAA can help in protecting the app&lt;BR /&gt;
In the code, we’ve added authentication and implemented authorization check&lt;BR /&gt;
&lt;H2 id="part2" id="toc-hId--834123914"&gt;Part 2: The Calling Function&lt;/H2&gt;&lt;BR /&gt;
Now we’re coming to the main part of our tutorial:&lt;BR /&gt;
How to access the secured app from within a function?&lt;BR /&gt;
&lt;BR /&gt;
Basically, our function has to perform the OAuth flow.&lt;BR /&gt;
It has to go to XSUAA and ask for a JWT token.&lt;BR /&gt;
Then go to the safeguarded app and handover the token&lt;BR /&gt;
And it has to pray that the token contains the required scope&lt;BR /&gt;
&lt;BR /&gt;
Aha!&lt;BR /&gt;
&lt;BR /&gt;
How to ensure that the JWT token contains the required scope?&lt;BR /&gt;
Praying is good – but in this tutorial we’re learning the security mechanism&lt;BR /&gt;
&lt;H3 id="toc-hId--976786069"&gt;2.1. Security Configuration&lt;/H3&gt;&lt;BR /&gt;
We create an instance of XSUAA service, dedicated for our function.&lt;BR /&gt;
Again, this xsuaa instance is configured with params stored in a json file.&lt;BR /&gt;
&lt;BR /&gt;
The file is located in the working directory for the function &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;unsafefunction&lt;/SPAN&gt; and we name this file &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;xs-security-faas.json&lt;/SPAN&gt;, to make sure that we don’t mix it.&lt;BR /&gt;
&lt;BR /&gt;
The content is copied from the appendix and looks like this:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaas",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "authorities":["$XSAPPNAME(application,xsappforsafeapp).scopeformysafety"]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The security configuration contains the essential line, to acquire the “authority”.&lt;BR /&gt;
Basically, once created, the security artifact already HAS the authority “…scopeformysafety”, because it is GRANTED by the other XSUAA security artifact, the other xsapp&lt;BR /&gt;
Remember the attribute &lt;SPAN style="font-family: Courier New"&gt;grant-as-authority-to-apps&lt;BR /&gt;
&lt;/SPAN&gt;Nevertheless, the faas-xsapp has to explicitly "accept" the granted scope&lt;BR /&gt;
&lt;BR /&gt;
The syntax:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;$XSAPPNAME(&amp;lt;service_plan&amp;gt;,&amp;lt;name_of_foreign_xsapp&amp;gt;).&amp;lt;name_of_foreign_scope&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/diagramDetailed.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
To create the XSUAA-instance for FaaS, we jump into the function folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;unsafefunction&lt;/SPAN&gt; and we execute the following command:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs xsuaa application xsuaaforfaas -c xs-security-faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
As usual, in order to use it from FaaS, we need to create a service key:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf csk xsuaaforfaas servicekeyforfaas&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Of course, both can be done from the Cloud Cockpit, if you prefer:&lt;BR /&gt;
&lt;BR /&gt;
First create the service instance of XSUAA, along with above JSON parameters&lt;BR /&gt;
Then click on the new instance and create a service key with above name&lt;BR /&gt;
&lt;H3 id="toc-hId--1173299574"&gt;2.2. Create Function&lt;/H3&gt;&lt;BR /&gt;
At this point, we’ve already learned everything we’re supposed to learn in this tutorial:&lt;BR /&gt;
We’ve done the security configuration which allows to call an app from a function&lt;BR /&gt;
We could say good-bye now, or good night… &amp;nbsp;but that wouldn’t be good&lt;BR /&gt;
So let’s quickly finish&lt;BR /&gt;
&lt;H4 id="toc-hId--1663216086"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.1. Register Service Instance&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
We know how to use a service instance from FaaS: There are 2 ways, the &lt;A href="https://blogs.sap.com/2020/07/23/writing-function-as-a-service-8-how-to-easily-use-platform-services/" target="_blank" rel="noopener noreferrer"&gt;second one&lt;/A&gt; is more comfortable: The service registration allows to store service credentials in FaaS itself&lt;BR /&gt;
It can be done in Extension Center, but currently not all service types are supported.&lt;BR /&gt;
So let's use the command line&lt;BR /&gt;
&lt;BR /&gt;
First we do the login&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli login&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Then we run the interactive service registration command&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service register&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
When prompted, we choose the instance &lt;EM&gt;xsuaaforfaas&lt;/EM&gt; from the list&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
If you don’t see it, although it is created and shown by the CF CLI, then you’ve probably forgotten to create a service key&lt;BR /&gt;
&lt;BR /&gt;
After creation, we may view the content of the service key&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf service-key xsuaaforfaas servicekeyforfaas&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--1859729591"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.2. Declare Usage&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
Once the service instance is registered in FaaS, we have to declare the usage of it in our faas project.&lt;BR /&gt;
In &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, we need to reference the registered service by its guid&lt;BR /&gt;
To get that guid, we ask the FaaS itself, with the command&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service list -o yaml&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The result of this command prints all registered services and additional information, like the guid:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/servicelist.jpg" height="195" width="243" /&gt;&lt;/P&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
The parameter &lt;SPAN style="font-family: Courier New"&gt;-o yaml&lt;/SPAN&gt; (alternatively, &lt;SPAN style="font-family: Courier New"&gt;-o json&lt;/SPAN&gt;) specifies the format of the output&lt;BR /&gt;
&lt;BR /&gt;
We copy the guid from the service-section&lt;BR /&gt;
In &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, we can now add the following section&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;  "services": {&lt;BR /&gt;
    "regxsuaa":{&lt;BR /&gt;
      "type": "xsuaa",&lt;BR /&gt;
      "instance": "ab11ab11-ab11-ab11-ab11-ab11ab11ab11",&lt;BR /&gt;
      "key": "servicekeyforfaas"      &lt;BR /&gt;
    }&lt;BR /&gt;
  }&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Here we declare that in the project we're using that concrete registered service, and we assign a name to it&lt;BR /&gt;
&lt;H4 id="toc-hId--2056243096"&gt;&lt;SPAN style="text-decoration: underline"&gt;2.2.3. Declare Usage Usage&lt;/SPAN&gt;&lt;/H4&gt;&lt;BR /&gt;
Next: declare the usage of the declared usage&lt;BR /&gt;
In &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, we’ve declared the usage of the registered service and we’ve assigned an alias: “regxsuaa”&lt;BR /&gt;
Now we can declare that our function declaration wants to make use of that registered service instance&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;  "functions": {&lt;BR /&gt;
    "oauthcallerfun": {&lt;BR /&gt;
      "module": "caller.js",&lt;BR /&gt;
      "handler": "doCallProtectedSrv",&lt;BR /&gt;
      "services": ["regxsuaa"]&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1959353594"&gt;2.3. Implement Function&lt;/H3&gt;&lt;BR /&gt;
Coming to the function code, in folder&lt;BR /&gt;
&lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\unsafefunction\lib&lt;/SPAN&gt;&lt;BR /&gt;
and file&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;caller.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
High-level overview of what the code is doing:&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Nothing&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
I mean, there’s nothing new in this section, the interesting trick, to get the scenario running, was in the configuration of the xsuaa.&lt;BR /&gt;
So we can go ahead and copy the code from the &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;appendix&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Less-high-level overview:&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;It does nothing but executing the OAuth flow and calling our app (which does nothing)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;It does nothing with the result, only return it&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Detailed overview:&lt;BR /&gt;
&lt;BR /&gt;
1. Access the registered service instance to obtain the credentials for XSUAA Authorization server&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const xsuaaServiceKey = await context.getServiceCredentialsString('regxsuaa')	&lt;BR /&gt;
const xsuaaCredentials = JSON.parse(xsuaaServiceKey)&lt;BR /&gt;
const oauthUrl = xsuaaCredentials.url&lt;BR /&gt;
const clientId = xsuaaCredentials.clientid&lt;BR /&gt;
const clientSecret = xsuaaCredentials.clientsecret	&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
2. Call the XSUAA server to get a JWT token&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const jwtToken = await _fetchJwtToken(oauthUrl, clientId, clientSecret)&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
3. Use the JWT token to call the silly endpoint&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const result = await _callEndpoint(jwtToken)&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The implementation of this function is a normal request (using native module to avoid dependency)&lt;BR /&gt;
The URL of the protected endpoint is hard-coded here&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const options = {&lt;BR /&gt;
   host: 'safetyapp.cfapps.eu10.hana.ondemand.com',&lt;BR /&gt;
   path: '/secureEntry',&lt;BR /&gt;
   headers: {&lt;BR /&gt;
      Authorization: 'Bearer ' + jwtToken&lt;BR /&gt;
   }&lt;BR /&gt;
}		&lt;BR /&gt;
https.get(options, res =&amp;gt; {&lt;BR /&gt;
   let response = ''&lt;BR /&gt;
   res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
      response += chunk&lt;BR /&gt;
   })&lt;BR /&gt;
   res.on('end', () =&amp;gt; {&lt;BR /&gt;
         resolve({message: `Function called protected service. Endpoint response: \n${response}`})&lt;BR /&gt;
. . .&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
4. Get the response and return it&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;return result.message&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-2139100197"&gt;2.4. Deploy and Run the Function&lt;/H3&gt;&lt;BR /&gt;
To deploy the function project we jump into folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\unsafefunction&lt;/SPAN&gt;&lt;BR /&gt;
and execute&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project deploy&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Afterwards, we can&amp;nbsp; invoke the function via HTTP trigger.&lt;BR /&gt;
The URL looks similar like this:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #3366ff"&gt;&lt;A href="https://abc123-faas-http.tenant.eu10.functions.xfs.cloud.sap/callendpoint/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://abc123-faas-http.tenant.eu10.functions.xfs.cloud.sap/callendpoint/&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
As a result, we get the response of our function which contains the response of our protected app&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/result.jpg" height="230" width="617" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--2058977597"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
If an OAuth-and-scope-protected app should be called by a function (no user-login), two configuration steps are required:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The app has to explicitly “grant” the scope to the function&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The function has to accept it&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;SPAN style="font-size: 1rem"&gt;These configuration steps are done in the &lt;/SPAN&gt;&lt;SPAN style="font-family: Courier New"&gt;xs-security.json&lt;/SPAN&gt;&lt;SPAN style="font-size: 1rem"&gt; files of the 2 XSUAA instances&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In this tutorial, we’ve learned how to protect an app with OAuth 2 and how to enforce a scope. And we’ve learned how to call such protected app from a serverless function&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId-2039476194"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
An app that requires OAuth and scope, can allow to be accessed by other app (without user-login)&lt;BR /&gt;
The xsappname of consuming app has to be entered&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;  "scopes": [{&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ "$XSAPPNAME(application, xsappforfaas)"]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
An app or function that wants to call the protected (and granting) app, has to declare the access&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"authorities":["$XSAPPNAME(application,xsappforsafeapp).scopeformysafety"]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="links" id="toc-hId-1842962689"&gt;Links&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;About OAuth: see this &lt;A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer"&gt;blog&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Manual OAuth flow for Password credentials: explained in detail&amp;nbsp;&lt;A href="https://blogs.sap.com/2019/04/29/sap-cloud-platform-backend-service-tutorial-13-api-called-from-external-tool/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Programmatic OAuth flow: see this &lt;A href="https://blogs.sap.com/2019/05/20/sap-cloud-platform-backend-service-tutorial-18-api-called-from-external-node.js/" target="_blank" rel="noopener noreferrer"&gt;example&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Today's&amp;nbsp;tutorial is based on an &lt;A href="https://blogs.sap.com/2020/06/02/how-to-call-protected-app-from-external-app-as-external-user-with-scope/" target="_blank" rel="noopener noreferrer"&gt;older blog&lt;/A&gt; where I already explained same topic&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="samples" id="toc-hId-1814632875"&gt;Appendix: All Project Files&lt;/H2&gt;&lt;BR /&gt;
Here you can find all the code required for this tutorial, ready for copy&amp;amp;paste&lt;BR /&gt;
You only need to adapt:&lt;BR /&gt;
- the app name in the manifest&lt;BR /&gt;
- the instanceID in the faas.json&lt;BR /&gt;
&lt;BR /&gt;
For your convenience, see here the Project Structure again:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/projectStructure-1.jpg" height="268" width="203" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-1324716363"&gt;Part 1: The Protected App&lt;/H3&gt;&lt;BR /&gt;
These are the files of the app which provides an endpoint and which is called by the function&lt;BR /&gt;
These files are located in the folder "safeapp"&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;xs-security-safe.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforsafeapp",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "scopes": [{&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeformysafety",&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ "$XSAPPNAME(application, xsappforfaas)"]&lt;BR /&gt;
  }]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;manifest.yml&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;---&lt;BR /&gt;
applications:&lt;BR /&gt;
- name: safetyapp&lt;BR /&gt;
  memory: 128M&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
    - nodejs_buildpack&lt;BR /&gt;
  services:&lt;BR /&gt;
    - xsuaaforsafetyapp&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "main": "server.js",&lt;BR /&gt;
  "dependencies": {&lt;BR /&gt;
    "@sap/xsenv": "latest",&lt;BR /&gt;
    "@sap/xssec": "latest",&lt;BR /&gt;
    "express": "^4.16.3",&lt;BR /&gt;
    "passport": "^0.4.1"&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;server.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const express = require('express');&lt;BR /&gt;
const passport = require('passport');&lt;BR /&gt;
const xsenv = require('@sap/xsenv');&lt;BR /&gt;
const JWTStrategy = require('@sap/xssec').JWTStrategy;&lt;BR /&gt;
&lt;BR /&gt;
const xsuaaService = xsenv.getServices({ myXsuaa: { tag: 'xsuaa' }});&lt;BR /&gt;
const xsuaaCredentials = xsuaaService.myXsuaa; &lt;BR /&gt;
const jwtStrategy = new JWTStrategy(xsuaaCredentials)&lt;BR /&gt;
passport.use(jwtStrategy);&lt;BR /&gt;
&lt;BR /&gt;
const app = express();&lt;BR /&gt;
app.use(passport.initialize());&lt;BR /&gt;
app.use(passport.authenticate('JWT', { session: false }));&lt;BR /&gt;
&lt;BR /&gt;
// our protected endpoint&lt;BR /&gt;
app.get('/secureEntry', function(req, res){       &lt;BR /&gt;
   console.log('===&amp;gt; Endpoint has been reached. Authentication ok. Now checking authorization')&lt;BR /&gt;
&lt;BR /&gt;
   const fullScopeName = xsuaaCredentials.xsappname + '.scopeformysafety'&lt;BR /&gt;
   if(! req.authInfo.checkScope(fullScopeName)){&lt;BR /&gt;
      return res.status(403).json({&lt;BR /&gt;
         error: 'Unauthorized',&lt;BR /&gt;
         message: "We don't like the scopes in the JWT token"&lt;BR /&gt;
      })      &lt;BR /&gt;
   }&lt;BR /&gt;
&lt;BR /&gt;
   res.send('Successfully passed security control' );&lt;BR /&gt;
});&lt;BR /&gt;
&lt;BR /&gt;
// start server&lt;BR /&gt;
app.listen(process.env.PORT, () =&amp;gt; {})&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1128202858"&gt;Part 2: The Calling Function&lt;/H3&gt;&lt;BR /&gt;
These are the files required for the function&lt;BR /&gt;
They are located in the folder "unsafefunction"&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;xs-security-faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaas",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "authorities":["$XSAPPNAME(application,xsappforsafeapp).scopeformysafety"]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "project": "calloauth",&lt;BR /&gt;
  "version": "0.0.1",&lt;BR /&gt;
  "runtime": "nodejs10",&lt;BR /&gt;
  "library": "./lib",&lt;BR /&gt;
  "functions": {&lt;BR /&gt;
    "oauthcallerfun": {&lt;BR /&gt;
      "module": "caller.js",&lt;BR /&gt;
      "handler": "doCallProtectedSrv",&lt;BR /&gt;
      "services": ["regxsuaa"]&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
&lt;BR /&gt;
  "triggers": {&lt;BR /&gt;
    "callendpoint": {&lt;BR /&gt;
      "type": "HTTP",&lt;BR /&gt;
      "function": "oauthcallerfun"&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
  "services": {&lt;BR /&gt;
    "regxsuaa":{&lt;BR /&gt;
        "type": "xsuaa",&lt;BR /&gt;
        "instance": "ab12ab12-ab12-ab12-ab12-ab12ab12ab12",&lt;BR /&gt;
        "key": "servicekeyforfaas"      &lt;BR /&gt;
    }&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;caller.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const https = require('https');&lt;BR /&gt;
&lt;BR /&gt;
// main entry&lt;BR /&gt;
const _faasHandler = async function (event, context) {&lt;BR /&gt;
&lt;BR /&gt;
	const xsuaaServiceKey = await context.getServiceCredentialsString('regxsuaa')	&lt;BR /&gt;
	const xsuaaCredentials = JSON.parse(xsuaaServiceKey)&lt;BR /&gt;
	const oauthUrl = xsuaaCredentials.url&lt;BR /&gt;
	const clientId = xsuaaCredentials.clientid&lt;BR /&gt;
	const clientSecret = xsuaaCredentials.clientsecret	&lt;BR /&gt;
	&lt;BR /&gt;
	// call the target endpoint&lt;BR /&gt;
	const jwtToken = await _fetchJwtToken(oauthUrl, clientId, clientSecret)&lt;BR /&gt;
	const result = await _callEndpoint(jwtToken)&lt;BR /&gt;
	&lt;BR /&gt;
	return result.message&lt;BR /&gt;
} &lt;BR /&gt;
&lt;BR /&gt;
const _fetchJwtToken = async function(oauthUrl, oauthClient, oauthSecret) {&lt;BR /&gt;
	return new Promise ((resolve, reject) =&amp;gt; {&lt;BR /&gt;
	   	const options = {&lt;BR /&gt;
		  	host:  oauthUrl.replace('https://', ''),&lt;BR /&gt;
		  	path: '/oauth/token?grant_type=client_credentials&amp;amp;response_type=token',&lt;BR /&gt;
		  	headers: {&lt;BR /&gt;
			 	Authorization: "Basic " + Buffer.from(oauthClient + ':' + oauthSecret).toString("base64")&lt;BR /&gt;
		  	}&lt;BR /&gt;
	   	}&lt;BR /&gt;
	   	https.get(options, res =&amp;gt; {&lt;BR /&gt;
		  	res.setEncoding('utf8')&lt;BR /&gt;
		  	let response = ''&lt;BR /&gt;
		  	res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
				response += chunk&lt;BR /&gt;
			})&lt;BR /&gt;
			res.on('end', () =&amp;gt; {&lt;BR /&gt;
				try {&lt;BR /&gt;
					const responseAsJson = JSON.parse(response)&lt;BR /&gt;
					const jwtToken = responseAsJson.access_token            &lt;BR /&gt;
					if (!jwtToken) {&lt;BR /&gt;
						return reject(new Error('Error while fetching JWT token'))&lt;BR /&gt;
					}&lt;BR /&gt;
					resolve(jwtToken)&lt;BR /&gt;
				} catch (error) {&lt;BR /&gt;
					return reject(new Error('Error while fetching JWT token'))               &lt;BR /&gt;
				}&lt;BR /&gt;
			})&lt;BR /&gt;
		})&lt;BR /&gt;
	   .on("error", (error) =&amp;gt; {&lt;BR /&gt;
		  console.log("Error: " + error.message);&lt;BR /&gt;
		  return reject({error: error})&lt;BR /&gt;
	   });&lt;BR /&gt;
	})   &lt;BR /&gt;
 }&lt;BR /&gt;
 &lt;BR /&gt;
const _callEndpoint = async function(jwtToken){&lt;BR /&gt;
	return new Promise((resolve, reject) =&amp;gt; {&lt;BR /&gt;
		const options = {&lt;BR /&gt;
			host: 'safetyapp.cfapps.eu10.hana.ondemand.com',&lt;BR /&gt;
			path: '/secureEntry',&lt;BR /&gt;
			headers: {&lt;BR /&gt;
				Authorization: 'Bearer ' + jwtToken&lt;BR /&gt;
			}&lt;BR /&gt;
		}		&lt;BR /&gt;
		https.get(options, res =&amp;gt; {&lt;BR /&gt;
			res.setEncoding('utf8')&lt;BR /&gt;
			let response = ''&lt;BR /&gt;
			res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
			  response += chunk&lt;BR /&gt;
			})&lt;BR /&gt;
			res.on('end', () =&amp;gt; {&lt;BR /&gt;
				const status = res.statusCode&lt;BR /&gt;
				if(status &amp;lt; 400){&lt;BR /&gt;
					resolve({message: `Function called protected service. Endpoint response: \n${response}`})&lt;BR /&gt;
				}else{&lt;BR /&gt;
					reject({error: {message: `Error calling endpoint with status ${status}`}})&lt;BR /&gt;
				}&lt;BR /&gt;
		  	})&lt;BR /&gt;
		})&lt;BR /&gt;
		.on("error", (error) =&amp;gt; {&lt;BR /&gt;
			reject({error: error})&lt;BR /&gt;
		});		  &lt;BR /&gt;
	})&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// export the handler function with readable alias&lt;BR /&gt;
module.exports = {&lt;BR /&gt;
	doCallProtectedSrv : _faasHandler&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/ba-p/13467981"/>
    <published>2020-08-19T10:32:42+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-10-call-protected-endpoint-across-subaccounts/ba-p/13479226</id>
    <title>Writing Function-as-a-Service [10]: Call protected endpoint across Subaccounts</title>
    <updated>2020-08-27T10:02:41+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Code&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-935473826"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
In the &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt; we‘ve learned how to call a service which is protected with OAuth and requires a scope.&lt;BR /&gt;
The challenge was:&lt;BR /&gt;
-&amp;gt; how can the function possess the scope?&lt;BR /&gt;
The solution was:&lt;BR /&gt;
-&amp;gt; configuration of both xs-security.json files&lt;BR /&gt;
&lt;BR /&gt;
BUT:&lt;BR /&gt;
There was a precondition:&lt;BR /&gt;
-&amp;gt; both app and function have to live in the same subaccount&lt;BR /&gt;
&lt;BR /&gt;
This is necessary because the central XSUAA of the subaccount creates one oauth-client for each instance and assigns the granted scope to the other client.&lt;BR /&gt;
Thus, it has to resolve the names of the scope and involved clients&lt;BR /&gt;
This is possible because the name of the scope is made unique and identifiable by adding the variable &lt;SPAN style="font-family: Courier New"&gt;$XSAPPNAME&lt;/SPAN&gt; to the scope name.&lt;BR /&gt;
As we all know, the value of the variable is not just the same as the name of the property &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;BR /&gt;
&lt;/SPAN&gt;The value of &lt;SPAN style="font-family: Courier New"&gt;$XSAPPNAME&lt;/SPAN&gt; is generated at runtime and contains some mystic suffix &lt;SPAN style="font-family: Courier New"&gt;!t1234&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
OK.&lt;BR /&gt;
Today we want to call from the function to a service which lives in a different subaccount.&lt;BR /&gt;
So now, the XSUAA has to find not only the correct scope and oauth-client.&lt;BR /&gt;
It has to find it in a different subaccount (identityzone)&lt;BR /&gt;
&lt;BR /&gt;
How to do it?&lt;BR /&gt;
-&amp;gt; communicate with the other central XSUAA&lt;BR /&gt;
&lt;BR /&gt;
How to find that one?&lt;BR /&gt;
-&amp;gt; By the unique identifier of the subaccount (identityzone)&lt;BR /&gt;
&lt;BR /&gt;
As such, we have to add the subaccountID to the &lt;SPAN style="font-family: Courier New"&gt;GRANT&lt;/SPAN&gt; statement&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/diagram1-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
And that’s already all for today&lt;BR /&gt;
&lt;BR /&gt;
Nevertheless, let’s make it real&lt;BR /&gt;
&lt;H2 id="toc-hId-738960321"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
In this tutorial, we’re going to learn how to assign a scope to an application in a different subaccount&lt;BR /&gt;
&lt;BR /&gt;
The scenario is almost the same as in the &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt;.&lt;BR /&gt;
We can either re-use it and do the required little changes&lt;BR /&gt;
Or create the project as described below, everything based on the previous blog&lt;BR /&gt;
&lt;BR /&gt;
In the first part of this tutorial, we’re creating a very basic app which exposes an endpoint which is protected with OAuth and which requires a certain scope&lt;BR /&gt;
In the second part, we’re creating a Function which tries to call that endpoint&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="#part1" target="_blank" rel="nofollow noopener noreferrer"&gt;Part 1&lt;/A&gt;: The Protected App&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create xsuaa, define scope&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create app, check scope&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="#part2" target="_blank" rel="nofollow noopener noreferrer"&gt;Part 2&lt;/A&gt;: The Calling Function&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create xsuaa, define authority&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="padding-left: 20px"&gt;Create Function, do OAuth flow&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-542446816"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;If you’re new to the topic, the previous tutorial is a prerequisite, along with all its &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#prerequisites" target="_blank" rel="noopener noreferrer"&gt;prerequisites&lt;/A&gt; and blablabla&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;In addition:&lt;BR /&gt;
To follow this tutorial, we need 2 different subaccounts.&lt;BR /&gt;
In my example, I’m using my trial account, in addition to my FaaS-account (containing the instance of SAP Cloud Platform serverless runtime)&lt;BR /&gt;
Limitation:&lt;BR /&gt;
Both accounts have to live in the same data center (in my example, eu10)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="preparation" id="toc-hId-345933311"&gt;Preparation: Create Project Structure&lt;/H2&gt;&lt;BR /&gt;
Same &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#preparation" target="_blank" rel="noopener noreferrer"&gt;preparation&lt;/A&gt; like in previous blog: create files and folders&lt;BR /&gt;
&lt;BR /&gt;
In addition:&lt;BR /&gt;
We need to find the ID of the FaaS-subaccount.&lt;BR /&gt;
It is easy to find: just open the subaccount in the cloud cockpit&lt;BR /&gt;
Which subaccount?&lt;BR /&gt;
We need the ID of the subaccount where the FaaS is located&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/subacc_ID.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="part1" id="toc-hId-149419806"&gt;Part 1: &lt;STRONG&gt;The Protected App&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
Almost same as &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#part1" target="_blank" rel="noopener noreferrer"&gt;part 1&lt;/A&gt; of previous tutorial&lt;BR /&gt;
Really only the &lt;SPAN style="font-family: Courier New"&gt;xs-security.json&lt;/SPAN&gt; file is little bit different&lt;BR /&gt;
&lt;H3 id="toc-hId-81989020"&gt;1.1. Security Configuration&lt;/H3&gt;&lt;BR /&gt;
This is the essential section of this tutorial:&lt;BR /&gt;
Here we’re using the subaccount ID:&lt;BR /&gt;
-&amp;gt; grant the scope to an oauth-client living in the specified subaccount&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforsafeapp",&lt;BR /&gt;
  "scopes": [{&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeformysafety",&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ "$XSAPPNAME(application, 12ab12ab-34cd-56ef-34cd-12ab12ab12ab, xsappforfaas)"]&lt;BR /&gt;
  }]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Syntax:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"grant-as-authority-to-apps" : [ &lt;BR /&gt;
  "$XSAPPNAME(&amp;lt;service_plan&amp;gt;, &amp;lt;subaccount_id&amp;gt;, &amp;lt; xsappname_of_caller &amp;gt;)"&lt;BR /&gt;
]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
After clarifying the new security descriptor, we create an instance of XSUAA in our Trial account (or whatever account you’ve chosen)&lt;BR /&gt;
&lt;BR /&gt;
We have to make sure that we're targeting the different account, e.g. trial&lt;BR /&gt;
To change location:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf t -o p123456trial&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
see:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/cftarget.jpg" height="129" width="303" /&gt;&lt;/P&gt;&lt;BR /&gt;
OK, for your convenience, here's again the command to create a service instance:&lt;BR /&gt;
In my example, we jump into &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;C:\tmp_faas_callsafe\safeapp&lt;/SPAN&gt; and run the following command&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs xsuaa application xsuaaforsafetyapp -c xs-security-safe.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--114524485"&gt;1.2. Create Application&lt;/H3&gt;&lt;BR /&gt;
No change needed to the app.&lt;BR /&gt;
Just take the sample code (Part 1) from &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#samples" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--311037990"&gt;1.3. Deploy and Run the App&lt;/H3&gt;&lt;BR /&gt;
Yapp, just deploy it to the different account.&lt;BR /&gt;
No need to run it, we did it in the previous torture&lt;BR /&gt;
&lt;H3 id="toc-hId--507551495"&gt;1.4. Small Recap&lt;/H3&gt;&lt;BR /&gt;
We deploy a protected app to trial account.&lt;BR /&gt;
We specify that the Function of FAC account is allowed to call us&lt;BR /&gt;
So we add a statement to grant access to the calling xsapp&lt;BR /&gt;
And here is the place to enter the ID of the FAC account&lt;BR /&gt;
&lt;H2 id="part2" id="toc-hId--833147719"&gt;Part 2: The Calling Function&lt;/H2&gt;&lt;BR /&gt;
Again, all the same as in &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#part2" target="_blank" rel="noopener noreferrer"&gt;one&lt;/A&gt; of the other boring tutorials&lt;BR /&gt;
&lt;H3 id="toc-hId--975809874"&gt;2.1. Security Configuration&lt;/H3&gt;&lt;BR /&gt;
In part 1 we learned how to grant a scope to an xsuaa instance in a different subaccount&lt;BR /&gt;
Now we’re on the receiving side: we receive the granted scope and we need to accept it&lt;BR /&gt;
In the previous tutorial, we used the following statement:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;"authorities":["$XSAPPNAME(application,xsappforsafeapp).scopeformysafety"]&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now we would need to make clear where to find that foreign xsapp&lt;BR /&gt;
However, I haven’t found a way to add the subaccountID in this statement&lt;BR /&gt;
OK, no prob.&lt;BR /&gt;
-&amp;gt; we have to fall back to the generic statement:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;"authorities":["$ACCEPT_GRANTED_AUTHORITIES"]&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Using this statement, we accept all scopes granted by anybody to our app (xsapp, to be more precise)&lt;BR /&gt;
&lt;BR /&gt;
So now we open the file &lt;SPAN style="font-family: Courier New;background-color: #f5f5f5"&gt;xs-security-faas.json&lt;/SPAN&gt;, in folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;unsafefunction&lt;/SPAN&gt; and enter the following content&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaas",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "authorities":["$ACCEPT_GRANTED_AUTHORITIES"]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
This statement doesn't apply only for different subaccounts, it can be used in any scenario&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/08/diagramDetailed-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
As usual. this JSON config can be used to create or update&amp;nbsp; an instance of XSUAA.&lt;BR /&gt;
&lt;BR /&gt;
Before executing a command, don't forget that this time, we have to make sure that we target the subaccount where FaaS is living&lt;BR /&gt;
&lt;BR /&gt;
To create the XSUAA-instance for FaaS, we jump into the function folder &lt;SPAN style="background-color: #ffe78f;font-family: Courier New"&gt;unsafefunction&lt;/SPAN&gt; then:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs xsuaa application xsuaaforfaas -c xs-security-faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
And create a service key:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf csk xsuaaforfaas servicekeyforfaas&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
BUT:&lt;BR /&gt;
If you have the scenario in place, It is enough to update the existing service:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf update-service xsuaaforfaas -c xs-security-faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1172323379"&gt;2.2. Create Function&lt;/H3&gt;&lt;BR /&gt;
All the same as in &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#part2" target="_blank" rel="noopener noreferrer"&gt;previous&lt;/A&gt; hands-on. It shouldn’t be necessary to do any change, register or deploy.&lt;BR /&gt;
But it might be necessary to repeat steps, if the xsuaa instance was deleted, etc&lt;BR /&gt;
Or to adapt the code, if the name of the protected app was changed in trial&lt;BR /&gt;
&lt;BR /&gt;
Otherwise, we can just use the deployed function, if remaining from the previous blog&lt;BR /&gt;
&lt;BR /&gt;
Or we create everything from scratch, based on the &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#samples" target="_blank" rel="noopener noreferrer"&gt;sample code Part 2&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
And then, finally, we invoke the function and are happy to see the same result which we had before&lt;BR /&gt;
No shame to be happy:&lt;BR /&gt;
We’ve learned the little trick which enables us to cross the borders of subaccounts&lt;BR /&gt;
&lt;H2 id="toc-hId--1075433877"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
In this blog we’ve learned almost nothing&lt;BR /&gt;
Just adding a cryptic guid in the middle of a cryptic statement&lt;BR /&gt;
Luckily, the blog post hasn’t been too long…&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--1271947382"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
The protected app which is called by the Function has to grant the scope to the Function&lt;BR /&gt;
If both are not located in the same subaccount, then the subaccountID of the Function has to be added (ID can be found in the cockpit)&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;xs-security.json&lt;/SPAN&gt; of protected app:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"scopes": [{&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeformysafety",&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ &lt;BR /&gt;
         "$XSAPPNAME(application, 12345678-abcd-..., xsappforfaas)"&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The calling Function has to accept the grant. In case of different subaccounts, the generic statement has to be used to accept all granted scopes&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;xs-security.json&lt;/SPAN&gt;: of Function&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"authorities":["$ACCEPT_GRANTED_AUTHORITIES"]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="links" id="toc-hId--1468460887"&gt;Links&lt;/H2&gt;&lt;BR /&gt;
Same as in &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#links" target="_blank" rel="noopener noreferrer"&gt;previous tuutorial&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="samples" id="toc-hId--1664974392"&gt;Appendix: All Project Files&lt;/H2&gt;&lt;BR /&gt;
The whole project can be found in &lt;A href="https://blogs.sap.com/2020/08/19/writing-function-as-a-service-9-how-to-call-oauth-protected-endpoint/#samples" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
However, we have to adjust the following files in both projects&lt;BR /&gt;
&lt;H3 id="toc-hId-2140076392"&gt;Part 1: The Protected App&lt;/H3&gt;&lt;BR /&gt;
These files are located in the folder "safeapp"&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;xs-security-safe.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforsafeapp",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "scopes": [{&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeformysafety",&lt;BR /&gt;
      "grant-as-authority-to-apps" : [ &lt;BR /&gt;
         "$XSAPPNAME(application, 1a2b3c4d-0000-1111-aaaa-..., xsappforfaas)"&lt;BR /&gt;
      ]&lt;BR /&gt;
  }]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1943562887"&gt;Part 2: The Calling Function&lt;/H3&gt;&lt;BR /&gt;
They are located in the folder "unsafefunction"&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;xs-security-faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaas",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "authorities":["$ACCEPT_GRANTED_AUTHORITIES"]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-10-call-protected-endpoint-across-subaccounts/ba-p/13479226"/>
    <published>2020-08-27T10:02:41+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-platform-extension-factory-serverless-runtime-function-as-a/ba-p/13482670</id>
    <title>SAP Cloud Platform [Extension Factory], serverless runtime | Function-as-a-Service | FaaS</title>
    <updated>2020-09-21T14:49:15+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>&lt;P style="text-align: center"&gt;&lt;STRONG&gt;SAP Cloud Platform Extension Factory, serverless runtime&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;|&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;|&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;SAP Cloud Platform Functions - Beta&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;|&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;Function-as-a-Service&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;|&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;FaaS&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;|&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;I'm confused...&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;What’s the difference?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
To give a short answer: It’s all the same&lt;BR /&gt;
(almost)&lt;BR /&gt;
At the end, we can write some javascript code and it runs in a serverless environment&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;What is it, precisely?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
It is a service offering in the SAP Cloud Platform, Cloud Foundry environment&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/tile-1.jpg" height="324" width="506" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;But why that strange name?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
While the name itself, &lt;STRONG&gt;Serverless Runtime&lt;/STRONG&gt;, might still sound confusing, it makes more sense if we compare it to other “runtime” offerings in SAP Cloud Platform:&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Application Runtime&lt;/EM&gt;&lt;BR /&gt;
The classic way of writing e.g. a java web application and deploying it to the cloud where it runs on classic java server with underlying JRE. The application developer takes care of operating and maintaining, etc.&lt;BR /&gt;
Agree that these efforts are already less that in the even more classical onPrem world&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Serverless Runtime&lt;/EM&gt;&lt;BR /&gt;
Here the developer doesn’t need to care about the runtime, meaning that he writes the code and the environment takes care about scaling etc just like it is expected of a serverless environment.&lt;BR /&gt;
And, as expected, it causes cost only when running&lt;BR /&gt;
This is the right choice for lightweight extensions, small portions of javascript code&lt;BR /&gt;
It is nicely coupled with other offerings like Enterprise Messaging, Backend Service, OData Provisioning&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Kyma Runtime&lt;/EM&gt;&lt;BR /&gt;
Bigger, more powerful, more flexible, more costly&lt;BR /&gt;
&lt;BR /&gt;
While the &lt;EM&gt;Serverless Runtime&lt;/EM&gt; is a "service" offering, it also provides a subscription-based tool:&lt;BR /&gt;
The &lt;EM&gt;Extension Center&lt;/EM&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/ExtensionCenter-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Nice, but where are the functions?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The screenshot helps us to understand:&lt;BR /&gt;
&lt;BR /&gt;
The name "Serverless Runtime" is an umbrella for several capabilities that can be used to build serverless extensions.&lt;BR /&gt;
Writing functions is only one of the capabilities, provided by "Serverless Runtime"&lt;BR /&gt;
We don't see any "Function" in the Extension Center UI. Instead, a&amp;nbsp; function project is called "Extension".&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Why?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We understand that this is not a general worldwide FaaS technology product. Functions are meant to be part of a serverless extension scenario.&lt;BR /&gt;
An extension scenario which is meant to be simple and still provides the possibility to write code.&lt;BR /&gt;
And in fact: it is REALLY easy&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Blablabla...&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Really.&lt;BR /&gt;
Try to imagine this example scenario:&lt;BR /&gt;
Get notified about Backend changes with Enterprise Messaging&lt;BR /&gt;
On every change, a Function is triggered&lt;BR /&gt;
It can call an API with OData provisioning to get more details&lt;BR /&gt;
The function can store data with Backend Service&lt;BR /&gt;
&lt;BR /&gt;
Such a powerful extension scenario can be realized completely serverless, with few lines of code and little configuration&lt;BR /&gt;
No local dev, no operation, no maintenance, no database trouble, no scaling headaches.&lt;BR /&gt;
And at low cost, as everything has to be payed only when it does its work&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;OK, cool.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;But what if the scenario grows and the offerings don't cover the required functionality?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In that case, the function can be easily and seamlessly migrated to &lt;EM&gt;Kyma&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Sounds like a marketing slogan...&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
It can be easily proven:&lt;BR /&gt;
Both Kyma and Functions have the same underlying technology (Kybernetes)&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Cool, thanks&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Cool, time to close the blog....&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Ehmmm - didn't you forget anything?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Welcome. Missing info: which is the &lt;EM&gt;CORRECT&lt;/EM&gt; name?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Last question: how can we learn more?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
This &lt;A href="https://blogs.sap.com/2020/01/17/sap-cloud-platform-extension-factory-serverless-runtime-is-ga-now/" target="_blank" rel="noopener noreferrer"&gt;announcement blog&lt;/A&gt; gives an introduction and overview about Serverless Runtime&lt;BR /&gt;
SAP Help Portal: Serverless Runtime &lt;A href="https://help.sap.com/viewer/bf7b2ff68518427c85b30ac3184ad215/Cloud/en-US/7b8cc2b0e8d141d6aa37c7dff4d70b82.html" target="_blank" rel="noopener noreferrer"&gt;official docu&lt;/A&gt;&lt;BR /&gt;
Recommended &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt; which explain in detail how to implement functions&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="color: #999999"&gt;Thanks&lt;/SPAN&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-platform-extension-factory-serverless-runtime-function-as-a/ba-p/13482670"/>
    <published>2020-09-21T14:49:15+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-11-how-and-why-access-http-api/ba-p/13481267</id>
    <title>Writing Function-as-a-Service [11]: How and Why access HTTP API</title>
    <updated>2020-10-15T09:57:49+02:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Code&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-936159144"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
In this blog we're talking about functions with HTTP trigger only. These are functions that are invoked with HTTP request.&lt;BR /&gt;
In such scenarios, the function returns a value which ends up in the response body of the calling client (e.g. browser)&lt;BR /&gt;
Sometimes, the function handler code needs more information that it gets from the FaaS runtime&lt;BR /&gt;
Also, it may need to write custom info to the response&lt;BR /&gt;
&lt;BR /&gt;
For these cases, the FaaS runtime allows access to the underlying native node.js HTTP API&lt;BR /&gt;
For those of you who require such functionality, I’m providing a silly example, to make your life easier&lt;BR /&gt;
&lt;BR /&gt;
First of all, 2 basic info that we have to understand:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;In most cases, access to the underlying HTTP API is not needed.&lt;BR /&gt;
As such, if we need it, we have to enable it&lt;BR /&gt;
That’s done in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;, for each function definition&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The underlying HTTP API is the standard node.js &lt;SPAN style="font-family: Courier New"&gt;http&lt;/SPAN&gt; module&lt;BR /&gt;
As such, no special tutorial needed here, please refer to the standard documentation&lt;BR /&gt;
Here: &lt;A style="font-size: 1rem" href="https://nodejs.org/api/http.html" target="_blank" rel="nofollow noopener noreferrer"&gt;https://nodejs.org/api/http.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;And there’s one more basic info&lt;BR /&gt;
We cannot mix both approaches&lt;BR /&gt;
Either use the standard FaaS convenience methods OR use the HTTP API&lt;BR /&gt;
With "FaaS convenience methods" I mean the following&lt;BR /&gt;
Use return value to set the response:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;return ‘Error, invalid function invocation’&lt;/SPAN&gt;&lt;BR /&gt;
Use convenience method to set the status&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;event.setUnauthorized()&lt;/SPAN&gt;&lt;BR /&gt;
With other words: if we want to add custom header to the response, we cannot use &lt;SPAN style="font-family: Courier New"&gt;event.setUnauthorized()&lt;/SPAN&gt; to set the status. We have to set the status with &lt;SPAN style="font-family: Courier New"&gt;response.writeHead(400)&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-739645639"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="#howto" target="_blank" rel="nofollow noopener noreferrer"&gt;How to use HTTP API&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="#usecases" target="_blank" rel="nofollow noopener noreferrer"&gt;Example use cases&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="#create" target="_blank" rel="nofollow noopener noreferrer"&gt;Create sample function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="#run" target="_blank" rel="nofollow noopener noreferrer"&gt;Run sample function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-543132134"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
If you're new to Serverless Runtime, Function-as-a-Service, you should check out the &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;overview of blogs&lt;/A&gt; and read all of them...&lt;BR /&gt;
&lt;H2 id="howto" id="toc-hId-346618629"&gt;How to use HTTP API&lt;/H2&gt;&lt;BR /&gt;
First of all, the access to the API needs to be enabled.&lt;BR /&gt;
This is done in a function definition in&amp;nbsp; &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"functions": {&lt;BR /&gt;
   "function-with-httpapi": {&lt;BR /&gt;
      "httpApi": true&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Once enabled, the &lt;SPAN style="font-family: Courier New"&gt;http&lt;/SPAN&gt; property of &lt;SPAN style="font-family: Courier New"&gt;event&lt;/SPAN&gt; will be filled with &lt;SPAN style="font-family: Courier New"&gt;request&lt;/SPAN&gt; and &lt;SPAN style="font-family: Courier New"&gt;response&lt;/SPAN&gt; objects&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = async function (event, context) {&lt;BR /&gt;
    const request = event.http.request&lt;BR /&gt;
    const response = event.http.response&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The &lt;SPAN style="font-family: Courier New"&gt;request&lt;/SPAN&gt; object represents the class &lt;A href="https://nodejs.org/api/http.html#http_class_http_clientrequest" target="_blank" rel="noopener noreferrer nofollow"&gt;http.ClientRequest&amp;nbsp;&lt;/A&gt;&lt;BR /&gt;
and the &lt;SPAN style="font-family: Courier New"&gt;response&lt;/SPAN&gt; object the &lt;A href="https://nodejs.org/api/http.html#http_class_http_serverresponse" target="_blank" rel="noopener noreferrer nofollow"&gt;http.ServerResponse&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
And that's it about accessing the HTTP API&lt;BR /&gt;
&lt;H2 id="usecases" id="toc-hId-150105124"&gt;Example use cases&lt;/H2&gt;&lt;BR /&gt;
Now let's see why and how we might need to use it&lt;BR /&gt;
&lt;BR /&gt;
A few example use cases where we need access to HTTP API:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;HTTP method&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Query parameters&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Request Headers&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Trigger name&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Response Headers&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Response Body&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Response Status&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;HTTP method&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Sometimes we need to know with which HTTP verb we've been invoked. For instance, if our function should distinguish between GET or POST, etc&lt;BR /&gt;
We can throw an error, or react accordingly&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const httpMethod = request.method&lt;BR /&gt;
if (httpMethod != 'POST'){&lt;BR /&gt;
    response.writeHead(405, {&lt;BR /&gt;
        'Content-Type': 'text/plain',&lt;BR /&gt;
        'Allow': 'POST'&lt;BR /&gt;
    });&lt;BR /&gt;
    response.write('Request failed. Method not allowed. See response headers for hint');&lt;BR /&gt;
    response.end();&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Query parameters&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Query parameters are the params that can be added to a URL after the &lt;SPAN style="font-size: larger;font-family: Courier New"&gt;?&lt;/SPAN&gt;&lt;BR /&gt;
Multiple parameters are appended with &lt;SPAN style="font-size: larger;font-family: Courier New"&gt;&lt;STRONG&gt;&amp;amp;&lt;/STRONG&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
E.g.&lt;BR /&gt;
&lt;SPAN style="color: #0000ff"&gt;xxxxx?customerName=otto&amp;amp;userid=123&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
They’re accessed via the &lt;SPAN style="font-family: Courier New"&gt;query&lt;/SPAN&gt; property&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const name = event.http.request.query.customerName&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It returns the value of the param&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Request Headers&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We can find the headers sent with the request in the headers property&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;request.headers&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Trigger name&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Two interesting headers are those provided by the &lt;EM&gt;FaaS&lt;/EM&gt; runtime, giving info about the used trigger&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const triggerName = request.headers['sap-faas-http-trigger-name']&lt;BR /&gt;
const triggerPath = request.headers['sap-faas-http-trigger-path'] &lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
What is the difference?&lt;BR /&gt;
/&lt;BR /&gt;
Yes, the slash makes the path&lt;BR /&gt;
In our example, the trigger name is &lt;EM&gt;customlogin&lt;/EM&gt; and the path&amp;nbsp; customlogin/&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Response Headers&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In case of response object, we're interested in modifying it.&lt;BR /&gt;
For instance, we might want to send some additional information in the response header, as it might be required by the caller of our function&lt;BR /&gt;
To add own headers to the response:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;response.set('MyHeader', 'MyValue')&lt;BR /&gt;
&lt;BR /&gt;
response.append('CustomHeader', 'CustomValue')&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Alternatively, set multiple headers and status at once&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;response.writeHead(403, {&lt;BR /&gt;
    'Content-Type': 'text/plain',&lt;BR /&gt;
    'FailureHint': 'Authorization required, see docu'&lt;BR /&gt;
});&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Response Body&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In most cases, we set the response body using the standard way in FaaS: as return value&lt;BR /&gt;
However, we might need to switch to http API, due to requirements of caller who might need some custom text in the response body in case of failure, etc&lt;BR /&gt;
If this is the case we can use standard way of &lt;SPAN style="font-family: Courier New"&gt;http.ServerResponse&lt;/SPAN&gt; class&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;response.write('Error. Don't ask admin. Don't see log for no info')&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
As mentioned, we cannot mix the used APIs.&lt;BR /&gt;
If we set a header in the response, then we have to use this way of writing response&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Response Status &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
There can be several reasons why we might wish to set the response status code.&lt;BR /&gt;
For instance, if we don’t support all the HTTP methods, then we have to set the response status to 405, which means Method not allowed&lt;BR /&gt;
Also, we might have special requirements to the incoming call, so we would have to decide on our own to set the status code to 400, Bad Request&lt;BR /&gt;
Please see Links section for reference&lt;BR /&gt;
&lt;BR /&gt;
Setting the response status code to a custom value can be again done in several ways&lt;BR /&gt;
&lt;BR /&gt;
E.g. directly setting the property value:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;response.statusCode = 405&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Or again using the convenience method, where we can set a custom header at the same time:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;response.writeHead(405, {&lt;BR /&gt;
   'Content-Type': 'text/plain',&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="create" id="toc-hId--46408381"&gt;Create sample Function&lt;/H2&gt;&lt;BR /&gt;
To make things less theoretical, you can find here a reusable sample project, which is meant to showcase how the HTTP API can be used.&lt;BR /&gt;
As usual, it is a small silly sample, without real use case, but focusing on demonstrating some capabilities for your convenience, so you can easily copy&amp;amp;paste and adapt for your own needs&lt;BR /&gt;
&lt;BR /&gt;
Please refer to the &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt; for the full sample code&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
In case that it doesn’t suit your needs, you can send me a personal message&lt;BR /&gt;
&lt;BR /&gt;
In this example, we’re simulating a kind of strange special login process for a customer app&lt;BR /&gt;
The user of the function is required to pass a couple of pieces of login information:&lt;BR /&gt;
&lt;BR /&gt;
Customer Name as query param&lt;BR /&gt;
Customer Password as request header&lt;BR /&gt;
Authorization scope as body in a POST request&lt;BR /&gt;
As such, only POST is supported&lt;BR /&gt;
In addition, our function simulates usage of multiple endpoints and only one of them is meant for productive usage with login&lt;BR /&gt;
As such, the function code has to access request header to determine the used trigger&lt;BR /&gt;
&lt;H3 id="toc-hId--113839167"&gt;Code walkthrough&lt;/H3&gt;&lt;BR /&gt;
Our function does nothing than accessing the HTTP API and using it for some login-checks&lt;BR /&gt;
In case of success, it does nothing, just return some silly text&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Preparation&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
First we declare the usage of the HTTP API in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"functions": {&lt;BR /&gt;
   "function-with-httpapi": {&lt;BR /&gt;
      "httpApi": true&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Then we can access the HTTP API in function code.&lt;BR /&gt;
Otherwise, the object would be empty&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const request = event.http.request&lt;BR /&gt;
const response = event.http.response&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now, in our function, we can implement custom checks which wouldn't be possible without the HTTP API.&lt;BR /&gt;
Our function contains 4 checks:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;1. Check for correct HTTP verb:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const httpMethod = request.method&lt;BR /&gt;
if (httpMethod != 'POST'){&lt;BR /&gt;
    response.writeHead(405, {&lt;BR /&gt;
        'Content-Type': 'text/plain',&lt;BR /&gt;
        'Allow': 'POST'&lt;BR /&gt;
    });&lt;BR /&gt;
    response.write('Request failed. Method not allowed. See response headers for hint');&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;2. Check for desired productive endpoint&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt; we’ve defined 2 triggers.&lt;BR /&gt;
The only reason for the second one (&lt;EM&gt;nologin&lt;/EM&gt;) is to be able to run this check&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const triggerName = request.headers['sap-faas-http-trigger-name']&lt;BR /&gt;
if(triggerName != 'customlogin'){&lt;BR /&gt;
    response.statusCode = 400&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;3. Check for authentication&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note that we don’t verify the customer name, only password – for the sake of simplicity&lt;BR /&gt;
We need to access the request header&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const customerAuth = request.headers['customer-auth']&lt;BR /&gt;
if(! customerAuth){&lt;BR /&gt;
    response.writeHead(401, {&lt;BR /&gt;
        'Content-Type': 'text/plain',&lt;BR /&gt;
        'FailureHint': 'Required: request header customer-auth containing customer password'&lt;BR /&gt;
    });&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;4. Check scope&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We use this to show how to access the request body&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;if((! request.body) || (JSON.parse(request.body).customerAccess != 'true')){&lt;BR /&gt;
    response.writeHead(403, {&lt;BR /&gt;
        'FailureHint': 'Authorization required...'&lt;BR /&gt;
        &lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Success response&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
If the request has passed all checks, then we do nothing,&lt;BR /&gt;
Just note that here we’re using the standard way of using a function:&lt;BR /&gt;
The response body is sent as return value of the function&lt;BR /&gt;
When I mentioned earlier that we cannot mix the HTTP API with standard API, I meant we cannot mix in one response definition. But here, in case of success, we don't do any custom header setting, etc, so we can just return a text&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const customerName = request.query.customerName &lt;BR /&gt;
return `Function called successfully. Customer '${customerName}' is welcome.`&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="run" id="toc-hId--439435391"&gt;Run the sample Function&lt;/H2&gt;&lt;BR /&gt;
Let's deploy and run the sample action, to see our HTTP API implementation in action&lt;BR /&gt;
After deploy, we want to see if your checks are executed properly and if we get the expected results in response body , status and header&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;span class="lia-unicode-emoji" title=":right_arrow:"&gt;➡️&lt;/span&gt;1. Wrong HTTP verb&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In our first example, we choose to use a wrong HTTP method, to see our first check working&lt;BR /&gt;
&lt;TABLE style="height: 117px;width: 100%;border-collapse: collapse;border-style: none" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Request&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;URL&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;&lt;A href="https://...faas.../customlogin/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...faas.../customlogin/&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Verb&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;GET&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Response&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Error text&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Status&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;405&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;allow&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
See result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/postman_405.jpg" height="210" width="401" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;span class="lia-unicode-emoji" title=":right_arrow:"&gt;➡️&lt;/span&gt;2. Wrong endpoint&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now we use the correct HTTP method, but the wrong trigger&lt;BR /&gt;
&lt;TABLE style="height: 117px;width: 100%;border-collapse: collapse;border-style: none" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Request&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;URL&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;&lt;A href="https://...faas.../nologin/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...faas.../nologin/&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Verb&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;POST&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-family: Courier New"&gt;&lt;SPAN style="font-size: 11.6667px"&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Response&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Error text&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Status&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;400&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
See result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/2postman_400.jpg" height="123" width="398" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;span class="lia-unicode-emoji" title=":right_arrow:"&gt;➡️&lt;/span&gt;3. Missing authentication&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Next try: correct endpoint, but we don't send the required authentication data&lt;BR /&gt;
&lt;TABLE style="height: 117px;width: 100%;border-collapse: collapse;border-style: none" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Request&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;URL&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;&lt;A href="https://...faas.../customlogin/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...faas.../customlogin/&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Verb&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;POST&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-family: Courier New"&gt;&lt;SPAN style="font-size: 11.6667px"&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Response&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Error text&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Status&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;401&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;failurehint&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
See result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/postman_401.jpg" height="213" width="395" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;span class="lia-unicode-emoji" title=":right_arrow:"&gt;➡️&lt;/span&gt;4. Missing authorization&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We send a request with mostly correct settings, only the scope, to be passed in the request body, is&amp;nbsp; missing&lt;BR /&gt;
&lt;TABLE style="height: 117px;width: 100%;border-collapse: collapse;border-style: none" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Request&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;URL&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;&lt;A href="https://...faas.../customlogin/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...faas.../customlogin/&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Verb&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;POST&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;customer-auth : abc123&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-family: Courier New"&gt;&lt;SPAN style="font-size: 11.6667px"&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Response&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Error text&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Status&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;403&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;failurehint&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
See result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/4postman_403-1.jpg" height="77" width="401" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;SPAN style="text-decoration: underline"&gt;&lt;span class="lia-unicode-emoji" title=":right_arrow:"&gt;➡️&lt;/span&gt;5. Successful call&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
Finally we send a request with correct settings, including the name parameter in the URL&lt;BR /&gt;
&lt;TABLE style="height: 117px;width: 100%;border-collapse: collapse;border-style: none" border="0"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Request&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;URL&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;&lt;A href="https://...faas.../customlogin/?customerName=otto" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...faas.../customlogin/?customerName=otto&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Verb&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;POST&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;customer-auth : abc123&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;{ "customerAccess" : "true" }&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;height: 13px" colspan="2"&gt;&lt;STRONG&gt;Response&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Body&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Success text&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Status&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;200&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 13px"&gt;&lt;BR /&gt;
&lt;TD style="width: 9.68%;height: 13px"&gt;&lt;SPAN style="font-size: smaller"&gt;Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 90.32%;height: 13px"&gt;&lt;SPAN style="font-size: smaller;font-family: Courier New"&gt;-&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
See result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/5postman_200.jpg" height="191" width="375" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--635948896"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
In this tutorial, we’ve learned which steps are required to access the HTTP API&lt;BR /&gt;
This is probably not necessary in most use cases of serverless function&lt;BR /&gt;
But sometimes it required, so we need to know how it works&lt;BR /&gt;
&lt;BR /&gt;
We've learned that we need to enable it first i&lt;SPAN style="font-size: 1rem"&gt;n &lt;/SPAN&gt;&lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;SPAN style="font-size: 1rem"&gt;&lt;BR /&gt;
Then we can access it via the &lt;SPAN style="font-family: Courier New"&gt;event.http &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: 1rem"&gt;property&lt;BR /&gt;
And we've understood that we can use the standard node.js http methods&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--832462401"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
faas.json:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"my-function": {&lt;BR /&gt;
   "httpApi": true&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Function code:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const request = event.http.request&lt;BR /&gt;
const response = event.http.response&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="links" id="toc-hId--681721549"&gt;Links&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Reference for underlying HTTP API: &lt;A href="https://nodejs.org/api/http.html" target="_blank" rel="noopener noreferrer nofollow"&gt;https://nodejs.org/api/http.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;API for request: &lt;A href="https://nodejs.org/api/http.html#http_class_http_clientrequest" target="_blank" rel="noopener noreferrer nofollow"&gt;https://nodejs.org/api/http.html#http_class_http_clientrequest&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;API for response: &lt;A href="https://nodejs.org/api/http.html#http_class_http_serverresponse" target="_blank" rel="noopener noreferrer nofollow"&gt;https://nodejs.org/api/http.html#http_class_http_serverresponse&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Spec for status codes: &lt;A href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener noreferrer nofollow"&gt;https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Spec for status code 401:&amp;nbsp;&lt;A href="https://tools.ietf.org/html/rfc7235#section-3.1" target="_blank" rel="noopener noreferrer nofollow"&gt;https://tools.ietf.org/html/rfc7235#section-3.1&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Spec for status code 403: &lt;A href="https://tools.ietf.org/html/rfc7231#section-6.5.3" target="_blank" rel="noopener noreferrer nofollow"&gt;https://tools.ietf.org/html/rfc7231#section-6.5.3&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Spec for status code 405: &lt;A href="https://tools.ietf.org/html/rfc7231#section-6.5.5" target="_blank" rel="noopener noreferrer nofollow"&gt;https://tools.ietf.org/html/rfc7231#section-6.5.5&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="samples" id="toc-hId--878235054"&gt;Appendix: All Project Files&lt;/H2&gt;&lt;BR /&gt;
Here you can find the project files used for the sample, ready for copy&amp;amp;paste&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "project": "httpapiproject",&lt;BR /&gt;
  "version": "1",&lt;BR /&gt;
  "runtime": "nodejs10",&lt;BR /&gt;
  "library": "./src",&lt;BR /&gt;
  "functions": {&lt;BR /&gt;
    "function-with-httpapi": {&lt;BR /&gt;
      "module": "mymodule.js",&lt;BR /&gt;
      "httpApi": true&lt;BR /&gt;
    }&lt;BR /&gt;
  },&lt;BR /&gt;
  "triggers": {&lt;BR /&gt;
    "customlogin": {&lt;BR /&gt;
      "type": "HTTP",&lt;BR /&gt;
      "function": "function-with-httpapi"&lt;BR /&gt;
    },&lt;BR /&gt;
    "nologin": {&lt;BR /&gt;
      "type": "HTTP",&lt;BR /&gt;
      "function": "function-with-httpapi"&lt;BR /&gt;
    }&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Adding dev dependency for local testing&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "devDependencies": {&lt;BR /&gt;
    "@sap/faas": "&amp;gt;=0.7.0"&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;mymodule.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = async function (event, context) {&lt;BR /&gt;
&lt;BR /&gt;
    // to access HTTP API, add param to function definition in faas.json: "httpApi": true&lt;BR /&gt;
	const request = event.http.request&lt;BR /&gt;
	const response = event.http.response&lt;BR /&gt;
    &lt;BR /&gt;
    // check request method&lt;BR /&gt;
    const httpMethod = request.method&lt;BR /&gt;
    if (httpMethod != 'POST'){&lt;BR /&gt;
        response.writeHead(405, {&lt;BR /&gt;
            'Content-Type': 'text/plain',&lt;BR /&gt;
            'Allow': 'POST'&lt;BR /&gt;
        });&lt;BR /&gt;
        response.write('Request failed. Method not allowed. See response headers for hint');&lt;BR /&gt;
        response.end();&lt;BR /&gt;
        return&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
	// check which HTTP trigger was used&lt;BR /&gt;
    const triggerName = request.headers['sap-faas-http-trigger-name']&lt;BR /&gt;
    if(triggerName != 'customlogin'){&lt;BR /&gt;
        response.statusCode = 400&lt;BR /&gt;
        response.write("Endpoint not supported. Use 'customlogin' endpoint")&lt;BR /&gt;
        response.end();&lt;BR /&gt;
        return&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
	// check authentication via request header&lt;BR /&gt;
    const customerAuth = request.headers['customer-auth']&lt;BR /&gt;
    if(! customerAuth){&lt;BR /&gt;
        response.writeHead(401, {&lt;BR /&gt;
            'Content-Type': 'text/plain',&lt;BR /&gt;
            'FailureHint': 'Required: request header customer-auth containing customer password'&lt;BR /&gt;
        });&lt;BR /&gt;
        response.write('Request failed. Unauthorized. Customer login data missing. See hint for more info');&lt;BR /&gt;
        response.end();&lt;BR /&gt;
        return&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
    // check authorization via request body &lt;BR /&gt;
    if((! request.body) || (JSON.parse(request.body).customerAccess != 'true')){&lt;BR /&gt;
        response.writeHead(403, {&lt;BR /&gt;
            'Content-Type': 'text/plain',&lt;BR /&gt;
            'FailureHint': 'Authorization for customer required: Request body with customer JSON access must be true'&lt;BR /&gt;
        });&lt;BR /&gt;
        response.write('Request failed. Forbidden. Customer authorization not sufficient. See hint for more info');&lt;BR /&gt;
        response.end();&lt;BR /&gt;
        return    &lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
    // use standard way of writing response&lt;BR /&gt;
    const customerName = request.query.customerName &lt;BR /&gt;
    return `Function called successfully. Customer '${customerName}' is welcome.`&lt;BR /&gt;
};&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-11-how-and-why-access-http-api/ba-p/13481267"/>
    <published>2020-10-15T09:57:49+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-13-secure-scenario-with-scope-and-consumer/ba-p/13466000</id>
    <title>Writing Function-as-a-Service [13]: Secure scenario with scope and consumer</title>
    <updated>2020-10-29T15:06:37+01:00</updated>
    <author>
      <name>CarlosRoggan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/5495</uri>
    </author>
    <content>This blog is part of a&amp;nbsp;&lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;series of tutorials&lt;/A&gt;&amp;nbsp;explaining how to write serverless functions using the Functions-as-a-Service offering in&amp;nbsp;&lt;STRONG&gt;SAP Cloud Platform Serverless Runtime&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;Quicklinks:&lt;BR /&gt;
&lt;SPAN style="font-size: smaller"&gt;&lt;A href="#quickguide" target="_blank" rel="nofollow noopener noreferrer"&gt;Quick Guide&lt;/A&gt;&lt;BR /&gt;
&lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Sample Code&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-934458942"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
In the &lt;A href="https://blogs.sap.com/2020/10/29/writing-function-as-a-service-12-adding-security/" target="_blank" rel="noopener noreferrer"&gt;previous blog&lt;/A&gt; we’ve learned the basics about protecting a function with OAuth&lt;BR /&gt;
What we didn’t learn: our function didn’t require a &lt;STRONG&gt;scope&lt;BR /&gt;
&lt;/STRONG&gt;In this blog, let’s learn how to enforce a scope in the JWT token and&lt;BR /&gt;
- assign the scope to our user and call the function (REST client)&lt;BR /&gt;
- call the function from a client application (node.js)&lt;BR /&gt;
&lt;H2 id="toc-hId-737945437"&gt;Overview&lt;/H2&gt;&lt;BR /&gt;
Small recap:&lt;BR /&gt;
In the previous tutorial, we’ve created a very silly small function and we’ve used framework functionality to protect it with small configuration snippet.&lt;BR /&gt;
Furthermore, we created a very basic instance of XSUAA and connect the function to it&lt;BR /&gt;
That was enough to protect our function with OAuth 2.0&lt;BR /&gt;
The FaaS Runtime took care of rejecting HTTP requests which didn't send a valid JWT token&lt;BR /&gt;
The FaaS Runtime used the connected XSUAA instance for validation&lt;BR /&gt;
That was OK.&lt;BR /&gt;
Fair enough for the beginning&lt;BR /&gt;
Now, in today's tutorial we’re going to&lt;BR /&gt;
- add a scope&lt;BR /&gt;
- and in the function we check if the scope exists in the JWT&lt;BR /&gt;
&lt;BR /&gt;
These are the steps we're going to cover:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create XSUAA&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create Function&lt;BR /&gt;
Implement scope check&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Call Function in user centric scenario&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Call Function with client app&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-541431932"&gt;Prerequisites&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Basic understanding of OAuth, &lt;A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer"&gt;see easy intro&lt;/A&gt;&amp;nbsp;and &lt;A href="https://blogs.sap.com/2019/04/29/sap-cloud-platform-backend-service-tutorial-13-api-called-from-external-tool/" target="_blank" rel="noopener noreferrer"&gt;description for using REST client&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2020/10/29/writing-function-as-a-service-12-adding-security/" target="_blank" rel="noopener noreferrer"&gt;Previous blog&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;HTTP API &lt;A href="https://blogs.sap.com/2020/10/15/writing-function-as-a-service-11-how-and-why-access-http-api/" target="_blank" rel="noopener noreferrer"&gt;blog post&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-344918427"&gt;1. Create Instance of XSUAA&lt;/H2&gt;&lt;BR /&gt;
We need an instance of XSUAA which is configured with a &lt;STRONG&gt;scope&lt;BR /&gt;
&lt;/STRONG&gt;We can &lt;A href="#commands" target="_blank" rel="nofollow noopener noreferrer"&gt;update&lt;/A&gt; the existing one, or create a new one&lt;BR /&gt;
In my example, I create a new instance with the following security configuration in a file called&amp;nbsp;&lt;SPAN style="font-family: Courier New"&gt;xs-security_faas_scope.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaaswithscope",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "scopes": [&lt;BR /&gt;
    {&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeforfunction",&lt;BR /&gt;
      "description": "Scope required for accessing function"&lt;BR /&gt;
    }&lt;BR /&gt;
  ],&lt;BR /&gt;
  "role-templates": [ { &lt;BR /&gt;
    "name"                : "FunctionRoleTemplate", &lt;BR /&gt;
    "description"         : "Role for serverless function", &lt;BR /&gt;
    "default-role-name"   : "RoleForFunction",&lt;BR /&gt;
    "scope-references"    : ["$XSAPPNAME.scopeforfunction"]&lt;BR /&gt;
  }],&lt;BR /&gt;
  "authorities":["$XSAPPNAME.scopeforfunction"]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;Explanation:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;scopes&lt;/SPAN&gt;&lt;BR /&gt;
We define a scope.&lt;BR /&gt;
For us, thie means: when calling the function, a JWT token is not enough. The caller must have the scope. If yes, the scope is contained in the token&lt;BR /&gt;
However, in the security configuration we only define the scope, such that XSUAA knows about it&lt;BR /&gt;
If things go well (see below) XSUAA will issue a JWT token that contains the scope&lt;BR /&gt;
However, XSUAA doesn't enforce the scope.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;role-templates&lt;/SPAN&gt;&lt;BR /&gt;
A scope is nothing that can be assigned to a human user. For that, we need to define a “role”, along with “role-template”. That can be found in the Cloud Cockpit and an admin can assign the role to users&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;authorities&lt;/SPAN&gt;&lt;BR /&gt;
This attribute is meant for non-human users, for client apps, in a client-credentials scenario&lt;BR /&gt;
With this statement, we accept that scope. A client application bound to XSUAA will get the scope in the JWT token&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Create XSUAA&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
We create an instance of XSUAA and we use above JSON parameters&lt;BR /&gt;
Can be done in the Cloud Cockpit, or on command line:&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf&amp;nbsp;cs&amp;nbsp;xsuaa&amp;nbsp;application&amp;nbsp;xsuaa_faas_scope&amp;nbsp;-c&amp;nbsp;xs-security_faas_scope.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Create Service Key&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
As usual, we need a service key in order to reference it from FaaS and also from REST client (see below)&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf csk xsuaa_faas_scope xsuaa_faasscope_servicekey&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
See &lt;A href="#commands" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt; for all commands&lt;BR /&gt;
&lt;H2 id="toc-hId-148404922"&gt;2. Create Function&lt;/H2&gt;&lt;BR /&gt;
After creating an instance of XSUAA service, we need to register it in FaaS, and use it in the function definition.&lt;BR /&gt;
We’ve learned that in a &lt;A href="https://blogs.sap.com/2020/07/23/writing-function-as-a-service-8-how-to-easily-use-platform-services/" target="_blank" rel="noopener noreferrer"&gt;previous tutorial&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;Register the service in faas&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
For your convenience, find here the necessary commands&lt;BR /&gt;
&lt;BR /&gt;
Always need to login first to Cloud Foundry and/or FaaS client&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli login&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The convenient command to register a service interactively (the command line client will propose existing services, so we can choose. Precondition: only service instances with service key are proposed)&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service register&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
After registration, in the console, we get the info which we need to specify in &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;:&lt;BR /&gt;
the service key and the GUID of the service instance&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Use the service in FaaS project&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;    "services": {&lt;BR /&gt;
        "xsuaa-with-scope": {&lt;BR /&gt;
            "type": "xsuaa",&lt;BR /&gt;
            "instance": "&amp;lt;your GUID of service instance&amp;gt;",&lt;BR /&gt;
            "key": "xsuaa_faasscope_servicekey"         &lt;BR /&gt;
        }&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
See &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt; for full &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Configure Security&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
As learned in previous blog post, with below setting, we tell the FaaS runtime that we want them to enforce a valid JWT token&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"triggers": {&lt;BR /&gt;
   "prot": {&lt;BR /&gt;
      "type": "HTTP",&lt;BR /&gt;
         "function": "prot-func-with-scope",&lt;BR /&gt;
            "auth": {&lt;BR /&gt;
               "type": "xsuaa",&lt;BR /&gt;
               "service": "xsuaa-with-scope"&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Enforce scope&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
As mentioned earlier: the above setting will have the following consequence:&lt;BR /&gt;
&lt;BR /&gt;
Whenever our function is called with HTTP trigger, the request must contain a valid JWT token&lt;BR /&gt;
Otherwise the call is rejected by the FaaS runtime (with proper status code and error message) and our function code is not even invoked.&lt;BR /&gt;
&lt;BR /&gt;
As such, the FaaS runtime enforces the authentication.&lt;BR /&gt;
But it cannot take care of authorization in a generic way&lt;BR /&gt;
&lt;BR /&gt;
For example, a function might have the following logic:&lt;BR /&gt;
If EDIT scope is available, the function may accept POST requests, otherwise only GET&lt;BR /&gt;
Such logic has to be implemented manually by us&lt;BR /&gt;
&lt;BR /&gt;
We have to look into the JWT token, read the available scopes and check if the one which we require, is there.&lt;BR /&gt;
The framework offers a convenience method which decodes the JWT token (if available)&lt;BR /&gt;
We can then access the JWT payload as JSON object&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const jwtToken = event.decodeJsonWebToken()&lt;BR /&gt;
const jwtScopes = jwtToken.payload.scope&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
In order to check the scope, we need to know the exact scope name.&lt;BR /&gt;
Background:&lt;BR /&gt;
&lt;BR /&gt;
We defined the scope name as&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;$XSAPPNAME.scopeforfunction&lt;/SPAN&gt;&lt;BR /&gt;
The value of the variable &lt;SPAN style="font-family: Courier New"&gt;$XSAPPNAME&lt;/SPAN&gt; is generated on the cloud platform, as such we have to ask at runtime for the exact value.&lt;BR /&gt;
The exact value is contained in the service key&lt;BR /&gt;
And the service key is registered in FaaS&lt;BR /&gt;
As such, we can ask FaaS for the xsuaa service&lt;BR /&gt;
Then access the &lt;SPAN style="font-family: Courier New"&gt;xsappname&lt;/SPAN&gt; property&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const xsuaaCredentials = await context.getServiceCredentialsJSON('xsuaa-with-scope')&lt;BR /&gt;
const requiredScope = xsuaaCredentials.xsappname + '.scopeforfunction'&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Based on above 2 code snippets we have the needed information:&lt;BR /&gt;
Which scope do we expect (for whatever business case)&lt;BR /&gt;
Which scope is contained in the JWT token&lt;BR /&gt;
&lt;BR /&gt;
In our example, we require a scope for calling the function.&lt;BR /&gt;
To check if the scope is sent, we just look into the array of available scopes&lt;BR /&gt;
If not available, we reject the request.&lt;BR /&gt;
In our case, the correct status code is 403, because use is authenticated, but lacking authorization&lt;BR /&gt;
In order to set the status, we need to use the HTTP API (see previous &lt;A href="https://blogs.sap.com/2020/10/15/writing-function-as-a-service-11-how-and-why-access-http-api/" target="_blank" rel="noopener noreferrer"&gt;blog post&lt;/A&gt;)&lt;BR /&gt;
&lt;BR /&gt;
Below snippet puts the snippets together:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const xsuaaCredentials = await context.getServiceCredentialsJSON('xsuaa-with-scope')&lt;BR /&gt;
const requiredScope = xsuaaCredentials.xsappname + '.scopeforfunction'&lt;BR /&gt;
&lt;BR /&gt;
// read the JWT token and check required scope&lt;BR /&gt;
const jwtToken = event.decodeJsonWebToken()&lt;BR /&gt;
const jwtScopes = jwtToken.payload.scope&lt;BR /&gt;
if(! jwtScopes.includes(requiredScope)){&lt;BR /&gt;
   // fail with 403       &lt;BR /&gt;
   const response = event.http.response // must be enabled in faas.json&lt;BR /&gt;
   response.writeHead(403, {&lt;BR /&gt;
   ...&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
See &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt; for full sample code&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Before using the HTTP API, it must be enabled, which is done in the &lt;SPAN style="font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
SAP provides security libraries and there’s a little helper function, recommended to use for the scope check&lt;BR /&gt;
The function I’m talking about:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241"&gt;@Sisn&lt;/a&gt;/xssec: checkScope(scope)&lt;/SPAN&gt;&lt;BR /&gt;
Please refer to Links section&lt;BR /&gt;
In my examples, I’d like to keep the code free from dependencies (as there might be changes, etc), so I’m not using it. Please forgive&lt;BR /&gt;
But for your convenience, I've created little sample code based on the library. See &lt;A href="#samplewithlib" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Deploy function&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
To deploy the function, you might find this command useful (run from project directory)&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project deploy&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--48108583"&gt;3.&amp;nbsp;&lt;STRONG&gt;Call function in user centric scenario&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
After deploy, we want to test the security of our function&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;If we call the function in browser –&amp;gt; error&lt;BR /&gt;
Reason: no JWT token at all&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If we call the function in REST client with OAuth flow –&amp;gt; error&lt;BR /&gt;
Reason: JWT token available, but doesn't contain the required scope&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Solution: To call the function we need to assign the required role to our user&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;The Role&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In Cloud Foundry, authorization is controlled by means of Role Based Access Control (RBAC)&lt;BR /&gt;
In the first step, we created an instance of XSUAA, based on a security configuration which defined a scope and a role-template.&lt;BR /&gt;
After creating our instance of XSUAA, our role-definition has been added to the list of roles in the cockpit.&lt;BR /&gt;
We can view it there&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/cockpit_roles-1.jpg" height="131" width="394" /&gt;&lt;/P&gt;&lt;BR /&gt;
But viewing is not enough, we have to add the role to our user.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Assign Role to User&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
First, we create a new &lt;EM&gt;Role Collection&lt;/EM&gt;, dedicated for your function&lt;BR /&gt;
In the Cockpit, go to your subaccount-&amp;gt;Security-&amp;gt; Role Collections&lt;BR /&gt;
&lt;BR /&gt;
Second, we have to add the desired role to the new Role Collection&lt;BR /&gt;
So we “edit” the new role collection and add our new role&lt;BR /&gt;
Then press “save”&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/cockpit_rc.jpg" height="98" width="237" /&gt;&lt;/P&gt;&lt;BR /&gt;
Third, we need to add our Role Collection to the Identity Provider (IDP)&lt;BR /&gt;
Go to menu entry &lt;EM&gt;Trust Configuration&lt;/EM&gt;&lt;BR /&gt;
Click on default IDP&lt;BR /&gt;
Enter the E-Mail Address of your user&lt;BR /&gt;
Click “show Assignments”&lt;BR /&gt;
Then “Assign Role Collection”&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/cockpit_trust-1.jpg" height="189" width="403" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;Test the function with human user&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now that our user has the required role, we can call the function&lt;BR /&gt;
We don’t have a user interface in our scenario, so we use a REST client&lt;BR /&gt;
See &lt;A href="https://blogs.sap.com/2019/04/29/sap-cloud-platform-backend-service-tutorial-13-api-called-from-external-tool/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; for a detailed description about how to call an OAuth protected endpoint with REST client&lt;BR /&gt;
&lt;BR /&gt;
Short description:&lt;BR /&gt;
1. fetch a JWT token&lt;BR /&gt;
2. Use token when calling our function&lt;BR /&gt;
&lt;BR /&gt;
In my example, I’m using Postman which helps to do both steps in one request&lt;BR /&gt;
To configure postman request, we need to view the service key of our xsuaa instance which we created above&lt;BR /&gt;
To view the service key, we can use the following command (alternatively, use cockpit)&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf service-key xsuaa_faas_scope xsuaa_faasscope_servicekey&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Back in Postman, we have to configure the request as follows&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Method&lt;/SPAN&gt;: GET&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;URL&lt;/SPAN&gt;: The endpoint of our function, we get the info during deploy, or with xfsrt-cli faas project get&lt;BR /&gt;
e.g. &lt;SPAN style="color: #0000ff"&gt;&lt;A href="https://...-faas.....functions.xfs.cloud.sap/prot/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://...-faas.....functions.xfs.cloud.sap/prot/&lt;/A&gt;&lt;BR /&gt;
&lt;/SPAN&gt;Don’t forget the slash at the end&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Authorization&lt;/SPAN&gt;: Oauth 2.0&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Access Token&lt;/SPAN&gt;:&lt;BR /&gt;
press "Get new Access Token"&lt;BR /&gt;
"Get Access Token" Dialog:&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Grant Type&lt;/SPAN&gt;: Password Credentials&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Access Token URL&lt;/SPAN&gt;: we copy the “url” property from the service key and append&amp;nbsp;&amp;nbsp; &lt;SPAN style="color: #0000ff"&gt;/oauth/token&lt;BR /&gt;
&lt;/SPAN&gt;Example: &lt;SPAN style="color: #0000ff"&gt;&lt;A href="https://&amp;lt;subaccount&amp;gt;.authentication.....hana.ondemand.com/oauth/token" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://&amp;lt;subaccount&amp;gt;.authentication.....hana.ondemand.com/oauth/token&lt;/A&gt;&lt;BR /&gt;
&lt;/SPAN&gt;&lt;SPAN style="font-family: Courier New"&gt;Username&lt;/SPAN&gt;: &amp;lt;your cloud user&amp;gt;&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Password&lt;/SPAN&gt;: &amp;lt;your cloud user password&amp;gt;&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Client ID&lt;/SPAN&gt;: copy the value of property &lt;SPAN style="font-family: Courier New"&gt;clientid&lt;/SPAN&gt; from service key&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Client Secret&lt;/SPAN&gt;: copy the value of property &lt;SPAN style="font-family: Courier New"&gt;clientsecret&lt;/SPAN&gt; from service key&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;Client Authentication&lt;/SPAN&gt;: choose "Send as Basic Auth header"&lt;BR /&gt;
&lt;BR /&gt;
Then press “Request Token” on the dialog&lt;BR /&gt;
After getting the token response, press “Use Token”&lt;BR /&gt;
Then, back in the main Postman window, press “Send” to send the request to the Function endpoint&lt;BR /&gt;
&lt;BR /&gt;
As a result, we get our success message, which proves that the scope was included in the JWT token&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/postmanSuccess.jpg" height="220" width="432" /&gt;&lt;/P&gt;&lt;BR /&gt;
Now we want to do the negative test, to check our function implementation works correctly and if the correct status code is sent&lt;BR /&gt;
To do so, we have to remove the role from our user.&lt;BR /&gt;
We can simply unassign the role collection in the "Trust Configuration"&lt;BR /&gt;
Afterwards, we need to fetch a new JWT token via “Get New Access Token”&lt;BR /&gt;
Then send the request again to call the function without scope&lt;BR /&gt;
&lt;BR /&gt;
The result is &lt;SPAN style="font-family: Courier New"&gt;403&lt;/SPAN&gt;, as coded by us, and the response message shows that the scope is not contained in the JWT token&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/postman403.jpg" height="72" width="433" /&gt;&lt;/P&gt;&lt;BR /&gt;
Note:&lt;BR /&gt;
In this scenario, we’re using only one instance of XSUAA&lt;BR /&gt;
The function uses an instance of XSUAA to protect its endpoint&lt;BR /&gt;
The user who calls the function, uses the same ClientID to call the function&lt;BR /&gt;
This is OK, because we as developers of the function trust our user&lt;BR /&gt;
In case that 2 instances of XSUAA are required, please refer to &lt;A href="https://blogs.sap.com/2020/06/02/how-to-call-protected-app-from-external-app-as-external-user-with-scope/" target="_blank" rel="noopener noreferrer"&gt;this blog for more information&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--244622088"&gt;4.&amp;nbsp;&lt;STRONG&gt;Call function in client credentials scenario&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
Now we want to call the protected function from an application&lt;BR /&gt;
Again, we’re using only one instance of XSUAA.&lt;BR /&gt;
We bind our application to the same instance which is used to protect the function&lt;BR /&gt;
(Sure, in a future blog, we’ll describe a scenario with different XSUAA instances)&lt;BR /&gt;
&lt;BR /&gt;
In client credentials scenario, we may wonder: how to assign the required scope to the calling app?&lt;BR /&gt;
We cannot assign it in the cockpit like we did for our (human) user.&lt;BR /&gt;
To answer this question, somebody wrote &lt;A href="https://blogs.sap.com/2020/06/02/how-to-call-protected-app-from-external-app-as-external-user-with-scope/" target="_blank" rel="noopener noreferrer"&gt;this useful blog post&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Our example is a bit different from above blog post, because both the function and the client app are "bound" to the same instance of XSUAA&lt;BR /&gt;
The solution in our example:&lt;BR /&gt;
When creating an instance of XSUAA, we defined a parameter called &lt;SPAN style="font-family: Courier New"&gt;authorities&lt;BR /&gt;
&lt;/SPAN&gt;This is interesting and might be a new learning for us:&lt;BR /&gt;
The function is attached to the XSUAA instance and the client app is bound to the same instance&lt;BR /&gt;
As such, we would expect that the xsuaa instance (== OAuth client) trusts itself, because it is the same instance&lt;BR /&gt;
In fact, trust is there. But the scope is not automatically there&lt;BR /&gt;
In a client-credentials scenario, the scope must be explicitly granted, just like we assign a role to a user&lt;BR /&gt;
To assign the scope to the client itself, no “grant” statement is required, but the &lt;SPAN style="font-family: Courier New"&gt;authorities&lt;/SPAN&gt; statement is necessary&lt;BR /&gt;
This statement declares: our application wants to take the scope&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;"authorities":["$XSAPPNAME.scopeforfunction"]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Create Client app&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The only intention of our app is to call the function – and to send a JWT token which contains the required scope&lt;BR /&gt;
Well... we’ve just learned how to get the required scope into the JWT token&lt;BR /&gt;
Nothing special needs to be done in the app code&lt;BR /&gt;
Just fetch a JWT token and then call the function&lt;BR /&gt;
So we can skip explanations.&lt;BR /&gt;
We can go ahead and copy the code from the &lt;A href="#samples" target="_blank" rel="nofollow noopener noreferrer"&gt;Appendix&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Don’t forget to replace the &lt;SPAN style="font-family: Courier New"&gt;FUNC_HOST&lt;/SPAN&gt; URL with the URL of your function&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
You might need to change the app name in the &lt;SPAN style="font-family: Courier New"&gt;manifest.yml&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Then deploy the clientapp with &lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf push&lt;BR /&gt;
&lt;/SPAN&gt;Finally, invoke the endpoint of our function caller app and hope to get a success message&lt;BR /&gt;
&lt;SPAN style="color: #0000ff"&gt;&lt;A href="http://functioncallerapp.cfapps.sap.hana.ondemand.com/call" target="test_blank" rel="nofollow noopener noreferrer"&gt;http://functioncallerapp.cfapps.sap.hana.ondemand.com/call&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/clientappSuccess.jpg" height="55" width="435" /&gt;&lt;/P&gt;&lt;BR /&gt;
To test the negative scenario, we have to remove the &lt;SPAN style="font-family: Courier New"&gt;authorities&lt;/SPAN&gt; statement from our &lt;SPAN style="font-family: Courier New"&gt;xs-security_faas_scope.json&lt;/SPAN&gt; file and then execute an update-service command in Cloud Foundry&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf&amp;nbsp;update-service&amp;nbsp;xsuaa_faas_scope&amp;nbsp;-c&amp;nbsp;xs-security_faas_scope.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Note:&lt;BR /&gt;
Instead of deleting the “authorities” statement, we can invalidate it by changing the name of the scope to anything non-existing&lt;BR /&gt;
e.g.&lt;BR /&gt;
&lt;SPAN style="font-family: Courier New"&gt;"authorities":["$XSAPPNAME.scopeforfunctionXX"]&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
In fact, after running update-service, we can invoke our endpoint again and we get the expected error message:&lt;BR /&gt;
It says that the function responded with 403, which was expected&lt;BR /&gt;
&lt;H2 id="toc-hId--441135593"&gt;Summary&lt;/H2&gt;&lt;BR /&gt;
We’ve learned that the FaaS runtime uses XSUAA for token validation, there’s no automatic check of available scopes&lt;BR /&gt;
To manually check the available scopes, we can access the decoded JW T token&lt;BR /&gt;
We need to access the scope prefix from xsuaa service key&lt;BR /&gt;
In client-credentials scenario, we need to use the &lt;SPAN style="font-family: Courier New"&gt;authorities&lt;/SPAN&gt; statement to assign the scope to ourselves&lt;BR /&gt;
&lt;H2 id="quickguide" id="toc-hId--637649098"&gt;Quick Guide&lt;/H2&gt;&lt;BR /&gt;
Few Code snippets&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;// access registered xsuaa service in order to get the value of variable $XSAPPNAME&lt;BR /&gt;
const xsuaaCredentials = await context.getServiceCredentialsJSON('xsuaa-with-scope')&lt;BR /&gt;
const requiredScope = xsuaaCredentials.xsappname + '.scopeforfunction'&lt;BR /&gt;
&lt;BR /&gt;
// the decoded JWT token&lt;BR /&gt;
const jwtTokenDecoded = event.decodeJsonWebToken()&lt;BR /&gt;
&lt;BR /&gt;
// the raw JWT token&lt;BR /&gt;
const jwtTokenRaw = event.auth.credentials&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--834162603"&gt;Links&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241"&gt;@Sisn&lt;/a&gt;/xssec &lt;A href="https://www.npmjs.com/package/@sap/xssec" target="_blank" rel="noopener noreferrer nofollow"&gt;documentation&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Call OAuth protected service from &lt;A href="https://blogs.sap.com/2019/04/29/sap-cloud-platform-backend-service-tutorial-13-api-called-from-external-tool/" target="_blank" rel="noopener noreferrer"&gt;REST client&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;OAuth &lt;A href="https://blogs.sap.com/2019/05/06/sap-cloud-platform-backend-service-tutorial-14-about-oauth-mechanism/" target="_blank" rel="noopener noreferrer"&gt;Intro&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;JWT Token &lt;A href="https://blogs.sap.com/2020/09/03/outdated-sap_jwt_trust_acl/" target="_blank" rel="noopener noreferrer"&gt;details&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Interesting article: &lt;A href="https://blogs.sap.com/2020/10/21/how-to-add-custom-properties-to-jwt-token/" target="_blank" rel="noopener noreferrer"&gt;how to add property to JWT&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Overview of &lt;A href="https://blogs.sap.com/2020/06/17/writing-functions-as-a-service-overview-of-blogs/" target="_blank" rel="noopener noreferrer"&gt;FaaS blog posts&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="commands" id="toc-hId--683421751"&gt;Appendix 1: Console Commands&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf cs xsuaa application xsuaa_faas_scope -c xs-security_faas_scope.json&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf&amp;nbsp;csk&amp;nbsp;xsuaa_faas_scope&amp;nbsp;xsuaa_faasscope_servicekey&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf service-key xsuaa_client xsuaa_client_servicekey&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;cf update-service xsuaa_faas_scope -c xs-security_faas_scope.json&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli login&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas service register&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project deploy&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project get&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="background-color: black;color: white;font-family: Courier New"&gt;xfsrt-cli faas project logs&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="samples" id="toc-hId--879935256"&gt;Appendix 2: All sample project files&lt;/H2&gt;&lt;BR /&gt;
For your convenience, I'm pasting the structure of my example project.&lt;BR /&gt;
Folder names can be changed&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/10/projectStructure.jpg" height="191" width="185" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1369851768"&gt;Protected Function&lt;/H3&gt;&lt;BR /&gt;
These are the files required for the function&lt;BR /&gt;
They are located in the function project folder, with "lib" subfolder&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;xs-security_faas_scope.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname" : "xsappforfaaswithscope",&lt;BR /&gt;
  "tenant-mode" : "dedicated",&lt;BR /&gt;
  "scopes": [&lt;BR /&gt;
    {&lt;BR /&gt;
      "name": "$XSAPPNAME.scopeforfunction",&lt;BR /&gt;
      "description": "Scope required for accessing function"&lt;BR /&gt;
    }&lt;BR /&gt;
  ],&lt;BR /&gt;
  "role-templates": [ { &lt;BR /&gt;
    "name"                : "FunctionRoleTemplate", &lt;BR /&gt;
    "description"         : "Role for serverless function", &lt;BR /&gt;
    "default-role-name"   : "RoleForFunction",&lt;BR /&gt;
    "scope-references"    : ["$XSAPPNAME.scopeforfunction"]&lt;BR /&gt;
  }],&lt;BR /&gt;
  "authorities":["$XSAPPNAME.scopeforfunction"]&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;faas.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
	"project": "protectedwithscope",&lt;BR /&gt;
	"version": "0.0.1",&lt;BR /&gt;
	"runtime": "nodejs10",&lt;BR /&gt;
	"library": "./lib",&lt;BR /&gt;
    "functions": {&lt;BR /&gt;
        "prot-func-with-scope": {&lt;BR /&gt;
			"module": "functionImpl.js",&lt;BR /&gt;
			"httpApi": true,&lt;BR /&gt;
			"services": ["xsuaa-with-scope"]&lt;BR /&gt;
        }&lt;BR /&gt;
    },&lt;BR /&gt;
    "triggers": {&lt;BR /&gt;
        "prot": {&lt;BR /&gt;
            "type": "HTTP",&lt;BR /&gt;
            "function": "prot-func-with-scope",&lt;BR /&gt;
			"auth": {&lt;BR /&gt;
				"type": "xsuaa",&lt;BR /&gt;
				"service": "xsuaa-with-scope"&lt;BR /&gt;
			}			&lt;BR /&gt;
		}&lt;BR /&gt;
	},&lt;BR /&gt;
	"services": {&lt;BR /&gt;
	    "xsuaa-with-scope": {&lt;BR /&gt;
			"type": "xsuaa",&lt;BR /&gt;
			"instance": "d8819eda-41e6-40b0-9286-0afa1a59d12c",&lt;BR /&gt;
			"key": "xsuaa_faasscope_servicekey"			&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
}          &lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;functionImpl.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = async function (event, context) {  	&lt;BR /&gt;
	// access registered xsuaa service in order to get the value of variable $XSAPPNAME&lt;BR /&gt;
	const xsuaaCredentials = await context.getServiceCredentialsJSON('xsuaa-with-scope')&lt;BR /&gt;
	const requiredScope = xsuaaCredentials.xsappname + '.scopeforfunction'&lt;BR /&gt;
&lt;BR /&gt;
	// read the JWT token and check required scope&lt;BR /&gt;
	const jwtToken = event.decodeJsonWebToken()&lt;BR /&gt;
	const jwtScopes = jwtToken.payload.scope&lt;BR /&gt;
	if(! jwtScopes.includes(requiredScope)){&lt;BR /&gt;
		// HTTP API required for configuring response&lt;BR /&gt;
		const response = event.http.response // must be enabled in faas.json&lt;BR /&gt;
		response.writeHead(403, {&lt;BR /&gt;
			'Content-Type': 'text/plain'&lt;BR /&gt;
		});&lt;BR /&gt;
		response.write(`Unauthorized: required scope '${requiredScope}' not found in JWT. Availbale scopes: '${jwtScopes}' ;-(`);&lt;BR /&gt;
		response.end();&lt;BR /&gt;
	} else{&lt;BR /&gt;
		return `Reached protected function. Scope check successful: required scope '${requiredScope}' found in JWT. Availbale scopes: '${jwtScopes}'`&lt;BR /&gt;
	}&lt;BR /&gt;
}	&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1566365273"&gt;Function Caller Client App&lt;/H3&gt;&lt;BR /&gt;
These are the files required for a little node.js app which calls the protected function&lt;BR /&gt;
Make sure to adapt the URL of the function in the application code&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;manifest.yml&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
The application is bound to the same instance of XSUAA which we registered in FaaS&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;---&lt;BR /&gt;
applications:&lt;BR /&gt;
- name: functioncallerapp&lt;BR /&gt;
  memory: 128M&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
    - nodejs_buildpack&lt;BR /&gt;
  services:&lt;BR /&gt;
    - xsuaa_faas_scope&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;server.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const express = require('express')&lt;BR /&gt;
const app = express()&lt;BR /&gt;
const https = require('https');&lt;BR /&gt;
&lt;BR /&gt;
const VCAP_SERVICES = JSON.parse(process.env.VCAP_SERVICES)&lt;BR /&gt;
const CREDENTIALS = VCAP_SERVICES.xsuaa[0].credentials&lt;BR /&gt;
//oauth&lt;BR /&gt;
const CLIENTID = CREDENTIALS.clientid; &lt;BR /&gt;
const SECRET = CREDENTIALS.clientsecret;&lt;BR /&gt;
const OAUTH_HOST = CREDENTIALS.url;&lt;BR /&gt;
&lt;BR /&gt;
const FUNC_HOST = 'https://abcd1234-...-...-faas-...-functions.xfs.cloud.sap' // adapt URL&lt;BR /&gt;
const FUNC_TRIGGER = 'prot'&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
app.get('/call', function(req, res){       &lt;BR /&gt;
   // call function endpoint &lt;BR /&gt;
   doCallEndpoint(FUNC_HOST, FUNC_TRIGGER, OAUTH_HOST, CLIENTID, SECRET)&lt;BR /&gt;
   .then((response)=&amp;gt;{&lt;BR /&gt;
      res.status(202).send('Successfully called remote endpoint. Function response: ' + response);&lt;BR /&gt;
   }).catch((error)=&amp;gt;{&lt;BR /&gt;
      res.status(500).send(`Error while calling remote endpoint: ${error} `);&lt;BR /&gt;
   })&lt;BR /&gt;
});&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
// helper method to call the endpoint&lt;BR /&gt;
const doCallEndpoint = function(host, endpoint, token_uri, client_id, client_secret){&lt;BR /&gt;
   return new Promise((resolve, reject) =&amp;gt; {&lt;BR /&gt;
      return fetchJwtToken(token_uri, client_id, client_secret)&lt;BR /&gt;
         .then((jwtToken) =&amp;gt; {&lt;BR /&gt;
            const options = {&lt;BR /&gt;
               host: host.replace('https://', ''),&lt;BR /&gt;
              path:  `/${endpoint}/`,&lt;BR /&gt;
               method: 'GET',&lt;BR /&gt;
               headers: {&lt;BR /&gt;
                  Authorization: 'Bearer ' + jwtToken&lt;BR /&gt;
               }&lt;BR /&gt;
            }&lt;BR /&gt;
            &lt;BR /&gt;
            const req = https.request(options, (res) =&amp;gt; {&lt;BR /&gt;
               res.setEncoding('utf8')&lt;BR /&gt;
               const status = res.statusCode &lt;BR /&gt;
               const statusMessage = res.statusMessage               &lt;BR /&gt;
               let response = ''&lt;BR /&gt;
               res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
                  response += chunk&lt;BR /&gt;
                })&lt;BR /&gt;
                &lt;BR /&gt;
               res.on('end', () =&amp;gt; {&lt;BR /&gt;
                  if (status !== 200 &amp;amp;&amp;amp; status !== 201) {&lt;BR /&gt;
                     return reject(new Error(`Failed to call function. Message: ${status} - ${statusMessage} - ${response}`))&lt;BR /&gt;
                  }&lt;BR /&gt;
                  resolve(response)&lt;BR /&gt;
               })&lt;BR /&gt;
            &lt;BR /&gt;
            });&lt;BR /&gt;
            &lt;BR /&gt;
            req.on('error', (error) =&amp;gt; {&lt;BR /&gt;
               return reject({error: error})&lt;BR /&gt;
            });&lt;BR /&gt;
         &lt;BR /&gt;
            req.write('done')&lt;BR /&gt;
            req.end()   &lt;BR /&gt;
      })&lt;BR /&gt;
      .catch((error) =&amp;gt; {&lt;BR /&gt;
         reject(error)&lt;BR /&gt;
      })&lt;BR /&gt;
   })&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// jwt token required for calling REST api&lt;BR /&gt;
const fetchJwtToken = function(token_uri, client_id, client_secret) {&lt;BR /&gt;
   return new Promise ((resolve, reject) =&amp;gt; {&lt;BR /&gt;
      const options = {&lt;BR /&gt;
         host:  token_uri.replace('https://', ''),&lt;BR /&gt;
         path: '/oauth/token?grant_type=client_credentials&amp;amp;response_type=token',&lt;BR /&gt;
         // path: '?grant_type=client_credentials&amp;amp;response_type=token',&lt;BR /&gt;
         headers: {&lt;BR /&gt;
            Authorization: "Basic " + Buffer.from(client_id + ':' + client_secret).toString("base64")&lt;BR /&gt;
         }&lt;BR /&gt;
      }&lt;BR /&gt;
&lt;BR /&gt;
      https.get(options, res =&amp;gt; {&lt;BR /&gt;
         res.setEncoding('utf8')&lt;BR /&gt;
         let response = ''&lt;BR /&gt;
         res.on('data', chunk =&amp;gt; {&lt;BR /&gt;
           response += chunk&lt;BR /&gt;
         })&lt;BR /&gt;
&lt;BR /&gt;
         res.on('end', () =&amp;gt; {&lt;BR /&gt;
            try {&lt;BR /&gt;
               const jwtToken = JSON.parse(response).access_token                &lt;BR /&gt;
               resolve(jwtToken)&lt;BR /&gt;
            } catch (error) {&lt;BR /&gt;
               return reject(new Error('Error while fetching JWT token'))               &lt;BR /&gt;
            }&lt;BR /&gt;
         })&lt;BR /&gt;
      })&lt;BR /&gt;
      .on("error", (error) =&amp;gt; {&lt;BR /&gt;
         return reject({error: error})&lt;BR /&gt;
      });&lt;BR /&gt;
   })   &lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// Start server&lt;BR /&gt;
app.listen(process.env.PORT || 8080, ()=&amp;gt;{})&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "dependencies": {&lt;BR /&gt;
    "express": "^4.16.3"&lt;BR /&gt;
  }&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="samplewithlib" id="toc-hId--1469475771"&gt;Appendix 3: Sample code using &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1387241"&gt;@Sisn&lt;/a&gt;/xssec&lt;/H2&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;package.json&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "dependencies": {&lt;BR /&gt;
        "@sap/xssec": "latest"&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline;font-family: Courier New"&gt;functionImpl.js&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const xssec = require('@sap/xssec')&lt;BR /&gt;
const util = require('util');&lt;BR /&gt;
const createSecurityContext = util.promisify(xssec.createSecurityContext);&lt;BR /&gt;
&lt;BR /&gt;
module.exports = async function (event, context) {  	&lt;BR /&gt;
	// access registered xsuaa service in order to get the value of variable $XSAPPNAME&lt;BR /&gt;
	const xsuaaCredentials = await context.getServiceCredentialsJSON('xsuaa-with-scope')&lt;BR /&gt;
	const requiredScope = xsuaaCredentials.xsappname + '.scopeforfunction'&lt;BR /&gt;
&lt;BR /&gt;
	const jwtTokenRaw = event.auth.credentials&lt;BR /&gt;
	const securityContext = await createSecurityContext(jwtTokenRaw, xsuaaCredentials)&lt;BR /&gt;
	const jwtScopes = securityContext.getTokenInfo().getPayload().scope&lt;BR /&gt;
&lt;BR /&gt;
	if(! securityContext.checkScope(requiredScope)){&lt;BR /&gt;
		// HTTP API required for configuring response&lt;BR /&gt;
		const response = event.http.response // must be enabled in faas.json&lt;BR /&gt;
		response.writeHead(403, {&lt;BR /&gt;
			'Content-Type': 'text/plain'&lt;BR /&gt;
		});&lt;BR /&gt;
		response.write(`Unauthorized: required scope '${requiredScope}' not found in JWT. Availbale scopes: '${jwtScopes}'`);&lt;BR /&gt;
		response.end();&lt;BR /&gt;
	} else{&lt;BR /&gt;
		return `Reached protected function. Scope check successful: required scope found in JWT. All availbale scopes: '${jwtScopes}'`&lt;BR /&gt;
	}&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-function-as-a-service-13-secure-scenario-with-scope-and-consumer/ba-p/13466000"/>
    <published>2020-10-29T15:06:37+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/making-your-sap-integration-serverless/ba-p/13505297</id>
    <title>Making your SAP Integration Serverless</title>
    <updated>2021-03-05T20:29:57+01:00</updated>
    <author>
      <name>former_member731571</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/731571</uri>
    </author>
    <content>&lt;SPAN style="font-weight: 400"&gt;Growing demands of rapid digital interactions and expanding the ecosystem means IT departments will need to spend more time eliminating silos, bridging between services. While handling the ever complex, immense amount of data in real-time. Also trying to bring the new service to the market at an expedited speed. But also with cost, and good resource management in mind.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This drives a drastic change to how systems are interconnected. From JUST API calls to more scalable event-driven architecture. Development style has gone from heavy service oriented to small quick turn around snippets of code. With a Serverless platform, it can help lowering the operation cost and reduce packaging and deployment complexity.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;SAP being a world's leading enterprise business processing solution. There is always going to be a need to connect an organization's core to other SaaS offering, partners or even another SAP solution.&amp;nbsp; Red Hat Integration offers &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt;flexibility, adaptability, and ability to move quickly&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="font-weight: 400"&gt; with framework and software to build the event-driven integration architecture. Not just connect, but also maintain data consistency across platforms.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1086602103"&gt;&lt;B&gt;An Architectural Overview&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This is how Red Hat Integration can help to achieve modernized integration with SAP.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;SAP exposes business functionality through the Netweaver Gateway. Camel K or Camel in RHI can be used by developers to integrate(bi-directional) these functionalities. Camel K/Camel not only connects the dot, but also provides a set of built-in patterns and data transformations components making customized integration easy. They can be deployed in the form of a serverless function, serverless source/sink, or a long running microservice.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;At the time of writing, I don’t see a complete support from SAP event enhancements, developers do still require to retrieve real data via other methods such as through OData and APIs. To implement a true event driven architecture, AMQ Streams (Kafka) can be used as the event stream store to handle streaming of events, for reducing decoupling and achieving near real-time latency.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Since the system is based on events, we can also capture changes of data state in Databases using Debezium. Keeping all data consistent by passing the updated state back to SAP.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;When there is a need to expose any functions or services as API endpoints, we can easily implement it with Camel using the OpenAPI Standard Specification. And have the API managed and secured by the 3scale API management platform.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Openshift as the platform that can run on major cloud vendors and on-prem, so it’s truly cloud agnostic. It provides a serverless platform to deploy and manage all functions. And with Interconnect we will be able to broadcast events, to the closest data center to optimize traffic control.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;As a result,&amp;nbsp; it is now ready to connect to endless 3rd party and partner services, streaming large amounts of edge signals and providing real-time processing from edge devices. Legacy, mainframe systems can also be part of the ecosystem. Lastly, this is a good tool for SAP to SAP integration too.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/03/Screen-Shot-2021-03-03-at-10.58.27-AM-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-890088598"&gt;&lt;B&gt;Technical Dive&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-822657812"&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt;Connect with Camel&lt;/SPAN&gt;&lt;/I&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;SAP offers interfaces such as OData v4, OData v2, RESTful API and SOAP as the HTTP based one, or you can also use the classic RFC(remote procedure call) and iDoc Messages. And there is a recent event enablement add-on that offers AMQP and MQTT protocol.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;The Camel feature in RHI allows you to seamlessly connect to any of your preferred protocols. Developers can simply configure to connect to the endpoints with it’s address, credential and/or SSL settings.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Example:&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Camel code connecting to OData v4&amp;nbsp; (Olingo4 components)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;.to("olingo4://read/SalesOrder")&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;[NOTE]: &lt;/SPAN&gt;&lt;A href="https://camel.apache.org/components/latest/olingo4-component.html" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://camel.apache.org/components/latest/olingo4-component.html" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://camel.apache.org/components/latest/olingo4-component.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Camel code connecting to Restful API&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;.to("http://demo.sap.io/SalesOrder")&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;[NOTE]: &lt;/SPAN&gt;&lt;A href="https://camel.apache.org/components/latest/http-component.html" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://camel.apache.org/components/latest/http-component.html" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://camel.apache.org/components/latest/http-component.html&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;OData v4, RESTful API and Events protocols are better suited for Serverless. As OData v4 has significant performance over the older version, and support for analytical application. Whereas OData v2, RFC and iDoc are better used in traditional Camel Project.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;What Components to use for SAP endpoints.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;TABLE style="width: 583px"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Serverless&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Camel K/Camel Quarkus&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;STRONG&gt;Camel&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;OData V4&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;OData V2&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✕&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;Restful API&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;SOAP&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;O&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;RFC/IDoc&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✕&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 74px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;Events&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 252px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 257px;text-align: center"&gt;&lt;SPAN style="font-weight: 400"&gt;✓&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;After receiving the payload, Camel can then use the built-in data format components to transform it. In the serverless case, data is mostly in the form of JSON.&amp;nbsp; By marshal and unmarshalling incoming payload, we can easily access the value and retrieve the content we need from the payload.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Example:&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;.marshal().json().&lt;BR /&gt;
.to("kafka:mytopic")&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;[NOTE: &lt;A href="https://camel.apache.org/manual/latest/json.html" target="_blank" rel="nofollow noopener noreferrer"&gt;https://camel.apache.org/manual/latest/json.html&lt;/A&gt;]&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;For syntax mapping between incoming and outgoing payload, there is visual tooling for you to design the mapping, and run that data mapping via Camel Engine.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/03/Screen-Shot-2021-03-03-at-12.58.54-PM.png" height="362" width="507" /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;SPAN style="font-weight: 400"&gt;[NOTE: &lt;A href="https://www.atlasmap.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.atlasmap.io/&lt;/A&gt;]&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Utilize the useful pattern in Camel, they are a straight&amp;nbsp; implementation from &lt;/SPAN&gt;&lt;A href="http://www.eaipatterns.com/toc.html" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;Enterprise Integration Pattern&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt;, which organize and define the most used pattern and behaviour of integration applications.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Example:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Split streams by and split with token “,”.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;.split(body().tokenize(",")).streaming()&lt;BR /&gt;
.to("knative:mychannel")&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;[NOTE] (&lt;/SPAN&gt;&lt;A href="https://camel.apache.org/components/latest/eips/split-eip.html" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://camel.apache.org/components/latest/eips/split-eip.html" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://camel.apache.org/components/latest/eips/split-eip.html&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt;)&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-626144307"&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt;Flexible workload with Red Hat Serverless&lt;/SPAN&gt;&lt;/I&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;There aren’t many things Camel K developers need to worry about when converting the long running application “Serverless”. First thing you have to do is make sure Red Hat Serverless is installed on the OpenShift platform (Should be done by the platform admin).&amp;nbsp; And you are ready to go.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Camel K will detect if Serverless is available, and create the services needed for serverless. But there are two aspects of Serverless that you might want to take a closer look at.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;AutoScaling setup&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;You can scale the replicas for an application/function to closely match incoming demand. When the administrator sets up the cluster for Serverless, they would already have configured the autoscaler to apply globally to the cluster. It watches the traffic flow and scale accordingly. You can however override the setting, by using the “knative-service” trait in Camel K.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Example:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;kamel run --trait knative-service.autoscaling-class=hpa.autoscaling.knative.dev --trait knative-service.autoscaling-metric=concurrency integration.java&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Eventing setup&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Eventing enables late-binding event sources and event consumers. The cluster admin should have already set up the underlying layer to store the events. Some options may not be persistent and may perish when nodes restarts.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
This is quick demo showing how to Integrate SAP with 3rd party services Telegram. Using Camel K with Knative Eventing.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IFRAME width="560" height="315" src="https://www.youtube.com/embed/V419524sHBE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-300548083"&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This is a quick overview of how we can use Camel K to build an true event-driven serverless integration for SAP to 3rd party services or other SAP modules. With Red Hat Integration Camel’s OData 4 connector to interact with the exposed SAP functions. And also by deploying on OpenShift serverless platform will automatically turn the integration application serverless.&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/making-your-sap-integration-serverless/ba-p/13505297"/>
    <published>2021-03-05T20:29:57+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/make-sap-cloud-native-and-event-driven-in-4-days/ba-p/13507623</id>
    <title>Make SAP Cloud Native and Event Driven in 4 days</title>
    <updated>2021-06-23T14:51:04+02:00</updated>
    <author>
      <name>former_member731571</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/731571</uri>
    </author>
    <content>&lt;SPAN style="font-weight: 400"&gt;Recently I had an opportunity to work with Sanket Taur (IBM UK) and his team on a demo, showcasing how Red Hat products can help speed up innovation with SAP Landscapes. To be honest I was shocked at how little time we were given to create the entire demo from scratch. It’s less than a week. While still doing our day job, having a couple of hours per day to work on it. If this doesn't convince you..&amp;nbsp; I don’t know any other stronger proof than this, to show how agile and fast a cloud solution can be from development to production.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;I STRONGLY encourage you to attend Sanket’s session for more details, this post is JUST my view on the demo, and things I did to make it running. The demo was a simple approval process of Sales Orders. The SOs are created in the Core SAP platform (In this case ES5), therefore we need to create an application that speaks to the Core SAP platform and retrieve all the data needed.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-21-at-11.14.05-PM.png" /&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;First thing first, we need a Kubernetes(k8s) platform. And then I used Camel K -- an enhanced framework based on Camel (part of Red Hat Integration product) to create the application. There was some mixup during the setup, instead of the OData v4 endpoint from ES5 for SO, line items and customer details. I was given an OData v2 endpoint. (Needless to say, how more efficient the OData v4 is, compared to v2. Please do update it when you have a chance). Note that Camel K only supports OData v4. HOWEVER, we can still get the results using normal REST API calls (So you are still covered).&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This is how Camel helps you retrieve all the information needed. As you can see I have made several requests to get all the data needed as well as doing some transformation to extract results to return.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;from&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"direct:getSO"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Authorization"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Basic XXXX"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Accept"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"application/json"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;toD&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/GWSAMPLE_BASIC/SalesOrderSet('${header.SalesOrderID}')?bridgeEndpoint=true"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;unmarshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;()&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"CustomerID"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;simple&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"${body[d][CustomerID]}"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;marshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;()&lt;BR /&gt;
&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;bean&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;this&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;, &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"setSO(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;${body}&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;,&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;${headers.CustomerID}&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;from&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"direct:getItems"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Authorization"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Basic XXXX"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Accept"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"application/json"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;     .&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;toD&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/GWSAMPLE_BASIC/SalesOrderSet('${header.SalesOrderID}')/ToLineItems?bridgeEndpoint=true")&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;unmarshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;()&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;marshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;()&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;bean&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;this&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;, &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"setPO(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;${body}&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; ;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;from&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"direct:getCustomer"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Authorization"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Basic XXXX"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;setHeader&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"Accept"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;constant&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"application/json"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;     .&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;toD&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"https://sapes5.sapdevcenter.com/sap/opu/odata/iwbep/GWSAMPLE_BASIC/BusinessPartnerSet('${header.CustomerID}')?bridgeEndpoint=true"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;BR /&gt;
     .&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;unmarshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;()&lt;BR /&gt;
&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;     .&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;marshal&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;().&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;json&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;() &amp;nbsp; &amp;nbsp; &lt;BR /&gt;
     .&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;bean&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;this&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;, &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;"setCust(&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;${body}&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;\"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)"&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;)&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; ;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;The endpoints to trigger the call to SAP, is exposed as an API. Here I use Apicurio Studio to define the API contract. With two endpoints, fetch and fetchall. One returns SO, PO and Customer data, where the other one returns a collection of them.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-21-at-11.38.13-PM.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;We can now export the definition as a OpenAPI Specification contract in the form of YAML (&lt;A href="https://github.com/weimeilin79/sap-odata4-camelk/blob/main/ibm/ibm-sap.yaml" target="_blank" rel="nofollow noopener noreferrer"&gt;Link&lt;/A&gt; to see the yaml). Save the file into the folder of where your Camel application is. Add the API yaml file name to your Camel K application mode line, and Camel K will automatically map your code to this contract.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;   // camel-k: language=java dependency=camel-openapi-java &lt;/SPAN&gt;&lt;B&gt;open-api=ibm-sap.yaml &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;dependency=camel-jackson&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;By using the Camel K CLI tool. Run the command to deploy the code to the OpenShift platform.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;   kamel run SapOdata.java&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;And you should now see a microservice running. Did you notice how Camel K helps you, not only it detects and loads the libraries needed for you, but also containerised it as a running instance.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-21-at-11.48.40-PM.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Go to my &lt;A href="https://github.com/weimeilin79/sap-odata4-camelk/tree/main/ibm" target="_blank" rel="nofollow noopener noreferrer"&gt;git repo&lt;/A&gt; to see the full code and running instructions.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Kafka was used in the middle to set the event driven architecture. So the SO approval application can notify the shopping cart client when it’s been approved.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-22-at-12.00.12-AM.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Since everything was put together in a week, with everyone in different timezones, miss communication will happen. What I did not realize was that all the client applications, SO approval and shopping carts were all written in JavaScript, and must communicate via HTTP. But&lt;/SPAN&gt;&lt;B&gt; Kafka only does Kafka protocols&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;!!! Therefore, I set up an Http Bridge in front of the Kafka clusters, so it will now translate the Kafka protocols.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-22-at-12.07.00-AM.png" /&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;And now clients can access the topic via HTTP endpoints.&amp;nbsp; For more information on how to set, go to my &lt;A href="https://github.com/weimeilin79/sap-odata4-camelk/blob/main/ibm/kafkaHttpBridge.adoc" target="_blank" rel="nofollow noopener noreferrer"&gt;Github repo&lt;/A&gt; for more detailed instructions.&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Last but not least, we need to migrate all UI5 SAP web applications to OpenShift. The UI5 is basically an NODEJS app. We first create the docker file to containerize it. And push it to a container registry.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;  docker push quay.io/&amp;lt;YOUR_REPO&amp;gt;/socreate&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;And deploy the application to OpenShift.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;  oc new-app quay.io/&amp;lt;YOUR_REPO&amp;gt;/socreate:latest --as-deployment-config&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&lt;EM&gt;BUT WAIT&lt;/EM&gt;!! Since UI5 only does binds to *&lt;STRONG&gt;localhost&lt;/STRONG&gt;* (weird..), we need to add a proxy that can tunnel traffic to it. Therefore, I added a sidecar proxy running right next to the NodeJS application. By adding the following configuration.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;spec:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;containers:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- name: nginx&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image: quay.io/weimei79/nginx-sidecar&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ports:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- containerPort: 8081&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protocol: TCP&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resources:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;limits:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cpu: 500m&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;memory: 1Gi&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terminationMessagePath: /dev/termination-log&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;terminationMessagePolicy: File&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;imagePullPolicy: Always&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This will start the proxy, and since this NGINX proxy starts on port 8081, make sure you update all related settings on OpenShift.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;SPAN style="font-weight: 400"&gt;  oc expose dc socreate --port=8181&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp; oc expose svc socreate&lt;BR /&gt;
&lt;BR /&gt;
&lt;/SPAN&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;And this is how you would migrate the UI5 application from a local SAP instance onto OpenShift. More detailed migration instructions, check out my &lt;A href="https://github.com/weimeilin79/sap-odata4-camelk/blob/main/ibm/UI5-Migration/README.adoc" target="_blank" rel="nofollow noopener noreferrer"&gt;Github repo&lt;/A&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Once it’s done, you can see all the applications are running as a container on the cloud. And ready to approve the SOs.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-22-at-12.21.31-AM-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;This is actual developer view on top of our demo OpenShift platform&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Screen-Shot-2021-06-22-at-12.22.35-AM.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Thank you Sanket for this fun ride, all the nail biting moments, but this is all the fun in IT right? We work through problems, tackle issues and ultimately get everything done! &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt; If you are a SAPer, and want to explore the world of clouds and containers, what are you still waiting for? Join the ride! This is the story on how we made SAP Cloud Native and Event Driven in 4 days.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;To see the full version, be sure to attend Sanket’s session (Virtual free events):&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;SAP &amp;amp; OpenShift:&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; From classic ABAP development to cloud native applications: Use cases and reference architecture to implement with SAP Landscapes to unlock innovation enabled by Hybrid Cloud and Red Hat OpenShift.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Register here:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x373237abcd&amp;amp;sc_cid=7013a000002w6W7AAI" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x373237abcd&amp;amp;sc_cid=7013a000002w6W7AAI" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://events.redhat.com/profile/form/index.cfm?PKformID=0x373237abcd&amp;amp;sc_cid=7013a000002w6W7AAI&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Refer to Sanket's awesome post for more details on the concept and why we created this demo.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/06/28/safeguard-your-investments-with-red-hat-openshift/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2021/06/28/safeguard-your-investments-with-red-hat-openshift/&lt;/A&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/make-sap-cloud-native-and-event-driven-in-4-days/ba-p/13507623"/>
    <published>2021-06-23T14:51:04+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/safeguard-your-investments-with-red-hat-openshift/ba-p/13512568</id>
    <title>Safeguard your Investments with Red Hat OpenShift</title>
    <updated>2021-06-28T12:59:02+02:00</updated>
    <author>
      <name>STaur</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/7346</uri>
    </author>
    <content>Traditional development with SAP has evolved from Classical ABAP to ABAP RAP, SAP CAP (Cloud Application Programming Model). Its analogous to moving on from doing Stop Motion animation to immersive CGI to virtual reality that we experience today. The need to evolve and innovate has never stalled for SAP rather has accelerated and multiplied in last decade. With an imperative to keep the core clean and lean in the new SAP world, the side-by-side concept has pushed the extensions towards the cloud to orchestrate the data and processes with cloud native capabilities in Hybrid cloud environments.&lt;BR /&gt;
&lt;H2 id="toc-hId-958356323"&gt;&lt;STRONG&gt;Evolving Hyperscalers&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
Hyperscalers tend to have higher churn rates on innovative platform services and are sharing the side-by-side extensibility space with SAP BTP. Whether you go with SAP BTP as your primary extension platform and create plethora of cloud native applications on the periphery utilising the native platform services on hyperscaler’s, or you go pure Hyperscaler based extension is based on the hyperscaler startegy your organisations are adopting for now or in future. It can influence the choice of application services, development services or data services that will have direct influence on how quickly you can turn around an innovative idea to a product or service. That&amp;nbsp;is dependent on the vision the organisation or business has about its products and services in the near and long term.&lt;BR /&gt;
&lt;BR /&gt;
The extension and innovation platform choice is further influenced by SAP footprint on the landscape, where you are in the S/4 HANA adoption journey, how open is your organisation for open source innovation, the development culture, cloud native skillsets are a few other facets to consider. Its an architectural choice, again influenced by platform services that will help drive your innovation agenda.&lt;BR /&gt;
&lt;BR /&gt;
What if you want to abstract yourself from all these choices and changes that may overturn, the decisions your organisations take today in the future as hyperscalers evolve i.e. continue accelerating your digital transformation agenda. Red Hat OpenShift creates that abstraction layer and provides the scalability, interoperability and control that the organisation desires. Its like a hovercraft which glides across the changing turf. Its about getting from point A to B with the least number of changes in direction. The good part is all SAP BTP extensions work in harmony and unison along sides the Red Hat® OpenShift® cloud native applications / extensions i.e. you can opt to choose best of both worlds.&lt;BR /&gt;
&lt;BR /&gt;
The open innovation built behind Red Hat® Openshift® and its products is critical to achieving digital transformation objectives. This open innovation and embracing open source has driven tooling that enables us to do the following:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Innovate anywhere, at pace and agility on any cloud&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Consumption based models with wider ecosystem platform services&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Reduce the turn around times with streamlined deployment cycles.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Improve team productivity Dev + Sec + Ops&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Optimise costs and efficiencies, share resources, accelerate with repositories of reusable assets and components.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Moving away from VM’s with operating system footprint to application footprints, which enables hosting and running multiple applications and functions consuming the same amount of compute.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The docker image or the golden image of the application can reproduce the same results with same behaviour and consistency in any environment. The immutability results in interoperability.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
As organisation comes to realise that "Cloud Adoption" is not just modernisation of applications with lift and shift to the cloud but the true value is realised by&amp;nbsp;change in the organisation culture, the development and delivery practices, with Continuous Integration and Deployment practice, the Architectural and Integration Patterns.&lt;BR /&gt;
&lt;H2 id="toc-hId-761842818"&gt;Modular Architectures&lt;/H2&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Picture-2-1.png" /&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;EM&gt;Modern Architectures and Agile Integrations (source : IBM + Red Hat)&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
From enterprise architecture point of view, it’s how do we move away from traditional integration like enterprise service buses towards more of an agile integration which is decentralised. For e.g. we don’t want applications hogging system resources 24*7 to serve couple of requests. When we talk about event driven architectures, we can have a serverless function, being invoked by event or a web-hook call, spins up for the moment serves the request Just-In-Time and then spins down.&lt;BR /&gt;
&lt;BR /&gt;
With headless architectures, we are more microservices driven for any front end framework as far as it adheres to the API Contracts for the capabilities being delivered by underlying platform.&amp;nbsp;When we look at Edge devices, we are using machine learning on edge , sifting out the most criticak data points for further insights from what is being sensed. Pub-Sub mechanisms allow application to listen for events / messages, to react only if they are relevant for any action. Istio Mesh based distributed Microservices deployment leads to failsafe, resilient, secure and observable mesh network.&lt;BR /&gt;
&lt;BR /&gt;
So we can almost end up distributed architectural components with a RACI matrix of all things, applications and digital entities that are part of that ecosystems which drive the enterprise systems and processes. This is where we start seeing the way we design applications become more modular, agile, scalable across different clouds to be iterated more quickly and more efficiently.&lt;BR /&gt;
&lt;H2 id="toc-hId-565329313"&gt;Delivering Outcomes at Speed, Scale and Control&lt;/H2&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Picture-1-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Shift in the way we deliver outcomes (source : IBM + Red Hat)&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Adopting&amp;nbsp;dev-sec-ops takes a lot of different steps moving away from traditional methods and practices to hybrid cloud platform approach. Moving from siloed teams using waterfall delivery methods, to Agile practices with CI/CD adoption. Deploying in hybrid, public / private cloud with enterprise grade container platforms, is preferred over VMs with co-located workloads in data centers.&amp;nbsp;From an application perspective we’re still building these monolithic applications and we need to start to move towards more modular , decentralised architectures and agile integrations, delivering microservices or serverless functions as explained above.&lt;BR /&gt;
&lt;BR /&gt;
When we talk about speed we're really talking about time to market. Agility, how quickly we can make new updates, new commits to specific processes or applications further how they can be simplified as far as the process more streamlined so that we have more freedom to experiment. The personas within these different roles especially when you're a developer you're usually, much more bleeding edge, want a quick turn around. Build once and run everywhere is emerging trend amongst the developers to cater the business demands.&lt;BR /&gt;
&lt;BR /&gt;
Though the questions like, how do we scale with resilience, without sacrificing the stability and control of enterprise landscape needs to be addressed. When you’re on the operations side or administration side you want a little more tried and trusted solutions, how do we enable both the personas and then control how do we mitigate any kind of security, risks or any kind of issues with bugs, how do we approach them more quickly when they do come up.&lt;BR /&gt;
&lt;H2 id="toc-hId-368815808"&gt;Red Hat Openshift - Smarter Kubernetes&lt;/H2&gt;&lt;BR /&gt;
This is where the containers are becoming a defacto standard in the cloud native application development. It is underpinning the adoption of Devops culture. Containers promise things like application portability across any cloud. They allow developers to really just focus on building their apps instead of having to worry about the underlying infrastructure technologies.&amp;nbsp;This is where you would require a policy based automated container orchestration mechanism and features to manage containers across your dev, test /staging and production environments.&lt;BR /&gt;
&lt;BR /&gt;
Kubernetes as open source, has really emerged as the standard for container orchestration, management and scalability. Though just installing Kubernetes to have a production grade platform is not enough: you’ll need to add authentication, networking, security, monitoring, logs management. That means you will also have to pick your tools among everything available (see&amp;nbsp;&lt;A href="https://landscape.cncf.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;CNCF landscape&lt;/A&gt;&amp;nbsp;to get an idea of the complexity of the ecosystem), and maintain the cohesion of all of them as a whole; but also do updates and regression tests whenever there is a new version of one of these components.&lt;BR /&gt;
&lt;BR /&gt;
With OpenShift, Red Hat has decided to shield this complexity and deliver a&amp;nbsp;&lt;A href="https://www.openshift.com/blog/enterprise-kubernetes-with-openshift-part-one" target="_blank" rel="nofollow noopener noreferrer"&gt;comprehensive platform&lt;/A&gt;, including not only Kubernetes at its core, but also all the essential open source tools that make it an enterprise-ready solution to confidently run your production. Of course, in case you already have your own stacks, then you can opt-out and plug into your existing solutions.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Picture-3-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Red Hat Openshift run on "Anycloud" (source : IBM + Red Hat)&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;OpenShift allows you to deploy traditional stateful applications, alongside cutting-edge cloud-native applications, by supporting modern architectures such as microservices or serverless.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AT IBM we believe that containers, Kubernetes and Devops are the key ingredients that a modern application platform should be based on that allows you to transform your traditional apps, build cloud-native applications and also experiment with analytics, machine learning and serverless applications.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This application platform needs to provide a consistent way for both developers and operations teams to collaborate across all deployment footprints, from Edge and air gapped environments to infrastructure you have in your own datacenter and all the way to the hybrid cloud.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;OpenShift allows you now to even migrate your legacy virtual machines to OpenShift itself by using Container Native Virtualisation&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
I have been advocating the container based extensibility with modern architectures at several of IBM’s SAP Clients using Red Hat Openshift Platform and portfolio of products. I believe that the developers have the power and energy to create and architects help channelise that energy in right direction for business outcomes, while operational teams provide a level playing field for all participants of the Innovation Games. Liberating these personas of the traditional shackles is the need of the hour and this is what I am talking about in my upcoming talk on &lt;A href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x373237abcd" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP and Openshift : From classic ABAP development to cloud-native applications.&lt;/A&gt; Please join us to know more , where we also cover a demo to show you how we deploy cloud native extensions with OpenShift.&lt;BR /&gt;
&lt;BR /&gt;
The demo is based on modularising and separating the UI, Business Logic and the System functions using several Red Hat Openshift Products and Platform services to create a modern decentralised architectures. Its a Sales Order Approval Scenario which covers three Fiori apps : the Shopping Cart for Customer persona, the SO Approval App for the Approver persona and the Back-office persona using the approved Sales Order app to complete order fulfilment.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/06/Picture-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;Demo Scenario : Sales Order Approval (source : IBM + Red Hat)&lt;/P&gt;&lt;BR /&gt;
All Fiori apps / SAP Ui5 apps deployed on Openshift Containers , invoking microservices and serverless functions, streaming events and reacting to them using Red Hat Openshift streams for Apache Kafka broker. &amp;nbsp;More details on technical deployment with sample code on GitHUb refer to the blog post here : &lt;A href="https://blogs.sap.com/2021/06/23/make-sap-cloud-native-and-event-driven-in-4-days/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2021/06/23/make-sap-cloud-native-and-event-driven-in-4-days/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Hope you find this article useful. Feel free to comment and get in touch.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/safeguard-your-investments-with-red-hat-openshift/ba-p/13512568"/>
    <published>2021-06-28T12:59:02+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s/ba-p/13493350</id>
    <title>How to Extend SAP S/4HANA Business Address Services (or any other SAP S/4HANA application) with Serverless Functions on Kyma  Part-II</title>
    <updated>2021-09-23T09:07:03+02:00</updated>
    <author>
      <name>former_member760197</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/760197</uri>
    </author>
    <content>&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;In this blog post you will learn…&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1066225889"&gt;&lt;STRONG&gt;Overview:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;We will learn about how we will create serverless function in Kyma Runtime and how they are deployed (i.e. how URLs are created to get which can be used to run serverless functions) .&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;We will also learn about how to use Google APIs to get Geocodes of any inputted address .&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;To Know what is serverless function and need of serverless function refer to&lt;A href="https://blogs.sap.com/2021/09/21/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s-4hana-application-with-serverless-functions-on-kyma-part-i/" target="_blank" rel="noopener noreferrer"&gt; previous blog post&lt;/A&gt; of this blog series&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-869712384"&gt;&lt;STRONG&gt;Prerequisites/Skills:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Access to SAP BTP Cockpit&lt;BR /&gt;
You need access to a productive account of SAP BTP Cockpit&lt;BR /&gt;
&lt;EM&gt;Note:&lt;/EM&gt;&lt;BR /&gt;
&lt;EM&gt;This service is available in Trial version of SAP BTP Cockpit&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Node.js/JavaScript&lt;BR /&gt;
Functions are written in JavaScript for Node.js runtime.&lt;BR /&gt;
As such, some knowledge is helpful, however, most of the tutorials can be followed without any knowledge.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;DIV&gt;Kyma Environment Setup explained in &lt;A title="https://blogs.sap.com/2021/09/17/how-to-extend-s-%e2%80%a6-on-kyma-part-i/" href="https://blogs.sap.com/2021/09/23/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s-4hana-application-with-serverless-functions-on-kyma-part-ii/" target="_blank" rel="noreferrer noopener"&gt;Part-I&lt;/A&gt; of this Blog Series&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-673198879"&gt;&lt;STRONG&gt;Implementation Steps:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
After successfully setting up the Kyma Runtime Environment as described in the steps above, we now must define the Kyma Namespace. This is where all our functions will be defined. The steps below are to set up your Kyma Namespace and get started with the Kyma environment.&lt;BR /&gt;
&lt;BR /&gt;
1. Open Your Subaccount in SAP BTP Cockpit.&lt;BR /&gt;
&lt;BR /&gt;
2. Click on Instances and Subscription.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p11.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;3. Click on Environments.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p12.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;4. Click on the Actions button in your Kyma environment and navigate to ‘Go to&amp;nbsp; Dashboard’.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p14.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
5. On the Dashboard click on ‘Select Namespace’ and choose your namespace.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-476685374"&gt;&lt;STRONG&gt;Creating Serverless Function&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p15.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on ‘Functions’ on left hand pane and then click on ‘Create Function’ to create a new function.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Enter name of your choice and press Enter. You will see the screen shown below.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;There are two sections under code tab:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;First section will contain our source code to call the Google API.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Second section will contain dependencies (if any).&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p16.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;We are now going to add code in Source section&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p17.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const https = require('https');&lt;BR /&gt;
&lt;BR /&gt;
const key = {Enter Your Key Here}&lt;BR /&gt;
&lt;BR /&gt;
const generateGeoCode = (address) =&amp;gt; {&lt;BR /&gt;
&lt;BR /&gt;
let data = '';&lt;BR /&gt;
&lt;BR /&gt;
return new Promise((resolve,reject) =&amp;gt; {&lt;BR /&gt;
&lt;BR /&gt;
https.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${address}&amp;amp;key=${key}`,&lt;BR /&gt;
&lt;BR /&gt;
(response)=&amp;gt;{&lt;BR /&gt;
&lt;BR /&gt;
response.on('data',(chunks)=&amp;gt;{&lt;BR /&gt;
&lt;BR /&gt;
data+=chunks;&lt;BR /&gt;
&lt;BR /&gt;
})&lt;BR /&gt;
&lt;BR /&gt;
response.on('end',()=&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
{&lt;BR /&gt;
&lt;BR /&gt;
// console.log('check123',data);&lt;BR /&gt;
&lt;BR /&gt;
// response = data;&lt;BR /&gt;
&lt;BR /&gt;
// return data;&lt;BR /&gt;
&lt;BR /&gt;
resolve(data);&lt;BR /&gt;
&lt;BR /&gt;
})&lt;BR /&gt;
&lt;BR /&gt;
response.on('error',(error)=&amp;gt;{&lt;BR /&gt;
&lt;BR /&gt;
console.log(error)&lt;BR /&gt;
&lt;BR /&gt;
reject(error);})&lt;BR /&gt;
&lt;BR /&gt;
});&lt;BR /&gt;
&lt;BR /&gt;
//  console.log("google",response);&lt;BR /&gt;
&lt;BR /&gt;
})&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
module.exports = {&lt;BR /&gt;
&lt;BR /&gt;
main: async function (event, context) {&lt;BR /&gt;
&lt;BR /&gt;
console.log('event',event.extensions.request.query.address);&lt;BR /&gt;
&lt;BR /&gt;
address = event.extensions.request.query.address;&lt;BR /&gt;
&lt;BR /&gt;
const output = await generateGeoCode(address);&lt;BR /&gt;
&lt;BR /&gt;
let {results} = JSON.parse(output);&lt;BR /&gt;
&lt;BR /&gt;
console.log('add',results[0].geometry.location.lat);&lt;BR /&gt;
&lt;BR /&gt;
let final = '';&lt;BR /&gt;
&lt;BR /&gt;
final +=`${results[0].geometry.location.lat}, ${results[0].geometry.location.lng}`&lt;BR /&gt;
&lt;BR /&gt;
return final;&lt;BR /&gt;
&lt;BR /&gt;
//console.log('f',f);&lt;BR /&gt;
&lt;BR /&gt;
}}&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
In the above Picture you can see that there is a variable key that has been purposely left blank. Here you need to get your credentials from Google Cloud Platform before entering them. you can get them from &lt;A href="https://developers.google.com/maps/documentation/geocoding/overview" target="_blank" rel="nofollow noopener noreferrer"&gt;Here&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;OL start="4"&gt;&lt;BR /&gt;
 	&lt;LI&gt;Here we can see that our code is dependent on HTTP module to run so we are going to put that in our dependency:&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
&lt;BR /&gt;
"name": "geocode-api",&lt;BR /&gt;
&lt;BR /&gt;
"version": "1.0.0",&lt;BR /&gt;
&lt;BR /&gt;
"description": "geocode api to get latitude and longitude",&lt;BR /&gt;
&lt;BR /&gt;
"dependencies": {&lt;BR /&gt;
&lt;BR /&gt;
"https": "^1.0.0"&lt;BR /&gt;
&lt;BR /&gt;
},&lt;BR /&gt;
&lt;BR /&gt;
"license": "ISC"&lt;BR /&gt;
&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
This Completes first part of our function. Now it’s time to create the URL to send request to API.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-280171869"&gt;&lt;STRONG&gt;Creation of URL for Function to place request to API:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on Configuration tab next to Code tab and click on ‘Expose Function’.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p18.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Enter API Rule Name and Host Name and press Enter. This will generate the URL.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p19.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;You can run the URL above in your browser and see the output.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/p20.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-83658364"&gt;&lt;STRONG&gt;Summary:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
In this blog post we saw about&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;How to create serverless function in Kyma.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;How to use Google APIs to find Geocodes using address send by user.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;And How to deploy the serverless function and generate API URL which can be used to send get request to server.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--112855141"&gt;&lt;STRONG&gt;Next Steps:&amp;nbsp;&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
We will be seeing how to&lt;A href="https://blogs.sap.com/2021/09/27/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s-4hana-application-with-serverless-functions-on-kyma-part-iii/" target="_blank" rel="noopener noreferrer"&gt; Integrate the Kyma serverless function in any SAP S/4HANA applications&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
For any queries and doubts please comment in comment section I will be more then happy to help you, also you can follow my profile to get updated of upcoming blog posts.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s/ba-p/13493350"/>
    <published>2021-09-23T09:07:03+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s/ba-p/13509781</id>
    <title>How to Extend SAP S/4HANA Business Address Services (or any other SAP S/4HANA application) with Serverless Functions on Kyma Part-III</title>
    <updated>2021-09-27T10:31:38+02:00</updated>
    <author>
      <name>shilpi_sen06</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/762068</uri>
    </author>
    <content>&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This blog post explains how a Serverless Function developed in Kyma Runtime can be consumed in the SAP S/4HANA system for the extensibility of SAP S/4HANA applications. Specifically, this blog post covers the extensibility of Business Address Services and is in continuation of Blog Series of the same title(mentioned under Prerequisites).&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Prerequisites/Skills&lt;/STRONG&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Kyma Environment Setup explained in &lt;A href="https://blogs.sap.com/2021/09/21/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s-4hana-application-with-serverless-functions-on-kyma-part-i/" target="_blank" rel="noopener noreferrer"&gt;Part-I&lt;/A&gt; of this Blog Series&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Kyma Serverless Function Implementation explained in &lt;A href="https://blogs.sap.com/2021/09/23/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s-4hana-application-with-serverless-functions-on-kyma-part-ii/" target="_blank" rel="noopener noreferrer"&gt;Part-II&lt;/A&gt; of this Blog Series&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In our example, we will be implementing the geocode functionality with the Business Partner (BP) transaction. Once our serverless function returns the geocodes, we will be updating a Custom Z table.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Since it is a customer modification, we can make use of the BADIs available. ADDRESS_UPDATE is the BADI that is used to trigger updates on Address Changes. We have implemented this BADI in SE18 as ZADDRESS_UPD_SRV_POC. The implementing class name is given as ZCL_IM_ADDRESS_UPD_SRV_POC&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI style="overflow: hidden"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/P1-20.png" height="268" width="555" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Based on the type of address created i.e. Organization, Person, or Workplace, add the logic in methods ADDRESS1_SAVED, ADDRESS2_SAVED, and ADDRESS3_SAVED&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; respectively. Next, we must compile the complete URL which will be a combination of:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;URL generated by Kyma runtime&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Search parameters from BP transaction which will be components of address based on which Geocode will be found. For our PoC, we have considered House Number, Street, City, Region, Postal Code, and Country&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI style="list-style-type: none"&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt; DATA(url) = 'https://get-geocodes.fdc4fe9.kyma.shoot.live.k8s-hana.ondemand.com/?address='.&lt;BR /&gt;
    LOOP AT im_t_xadrc ASSIGNING FIELD-SYMBOL(&amp;lt;fs_xadrc&amp;gt;).&lt;BR /&gt;
&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-house_num1 IS NOT INITIAL.&lt;BR /&gt;
        full_address = &amp;lt;fs_xadrc&amp;gt;-house_num1.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-street IS NOT INITIAL.&lt;BR /&gt;
        CONCATENATE full_address &amp;lt;fs_xadrc&amp;gt;-street INTO full_address SEPARATED BY space.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-city1 IS NOT INITIAL.&lt;BR /&gt;
        CONCATENATE full_address &amp;lt;fs_xadrc&amp;gt;-city1 INTO full_address SEPARATED BY space.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-region IS NOT INITIAL.&lt;BR /&gt;
        CONCATENATE full_address &amp;lt;fs_xadrc&amp;gt;-region INTO full_address SEPARATED BY space.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-post_code1 IS NOT INITIAL.&lt;BR /&gt;
        CONCATENATE full_address &amp;lt;fs_xadrc&amp;gt;-post_code1 INTO full_address SEPARATED BY space.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      IF &amp;lt;fs_xadrc&amp;gt;-country IS NOT INITIAL.&lt;BR /&gt;
        CONCATENATE full_address &amp;lt;fs_xadrc&amp;gt;-country INTO full_address SEPARATED BY space.&lt;BR /&gt;
      ENDIF.&lt;BR /&gt;
      REPLACE '#' WITH space INTO full_address.&lt;BR /&gt;
      SHIFT full_address LEFT DELETING LEADING space.&lt;BR /&gt;
      CONDENSE full_address.&lt;BR /&gt;
      CONCATENATE url full_address INTO DATA(final_url).&lt;BR /&gt;
    ENDLOOP.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Next, an HTTP client for the generated URL must be created. This is done by calling the method CREATE_FROM_URL of class CL_HTTP_CLIENT. This HTTP client is used to send the request to Kyma Serverless Runtime and receive in response the Geocodes of the provided search parameters.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;"create HTTP client by url&lt;BR /&gt;
    CALL METHOD cl_http_client=&amp;gt;create_by_url&lt;BR /&gt;
      EXPORTING&lt;BR /&gt;
        url                = final_url&lt;BR /&gt;
      IMPORTING&lt;BR /&gt;
        client             = lo_http_client&lt;BR /&gt;
      EXCEPTIONS&lt;BR /&gt;
        argument_not_found = 1&lt;BR /&gt;
        plugin_not_active  = 2&lt;BR /&gt;
        internal_error     = 3&lt;BR /&gt;
        OTHERS             = 4.&lt;BR /&gt;
&lt;BR /&gt;
    IF sy-subrc &amp;lt;&amp;gt; 0.&lt;BR /&gt;
      "error handling&lt;BR /&gt;
    ENDIF.&lt;BR /&gt;
&lt;BR /&gt;
*** Send the request&lt;BR /&gt;
    lo_http_client-&amp;gt;send(&lt;BR /&gt;
      EXCEPTIONS&lt;BR /&gt;
        http_communication_failure = 1&lt;BR /&gt;
        http_invalid_state         = 2 ).&lt;BR /&gt;
&lt;BR /&gt;
*** Receive the respose&lt;BR /&gt;
    lo_http_client-&amp;gt;receive(&lt;BR /&gt;
       EXCEPTIONS&lt;BR /&gt;
         http_communication_failure = 1&lt;BR /&gt;
         http_invalid_state         = 2&lt;BR /&gt;
         http_processing_failed     = 3 ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Finally, we read the result from the HTTP response and update our custom table with the&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Geocode.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;*** Read the result&lt;BR /&gt;
      lv_result = lo_http_client-&amp;gt;response-&amp;gt;get_cdata( ).&lt;BR /&gt;
      IF lv_result NP 'Internal Server Error'.&lt;BR /&gt;
        ls_geocode-mandt = sy-mandt.&lt;BR /&gt;
        ls_geocode-addrnumber = im_address_number.&lt;BR /&gt;
        SPLIT lv_result AT ',' INTO ls_geocode-latitude ls_geocode-longitude.&lt;BR /&gt;
&lt;BR /&gt;
        MODIFY zaddress_geocode FROM ls_geocode.&lt;BR /&gt;
      ENDIF.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The Custom table structure is as below:&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/P2-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Next, in BP transaction we must create an Organization BP with the values below for address fields which in turn will be considered for the final URL generation:&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/P3-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The address number of the BP above is:&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/P4-3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;On Save of the Business Partner, the custom table ZADDRESS_GEOCODE is updated:&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/08/P5-4.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Note: We did not enhance the BP transaction to display these coordinates, but such enhancements can be taken up if required for the project.&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In this blog post, we have seen how a Serverless Function developed in Kyma Runtime can be consumed in the SAP S/4HANA system for the extensibility of Business Address Services or any other SAP S/4HANA applications.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-extend-sap-s-4hana-business-address-services-or-any-other-sap-s/ba-p/13509781"/>
    <published>2021-09-27T10:31:38+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/deploying-an-sap-customer-data-cloud-extension-to-sap-btp-kyma-runtime/ba-p/13492566</id>
    <title>Deploying an SAP Customer Data Cloud Extension to SAP BTP, Kyma Runtime</title>
    <updated>2021-11-10T19:51:00+01:00</updated>
    <author>
      <name>sissa</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/560415</uri>
    </author>
    <content>The objective of this example is to demonstrate how to setup a&amp;nbsp;&lt;STRONG&gt;Kyma serverless function&lt;/STRONG&gt;&amp;nbsp;to be used as an&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://help.sap.com/viewer/product/SAP_CUSTOMER_DATA_CLOUD/GIGYA/en-US" rel="noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud&lt;/A&gt; Extension endpoint&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;SAP Customer Data Cloud Extensions&lt;/STRONG&gt; allow us to synchronously intercept specific SAP Customer Data Cloud REST API calls on the server-side and to execute custom business logic before the specific API call invokes SAP Customer Data Cloud. They also act like filters as they can be used to prevent an API call from invoking SAP Customer Data Cloud by returning a status with the value of "FAIL" and a custom error message to the user if specific business rules aren't met.&lt;BR /&gt;
&lt;BR /&gt;
Currently, the following SAP Customer Data Cloud REST API calls can be intercepted using an SAP Customer Data Cloud Extension:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;accounts.register&lt;/STRONG&gt;&amp;nbsp;- Registration (OnBeforeAccountsRegister extension)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;accounts.login&lt;/STRONG&gt;&amp;nbsp;- Login (OnBeforeAccountsLogin extension)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;socialize.login&lt;/STRONG&gt;&amp;nbsp;- Social Login (OnBeforeSocialLogin extension)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;accounts.setAccountInfo&lt;/STRONG&gt;&amp;nbsp;- Profile Updates (OnBeforeSetAccountInfo extension)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;accounts.resetPassword&lt;/STRONG&gt;&amp;nbsp;- Reset Password (OnBeforeResetPassword extension)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Send SMS&lt;/STRONG&gt;&amp;nbsp;- Communication (OnBeforeSendSMS extension)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
In this example, the&amp;nbsp;&lt;STRONG&gt;accounts.setAccountInfo&lt;/STRONG&gt; REST API endpoint has been intercepted to cleanse the user's address via an external SAP Data Quality Management microservice.&lt;BR /&gt;
&lt;BR /&gt;
If the address can be cleansed, the request is enriched with the cleansed address and the user's account is updated.&lt;BR /&gt;
&lt;BR /&gt;
On the other hand, if the address can't be cleansed, an error message is returned to the user and the user's account isn't updated.&lt;BR /&gt;
&lt;BR /&gt;
The code of this example can be easily re-used to build any other SAP Customer Data Cloud Extension and deploy it to SAP BTP, Kyma Runtime or to Kyma Open Source.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Notes:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;All the functionality presented here are subject to change and may be changed by SAP at any time for any reason without notice.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;For demonstration, this example uses an API Key to authenticate requests to SAP Data Quality Management. In a real-world scenario, either &lt;A href="https://help.sap.com/viewer/d95546360fea44988eb614718ff7e959/Cloud/en-US/1fa6310be4e14ebb86c0411491bcff97.html" rel="noopener noreferrer" target="_blank"&gt;OAuth 2.0&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="https://help.sap.com/viewer/d95546360fea44988eb614718ff7e959/Cloud/en-US/7e983cce55604a8bb23a137483ea5dca.html" rel="noopener noreferrer" target="_blank"&gt;Client Certificate Authentication&lt;/A&gt;&amp;nbsp;are to be used.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-937115338"&gt;&lt;A id="user-content-scenario" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#scenario" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Scenario&lt;/H2&gt;&lt;BR /&gt;
This example includes a&amp;nbsp;&lt;STRONG&gt;Kyma serverless function&lt;/STRONG&gt;,&amp;nbsp;&lt;EM&gt;cdc-extension&lt;/EM&gt;, that is exposed as an &lt;STRONG&gt;SAP Customer Data Cloud extension endpoint&lt;/STRONG&gt;, and demonstrates how to:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create an &lt;A href="https://help.sap.com/viewer/8b8d6fffe113457094a17701f63e3d6a/GIGYA/en-US/4153ec2f70b21014bbc5a10ce4041860.html" rel="noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud extension&lt;/A&gt;&amp;nbsp;endpoint using a&amp;nbsp;&lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview/#documentation-content" rel="nofollow noopener noreferrer" target="_blank"&gt;Kyma serverless function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Deploy a Kyma serverless function and an API Rule using the&amp;nbsp;&lt;A href="https://kubernetes.io/docs/reference/kubectl/overview/" rel="nofollow noopener noreferrer" target="_blank"&gt;Kubernetes command-line tool&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Alternately, deploy a Kyma serverless function and an API Rule using the Kyma Console User Interface&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Explore&amp;nbsp;&lt;A href="https://api.sap.com/" rel="noopener noreferrer" target="_blank"&gt;api.sap.com&lt;/A&gt;&amp;nbsp;and try out REST API calls using a sandbox environment&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Use the&amp;nbsp;&lt;A href="https://www.sap.com/canada/products/data-quality-management.html" rel="noopener noreferrer" target="_blank"&gt;SAP Data Quality Management microservice&lt;/A&gt;&amp;nbsp;for location data to cleanse addresses&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-998767271"&gt;&lt;A id="user-content-solution-architecture" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#solution-architecture" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Solution Architecture&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/cdc-extension-diagram-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-802253766"&gt;Sequence Diagram&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/cdc-extension-seq-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-347574823"&gt;Suggested introductory readings&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/8b8d6fffe113457094a17701f63e3d6a/GIGYA/en-US/4153ec2f70b21014bbc5a10ce4041860.html" rel="noopener noreferrer" target="_blank"&gt;What is an SAP Customer Data Cloud Extension?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://microlearning.opensap.com/media/1_ucyxrfoj" rel="noopener noreferrer" target="_blank"&gt;An Introduction to SAP Customer Data Cloud Extensions (video)&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/468c2f3c3ca24c2c8497ef9f83154c44.html" rel="noopener noreferrer" target="_blank"&gt;What is Kyma Environment?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview/#documentation-content" rel="nofollow noopener noreferrer" target="_blank"&gt;What is a Kyma Serverless Function?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/05-technical-reference/00-custom-resources/apix-01-apirule/#documentation-content" rel="nofollow noopener noreferrer" target="_blank"&gt;What is a Kyma API Rule?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/" rel="nofollow noopener noreferrer" target="_blank"&gt;Project Kyma Documentation&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/b8e16869e64a4abe93cc194aa6fdacf5.html" rel="noopener noreferrer" target="_blank"&gt;Administration and Operations in the Kyma Environment&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-151061318"&gt;&lt;A id="user-content-pre-requisites" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#pre-requisites" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Pre-requisites&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Provision&amp;nbsp;&lt;A href="https://www.sap.com/canada/products/crm/customer-data-management.html" rel="noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud from Gigya&lt;/A&gt;&amp;nbsp;and &lt;A href="https://help.sap.com/viewer/8b8d6fffe113457094a17701f63e3d6a/GIGYA/en-US/41720d7370b21014bbc5a10ce4041860.html" rel="noopener noreferrer" target="_blank"&gt;setup an SAP Customer Data Cloud site&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" rel="noopener noreferrer" target="_blank"&gt;Get a Free Account on SAP BTP Trial&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-getting-started.html" rel="noopener noreferrer" target="_blank"&gt;Enable SAP BTP, Kyma Runtime&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#d81e7789-ced4-4df6-b4a0-132d8c637077" rel="noopener noreferrer" target="_blank"&gt;Download and install the Kubernetes Command Line Tool&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#4709f3b9-b9bc-45f1-89c1-cd6f097c55f5" rel="noopener noreferrer" target="_blank"&gt;Test the kubectl installation&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" rel="noopener noreferrer" target="_blank"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create your&amp;nbsp;&lt;A href="https://api.sap.com/" rel="noopener noreferrer" target="_blank"&gt;api.sap.com&lt;/A&gt;&amp;nbsp;account.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--45452187"&gt;&lt;A id="user-content-deployment-steps" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#deployment-steps" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Deployment steps&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Go to the&amp;nbsp;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;kyma-runtime-extension-samples&lt;/A&gt;&amp;nbsp;repository and clone it. This repository contains a collection of Kyma sample applications including this example (in the&amp;nbsp;&lt;STRONG&gt;cdc-extension&lt;/STRONG&gt; subfolder). Download the code by choosing the green &lt;STRONG&gt;Code&lt;/STRONG&gt; button, and then choosing one of the options to download the code locally. Alternately, you can also run the following command using your command-line interface within your desired folder location:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;git clone &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/SAP-samples/kyma-runtime-extension-samples&lt;/A&gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The source code of this example is in the &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;cdc-extension&lt;/STRONG&gt;&lt;/A&gt; subfolder of&amp;nbsp;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;this repository&lt;/A&gt;.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Update the values of the following environment variables in the&amp;nbsp;&lt;STRONG&gt;./kyma-runtime-extension-samples/cdc-extension/k8s/function.yaml&lt;/STRONG&gt;&amp;nbsp;file:&lt;BR /&gt;
&lt;CODE&gt;CDC_API_KEY&lt;/CODE&gt;,&amp;nbsp;&lt;CODE&gt;SAP_API_HUB_API_KEY&lt;/CODE&gt;,&amp;nbsp;&lt;CODE&gt;PUBLIC_KEY_KID&lt;/CODE&gt;,&amp;nbsp;&lt;CODE&gt;PUBLIC_KEY_N&lt;/CODE&gt;&amp;nbsp;and&amp;nbsp;&lt;CODE&gt;PUBLIC_KEY_E&lt;/CODE&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;CDC_API_KEY&lt;/CODE&gt; - This is the API Key of the SAP Customer Data Cloud site and can be got from the &lt;A href="https://console.gigya.com/" rel="nofollow noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud console&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;SAP_API_HUB_API_KEY&lt;/CODE&gt;&amp;nbsp;- This is the API Key of SAP API Business Hub. Login to&amp;nbsp;&lt;A href="https://api.sap.com/" rel="noopener noreferrer" target="_blank"&gt;api.sap.com&lt;/A&gt;. Then, go to your profile settings and click on&amp;nbsp;&lt;STRONG&gt;Show API Key&lt;/STRONG&gt;&amp;nbsp;to get the value for this variable.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Go to &lt;A href="https://accounts" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://accounts&lt;/A&gt;.&lt;STRONG&gt;SAP_Customer_Data_Cloud_Data_Center&lt;/STRONG&gt;/accounts.getJWTPublicKey?apiKey=&lt;STRONG&gt;Your_SAP_Customer_Data_Cloud_Site_API_Key&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://help.sap.com/viewer/8b8d6fffe113457094a17701f63e3d6a/GIGYA/en-US/41573b6370b21014bbc5a10ce4041860.html" rel="noopener noreferrer" target="_blank"&gt;Find your SAP Customer Data Cloud Data Center&lt;/A&gt;. Replace &lt;STRONG&gt;SAP_Customer_Data_Cloud_Data_Center&lt;/STRONG&gt;&amp;nbsp;with your Data Center (For example, the US Data Center is&amp;nbsp;&lt;STRONG&gt;us1.gigya.com&lt;/STRONG&gt;). Replace &lt;STRONG&gt;Your_SAP_Customer_Data_Cloud_Site_API_Key&lt;/STRONG&gt; with your SAP Customer Data Cloud site's API Key.&lt;BR /&gt;
&lt;BR /&gt;
The response JSON body of the above request will also include the following fields: &lt;STRONG&gt;kid&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;n&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;e&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;PUBLIC_KEY_KID&lt;/CODE&gt;&amp;nbsp;- This is the value of the&amp;nbsp;&lt;STRONG&gt;kid&lt;/STRONG&gt;&amp;nbsp;field in the response above.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;PUBLIC_KEY_N&lt;/CODE&gt;&amp;nbsp;- This is the value of the&amp;nbsp;&lt;STRONG&gt;n&lt;/STRONG&gt;&amp;nbsp;field in the response above.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;PUBLIC_KEY_E&lt;/CODE&gt;&amp;nbsp;- This is the value of the&amp;nbsp;&lt;STRONG&gt;e&lt;/STRONG&gt;&amp;nbsp;field in the response above.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create a Kubernetes namespace with the name&amp;nbsp;&lt;CODE&gt;cdc&lt;/CODE&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl create namespace cdc&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&amp;nbsp;As a prerequisite, please follow the steps listed in the following tutorial:&amp;nbsp;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" rel="noopener noreferrer" target="_blank"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Alternately, use the Kyma Console User Interface to create a new namespace&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Open the Kyma console and click on&amp;nbsp;&lt;STRONG&gt;Add new namespace&lt;/STRONG&gt;. Enter its name as&amp;nbsp;&lt;STRONG&gt;cdc&lt;/STRONG&gt;&amp;nbsp;and click the&amp;nbsp;&lt;STRONG&gt;Create&lt;/STRONG&gt;&amp;nbsp;button.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/1-16.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/2-11.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create/update Kubernetes resources of the&amp;nbsp;&lt;STRONG&gt;cdc-extension serverless function&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl apply -f ./kyma-runtime-extension-samples/cdc-extension/k8s/function.yaml&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl apply -f ./kyma-runtime-extension-samples/cdc-extension/k8s/api-rule.yaml&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&amp;nbsp;As a prerequisite, please follow the steps listed in the following tutorial:&amp;nbsp;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" rel="noopener noreferrer" target="_blank"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;The resources are represented as declarative YAML objects. Applying the resources will perform the following steps:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Deploy the Kyma serverless function&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Expose the serverless function using a Kyma API Rule that will serve as the SAP Customer Data Cloud Extension endpoint&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Alternately, deploy the Kyma serverless function and API Rule using the Kyma Console User Interface:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Open the Kyma console and select the&amp;nbsp;&lt;STRONG&gt;cdc&lt;/STRONG&gt;&amp;nbsp;namespace.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/3-8.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on&amp;nbsp;&lt;STRONG&gt;Workloads&lt;/STRONG&gt;. Then, click on&amp;nbsp;&lt;STRONG&gt;Deploy new workload&lt;/STRONG&gt;&amp;nbsp;and select&amp;nbsp;&lt;STRONG&gt;Upload YAML&lt;/STRONG&gt;.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/4-7.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Then, click on&amp;nbsp;&lt;STRONG&gt;Browse&lt;/STRONG&gt;&amp;nbsp;to select the following YAML file, and click on&amp;nbsp;&lt;STRONG&gt;Deploy&lt;/STRONG&gt;:&amp;nbsp;&lt;STRONG&gt;&lt;STRONG&gt;./kyma-runtime-extension-samples/cdc-extension/k8s/function.yaml&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/5-6.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Repeat the above steps and select the following YAML file. Then, click on&amp;nbsp;&lt;STRONG&gt;Deploy&lt;/STRONG&gt;:&amp;nbsp;&lt;STRONG&gt;&lt;STRONG&gt;./kyma-runtime-extension-samples/cdc-extension/k8s/api-rule.yaml&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/6-6.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Go to the Kyma Console -&amp;gt;&amp;nbsp;&lt;STRONG&gt;cdc&lt;/STRONG&gt;&amp;nbsp;namespace -&amp;gt; &lt;STRONG&gt;Discovery &amp;amp; Network&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;API Rules&lt;/STRONG&gt;. Copy the&amp;nbsp;&lt;STRONG&gt;host&lt;/STRONG&gt;&amp;nbsp;URL of the cdc-extension API Rule.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/7-4.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Then, go to the &lt;A href="https://console.gigya.com/" rel="nofollow noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud Console&lt;/A&gt;. Select your site and click on &lt;STRONG&gt;Extensions&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/8-5.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Enter any &lt;STRONG&gt;Name&lt;/STRONG&gt;, select the &lt;STRONG&gt;API&lt;/STRONG&gt; as&amp;nbsp;&lt;STRONG&gt;accounts.setAccountInfo (OnBeforeSetAccountInfo)&lt;/STRONG&gt;, enter any &lt;STRONG&gt;Description&lt;/STRONG&gt;, paste the &lt;STRONG&gt;host&lt;/STRONG&gt; URL from step 5 above and click on &lt;STRONG&gt;Advanced&lt;/STRONG&gt;. Then, enter the &lt;STRONG&gt;Timeout&lt;/STRONG&gt; as 10000 ms, select the &lt;STRONG&gt;Fallback Policy&lt;/STRONG&gt; as &lt;STRONG&gt;FailOnAnyError&lt;/STRONG&gt; and click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/9-6.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;In the &lt;A href="https://console.gigya.com/" rel="nofollow noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud Console&lt;/A&gt;, select your site and click on &lt;STRONG&gt;Schema&lt;/STRONG&gt; in the left menu under &lt;STRONG&gt;Registration-as-a-Service&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/10-4.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Set the following schema fields to be &lt;STRONG&gt;Required&lt;/STRONG&gt; and select&amp;nbsp;&lt;STRONG&gt;Write Access&lt;/STRONG&gt;&amp;nbsp;as&amp;nbsp;&lt;STRONG&gt;clientModify &lt;/STRONG&gt;for all of them. Then, click &lt;STRONG&gt;Save Changes&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.address&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.city&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.state&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.zip&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.country&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/16-2.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;In the &lt;A href="https://console.gigya.com/" rel="nofollow noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud Console&lt;/A&gt;, select your site and click on &lt;STRONG&gt;Screen-Sets&lt;/STRONG&gt; in the left menu under &lt;STRONG&gt;Registration-as-a-Service&lt;/STRONG&gt;.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/17-1.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click on the &lt;STRONG&gt;Default-RegistrationLogin&lt;/STRONG&gt; screen-set.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/18-1.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Select the &lt;STRONG&gt;Registration Completion&lt;/STRONG&gt; screen from the dropdown.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/19-1.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Add four Textbox components and one Dropdown component to the SAP Customer Data Cloud &lt;STRONG&gt;Registration Completion&lt;/STRONG&gt; screen and map them to the following fields.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.address&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.city&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.state&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.zip&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;profile.country&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/20-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--241965692"&gt;&lt;A id="user-content-steps-to-test-the-solution" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#steps-to-test-the-solution" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Steps to test the solution&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Register an account in your SAP Customer Data Cloud site.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&amp;nbsp;This can also be done by previewing the registration screen of the&amp;nbsp;&lt;STRONG&gt;Default-RegistrationLogin&lt;/STRONG&gt; screen-set in the&amp;nbsp;&lt;A href="https://console.gigya.com/" rel="nofollow noopener noreferrer" target="_blank"&gt;SAP Customer Data Cloud console&lt;/A&gt;.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/21-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;The&amp;nbsp;&lt;STRONG&gt;Registration Completion&lt;/STRONG&gt; screen will be displayed. Enter an invalid address and click the&amp;nbsp;&lt;STRONG&gt;Submit&lt;/STRONG&gt;&amp;nbsp;button. An error message will be returned.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/22-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Fix the address and click the&amp;nbsp;&lt;STRONG&gt;Submit&lt;/STRONG&gt;&amp;nbsp;button. The form should be processed successfully.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/23-3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;View the details of the account that was registered in the&amp;nbsp;&lt;STRONG&gt;Identity Access&lt;/STRONG&gt; screen of the SAP Customer Data Cloud console. It can be observed that the address of the user has been cleansed.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/24-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--438479197"&gt;&lt;A id="user-content-troubleshooting-steps" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#troubleshooting-steps" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Troubleshooting steps&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--505909983"&gt;&lt;A id="user-content-check-the-logs-of-your-kubernetes-pods" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#check-the-logs-of-your-kubernetes-pods" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;Check the logs of your Kubernetes pods&lt;/H3&gt;&lt;BR /&gt;
To see the logs of a specific function, open the function in the Kyma console (Go&amp;nbsp;to&amp;nbsp;&lt;STRONG&gt;Workloads&lt;/STRONG&gt; -&amp;gt;&amp;nbsp;&lt;STRONG&gt;Functions&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;cdc-extension&lt;/STRONG&gt;) and you will see the logs in an expandable window at the bottom of the page.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/25-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/26-3.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/27-3.png" /&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Alternately, go to &lt;STRONG&gt;Workloads&lt;/STRONG&gt; -&amp;gt;&amp;nbsp;&lt;STRONG&gt;Pods&lt;/STRONG&gt; in the Kyma Console (within the &lt;STRONG&gt;cdc&lt;/STRONG&gt; namespace) to see the list of all running pods. Then, click on the three dots to the right of the running pod of the cdc-extension function, and click on &lt;STRONG&gt;Show Logs&lt;/STRONG&gt; to see the logs of the pod.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/29-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Or use the following kubectl command to get the list of pods running in the cdc namespace.&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl get pods -n cdc&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Then, to see the logs of any of the pods, use the following syntax:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl logs &amp;lt;pod-name&amp;gt; -n &amp;lt;namespace-name&amp;gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Example:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl logs cdc-extension-65khj-58b6d69cd9-l7dgs -n cdc&lt;/CODE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--831506207"&gt;Conclusion&lt;A id="user-content-check-the-logs-of-your-kubernetes-pods" class="anchor" href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-extension#check-the-logs-of-your-kubernetes-pods" aria-hidden="true" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;&lt;/H2&gt;&lt;BR /&gt;
This example demonstrates how to easily extend SAP Customer Data Cloud. Care should be taken, however, to ensure that the custom business logic executes as quickly as possible so as to provide a good user experience. In general, synchronous microservices should execute within about 50 ms to about 300 ms depending on the use case. It is to be noted that SAP Customer Data Cloud Extensions currently support a maximum latency of 10,000 ms. Here are a few things you could do that could help decrease the latency of your Kyma serverless function:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Minimize external API calls as much as possible.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Parallelize external API calls that aren't dependent on each other.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Use OData or GraphQL APIs if possible, to get only the required data when making external API calls. For example, use the &lt;STRONG&gt;$select&lt;/STRONG&gt; parameter when using OData calls to select the fields to be returned.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Simplify the logic of the Kyma serverless function and reduce the amount of custom code as much as possible.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Cache the responses of repetitive external API calls having identical request payloads using fully managed caching solutions if possible. In this example, the SAP Customer Data Cloud Public Key, that hardly changes, has been saved using environment variables, and the API call to get the Public Key is only made if it has changed.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Increase the replicas (horizontal scaling) or the memory and CPU resource usage of your Kyma serverless function (vertical scaling) for more resource intensive workloads or higher load, which can be easily done in the &lt;STRONG&gt;Resources&lt;/STRONG&gt; tab of the Kyma serverless function (&lt;STRONG&gt;Workloads&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;Functions&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;cdc-extension&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;Resources&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;Runtime Profile&lt;/STRONG&gt;). You can also utilize the auto-scaling feature of the Kyma Runtime by setting minimum and maximum replicas.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/30-1.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
As a next step, you could try to extend this example to implement your own custom logic or use case.&lt;BR /&gt;
&lt;BR /&gt;
I'd like to request you to kindly provide your feedback or ask clarifying questions related to this post in the comment section below. Additionally, I'd like to invite you to submit any broader Kyma related questions in the &lt;A href="https://answers.sap.com/tags/73554900100800003012" target="_blank" rel="noopener noreferrer"&gt;Q&amp;amp;A area of the SAP BTP, Kyma runtime topic&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
If the SAP BTP, Kyma runtime topic interests you, here are some other links that you may like:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://community.sap.com/topics/kyma" target="_blank"&gt;Kyma at SAP&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorial-navigator.html?search=kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma related SAP Tutorials for Developers&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Lastly, if you liked this post, I'd like to request you to kindly hit the like icon, leave a comment below or share this post.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/deploying-an-sap-customer-data-cloud-extension-to-sap-btp-kyma-runtime/ba-p/13492566"/>
    <published>2021-11-10T19:51:00+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/enrich-contact-data-on-sap-customer-data-platform-with-master-data-from-sap/ba-p/13510526</id>
    <title>Enrich contact data on SAP Customer Data Platform with master data from SAP S/4HANA Cloud using a Kyma Serverless Function</title>
    <updated>2021-11-24T11:30:42+01:00</updated>
    <author>
      <name>sissa</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/560415</uri>
    </author>
    <content>This example demonstrates how to set up a Kyma Serverless Function as an &lt;STRONG&gt;SAP Customer Data Platform&lt;/STRONG&gt; pre-mapping &lt;STRONG&gt;Extension&lt;/STRONG&gt; endpoint and to use it to enrich contact data extracted from an &lt;STRONG&gt;Amazon S3 Cloud Object Storage &lt;/STRONG&gt;bucket with master data from &lt;STRONG&gt;SAP S/4HANA Cloud&lt;/STRONG&gt; &lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;Business Partner (A2X) microservice&lt;/A&gt;&lt;STRONG&gt;,&lt;/STRONG&gt; before ingesting it to &lt;STRONG&gt;SAP Customer Data Platform (CDP)&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
An &lt;STRONG&gt;SAP Customer Data Platform &lt;/STRONG&gt;pre-mapping &lt;STRONG&gt;Extension&lt;/STRONG&gt; can be used to synchronously intercept the data ingestion flow of &lt;STRONG&gt;SAP Customer Data Platform events&lt;/STRONG&gt; that ingest data from supported sources such as Commerce applications, Cloud Storage Solutions, CRM Solutions, Custom Web Applications and SAP Customer Data Cloud.&lt;BR /&gt;
&lt;BR /&gt;
In this example, email addresses and unique identifiers of contacts are ingested from an &lt;STRONG&gt;Amazon S3 Cloud Object Storage &lt;/STRONG&gt;bucket into &lt;STRONG&gt;SAP Customer Data Platform&lt;/STRONG&gt;. During the data ingestion process, the flow is intercepted by an &lt;STRONG&gt;Extension&lt;/STRONG&gt; (the &lt;STRONG&gt;Kyma Serverless Function&lt;/STRONG&gt;) that enriches the request with additional data from &lt;STRONG&gt;SAP S/4HANA Cloud &lt;/STRONG&gt;such as the name, phone number and organizations of each of the contacts.&lt;BR /&gt;
&lt;BR /&gt;
The &lt;STRONG&gt;Kyma Serverless Function&lt;/STRONG&gt; used in this example will work with other supported sources as well such as &lt;STRONG&gt;Google Cloud Storage&lt;/STRONG&gt; or &lt;STRONG&gt;Microsoft Azure Blob&lt;/STRONG&gt;. The only change required is to connect a different source to &lt;STRONG&gt;SAP Customer Data Platform&lt;/STRONG&gt; instead of an &lt;STRONG&gt;Amazon S3 Cloud Object Storage &lt;/STRONG&gt;bucket that is demonstrated here.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note: All the functionality presented here are subject to change and may be changed by SAP at any time for any reason without notice.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;H2 id="toc_1" id="toc-hId-958296615"&gt;Scenario&lt;/H2&gt;&lt;BR /&gt;
This example includes a &lt;STRONG&gt;Kyma Serverless Function&lt;/STRONG&gt;, &lt;EM&gt;cdp-extension&lt;/EM&gt;, that is exposed as an &lt;STRONG&gt;SAP Customer Data Platform Extension&lt;/STRONG&gt; endpoint, and demonstrates how to:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create an &lt;A href="https://help.sap.com/viewer/8438f051ded544d2ba1303e67fc5ff86/PROD/en-US/67ac7304cead44a9a6b762f583fe1fe1.html" target="_blank" rel="noopener noreferrer"&gt;SAP Customer Data Platform Extension&lt;/A&gt; endpoint using a &lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview/#documentation-content" target="_blank" rel="nofollow noopener noreferrer"&gt;Kyma Serverless Function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Deploy a Kyma Serverless Function and an API Rule with &lt;STRONG&gt;JWT Access strategy&lt;/STRONG&gt; using the &lt;A href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="nofollow noopener noreferrer"&gt;Kubernetes command-line tool&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Alternately, deploy a Kyma Serverless Function and an API Rule with &lt;STRONG&gt;JWT Access strategy&lt;/STRONG&gt; using the Kyma Console User Interface&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Explore &lt;A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer"&gt;api.sap.com&lt;/A&gt; and try out REST API calls using a sandbox environment&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Use the &lt;A href="https://www.sap.com/canada/products/data-quality-management.html" target="_blank" rel="noopener noreferrer"&gt;SAP S/4HANA Cloud Business Partner (A2X) microservice&lt;/A&gt; for Business Partner, Supplier, and Customer master data in SAP S/4HANA Cloud system&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H4 id="toc_2" id="toc-hId-1019948548"&gt;Solution Architecture&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/cdp-extension-diagram.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc_3" id="toc-hId-823435043"&gt;Sequence Diagram&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/cdp-extension-seq.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc_4" id="toc-hId-368756100"&gt;Suggested introductory readings&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/8438f051ded544d2ba1303e67fc5ff86/PROD/en-US/67ac7304cead44a9a6b762f583fe1fe1.html" target="_blank" rel="noopener noreferrer"&gt;What is an SAP Customer Data Platform Extension?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/8438f051ded544d2ba1303e67fc5ff86/PROD/en-US/f4b17b0302e248da805fd9e4530934e5.html" target="_blank" rel="noopener noreferrer"&gt;SAP Customer Data Platform Sources and Destinations&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/8438f051ded544d2ba1303e67fc5ff86/PROD/en-US/8722f8e5157b4cf9be5f0177906a0351.html" target="_blank" rel="noopener noreferrer"&gt;Using Kyma with SAP Customer Data Platform Extensions&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/468c2f3c3ca24c2c8497ef9f83154c44.html" target="_blank" rel="noopener noreferrer"&gt;What is Kyma Environment?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview/#documentation-content" target="_blank" rel="nofollow noopener noreferrer"&gt;What is a Kyma Serverless Function?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/05-technical-reference/00-custom-resources/apix-01-apirule/#documentation-content" target="_blank" rel="nofollow noopener noreferrer"&gt;What is a Kyma API Rule?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;Project Kyma Documentation&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/b8e16869e64a4abe93cc194aa6fdacf5.html" target="_blank" rel="noopener noreferrer"&gt;Administration and Operations in the Kyma Environment&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc_5" id="toc-hId-172242595"&gt;Pre-requisites&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Provision &lt;A href="https://www.sap.com/canada/products/customer-data-platform.html" target="_blank" rel="noopener noreferrer"&gt;SAP Customer Data Platform&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer"&gt;Get a Free Account on SAP BTP Trial&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-getting-started.html" target="_blank" rel="noopener noreferrer"&gt;Enable SAP BTP, Kyma Runtime&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#d81e7789-ced4-4df6-b4a0-132d8c637077" target="_blank" rel="noopener noreferrer"&gt;Download and install the Kubernetes Command Line Tool&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#4709f3b9-b9bc-45f1-89c1-cd6f097c55f5" target="_blank" rel="noopener noreferrer"&gt;Test the kubectl installation&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" target="_blank" rel="noopener noreferrer"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create your &lt;A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer"&gt;api.sap.com&lt;/A&gt; account.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Get an &lt;A href="https://aws.amazon.com/free/" target="_blank" rel="nofollow noopener noreferrer"&gt;AWS Free Tier account&lt;/A&gt; or use your existing AWS account to &lt;A href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html" target="_blank" rel="nofollow noopener noreferrer"&gt;create an Amazon S3 bucket&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc_6" id="toc-hId--24270910"&gt;Deployment steps&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc_7" id="toc-hId--91701696"&gt;Deploy the Kyma Serverless Function&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Go to the &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples" target="_blank" rel="nofollow noopener noreferrer"&gt;kyma-runtime-extension-samples&lt;/A&gt; repository and clone it. This repository contains a collection of Kyma sample applications including this example (in the &lt;STRONG&gt;cdp-extension&lt;/STRONG&gt; subfolder). Download the code by choosing the green Code button, and then choosing one of the options to download the code locally. Alternately, you can also run the following command using your command-line interface within your desired folder location:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI style="list-style-type: none"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;git clone &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/SAP-samples/kyma-runtime-extension-samples&lt;/A&gt;&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The source code of this example is in the &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdp-extension" target="_blank" rel="nofollow noopener noreferrer"&gt;cdp-extension&lt;/A&gt; subfolder of this repository.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Update the values of the following environment variable in the &lt;STRONG&gt;./kyma-runtime-extension-samples/cdp-extension/k8s/function.yaml&lt;/STRONG&gt; file: &lt;CODE&gt;SAP_API_HUB_API_KEY&lt;/CODE&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;SAP_API_HUB_API_KEY&lt;/CODE&gt; - This is the API Key of SAP API Business Hub. Login to &lt;A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer"&gt;api.sap.com&lt;/A&gt;. Then, go to your profile settings and click on &lt;STRONG&gt;Show API Key&lt;/STRONG&gt; to get the value for this variable.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Make the following changes in the &lt;STRONG&gt;./kyma-runtime-extension-samples/cdp-extension/k8s/api-rule.yaml&lt;/STRONG&gt; file:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Replace &lt;CODE&gt;DATA_CENTER&lt;/CODE&gt; with the Data Center that is closest to you. As an example, the US Data Center is &lt;CODE&gt;us1.gigya.com&lt;/CODE&gt;. For other locations, check &lt;A href="https://help.sap.com/viewer/8b8d6fffe113457094a17701f63e3d6a/GIGYA/en-US/41573b6370b21014bbc5a10ce4041860.html" target="_blank" rel="noopener noreferrer"&gt;Finding your Data Center&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Replace &lt;CODE&gt;BUSINESS_UNIT_ID&lt;/CODE&gt; with your Business Unit ID, which can be located in your SAP Customer Data Platform console URL after &lt;CODE&gt;/business-unit/&lt;/CODE&gt;.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create a Kubernetes namespace with the name &lt;CODE&gt;cdp&lt;/CODE&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl create namespace cdp&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; As a prerequisite, please follow the steps listed in the following tutorial: &lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" target="_blank" rel="noopener noreferrer"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Alternately, use the Kyma Console User Interface to create a new namespace&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Open the Kyma console and click on &lt;STRONG&gt;Add new namespace&lt;/STRONG&gt;. Enter its name as &lt;STRONG&gt;cdp&lt;/STRONG&gt; and click the &lt;STRONG&gt;Create&lt;/STRONG&gt; button.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/19-7.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/20-10.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create/update Kubernetes resources of the &lt;STRONG&gt;cdp-extension serverless function&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl apply -f ./kyma-runtime-extension-samples/cdp-extension/k8s/function.yaml&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;kubectl apply -f ./kyma-runtime-extension-samples/cdp-extension/k8s/api-rule.yaml&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; As a prerequisite, please follow the steps listed in the following tutorial: &lt;A href="https://developers.sap.com/tutorials/cp-kyma-download-cli.html#2ef10816-b759-4080-a8ec-eadbc3317ebd" target="_blank" rel="noopener noreferrer"&gt;Download the Kyma Runtime kubeconfig&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
The resources are represented as declarative YAML objects. Applying the resources will perform the following steps:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Deploy the Kyma serverless function&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Expose the serverless function using a Kyma API Rule with &lt;STRONG&gt;JWT Access strategy&lt;/STRONG&gt; that will serve as the SAP Customer Data Platform Extension endpoint&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Alternately, deploy the Kyma serverless function and API Rule using the Kyma Console User Interface:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Open the Kyma console and select the &lt;STRONG&gt;cdp&lt;/STRONG&gt; namespace.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/21-8.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on &lt;STRONG&gt;Workloads&lt;/STRONG&gt;. Then, click on &lt;STRONG&gt;Deploy new workload&lt;/STRONG&gt; and select &lt;STRONG&gt;Upload YAML&lt;/STRONG&gt;.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/22-9.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Then, click on &lt;STRONG&gt;Browse&lt;/STRONG&gt; to select the following YAML file, and click on &lt;STRONG&gt;Deploy&lt;/STRONG&gt;: &lt;STRONG&gt;&lt;STRONG&gt;./kyma-runtime-extension-samples/cdp-extension/k8s/function.yaml&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/23-5.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Repeat the above steps and select the following YAML file. Then, click on &lt;STRONG&gt;Deploy&lt;/STRONG&gt;: &lt;STRONG&gt;&lt;STRONG&gt;./kyma-runtime-extension-samples/cdp-extension/k8s/api-rule.yaml&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/24-7.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Go to the Kyma Console --&amp;gt; &lt;STRONG&gt;cdp&lt;/STRONG&gt; namespace --&amp;gt; &lt;STRONG&gt;Discovery &amp;amp; Network&lt;/STRONG&gt; --&amp;gt; &lt;STRONG&gt;API Rules&lt;/STRONG&gt;. Copy the &lt;STRONG&gt;host&lt;/STRONG&gt; URL of the cdp-extension API Rule and use it in the last step below.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/25-7.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc_8" id="toc-hId--288215201"&gt;Update the Schema in the SAP Customer Data Platform console&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Login to the &lt;A href="https://universe.cdp.gigya.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Customer Data Platform console&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Go to Dashboard --&amp;gt; Connect --&amp;gt; Customer Schema&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/26-4.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Select Profile Entity. Then, click on JSON and enter the following JSON:&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note: If you already have some custom fields, then only add the &lt;STRONG&gt;phoneNumberDetails&lt;/STRONG&gt; and &lt;STRONG&gt;contactPersonBPID&lt;/STRONG&gt; fields listed in the JSON below.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{ "$schema": "http://json-schema.org/draft-07/schema#", "type": "object", "properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" }, "primaryEmail": { "type": "string" }, "primaryPhone": { "type": "string" }, "masterDataId": { "type": "array", "items": { "type": "string" } }, "crmId": { "type": "array", "items": { "type": "string" } }, "ciamId": { "type": "array", "items": { "type": "string" } }, "emails": { "type": "array", "items": { "type": "string" } }, "phones": { "scopes": [], "type": "array", "items": { "type": "string" } }, "cookieId": { "type": "array", "additionalItems": true, "items": { "type": "string" } }, "searchHistory": { "type": "array", "additionalItems": true, "items": { "type": "string" } }, "phoneNumberDetails": { "type": "object", "additionalProperties": false, "properties": { "phoneNumber": { "type": "string" }, "phoneNumberExtension": { "type": "string" }, "phoneNumberType": { "type": "string" } } }, "contactPersonBPID": { "type": "string" } } }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/27-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Select Activities --&amp;gt; Click on the icon with three lines --&amp;gt; Create New Activity. Enter its name as "groups" and click Save. Then, click on JSON and enter the following JSON:&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{ "type": "array", "items": { "type": "object", "properties": { "customerBPID": { "type": "string" }, "relationshipNumber": { "type": "string" }, "relationshipCategory": { "type": "string" } } } }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/28-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/29-2.png" /&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/30-3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/31-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc_9" id="toc-hId--484728706"&gt;Add a source and create a new event&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Login to the &lt;A href="https://universe.cdp.gigya.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Customer Data Platform console&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Go to Dashboard --&amp;gt; Connect --&amp;gt; Sources --&amp;gt; Connect Application --&amp;gt; Select connect within AWS S3 (under Cloud Storage).&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/01-1.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/02-1.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/03-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/04-2.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Enter the connection details and your AWS credentials as depicted in the screenshots below.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/05-2.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/06-2.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/07-3.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/08.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Once the &lt;STRONG&gt;aws-cdp-integration&lt;/STRONG&gt; source has been created, click to select it.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Then, click on &lt;STRONG&gt;Create New Event&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/09.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;In the &lt;STRONG&gt;Settings&lt;/STRONG&gt; screen, enter the settings as per the screenshots below and click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/10-14.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/11-15.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;In the &lt;STRONG&gt;Model&lt;/STRONG&gt; screen, click on JSON and enter the following JSON:&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{ "type": "object", "additionalProperties": true, "properties": { "profile": { "type": "object", "additionalProperties": true, "properties": { "UID": { "type": "string" }, "email": { "type": "string" }, "firstName": { "type": "string" }, "lastName": { "type": "string" } } }, "data": { "type": "object", "additionalProperties": true, "properties": { "phoneNumber": { "type": "string" }, "phoneNumberExtension": { "type": "string" }, "internationalPhoneNumber": { "type": "string" }, "phoneNumberType": { "type": "string" }, "contactPersonBPID": { "type": "string" }, "groups": { "type": "array", "additionalItems": true, "items": { "type": "object", "additionalProperties": true, "properties": { "customerBPID": { "type": "string" }, "relationshipNumber": { "type": "string" }, "relationshipCategory": { "type": "string" } } } } } } } }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/12-14.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Perform the following mappings in the &lt;STRONG&gt;Mapping&lt;/STRONG&gt; screen:&lt;BR /&gt;
&lt;TABLE&gt;&lt;BR /&gt;
&lt;THEAD&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TH&gt;EVENT SCHEMA&lt;/TH&gt;&lt;BR /&gt;
&lt;TH&gt;CUSTOMER SCHEMA&lt;/TH&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/THEAD&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;profile.UID&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.ciamId&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;profile.email&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.primaryEmail&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;profile.firstName&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.firstName&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;profile.lastName&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.lastName&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.phoneNumber&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.phoneNumberDetails.phoneNumber&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.phoneNumberExtension&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.phoneNumberDetails.phoneNumberExtension&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.internationalPhoneNumber&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.primaryPhone&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.phoneNumberType&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.phoneNumberDetails.phoneNumberType&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.contactPersonBPID&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;PROFILE.contactPersonBPID&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;data.groups&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;GROUPS&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/13-9.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/14-10.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/15-8.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click Next. Finally, in the Scheduled Polling screen, click on &lt;STRONG&gt;Extensions&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/16-8.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Under Pre-mapping, enter the name and URL of the extension, which is the &lt;STRONG&gt;host&lt;/STRONG&gt; URL of the cdp-extension API Rule. Set the &lt;STRONG&gt;Timeout&lt;/STRONG&gt; to 10 seconds, select &lt;STRONG&gt;Stop&lt;/STRONG&gt; as the &lt;STRONG&gt;Failure Policy&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/17-7.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click &lt;STRONG&gt;Save&lt;/STRONG&gt; and &lt;STRONG&gt;Done&lt;/STRONG&gt;.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc_11" id="toc-hId--810324930"&gt;Test the solution&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Upload the sample input file to your AWS S3 bucket:&lt;/STRONG&gt; Upload the &lt;CODE&gt;input_20211119_001.json&lt;/CODE&gt; file (located in the &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdp-extension/input" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;CODE&gt;./kyma-runtime-extension-samples/cdp-extension/input&lt;/CODE&gt;&lt;/A&gt; folder of the &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdp-extension" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;cdp-extension&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;repo) to the &lt;STRONG&gt;input &lt;/STRONG&gt;folder of your AWS S3 bucket.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/32-1.png" /&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note: The &lt;CODE&gt;input_20211119_001.json&lt;/CODE&gt; file contains mock email addresses that are currently used by the &lt;A href="https://www.sap.com/canada/products/data-quality-management.html" target="_blank" rel="noopener noreferrer"&gt;SAP S/4HANA Cloud Business Partner (A2X) microservice&lt;/A&gt; for Business Partner, Supplier, and Customer master data in SAP S/4HANA Cloud system.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Login to the &lt;A href="https://universe.cdp.gigya.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Customer Data Platform console&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Go to Dashboard --&amp;gt; Connect --&amp;gt; Sources --&amp;gt; aws-cdp-integration --&amp;gt; Load users from AWS S3 --&amp;gt; Ingest Now.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/18-6.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If SAP API Hub is up and running and your Extension has been setup correctly, then the data is enriched during ingestion with additional data from SAP S/4HANA Cloud. To verify this, go to Customers --&amp;gt; Search. Then, check to confirm that the contact data has been enriched and ingested as expected.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/36-1.png" /&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/33-1.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/34-1.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/35-2.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc_12" id="toc-hId--659584078"&gt;Troubleshooting steps&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc_13" id="toc-hId--1149500590"&gt;Check the logs of your Kubernetes pods&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;To see the logs of a specific function, open the function in the Kyma console (Go to &lt;STRONG&gt;Workloads&lt;/STRONG&gt; &amp;gt; &lt;STRONG&gt;Functions&lt;/STRONG&gt; &amp;gt; &lt;STRONG&gt;cdp-extension&lt;/STRONG&gt;) and you will see the logs in an expandable window at the bottom of the page.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/37-2.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/38-1.png" /&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/39-1.png" /&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Alternately, go to &lt;STRONG&gt;Workloads&lt;/STRONG&gt; &amp;gt; &lt;STRONG&gt;Pods&lt;/STRONG&gt; in the Kyma Console (within the cdp namespace) to see the list of all running pods. Then, click on the three dots to the right of the running pod of the cdp-extension function, and click on Show Logs to see the logs of the pod.&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/11/40.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Or use the following kubectl command to get the list of pods running in the cdp namespace.&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl get pods -n cdp&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Then, to see the logs of any of the pods, use the following syntax:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl logs &amp;lt;pod-name&amp;gt; -n &amp;lt;namespace-name&amp;gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Example:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;kubectl logs cdp-extension-jqckp-57787d8cd4-d54nw -n cdp&lt;/CODE&gt;&lt;BR /&gt;
&lt;H2 id="toc_14" id="toc-hId--1052611088"&gt;Conclusion&lt;/H2&gt;&lt;BR /&gt;
As you’ve seen, this example demonstrates how to enrich data being ingested to SAP Customer Data Platform using a Kyma Serverless Function that makes external API calls to SAP S/4HANA Cloud Business Partner (A2X) microservice.&lt;BR /&gt;
&lt;BR /&gt;
The external API calls get specific additional information about the contacts, which is also ingested. You can also extend this example to validate specific information about the contacts from the SAP S/4HANA Cloud Business Partner (A2X) microservice. For example, you could verify the postal code and city of contacts.&lt;BR /&gt;
&lt;BR /&gt;
As a next step, you could extend this example to support your use case and you could also try using another source instead such as Google Cloud Storage.&lt;BR /&gt;
&lt;BR /&gt;
Since this is a synchronous flow, it is important to ensure that the extension executes as fast as possible. In this example, parallel API calls have been made to the SAP S/4HANA Cloud Business Partner (A2X) microservice to save processing time and to reduce the latency.&lt;BR /&gt;
&lt;BR /&gt;
I’d like to request you to kindly provide your feedback or ask clarifying questions related to this post in the comment section below. Additionally, I’d like to invite you to submit any broader Kyma related questions in the &lt;A href="https://answers.sap.com/tags/73554900100800003012" target="_blank" rel="noopener noreferrer"&gt;Q&amp;amp;A area of the SAP BTP, Kyma runtime topic&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
If the SAP BTP, Kyma runtime topic interests you, here are some other links that you may like:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://community.sap.com/topics/kyma" target="_blank"&gt;Kyma at SAP&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorial-navigator.html?search=kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma related SAP Tutorials for Developers&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Lastly, if you liked this post, I’d like to request you to kindly hit the like icon, leave a comment below or share this post.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/enrich-contact-data-on-sap-customer-data-platform-with-master-data-from-sap/ba-p/13510526"/>
    <published>2021-11-24T11:30:42+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/going-jamstack-with-kyma-runtime-building-a-high-performance-web-app/ba-p/13532938</id>
    <title>Going Jamstack with Kyma Runtime &amp; building a high-performance web app</title>
    <updated>2022-02-24T03:28:46+01:00</updated>
    <author>
      <name>sissa</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/560415</uri>
    </author>
    <content>Some common goals of web development projects are to build fast, secure, scalable and high-performance websites and apps. At the same time, there's also a need for delivering value faster.&lt;BR /&gt;
&lt;BR /&gt;
Thankfully, these days, there are many tools and technologies readily available to help us.&lt;BR /&gt;
&lt;BR /&gt;
This post demonstrates an example that uses the &lt;STRONG&gt;following state-of-the-art technologies&lt;/STRONG&gt; to help achieve these goals and is inspired by the &lt;A href="https://jamstack.org/what-is-jamstack/" target="_blank" rel="nofollow noopener noreferrer"&gt;Jamstack architecture&lt;/A&gt; — &lt;EM&gt;“the modern way to build Websites and Apps that delivers better performance”&lt;SUP&gt;[1]&lt;/SUP&gt;&lt;/EM&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Next.js&lt;/STRONG&gt; — &lt;EM&gt;"gives you the best developer experience with all the features you need for production"&lt;SUP&gt;[2]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Chakra UI&lt;/STRONG&gt; — &lt;EM&gt;"gives you the building blocks you need to build your React applications"&lt;SUP&gt;[3]&lt;/SUP&gt;&lt;/EM&gt;with&lt;EM&gt; "less code"&lt;SUP&gt;[3]&lt;/SUP&gt;&lt;/EM&gt;and&lt;EM&gt; "more speed"&lt;SUP&gt;[3]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Go Programming Language&lt;/STRONG&gt; — language of choice for backend microservices&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Gin&lt;/STRONG&gt; - an HTTP web framework written in Go that &lt;EM&gt;"features a Martini-like API with much better performance -- up to 40 times faster"&lt;SUP&gt;[4]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;SAP HANA Cloud&lt;/STRONG&gt; — a &lt;EM&gt;"high-performance in-memory database"&lt;SUP&gt;[5]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;SAP Event Mesh&lt;/STRONG&gt; — &lt;EM&gt;"a fully managed cloud service that allows applications to communicate through asynchronous events"&lt;SUP&gt;[6]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Kyma&lt;/STRONG&gt;&amp;nbsp;— &lt;EM&gt;"a cloud-native application runtime that combines the power of Kubernetes with a set of best-in-class tools and open-source components"&lt;SUP&gt;[7]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Kubernetes&lt;/STRONG&gt; — &lt;EM&gt;"an open source container orchestration engine for automating deployment, scaling, and management of containerized applications"&lt;SUP&gt;[8]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Cloudflare CDN&lt;/STRONG&gt; — &lt;EM&gt;"stops malicious traffic"&lt;SUP&gt;[9]&lt;/SUP&gt;&lt;/EM&gt;, &lt;EM&gt;"optimizes the delivery of website resources"&lt;SUP&gt;[9]&lt;/SUP&gt;&lt;/EM&gt;, &lt;EM&gt;"routes visitor requests to the nearest Cloudflare data center"&lt;SUP&gt;[9]&lt;/SUP&gt;&lt;/EM&gt;&amp;nbsp;and &lt;EM&gt;"provides security"&lt;SUP&gt;[9]&lt;/SUP&gt;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-960207116"&gt;Next.js app with Kyma Eventing &amp;amp; Go backend connected to SAP HANA Cloud database&lt;/H2&gt;&lt;BR /&gt;
This example illustrates the &lt;STRONG&gt;following major components of SAP BTP, Kyma Runtime&lt;/STRONG&gt; and its goal is to help you to get familiarized with some of the &lt;STRONG&gt;key features of SAP BTP, Kyma Runtime&lt;/STRONG&gt; and to help you use your learnings in your own experiments using a &lt;A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer"&gt;free SAP BTP Trial account&lt;/A&gt;.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Containerized Microservice exposed via an API Rule — a Next.js app used as a client-side web app&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Go Containerized Microservice — a Go app used as a backing service&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Node.js Serverless Function&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Kyma Eventing using either &lt;A href="https://nats.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;NATS&lt;/A&gt; &lt;/STRONG&gt;(available with a free SAP BTP Trial account) &lt;STRONG&gt;or &lt;A href="https://help.sap.com/viewer/product/SAP_EM/Cloud/en-US" target="_blank" rel="noopener noreferrer"&gt;SAP Event Mesh&lt;/A&gt;&lt;/STRONG&gt; (requires a paid account)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
It is modelled as a simple conference registration system that stores user information in an &lt;STRONG&gt;SAP HANA Cloud database&lt;/STRONG&gt; and sends a confirmation email to the user.&lt;BR /&gt;
&lt;BR /&gt;
Its front-end is powered by a &lt;STRONG&gt;Next.js app&lt;/STRONG&gt; that is deployed as a &lt;STRONG&gt;microservice&lt;/STRONG&gt; on &lt;STRONG&gt;Kyma Runtime&lt;/STRONG&gt; with a &lt;STRONG&gt;client-side user interface&lt;/STRONG&gt; and an &lt;STRONG&gt;API endpoint&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Form submissions are sent via the API endpoint to &lt;STRONG&gt;Kyma Eventing&lt;/STRONG&gt;, which can be either &lt;A href="https://nats.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;NATS&lt;/STRONG&gt;&lt;/A&gt; by default, or optionally &lt;A href="https://help.sap.com/viewer/product/SAP_EM/Cloud/en-US" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP Event Mesh&lt;/STRONG&gt;&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
A &lt;STRONG&gt;Serverless Function &lt;/STRONG&gt;consumes events from the queue and sends a confirmation email to the user after saving the user's details to an &lt;STRONG&gt;SAP HANA Cloud database &lt;/STRONG&gt;via a &lt;STRONG&gt;Go Microservice&lt;/STRONG&gt; — a REST API Server microservice that is implemented in &lt;A href="https://go.dev/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Go&lt;/STRONG&gt;&lt;/A&gt; using &lt;A href="https://github.com/gin-gonic/gin" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Gin Web Framework&lt;/STRONG&gt;&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
The &lt;STRONG&gt;Go Microservice&lt;/STRONG&gt; is exposed as a Kubernetes service with &lt;A href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types" target="_blank" rel="nofollow noopener noreferrer"&gt;ClusterIP ServiceType&lt;/A&gt; (by default) and can be accessed via a &lt;STRONG&gt;hostname&lt;/STRONG&gt; that is only accessible within the Kubernetes cluster, with the following format: &lt;EM&gt;&amp;lt;service-name&amp;gt;.&amp;lt;namespace&amp;gt;.svc.cluster.local&lt;/EM&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Mutual TLS (mTLS) is &lt;A href="https://istio.io/latest/docs/tasks/security/authentication/authn-policy/#globally-enabling-istio-mutual-tls-in-strict-mode" target="_blank" rel="nofollow noopener noreferrer"&gt;enabled mesh-wide&lt;/A&gt; by default in Kyma Runtime. To be more specific, the mTLS mode is set to STRICT in a &lt;A href="https://istio.io/latest/docs/reference/config/security/peer_authentication/" target="_blank" rel="nofollow noopener noreferrer"&gt;PeerAuthentication&lt;/A&gt; policy within the root istio-system namespace. As a result, all internal service to service communication within the Kubernetes cluster is encrypted by default using &lt;A href="https://datatracker.ietf.org/doc/html/rfc8446" target="_blank" rel="nofollow noopener noreferrer"&gt;Transport Layer Security&lt;/A&gt; (TLS).&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-892776330"&gt;&lt;STRONG&gt;Solution Architecture&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/conference-registration-app-architecture-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-696262825"&gt;&lt;STRONG&gt;Sequence Diagram&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/conference-registration-app-sequence.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-499749320"&gt;&lt;STRONG&gt;Build and deployment steps&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This web app can be deployed using a &lt;A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer"&gt;free SAP BTP Trial account&lt;/A&gt; via the &lt;STRONG&gt;following steps&lt;/STRONG&gt; that will also help you learn how the major components of &lt;STRONG&gt;Kyma Runtime&lt;/STRONG&gt; work together.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Click the links below for more details.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/pre-requisites.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Pre-requisites&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-1.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 1 - Pre-requisite SendGrid setup steps&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-2.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 2 - Build &amp;amp; deploy the Conference Registration app (Next.js app)&lt;/A&gt; — this step includes the link to the source-code repository&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-3.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 3 - Deploy the Event Consumer function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-4.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 4 - Apply the Event Registration Subscription&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-5.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 5 - Create an instance of SAP HANA Cloud&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-6.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 6 - Deploy the Registrations REST API Server&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-7.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 7 - Connect your web app running on Kyma Runtime to a domain via Cloudflare&lt;/A&gt; — optional step&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-303235815"&gt;&lt;STRONG&gt;Verification steps&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/step-1.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 1 - Verify that all the resources of the app are running&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/step-2.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 2 - View the environment variables in the config map&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/step-3.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 3 - View the environment variables in the secret&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/step-4.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 4 - View the API Rule&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;span class="lia-unicode-emoji" title=":balloon:"&gt;🎈&lt;/span&gt; &lt;span class="lia-unicode-emoji" title=":party_popper:"&gt;🎉&lt;/span&gt; &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/step-5.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 5 - Launch the app and Register to attend the Tech Conference via the app&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/tech-conference-2022-app-screenshot.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-106722310"&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/verification/troubleshooting-steps.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Troubleshooting steps&lt;/A&gt;&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--89791195"&gt;&lt;STRONG&gt;Using Cloudflare CDN&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The DNS provider of the namespace needs be set as Cloudflare to use Cloudflare CDN.&lt;BR /&gt;
&lt;BR /&gt;
For more Information, refer to: &lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/nextjs-app-with-kyma-eventing/docs/setup/step-7.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 7 - Connect your web app running on Kyma Runtime to a domain via Cloudflare&lt;/A&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId--286304700"&gt;&lt;STRONG&gt;Superb performance of the user facing app&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--353735486"&gt;&lt;STRONG&gt;Without Cloudflare CDN&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
Even without Cloudflare CDN, &lt;A href="https://pagespeed.web.dev/" target="_blank" rel="nofollow noopener noreferrer"&gt;Google's PageSpeed Insights&lt;/A&gt; tool gave a &lt;STRONG&gt;Performance score of 100&lt;/STRONG&gt; to the Next.js web app for Desktop.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/pagespeed-insights.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--550248991"&gt;&lt;STRONG&gt;With Cloudflare CDN&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
With Cloudflare CDN, the &lt;STRONG&gt;time to interactive&lt;/STRONG&gt; and &lt;STRONG&gt;total blocking time&lt;/STRONG&gt; were reduced even further.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/pagespeed-insights-with-cdn.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--951076584"&gt;&lt;STRONG&gt;Blazing fast performance of the backing service&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Although this web app only uses the HTTP POST API call of the Go Microservice to save customer records to the SAP HANA Cloud database, the Go Microservice has all the CRUD operations (Create, read, update and delete) implemented in it for the sake of demonstration.&lt;BR /&gt;
&lt;BR /&gt;
The HTTP POST and PUT API calls of the Go Microservice had an almost similar response time. In order to not create too many records in the database during load testing, the HTTP PUT API calls were load tested, which make update requests and they&amp;nbsp;had an &lt;STRONG&gt;average response time of 27.33 ms with 143.4 Hits per second&lt;/STRONG&gt; when tested with &lt;A href="https://www.blazemeter.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;BlazeMeter&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
That is, on average each request was executed within about &lt;STRONG&gt;1/36th of a second&lt;/STRONG&gt;, which is blazing fast for a backing service — and that too with using a &lt;A href="https://developers.sap.com/tutorials/hcp-create-trial-account.html" target="_blank" rel="noopener noreferrer"&gt;free SAP BTP Trial account&lt;/A&gt;!&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/02/blazemeter-test-results.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1147590089"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Implementing the &lt;A href="https://jamstack.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;Jamstack architecture&lt;/A&gt; using the &lt;STRONG&gt;Kyma Runtime&lt;/STRONG&gt; and an &lt;STRONG&gt;SAP HANA Cloud database&lt;/STRONG&gt; results in extremely fast performance, which can be fine-tuned even further by either using caching services such as Redis or by horizontal as well as vertical scaling — key features of Kubernetes that can be easily configured. The added benefit of using the &lt;STRONG&gt;Kyma Runtime&lt;/STRONG&gt; is the seamless connectivity provided by it to various SAP solutions as well as to services of other hyperscalers such as Google Cloud Platform, AWS &amp;amp; Azure using &lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/service-management/smgt-01-overview#documentation-content" target="_blank" rel="nofollow noopener noreferrer"&gt;service operators&lt;/A&gt; — a great topic that is covered in the following blog post: &lt;A href="https://blogs.sap.com/2022/02/25/using-kubernetes-operators-with-kyma-2.0/" target="_blank" rel="noopener noreferrer"&gt;Using Kubernetes operators with SAP BTP Kyma runtime&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
As a next step, you could try to customize this example or put together the different components of &lt;STRONG&gt;Kyma Runtime&lt;/STRONG&gt; that were covered in this example and build a web app for another use case using the &lt;A href="https://jamstack.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;Jamstack architecture&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
If you'd like to dive deeper into some of the key topics that were covered in this blog post, you may find the resources listed in the &lt;STRONG&gt;Further Readings&lt;/STRONG&gt; section below interesting.&lt;BR /&gt;
&lt;BR /&gt;
Also, if you'd like to access the &lt;STRONG&gt;Go Microservice&lt;/STRONG&gt; via a public URL from outside the Kubernetes cluster for testing it using an API client such as &lt;A href="https://www.postman.com/downloads/" target="_blank" rel="nofollow noopener noreferrer"&gt;Postman&lt;/A&gt;, then you'll need to create an API Rule and expose the registrations-rest-api service. To do that, select the conference-registration namespace in the Kyma console. Next, under &lt;STRONG&gt;Discovery and Network&lt;/STRONG&gt;, select &lt;STRONG&gt;API Rules&lt;/STRONG&gt;. Then, click on &lt;STRONG&gt;Create API Rule.&lt;/STRONG&gt; When creating the API Rule, you could also select to set its access strategy to OAuth2 to secure it. If you do that, you'll also need to create an OAuth client to be used to access it. You can do that by selecting &lt;STRONG&gt;Configuration&lt;/STRONG&gt; and then &lt;STRONG&gt;OAuth Clients&lt;/STRONG&gt; from the left menu in the Kyma console.&lt;BR /&gt;
&lt;BR /&gt;
Kindly provide your feedback or feel free to ask clarifying questions related to this post in the comment section below. Additionally, I’d like to invite you to submit any broader Kyma related questions in the &lt;A href="https://answers.sap.com/tags/73554900100800003012" target="_blank" rel="noopener noreferrer"&gt;Q&amp;amp;A area of the SAP BTP, Kyma runtime topic&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
If the &lt;A href="https://blogs.sap.com/tags/73554900100800003012/" target="_blank" rel="noopener noreferrer"&gt;SAP BTP, Kyma runtime topic&lt;/A&gt; interests you, here are some other links that you may like:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://community.sap.com/topics/kyma" target="_blank"&gt;Kyma at SAP&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorial-navigator.html?search=kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma related SAP Tutorials for Developers&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Lastly, if you liked this post, kindly hit the like icon, leave a comment below or share this post. Thank you!&lt;BR /&gt;
&lt;H3 id="toc-hId--1344103594"&gt;&lt;STRONG&gt;References&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://jamstack.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;Jamstack: For fast and secure sites&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://nextjs.org/" target="_blank" rel="nofollow noopener noreferrer"&gt;Next.js by Vercel&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://chakra-ui.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;Chakra UI&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/gin-gonic/gin" target="_blank" rel="nofollow noopener noreferrer"&gt;Gin Web Framework - GitHub&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.sap.com/canada/products/hana.html" target="_blank" rel="noopener noreferrer"&gt;SAP HANA&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/bf82e6b26456494cbdd197057c09979f/Cloud/en-US" target="_blank" rel="noopener noreferrer"&gt;What Is SAP Event Mesh?&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;Kyma - An easy way to extend enterprise applications on Kubernetes&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kubernetes.io/docs/home/" target="_blank" rel="nofollow noopener noreferrer"&gt;Kubernetes Documentation&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.cloudflare.com/fundamentals/get-started/how-cloudflare-works" target="_blank" rel="nofollow noopener noreferrer"&gt;How Cloudflare works&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 class="LC20lb MBeuO DKV0Md" id="toc-hId--1540617099"&gt;&lt;STRONG&gt;Further Readings&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://learning.sap.com/learning-journey/developing-applications-running-on-sap-btp-using-sap-hana-cloud" target="_blank" rel="noopener noreferrer"&gt;SAP Learning Journey: Developing Applications Running on SAP BTP Using SAP HANA Cloud&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://open.sap.com/courses/hana8" target="_blank" rel="noopener noreferrer"&gt;Ride the SAP HANA Wave: Fundamentals and Insights into Cloud Databases&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.sap-press.com/introducing-sap-hana-cloud_5276/" target="_blank" rel="nofollow noopener noreferrer"&gt;Introducing SAP HANA Cloud By Raja Gupta, Denys van Kempen&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/jumpstart-jamstack-development/9781800203495" target="_blank" rel="nofollow noopener noreferrer"&gt;Jumpstart Jamstack Development By Christopher Pecoraro, Vincenzo Gambino&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/nextjs-quick-start-guide/9781788993661" target="_blank" rel="nofollow noopener noreferrer"&gt;Next.js Quick Start Guide By Kirill Konshin&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/real-world-next-js/9781801073493" target="_blank" rel="nofollow noopener noreferrer"&gt;Real-World Next.js By Michele Riva&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/software-architecture-patterns-for-serverless-systems/9781800207035" target="_blank" rel="nofollow noopener noreferrer"&gt;Software Architecture Patterns for Serverless Systems By John Gilbert&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/hands-on-microservices-with-kubernetes/9781789805468" target="_blank" rel="nofollow noopener noreferrer"&gt;Hands-On Microservices with Kubernetes By Gigi Sayfan&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/hands-on-software-architecture-with-golang/9781788622592" target="_blank" rel="nofollow noopener noreferrer"&gt;Hands-On Software Architecture with Golang By Jyotiswarup Raiturkar&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/hands-on-restful-web-services-with-go-second-edition/9781838643577" target="_blank" rel="nofollow noopener noreferrer"&gt;Hands-On RESTful Web Services with Go - Second Edition By Naren Yellavula&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.packtpub.com/product/building-distributed-applications-in-gin/9781801074858" target="_blank" rel="nofollow noopener noreferrer"&gt;Building Distributed Applications in Gin By Mohamed Labouardy&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/going-jamstack-with-kyma-runtime-building-a-high-performance-web-app/ba-p/13532938"/>
    <published>2022-02-24T03:28:46+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/send-personalized-emails-with-sap-customer-data-cloud-webhooks-and-kyma/ba-p/13527872</id>
    <title>Send personalized emails with SAP Customer Data Cloud webhooks and Kyma serverless functions</title>
    <updated>2022-06-28T20:41:33+02:00</updated>
    <author>
      <name>sissa</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/560415</uri>
    </author>
    <content>&lt;STRONG&gt;SAP Customer Data Cloud webhooks&lt;/STRONG&gt; send out asynchronous event notifications to custom notification URLs when specific events occur in SAP Customer Data Cloud flows such as &lt;STRONG&gt;login&lt;/STRONG&gt;, &lt;STRONG&gt;registration&lt;/STRONG&gt;, and &lt;STRONG&gt;account update&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
This post demonstrates an example in which event notifications for the &lt;STRONG&gt;subscription updated&lt;/STRONG&gt; event are sent to a &lt;STRONG&gt;Kyma serverless function, &lt;/STRONG&gt;which has a code snippet that implements some business logic to eventually send a personalized welcome email to users.&lt;BR /&gt;
&lt;BR /&gt;
Two Kyma serverless functions are used in this example and they work together as explained below.&lt;BR /&gt;
&lt;BR /&gt;
The &lt;STRONG&gt;first serverless function&lt;/STRONG&gt; receives notification messages and has a code snippet to extract all the events from each message and post them to an SAP Event Mesh Queue.&lt;BR /&gt;
&lt;BR /&gt;
The &lt;STRONG&gt;second serverless function&lt;/STRONG&gt; has a code snippet to consume the events from the SAP Event Mesh Queue and process them as follows:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;First, it makes an &lt;A href="https://help.sap.com/docs/SAP_CUSTOMER_DATA_CLOUD/8b8d6fffe113457094a17701f63e3d6a/413560f270b21014bbc5a10ce4041860.html" target="_blank" rel="noopener noreferrer"&gt;accounts.getLiteToken REST API&lt;/A&gt; call to get a regToken that is required for the next step&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Next, it makes an &lt;A href="https://help.sap.com/docs/SAP_CUSTOMER_DATA_CLOUD/8b8d6fffe113457094a17701f63e3d6a/cab69a86edae49e2be93fd51b78fc35b.html" target="_blank" rel="noopener noreferrer"&gt;accounts.getAccountInfo REST API&lt;/A&gt; call to get the user's preferences&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Finally, it sends a personalized email to the user based on the user's preferences using SendGrid Email Delivery Service&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note: All the functionality presented here are subject to change and may be changed by SAP at any time for any reason without notice.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1088514426"&gt;&lt;STRONG&gt;Solution Architecture&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/06/cdc-webhook-architecture.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-892000921"&gt;&lt;STRONG&gt;Sequence Diagram&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/06/cdc-webhook-sequence.jpeg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId-695487416"&gt;&lt;STRONG&gt;Source code repository&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/tree/main/cdc-webhook" target="_blank" rel="nofollow noopener noreferrer"&gt;Here's a link&lt;/A&gt; to the source code of this example.&lt;BR /&gt;
&lt;H3 id="toc-hId-498973911"&gt;&lt;STRONG&gt;Build and deployment steps&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This example can be setup using SAP Customer Data Cloud and a free SAP BTP Trial account via the following steps:&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note: Click the links below for more details.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/pre-requisites.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Pre-requisites&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-1.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 1 - Pre-requisite SendGrid setup steps&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-2.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 2 - Create a lite registration screen in SAP Customer Data Cloud&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-3.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 3 - Deploy a Memcached memory-caching service&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-4.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 4 - Deploy the Webhook endpoint&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-5.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 5 - Deploy the Event Consumer Serverless Function&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/setup/step-6.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 6 - Apply the Webhook Event Subscription&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-302460406"&gt;&lt;STRONG&gt;Verification steps&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/verification/step-1.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 1 - Verify that all the resources of the app are running&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/kyma-runtime-extension-samples/blob/main/cdc-webhook/docs/verification/step-2.md" target="_blank" rel="nofollow noopener noreferrer"&gt;Step 2 - Subscribe for a newsletter and receive a customized confirmation email&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-105946901"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
This example shows how easy it is to extend SAP Customer Data Cloud using webhooks and SAP BTP, Kyma runtime. It also shows how to effortlessly and quickly create Kyma serverless functions using the Kyma console to add some simple code snippets without having to worry about the infrastructure details, which results in faster time to market as well as lower infrastructure total cost of ownership (TCO).&lt;BR /&gt;
&lt;BR /&gt;
As a next step, you could &lt;A href="https://blogs.sap.com/2022/03/02/accessing-the-built-in-observability-tools-of-kyma-runtime/" target="_blank" rel="noopener noreferrer"&gt;explore the built-in observability tools of Kyma runtime&lt;/A&gt; for monitoring the serverless functions. With reference to this example, you could also try to create other Kyma serverless functions for your own use cases and implement SAP Customer Data Cloud webhook endpoints for some other events such as the account logged in or account updated events.&lt;BR /&gt;
&lt;BR /&gt;
Kindly provide your feedback or feel free to ask clarifying questions related to this post in the comment section below. Additionally, I’d like to invite you to submit any broader Kyma related questions in the &lt;A href="https://answers.sap.com/tags/73554900100800003012" target="_blank" rel="noopener noreferrer"&gt;Q&amp;amp;A area of the SAP BTP, Kyma runtime topic&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
If the &lt;A href="https://blogs.sap.com/tags/73554900100800003012/" target="_blank" rel="noopener noreferrer"&gt;SAP BTP, Kyma runtime topic&lt;/A&gt; interests you, here are some other links that you may like:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://community.sap.com/topics/kyma" target="_blank"&gt;Kyma at SAP&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://developers.sap.com/tutorial-navigator.html?search=kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma related SAP Tutorials for Developers&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Lastly, if you liked this post, kindly hit the like icon, leave a comment below or share this post. Thank you!&lt;BR /&gt;
&lt;H3 class="LC20lb MBeuO DKV0Md" id="toc-hId--90566604"&gt;&lt;STRONG&gt;Further Readings&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_CUSTOMER_DATA_CLOUD/8b8d6fffe113457094a17701f63e3d6a/417f918270b21014bbc5a10ce4041860.html" target="_blank" rel="noopener noreferrer"&gt;SAP Customer Data Cloud webhooks&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview#documentation-content" target="_blank" rel="nofollow noopener noreferrer"&gt;Kyma serverless functions&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://discovery-center.cloud.sap/missiondetail/3252/3281/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Discovery Center mission - Getting Started with the SAP BTP, Kyma runtime&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://discovery-center.cloud.sap/serviceCatalog/event-mesh?region=all" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Discovery Center mission - Learn more about SAP Event Mesh&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/send-personalized-emails-with-sap-customer-data-cloud-webhooks-and-kyma/ba-p/13527872"/>
    <published>2022-06-28T20:41:33+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-business-technology-platform-serverless-functions-hands-on-tutorial/ba-p/13567231</id>
    <title>SAP Business Technology Platform - Serverless Functions | Hands-On Tutorial Videos</title>
    <updated>2023-02-10T14:22:24+01:00</updated>
    <author>
      <name>dvankempen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/67</uri>
    </author>
    <content>&lt;TABLE style="height: 59px" width="612" bgcolor="#e7f5ff"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;BR /&gt;
&lt;BR /&gt;
A new playlist about SAP Business Technology Platform (BTP) serverless functions has been made available on our YouTube channel.&amp;nbsp;Video tutorials by&amp;nbsp;&lt;SPAN class="mention-scrubbed"&gt;philip.mugglestone&lt;/SPAN&gt;&amp;nbsp;for the SAP HANA Academy and Partner Ecosystem Success.&lt;BR /&gt;
&lt;BR /&gt;
In this article you will find the&amp;nbsp;videos embedded with references and additional information.&lt;BR /&gt;
&lt;BR /&gt;
A prerequisite, as covered in the first video of this series, is some familiarity with BTP. For the SAP BTP Onboarding article, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/04/29/sap-btp-developer-onboarding-2022-hands-on-video-tutorials/" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Developer Onboarding | Hands-on Video Tutorials&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Anything to add? Leave a comment below.&lt;BR /&gt;
&lt;BR /&gt;
Useful? Give us a like and share on social media.&lt;BR /&gt;
&lt;BR /&gt;
Questions? Please use the &lt;A href="https://answers.sap.com/questions/ask.html" target="_blank" rel="noopener noreferrer"&gt;community Q&amp;amp;A&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Thanks!&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/280646_GettyImages-153605568_super_low-1.jpg" height="429" width="612" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-963119900"&gt;&lt;SPAN style="color: #d68c00"&gt;Hands-On Video Tutorials&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-895689114"&gt;Serverless Functions&lt;/H3&gt;&lt;BR /&gt;
In this series of hands-on tutorial videos we cover serverless functions in SAP Business Technology Platform (SAP BTP).&amp;nbsp;Serverless functions allow you to build API- and event-based extensions which can be triggered on demand whilst reducing the implementation and operation effort of an application to the absolute minimum.&amp;nbsp;SAP BTP, Kyma runtime provides a platform to run lightweight functions in a cost-efficient and scalable way using Node.js or Python.&lt;BR /&gt;
&lt;BR /&gt;
Following along in the patented zero-to-hero format, you will be ready to start developing business applications on the SAP Business Technology Platform with minimal effort and no time wasted.&lt;BR /&gt;
&lt;BR /&gt;
Video tutorials by&amp;nbsp;&lt;SPAN class="mention-scrubbed"&gt;philip.mugglestone&lt;/SPAN&gt;&amp;nbsp;for the SAP HANA Academy and Partner Ecosystem Success.&lt;BR /&gt;
&lt;H3 id="toc-hId-699175609"&gt;What You Will Learn&lt;/H3&gt;&lt;BR /&gt;
Watching the complete series of eight videos takes about an hour. What you will learn is&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The concepts and what you need to know to get started with serverless functions&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;How to install and use the jump-start generator for serverless functions&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;How to use the generator to create serverless function projects&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;using Python to interact with SAP HANA Cloud&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;using Node.js and the SAP Cloud SDK to interact with different APIs&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;providing enterprise security for the endpoints (authentication and authorization)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;subscribing to events&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;managing source code using Git and GitHub&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;incorporating an Application Router to facilitate interactive browser-based authentication&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;How access a serverless function created using the jump-start generator from SAP Build Apps including authentication and authorization.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-502662104"&gt;YouTube Playlist&lt;/H3&gt;&lt;BR /&gt;
To bookmark the playlist on YouTube, go to&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.youtube.com/playlist?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="_blank" rel="noopener noreferrer nofollow"&gt;SAP Business Technology Platform - Serverless Functions&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-306148599"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/playlist.png" height="520" width="608" /&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-109635094"&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--86878411"&gt;Documentation&lt;/H3&gt;&lt;BR /&gt;
For the references, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/01-overview/main-areas/serverless/svls-01-overview" target="_blank" rel="nofollow noopener noreferrer"&gt;Serverless - Docs | Kyma&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
For the SAP BTP Onboarding series, go to&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/04/29/sap-btp-developer-onboarding-2022-hands-on-video-tutorials/" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Developer Onboarding | Hands-on Video Tutorials&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
For the tutorials about the SAP BTP Kyma environment, see&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/04/29/sap-btp-developer-onboarding-2022-hands-on-video-tutorials/#kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma Environment | Tutorial Video &lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/docs.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--412474635"&gt;&lt;SPAN style="color: #d68c00"&gt;Getting Started&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--479905421"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone gets started with serverless functions in SAP BTP. After providing an introduction Philip covers prerequisites before showing how to install and use the jump-start generator for serverless functions.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/GOznweBGewU?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/GOznweBGewU?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--676418926"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=GOznweBGewU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=1&amp;amp;t=13s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:13&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Introduction &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=GOznweBGewU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=1&amp;amp;t=295s" target="_blank" rel="nofollow noopener noreferrer"&gt;4:55&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Prerequisites &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=GOznweBGewU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=1&amp;amp;t=394s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:34&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Application Wizard &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=GOznweBGewU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=1&amp;amp;t=420s" target="_blank" rel="nofollow noopener noreferrer"&gt;7:00&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=GOznweBGewU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=1&amp;amp;t=597s" target="_blank" rel="nofollow noopener noreferrer"&gt;9:57&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--948163800"&gt;References&lt;/H3&gt;&lt;BR /&gt;
For the prerequisites, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/04/29/sap-btp-developer-onboarding-2022-hands-on-video-tutorials/#kyma" target="_blank" rel="noopener noreferrer"&gt;Kyma Environment | Tutorial Video &lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/12/16/sap-btp-developer-onboarding-sap-hana-cloud/" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Cloud | Tutorial Video&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/12/16/sap-btp-developer-onboarding-sap-build-apps/" target="_blank" rel="noopener noreferrer"&gt;SAP Build Apps | Tutorial Video&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
For the downloads, see&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://marketplace.visualstudio.com/items?itemName=SAPOS.yeoman-ui" target="_blank" rel="nofollow noopener noreferrer"&gt;Application Wizard - Visual Studio Marketplace&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1144677305"&gt;Illustration&lt;/H3&gt;&lt;BR /&gt;
Run the SAP HANA Academy Function-as-a-service generator in Visual Studio Code with the Template Wizard.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/faas.png" height="343" width="612" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--1047787803"&gt;&lt;SPAN style="color: #d68c00"&gt;Python and SAP HANA Cloud&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1537704315"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project that uses Python to interact with SAP HANA Cloud.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/j_rBuwarYqo?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/j_rBuwarYqo?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1734217820"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=j_rBuwarYqo&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=2&amp;amp;t=22s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:22&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=j_rBuwarYqo&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=2&amp;amp;t=68s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:08&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=j_rBuwarYqo&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=2&amp;amp;t=354s" target="_blank" rel="nofollow noopener noreferrer"&gt;5:54&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=j_rBuwarYqo&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=2&amp;amp;t=488s" target="_blank" rel="nofollow noopener noreferrer"&gt;8:08&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Tear Down &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=j_rBuwarYqo&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=2&amp;amp;t=539s" target="_blank" rel="nofollow noopener noreferrer"&gt;8:59&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1930731325"&gt;References&lt;/H3&gt;&lt;BR /&gt;
For the prerequisites, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/12/16/sap-btp-developer-onboarding-sap-hana-cloud/" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Cloud | Tutorial Video&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--2127244830"&gt;Illustration&lt;/H3&gt;&lt;BR /&gt;
View the function source code using the Kyma Dashboard.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/kyma.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--2030355328"&gt;&lt;SPAN style="color: #d68c00"&gt;Node.js and APIs&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1774695456"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project that uses Node.js and the SAP Cloud SDK to interact with different APIs.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/SERjGBG55kQ?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/SERjGBG55kQ?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1578181951"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=17s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:17&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=65s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:05&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=100s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:40&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; API Key &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=133s" target="_blank" rel="nofollow noopener noreferrer"&gt;2:13&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; SAP Cloud SDK &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=180s" target="_blank" rel="nofollow noopener noreferrer"&gt;3:00&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Deploy &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=235s" target="_blank" rel="nofollow noopener noreferrer"&gt;3:55&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=345s" target="_blank" rel="nofollow noopener noreferrer"&gt;5:45&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Review Services &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=SERjGBG55kQ&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=3&amp;amp;t=417s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:57&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-1843255144"&gt;&lt;SPAN style="color: #d68c00"&gt;Authentication and Authorization&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1353338632"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project that provides enterprise security for the endpoints incorporating both authentication and authorization.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/2Qnkqs821Xc?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/2Qnkqs821Xc?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1156825127"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=32s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:32&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=55s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:55&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=251s" target="_blank" rel="nofollow noopener noreferrer"&gt;4:11&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Deploy &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=313s" target="_blank" rel="nofollow noopener noreferrer"&gt;5:13&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=433s" target="_blank" rel="nofollow noopener noreferrer"&gt;7:13&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Assign Role Collections &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=2Qnkqs821Xc&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=4&amp;amp;t=483s" target="_blank" rel="nofollow noopener noreferrer"&gt;8:03&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-960311622"&gt;Illustration&lt;/H3&gt;&lt;BR /&gt;
Get an authentication token using Postman.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/postman-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-1057201124"&gt;&lt;SPAN style="color: #d68c00"&gt;Events&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-567284612"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project that subscribes to events.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/kVPgFiRn_tU?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/kVPgFiRn_tU?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-370771107"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=kVPgFiRn_tU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=5&amp;amp;t=27s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:27&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=kVPgFiRn_tU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=5&amp;amp;t=63s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:03&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=kVPgFiRn_tU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=5&amp;amp;t=184s" target="_blank" rel="nofollow noopener noreferrer"&gt;3:04&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Deploy &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=kVPgFiRn_tU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=5&amp;amp;t=216s" target="_blank" rel="nofollow noopener noreferrer"&gt;3:36&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=kVPgFiRn_tU&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=5&amp;amp;t=394s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:34&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-174257602"&gt;References&lt;/H3&gt;&lt;BR /&gt;
For the documentation, see&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://kyma-project.io/docs/kyma/latest/02-get-started/04-trigger-workload-with-event/" target="_blank" rel="nofollow noopener noreferrer"&gt;Trigger a workload with an event&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--22255903"&gt;Illustrations&lt;/H3&gt;&lt;BR /&gt;
Triggering an event on the command line using curl.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/event1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
View the result in the pod log file using the Kyma dashboard.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/event2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-74633599"&gt;&lt;SPAN style="color: #d68c00"&gt;Git&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--247099222"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project where the source code is managed via Git instead of being inline.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/HBXazXXKnuY?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/HBXazXXKnuY?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--443612727"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=46s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:46&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=69s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:09&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Create Git Repository &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=272s" target="_blank" rel="nofollow noopener noreferrer"&gt;4:32&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=344s" target="_blank" rel="nofollow noopener noreferrer"&gt;5:44&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Clone Git Repository &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=365s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:05&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Commit and Push Source Files &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=384s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:24&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Deploy &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=441s" target="_blank" rel="nofollow noopener noreferrer"&gt;7:21&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=HBXazXXKnuY&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=6&amp;amp;t=581s" target="_blank" rel="nofollow noopener noreferrer"&gt;9:41&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--640126232"&gt;Illustrations&lt;/H3&gt;&lt;BR /&gt;
Commit source code update using git and GitHub.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/git.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--543236730"&gt;&lt;SPAN style="color: #d68c00"&gt;SAP Build Apps&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1033153242"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to access a serverless function created using the jump-start generator from SAP Build Apps including authentication and authorization.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/1lnXZT4whXM?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/1lnXZT4whXM?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1229666747"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=29s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:29&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=80s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:20&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Launch SAP Build Apps &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=96s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:36&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Assign Role Collections &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=135s" target="_blank" rel="nofollow noopener noreferrer"&gt;2:15&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Create Destination &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=265s" target="_blank" rel="nofollow noopener noreferrer"&gt;4:25&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Create Application in SAP Build Apps &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=461s" target="_blank" rel="nofollow noopener noreferrer"&gt;7:41&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Preview App &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=1lnXZT4whXM&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=7&amp;amp;t=491s" target="_blank" rel="nofollow noopener noreferrer"&gt;8:11&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1426180252"&gt;References&lt;/H3&gt;&lt;BR /&gt;
For the prerequisites, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2022/12/16/sap-btp-developer-onboarding-sap-build-apps/" target="_blank" rel="noopener noreferrer"&gt;SAP Build Apps | Tutorial Video&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1622693757"&gt;Illustrations&lt;/H3&gt;&lt;BR /&gt;
Configure SAP BTP destination REST API integration in SAP Build Apps.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/build.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--1525804255"&gt;&lt;SPAN style="color: #d68c00"&gt;Application Router&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--2015720767"&gt;Video Tutorial&lt;/H3&gt;&lt;BR /&gt;
In this hands-on video tutorial, Philip Mugglestone shows how to use the jump-start generator to create a serverless function project that also incorporates an Application Router in order to facilitate interactive browser-based authentication.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/bXnR9fUliVA?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/bXnR9fUliVA?list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--2044050581"&gt;Markers&lt;/H3&gt;&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=30s" target="_blank" rel="nofollow noopener noreferrer"&gt;0:30&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Jump-start Generator &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=62s" target="_blank" rel="nofollow noopener noreferrer"&gt;1:02&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Code Review &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=156s" target="_blank" rel="nofollow noopener noreferrer"&gt;2:36&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Deploy &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=214s" target="_blank" rel="nofollow noopener noreferrer"&gt;3:34&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Assign Role Collections &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=240s" target="_blank" rel="nofollow noopener noreferrer"&gt;4:00&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Test &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=338s" target="_blank" rel="nofollow noopener noreferrer"&gt;5:38&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Tear Down &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A class="yt-simple-endpoint style-scope yt-formatted-string" href="https://www.youtube.com/watch?v=bXnR9fUliVA&amp;amp;list=PLkzo92owKnVyyemLABuRYmyc29crnvxn3&amp;amp;index=8&amp;amp;t=368s" target="_blank" rel="nofollow noopener noreferrer"&gt;6:08&lt;/A&gt;&lt;SPAN class="style-scope yt-formatted-string" dir="auto"&gt; Recap&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--1947161079"&gt;&lt;SPAN style="color: #d68c00"&gt;Share and Connect&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
Anything to add? Leave a comment below.&lt;BR /&gt;
&lt;BR /&gt;
Useful? Give us a like and share on social media.&lt;BR /&gt;
&lt;BR /&gt;
Questions? Please use the &lt;A href="https://answers.sap.com/questions/ask.html" target="_blank" rel="noopener noreferrer"&gt;community Q&amp;amp;A&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Thanks!&lt;BR /&gt;
&lt;BR /&gt;
If you would like to receive updates, connect with me on&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;LinkedIn &amp;gt; &lt;A href="https://linkedin.com/in/dvankempen" target="_blank" rel="noopener noreferrer nofollow"&gt;linkedin.com/in/dvankempen&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Twitter &amp;gt; &lt;A href="https://twitter.com/dvankempen" target="_blank" rel="noopener noreferrer nofollow"&gt;@dvankempen&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
For the author page of SAP PRESS, visit&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.sap-press.com/sap-hana-20-certification-guide-technology-associate-exam_5078/author/" target="_blank" rel="nofollow noopener noreferrer"&gt;Denys van Kempen&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;TABLE style="height: 59px" width="612" bgcolor="#e7f5ff"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;Over the years, for the SAP HANA Academy, SAP’s Partner Innovation Lab, and à titre personnel, I have written a little over 300 posts here for the SAP Community. Some articles only reached a few readers. Others attracted quite a few more. For your reading pleasure and convenience, here is a curated list of posts which somehow managed to pass the 10k-view milestone and, as sign of current interest, still tickle the counters each month.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://blogs.sap.com/2021/11/05/good-reads-my-two-cents/" target="_blank" rel="noopener noreferrer"&gt;Good Reads (my two cents)&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/02/sapnwabline_885687.png" width="610" /&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-business-technology-platform-serverless-functions-hands-on-tutorial/ba-p/13567231"/>
    <published>2023-02-10T14:22:24+01:00</published>
  </entry>
</feed>
