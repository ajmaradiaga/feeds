<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Exchange-Infrastructure-blog-posts.xml</id>
  <title>SAP Community - SAP Exchange Infrastructure</title>
  <updated>2025-08-12T17:01:11.611353+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Exchange Infrastructure/pd-p/01200615320800000482" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Exchange Infrastructure blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/skeleton-of-mapping-runtime-in-sap-xi/ba-p/12848318</id>
    <title>Skeleton of Mapping Runtime in SAP XI</title>
    <updated>2006-12-28T10:01:36+01:00</updated>
    <author>
      <name>STALANKI</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/13911</uri>
    </author>
    <content>&lt;DIV&gt;&lt;BR /&gt;
&lt;P align="left"&gt;Most of the forum questions are about the errors that occur while mapping source to the target! Did we bother to understand what is happening inside? If you did then you can skim this. Did we bother to understand why the RFC Destination AI_RUNTIME_JCOSERVER is very important? If we did not then please read this aloud.&lt;/P&gt;&lt;BR /&gt;
&lt;P align="left"&gt;&lt;STRONG&gt;CL_MAPPING_XMS_PLSRV3&lt;/STRONG&gt; is the object that has to be focussed for understanding the complete flow. &lt;STRONG&gt;CALL_RUNTIME&lt;/STRONG&gt; is the method which will be executed during the mapping run time. Now if you can go through the method you understand that depending on the mapping type the appropriate mapping methods &lt;STRONG&gt;CALL_JAVA_RUNTIME&lt;/STRONG&gt;,&lt;STRONG&gt;MAP_BY_XSLT&lt;/STRONG&gt;, &lt;STRONG&gt;MAP_BY_ABAP&lt;/STRONG&gt; are called. If you dig dip into the method &lt;STRONG&gt;CALL_JAVA_RUNTIME&lt;/STRONG&gt; then you can see that we use the RFC Destination &lt;STRONG&gt;AI_RUNTIME_JCOSERVER&lt;/STRONG&gt; while calling Java Runtime FM &lt;STRONG&gt;SMPP_CALL_JAVA_RUNTIME3&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;P align="left"&gt;What next? Does it help in knowing this? How we will see which mapping program is getting executed appropraitely? You will understand by digging but let me be modest by sharing the tables &lt;STRONG&gt;SMPPMAP3&lt;/STRONG&gt; and &lt;STRONG&gt;SMPPREL3&lt;/STRONG&gt; and &lt;STRONG&gt;SMPPSPLIT&lt;/STRONG&gt;.Please find the screenshot of mapping table &lt;STRONG&gt;SMPPMAP3&lt;/STRONG&gt; which provides the mapping type , mapping program and interface mapping program and name space of each interface developed in SAP XI.&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2006/12/map1_47457.gif" height="247" width="371" /&gt;&lt;BR /&gt;
It is also worth looking at the ABAP objects &lt;STRONG&gt;CL_XMS_EPCACHE&lt;/STRONG&gt; for getting exchane profile parameters at the ABAP runtime,CL*XMS* and CL*PLSRV*.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/skeleton-of-mapping-runtime-in-sap-xi/ba-p/12848318"/>
    <published>2006-12-28T10:01:36+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/calling-a-method-from-a-function-library-in-a-udf-in-message-mapping/ba-p/13414908</id>
    <title>Calling a method from a function library in a UDF in message mapping.</title>
    <updated>2019-03-12T09:25:52+01:00</updated>
    <author>
      <name>vinaymittal</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/187725</uri>
    </author>
    <content>Hello,&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
During SAP PO development all of us at some point in time have come across an issue where we need to re-use methods/functions defined in a Function Library inside our local UDF's. It is fairly easy to use UDF's of a function library inside Graphical Mapping but when it comes to calling methods written in &lt;STRONG&gt;"Attributes and methods"&lt;/STRONG&gt; section it becomes tricky.&lt;BR /&gt;
&lt;BR /&gt;
Here we will have a look at a solution to the problem!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Solution:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
I had a requirement where I wrote a Function library(with no UDF's) for writing Custom Audit Log Entries and I wanted to call the method defined in Attributes and method of the Function Library inside my message mapping.&lt;BR /&gt;
&lt;BR /&gt;
The aim here is to be able to call the function "putAuditLogEntry" inside a message mappings UDF.&lt;BR /&gt;
&lt;BR /&gt;
(why I am not writing these as a UDF&amp;nbsp;in FL itself and using them in the MM...because I needed to use these methods inside my code multiple times depending on some variables....)&lt;BR /&gt;
&lt;BR /&gt;
Step 1) Have a closer look at your &lt;STRONG&gt;Function Library&lt;/STRONG&gt;!&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Function Library.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/FL-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now if you look at the highlighted part the Class Name is &lt;STRONG&gt;"AuditLogEntry"&lt;/STRONG&gt; and the package name is&lt;STRONG&gt;&amp;nbsp;abc.functionlibrary&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
To be able to call this method first add this function library to the definition tab of message mapping.&lt;BR /&gt;
&lt;BR /&gt;
Message Mapping(Definition Tab)&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/MM.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Next import the class in the import area of &lt;STRONG&gt;Functions&lt;/STRONG&gt; Tab.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;packageName.className&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Functions tab&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/import.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Then create an object of the class inside the UDF or globally!&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/AttributesandMethods-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now the final part.....calling the method&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/callingMethod.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Conclusion:&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This is just a way to access Function Library methods inside a MessageMapping's UDF. It gives more flexibility when we are able to use global methods in local Message mapping UDF code instead of using them as UDF's in Graphical Mapping.&lt;BR /&gt;
&lt;BR /&gt;
Note: You can also call the UDF's defined in the FunctionLibrary&amp;nbsp;in Similar Fashion.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Cheers&lt;BR /&gt;
&lt;BR /&gt;
Vinay Mittal&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/calling-a-method-from-a-function-library-in-a-udf-in-message-mapping/ba-p/13414908"/>
    <published>2019-03-12T09:25:52+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-po-asynchronous-sap-proxy-lookups-yes-it-is-possible/ba-p/13415424</id>
    <title>SAP PO - Asynchronous SAP PROXY Lookups!! Yes It Is Possible!</title>
    <updated>2019-03-13T06:33:24+01:00</updated>
    <author>
      <name>vinaymittal</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/187725</uri>
    </author>
    <content>&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Introduction:&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
I came across a requirement where we had to post a message to a SOAP Proxy "Asynchronously" and at the same time send the request to either System A or System B depending on a value map.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
SENDER System X--------&amp;gt;SAP PO---&amp;gt;(Always to SAP PROXY Asynch) and System A or System B.&lt;BR /&gt;
&lt;BR /&gt;
Calls to System A and B are Synchronous and we will get exactly one response depending on which system is called.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now we managed to do this without BPM by following this fantastic blog.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2007/12/11/sap-netweaver-process-integration-enhanced-receiver-determination-for-synchronous-scenarios/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2007/12/11/sap-netweaver-process-integration-enhanced-receiver-determination-for-synchronous-scenarios/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now for the SOAP Proxy part there were two options we either do it via BPM or via a SOAP PROXY Lookup!!&lt;BR /&gt;
&lt;BR /&gt;
You can check how to perform a SOAP Proxy lookup via this wonderful blog.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A style="font-size: 1rem" href="https://blogs.sap.com/2014/04/04/mapping-lookup-to-abap-proxy/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2014/04/04/mapping-lookup-to-abap-proxy/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The first thing that comes to mind is that the "SystemAccessor" by it's default nature works on Synchronous calls and no matter whatever method you may try(limited number of methods) we cannot change the Quality of Service!!.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
So when you try to call an Asynchronous Proxy via SOAP Proxy lookup you get an error in SXMB_MONI of ECC that the QOS is invalid!! As it is by default BE(Best Effort) but ECC expects it to be EO(Exactly Once).&lt;BR /&gt;
&lt;BR /&gt;
Result:&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/moni.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Solution:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;while writing the SOAP Proxy lookup always use these two extra methods.SystemAccessor accessor = LookupService.getSystemAccessor(channel);accessor.setOperationName("InboundServiceInterfaceName");&lt;BR /&gt;
&lt;BR /&gt;
accessor.setOperationNamespace("namespace");&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Now as next step dont get the result of the accessor call into the Payload variablePayload SOAPOutPayload = null;//The response will be a Payload. Parse this to get the response field out.&lt;BR /&gt;
&lt;BR /&gt;
SOAPOutPayload = accessor.call(payload);// DON'T USE THIS&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Now Set the Quality of Service AS EO!!! How?&lt;BR /&gt;
This can be achieved by Module Beans placed in the Receiver SOAP Proxy adapter.&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/SOAP-Proxy-adapter.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Run the SOAP Proxy lookup in Test mode and check SXMB_MONI and you see a successful message now.&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/moni-success.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Conclusion:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Asynchronous SAOP Proxy Lookups are possible in SAP PO but then these are not lookups but essentially Data is being posted to ECC.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
System Accessor does not support transactional behaviour and should not be used to update the same object as different threads can be trying to update the same Object in ECC (which was not the case in our scenario)&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Cheers&lt;BR /&gt;
&lt;BR /&gt;
Vinay</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-po-asynchronous-sap-proxy-lookups-yes-it-is-possible/ba-p/13415424"/>
    <published>2019-03-13T06:33:24+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-to-sharepoint-integration-via-microsoft-graph-using-sap-po-rest-adapter/ba-p/13415511</id>
    <title>SAP To SharePoint Integration Via Microsoft Graph using SAP PO REST Adapter (No UDF's for OAUTH)</title>
    <updated>2019-03-13T06:33:28+01:00</updated>
    <author>
      <name>vinaymittal</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/187725</uri>
    </author>
    <content>&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Introduction:&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We will hereby explain how to connect to &lt;STRONG&gt;Microsoft Sharepoint&lt;/STRONG&gt; Using &lt;STRONG&gt;Microsoft Graph.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
This blog is entirely different from what you may have come across till now.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Technology is changing at a very rapid rate and the way you can access certain Systems on the network and their Authentication Mechanism is changing too....&lt;BR /&gt;
&lt;BR /&gt;
I had a requirement to Integrate SharePoint with SAP PO and was clueless until i came across this blog from Dilip&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2018/08/26/integrate-sharepoint-using-sap-pi/#" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2018/08/26/integrate-sharepoint-using-sap-pi/#&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
A really nice blog which explains how to perform basic operations on SharePoint.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Problem: We rely on UDF's for getting the accessToken via OAUTH 2.0.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
SharePoint works on OAUTH 2.0 authentication mechanism where you generate a client id and client secret. You then get the accessToken from the Sharepoint Auth url.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://accounts.accesscontrol.windows.net/{TenantID}/tokens/OAuth/2" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://accounts.accesscontrol.windows.net/{TenantID}/tokens/OAuth/2&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The problem with this mechanism is that SAP PO REST Sender adapter does not support the OAUTH parameter "resource" which is mandatory for Sharepoint Authentication so we need to get AccessTokens Via UDF!!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Solution:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
We have two ways to connect to Sharepoint&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Via SharePoint API's which require the steps to be followed mentioned in Dilip's blog.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Via Microsoft Graph which is the STANDARD and recommended way of connecting to SharePoint.&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;STRONG&gt;Advantages of using Microsoft Graph: &lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;a) You can use SAP PO Receiver Rest adapter for Oauth without having to worry about any udf's for the access token and let SAP PO Take care of it.&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
b) Really vast variety of options to query to Sharepoint for instance. I had to read an excel file from Sharepoint and &lt;STRONG&gt;SharePoint's&lt;/STRONG&gt; REST API's were returning that file to me as a binary file!!! No other way.&lt;BR /&gt;
&lt;BR /&gt;
I moved on to Microsoft Graph and i could now query the data in the excel sheet directly! No hassle of any Java Mappings or handling of large Binary files....you only get the rows coulmns you want!!!&lt;BR /&gt;
&lt;BR /&gt;
c) Works on ODATA and really user friendly to work on!&lt;BR /&gt;
&lt;BR /&gt;
d) provides you a &lt;STRONG&gt;product wide client id and client secret...&lt;/STRONG&gt;it means that if you are using Sharepoint's API directly the client ID and client secret you generate is only valid for a particular "site" on sharepoint and won't work on any other site! But with the client id client secret generated for Microsoft Graph you can access the ENTIRE SHAREPOINT with the same Token!! That's something amazing!!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
I can keep going on but need to keep this blog short.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;How do we do it!!&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 1)&lt;/STRONG&gt; Generate client-id Client Secret.&lt;BR /&gt;
&lt;BR /&gt;
Follow the steps as is in this blog and you will have your client-id and client-secret&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://tsmatz.wordpress.com/2016/10/07/application-permission-with-v2-endpoint-and-microsoft-graph/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://tsmatz.wordpress.com/2016/10/07/application-permission-with-v2-endpoint-and-microsoft-graph/&lt;/A&gt;&lt;BR /&gt;
&lt;P class="title"&gt;&lt;STRONG&gt;Step 2) Once you have the admin consent open Postman and try to see if you are able to get the access token.&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
do a POST to&amp;nbsp;&lt;A href="https://login.microsoftonline.com/{yourCompany}.onmicrosoft.com/oauth2/v2.0/token" target="_blank" rel="nofollow noopener noreferrer"&gt;https://login.microsoftonline.com/{yourCompany}.onmicrosoft.com/oauth2/v2.0/token&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
for example if your sharepoint account is ABC.sharepoint.com then just replace yourCompany in the url by ABC&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Content-Type: application/x-www-form-urlencoded&lt;BR /&gt;
&lt;BR /&gt;
grant_type:client_credentials&lt;BR /&gt;
client_id:YYYYYYYYYYY&lt;BR /&gt;
client_secret:XXXXXXXX&lt;BR /&gt;
scope:&lt;A href="https://graph.microsoft.com/.default" target="_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/.default&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/MicrosoftGraph-Token.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 3)&lt;/STRONG&gt; Import the Microsoft login and Microsoft Graph Certificates into your system&lt;BR /&gt;
&lt;BR /&gt;
Microsoft Graph URL&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Also there is a Microsoft Graph developer portal where you can login via your Company's credentials and test your ODATA queries live!!&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Microsoft-Graph-Developer-Portal.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now all you need to do is configure the REST Receiver Channel!!!&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/RestReceiverTab1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
URL Tab&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/RestReceiverTab2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Here I am Querying a list for it's Items. My Microsoft Graph URL Is&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{YourCompany}.sharepoint.com,{site-id}/lists/{list-id}/items?filter=(" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{YourCompany}.sharepoint.com,{site-id}/lists/{list-id}/items?filter=(&lt;/A&gt; (fields/JobNumber ne '1234') )&amp;amp;expand=fields(select=Jobnumber,id)&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
and the result i get from a end to end postman test via SAP PO is&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/Postman-Test-Result-end-to-end.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Request Mapping doesn't matter in this case Response mapping is&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/MM-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 5) &lt;/STRONG&gt;Understanding the ODATA query and how it was made is equally important and you won't find much detail as to how to get these Site-id and list-id etc which can be really frustrating. Here is what i discovered via trial and error!&lt;BR /&gt;
&lt;BR /&gt;
The query&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items?filter=(" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/lists/{list-id}/items?filter=(&lt;/A&gt; (fields/JobNumber ne '1234') )&amp;amp;expand=fields(select=Jobnumber,id)&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
has two main parts &lt;STRONG&gt;"site-id" &lt;/STRONG&gt;and&lt;STRONG&gt; "list-id"&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
a) to get Site-id go to Microsoft Graph Developer portal&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://developer.microsoft.com/en-us/graph/graph-explorer#" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://developer.microsoft.com/en-us/graph/graph-explorer#&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now SharePoint works on the concept of sites or lets say sub portals under the Share Point or pages in SharePoint where you can store files, images, or create &lt;STRONG&gt;"lists"&lt;/STRONG&gt;&amp;nbsp;now enter the query&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{YourCompanyName}.sharepoint.com:/sites/{YourSharepointSite}/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{YourCompanyName}.sharepoint.com:/sites/{YourSharepointSite}/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
you will get something like&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/site-id.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
This becomes your site-id&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
b) Now we need to get the list we are working on, and a sharepoint site can have multiple lists.&lt;BR /&gt;
&lt;BR /&gt;
again run the query&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/lists/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/lists/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
this will give you the list of list id's and you can pick up the list id and ready to go!!&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/list-id.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Conclusion:&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt; We learned how to query Sharepoint via Microsoft Graph(which in turn converts the ODATA query to Share Point's REST API's and you need not worry about the hundreds of API's and functions).&lt;BR /&gt;
&lt;BR /&gt;
Microsoft Graph and Sharepoint currently support ODATA 2.0 which has a wide array of functionalities.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Sample Microsoft Graph url's for you which i built during some of my developments.&lt;BR /&gt;
&lt;BR /&gt;
For Reading an Excel sheets row's and column's&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/drive/items/{excelSheetFileID}/workbook/worksheets/Sheet1/UsedRange?$select=values" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/drive/items/{excelSheetFileID}/workbook/worksheets/Sheet1/UsedRange?$select=values&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
How to get Drives??&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/drives/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/drives/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
How to get Excel sheet ID??&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root/children" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root/children&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Reading binary file from Sharepoint via Microsoft Graph(this covers Image, Text File , excel sheet, virtually everything!!!!) and you get back a Binary version of the file.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://graph.microsoft.com/v1.0/sites/{site-id}/drive/root:/{FullFilename}:/content" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://graph.microsoft.com/v1.0/sites/{site-id}/drive/root:/{FullFilename}:/content&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Regards&lt;BR /&gt;
&lt;BR /&gt;
Vinay&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-to-sharepoint-integration-via-microsoft-graph-using-sap-po-rest-adapter/ba-p/13415511"/>
    <published>2019-03-13T06:33:28+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/secure-and-fail-over-configuration-for-jdbc-adapter-sap-po/ba-p/13420283</id>
    <title>Secure and Fail over Configuration for JDBC Adapter SAP PO</title>
    <updated>2019-03-18T14:45:58+01:00</updated>
    <author>
      <name>dhivakar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/332621</uri>
    </author>
    <content>In this blog I would like to share the available JDBC option to encrypt the message transfer and failover configuration to have uninterrupted connection during the maintenance of one DB server.&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;&lt;U&gt;Encryption Option in JDBC:&lt;/U&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Data Security is the inevitable requirement in this growing technical world. As a mostly used middleware for transferring data between different systems and companies, SAP Process Orchestration should majorly investigate the available security option for its standard adapters to ensure all the&amp;nbsp;customer data is safe and secured while transferring.&lt;BR /&gt;
&lt;BR /&gt;
The encryption of the data sent to the Oracle database is taken care by the JDBC driver and not by the PI as every database provides their own data encryption feature. So, the driver parameter should be provided by the Admin of the database which is involved in the integration.&lt;BR /&gt;
&lt;BR /&gt;
In any network connection, it is possible for both the client and server to support more than one encryption algorithm and more than one integrity algorithm.&lt;BR /&gt;
&lt;BR /&gt;
To negotiate whether to turn on encryption or integrity, you can specify four possible values for the Oracle Advanced Security encryption and integrity configuration parameters. The four values are listed in the order of increasing security.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;REJECTED&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;ACCEPTED&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;REQUESTED&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;REQUIRED&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
REJECTED:&lt;BR /&gt;
&lt;BR /&gt;
If the DB side is set to REQUESTED, ACCEPTED, or REJECTED, the connection continues without error even if you use this in JDBC Channel and without the security service enabled.&lt;BR /&gt;
&lt;BR /&gt;
This parameter need not to be enabled explicitly, if you do not wish to have an encrypted communication with the DB.&lt;BR /&gt;
&lt;BR /&gt;
ACCEPTED:&lt;BR /&gt;
&lt;BR /&gt;
This Parameter value will enable the encryption if it is set as requested / required on the DB side and the Algorithm which we are using should match the available algorithm on the DB side.&lt;BR /&gt;
&lt;BR /&gt;
These kinds of parameters are mostly used on the DB side, Since the server might have connection to multiple clients some of which may not enable encryption option at their configuration.&lt;BR /&gt;
&lt;BR /&gt;
In this way the connection will be secured if client wish to have and communication will happen without any errors even without encryption.&lt;BR /&gt;
&lt;BR /&gt;
REQUESTED:&lt;BR /&gt;
&lt;BR /&gt;
This parameter can be used if the server side permits to have encrypted connection. As usual it works if the algorithm sent and maintained are matching between the systems.&lt;BR /&gt;
&lt;BR /&gt;
REQUIRED:&lt;BR /&gt;
&lt;BR /&gt;
This is the needed parameter in case you want to allow only encrypted communication between the SAP PI/PO and Database server. This is the recommended one on client side to not to compromise security.&lt;BR /&gt;
&lt;BR /&gt;
In this scenario, JDBC Channel with REQUIRED specifies that the security service&amp;nbsp;must be enabled. The connection&amp;nbsp;fails&amp;nbsp;if the other side specifies REJECTED or if there is no compatible algorithm on the other side.&lt;BR /&gt;
&lt;BR /&gt;
By Default, DB doesn’t enable encryption parameters and can be set based on the request during the connection. Below is the Encryption and Data negotiation chart which clarifies this.&lt;BR /&gt;
&lt;DIV class="scn-scrollable-area"&gt;&lt;BR /&gt;
&lt;TABLE width="365"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;&lt;STRONG&gt;SAP PI/PO&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;&lt;STRONG&gt;Database Server&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;&lt;STRONG&gt;Encryption and Data Negotiation&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REQUIRED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;Connection fails&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;ON&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;&lt;STRONG&gt;REQUIRED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;&lt;STRONG&gt;ACCEPTED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;&lt;STRONG&gt;ON&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;OFF&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;ON&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;ON&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;&lt;STRONG&gt;REQUIRED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;&lt;STRONG&gt;REQUESTED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;&lt;STRONG&gt;ON&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REJECTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUIRED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;Connection fails&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;ACCEPTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUIRED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;ON&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;REQUESTED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;REQUIRED&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;ON&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="94"&gt;&lt;STRONG&gt;REQUIRED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="123"&gt;&lt;STRONG&gt;REQUIRED&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="148"&gt;&lt;STRONG&gt;ON&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The below is the sample which DB team could share with us and it should be prefixed with “&lt;STRONG&gt;driver:&lt;/STRONG&gt;” when we use it in JDBC Channel.&lt;BR /&gt;
&lt;BR /&gt;
SQLNET.CRYPTO_CHECKSUM_TYPES_SERVER = (SHA1)&lt;BR /&gt;
&lt;BR /&gt;
SQLNET.ENCRYPTION_TYPES_SERVER = (AES256)&lt;BR /&gt;
&lt;BR /&gt;
SQLNET.CRYPTO_CHECKSUM_SERVER = ACCEPTED&lt;BR /&gt;
&lt;BR /&gt;
SQLNET.ENCRYPTION_SERVER = ACCEPTED&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/03/JDBC-Encryption.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
To conclude the encryption part, REQUIRED is the recommended parameter value on our JDBC Channel considering the DB doesn’t reject encrypted communication.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;2.Failover String in JDBC:&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Sometimes SAP PO interfaces using JDBC adapter may transfer business critical data which cannot be delayed for any reasons.&lt;BR /&gt;
&lt;BR /&gt;
To support high availability of business, the company may have two Databases in parallel (2 separate Hosts, which can be addressed via separate IP or hostnames, one is active, one is passive). In such cases the SAP PI/PO should have the ability to automatically switch from one to the other without manual interaction when there is a downtime with the active database.&lt;BR /&gt;
&lt;BR /&gt;
To ensure this fail-over connection, below mentioned JDBC connection string can be used for Oracle DB connection from SAP PI/PO.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;jdbc:oracle:thin:@(DESCRIPTION =(CONNECT_TIMEOUT=3)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=3)(ADDRESS_LIST =(FAILOVER = ON)(LOAD_BALANCE = ON)(ADDRESS =(PROTOCOL = TCP)(HOST = &lt;STRONG&gt;&amp;lt;Active database&amp;gt;&lt;/STRONG&gt;)(PORT = &lt;STRONG&gt;&amp;lt;port&amp;gt;&lt;/STRONG&gt;))(ADDRESS = (PROTOCOL = TCP)(HOST = &lt;STRONG&gt;&amp;lt;Passive database&amp;gt;&lt;/STRONG&gt;)(PORT = &lt;STRONG&gt;&amp;lt;port&amp;gt;&lt;/STRONG&gt;)))(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME =&lt;STRONG&gt;&amp;lt;Service name&amp;gt;&lt;/STRONG&gt;)))&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Active database&lt;/STRONG&gt;: FQDN of the primary server to be connected from the PI system.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Passive database&lt;/STRONG&gt;: FQDN of the secondary server to be connected from the PI system.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Port&lt;/STRONG&gt;: Listening port of the DB server.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Service name&lt;/STRONG&gt;: Dedicated service schema used for this connection.&lt;BR /&gt;
&lt;BR /&gt;
Reference: &lt;A href="https://docs.oracle.com" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://docs.oracle.com&lt;/A&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/secure-and-fail-over-configuration-for-jdbc-adapter-sap-po/ba-p/13420283"/>
    <published>2019-03-18T14:45:58+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-custom-adapter-module-in-sap-pi-po-for-ejb-3-0-version/ba-p/13397974</id>
    <title>How to create Custom Adapter Module in SAP PI/PO for EJB 3.0 Version</title>
    <updated>2019-05-03T16:24:47+02:00</updated>
    <author>
      <name>bijayashreebanoj_brahma</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/418399</uri>
    </author>
    <content>&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In this blog, we will see step-by-step&amp;nbsp;&amp;nbsp;process to create SAP PI/PO Custom Adapter module, EJB version 3.0.&amp;nbsp; As, I don't find any blog, where each steps are clearly mentioned, with detail configuration. Hope this will help SAP PI/PO Developers.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="font-family: 'Trebuchet MS','sans-serif';font-size: 10pt;text-decoration: underline"&gt;Custom Adapter Module Creation Process:-&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Module Name--&amp;gt; &lt;U&gt;&lt;/U&gt;ReadExcelFile&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-family: Trebuchet MS;font-size: small"&gt;In NWDS: Go to File –-&amp;gt; New –-&amp;gt; EJB Project&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
EJB Project--&amp;gt; ExcelToXML_EJB&lt;BR /&gt;
&lt;BR /&gt;
EAR Project--&amp;gt; ExcelToXML_EAR&lt;BR /&gt;
&lt;BR /&gt;
EJB module version --&amp;gt; 3.0&lt;BR /&gt;
&lt;BR /&gt;
Click Next and Next.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
EJB Client JAR --&amp;gt; Uncheck&lt;BR /&gt;
&lt;BR /&gt;
Generate ejb-jar.xml deployment descriptor --&amp;gt; Check&lt;BR /&gt;
&lt;BR /&gt;
Click on Finish.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_3.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Two Projects are Created as below.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_4.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Right Click on EJB Project --&amp;gt; New --&amp;gt; Session Bean (EJB 3.x)&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_5.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Choose EJB project created before and provide Java package &amp;amp; Class Name.&lt;BR /&gt;
&lt;BR /&gt;
State Type --&amp;gt; Stateless&lt;BR /&gt;
&lt;BR /&gt;
Check Remote and Local and Finish.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_6.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN lang="EN-US"&gt;&lt;SPAN style="color: #000000;font-family: Calibri;font-size: medium"&gt;Below Objects are created.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_7.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Add External JAR files and Libraries to EJB project.&lt;BR /&gt;
&lt;BR /&gt;
Right Click on EJB project --&amp;gt; Preference --&amp;gt; JAVA Build Path --&amp;gt; Add Libraries&lt;BR /&gt;
&lt;BR /&gt;
Select XPI Library --&amp;gt; Click Next&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_12.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select XPI Adapter Libraries from drop down --&amp;gt; Finish&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_13.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Add "com.sap.aii.af.svc_api.jar" file as External Jars for &lt;U&gt;&lt;/U&gt;auditlog&lt;BR /&gt;
&lt;BR /&gt;
Add "jxl-2.6.jar" for reading Excel File (.xls).&lt;BR /&gt;
&lt;BR /&gt;
Click on Apply --&amp;gt; Ok&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_14.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Expand META-INF folder of EJB --&amp;gt; Click on ejb-j2ee-engine.xml --&amp;gt; Change the details as below.&lt;BR /&gt;
&lt;BR /&gt;
Provide EJB and JNDI name.&lt;BR /&gt;
&lt;BR /&gt;
JNDI name will be the Adapter Module Name in SAP PI/PO Communication Channel.&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;?&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;xml&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;version&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"1.0"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;encoding&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"UTF-8"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;?&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-j2ee-engine&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xmlns:xsi&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://www.w3.org/2001/XMLSchema-instance" target="_blank" rel="nofollow noopener noreferrer"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xsi:noNamespaceSchemaLocation&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"ejb-j2ee-engine_3_0.xsd"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-beans&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-bean&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;ReadExcelFile&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;jndi-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;ReadExcelFile&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;jndi-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-bean&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-beans&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-j2ee-engine&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Expand META-INF folder of EJB Project --&amp;gt; Click on ejb-jar.xml --&amp;gt; Change the details as below&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;ejb-class&amp;gt; --&amp;gt; This need to be your java package name and your Class name&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;display-name&amp;gt; --&amp;gt; Your display name&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;ejb-name&amp;gt; --&amp;gt; Your ejb name&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;?&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;xml&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;version&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"1.0"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;encoding&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"UTF-8"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;?&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-jar&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xmlns:xsi&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://www.w3.org/2001/XMLSchema-instance" target="_blank" rel="nofollow noopener noreferrer"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xmlns&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://java.sun.com/xml/ns/javaee" target="_blank" rel="nofollow noopener noreferrer"&gt;http://java.sun.com/xml/ns/javaee&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xmlns:ejb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd" target="_blank" rel="nofollow noopener noreferrer"&gt;http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f007f;font-size: small"&gt;xsi:schemaLocation&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://java.sun.com/xml/ns/javaee" target="_blank" rel="nofollow noopener noreferrer"&gt;http://java.sun.com/xml/ns/javaee&lt;/A&gt; &lt;A href="http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd" target="_blank" rel="nofollow noopener noreferrer"&gt;http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;version&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"3.0"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;display-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;ExcelToXML_EJB&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;display-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-beans&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;session&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;icon&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;/&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;ReadExcelFile&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-name&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;home&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.lib.mp.module.ModuleHome&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;home&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;remote&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.lib.mp.module.ModuleRemote&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;remote&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;local-home&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.lib.mp.module.ModuleLocalHome&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;local-home&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;local&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.lib.mp.module.ModuleLocal&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;local&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-class&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.java.modules.ReadExcelFile&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-class&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;session-type&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;Stateless&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;session-type&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;transaction-type&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;Container&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;transaction-type&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;session&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;enterprise-beans&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;ejb-jar&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Expand META-INF folder of EAR Project --&amp;gt; Click on application-j2ee-engine.xml --&amp;gt; Change the details as below.&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;?&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;xml&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;version&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"1.0"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;encoding&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"UTF-8"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;?&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;application-j2ee-engine&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xmlns:xsi&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&lt;A href="http://www.w3.org/2001/XMLSchema-instance" target="_blank" rel="nofollow noopener noreferrer"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/A&gt;"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xsi:noNamespaceSchemaLocation&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"application-j2ee-engine.xsd"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"service"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;engine.security.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"library"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;engine.j2ee14.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"service"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.svc.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"interface"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.ifc.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"library"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.aii.af.lib.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;reference-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"hard"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;target-type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"library"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;provider-name&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"sap.com"&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;com.sap.base.technology.facade&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference-target&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;reference&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;fail-over-enable&lt;/SPAN&gt; &lt;SPAN style="color: #7f007f;font-size: small"&gt;xsi:type&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"fail-over-enableType_disable"&lt;/SPAN&gt;&lt;/I&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f007f;font-size: small"&gt;mode&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"disable"&lt;/SPAN&gt;&lt;/I&gt; &lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;fail-over-enable&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN style="color: #3f7f7f;font-size: small"&gt;application-j2ee-engine&lt;/SPAN&gt;&lt;SPAN style="color: #008080;font-size: small"&gt;&amp;gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN lang="EN-US"&gt;&lt;SPAN style="color: #000000;font-family: Calibri;font-size: medium"&gt;Deploy the EAR File:-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Open Window --&amp;gt; Preferences --&amp;gt; SAP AS java --&amp;gt; Add&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_11.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Right Click on EAR Project --&amp;gt; Run As --&amp;gt; Run on Server&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_15.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Select Your Server --&amp;gt; Click Next&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_17.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select EJB project --&amp;gt; Finish&lt;BR /&gt;
&lt;BR /&gt;
Then the project will be deployed in your server and you can see in EJB Explorer (SAP PI/PO ).&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_18.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Use Created Adapter Module In Sender Communication Channel.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_20.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Deployment to Higher Environments:-&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Right Click EAR Project --&amp;gt; Export --&amp;gt; SAP EAR File&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_22.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_23.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Sample Adapter Module code:-&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;package&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.java.modules;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; javax.ejb.Stateless;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.aii.af.lib.mp.module.Module;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.aii.af.lib.mp.module.ModuleContext;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.aii.af.lib.mp.module.ModuleData;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.aii.af.lib.mp.module.ModuleException;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.engine.interfaces.messaging.api.XMLPayload;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.aii.af.service.auditlog.Audit;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.engine.interfaces.messaging.api.Message;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.engine.interfaces.messaging.api.MessageKey;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; com.sap.engine.interfaces.messaging.api.auditlog.AuditLogStatus;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;/B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; java.io.ByteArrayInputStream;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; jxl.Cell;&lt;/SPAN&gt;&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;import&lt;/B&gt;&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; jxl.Workbook;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;/**&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;* Session Bean implementation class ReadExcelFile&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;*/&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;@Stateless&lt;B&gt;&lt;/B&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;&lt;B&gt;public&lt;/B&gt;&lt;/SPAN&gt; &lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;class&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ReadExcelFile &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;implements&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; Module {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; MessageKey &lt;/SPAN&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;amk&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #646464;font-size: small"&gt;@Override&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;public&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ModuleData process(ModuleContext &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;mc&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;, ModuleData &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;imd&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;) &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;throws&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ModuleException {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; String &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msgType&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; String &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;nameSpace&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Object &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;obj&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Message &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;try&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;obj&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;imd&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getPrincipalData();&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = (Message) &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;obj&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;amk&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;new&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; MessageKey(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getMessageId(), &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getMessageDirection()); &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; XMLPayload &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xp&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getDocument(); &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;if&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; (&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xp&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; != &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;null&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;) {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Audit.&lt;I&gt;addAuditLogEntry&lt;/I&gt;(&lt;/SPAN&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;amk&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;, AuditLogStatus.&lt;/SPAN&gt;&lt;B&gt;&lt;I&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;SUCCESS&lt;/SPAN&gt;&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;,&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"AO: Now calling Convert Method to convert Excel(.xls) to XML"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;); &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;byte&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;by&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;[] = convert(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xp&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getContent()&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Audit.&lt;I&gt;addAuditLogEntry&lt;/I&gt;(&lt;/SPAN&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;amk&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;, AuditLogStatus.&lt;/SPAN&gt;&lt;B&gt;&lt;I&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;SUCCESS&lt;/SPAN&gt;&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;,&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"AO: Conversion Done Successfully."&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xp&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.setContent(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;by&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;imd&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.setPrincipalData(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;msg&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Audit.&lt;I&gt;addAuditLogEntry&lt;/I&gt;(&lt;/SPAN&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;amk&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;, AuditLogStatus.&lt;/SPAN&gt;&lt;B&gt;&lt;I&gt;&lt;SPAN style="color: #0000c0;font-size: small"&gt;SUCCESS&lt;/SPAN&gt;&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;,&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"AO: Principle data set successfully."&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; } &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;catch&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; (Exception &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;e&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;){ &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; ModuleException &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;me&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;new&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ModuleException(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;e&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;throw&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;me&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;return&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;imd&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;public&lt;/SPAN&gt;&lt;/B&gt; &lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;byte&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;[] convert(&lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;byte&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;src&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;[]&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;) &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;throws&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; Exception {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; String &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;""&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;try&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; ByteArrayInputStream &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;byteArr&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;= &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;new&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ByteArrayInputStream(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;src&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Workbook &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = Workbook.&lt;I&gt;getWorkbook&lt;/I&gt;(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;byteArr&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;); &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; =&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&amp;gt;\n\n"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+ &lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;Details&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Cell[] &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cells&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; ;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; Cell[] &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cellNames&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; ;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cellNames&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getSheet(0).getRow(0);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;for&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;(&lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;int&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;j&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=1;&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;j&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getSheet(0).getRows();&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;j&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;++) {&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;Record&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cells&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getSheet(0).getRow(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;j&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;for&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt;(&lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;int&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;=0;&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getSheet(0).getColumns();&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;++){&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cellNames&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;[&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;].getContents()+&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cells&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;[&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;].getContents()+&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;/"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;+&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;cellNames&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;[&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;i&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;].getContents()+&lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; + &lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;/Record&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; + &lt;/SPAN&gt;&lt;SPAN style="color: #2a00ff;font-size: small"&gt;"&amp;lt;/Details&amp;gt;"&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;wb&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.close();&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; } &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;catch&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; (Exception &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;e&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;){ &lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;SPAN style="font-size: small"&gt; ModuleException &lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;me&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt; = &lt;/SPAN&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;new&lt;/SPAN&gt;&lt;/B&gt;&lt;SPAN style="font-size: small"&gt; ModuleException(&lt;/SPAN&gt;&lt;SPAN style="color: #6a3e3e;font-size: small"&gt;e&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;throw&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;me&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;&lt;B&gt;&lt;SPAN style="color: #7f0055;font-size: small"&gt;return&lt;/SPAN&gt;&lt;/B&gt; &lt;SPAN style="color: #6a3e3e;font-size: small"&gt;xmldata&lt;/SPAN&gt;&lt;SPAN style="font-size: small"&gt;.getBytes();&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;P align="LEFT"&gt;}&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Note:-&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
1 ) I am using below details for my development.&lt;BR /&gt;
&lt;BR /&gt;
NWDS--&amp;gt; 7.3 SP06 PAT0009 and jdk1.8.0_131&lt;BR /&gt;
&lt;BR /&gt;
SAP PO --&amp;gt; 7.5 SP07&lt;BR /&gt;
&lt;BR /&gt;
EJB Module Version--&amp;gt; 3.0&lt;BR /&gt;
&lt;BR /&gt;
2) If you will not find XPI Libraries in your NWDS version, then you can add below jar files , as external jars and any other jar files as per your requirements.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Capture_21.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
3) &amp;nbsp;Any Suggestion on this blog is always welcome.&lt;BR /&gt;
&lt;BR /&gt;
4) We can create module and write Java code in different way, which you can find in different&amp;nbsp;blogs.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-custom-adapter-module-in-sap-pi-po-for-ejb-3-0-version/ba-p/13397974"/>
    <published>2019-05-03T16:24:47+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/integrating-amazon-simple-storage-service-amazon-s3-and-sap-ecc-v6-0-via/ba-p/13392065</id>
    <title>Integrating Amazon Simple Storage Service (Amazon S3) and SAP ECC v6.0 via SAP PI v7.5 using AWS Signature v5 and Signing Algorithm (HMAC-SHA256)</title>
    <updated>2019-05-31T14:06:47+02:00</updated>
    <author>
      <name>former_member607993</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/607993</uri>
    </author>
    <content>It is not at all surprising that more than a million active customers, from Airbnb to GE, use AWS Cloud solutions to deliver flexibility, fast, scalability, reliability and inexpensive data storage infrastructure. Companies like Netflix, Airbnb, Disney, NASA, BWM and many more are all using AWS to make business decisions in real time. These companies use data collection systems for nearly everything from business analytics to near-real-time operations, to executive reporting, computing and storage.&lt;BR /&gt;
&lt;BR /&gt;
As part of AWS Storage,&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt; Amazon Simple Storage Service (S3)&lt;/STRONG&gt;&lt;/SPAN&gt; provides scalable object storage for data backup, archival and analytics and used to store and retrieve any amount of data, at any time, from anywhere on the web.&lt;BR /&gt;
&lt;H3 id="toc-hId-1037564100"&gt;&lt;STRONG&gt;Benefits&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Amazon Simple Storage Service (S3) is low cost, 99.99% availability, secure by default, transfer a large amount of data and easy to handle.&lt;BR /&gt;
&lt;H3 id="toc-hId-841050595"&gt;&lt;STRONG&gt;Conceptualizes&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Amazon Simple Storage Service (S3)&lt;EM&gt;&lt;STRONG&gt; Conceptualizes&lt;/STRONG&gt;&lt;/EM&gt; of buckets, objects, regions, keys and Amazon S3 data consistency model.&lt;BR /&gt;
&lt;BR /&gt;
Data is stored as objects within resources called “&lt;SPAN style="text-decoration: underline"&gt;buckets&lt;/SPAN&gt;”, and a single object can be up to &lt;STRONG&gt;5&lt;/STRONG&gt; &lt;STRONG&gt;terabytes&lt;/STRONG&gt; in size. S3 features include capabilities to append metadata tags to objects, move and store data across the S3 Storage Classes, configure and enforce data access controls, secure data against unauthorized users, run big data analytics, and monitor data at the object and bucket levels.&lt;BR /&gt;
&lt;BR /&gt;
Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world.&lt;BR /&gt;
&lt;H3 id="toc-hId-644537090"&gt;&lt;STRONG&gt;Integration:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Amazon S3 supports the '&lt;STRONG&gt;REST API&lt;/STRONG&gt;'. Support for SOAP over HTTP is deprecated, but it is still available over HTTPS. However, new Amazon S3 features will not be supported for SOAP. Amazon recommends that you use either the REST API or the AWS SDKs.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/S3_PIC_AWS.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Recently I had developed a unidirectional interface integrating Amazon Simple Storage Service (Amazon S3) and SAP ECC 6.0 via SAP PI 7.5 using AWS Signature v5 and Signing Algorithm (HMAC-SHA256). This integration scenario defines IDOC to REST by means iDocument-CSV conversion using REST Adapter.&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;In the server side i.e. Amazon Simple Storage Service (Amazon S3), file should be delivered in the form of comma separated value(.csv) using AWS Signature version 5 and Signing Algorithm (HMAC-SHA256). Amazon has provided authentication methods and signing requests to calculate the Signature process. Below are the methods to generate Header values:&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Signature -&amp;nbsp;&lt;STRONG&gt;Authorization&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Content Hash - &lt;STRONG&gt;X-Amz-Content-Sha256&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Date Stamp -&lt;STRONG&gt;X-Amz-Date&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Content Type -&lt;STRONG&gt;Content-Type&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Dynamically generate HTTP Headers&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;Basically, Amazon S3 expects all the above mentioned mandatory header values to authenticate the client and it looks like below:&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/header.jpg" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-448023585"&gt;&lt;STRONG&gt;Common Request Headers:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
The following table describes headers that can be used by various types of Amazon S3 REST requests.&lt;BR /&gt;
&lt;TABLE style="height: 619px" width="631"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;STRONG&gt;Header Name&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;Authorization&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;BR /&gt;
&lt;BR /&gt;
The information required for request authentication. It starts with AWS4-HMAC-SHA256 and value looks like:&lt;BR /&gt;
&lt;BR /&gt;
AWS4-HMAC-SHA256 Credential=access-key-id/date/aws-region/aws-service/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-content-sha256;x-amz-date, Signature=256-bit signature expression&lt;BR /&gt;
&lt;BR /&gt;
where &amp;lt;date&amp;gt; value is specified using YYMMDD format and &amp;lt;aws-service&amp;gt; value is s3 when sending request to Amazon S3.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;Content-Type&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;The content type of the resource in case the request content in the body. Example:&amp;nbsp;text/plain&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;Content-MD5&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;The base64 encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;Host&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;For path-style requests, the value is&amp;nbsp;s3.amazonaws.com. For virtual-style requests, the value is&amp;nbsp;BucketName.s3.amazonaws.com.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;x-amz-content-sha256&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;When using signature version 4 to authenticate request, this header provides a hash of the request payload. For more information see Signature Calculations for the Authorization Header: Transferring Payload in a Single Chunk (AWS Signature Version 4). When uploading object in chunks, you set the value to STREAMING-AWS4-HMAC-SHA256-PAYLOAD to indicate that the signature covers only headers and that there is no payload.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;x-amz-date&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;The current date and time according to the requester. Example:&amp;nbsp;Wed, 01 Mar 2006 12:00:00 GMT. When you specify the&amp;nbsp;Authorization&amp;nbsp;header, you must specify either the&amp;nbsp;x-amz-date&amp;nbsp;or the&amp;nbsp;Date&amp;nbsp;header. If you specify both, the value specified for the&amp;nbsp;x-amz-date&amp;nbsp;header takes precedence.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-251510080"&gt;&lt;STRONG&gt;Calculating a Signature:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;To calculate a signature, you first need a string to sign. You then calculate a&amp;nbsp;&lt;/SPAN&gt;HMAC-SHA256&amp;nbsp;hash of the string to sign by using a signing key. The following diagram illustrates the process, including the various components of the string that you create for signing.&lt;/P&gt;&lt;BR /&gt;
The process of putting a request in an agreed-upon form for signing is called '&lt;STRONG&gt;canonicalization'&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/req.jpg" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-54996575"&gt;&lt;STRONG&gt;Deriving the Header values Using Java (User defined functions)&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Signature -&amp;nbsp;&lt;STRONG&gt;Authorization&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Content Hash - &lt;STRONG&gt;X-Amz-Content-Sha256&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Date Stamp -&lt;STRONG&gt;X-Amz-Date&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Content Type -&lt;STRONG&gt;Content-Type&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Generate Payload&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Dynamically generate HTTP Headers&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
At first to define the individual global methods for above header parameters.&lt;BR /&gt;
&lt;H3 id="toc-hId--141516930"&gt;&lt;STRONG&gt;In the Enterprise service repository:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;STRONG&gt;Step 1&lt;/STRONG&gt;: Create a new function library and specify the attributes and methods(global variables) as below:&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;String dateStamp ="";&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;String signature ="";&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;String method = "PUT";&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;String FileName="";&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 2&lt;/STRONG&gt;: Create a user defined function to Generate Signature&lt;BR /&gt;
&lt;BR /&gt;
public String generateSignature(String lcl_filePath, String lcl_dateTimeStamp, String contentType, String awsAccessKeyId, String awsSecretKey, String payload, Container container) throws StreamTransformationException{&lt;BR /&gt;
&lt;BR /&gt;
{&lt;BR /&gt;
&lt;BR /&gt;
AbstractTrace trace = container.getTrace();&lt;BR /&gt;
&lt;BR /&gt;
String authorization = "";&lt;BR /&gt;
&lt;BR /&gt;
try {&lt;BR /&gt;
&lt;BR /&gt;
String algorithm = "HmacSHA256";&lt;BR /&gt;
&lt;BR /&gt;
Mac mac = Mac.getInstance(algorithm);&lt;BR /&gt;
&lt;BR /&gt;
SimpleDateFormat dt1 = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'");&lt;BR /&gt;
&lt;BR /&gt;
Date parsedDate = dt1.parse(lcl_dateTimeStamp.toString());&lt;BR /&gt;
&lt;BR /&gt;
SimpleDateFormat dt2 = new SimpleDateFormat("yyyyMMdd");&lt;BR /&gt;
&lt;BR /&gt;
String lcl_dateStamp = &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dt2.format(parsedDate);&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning("Date:" + lcl_dateStamp);&lt;BR /&gt;
&lt;BR /&gt;
MessageDigest md = MessageDigest.getInstance("SHA-256");&lt;BR /&gt;
&lt;BR /&gt;
byte[] hashPayloadInBytes = md.digest(payload.getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
StringBuilder payloadSb = new StringBuilder();&lt;BR /&gt;
&lt;BR /&gt;
for (byte b : hashPayloadInBytes) {&lt;BR /&gt;
&lt;BR /&gt;
payloadSb.append(String.format("%02x", b));&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
String hashPayload = payloadSb.toString();&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(hashPayload);&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(lcl_dateTimeStamp);&lt;BR /&gt;
&lt;BR /&gt;
StringBuffer canonicalRequest = new StringBuffer();&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("PUT").append("\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append(lcl_filePath).append("\n\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("content-type:" + contentType).append("\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("host:bucketName.s3.amazonaws.com").append("\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("x-amz-content-sha256:" + hashPayload).append("\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("x-amz-date:" + lcl_dateTimeStamp).append("\n\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append("content-type;host;x-amz-content-sha256;x-amz-date").append("\n");&lt;BR /&gt;
&lt;BR /&gt;
canonicalRequest.append(hashPayload);&lt;BR /&gt;
&lt;BR /&gt;
byte[] hashCanonicalReqInBytes = md.digest(canonicalRequest.toString().getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
StringBuilder hashCanonicalSb = new StringBuilder();&lt;BR /&gt;
&lt;BR /&gt;
for (byte b : hashCanonicalReqInBytes) {&lt;BR /&gt;
&lt;BR /&gt;
hashCanonicalSb.append(String.format("%02x", b));&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(hashCanonicalSb.toString());&lt;BR /&gt;
&lt;BR /&gt;
StringBuffer sringToSignSb = new StringBuffer();&lt;BR /&gt;
&lt;BR /&gt;
sringToSignSb.append("AWS4-HMAC-SHA256").append("\n");&lt;BR /&gt;
&lt;BR /&gt;
sringToSignSb.append(lcl_dateTimeStamp).append("\n");&lt;BR /&gt;
&lt;BR /&gt;
sringToSignSb.append(lcl_dateStamp + "/" + "ap-south-1/s3/aws4_request").append("\n");&lt;BR /&gt;
&lt;BR /&gt;
sringToSignSb.append(hashCanonicalSb.toString());&lt;BR /&gt;
&lt;BR /&gt;
String stringToSign = sringToSignSb.toString();&lt;BR /&gt;
&lt;BR /&gt;
System.out.println(stringToSign);&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(stringToSign);&lt;BR /&gt;
&lt;BR /&gt;
byte[] kSecret = ("AWS4" + awsSecretKey).getBytes("UTF-8");&lt;BR /&gt;
&lt;BR /&gt;
mac.init(new SecretKeySpec(kSecret, algorithm));&lt;BR /&gt;
&lt;BR /&gt;
byte[] kDate = mac.doFinal(lcl_dateStamp.getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
mac.init(new SecretKeySpec(kDate, algorithm));&lt;BR /&gt;
&lt;BR /&gt;
byte[] kRegion = mac.doFinal("ap-south-1".getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
mac.init(new SecretKeySpec(kRegion, algorithm));&lt;BR /&gt;
&lt;BR /&gt;
byte[] kService = mac.doFinal("s3".getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
mac.init(new SecretKeySpec(kService, algorithm));&lt;BR /&gt;
&lt;BR /&gt;
byte[] kSigning = mac.doFinal("aws4_request".getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
mac.init(new SecretKeySpec(kSigning, algorithm));&lt;BR /&gt;
&lt;BR /&gt;
byte[] kSignature = mac.doFinal(stringToSign.getBytes("UTF-8"));&lt;BR /&gt;
&lt;BR /&gt;
String signature = Hex.encodeHexString(kSignature);&lt;BR /&gt;
&lt;BR /&gt;
authorization = "AWS4-HMAC-SHA256 Credential=" + awsAccessKeyId + "/" + lcl_dateStamp&lt;BR /&gt;
&lt;BR /&gt;
+ "/ap-south-1/s3/aws4_request,SignedHeaders=content-type;host;x-amz-content-sha256;x-amz-date,Signature="&lt;BR /&gt;
&lt;BR /&gt;
+ signature;&lt;BR /&gt;
&lt;BR /&gt;
} catch (Exception e) {&lt;BR /&gt;
&lt;BR /&gt;
e.printStackTrace();&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
return authorization;&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 3: &lt;/STRONG&gt;Create a user defined function to Generate&amp;nbsp; DateStamp&lt;BR /&gt;
&lt;BR /&gt;
public String generateDateTimeStamp(Container container) throws StreamTransformationException{&lt;BR /&gt;
&lt;BR /&gt;
AbstractTrace trace = container.getTrace();&lt;BR /&gt;
&lt;BR /&gt;
SimpleDateFormat dt1 = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'");&lt;BR /&gt;
&lt;BR /&gt;
dt1.setTimeZone(TimeZone.getTimeZone("GMT"));&lt;BR /&gt;
&lt;BR /&gt;
dateStamp = dt1.format(new Date());&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(dateStamp);&lt;BR /&gt;
&lt;BR /&gt;
return dateStamp;&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 4: &lt;/STRONG&gt;Create a user defined function to Generate Content Hash&lt;BR /&gt;
&lt;BR /&gt;
public String generateContentHashing(String payload, Container container) throws StreamTransformationException{&lt;BR /&gt;
&lt;BR /&gt;
AbstractTrace trace = container.getTrace();&lt;BR /&gt;
&lt;BR /&gt;
StringBuilder payloadSb = new StringBuilder();&lt;BR /&gt;
&lt;BR /&gt;
try {&lt;BR /&gt;
&lt;BR /&gt;
MessageDigest md = MessageDigest.getInstance("SHA-256");&lt;BR /&gt;
&lt;BR /&gt;
byte[] hashPayloadInBytes = md.digest(payload.getBytes());&lt;BR /&gt;
&lt;BR /&gt;
for (byte b : hashPayloadInBytes) {&lt;BR /&gt;
&lt;BR /&gt;
payloadSb.append(String.format("%02x", b));&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
} catch (NoSuchAlgorithmException e) {&lt;BR /&gt;
&lt;BR /&gt;
e.printStackTrace();&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
trace.addWarning(payload);&lt;BR /&gt;
&lt;BR /&gt;
return payloadSb.toString();&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 5: &lt;/STRONG&gt;Create a user defined function to Generate csv Payload&lt;BR /&gt;
&lt;BR /&gt;
public void generatePayload(String[] SKUId, String[] EANNumber, String[] Warehouse, String[] Quantity, String[] UOM, String[] Cost, String[] Entity, String[] TransactionType, ResultList rs, Container container) throws StreamTransformationException{&lt;BR /&gt;
&lt;BR /&gt;
AbstractTrace trace = container.getTrace();&lt;BR /&gt;
try&lt;BR /&gt;
{&lt;BR /&gt;
String header = "SKUId,EANNumber,Warehouse,Quantity,UOM,Cost,Entity,TransactionType"; // field names from your first structure&lt;BR /&gt;
String content = header + "\n";&lt;BR /&gt;
for(int i =0; i&amp;lt; SKUId.length; i++)&lt;BR /&gt;
{&lt;BR /&gt;
&lt;BR /&gt;
// adjust the below line with your field names from first structure&lt;BR /&gt;
content = content + SKUId[i] +"," +EANNumber[i] + ","+ Warehouse[i] + "," + Quantity[i] + "," + UOM[i] + "," + Cost[i] + "," + Entity[i] + "," + TransactionType[i] + "\n";&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
trace.addInfo(content);&lt;BR /&gt;
rs.addValue(content);&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
//Create attachment with CSV data&lt;BR /&gt;
catch (Exception e)&lt;BR /&gt;
{&lt;BR /&gt;
e.toString();&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Step 6:&amp;nbsp;&lt;/STRONG&gt;Create a user defined function to Generate Dynamic HTTP Headers&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;public String HTTPHeaders(String dateStamp, String signature, String contentHash, String fileName, Container container) throws StreamTransformationException{&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;DynamicConfiguration conf2 = (DynamicConfiguration) container.getTransformationParameters().get(StreamTransformationConstants.DYNAMIC_CONFIGURATION);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;DynamicConfigurationKey key3 = DynamicConfigurationKey.create("&lt;A href="http://sap.com/xi/XI/System/REST" target="_blank" rel="noopener noreferrer"&gt;http://sap.com/xi/XI/System/REST&lt;/A&gt;", "XAmzDate");&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;conf2.put(key3,dateStamp);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;DynamicConfigurationKey key4 = DynamicConfigurationKey.create("&lt;A href="http://sap.com/xi/XI/System/REST" target="_blank" rel="noopener noreferrer"&gt;http://sap.com/xi/XI/System/REST&lt;/A&gt;", "Authorization");&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;conf2.put(key4,signature);&lt;/SPAN&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;DynamicConfigurationKey key5 = DynamicConfigurationKey.create("&lt;A href="http://sap.com/xi/XI/System/REST" target="_blank" rel="noopener noreferrer"&gt;http://sap.com/xi/XI/System/REST&lt;/A&gt;", "XAmzContentSha256");&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;conf2.put(key5,contentHash);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;DynamicConfigurationKey key6 = DynamicConfigurationKey.create("&lt;A href="http://sap.com/xi/XI/System/REST" target="_blank" rel="noopener noreferrer"&gt;http://sap.com/xi/XI/System/REST&lt;/A&gt;", "FileName");&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;conf2.put(key6,fileName);&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="background: white"&gt;&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;return "";&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Below are the D&lt;STRONG&gt;etailed steps&lt;/STRONG&gt; which explains in reading the API headers parameters i.e. the key and value and sending the file name dynamically :&lt;BR /&gt;
&lt;BR /&gt;
In the&amp;nbsp;&lt;STRONG&gt;first graphical mapper(IDOC to XML)&lt;/STRONG&gt; declare the Adapter Specific Message Attributes as an User-defined Functions for deriving the file name scheme as below and map to the target field ‘&lt;STRONG&gt;fileName&lt;/STRONG&gt;’ and also pass the respective file path to the target field '&lt;STRONG&gt;filePath&lt;/STRONG&gt;'.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;U&gt;&lt;B&gt;User defined&amp;nbsp;function to generate file name dynamically:&lt;/B&gt;&lt;/U&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
public String getASMAFileName(String CREDAT, String CRETIM, Container container) throws StreamTransformationException{&lt;BR /&gt;
&lt;BR /&gt;
String filename = “INV_” + CREDAT + “_” + CRETIM + “.csv”;&lt;BR /&gt;
&lt;BR /&gt;
return filename;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;1&lt;SUP&gt;st&lt;/SUP&gt;&amp;nbsp;Mapper:&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/pic1-1.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the&amp;nbsp;&lt;B&gt;second graphical mapper(XML to CSV) &lt;/B&gt;use the function libraries mentioned in above steps.&lt;BR /&gt;
&lt;BR /&gt;
Hard coded values (like file path, content type, aws access key id and aws secret key can be moved to value mapping appropriately.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;2nd&amp;nbsp;Mapper:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/tye.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--338030435"&gt;&lt;STRONG&gt;In the Integration Directory:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Coming to the&amp;nbsp;&lt;STRONG&gt;REST Receiver communication channel&lt;/STRONG&gt;, under the REST URL tab the header variables defined in pattern variables are replaced by the respective values in the request message dynamically. For each part, I use an adapter specif attribute to read dynamically&amp;nbsp; the respective values from the Adapter specific attributes.&lt;BR /&gt;
&lt;BR /&gt;
The&amp;nbsp;&lt;STRONG&gt;&lt;SPAN class="ph uicontrol"&gt;URL Pattern&lt;/SPAN&gt;&lt;/STRONG&gt;&amp;nbsp;describes the full URL produced by this channel by using named placeholders for dynamic parts. Placeholder variable names must be enclosed in curly braces.&lt;BR /&gt;
&lt;BR /&gt;
Here v&lt;STRONG&gt;alue source i&lt;/STRONG&gt;s &lt;B&gt;Adapter specific attribute &lt;/B&gt;which&amp;nbsp;retrieves the value from an &lt;SPAN class="ph uicontrol"&gt;Adapter-Specific Attribute&lt;/SPAN&gt;&amp;nbsp;by name. The predefined names are:&amp;nbsp;&lt;SPAN class="ph sap-technical-name sap-technical-name"&gt;service, resource, id, resource2, id2, operation.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/req-1.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switching to tab REST Operation . Here, I have set the HTTP Operation Source equals PUT which is a static value.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/req-2.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now defining the format of the messages of the RESTful service. Switch to tab Data Format here the format of the request is JSON and response is expected to be in XML.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/req-3.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Finally in the HTTP Headers define the header and value pattern appropriately.These are dynamically generated using user defined functions.&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;The header value may contain all placeholders defined on the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN style="font-size: 10.5pt;color: #333333"&gt;REST URL&lt;SPAN style="font-size: 10.5pt;font-family: 'Arial',sans-serif;color: #333333"&gt;&amp;nbsp;tab.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/tye-1.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--534543940"&gt;&lt;STRONG&gt;Run the Scenario:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Background job is scheduled in ECC and subsequently an iDOc is generated and delivered to PI for transformation and exchange of message.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;SAP PI Middleware Server:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/tye-2.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Amazon S3 target server:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/pic1-8.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
comma separated value(.csv) looks like:&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/04/pic1-9.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--731057445"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
However, in this blog, I had accomplished this integration using Java mapping as per the recommendations provided by AWS. Below are the references:&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://docs.aws.amazon.com/general/latest/gr/Welcome.html" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://docs.aws.amazon.com/general/latest/gr/Welcome.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://docs.aws.amazon.com/index.html" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://docs.aws.amazon.com/index.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
Other benefits include low cost, 99.99% availability, secure by default, transfer a large amount of data and easy to handle.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In next blogs I will be briefing on the integration with MS Azure and Kafka Applications using external adapters.&lt;BR /&gt;
&lt;BR /&gt;
Thank you!</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/integrating-amazon-simple-storage-service-amazon-s3-and-sap-ecc-v6-0-via/ba-p/13392065"/>
    <published>2019-05-31T14:06:47+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/10-steps-to-auto-generate-api-documentation-from-swagger-inspector-for-rest/ba-p/13413947</id>
    <title>10-Steps to Auto - Generate API Documentation from Swagger Inspector for Rest API(S) from SAP CPI</title>
    <updated>2019-06-19T21:51:02+02:00</updated>
    <author>
      <name>STALANKI</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/13911</uri>
    </author>
    <content>&lt;H1 id="toc-hId-800678025"&gt;&lt;STRONG&gt;&lt;SPAN style="color: #ff6600"&gt;Background&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/H1&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;EM&gt;&lt;STRONG&gt;&lt;SPAN style="color: #ff6600"&gt;&lt;SPAN style="color: #000000"&gt;"Consumer friendly API Documentation is the key for successfull implementation of API First Strategy as it directly impacts the wider adoption and consumption of API(S) across external and internal suppliers and partners."&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;SPAN style="color: #000000"&gt;While swagger or SAP API designer provides a beautiful way to document API(S) for API consumers via &lt;STRONG&gt;RAML/YAML&lt;/STRONG&gt;, it is a manual job for API providers generally to &lt;STRONG&gt;build the API definition i.e RAML in the editors from the scratch&lt;/STRONG&gt; especially when the request/response structures &lt;STRONG&gt;are complex&lt;/STRONG&gt; i.e SAP Objects or when API(S) are built and &lt;STRONG&gt;handed over to support team without any documentation.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;SPAN style="color: #000000"&gt;The following tutorial will provide a mechanism on how to &lt;STRONG&gt;&lt;A href="https://swagger.io/blog/news/announcing-swagger-inspector/" target="_blank" rel="nofollow noopener noreferrer"&gt;auto-generate API&amp;nbsp;documentation using Swagger Inspector for rest API(S)&lt;/A&gt; exposed in SAP CPI or SAP PO or API definition in SAP API management instead of manually typing the RAML to create API definition. Please use CORS Chrome Extension if you face CORS issue when sending messages to CPI &amp;nbsp;&lt;A href="https://chrome.google.com/webstore/detail/swagger-inspector-extensi/biemppheiopfggogojnfpkngdkchelik" target="_blank" rel="nofollow noopener noreferrer"&gt;via Swagger Inspector.&lt;/A&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H1 id="toc-hId-604164520"&gt;&lt;STRONG&gt;&lt;SPAN style="color: #ff6600"&gt;Tutorial&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/H1&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step1:&lt;/STRONG&gt; Create a small &lt;STRONG&gt;CPI&lt;/STRONG&gt; package&lt;STRONG&gt;&amp;nbsp; AutoGenerateSwaggerForAPI with a content modifier step&amp;nbsp;&lt;/STRONG&gt;that accepts the request and sends the JSON response.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog1-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 2:&lt;/STRONG&gt;&amp;nbsp; Open &lt;A href="https://inspector.swagger.io/builder" target="_blank" rel="nofollow noopener noreferrer"&gt;https://inspector.swagger.io/builder&lt;/A&gt; on browser&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 3:&lt;/STRONG&gt; Test CPI Endpoint &lt;A href="https://l4170-iflmap.hcisbp.eu1.hana.ondemand.com/http/SuccessFactors/EmployeeRequest" target="_blank" rel="nofollow noopener noreferrer"&gt;https://CPITenant-iflmap.hcisbp.eu1.hana.ondemand.com/http/SuccessFactors/EmployeeRequest&lt;/A&gt;&amp;nbsp;by passing the&amp;nbsp;required required body and username/password in authorization header.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog2-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 4: &lt;/STRONG&gt;Test CPI Endpoint &lt;A href="https://l4170-iflmap.hcisbp.eu1.hana.ondemand.com/http/SuccessFactors/EmployeeResponse" target="_blank" rel="nofollow noopener noreferrer"&gt;https://CPITenant-iflmap.hcisbp.eu1.hana.ondemand.com/http/SuccessFactors/EmployeeResponse&lt;/A&gt; by passing the required response body and username/password in authorization header.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog4-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blogmiss.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 5:&amp;nbsp;&lt;/STRONG&gt;Create API Definition by selecting &lt;STRONG&gt;both the Employee request / response&lt;/STRONG&gt; and pressing “Create API Definition”&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog6-2.png" /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 6: &lt;/STRONG&gt;Create Swagger User and sign up&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog7.png" /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 7:&amp;nbsp; Go to Swagger hub and press import open API definition From inspector as shown below:&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog8.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog9.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 8: &lt;/STRONG&gt;Swagger API Definition for Employee Request/Response should be generated and screen should look like this.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog10.png" /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 9: &lt;/STRONG&gt;You can check request schema and response schema as shown below:&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog11.png" /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;Step 10: &lt;/STRONG&gt;You can Download Swagger/OpenAPI JSON as shown below:&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/blog12.png" /&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/10-steps-to-auto-generate-api-documentation-from-swagger-inspector-for-rest/ba-p/13413947"/>
    <published>2019-06-19T21:51:02+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/delete-cross-container-services-for-hana-xsa-environment/ba-p/13416476</id>
    <title>Delete cross-container-services for HANA XSA environment</title>
    <updated>2019-08-13T15:48:14+02:00</updated>
    <author>
      <name>Former Member</name>
    </author>
    <content>This document is designed for the environment on HANA 2.0 SPS03 Rev 34 and above.&lt;BR /&gt;
&lt;BR /&gt;
you can delete the service from XSA&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/DeleteservicesXSAcockpit-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
and from Command line option in the following way.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/xsaclicommand.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Still my application is looking for the delete services when i try to build the application.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/blog1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Then I tried the following by deleting via MTA Editor of that particular project via XSA/WebIDE.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/blog2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/blog3.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/02/blog4.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/delete-cross-container-services-for-hana-xsa-environment/ba-p/13416476"/>
    <published>2019-08-13T15:48:14+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-pi-system-properties-and-it-s-usage/ba-p/13451264</id>
    <title>SAP PI System Properties and it's usage</title>
    <updated>2019-11-20T19:49:52+01:00</updated>
    <author>
      <name>sugata_bagchi2</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/197287</uri>
    </author>
    <content>We all came across the requirement to get the SAP System name at least once in many of our PI integration projects. We always wanted to get the SAP PI SID dynamically in the mapping and use it&amp;nbsp; for various purposes.&lt;BR /&gt;
&lt;BR /&gt;
We all probably used the below code snippet in the UDF to achieve this requirement-&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;String sysName = (String) System.getProperty("SAPSYSTEMNAME");&lt;BR /&gt;
return sysName;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I have always wondered what are the other system properties we can fetch? and how to use this UDF more dynamically rather than hard-coding the property name.&lt;BR /&gt;
&lt;BR /&gt;
Here is the little trick, using the below code we can retrieve the entire list of properties of the PI system-&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;Properties p = System.getProperties();&lt;BR /&gt;
return p.toString();&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This will return the String representation of the key-value pair for all the system properties, similar to below -&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/11/2019-11-20_11-35-47.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now, we can choose any property and pass it to UDF and get the value of that property.&lt;BR /&gt;
&lt;BR /&gt;
Below is the revised and modified UDF code which is more dynamic to get any system property value- this UDF requires only one input -property which is the name of any PI system property.&lt;BR /&gt;
&lt;BR /&gt;
PI system properties are - SAPSYSTEMNAME,SAP_J2EE_Engine_Version,SAPSYSTEM,java.vm.version etc.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;String property_val = (String) System.getProperty(property);&lt;BR /&gt;
return property_val;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN style="text-decoration: underline"&gt;Motivation:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://answers.sap.com/questions/12900629/how-to-get-the-other-system-properties-for-pi-usin.html" target="test_blank" rel="noopener noreferrer"&gt;https://answers.sap.com/questions/12900629/how-to-get-the-other-system-properties-for-pi-usin.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Hope this will help the community!</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-pi-system-properties-and-it-s-usage/ba-p/13451264"/>
    <published>2019-11-20T19:49:52+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-jms-queue-in-sap-po-7-5-and-do-e-2-e-testing/ba-p/13432678</id>
    <title>How to Create JMS Queue in SAP PO 7.5 and do e-2-e Testing</title>
    <updated>2020-01-27T11:24:31+01:00</updated>
    <author>
      <name>bijayashreebanoj_brahma</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/418399</uri>
    </author>
    <content>&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Introduction:-&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
While doing Migration from SAP PI 7.1 to SAP PO 7.5 , I come across a situation where, I have to do end-2-end testing for newly installed JMS Libraries. Then I search corresponding blog posts, but I am unable to find full details of configuration and testing. Hence I though of creating this blog post. Hope this will help developers.&lt;BR /&gt;
&lt;BR /&gt;
We will cover below topics in this blog post.&lt;BR /&gt;
&lt;BR /&gt;
1) Creating JMS Queue in SAP PO 7.5&lt;BR /&gt;
&lt;BR /&gt;
2) Creating JMS User and Roles for JMS Connection in SAP PO&lt;BR /&gt;
&lt;BR /&gt;
3) Creating Integrated Configuration&lt;BR /&gt;
&lt;BR /&gt;
4) Configuration of Hermes (testing tool) for end-2-end process&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;1) Creating JMS Queue in SAP PO 7.5&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Go to SAP PO NWA --&amp;gt; Configuration --&amp;gt; JMS Server Configuration&lt;BR /&gt;
&lt;BR /&gt;
Select JMS Resources from drop-down as shown below.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture1-2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click on Create and select "JMS Queue" from drop-down.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Untitled2-2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Below screen will pop-up.&lt;BR /&gt;
&lt;BR /&gt;
Provide any name as per your choice and select "default" from drop-down, as shown below and save.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Untitled3-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Below JMS Queue (jmsqueues/default/JMS_Queue_In) created, as shown below.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Untitled4-2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Like above I have created another JMS Queue (jmsqueues/default/hermes_test_pod).&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;2) Creating JMS User and Roles for JMS Connection&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
With the help of SAP security team or BASIS, we need to create one JMS user with both Consumer and Publisher Roles.&lt;BR /&gt;
&lt;BR /&gt;
Most of times Consumer roles are added initially, but not the Publisher Roles.&lt;BR /&gt;
&lt;BR /&gt;
Below Consumer Role and Administrator Role assign to user in NetWeaver Administrator (NWA).&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;INTEGRATION_VISIBILITY_JMS_SUBS_CONSUMER&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Administrator&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
If Publisher roles are not added, we will get error as "javax.jms.JMSSecurityException: User: Guest has not permission: vpName: default, type: queue, action: consumer, destination:"&lt;BR /&gt;
&lt;BR /&gt;
I follow &lt;STRONG&gt;SAP Note 2530840&lt;/STRONG&gt; to fix the issue.&lt;BR /&gt;
&lt;BR /&gt;
As described in the SAP Note,&lt;BR /&gt;
&lt;BR /&gt;
a) we need to assign below Roles to Group "Everyone" in SAP NetWeaver Administrator (NWA).&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;topic.all.all&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;queue.all.all&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;temp.topic.all.all&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;temp.queue.all.all&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;administration.all.all&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Then assign the user with role Everyone.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;3) Creating Integrated Configuration&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Below Integrated Configuration created in Integration Builder.&lt;BR /&gt;
&lt;BR /&gt;
This a bypass Interface, where I am posting same file, from source JMS Queue to receiver Queue of SAP PO 7.5.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture7-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;a) Sender JMS Communication Channel Configuration&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Configure JMS Sender Channel with below details.&lt;BR /&gt;
&lt;BR /&gt;
Choose the correct transport protocol = Access JMS provider with JNDI&lt;BR /&gt;
&lt;BR /&gt;
JMS Queue = jmsqueues/default/hermes_test_pod&amp;nbsp; (already created before)&lt;BR /&gt;
&lt;BR /&gt;
Connection Factory =&amp;nbsp; Ijmsfactory/default/QueueConnectionFactory&lt;BR /&gt;
&lt;BR /&gt;
JNDI Server Address = &amp;lt;hostname&amp;gt;:port&amp;nbsp; (port is your java host httpport + 4)&lt;BR /&gt;
&lt;BR /&gt;
JNDI Context Factory = com.sap.engine.services.jndi.InitialContextFactoryImpl&lt;BR /&gt;
&lt;BR /&gt;
Credential: Already created JMS User and Password.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture5-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;b) Receiver JMS Communication Channel Configuration&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Configure JMS Receiver Channel with below details.&lt;BR /&gt;
&lt;BR /&gt;
Choose the correct transport protocol =&amp;nbsp; Access JMS provider with JNDI&lt;BR /&gt;
&lt;BR /&gt;
JMS Queue =&amp;nbsp; jmsqueues/default/JMS_Queue_In ( already created before)&lt;BR /&gt;
&lt;BR /&gt;
Connection Factory =&amp;nbsp; Ijmsfactory/default/QueueConnectionFactory&lt;BR /&gt;
&lt;BR /&gt;
JNDI Server Address = localhost:port&amp;nbsp; (port is your java host httpport + 4)&lt;BR /&gt;
&lt;BR /&gt;
JNDI Context Factory = com.sap.engine.services.jndi.InitialContextFactoryImpl&lt;BR /&gt;
&lt;BR /&gt;
Credential = Already created JMS User and Password.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture6-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;U&gt;4) Configuration of Hermes testing tool for end-2-end process&lt;/U&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
As I am familiar with Hermes for testing JMS Queue, I will show you step by step configurations for testing.&lt;BR /&gt;
&lt;BR /&gt;
a) You can download SOAP UI version -5.4.0 and installed in your local system.&lt;BR /&gt;
&lt;BR /&gt;
After installation, You will find hermesJMS folder with in this, as its part of "SmartBear".&lt;BR /&gt;
&lt;BR /&gt;
b) Copy and paste hermesJMS folder to your C drive (&lt;STRONG&gt;C:\hermesJMS&lt;/STRONG&gt;)&lt;BR /&gt;
&lt;BR /&gt;
c) Open folder hermesJMS --&amp;gt; bin --&amp;gt; hermes.bat (edit with notepad or notepad++)&lt;BR /&gt;
&lt;BR /&gt;
d) Update below details as shown below.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&amp;nbsp; set HERMES_HOME=&lt;STRONG&gt;C:\hermesJMS&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Then go to end of the file, and add below highlighted lines and save.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
You can choose java 8 version of your system.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture8-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
e) Open hermes.bat file.&lt;BR /&gt;
&lt;BR /&gt;
f) Create new session and provide any session name per your choice.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture9-1.png" height="458" width="482" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
g) Go to Provider tab, as shown below.&lt;BR /&gt;
&lt;BR /&gt;
Right click --&amp;gt; Add Group --&amp;gt; Provide any Name as per your choice&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture12-1.png" height="479" width="554" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
h) Right click on created group --&amp;gt; add JARS --&amp;gt; select below JARs from your local system&lt;BR /&gt;
&lt;BR /&gt;
sap.com~tc~exception~impl&lt;BR /&gt;
&lt;BR /&gt;
sap.com~tc~je~clientlib~impl&lt;BR /&gt;
&lt;BR /&gt;
sap.com~tc~logging~java~impl&lt;BR /&gt;
&lt;BR /&gt;
You can find above JAR files from your basis team or if you have SFTP access to your SAP PO file path, you can find these JAR files.&lt;BR /&gt;
&lt;BR /&gt;
Path: /usr/sap/&amp;lt;your PO SID&amp;gt;/J00/j2ee/j2eeclient&lt;BR /&gt;
&lt;BR /&gt;
You can I have already added JAR files under group POD.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture13-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
i) Then go to Sessions tab as shown below and configure with below details.&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; Plug In as "Default"&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; In Loader, select newly created group in Provider tab (POD in my case)&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; Select Class name as "hermes.JNDIQueueConnectionFactory" from drop-down.&lt;BR /&gt;
&lt;BR /&gt;
Right click--&amp;gt; Add below 5 Properties and update as below.&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; &lt;STRONG&gt;Binding&lt;/STRONG&gt;: jmsfactory/default/QueueConnectionFactory (standard same as above)&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; &lt;STRONG&gt;initialContextFactory&lt;/STRONG&gt;: com.sap.engine.services.jndi.InitialContextFactoryImpl&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; &lt;STRONG&gt;providerURL&lt;/STRONG&gt;: hostname:[httpport+4]&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; &lt;STRONG&gt;securitycrendential&lt;/STRONG&gt;: password&lt;BR /&gt;
&lt;BR /&gt;
--&amp;gt; &lt;STRONG&gt;securityPrincipal&lt;/STRONG&gt;: user&lt;BR /&gt;
&lt;BR /&gt;
In Destination, add both JMS queue created in SAP PO system.&lt;BR /&gt;
&lt;BR /&gt;
Right click --&amp;gt; Add --&amp;gt; Update your JMS Queue name and go through all the fields and select OK.&lt;BR /&gt;
&lt;BR /&gt;
Likewise you can add both your JMS Queue.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture10-2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture14-1.png" height="525" width="396" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
j) Once both JMS Queue created, then select Apply and OK. Now Hermes looks as below.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture15-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
k) Once you double click on any JMS Queue, you will see on bottom of Hermes, its shows "Finished. No messages read". As there is no message in JMS Queue.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture16-2.png" height="498" width="489" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
l) Now select JMS Queue --&amp;gt; Messages --&amp;gt; Send TextMessage --&amp;gt; Select any test message from your local system (I select XML file).&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture17-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
m) Once the message uploaded successfully, you can able to see the test file, after double click on JMS Queue. Make sure, you stop the Sender Communication Channel.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture18-1.png" height="479" width="468" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
n) Once you start your Sender JMS Communication Channel, test file will be picked and deleted from source JMS Queue and posted to Receiver Queue.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture20-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
o) Now you can see one Successful message in SAP PO Message Monitor and test file in receiver JMS Queue.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/01/Capture19-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Note: -&lt;/STRONG&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;This configuration done on SAP PO 7.5 SP7.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This blog post created to test, newly installed JMS libraries in SAP PO 7.5. Even you can use according to your requirements.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Any Suggestion on this blog post is always welcome.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;You might find different way of doing this, but I found easiest way to test using Hermes.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-jms-queue-in-sap-po-7-5-and-do-e-2-e-testing/ba-p/13432678"/>
    <published>2020-01-27T11:24:31+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/oauth-2-0-standard-solution-with-grant-type-as-password-in-sap-po-7-5-with/ba-p/13435718</id>
    <title>OAuth 2.0 Standard Solution with Grant Type as Password in SAP PO 7.5(with Latest Updates)</title>
    <updated>2020-02-29T11:57:27+01:00</updated>
    <author>
      <name>former_member607993</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/607993</uri>
    </author>
    <content>&lt;SPAN style="font-weight: 400"&gt;This blog portrays the &lt;STRONG&gt;OAuth2.0&lt;/STRONG&gt; authorization with grant type as ‘&lt;STRONG&gt;Password&lt;/STRONG&gt;’.This is implemented in SAP PO 7.5 SPS 16 Patch 15. Lets take a tour into the Standard solution in elucidate with latest updates. ? Over to content below:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1060748073"&gt;&lt;B&gt;1. Introduction:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&lt;STRONG&gt;&amp;nbsp;OAuth&lt;/STRONG&gt;(Open Authorization) is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp; &amp;nbsp;OAuth introduces an authorization layer separating the role of the client from that of the resource owner.In OAuth, the client requests access to resources controlled by the resource owner and hosted by the resource server, and is issued a different set of credentials than those of the resource owner.The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service:&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
(i) On behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service&amp;nbsp; (or)&lt;BR /&gt;
&lt;BR /&gt;
(ii) by allowing the third-party application to obtain access on its own behalf.&lt;BR /&gt;
&lt;H3 id="toc-hId-864234568"&gt;&lt;B&gt;2. Purpose:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;The purpose of this blog is to explain OAuth 2.0 in SAP PO 7.5 SPS 16 with grant type as password.&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;Regards to OAuth 2.0 solution &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;worked with SAP in testing this solution and identifying bugs&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt; which resulted in correction notes published in the SAP marketplace to make this solution more robust to solve different OAuth 2.0 authentication integrations with varied systems/applications.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-667721063"&gt;&lt;B&gt;3. Authorization Code Grant flow:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;Below diagram depicts the &lt;STRONG&gt;Authorization Grant Flow&lt;/STRONG&gt; to retrieve &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;the &lt;STRONG&gt;access token&lt;/STRONG&gt; and &lt;STRONG&gt;refresh token&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;, POST a call to the authorization server. The client requests authorization from the resource owner and receives grant and then requests tokens by authenticating with the authorization server and presenting the grant. Authorization server validates, if valid then issues the initial access token and initial refresh token with access token expiry(lifetime in secs).&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/latest.jpg" height="347" width="539" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Below diagram elucidate that the client requests the &lt;STRONG&gt;protected resources&lt;/STRONG&gt; from the resource server and authenticates by presenting the access token. The resource server validates the access token, and if valid, serves the requests and retrieves the response from the protected resources.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/treq.jpg" height="238" width="388" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-471207558"&gt;&lt;B&gt;4. SAP PO REST Adapter Configurations:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
Before proceeding with the REST receiver communication channel configurations below is the &lt;STRONG&gt;Authorization server&lt;/STRONG&gt; (which grants tokens) HTTP request header and HTTP request Body parameters look alike &lt;SPAN class="emoji wp-migrated-emoji"&gt;?&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;HTTP Request Headers:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/authheader.jpg" height="191" width="560" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;HTTP Request Body:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/authbody.jpg" height="318" width="599" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;HTTP Response Body:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/postres.png" height="268" width="562" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Below is the &lt;STRONG&gt;Resource server&lt;/STRONG&gt;(which does the actual business call) HTTP request header and HTTP request Body parameters look alike&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;HTTP Request Headers:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/resHeader.jpg" height="243" width="522" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;HTTP Request Body:&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/resbody.jpg" height="281" width="524" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;In the &lt;EM&gt;&lt;STRONG&gt;REST receiver communication channel&lt;/STRONG&gt;&lt;/EM&gt; that allows you to configure with OAuth 2.0 Client Credentials Grant and Resource Owner Password Credentials Grant. Below configurations explains only about the resource owner password credential grant type.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;&lt;EM&gt;To Configure the REST receiver channel following are the steps below:&lt;/EM&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp; &amp;nbsp;1. To enable new OAuth 2.0 Grant flows, in the "General" tab, check "&lt;STRONG&gt;Authorize with OAuth&lt;/STRONG&gt;" checkbox and select "OAuth 2.0 Grant Type Flow".You can choose from the following grant flows:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI style="font-weight: 400"&gt;&lt;B&gt;&lt;I&gt;Client Credentials Grant&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - flow described in&lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.4" target="_blank" rel="nofollow noopener noreferrer"&gt; &lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.4" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-4.4&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="font-weight: 400"&gt;&lt;B&gt;&lt;I&gt;Resource Owner Password Credentials Grant&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - flow described in&lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.3" target="_blank" rel="nofollow noopener noreferrer"&gt; &lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-4.3&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Important Note&lt;/STRONG&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt;: Other grant flows - Authorization Code Grant and Implicit Grant and these are not supported by the REST adapter.&lt;/SPAN&gt;&lt;/I&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp; &amp;nbsp;2. You can configure how to use the received access token as defined in&lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6750" target="_blank" rel="nofollow noopener noreferrer"&gt; &lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6750" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6750&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt;. &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Select following values for the field "&lt;STRONG&gt;Use credentials and OAuth 2.0 access token as&lt;/STRONG&gt;" :&lt;/SPAN&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;HTTP Header&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - adds the access token to the request HTTP headers in the following format "Authorization: Bearer &amp;lt;access_token&amp;gt;"&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Query Parameter&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - adds the access token to the resource URL in the following format: &lt;A href="http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;resource_path&amp;gt;?access_token=&amp;lt;access_token_value&amp;gt;" target="test_blank" rel="nofollow noopener noreferrer"&gt;http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;resource_path&amp;gt;?access_token=&amp;lt;access_token_value&amp;gt;&lt;/A&gt;;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Important Note&lt;/STRONG&gt;: This OAuth2.0 functionality extracts only the access token and not the refresh token.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Sending access token as "Form-Encoded Body Parameter" is not supported.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
3. &lt;SPAN style="font-weight: 400"&gt;You can configure the following parameters for OAuth 2.0 Grant Type flows:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;For Client Credentials Grant:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Authorization Server URL - &lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;the server, which will provide the access token(required).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Scope&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - The scope of the access request as described in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-3.3" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-3.3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-3.3&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (optional).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Client ID&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - The client identifier issued to the client during the registration process as described in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.2" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.2" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-2.2&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (required).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Client Secret&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;SPAN style="font-weight: 400"&gt; - The client secret &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;as described in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.3.1" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.3.1" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-2.3.1&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (required).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;EM&gt;&lt;STRONG&gt;For Resource Owner Password Credentials Grant :&lt;/STRONG&gt;&lt;/EM&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Authorization Server URL - &lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;the server which will provide the access token. (required)&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Resource Owner Client ID&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - The client identifier as described in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.2" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.2" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-2.2&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (optional)&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Authorization Server Username and Password&lt;/I&gt;&lt;/B&gt; &lt;SPAN style="font-weight: 400"&gt;- used for authentication with Authorization server as defined in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-3.2.1" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-3.2.1" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-3.2.1&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (required)&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Resource Owner Username and Password&lt;/I&gt;&lt;/B&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt; -&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="font-weight: 400"&gt; resource owner credentials as defined in &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.3.2" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-4.3.2" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-4.3.2&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt; (required)&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B style="font-size: 1rem"&gt;&lt;I&gt;Scope&lt;/I&gt;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; - The scope of the access request as described in &lt;/SPAN&gt;&lt;A style="font-size: 1rem" href="https://tools.ietf.org/html/rfc6749#section-3.3" target="_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-3.3&lt;/A&gt;&lt;SPAN style="font-weight: 400"&gt;. (optional).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
4. &lt;SPAN style="font-weight: 400"&gt;&lt;STRONG&gt;OAuth 2.0 Additional parameters&lt;/STRONG&gt; need to maintained for the remaining HTTP header and HTTP Query parameters. You can specify the "Parameter Type" to be one of the following:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;Query&lt;/I&gt;&lt;/B&gt;&lt;B&gt; -&amp;nbsp; &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;Parameter will be added to the URL query(HTTP Body).&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;&lt;I&gt;HttpHeader&lt;/I&gt;&lt;/B&gt;&lt;B&gt; - &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;Parameter will be added as HTTP Header.&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Important Note&lt;/STRONG&gt;: As per SAP note 2721684 and 2782239 &lt;SPAN style="font-weight: 400"&gt;,which denotes that in order to send &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;‘&lt;/SPAN&gt;&lt;B style="font-size: 1rem"&gt;OAuth 2.0 additional&amp;nbsp; HTTP header parameter;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; with the request.&lt;/SPAN&gt;Patch needs to be applied which matches the respective Support Package version(as per SAP Note &lt;B style="font-size: 1rem"&gt;952402&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;SPAN style="font-weight: 400"&gt;).It works only with &amp;gt;SAP PO 7.5 SPS 15 Patch 0001. With out any patch upgrade below is the error:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;EM&gt;Error while obtaining authorization code - response code: 400 response:&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;{"errorCode": "GTW-ERROR-001","message": "appkey not found in Header or it's not correct."}&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/addp.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
5. In the &lt;STRONG&gt;REST URL&lt;/STRONG&gt;, provide the resource server URL which does the actual business API call.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/postres-2.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
6&lt;STRONG&gt;.&lt;/STRONG&gt; Below is the&lt;STRONG&gt; HTTP headers &lt;/STRONG&gt;of the resource server&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the HTTP Headers, there is no necessity to enforce Authorization: Bearer &amp;lt;access_token&amp;gt;.It will be added since in 'General tab' it is defined use access token as HTTP header.&lt;BR /&gt;
&lt;BR /&gt;
'&lt;STRONG&gt;appkey&lt;/STRONG&gt;' is a valid application key passed in HTTP Header which allows you to track your API usage per application.'&lt;STRONG&gt;Content-Type&lt;/STRONG&gt;' is the type of representation desired at resource side.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/hdrREst.jpg" height="139" width="616" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-274694053"&gt;&lt;B&gt;5. Additional Feature- Resource Owner Password Credentials Grant:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;When partner server does not support Authorization Basic HTTP Header which got added as Authorization: Basic &amp;lt;credentials&amp;gt; since the authorization user name and password is configured in Communication Channel. There is no configuration which is used to exclude this header before and same is raised with SAP for the additional feature.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;As per &lt;/SPAN&gt;&lt;B&gt;OAuth2.0 standard Authentication framework&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;, the client must not use more than one authentication method in each request.Refer: &lt;/SPAN&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.3" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;SPAN style="font-weight: 400"&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;A href="https://tools.ietf.org/html/rfc6749#section-2.3" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-2.3&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;Solution from SAP: &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;New module parameter is defined to the REST receiver channel that allows you to specify how the user authentication is requested from the partner authorization server.Refer SAP Note &lt;STRONG&gt;2878625&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;TABLE style="width: 656px"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 256px"&gt;&lt;B&gt;Parameter name&lt;/B&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 83px"&gt;&lt;B&gt;Parameter value&lt;/B&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 317px"&gt;&lt;B&gt;Perform&lt;/B&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 256px" rowspan="3"&gt;&lt;SPAN style="font-weight: 400"&gt;Oauth20AutorizationServerRequestType&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 83px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;header&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
(default)&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 317px"&gt;&lt;SPAN style="font-weight: 400"&gt;Use the default value header and the fields Authorization Server Username and Authorization Server Password will be used for creation Basic Authorization HTTP Header&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 83px"&gt;&lt;SPAN style="font-weight: 400"&gt;query&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 317px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Use value query and the fields Authorization Server Username and Authorization Server Password will be used for client_id and client_secret in the OAuth query string.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Note:When you use value query do not use field Resource Owner Client ID. This will cause the client_id twice in the query string.&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 83px"&gt;&lt;SPAN style="font-weight: 400"&gt;none&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 317px"&gt;&lt;SPAN style="font-weight: 400"&gt;Use value none and the fields Authorization Server Username and Authorization Server Password will be ignored and no Basic Authorization HTTP Header will be sent (Additional feature requested to SAP)&lt;/SPAN&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;B&gt;Note&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;: When you use a value query do not use the field Resource Owner Client ID. This will cause the client_id twice in the query string.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;Result&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;: Now using the above Parameter name as ‘’&lt;/SPAN&gt;&lt;B&gt;Oauth20AutorizationServerRequestType&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;’ and Parameter value as &lt;/SPAN&gt;&lt;B&gt;‘none’ &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;in the module configuration. Basic Authentication is now ignored from the HTTP header and &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;dispatched as part of the HTTP body only as ‘username’ and ‘password’ appropriately to get the access_token.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/modrest.jpg" height="242" width="588" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Important Note&lt;/STRONG&gt;: As per SAP note &lt;B&gt;2878625&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;which denotes that in order to send &lt;/SPAN&gt;&lt;SPAN style="font-weight: 400"&gt;‘&lt;/SPAN&gt;&lt;B style="font-size: 1rem"&gt;OAuth 2.0 additional query or header parameter;&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt; with the request.&lt;/SPAN&gt;Patch needs to be applied which matches the respective Support Package version(as per SAP Note &lt;B style="font-size: 1rem"&gt;952402&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;).It works only with &amp;gt;SAP PO 7.5 SPS 16 Patch 000014. With out patch upgrade below is the error:&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Error while obtaining authorization code - response code: 400 response:&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
{"error_description": "Client authentication failed","error": "invalid_request"}&lt;BR /&gt;
&lt;H3 id="toc-hId-78180548"&gt;&lt;B&gt;6. OAuth Token Caching:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;PI REST receiver channel with configure OAuth 2.0 Authentication and grants type flow allows the generated Token to be reused depending on the value of the '&lt;STRONG&gt;expires_in&lt;/STRONG&gt;' parameter.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;The access token is usable from the moment it is generated until the number of seconds defined by expire_in elapses.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
'Expires_in' parameter is described in &lt;A href="https://tools.ietf.org/html/rfc6749#section-4.2.2" target="_blank" rel="nofollow noopener noreferrer"&gt;https://tools.ietf.org/html/rfc6749#section-4.2.2&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;To enable the &lt;STRONG&gt;OAuth 2.0 Token Caching&lt;/STRONG&gt;, in the "General" tab, under "OAuth" section, check the new "Use OAuth Token Caching" checkbox*.&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
* Please, note that this checkbox is enabled by default.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Token caching behavior with respect to server node and parallel call as per SAP implementation and reply from technical team,&lt;/SPAN&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI style="font-weight: 400"&gt;&lt;SPAN style="font-weight: 400"&gt;Token Caching is implemented completely in-memory without any persistence, thus the fact that on each &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN style="font-weight: 400"&gt;server node&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN style="font-weight: 400"&gt; there will be separate cache instance. When the token is expired on the first call will remove it from cache.&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="font-weight: 400"&gt;&lt;SPAN style="font-weight: 400"&gt;Latest token value is&amp;nbsp; to be stored, thus the expiration time will be the maximum offset in the future.&amp;nbsp; There is no problem update or removal expired token when there is parallel calls to the adapter to use existing tokens or update new token.&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;Access token is extracted and added to &lt;/SPAN&gt;&lt;B&gt;‘OAuth20TokenCache’ &lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;with&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;Key&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;: authorizationUrl_client_id&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;Value&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;: *access_token* expiresIn: 2020-01-31T09:18:09.542 (&lt;/SPAN&gt;&lt;B&gt;yyyy-MM-ddTHH:mm:ss.SSS&lt;/B&gt;&lt;SPAN style="font-weight: 400"&gt;).&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/tokencache.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp;This expiry is based upon the field "expires_in" from the HTTP response json payload. &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN style="font-weight: 400"&gt;&amp;nbsp; Say 1799 seconds it exactly calls a new token. Token is searched in ‘&lt;STRONG&gt;OAuth20Token&lt;/STRONG&gt;’ Cache and uses the access token for the next consecutive and Concurrent calls till its expiry.After the access Token expiry,&amp;nbsp; Authentication API is immediately called and retrieves a fresh access token and update in Cache(OAuth20Token).Access Token expire exactly after 30 minutes and the expiry timestamp format used is '&lt;STRONG&gt;yyyy-MM-ddTHH:mm:ss.SSS'&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--118332957"&gt;&lt;B&gt;7. Troubleshooting:&lt;/B&gt;&lt;/H3&gt;&lt;BR /&gt;
1. Goto PI Message monitoring, check for the message logs.'Authorization' will not be visible in audit logs and secured.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/messagelog.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
2. Goto to NWA log viewer for a detailed debug traces.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/02/logvw.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
3. &lt;SPAN style="font-weight: 400"&gt;Enable XPI inspector log with corresponding REST adapter channel and check the HTTP client log, we can see the HTTP request header, body of adapter configuration and response header and body message Authorization server.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Note&lt;/STRONG&gt;: Please Ensure SPS or Patch upgrade are applied on Sandbox environment and smoke tested thoroughly and then implemented in other environments.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Happy Reading!?</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/oauth-2-0-standard-solution-with-grant-type-as-password-in-sap-po-7-5-with/ba-p/13435718"/>
    <published>2020-02-29T11:57:27+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-deploy-external-jms-and-jdbc-drivers-in-sap-po-7-5/ba-p/13429788</id>
    <title>How to Deploy External JMS and JDBC drivers in SAP PO 7.5</title>
    <updated>2020-05-05T16:14:25+02:00</updated>
    <author>
      <name>bijayashreebanoj_brahma</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/418399</uri>
    </author>
    <content>&lt;H2 id="toc-hId-930861214"&gt;Introduction: -&lt;/H2&gt;&lt;BR /&gt;
While migrating to SAP PO 7.5, I came across a situation, where I need to deploy external JDBC and JMS drivers to SAP PO system. Generally this activity done by BASIS team. In this blog, I will describe step-by-step process, which can be done by SAP PI/PO developers.&lt;BR /&gt;
&lt;BR /&gt;
There might be many different cases for creating SDA file. But I thought of two cases as below.&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;You have current deployed SDA file and you want to add new external JDBC or JMS drivers.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;You are going to deploy from scratch or you don't have current deployed SDA .&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-863430428"&gt;&lt;STRONG&gt;Case One:-&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
You can get current deployed SDA file with help of BASIS team.&lt;BR /&gt;
&lt;BR /&gt;
Once you got the already deployed SDA file, you need to download &lt;STRONG&gt;SDA Maker Tool&lt;/STRONG&gt; (you can download from attachment of sap note 1028961).&lt;BR /&gt;
&lt;BR /&gt;
Execute SDA tool and follow as below for creating new SDA file.&lt;BR /&gt;
&lt;BR /&gt;
Netweaver Version --&amp;gt; 7.5 (in my case)&lt;BR /&gt;
&lt;BR /&gt;
JDBC and JMS drivers --&amp;gt; com.sap.aii.adapter.lib.sda (select from drop-down)&lt;BR /&gt;
&lt;BR /&gt;
Check Add additional jar files.&lt;BR /&gt;
&lt;BR /&gt;
Select SDA file (you got from BASIS) .&lt;BR /&gt;
&lt;BR /&gt;
Select folder, where all additional .jar files need to be added to SDA file.&lt;BR /&gt;
&lt;BR /&gt;
Select an empty folder, where newly created SDA file will be place.&lt;BR /&gt;
&lt;BR /&gt;
Click Start.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture4.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-795999642"&gt;&lt;STRONG&gt;Initial .SDA file: -&lt;/STRONG&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture8-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;After adding new .jar files : -&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
You can see two new .jar files added to provider file and also under lib folder.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture9-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
lib --&amp;gt; This folder contains all the .jar files for drivers&lt;BR /&gt;
&lt;BR /&gt;
server --&amp;gt; Contain provider.xml file&lt;BR /&gt;
&lt;BR /&gt;
Once the new SDA file is created, its ready to deploy in SAP PO system ( we will see later in this blog).&lt;BR /&gt;
&lt;H3 id="toc-hId-470403418"&gt;&lt;STRONG&gt;Case Two:-&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;If SAP PO system already deployed "&lt;STRONG&gt;SAP-XI3RDPARTY&lt;/STRONG&gt;", then you need to identify the correct version, before creating new SDA file.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If version of &lt;STRONG&gt;SAP-XI3RDPARTY &lt;/STRONG&gt;and &lt;STRONG&gt;"com.sap.aii.adapter.lib"&lt;/STRONG&gt; are different, then go with version of &lt;STRONG&gt;"com.sap.aii.adapter.lib"&lt;/STRONG&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If "&lt;STRONG&gt;SAP-XI3RDPARTY"&lt;/STRONG&gt; is not deployed, then you can refer &lt;STRONG&gt;"SAP_XIAF"&lt;/STRONG&gt; version and download corresponding SCA file.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;In my case, its already deployed and version is SAP 7.5 SP0 Patch 0 (highlights in yellow color).&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
You can find version in two different ways, through NetWeaver Administrator or NWDS.&lt;BR /&gt;
&lt;BR /&gt;
Go to&amp;nbsp; Your SAP PO System --&amp;gt; NWA --&amp;gt; Configuration --&amp;gt; Infrastructure --&amp;gt; System Information --&amp;gt; Components Info.&lt;BR /&gt;
&lt;BR /&gt;
Search for "&lt;STRONG&gt;SAP-XI3RDPARTY&lt;/STRONG&gt;" as shown below.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture1-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Open NWDS and Go to Deployment Prospective.&lt;BR /&gt;
&lt;BR /&gt;
Update your SAP PO system details in SAP AS Java.&lt;BR /&gt;
&lt;BR /&gt;
Search for "&lt;STRONG&gt;SAP-XI3RDPARTY&lt;/STRONG&gt;" as shown below and click on, to see the version (highlights in yellow color)&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture2-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Download &lt;STRONG&gt;SAP-XI3RDPARTY&lt;/STRONG&gt; SCA file from below path.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://launchpad.support.sap.com/#/softwarecenter/support/index" target="test_blank" rel="noopener noreferrer"&gt;https://launchpad.support.sap.com/#/softwarecenter/support/index&lt;/A&gt; --&amp;gt; Give your S-user credentials&lt;BR /&gt;
&lt;BR /&gt;
Search as below and choose your SCA file version and download.&lt;BR /&gt;
&lt;BR /&gt;
XI 3RD PARTY --&amp;gt; XI 3RD PARTY 7.50&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture10.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
You will see below folders after unzipping SCA file ( I use 7-Zip ti unzip).&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture11.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
com.sap.aii.adapter.lib.sda --&amp;gt; JMS or JDBC deployment. (we will considering this in our blog)&lt;BR /&gt;
&lt;BR /&gt;
com.sap.aii.af.axisproviderlib.sda --&amp;gt; Axis adapter deployment&lt;BR /&gt;
&lt;BR /&gt;
Finally, create your new SDA file as described above in case one.&lt;BR /&gt;
&lt;H3 id="toc-hId-273889913"&gt;Deployment of SDA File: -&lt;/H3&gt;&lt;BR /&gt;
I am using NWDS for deployment and you need Administrator Role for this.&lt;BR /&gt;
&lt;BR /&gt;
Open NWDS --&amp;gt; Go to Deployment perspective --&amp;gt; Import --&amp;gt; Start&lt;BR /&gt;
&lt;BR /&gt;
Before deployment update your system details in "SAP As Java" in Preferences of NWDS.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture14.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Once deployment finished. you can see in SAP PO NWA.&lt;BR /&gt;
&lt;BR /&gt;
SAP PO NWA --&amp;gt; Java Class Loader Viewer --&amp;gt; Search for "com.sap.aii.adapter.lib"&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Capture15.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Remark: -&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;We can choose different way to deploy newly created SDA file to SAP PO system.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If you have already few external drivers and you want to add more, then create new SDA file will all .jar files (exiting and new). If not then new SDA file will overwrite existing one.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;You might find few different sap notes related to this, but I try to cover all in one.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Any suggestion , always welcome.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-deploy-external-jms-and-jdbc-drivers-in-sap-po-7-5/ba-p/13429788"/>
    <published>2020-05-05T16:14:25+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/connect-linkedin-rest-api-to-sap-successfactors-in-sap-po-7-5/ba-p/13541975</id>
    <title>Connect LinkedIn REST API to SAP SuccessFactors in SAP PO 7.5</title>
    <updated>2022-04-01T16:10:53+02:00</updated>
    <author>
      <name>Usharsree_7999</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/6570</uri>
    </author>
    <content>&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
The company uses email authentication of staff to Linked Learning using Azure. There was a requirement to use the User ID (BizX ID) to update the course completion status from linkedin Learning into company LMS. So I had built interface to integrate LinkedIn Learning with LMS , do the necessary field mappings from Linkedin EmailID to UserID and LinkedIn content ID to LMS Item ID and record the Learning history.&lt;BR /&gt;
&lt;BR /&gt;
In this Blog I will provide the steps to connect LinkedIn REST API to SAP SuccessFactors using SAP PO 7.5.&lt;BR /&gt;
&lt;BR /&gt;
The following activities were performed:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Configure the LinkedIn Learning Reporting API (please refer link for details &lt;A href="https://docs.microsoft.com/en-us/linkedin/learning/reporting/reporting-docs/reporting-api#provision-api-keys" target="_blank" rel="nofollow noopener noreferrer"&gt;Reporting APIs in LinkedIn Learning - LinkedIn | Microsoft Docs&lt;/A&gt;).&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Use the API string below: &lt;A href="https://api.linkedin.com/v2/learningActivityReports?aggregationCriteria.primary=INDIVIDUAL&amp;amp;aggregationCriteria.secondary=CONTENT&amp;amp;q=criteria&amp;amp;start=0&amp;amp;count=1&amp;amp;contentSource=EXTERNAL&amp;amp;assetType=COURSE&amp;amp;startedAt=1562699900247&amp;amp;timeOffset.duration=1&amp;amp;timeOffset.unit=DAY" target="_blank" rel="nofollow noopener noreferrer"&gt;https://api.linkedin.com/v2/learningActivityReports?aggregationCriteria.primary=INDIVIDUAL&amp;amp;aggregationCriteria.secondary=CONTENT&amp;amp;q=criteria&amp;amp;start=0&amp;amp;count=1&amp;amp;contentSource=EXTERNAL&amp;amp;assetType=COURSE&amp;amp;startedAt=1562699900247&amp;amp;timeOffset.duration=1&amp;amp;timeOffset.unit=DAY&lt;/A&gt;'. For more details on the query parameters please refer link &lt;A href="https://docs.microsoft.com/en-us/linkedin/learning/integrations/learning-activity-reports#learner-course-activity-detail-report" target="_blank" rel="nofollow noopener noreferrer"&gt;LinkedIn Learning API - Retrieve Learning Activity Reports - LinkedIn | Microsoft Docs&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Developed the PO interface to integrate LinkedIn application with SAP Success Factors. REST sender adapter has been configured to fetch data form LinkedIn REST API and developed java mapping to implement the business logic..&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
REST Sender Adapter configuration&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/Linkedinpart1-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;REST Sender Adapter Config&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
4.&amp;nbsp; &amp;nbsp; The API provides the output below. I need the data from the 3 columns in yellow&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/LInkedinpart2.png" height="29" width="755" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;LinkedIn Output&lt;/P&gt;&lt;BR /&gt;
5.&amp;nbsp; &amp;nbsp; &lt;SPAN style="font-size: 1rem"&gt;The following SFTPlookup mapping&amp;nbsp; were done.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
Lookup for Email id was done to fetch the user and lookup for contentID was done to fetch the ItemID.&lt;BR /&gt;
&lt;BR /&gt;
a.&amp;nbsp; Email to UserID: Used the integration center to output the email and userID fields from SuccessFactors. This mapping file is placed in PO.&lt;BR /&gt;
&lt;BR /&gt;
b. LinkedIn Learning ContentID to LMS ItemID: Ran the ‘Open Content Network’ report in SuccessFactors Learning to fetch the data for mapping. This mapping file is placed in PO server.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/Linikedinpart3-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;SFTP Lookup&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp; &amp;nbsp;c.&amp;nbsp; &amp;nbsp;Filtered the LinkedIn Learning to use only the records that had 100% completion and calculate the Completion date using the data ‘lastEngagedAt’ field value under COMPLETIONS. The time is in milliseconds. So the above divide by 86400000 and then add to date 1/1/1970 to get the completion date.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/LInekdinpart4.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Java Mapping&lt;/P&gt;&lt;BR /&gt;
d. Developed mapping to transform the source structure to target structure in PO.&lt;BR /&gt;
&lt;BR /&gt;
Operation mapping&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/Op-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Operation Mapping&lt;/P&gt;&lt;BR /&gt;
6. The output for the ‘Learning History’ connector in SuccessFactors to import the data was prepared in the format below and placed in the SuccessFactors SFTP server.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/out.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Final Output&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
7.Receiver SFTP adapter configured to connect PO with SAP SuccessFactors to create the file.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/03/Channel-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Receiver channel&lt;/P&gt;&lt;BR /&gt;
8.The learning history connectors was scheduled to import the data.&lt;BR /&gt;
&lt;BR /&gt;
9.Please note I have used below tools.&lt;BR /&gt;
&lt;BR /&gt;
SAP NetWeaver Developer Studio 7.3 SP25 PAT0003&lt;BR /&gt;
&lt;BR /&gt;
SAP PO 7.5 SPS 22&lt;BR /&gt;
&lt;BR /&gt;
SAP SuccessFactors Cloud&lt;BR /&gt;
&lt;BR /&gt;
This blog helps you to configure the interface from LinkedIn API to SAP SuccessFactors and build SFTP lookup, create java mapping for transforming from source structure to target structure.&amp;nbsp; .&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Other References&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2015/02/08/how-to-create-java-mapping-in-sap-pi-po/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2015/02/08/how-to-create-java-mapping-in-sap-pi-po/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/connect-linkedin-rest-api-to-sap-successfactors-in-sap-po-7-5/ba-p/13541975"/>
    <published>2022-04-01T16:10:53+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/message-mapping-as-artifact-and-creating-resource-schemas/ba-p/13554626</id>
    <title>Message Mapping as Artifact and Creating Resource Schemas</title>
    <updated>2023-01-27T10:52:30+01:00</updated>
    <author>
      <name>bijayashreebanoj_brahma</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/418399</uri>
    </author>
    <content>&lt;H2 id="toc-hId-962110824"&gt;Introduction:-&lt;/H2&gt;&lt;BR /&gt;
As per new feature in CPI, we can create Message Mapping as Artifact and deploy before using in any integration flow.&amp;nbsp; There are already few blogs , where you can see how to create Message Mapping as Artifact and the limitations.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/06/17/sap-cloud-integration-message-mapping-as-artifact/" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Integration – Message Mapping as Artifact | SAP Blogs&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
In this blog, I will cover alternative step-by-step process to create Resource Schemas for IDoc and any other XML structure, which we use to create easily in SAP PI/PO. But if we don't have SAP PI/PO instance and we are using only SAP Cloud Integration, then we can follow below process to Create any XML Schemas and generate IDoc Schemas.&lt;BR /&gt;
&lt;H3 id="toc-hId-894680038"&gt;Creating XSD using Eclipse:-&lt;/H3&gt;&lt;BR /&gt;
Create JAVA project using Eclipse (JAVA perspective).&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Change Perspective to XML and refer any folder in your local machine to create XML Schema.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_2.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Create XML Schema File and give any name and click Finish.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_3.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
You can see below Schema created. Then right click and add element.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_4.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Click on the newly created element and Set Type to "Complex Type" and&amp;nbsp; "anonymous".&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_5.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Remove Prefix and Target Namespace form the element and add prefix for attributes.&lt;BR /&gt;
&lt;BR /&gt;
This we are doing as per SAP PI/PO External definition.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_6.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Click of the element and add element and change to your required field names with occurrence.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_7.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Now you can find the newly created Schema in your local machine (path which you already provided earlier during creating XML Schema file) and you can use this directly in SAP Cloud Integration Message mapping as source or Target Resource.&lt;BR /&gt;
&lt;H3 id="toc-hId-698166533"&gt;Generating IDoc Schemas:-&lt;/H3&gt;&lt;BR /&gt;
Go to transaction WE60 and provide the IDoc Type , which you want to generate Schema.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_8.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Click of Documentation --&amp;gt; XML Schema&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_9.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
XML Schema created and you can download to local machine.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_10.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-501653028"&gt;Using created Schemas in Cloud Integration Message Mapping:-&lt;/H3&gt;&lt;BR /&gt;
Open Cloud Integration and create Message Mapping as Artifact.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_11.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Import both the structure to message mapping.&lt;BR /&gt;
&lt;BR /&gt;
Save and click Simulate to test the Message Mapping.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_13.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
While Importing IDoc Schema, you will get below pop up to change Occurrence.&lt;BR /&gt;
&lt;BR /&gt;
You can change&amp;nbsp; Occurrence to "unbounded" from all those have like&amp;nbsp; "99999" or "999999".&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/01/page_12.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-305139523"&gt;Working with RFC:-&lt;/H3&gt;&lt;BR /&gt;
I don't find any way to create RFC structure, but generally we can create input structure Manually while calling any RFC There is already few blogs which describe&amp;nbsp; in details, we can refer below one.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2022/11/03/cloud-integration-creating-xml-structure-for-remote-function-call-rfc-that-requires-tables-and-structures/" target="test_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2022/11/03/cloud-integration-creating-xml-structure-for-remote-function-call-rfc-that-requires-tables-and-structures/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2022/11/03/cloud-integration-creating-xml-structure-for-remote-function-call-rfc-that-requires-tables-and-structures/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2022/11/03/cloud-integration-creating-xml-structure-for-remote-function-call-rfc-that-requires-tables-and-structures/&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-108626018"&gt;Conclusion:-&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;There might be different way of doing this , but I really like this.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;I hope this will help as we are all moving forward towards SAP Integration Suite.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Any suggestion and easy why of doing , always welcome.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-41195232"&gt;&lt;/H4&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/message-mapping-as-artifact-and-creating-resource-schemas/ba-p/13554626"/>
    <published>2023-01-27T10:52:30+01:00</published>
  </entry>
</feed>
