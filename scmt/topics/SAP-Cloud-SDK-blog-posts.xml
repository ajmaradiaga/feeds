<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Cloud-SDK-blog-posts.xml</id>
  <title>SAP Community - SAP Cloud SDK</title>
  <updated>2025-09-17T23:13:12.775048+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Cloud SDK/pd-p/73555000100800000895" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Cloud SDK blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/validation-for-different-identity-cards-via-absl-code-in-sap-c4c/ba-p/13674119</id>
    <title>Validation for different Identity Cards via ABSL code in SAP C4C</title>
    <updated>2024-04-18T08:27:04.382000+02:00</updated>
    <author>
      <name>tkbisoyi9118</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/162380</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Validation for different Identity Cards via ABSL code in SAP C4C&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In day–to-day life, the need of unique identification cards are common. So verfifications on identity cards in different sectors are also a basic requirement. Suppose we are working for a client from India and the project is about Sales cloud. In this case, the client wants to maintain every customer’s data like Name, Contact, Address, PAN number, Adhaar number, Passport details etc. Out of those fields PAN number, Adhaar number &amp;amp; Passport number are unique IDs provided to each person in India. So we need to put some validations against them, so that wrong values should not be stored.&lt;/P&gt;&lt;P&gt;We have an option to put the validations on these Identity card numbers is via ABSL validation logic through cloud application studio. Here the steps mentioned below to validate different identity cards.&lt;/P&gt;&lt;P&gt;Identity cards mostly required in customer/Employee work centers. So, we can add the below logics in Event- Validation on Save and Event – After Modify of Customer/Employee BO in SDK.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Case1 – PAN Card number should be alphanumeric and should maintain exact pattern. Also PAN card number should have only 10 characters length.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To validate the length of any field we have the method “.length()”Which we can use for this requirement.&lt;/P&gt;&lt;P&gt;For PAN Card number the format in India as&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The PAN Card number should be only 10 characters long.&lt;/LI&gt;&lt;LI&gt;First five characters should be alphabeting ranges from [A-Z]&lt;/LI&gt;&lt;LI&gt;From 6th to 9th places should be numeric values ranges from [0-9]&lt;/LI&gt;&lt;LI&gt;Last digit should be alphabetic values within [A-Z]&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Using ABSL we have some logic using substring to implement the validation for any mismatch of the above-mentioned format. Added the code snippet for your reference.&lt;/P&gt;&lt;P&gt;Here we will use FindRegex() : This function &lt;SPAN&gt;Searches from left to right and returns the position of a regular expression pattern in a string. If it doesn’t find same pattern then it &lt;/SPAN&gt;returns the value “-1” and raises a message as we define.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;First five characters should be alphabeting ranges from [A-Z].&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_0-1713528643323.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98781i2BC49C5D7E096630/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_0-1713528643323.png" alt="tkbisoyi9118_0-1713528643323.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;From 6th to 9th places should be numeric values ranges from [0-9]&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_1-1713528643329.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98780i5A0B7FBFB58CD180/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_1-1713528643329.png" alt="tkbisoyi9118_1-1713528643329.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Last digit should be alphabetic values within [A-Z]&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_2-1713528643334.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98782iEBDF5C23F15258F5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_2-1713528643334.png" alt="tkbisoyi9118_2-1713528643334.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The PAN Card number should be only 10 characters long.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_3-1713528643336.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98783iC3F9D53112B88171/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_3-1713528643336.png" alt="tkbisoyi9118_3-1713528643336.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Result: - After implementing the above ABSL code, when user tried to add wrong values of PAN Card or incorrect length, the error displayed and not allowed to SAVE the data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_4-1713528643339.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98784i18CE92864638DD6C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_4-1713528643339.png" alt="tkbisoyi9118_4-1713528643339.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_5-1713528643344.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98785i875F96029DCB663C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_5-1713528643344.png" alt="tkbisoyi9118_5-1713528643344.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_6-1713528643349.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98788i721E1DA3B2D2CA0B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_6-1713528643349.png" alt="tkbisoyi9118_6-1713528643349.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Case 2 – Adhaar Card number should be 12 characters length &amp;amp; all digits should be numeric values. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To validate the length of any field we have the method “.length()”Which we can use as of the requirement.&lt;/P&gt;&lt;P&gt;For Adhaar card all the digits should be numeric and length should be 12 characters only. The below ABSL code can restrict any mismatch to the Adhaar card format.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_7-1713528643351.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98786iDB8A4BF4EB381ADB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_7-1713528643351.png" alt="tkbisoyi9118_7-1713528643351.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Result: - After implementing the above ABSL code, when user tried to add wrong values of Adhaar Card or incorrect length, the error displayed and not allowed to SAVE the data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_8-1713528643357.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98787iA667C465BEC3B62F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_8-1713528643357.png" alt="tkbisoyi9118_8-1713528643357.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_9-1713528643362.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98789i852777571AB81B2E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_9-1713528643362.png" alt="tkbisoyi9118_9-1713528643362.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_10-1713528643366.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98790iD8C707077F307965/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_10-1713528643366.png" alt="tkbisoyi9118_10-1713528643366.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Case3 – Indian Passport number should be alphanumeric and should maintain exact pattern. Also Passport card number should have only 8 characters length.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To validate the length of any field we have the method “.length()”Which we can use as of the requirement.&lt;/P&gt;&lt;P&gt;For Passport number the format in India as&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The Passport number should be only 8 characters long.&lt;/LI&gt;&lt;LI&gt;First one character should be alphabeting ranges from [A-Z].&lt;/LI&gt;&lt;LI&gt;For 2nd position, it should be numeric value within range 1 to 9.&lt;/LI&gt;&lt;LI&gt;For 3rd position, it should be numeric value within range 0 to 9.&lt;/LI&gt;&lt;LI&gt;From position 4th to 7th position, digits should be numeric value within range 0 to 9.&lt;/LI&gt;&lt;LI&gt;For the last one digit, it should be numeric value within range 1-9.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Using ABSL we have some logic using substring to implement the validation for any mismatch of the above-mentioned format. Added the code snippet for your reference.&lt;/P&gt;&lt;P&gt;Here we will use FindRegex() : This function &lt;SPAN&gt;Searches from left to right and returns the position of a regular expression pattern in a string. If it doesn’t find same pattern then it &lt;/SPAN&gt;returns the value “-1” and raises a message as we define.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;First one character should be alphabeting ranges from [A-Z].&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_11-1713528643372.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98791i1F8F4A87DFD9790E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_11-1713528643372.png" alt="tkbisoyi9118_11-1713528643372.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;For 2nd position, it should be numeric value within range 1 to 9.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_12-1713528643376.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98794i7FD15A846EC18C3C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_12-1713528643376.png" alt="tkbisoyi9118_12-1713528643376.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;For3rd position, it should be numeric value within range 0 to 9.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_13-1713528643380.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98792iC1D70C1171FED582/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_13-1713528643380.png" alt="tkbisoyi9118_13-1713528643380.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;From position 4th to 7th position, digits should be numeric value within range 0 to 9.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_14-1713528643384.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98793i2903687EE940A4BD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_14-1713528643384.png" alt="tkbisoyi9118_14-1713528643384.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;For the last one digit, it should be numeric value within range 1-9.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_15-1713528643388.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98795iD5A1320DB7FBCFA6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_15-1713528643388.png" alt="tkbisoyi9118_15-1713528643388.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The Passport number should be only 8 characters long.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_16-1713528643392.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98797i76763F678260AA8F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_16-1713528643392.png" alt="tkbisoyi9118_16-1713528643392.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Result: - After implementing the above ABSL code, when user tried to add wrong values of Adhaar Card or incorrect length, the error displayed and not allowed to SAVE the data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_17-1713528643397.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98796i3FD77F6543724906/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_17-1713528643397.png" alt="tkbisoyi9118_17-1713528643397.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_18-1713528643402.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98798iCAC3EFB2B95EF0C5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_18-1713528643402.png" alt="tkbisoyi9118_18-1713528643402.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="tkbisoyi9118_19-1713528643406.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/98799i9D8CAD495D1ADE11/image-size/medium?v=v2&amp;amp;px=400" role="button" title="tkbisoyi9118_19-1713528643406.png" alt="tkbisoyi9118_19-1713528643406.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion: -&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This solution can help customers to restrict unauthorized entry of identity card numbers.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/validation-for-different-identity-cards-via-absl-code-in-sap-c4c/ba-p/13674119"/>
    <published>2024-04-18T08:27:04.382000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/handle-the-behavior-of-extension-field-by-toggle-button-using-sdk-ui/ba-p/13677684</id>
    <title>Handle the behavior of extension field by toggle button using SDK UI designer.</title>
    <updated>2024-04-22T11:07:54.330000+02:00</updated>
    <author>
      <name>Sunil5</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/162675</uri>
    </author>
    <content>&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;STRONG&gt;&lt;U&gt;Handle the behavior of extension field by toggle button using SDK UI designer.&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Suppose there is one such requirement: We should have one toggle button and using that toggle button we can control the field behaviors like “Mandatory”, “Read Only” or “Visible” so, fields will behave the same as mentioned above when toggle button is set to true. To implement this requirement, we have created 3 different extension fields as “Extension field M”, “Extension field V”, “Extension field R” and one indicator field as “Manage Field” (indicator field act as a toggle button in front-end) in Service Request (Ticket) standard BO. We can make the “Extension field M” field as mandatory, the “Extension field V” field as visible, and the “Extension field R” field as read-only by toggle button (“Manage Field”) using UI designer in SDK.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Procedure: -&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Here We have added extension fields in Service Request Extension BO (Ticket).&lt;/P&gt;&lt;P&gt;To add extension field to Extension BO we need to follow below steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open your solution and click on Add New Item and select the “Extension” and from the list select “Business Object Extension” then click on Add. Select required namespace and BO name then click ok.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_1-1713769816813.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99723iC00AFECE7B19DC90/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_1-1713769816813.png" alt="Sunil5_1-1713769816813.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_2-1713769857108.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99724i9EAE96BEEB435F52/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_2-1713769857108.png" alt="Sunil5_2-1713769857108.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. After creation of “Business Object Extension” then add extension fields in this BO as shown below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_3-1713769964246.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99726iA2812F76701CE990/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_3-1713769964246.png" alt="Sunil5_3-1713769964246.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;We now have extension fields created in Service Request Extension BO in Cloud Application Studio. Based on our requirement add these extension fields in the UI screen of Extension BO in Cloud Application Studio. Here We have added these extension fields in the TI screen of Service Request Extension BO. Now you can see these Extension fields in below SS.&lt;/P&gt;&lt;P&gt;To add extension field in UI screen of Extension BO we need to follow below steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Right click on BO and select “Enhance Screen” then select the screen as your requirement.&lt;/LI&gt;&lt;LI&gt;In screen, select group section and select “Add Extension field to Section Group” under the “Extensibility explorer” then select field which need to add in the screen then save and activate the UI screen.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_4-1713770008184.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99728i4758431A052D4AA3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_4-1713770008184.png" alt="Sunil5_4-1713770008184.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Extension fields have been added successfully in UI screen as below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_5-1713770045689.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99730i8C197C9B333DE6B3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_5-1713770045689.png" alt="Sunil5_5-1713770045689.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As per our requirement, now we will make the "Extension field M" field as mandatory field, the "Extension field R" field as read-only field and the "Extension field V" field as visible field in the UI screen using toggle button ("Manage Field") in cloud application studio. Here you need to follow the below steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the UI screen in cloud application studio where we have added to the extension fields. Here we have opened the TI screen of Service Request Extension BO. Select the field group where we have added the extension fields and click on “Adjust Properties” under the “Extensibility Explorer” as shown below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_6-1713770101138.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99732iC5F838F5D9D1BEDF/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_6-1713770101138.png" alt="Sunil5_6-1713770101138.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. Now we need to bind "Extension field M" field to the indicator field (toggle button) for mandatory, bind "Extension field R" field to the indicator field for ReadOnly and "Extension field V" field to the indicator field for Visible. Then, click on “Apply” as shown below, save and activate to the UI screen to finish this setup.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;- if we do not bind these fields with indicator field and select the “True” value there, then by default these fields will have same behavior every time.&lt;/P&gt;&lt;P&gt;For an example: if for "Extension field M" field, property “Mandatory” is set to “True” then this field will become mandatory by default.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_7-1713770151109.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99734i55779E28F4EDE0EE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_7-1713770151109.png" alt="Sunil5_7-1713770151109.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Result: -&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;After Completion of all the setup in SDK, now we can preview our changes when we will turn on the toggle button (“Manage Field”), then all the fields will behave as we expected.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_8-1713770182573.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99735i566C5E9FAA303EC4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_8-1713770182573.png" alt="Sunil5_8-1713770182573.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;when we will turn off the toggle button (“Manage Field”), then all the fields will behave as we expected.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sunil5_9-1713770213324.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/99736i8A9526207D26F4F4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sunil5_9-1713770213324.png" alt="Sunil5_9-1713770213324.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion: -&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now you can change the behavior of these fields based on toggle button (Manage field).&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/handle-the-behavior-of-extension-field-by-toggle-button-using-sdk-ui/ba-p/13677684"/>
    <published>2024-04-22T11:07:54.330000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/configuration-as-code-cac-with-destinations/ba-p/13699003</id>
    <title>Configuration as code (CaC) with destinations.</title>
    <updated>2024-05-13T12:54:57.123000+02:00</updated>
    <author>
      <name>quovadis</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/743</uri>
    </author>
    <content>&lt;H1 id="toc-hId-865494464"&gt;Configuration as code (CaC) with destinations.&lt;/H1&gt;&lt;P&gt;Destinations are very handy and powerful mechanism to facilitate access to target systems and devices.&lt;/P&gt;&lt;P&gt;When it comes to SAP BTP destinations, the idea is to manage both &lt;STRONG&gt;subaccount&lt;/STRONG&gt; and &lt;STRONG&gt;instance&lt;/STRONG&gt; level destinations (and/or their certificates) as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;shared&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;configuration resources on a provider subaccount level.&lt;/P&gt;&lt;P&gt;That way, the destinations configurations can be stored as versioned assets in a source repository and need to be maintained only once per provider, thus, without incurring application runtime tie-in.&lt;/P&gt;&lt;P&gt;Last but not least, BTP destination service is used as a self-configuration tool.&lt;/P&gt;&lt;H2 id="toc-hId-798063678"&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#configuration-as-code-cac-quovadis-master" target="_blank" rel="noopener nofollow noreferrer"&gt;Configuration as code with SAP BTP destination service&lt;/A&gt;&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;Table of Contents&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#cac-dest" target="_blank" rel="noopener nofollow noreferrer"&gt;Configuration as code with SAP BTP destination service.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-dest-service" target="_blank" rel="noopener nofollow noreferrer"&gt;create shared destination service instance and binding&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-bootstrap" target="_blank" rel="noopener nofollow noreferrer"&gt;Provision bootstrap destinations.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#get-dest-credentials" target="_blank" rel="noopener nofollow noreferrer"&gt;retrieve destination service credentials from binding&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-bootstrap-payload" target="_blank" rel="noopener nofollow noreferrer"&gt;describe bootstrap destination definitions.&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#apply-payload" target="_blank" rel="noopener nofollow noreferrer"&gt;create bootstrap destinations on subaccount&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#configure-dest" target="_blank" rel="noopener nofollow noreferrer"&gt;Configure destination resources.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#dynamic_dest" target="_blank" rel="noopener nofollow noreferrer"&gt;dynamic_dest route with managed approuter&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#cloud-sdk" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Cloud SDK built-in destinations&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#documentation" target="_blank" rel="noopener nofollow noreferrer"&gt;Documentation.&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;PS.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Bootstrap destinations definitions. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Even, if there is no intrinsic BTP CLI command to assist in creation of destinations from service bindings, this can be achieved quite easily with a bit of jq gimmick by applying service binding credentials to a json payload template, for instance:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "init_data": {
        "subaccount": {
            "destinations": [
                  {
                    "Description": "dest-httpbin",
                    "Type": "HTTP",
                    "clientId": "sb-clone12847c4c89544b4f9234b26ede429f62!b282590|destination-xsappname!b62",
                    "HTML5.DynamicDestination": "true",
                    "HTML5.Timeout": "60000",
                    "Authentication": "OAuth2ClientCredentials",
                    "Name": "dest-httpbin",
                    "tokenServiceURL": "https://&amp;lt;subdomain&amp;gt;.authentication.us10.hana.ondemand.com/oauth/token",
                    "ProxyType": "Internet",
                    "URL": "https://httpbin.org",
                    "tokenServiceURLType": "Dedicated",
                    "clientSecret": "&amp;lt;clientSecret&amp;gt;"
                  },
                  {
                    "Description": "SAP Destination Service APIs",
                    "Type": "HTTP",
                    "clientId": "sb-clone12847c4c89544b4f9234b26ede429f62!b282590|destination-xsappname!b62",
                    "HTML5.DynamicDestination": "true",
                    "HTML5.Timeout": "60000",
                    "Authentication": "OAuth2ClientCredentials",
                    "Name": "destination-service",
                    "tokenServiceURL": "https://&amp;lt;subdomain&amp;gt;.authentication.us10.hana.ondemand.com/oauth/token",
                    "ProxyType": "Internet",
                    "URL": "https://destination-configuration.cfapps.us10.hana.ondemand.com/destination-configuration/v1",
                    "tokenServiceURLType": "Dedicated",
                    "clientSecret": "&amp;lt;clientSecret&amp;gt;"
                  }
            ],
           "certificates": [
           ],

            "existing_certificates_policy": "update",
            "existing_destinations_policy": "update"           
       }
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Alternatively, one could resort to using SAP Cloud SDK built-in &lt;A href="https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#service-binding-environment-variables" target="_self" rel="nofollow noopener noreferrer"&gt;service binding destinations&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;The below nodejs code snippet demonstrates how to leverage&amp;nbsp;SAP Cloud SDK with its service binding destinations with the likes of service manager and destinations services.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: {{ .Values.services.srv.name }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app: {{ .Values.services.srv.name }}
spec:
  runtime: {{ .Values.services.srv.runtime }}
#  runtimeImageOverride: {{ .Values.services.srv.runtimeImageOverride }}
  source:
    inline:
      dependencies: |
        {
          "name": "{{ .Values.services.srv.name }}",
          "version": "0.0.1",
          "dependencies": {
            "axios":"latest"
            ,"debug": "latest"
            ,"@sap/xsenv": "latest"
            ,"@sap-cloud-sdk/http-client": "latest"
            ,"@sap-cloud-sdk/connectivity": "latest"
            ,"@sap-cloud-sdk/resilience": "latest"
            ,"async-retry": "latest"
          }
        }
      source: |
        const debug = require('debug')('{{ .Values.services.srv.name }}:function');
        const NOT_FOUND = 'Not Found';
        const xsenv = require('@sap/xsenv');

        const services = xsenv.getServices({
          sm: { label: 'service-manager', name: 'saas-sm' }
          ,
          dest: { label: 'destination' }

        });
        console.log('saas-sm: ', services.sm);

        const readServices = xsenv.readServices();
        console.log('readServices: ', readServices);

        const httpClient = require('@sap-cloud-sdk/http-client');

        const cloudSdkConnectivity = require('@sap-cloud-sdk/connectivity');
        const { retrieveJwt, decodeJwt, Destination } = require('@sap-cloud-sdk/connectivity');
        const { setGlobalLogLevel, createLogger } = require('@sap-cloud-sdk/util');
        const { retry } = require ('@sap-cloud-sdk/resilience');
        const { resilience } = require ('@sap-cloud-sdk/resilience');
        const ResilienceOptions = {
          retry: 10,
          circuitBreaker: false,
          timeout: 300*1000 // 5 minutes in milliseconds
        };          

        const retryme = require('async-retry');

        setGlobalLogLevel('debug');
        const logger = createLogger('http-logs');

        module.exports = {
          main: async function (event, context) {
            const req = event.extensions.request;

            const message = `Hello World`
              + ` from the Kyma Function ${context['function-name']}`
              + ` running on ${context.runtime}!`
              + ` with the request headers ${JSON.stringify(req.headers,0,2)}`;
            console.log(message);
            
            if (typeof req.path !== undefined) {
              console.log('path: ', JSON.stringify(req.path,0,2))
            }
            if (typeof req.params !== undefined) {
              console.log('params: ', JSON.stringify(req.params,0,2))
            }
            if (typeof req.url !== undefined) {
              console.log('url: ', JSON.stringify(req.url,0,2))
            }
            if (typeof req.authInfo !== undefined) {
              console.log('authInfo: ', JSON.stringify(req.authInfo,0,2))
            }

            const { pathname } = new URL(req.url || '', `https://${req.headers.host}`)
            console.log('pathname: ', pathname)

            const url = require("url");
            var url_parts = url.parse(req.url);
            console.log(url_parts);
            console.log(url_parts.pathname);

            // returns an array with paths
            let path_array = req.url.match('^[^?]*')[0].split('/').slice(1);
            console.log(path_array)

            console.log(req.url.match('^[^?]*')[0])

            if (!path_array?.length) return 'Please use an API verb';  
            const actions = [ 
               { name: 'offerings', verb: 'service_offerings', dest:  'saas-sm', url: '/v1/' },
               { name: 'plans', verb: 'service_plans', dest:  'saas-sm', url: '/v1/'  },
               { name: 'instances', verb: 'service_instances', dest:  'saas-sm', url: '/v1/'  },
               { name: 'bindings', verb: 'service_bindings', dest:  'saas-sm', url: '/v1/'  },
               { name: 'instanceDestinations', verb: 'instanceDestinations', dest:  'faas-dest-x509', url: '/destination-configuration/v1/'  },
               { name: 'subaccountDestinations', verb: 'subaccountDestinations', dest:  'faas-dest-x509' , url: '/destination-configuration/v1/' }
            ];
            
            const action = actions.find( ({ name }) =&amp;gt; name === path_array[1] )
            console.log('action found: ', action)

            if (path_array[0] == 'srv' &amp;amp;&amp;amp;  action !== undefined) {

              path_array = req.url.match('^[^?]*')[0].split('/').slice(2);

              console.log('path_array: ', path_array)

              const queryString = req.query;
              console.log('queryString: ', queryString)
              const urlParams = new URLSearchParams(queryString);

              const params = req.params;
              console.log('params: ', params) 

              try {
                  // https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#service-binding-environment-variables
                  const endpoint =  path_array[1] !== undefined ? '/' + path_array[1] : '';
                  console.log(endpoint)
                  let res = await httpClient.executeHttpRequest({ destinationName: action.dest }, {
                      method: 'GET',
                      url: action.url + action.verb + endpoint
                  });
                  return res.data;
              } catch (err) {
                  console.log(err.stack);
                  return err.message;
              }
              
            }            
          }
        }
   scaleConfig:
    maxReplicas: 5
    minReplicas: 3
  resourceConfiguration:
    function:
      profile: S
  env: ## https://kyma-project.io/docs/kyma/latest/05-technical-reference/00-configuration-parameters/svls-02-environment-variables/#node-js-runtime-specific-environment-variables
    - name: FUNC_TIMEOUT ## Specifies the number of seconds in which a runtime must execute the code.
      value: '1800'
    - name: REQ_MB_LIMIT ## payload body size limit in megabytes.
      value: "10"

    - name: DEBUG
      value: '{{ .Values.services.srv.name }}:*'
    - name: SERVICE_BINDING_ROOT
      value: /bindings
    

  secretMounts: 
    - secretName: {{ .Values.services.sm.bindingSecretName }}
      mountPath: "/bindings/saas-sm"
    - secretName: {{ .Values.services.dest.bindingSecretNamex509 }}
      mountPath: "/bindings/faas-dest-x509"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/configuration-as-code-cac-with-destinations/ba-p/13699003"/>
    <published>2024-05-13T12:54:57.123000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-1-preparations/ba-p/13721026</id>
    <title>Open Sourcing the SAP Cloud SDK for Java: Part 1 - Preparations</title>
    <updated>2024-06-05T16:33:41.214000+02:00</updated>
    <author>
      <name>matthiaskuhr</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/624473</uri>
    </author>
    <content>&lt;P class=""&gt;&lt;SPAN class=""&gt;The &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+SDK/pd-p/73555000100800000895" class="lia-product-mention" data-product="484-1"&gt;SAP Cloud SDK&lt;/a&gt;&amp;nbsp;is a library for developing applications on the SAP Business Technology Platform (BTP). While its &lt;A href="https://github.com/sap/cloud-sdk-js/" target="_blank" rel="noopener nofollow noreferrer"&gt;version for JavaScript&lt;/A&gt; has been open source since 2020, the &lt;A href="https://github.com/SAP/cloud-sdk-java" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN class=""&gt;Java version&lt;/SPAN&gt;&lt;/A&gt; has been open sourced only recently with the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/released-sap-cloud-sdk-for-java-version-5/ba-p/13576668" target="_blank"&gt;&lt;SPAN class=""&gt;release of version 5.0.0&lt;/SPAN&gt;&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;This blog post is&amp;nbsp;&lt;STRONG&gt;first in a series&lt;/STRONG&gt; where I go over the process of how we moved the &lt;STRONG&gt;&lt;A href="https://sap.github.io/cloud-sdk/docs/java/overview-cloud-sdk-for-java" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Cloud SDK for Java&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;from an internal code base and development ecosystem to an &lt;STRONG&gt;&lt;EM&gt;open source project&lt;/EM&gt;&lt;/STRONG&gt; on GitHub. This has been a journey that spun across 10 months and involved a lot of planning, coordination and technical work.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;We started planning the process in the beginning of 2023 and finally released version &lt;STRONG&gt;5.0.0&lt;/STRONG&gt; as the first open source version of the project on December 5th, 2023. Of course, during this time we also worked on other features and improvements for the SDK, but the open source migration was a significant part of our work.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;This first blog post covers some of the non-technical planning and preparation that was necessary to open source the project. Parts &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-2-moving-code/ba-p/13723816" target="_blank"&gt;two&lt;/A&gt; and &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-3-re-building-the-ci-cd/ba-p/13725638" target="_blank"&gt;three&lt;/A&gt; will cover the technical migration steps of the codebase itself and the development ecosystem around it.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1016503424"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":thinking_face:"&gt;🤔&lt;/span&gt;Why Open Source?&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Choosing to open source the SAP Cloud SDK for Java was a strategic decision, aiming for multiple long term benefits:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;First, open sourcing the project makes it easier for all developers to use the library. It allows users to quickly peek into the source code to better understand some implementation, to ask for help on the issues tab of the repository or to contribute themselves.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Second, it also allowed us to modernize and simplify our tools to build the SDK.&lt;/LI&gt;&lt;LI&gt;Last, but not least, it allows us to engage more with the developer community and promotes transparency and trust.&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;These were some of the reasons that ultimately motivated us to take on the challenge of moving the project to open source.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-819989919"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":magnifying_glass_tilted_right:"&gt;🔎&lt;/span&gt;&amp;nbsp;Finding a Starting Point&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;At SAP, we have a dedicated team that helps other teams within SAP open-source their projects: The Open Source Program Office of SAP (OSPO). You can read more about them in this blog post from Michael: &lt;A href="https://community.sap.com/t5/open-source-blogs/managing-open-source-software-with-an-open-source-program-office/ba-p/13516761" target="_blank"&gt;Managing Open Source Software with an Open Source Program Office&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;So, the first step was to get in touch with the OSPO and discuss our plans. They helped us understand the requirements and the necessary steps we'd have to take for going open source.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-623476414"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":person_fencing:"&gt;🤺&lt;/span&gt;&amp;nbsp;Taking the First Steps&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;We started by evaluating which parts of the productive codebase were (not) eligible for open sourcing. The code base had grown since its inception in 2016 and contained some functionality that was either not central to the product, only used internally or legacy code.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;We knew that the core functionality of the SDK (e.g. the destination service integration, the OData APIs, the multi-tenancy and resilience features) could be moved to open source without issues. But there were other parts where it was either not immediately clear, or the functionality was completely SAP-internal and not released to Maven Central.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;We had to deal with two main categories of code that we had to either remove or replace:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Code that contained SAP intellectual property (IP) and was not eligible for open sourcing.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Code that used SAP-internal dependencies.&lt;/LI&gt;&lt;/OL&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Both categories required an extensive review of the codebase, its dependencies and the functionality provided by the code.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;For example, we found that the pre-generated OData clients for &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;were not eligible for open sourcing. In this case we decided that we would deprecate and remove these clients. To make up for this, we instead improved the OData generator which was used to generate these clients, so that users can generate their own version of the clien&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part1-release-notes-vdm-deprecation.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/119301iA6A8E20DCE17DAB9/image-size/large?v=v2&amp;amp;px=999" role="button" title="part1-release-notes-vdm-deprecation.png" alt="part1-release-notes-vdm-deprecation.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;In other cases, we decided to remove modules, but ensure the existing modules of version 4 would be compatible with the new version 5 of the SDK. That way existing users could upgrade to the new version while keeping a select few modules of the old version. But since this approach has some challenges (one has to keep maintaining the old modules and continuously ensure compatibility with the new version), we only applied this for a few select cases that were small but important enough to justify the effort.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Overall, we had to evaluate each impacted feature case by case. That meant getting feedback from existing stakeholders, finding and evaluating any potential alternatives and ultimately making a decision.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;Considering the relatively large code base of version 4 with well over 100 maven modules this was arguably the most challenging part of the open source migration. &lt;STRONG&gt;Overall it took several months until we had a clear picture of what we wanted to open source and what we had to remove or replace.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;However, because this naturally is a process that takes time, we worked on other aspects of the migration in parallel to that.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-426962909"&gt;&lt;SPAN class=""&gt;🧹 Code Cleanup&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;While the future of some parts of the code base where still in discussion, we already prepared the rest of the code base to be moved to an open source repository. For example, this meant removing any internal or personal identifiable information from test code. But also inspecting internal documents and code comments, removing e.g. links to internal tools or documentation, internal IP addresses or other internal information.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;While not strictly necessary in all cases, it was important to us that the code is sensible to all developers, not just SAP internal developers. Having inaccessible links or references to internal tools would make it difficult for open source contributors to understand and contribute to the code.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part1-diff.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/119303iC2F0B3621073FE15/image-size/large?v=v2&amp;amp;px=999" role="button" title="part1-diff.png" alt="part1-diff.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Considering the project contained around 1800 productive classes and equally many test classes together with around 100 other files like Markdown documents, configuration files and scripts, this task also took some time. But after a few weeks and a good bit of search and replace, we were confident that the code base was ready to be open sourced.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-230449404"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":building_construction:"&gt;🏗&lt;/span&gt;Setting up an Open Source Repository&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Now it was time to set up the open source repository. That meant creating a new repository within the &lt;A href="https://github.com/SAP" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP organization on GitHub&lt;/A&gt;. For this process the OSPO team has a &lt;A href="https://github.com/SAP/repository-template" target="_blank" rel="noopener nofollow noreferrer"&gt;repository template&lt;/A&gt; prepared from which new repositories are created.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;As part of the process we added the necessary documents and links: We set the new license to be &lt;STRONG&gt;Apache-2.0&lt;/STRONG&gt;, added the main readme file, drafted our contribution guidelines and linked the code of conduct. The OSPO template navigates you through this process and provides you with a comprehensive checklist as well as any SAP-specific standard texts or references that need to be used.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part1-ospo-template.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/119304i9D89EDD0114A3F10/image-size/large?v=v2&amp;amp;px=999" role="button" title="part1-ospo-template.png" alt="part1-ospo-template.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;But, since this repository so far effectively only contained a readme, we kept it &lt;STRONG&gt;internal&lt;/STRONG&gt; to the SAP organization until we were ready to open source the actual source code. The actual process of moving over the code base is what I will cover in the next part of this series.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-33935899"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":sleeping_face:"&gt;😴&lt;/span&gt;&amp;nbsp;What we didn't have to do&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Before wrapping up I think it's worth mentioning that there were also some things we didn't have to do.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;For example, we didn't have to apply any larger refactorings to deal with functionality we removed or replaced. Most of the code was already structured into maven modules that were independent enough from each other, so that often we could decide on a per-module basis if and how the code should be open-sourced.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;In addition, we already had &lt;STRONG&gt;strong tooling support&lt;/STRONG&gt; set up to ensure that the code base was in a good state overall. This included a comprehensive test suite, but also code scanning tools (e.g. Fortify, Checksytle, PMD etc.) and tools for analyzing dependencies and licenses (e.g. BlackDuck). This made identifying internal dependencies or finding license issues relatively easy.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;And, of course, we had experience from moving the JavaScript variant of the project into open source. We could also refer to other closely related open source projects such as the &lt;A href="https://github.com/SAP/cloud-security-services-integration-library" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP BTP Security Services Integration Libraries&lt;/A&gt; or the &lt;A href="https://github.com/sap/btp-environment-variable-access/" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP BTP Environment Service Binding Access Library&lt;/A&gt;. Together with the help and tools provided by the OSPO team this made the process of moving the Java variant into open source significantly easier.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId--162577606"&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":open_book:"&gt;📖&lt;/span&gt;Conclusion&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Summing up, we had to do quite some planning and preparation to get the &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+SDK/pd-p/73555000100800000895" class="lia-product-mention" data-product="484-2"&gt;SAP Cloud SDK&lt;/a&gt;&amp;nbsp;for Java ready for open sourcing. This was mostly due to the size of the code base and the amount of internal functionality and IP it contained&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;But with the help of the &lt;STRONG&gt;OSPO&lt;/STRONG&gt; team, the experience from open-sourcing the &lt;STRONG&gt;JavaScript&lt;/STRONG&gt; variant and the support from stakeholders we were able to prepare the code base step by step.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;In the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-2-moving-code/ba-p/13723816" target="_blank"&gt;next part&lt;/A&gt; of this series I will cover the actual process of moving the code base to GitHub and the technical challenges we faced during this process.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;What are your experiences with open sourcing projects? Do you have any questions on the process we went through? Leave your thoughts in the comments below!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-1-preparations/ba-p/13721026"/>
    <published>2024-06-05T16:33:41.214000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-2-moving-code/ba-p/13723816</id>
    <title>Open Sourcing the SAP Cloud SDK for Java: Part 2 - Moving Code</title>
    <updated>2024-06-07T09:21:46.497000+02:00</updated>
    <author>
      <name>matthiaskuhr</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/624473</uri>
    </author>
    <content>&lt;DIV&gt;&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+SDK/pd-p/73555000100800000895" class="lia-product-mention" data-product="484-1"&gt;SAP Cloud SDK&lt;/a&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;is a library for developing applications on the SAP Business Technology Platform (BTP). While its&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/sap/cloud-sdk-js/" target="_blank" rel="noopener nofollow noreferrer"&gt;version for JavaScript&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;has been open source since 2020, the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/cloud-sdk-java" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN class=""&gt;Java version&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;has been open sourced only recently with the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/released-sap-cloud-sdk-for-java-version-5/ba-p/13576668" target="_blank"&gt;&lt;SPAN class=""&gt;release of version 5.0.0&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;This blog post is the &lt;STRONG&gt;second of a series&lt;/STRONG&gt; where I go over the process of how we moved the &lt;A href="https://sap.github.io/cloud-sdk/docs/java/overview-cloud-sdk-for-java" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Cloud SDK for Java&lt;/A&gt; from an internal code base and development ecosystem to an &lt;STRONG&gt;open source project&lt;/STRONG&gt; on GitHub.&lt;BR /&gt;&lt;BR /&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-1-preparations/ba-p/13721026" target="_self"&gt;&lt;SPAN&gt;Part one&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;covered the non-technical planning and preparation that was necessary to open source the project. Finally, &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-3-re-building-the-ci-cd/ba-p/13725638" target="_blank"&gt;&lt;SPAN&gt;part three&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;will cover the transformation of the CI/CD pipeline and the surrounding automations.&lt;/P&gt;&lt;H2 id="toc-hId-1016570663"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":chart_increasing:"&gt;📈&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;The Overall Strategy&lt;/H2&gt;&lt;P&gt;Right from the get-go it was clear that we would release a &lt;STRONG&gt;new major version&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;of the SDK once the open source migration was complete. The open source version would come with a new license and significant changes to the feature scope, dropping support for some legacy features and platforms. With the current version being 4.X at the time, we set the goal to release &lt;STRONG&gt;version 5.0.0&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;as the first open source version of the SDK.&lt;/P&gt;&lt;P&gt;Still, we would have to continue developing the current version 4 for some time, at least up until a few weeks before the release of version 5. And even after that, we would have to maintain version 4 and provide bug fixes and security updates for some time.&lt;/P&gt;&lt;P&gt;Next, we had decided to replace our existing (Jenkins) pipelines and related tooling (e.g. for static code checks, dependency updates etc.) in favor of more modern alternatives that are more suitable for open source projects. We decided to completely switch to &lt;A href="https://github.com/features/actions" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;GitHub Actions&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;for our pipelines and automations, and also use other tools provided by GitHub for code quality and security checks (e.g. CodeQL, Dependabot). This would require some time to set up and test.&lt;/P&gt;&lt;P&gt;Finally, we wanted to have a smooth transition with as little downtime to the development process as possible. Ideally, we copy over the code to the new repository and have all the CI/CD tooling and automations in place and working, guaranteeing the same or even better code quality compared to the internal repository.&lt;/P&gt;&lt;H2 id="toc-hId-820057158"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":delivery_truck:"&gt;🚚&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;How We Moved the Code Base&lt;/H2&gt;&lt;P&gt;With these requirements in mind we came up with a plan to move the code base over to the open source repository. It comprised of three steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Copy a representative sample of the code to the open source repository and develop the CI/CD pipelines.&lt;/LI&gt;&lt;LI&gt;Create a v5 branch in the internal repository and develop the open source version in parallel.&lt;/LI&gt;&lt;LI&gt;Move the v5 branch over to the open source repository and press the release button.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Copying a sample allowed us to develop the CI/CD pipeline and all related tooling in parallel to the code development. Also, it allowed us to split the code base as late as possible, reducing the time period where we need to maintain two repositories.&lt;/P&gt;&lt;H2 id="toc-hId-623543653"&gt;&lt;SPAN&gt;🧪 &lt;/SPAN&gt;Creating a Representative Sample&lt;/H2&gt;&lt;P&gt;Once we had created the empty repository on GitHub we copied around 5-10 modules or roughly &lt;STRONG&gt;10 % of the code base&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;over to the open source repository. We carefully chose a subset of the code that we knew would change relatively little in the near future and that would be representative of the whole code base. The code sample was representative in the sense that it included various different kinds of Maven modules: Typical modules that would get shipped as JAR, parent and BOM modules that are used for dependency management, modules that would get shipped as a Maven plugin or Maven archetype and test modules that wouldn't get shipped.&lt;/P&gt;&lt;P&gt;This allowed us to implement our CI/CD pipelines on a subset of the code that would be representative of the whole code base. Also, this meant this work can be done in parallel and completely independent of the development on the internal repository. In the end, the sample code allowed us to fully prepare all CI/CD tooling with a high degree of confidence that once we move over the rest of the code base everything would work as expected.&lt;/P&gt;&lt;H2 id="toc-hId-427030148"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":shuffle_tracks_button:"&gt;🔀&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;Creating a Branch for V5&lt;/H2&gt;&lt;P&gt;We then created a v5 branch in the internal repository and started removing any code that would not be open sourced. We also set up an automation right away that would merge any changes done to v4 automatically into the v5 branch.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part2-git.png" style="width: 527px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/120513i8E74D604270CF074/image-size/large?v=v2&amp;amp;px=999" role="button" title="part2-git.png" alt="part2-git.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;That way we could continue developing the current version 4 without the risk of forgetting to port relevant changes to the v5 branch. Still, maintaining two branches is additional work, so we pushed creating the v5 branch back as far as possible.&lt;/P&gt;&lt;H2 id="toc-hId-230516643"&gt;&lt;span class="lia-unicode-emoji" title=":up_right_arrow:"&gt;↗️&lt;/span&gt;Moving to the Open Source Repository&lt;/H2&gt;&lt;P&gt;Finally, once all changes required for the open source migration on the v5 branch were complete and the open source repository was set up with all required CI/CD tooling, we moved over the v5 branch to the open source repository. This step almost fully replaced the existing code sample we had copied over earlier. Only the parts relevant to the CI/CD setup were kept and merged with the incoming v5 branch.&lt;/P&gt;&lt;P&gt;On the 2nd of October around &lt;STRONG&gt;2500 files&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;were copied over from the internal to the open source repository with &lt;A href="https://github.com/SAP/cloud-sdk-java/pull/83" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;this pull request&lt;/SPAN&gt;&lt;/A&gt;. We implemented the necessary adjustments for the CI/CD pipelines to work on the full code base (e.g. adjusting the thresholds for the code scans and test coverage, adjusting the copied over pom.xml files etc.).&lt;/P&gt;&lt;P&gt;Copying over also meant we would lose the commit history of the code. While technically we could have kept it, it would have contained all the internal code and information we had to remove from the code base. Therefore, we decided to start with a clean commit history in the open source repository.&lt;/P&gt;&lt;P&gt;The process finished on the 4th of October where the pull request was merged and the internal v5 branch archived.&lt;/P&gt;&lt;H2 id="toc-hId-34003138"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":open_book:"&gt;📖&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp; Summing Up&lt;/H2&gt;&lt;P&gt;Overall, we were quite happy with how the move of the code base went. Having the work on pipelines and tooling done independently and in parallel to the development on the internal repository meant we didn't lose any time or sacrifice code quality in the process. It also made it easier to involve other from colleagues outside our development team who had more experience with GitHub Actions and helped us set up the pipelines.&lt;/P&gt;&lt;P&gt;Here is a timeline of the overall process:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part2-timeline.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/120515i852A3CBF3063AEED/image-size/large?v=v2&amp;amp;px=999" role="button" title="part2-timeline.png" alt="part2-timeline.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-3-re-building-the-ci-cd/ba-p/13725638" target="_blank"&gt;third and final part&lt;/A&gt; of this series I will cover how we used GitHub Actions to implement our all our CI/CD pipelines and how we automated the release process.&lt;/P&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-2-moving-code/ba-p/13723816"/>
    <published>2024-06-07T09:21:46.497000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-3-re-building-the-ci-cd/ba-p/13725638</id>
    <title>Open Sourcing the SAP Cloud SDK for Java: Part 3 - Re-Building the CI/CD Automations</title>
    <updated>2024-06-10T14:00:23.734000+02:00</updated>
    <author>
      <name>matthiaskuhr</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/624473</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&amp;nbsp;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+SDK/pd-p/73555000100800000895" target="_blank"&gt;SAP Cloud SDK&lt;/A&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;is a library for developing applications on the SAP Business Technology Platform (BTP). While its&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/sap/cloud-sdk-js/" target="_blank" rel="noopener nofollow noreferrer"&gt;version for JavaScript&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;has been open source since 2020, the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/cloud-sdk-java" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN class=""&gt;Java version&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;has been open sourced only recently with the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/released-sap-cloud-sdk-for-java-version-5/ba-p/13576668" target="_blank"&gt;&lt;SPAN class=""&gt;release of version 5.0.0&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;This blog post is the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;final one of a series&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;where I go over the process of how we moved the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://sap.github.io/cloud-sdk/docs/java/overview-cloud-sdk-for-java" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Cloud SDK for Java&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;from an internal code base and development ecosystem to an&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;open source project&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;on GitHub.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-1-preparations/ba-p/13721026" target="_blank"&gt;Part one&lt;/A&gt; covered the non-technical preparations and planning that were necessary to open source the project. &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-2-moving-code/ba-p/13723816" target="_blank"&gt;Part two&lt;/A&gt; went into the details of how we moved the code base over from an internal repository to the open source repository on GitHub. Finally, &lt;STRONG&gt;this post&lt;/STRONG&gt; will cover the &lt;STRONG&gt;transformation of the CI/CD pipelines&lt;/STRONG&gt; and the surrounding automations.&lt;/P&gt;&lt;H2 id="toc-hId-1016628387"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":index_pointing_up:"&gt;☝️&lt;/span&gt;&lt;/SPAN&gt;Requirements for our CI/CD Automation&lt;/H2&gt;&lt;P&gt;For our internal repository we were using an internal &lt;STRONG&gt;Jenkins&lt;/STRONG&gt; server to run most of our automations. The pipelines had grown over the years and were quite complex:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The main Jenkins pipeline for PR and main branch builds alone had grown to over &lt;STRONG&gt;1k lines of Groovy&lt;/STRONG&gt; code.&lt;/LI&gt;&lt;LI&gt;The release was mostly handled by Python scripts with roughly 1.5k lines of code.&lt;/LI&gt;&lt;LI&gt;The pipelines were integrated with other internal systems and tools.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;It was clear that we had to replace the current setup with a publicly accessible and more modern alternative. We made the decision to completely move to &lt;STRONG&gt;GitHub Actions&lt;/STRONG&gt;. Considering the size of the code base and the high degree of automation this was a significant challenge.&lt;/P&gt;&lt;P&gt;To better understand the solution we went for, let's look at some of the requirements we had for the CI/CD automation:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pull requests&lt;/STRONG&gt; should automatically be built, tested and validated against quality checks (e.g. test coverage, static code checks etc.).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Commits&lt;/STRONG&gt; on the main branch should automatically be deployed to an internal Maven snapshot repository.&lt;/LI&gt;&lt;LI&gt;As part of this, commits on the main branch must also pass all requirements that hold for pull requests plus an additional check on licenses and security vulnerabilities on dependencies.&lt;/LI&gt;&lt;LI&gt;In terms of quality, any commit on the main branch might be released as a productive version.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Releases to Maven Central&lt;/STRONG&gt; should be done using a fully automated pipeline, performing several steps:&lt;/LI&gt;&lt;LI&gt;Release builds must pass all quality checks that hold for commits on the main branch.&lt;/LI&gt;&lt;LI&gt;The release pipeline should automatically increment the version number, create a release tag and publish the release notes and JavaDocs.&lt;/LI&gt;&lt;LI&gt;The pipeline must also distinguish between modules intended for public release and internal test modules which are not to be released.&lt;/LI&gt;&lt;LI&gt;Finally, the release pipeline should automatically deploy all artifacts intended for release to Maven Central.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;These requirements were largely already in place for our internal repository, and it was crucial for us to have the same or even higher levels of quality and automation for the open source repository. Here is how we did it.&lt;/P&gt;&lt;H2 id="toc-hId-820114882"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":bookmark:"&gt;🔖&lt;/span&gt;&lt;/SPAN&gt;Architecture of our GitHub Workflows&lt;/H2&gt;&lt;P&gt;We use several workflows that build on each other to achieve the requirements mentioned above. I'll go through them step by step and explain how we use them to fully automate everything from PR builds to deploying to Maven Central.&lt;/P&gt;&lt;H3 id="toc-hId-752684096"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;The CI Workflow&lt;/H3&gt;&lt;P&gt;At the heart of our CI/CD automation is the &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/.github/workflows/continuous-integration.yaml" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;continuous-integration&lt;/SPAN&gt;&amp;nbsp;workflow&lt;/A&gt;. It is triggered on every pull request and comprises multiple jobs, from building the code to running tests and quality checks.&lt;BR /&gt;&lt;BR /&gt;Here is a simplified excerpt from the &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/.github/workflows/continuous-integration.yaml#L102" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;build job&lt;/SPAN&gt;&lt;/A&gt;:&lt;/P&gt;&lt;DIV&gt;&lt;PRE&gt;&lt;SPAN&gt;build:&lt;/SPAN&gt;
  &lt;SPAN&gt;name: "Build"&lt;/SPAN&gt;
  &lt;SPAN&gt;needs: [ context, check-formatting ]&lt;/SPAN&gt;
  &lt;SPAN&gt;runs-on: ubuntu-latest&lt;/SPAN&gt;
  &lt;SPAN&gt;steps:&lt;/SPAN&gt;
    &lt;SPAN&gt;- name: "Checkout repository"&lt;/SPAN&gt;
      &lt;SPAN&gt;uses: actions/checkout@v4&lt;/SPAN&gt;
      &lt;SPAN&gt;# ...&lt;/SPAN&gt;
    &lt;SPAN&gt;- name: "Setup java"&lt;/SPAN&gt;
      &lt;SPAN&gt;uses: actions/setup-java@v4&lt;/SPAN&gt;
      &lt;SPAN&gt;# ...&lt;/SPAN&gt;
    &lt;SPAN&gt;- name: "Restore Dependencies"&lt;/SPAN&gt;
      &lt;SPAN&gt;id: restore-dependencies&lt;/SPAN&gt;
      &lt;SPAN&gt;uses: actions/cache/restore@v4&lt;/SPAN&gt;
      &lt;SPAN&gt;# ...&lt;/SPAN&gt;
    &lt;SPAN&gt;- name: "Build SDK"&lt;/SPAN&gt;
      r&lt;SPAN&gt;un: |&lt;/SPAN&gt;
        &lt;SPAN&gt;MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} install -DskipTests -DskipFormatting"&lt;/SPAN&gt;
        &lt;SPAN&gt;# ...&lt;/SPAN&gt;
        &lt;SPAN&gt;echo "[DEBUG] Running Maven with following arguments: $MVN_ARGS"&lt;/SPAN&gt;
        &lt;SPAN&gt;mvn $MVN_ARGS&lt;/SPAN&gt;
&lt;SPAN&gt;    - name: "Cache Dependencies"&lt;/SPAN&gt;
&lt;SPAN&gt;      if: ${{ steps.restore-dependencies.outputs.cache-hit != 'true' }}&lt;/SPAN&gt;
      &lt;SPAN&gt;uses: actions/cache/save@v4&lt;/SPAN&gt;
    &lt;SPAN&gt;# ...&lt;/SPAN&gt;
&lt;SPAN&gt;  # ..&lt;/SPAN&gt;  &lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;This is how it looks like when triggered on a pull request:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part3-pr-build.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/121302i3F805B11486D507D/image-size/large?v=v2&amp;amp;px=999" role="button" title="part3-pr-build.png" alt="part3-pr-build.png" /&gt;&lt;/span&gt;&lt;BR /&gt;Aside from the typical &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and &lt;EM&gt;test&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;jobs you can see some of the tools we use to ensure code quality, such as CodeQL, Checkstyle, PMD and SpotBugs. Some other tools such as BlackDuck are shown but disabled for pull request builds. You'll also notice that the workflow is designed to fail fast, having fast running jobs at the beginning and more time-consuming jobs in parallel or at a later stage, wherever possible.&lt;/P&gt;&lt;P&gt;Finally, you'll notice the &lt;EM&gt;Collect Context&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job at the start of the workflow. This becomes relevant later when we look at how we use the CI workflow for builds on the main branch and releases.&lt;/P&gt;&lt;P&gt;The details of the individual jobs such as &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and &lt;EM&gt;test&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;contain much more than what is shown in the diagram. I'll explain some of the tips and tricks we used to get them to work efficiently and reliably further down in this post. For now, let's move on to how we use the CI workflow for builds on the main branch and releases.&lt;/P&gt;&lt;H3 id="toc-hId-556170591"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":camera_with_flash:"&gt;📸&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;The Main Branch Workflow&lt;/H3&gt;&lt;P&gt;The &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/.github/workflows/main-build.yaml" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;main build&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;is triggered by commits on the main branch. In addition to running the same checks as on pull requests, it should also run a BlackDuck scan and deploy the current snapshot to an internal Maven repository.&lt;/P&gt;&lt;P&gt;This is how it looks like when triggered on the main branch:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part3-main-build.png" style="width: 964px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/121305iAA3BF2A0B6C98B92/image-size/large?v=v2&amp;amp;px=999" role="button" title="part3-main-build.png" alt="part3-main-build.png" /&gt;&lt;/span&gt;As you can see, the main build triggers the CI workflow and runs the deployment afterward. When triggering the CI workflow it passes a parameter to inform the workflow it should also run the BlackDuck scan. Finally, in case the workflow fails it also sends a Slack notification to the development team.&lt;/P&gt;&lt;H3 id="toc-hId-359657086"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":package:"&gt;📦&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;The Release Workflow&lt;/H3&gt;&lt;P&gt;We are using a two-step process for releasing to Maven Central, comprised of two workflows: &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/.github/workflows/prepare-release.yaml" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;prepare-release&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;and &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/.github/workflows/perform-release.yml" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;perform-release&lt;/SPAN&gt;&lt;/A&gt;. Both workflows are triggered manually and are designed to provide as much automation while being as reliable as possible.&lt;/P&gt;&lt;P&gt;The &lt;EM&gt;prepare-release&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;workflow first creates a branch for the release and increments the projects version to the desired release version. Then it triggers the CI workflow on the commit with the release version set and with additional parameters to sign the produced artifacts with a GPG key and enable JavaDoc generation.&lt;/P&gt;&lt;P&gt;Once the CI build completes, it creates a release tag, a draft release and pull requests for the release notes and JavaDocs. Finally, if all steps succeeded, it increases the version number again to the next snapshot version and raises a pull request on the code base. If any of the steps failed the workflow will roll back the changes.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part3-prepare-release.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/121310iF8ACC0BFC321D7DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="part3-prepare-release.png" alt="part3-prepare-release.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If everything looks good we trigger the &lt;EM&gt;perform-release&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;workflow which will deploy the artifacts to Maven Central and merge the open pull requests.&lt;/P&gt;&lt;P&gt;This two-step approach allows us to ensure everything is in place and functional before actually deploying the new version. For example, we can tweak the release notes or the GitHub release description while still having the process fully automated. And in case anything goes wrong it is much easier to fix it, compared to having one large release pipeline.&lt;/P&gt;&lt;H2 id="toc-hId-34060862"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":magnifying_glass_tilted_right:"&gt;🔎&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;The Details of GitHub Actions and our Maven Project&lt;/H2&gt;&lt;P&gt;Now that you have an idea of how the overall architecture of our GitHub workflows looks like, let's dive into some of the details of the workflows. Please keep in mind that this part is somewhat specific to building larger &lt;STRONG&gt;Java&lt;/STRONG&gt; projects using &lt;STRONG&gt;Maven&lt;/STRONG&gt;.&lt;/P&gt;&lt;H3 id="toc-hId--33369924"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":open_file_folder:"&gt;📂&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;Keeping Track of Build Artifacts&lt;/H3&gt;&lt;P&gt;We are using several jobs in our workflows that depend on each other. For example, the &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job produces the artifacts that are then used in the &lt;EM&gt;test&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job.&lt;/P&gt;&lt;P&gt;Now, for this to work one has to share the artifacts produced in the &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job with the &lt;EM&gt;test&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job. This turned out to not be as straightforward as one might think. Some tasks would require the compiled classes (e.g. running tests), others would require the JAR files (e.g. the signing step) and others would require the JARs to be installed in the local Maven repository (e.g. the archetype test stage).&lt;/P&gt;&lt;P&gt;We solved this by using the &lt;A href="https://github.com/actions/upload-artifact" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;upload-artifact&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;and &lt;A href="https://github.com/actions/download-artifact" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;download-artifact&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;actions. We configured them to upload all &lt;FONT face="courier new,courier"&gt;./**/target/**&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;directories produced by the &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job. We also upload the part of the local Maven repository that contains our own artifacts (&lt;FONT face="courier new,courier"&gt;~/.m2/repository/com/sap/cloud/sdk/**&lt;/FONT&gt;). Subsequent jobs that require these artifacts download them.&lt;/P&gt;&lt;P&gt;To speed up build times we also use a cache for our dependencies. That means dependencies don't have to be re-downloaded for every build, which speeds up the build significantly. However, because our own artifacts are also installed into the local Maven repository, we have to be careful to exclude them from this cache. Otherwise, build results from previous builds would leak into subsequent runs. So we use exclusion patterns when setting up the cache to exclude our own artifacts.&lt;/P&gt;&lt;H3 id="toc-hId--229883429"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":repeat_button:"&gt;🔁&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;Dealing with the Maven Build Lifecycle&lt;/H3&gt;&lt;P&gt;Maven has a well-defined &lt;A href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;build lifecycle&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;where each phase builds on the previous phase. This becomes a bit of a challenge if you have a larger project and want to separate out individual build steps.&lt;/P&gt;&lt;P&gt;For example, running &lt;FONT face="courier new,courier"&gt;mvn compile&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in one job, uploading the artifacts, then downloading them and running &lt;FONT face="courier new,courier"&gt;mvn test&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in another job would internally run the &lt;EM&gt;compile&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;phase again. This happens because uploading and downloading the artifacts affects the file timestamps and Maven considers the files to be outdated.&lt;/P&gt;&lt;P&gt;In addition, we are using a lot of Maven plugins to verify various aspects of our code base. We are using multiple formatting plugins, static code analysis plugins, test coverage plugins, dependency analyzers and more. To speed up the build process and to fail fast we want to run these checks as early as possible and in parallel.&lt;/P&gt;&lt;P&gt;To solve this, we are invoking the plugins explicitly in their dedicated jobs (e.g. formatting and code style analysis). For the &lt;EM&gt;build&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;job we run &lt;FONT face="courier new,courier"&gt;mvn install&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and exclude tests as well as any plugins that run elsewhere via specific properties. Finally, the &lt;EM&gt;test&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;stage invokes the Maven surefire plugin and the code coverage plugin directly to avoid recompiling the code.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part3-test.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/121364iA98EF721D01D68AD/image-size/large?v=v2&amp;amp;px=999" role="button" title="part3-test.png" alt="part3-test.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;While saving a few minutes of build time, this also gives us the flexibility to turn individual checks on or off. Last, but not least, splitting the build process into individual jobs makes it much easier to see where a build failed and why.&lt;/P&gt;&lt;P&gt;However, this requires a good understanding of your Maven project and how you have configured your profiles and plugins.&lt;/P&gt;&lt;H3 id="toc-hId--426396934"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":pushpin:"&gt;📌&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;Keeping Track of which Artifacts to Release&lt;/H3&gt;&lt;P&gt;The Cloud SDK is a multi-module Maven project with several modules that are not intended for public release. For example, we have modules like &lt;FONT face="courier new,courier"&gt;testutil&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;or &lt;FONT face="courier new,courier"&gt;odata-api-sample&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that are only used for testing. When releasing to Maven Central we want to make sure that only modules that are intended for public release are actually deployed. This can be achieved using Maven profiles, for example by listing the test modules only under a certain profile.&lt;/P&gt;&lt;P&gt;But we found that this solution isn't reliable enough for our purposes. For example, a profile may be forgotten to be (de-) activated within any of the various steps in our build pipeline. Or, if a module is moved or renamed, one has to be extra careful the profile continues to apply after the refactoring.&lt;/P&gt;&lt;P&gt;To solve this, we are using a custom script that builds and verifies the &lt;A href="https://github.com/SAP/cloud-sdk-java/blob/main/module-inventory.json" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;module-inventory.json&lt;/SPAN&gt;&lt;/A&gt; file. It contains a list of all modules, their intended release scope as well as further information (e.g. if it requires a license and security scan, or if the module is in beta, production ready or deprecated). This information is explicitly declared via properties in each module's &lt;FONT face="courier new,courier"&gt;pom.xml&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;file and thus immediately visible to anyone working on the project.&lt;BR /&gt;Any changes would be detected by the CI pipeline and the build would fail if the &lt;FONT face="courier new,courier"&gt;module-inventory.json&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;has not been updated accordingly.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="part3-module-inventory.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/121365i8DF7ABF880E502EF/image-size/large?v=v2&amp;amp;px=999" role="button" title="part3-module-inventory.png" alt="part3-module-inventory.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Finally, the release pipeline uses the &lt;FONT face="courier new,courier"&gt;module-inventory.json&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;to determine which modules to release and deploys exactly those artifacts.&lt;/P&gt;&lt;H2 id="toc-hId--751993158"&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;Challenges and Learnings&lt;/H2&gt;&lt;P&gt;One of the challenges we faced was how to develop and test the workflows. GitHub Actions can not be easily re-ran or debugged locally, each change in a workflow file has to be committed and pushed to the repository. But we didn't want to spam our repositories with commits, tags, releases and pull requests during the development phase. Furthermore, we didn't want to publish any artifacts to Maven Central during the development and testing phase. Still, we wanted to test the release pipeline as close to the real process as possible.&lt;/P&gt;&lt;P&gt;To solve the first issue we used &lt;STRONG&gt;forks&lt;/STRONG&gt; of the repository for developing and testing the workflows until they were close enough to the final version. Some of the larger changes required &lt;STRONG&gt;200-300 commits&lt;/STRONG&gt; until we got the desired result (for example, see &lt;A href="https://github.com/SAP/cloud-sdk-java/pull/259" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;this PR&lt;/SPAN&gt;&lt;/A&gt;). When merging we squashed everything into a single commit to not clutter the version history.&lt;/P&gt;&lt;P&gt;Also, we limited pipeline steps to only a few lines of shell commands per step. For anything more complex (e.g. generating a JSON file, generating a test report XML file, etc.) we created &lt;SPAN&gt;&lt;A href="https://github.com/SAP/cloud-sdk-java/tree/main/.pipeline/scripts" target="_blank" rel="noopener nofollow noreferrer"&gt;Python scripts&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;that could be tested independently on a local machine. Finally, we tested our release automation by deploying snapshots to the &lt;SPAN&gt;&lt;A href="https://s01.oss.sonatype.org/content/repositories/snapshots/" target="_blank" rel="noopener nofollow noreferrer"&gt;Sonatype snapshot repository&lt;/A&gt;&lt;/SPAN&gt;. This also allowed us to give SAP-external developers access to a release candidate for testing.&lt;/P&gt;&lt;H2 id="toc-hId--601252306"&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":open_book:"&gt;📖&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;Conclusion&lt;/H2&gt;&lt;P&gt;After several iterations and a lot of testing we now have fully automated CI/CD pipelines that meet our requirements. Using GitHub Actions we were able to replace our complex Jenkins setup with a modern and publicly accessible alternative. That enables also SAP-external developers to contribute to the project and accelerates the development of the SAP Cloud SDK for Java.&lt;/P&gt;&lt;P&gt;That concludes this series on open sourcing the SAP Cloud SDK for Java. Please don't hesitate to share your thoughts on the migration process or what you may have done differently. How do you build your Java projects with GitHub Actions? Do you also use multiple workflows and jobs, do you use re-usable workflows or custom actions? Or do you have one large workflow that does everything? As usual, let me know in the comments below &lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&lt;/SPAN&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/open-sourcing-the-sap-cloud-sdk-for-java-part-3-re-building-the-ci-cd/ba-p/13725638"/>
    <published>2024-06-10T14:00:23.734000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/custom-spring-boot-application-in-sap-btp-cf-integrates-with-btp-document/ba-p/13797941</id>
    <title>Custom Spring Boot  application in SAP BTP CF integrates with BTP Document Management Service(DMS</title>
    <updated>2024-08-17T01:58:19.050000+02:00</updated>
    <author>
      <name>Sudhir_Lenka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/208695</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The&amp;nbsp;SAP BTP Document Management Service(DMS)&amp;nbsp;helps in managing business documents. It's based on the OASIS (Organization for the Advancement of Structured Information Standards) industry standard CMIS (Content Management Interoperability Services) and includes features like versioning, hierarchies, access control, and document management.&lt;/P&gt;&lt;P&gt;In this blog, I am going to explain how to create a custom spring boot application in SAP BTP cloud foundry and integrate it with SAP BTP DMS.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Business Scenario&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Let’s say we have a requirement where we need to replicate documents from different SAP SaaS applications(e.g. &amp;nbsp;SAP SuccessFactors) to SAP BTP Document Management Service. In this case, we can create a custom Java Spring Boot application and deploy it to BTP Cloud Foundry as an MTA(multi-target application). Spring Boot application can have scheduled Cron Jobs(if there is any need for automation) or REST APIs(to be triggered from UI and any other application) to interact with DMS rest APIs and SuccessFactors.&lt;/P&gt;&lt;P&gt;Or if you have a custom application, and you want to use SAP BTP DMS for document management then this example will be helpful.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Technical Details&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;In this blog, I will create a maven-based spring boot application(MTA) and will expose a REST API that will upload a document in the DMS. &amp;nbsp;Spring Boot application will interact with DMS REST API through BTP destinations. The main reason for using BTP destinations is the DMS authentication will be taken care of by BTP destinations.&amp;nbsp; I will be using SAP Cloud SDK to interact with BTP Destinations from Spring Boot.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Architecture&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_0-1723849924131.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153370iF60976361FC98564/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_0-1723849924131.png" alt="sudhiranjan_lenka_0-1723849924131.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite &lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Access to SAP BTP Cloud Foundry, and org &amp;amp; space are created.&lt;/LI&gt;&lt;LI&gt;Access to BTP destination.&lt;/LI&gt;&lt;LI&gt;Access to SAP BTP DMS service and DMS repository is created.&lt;/LI&gt;&lt;LI&gt;Eclipse(with Spring tool suite and Lombok plugin) and JDK(1.8) are installed in the development system.&lt;/LI&gt;&lt;LI&gt;Cloud Foundry command line interface (CF CLI) is installed, and the path is set in the environment variable.&lt;/LI&gt;&lt;LI&gt;Cloud MTA build tool (MBT) is installed, and the path is set in the environment variable.&lt;/LI&gt;&lt;LI&gt;Make tool is installed, and the path is set in the environment variable.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Create a destination in SAP BTP for DMS service&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_1-1723849924142.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153368iEFDD16C8913FC300/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_1-1723849924142.png" alt="sudhiranjan_lenka_1-1723849924142.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Please make sure the URL contains the repository ID and folder name(if no folder is created in the repository, then use root)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Steps to create the Application&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a maven based spring boot project in Eclipse.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_2-1723849924148.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153369i4E4B038C9156DD53/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_2-1723849924148.png" alt="sudhiranjan_lenka_2-1723849924148.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the pom.xml file and replace it with the below code.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
	&amp;lt;/parent&amp;gt;
	&amp;lt;groupId&amp;gt;com.sl&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;SampleSAPBTPApplication&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;name&amp;gt;SampleSAPBTPApplication&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;Sample SAP BTP App with Spring Boot&amp;lt;/description&amp;gt;
	&amp;lt;url/&amp;gt;
	&amp;lt;licenses&amp;gt;
		&amp;lt;license/&amp;gt;
	&amp;lt;/licenses&amp;gt;
	&amp;lt;developers&amp;gt;
		&amp;lt;developer/&amp;gt;
	&amp;lt;/developers&amp;gt;
	&amp;lt;scm&amp;gt;
		&amp;lt;connection/&amp;gt;
		&amp;lt;developerConnection/&amp;gt;
		&amp;lt;tag/&amp;gt;
		&amp;lt;url/&amp;gt;
	&amp;lt;/scm&amp;gt;
	&amp;lt;properties&amp;gt;
		&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
		&amp;lt;swagger.version&amp;gt;2.9.2&amp;lt;/swagger.version&amp;gt;
	&amp;lt;/properties&amp;gt;
	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;

		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.sap.cloud.sdk.cloudplatform&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;scp-cf&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;3.46.0&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-web-services&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
		        &amp;lt;dependency&amp;gt;
		    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
		    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
		    &amp;lt;version&amp;gt;4.5.10&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
		    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
		    &amp;lt;artifactId&amp;gt;httpmime&amp;lt;/artifactId&amp;gt;
		    &amp;lt;version&amp;gt;4.5.10&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${swagger.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${swagger.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-bean-validators&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${swagger.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

	&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a Java class and replace the code with the below code (please check the package and class name).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package com.sl.demo.api;

import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sap.cloud.sdk.cloudplatform.connectivity.DestinationAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestination;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
public class BTPDMSService {

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	/**
	 * Attaches a generic file to an existing work.
	 */
	@RequestMapping(method = RequestMethod.POST, path = "/uploadFile", produces = "application/json", consumes = "multipart/form-data")
	@ApiOperation(value = "Attaches a generic file to an existing work.")
	@ApiResponses({ @ApiResponse(code = 200, message = "OK", responseContainer = "Map", response = Long.class),
			@ApiResponse(code = 400, message = "Bad request"),
			@ApiResponse(code = 401, message = "Unauthorized, basic auth required"),
			@ApiResponse(code = 403, message = "Forbidden") })
	public String uploadFile(@RequestParam("attachment") MultipartFile file) throws IOException {

		log.info("Upload file started");

		String DESTINATION_NAME = "MyDestinationForDMS";
		byte[] content = file.getBytes();
		String filename = file.getOriginalFilename();
		String contentType = file.getContentType();

		HttpDestination destination = DestinationAccessor.getDestination(DESTINATION_NAME).asHttp();
		HttpClient httpclient = HttpClientAccessor.getHttpClient(destination);

		MultipartEntityBuilder builder = MultipartEntityBuilder.create();

		log.info("Uploading file : {}", filename);
		builder.addTextBody("cmisaction", "createDocument");
		builder.addTextBody("propertyId[0]", "cmis:name");
		builder.addTextBody("propertyValue[0]", "testSudhir01.json");
		builder.addTextBody("propertyId[1]", "cmis:objectTypeId");
		builder.addTextBody("propertyValue[1]", "cmis:document");
		builder.addTextBody("filename", "testSudhir01");
		builder.addTextBody("_charset_", "UTF-8");
		builder.addTextBody("includeAllowableAction", "true");
		builder.addTextBody("succinct", "true");
		builder.addBinaryBody("media", content, ContentType.create(contentType), filename);

		HttpEntity postData = builder.build();
		HttpPost httpPost = new HttpPost();
		httpPost.setEntity(postData);
		HttpResponse response = httpclient.execute(httpPost);
		HttpEntity entity = response.getEntity();
		log.info("Response from post File: {}", response.getStatusLine().getStatusCode());
		log.info("******** Response Body **********: {}", EntityUtils.toString(entity));

		return "Executed with status Code:" + response.getStatusLine().getStatusCode();
	}

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a Java class for swagger config and replace the code with the below code.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package com.sl.demo.swagger;

import java.util.Collections;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
@Import(BeanValidatorPluginsConfiguration.class)
public class SpringFoxConfig {

	String appTitle = "DMS Integration";

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()
				.apis(RequestHandlerSelectors.basePackage(parentPackageName())).paths(PathSelectors.ant("/**")).build();
	}

	private String parentPackageName() {
		String thisPackageName = getClass().getPackage().getName();
		int lastDotPos = thisPackageName.lastIndexOf('.');
		String parentPackageName = thisPackageName.substring(0, lastDotPos);
		return parentPackageName;
	}

	private ApiInfo apiInfo() {
		return new ApiInfo(appTitle + " API", "This is the API for the " + appTitle + " application.", "v1", null,
				new Contact("SL", "", "test@sl.com") , null, null,
				Collections.EMPTY_LIST);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a mta.yaml file in the workspace (where the project is created) and paste the below code into the mta.yaml file.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;_schema-version: '3.0.0'
ID: com.sl.sampleApplication
description: Sample Application
version: 1.0.0
modules:
  - name: SampleSAPBTPApplication
    type: java
    path: SampleSAPBTPApplication
    parameters:
        stack: cflinuxfs4
        memory: 2048M
        instances: 1
        buildpacks:
           - java_buildpack
        build-parameters:
             builder: custom
             timeout: 10m
             build-result: target/SampleSAPBTPApplication-*.jar
             commands:
               - mvn clean install -Dcheckstyle.skip -DskipTests=true -Pdev
    requires:
      - name: BTPDestinationResource
# Binding services
resources:
  - name: BTPDestinationResource
    type: org.cloudfoundry.managed-service
    parameters:
      service-name: MyDestinationInstance
      service-plan: lite
      service: destination&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Select the project in Eclipse and update(Maven) the project, please make sure there is no compilation error.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Build and Deployment&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the command prompt from the workspace(where the mta.yaml file is placed) folder.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_3-1723849924151.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153371iEE9D70672D4FCF75/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_3-1723849924151.png" alt="sudhiranjan_lenka_3-1723849924151.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Build the project to generate the “.tar” file by using the below command in the command prompt.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mbt build -t SampleSAPBTPApplication/generatedTAR --mtar SampleApplication.tar&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_14-1723850889798.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153382iF4367952BF1FBC95/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_14-1723850889798.png" alt="sudhiranjan_lenka_14-1723850889798.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_15-1723850889809.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153383i2512DA499064AB0D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_15-1723850889809.png" alt="sudhiranjan_lenka_15-1723850889809.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;If the build is successful, then SampleApplication.tat file will be created in the generatedTAR folder.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_16-1723850889814.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153385i0024FDD45B525F61/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_16-1723850889814.png" alt="sudhiranjan_lenka_16-1723850889814.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Use the below commands in the command prompt to log in to the BTP cloud foundry and deploy the project. (It will prompt you to enter the username and password for BTP. it will prompt you to select org and space if there is more than one)&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf login -a https://api.&amp;lt;CF API host&amp;gt;.hana.ondemand.com&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf deploy SampleSAPBTPApplication/generatedTAR/SampleApplication.tar&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_17-1723850889821.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153384iDDAE77DDA558A756/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_17-1723850889821.png" alt="sudhiranjan_lenka_17-1723850889821.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Once the deployment is successful, it will be shown in the applications under the space.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_18-1723850889828.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153386i996A0A5DB7EA93C7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_18-1723850889828.png" alt="sudhiranjan_lenka_18-1723850889828.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;If everything is fine, then the status will be showing as started and the application can be accessed by using the URL shown under application routes.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_19-1723850889838.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153387iC5D3BE1A8AFC232D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_19-1723850889838.png" alt="sudhiranjan_lenka_19-1723850889838.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Testing&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The application can be tested by using the swagger URL from the application as mentioned below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;A target="_self"&gt;https://&amp;lt;app URL-dev-samplesapbtpapplication.hana.ondemand.com&amp;gt;/swagger-ui.html&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_20-1723850889848.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153388i95EB14867AFC8AD3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_20-1723850889848.png" alt="sudhiranjan_lenka_20-1723850889848.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Click on “/uploadFile” API to test the file upload functionality.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_21-1723850889852.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153389i4B18B07BD432EA0E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_21-1723850889852.png" alt="sudhiranjan_lenka_21-1723850889852.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Choose any file and click on “Execute”.&lt;/LI&gt;&lt;LI&gt;If everything is fine, then the file will be uploaded to DMS and can be found in DMS.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sudhiranjan_lenka_22-1723850889857.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/153390i775033C99615072B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sudhiranjan_lenka_22-1723850889857.png" alt="sudhiranjan_lenka_22-1723850889857.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This blog is written based on my learning and understnading, please feel free to comment for the improvement.&amp;nbsp; Same thing can be achieved by creating a CAP appllication, in the next blog I will explain how to achieve the same requirement through a CAP (Java) application.&lt;/P&gt;&lt;P&gt;If anybody is interested for the code, please feel free to pull it from git.&lt;/P&gt;&lt;P&gt;&lt;A title="MTASpringBootIntegratesDMS" href="https://github.com/sudhirlenkagit/MTASpringBootIntegratesDMS.git" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/sudhirlenkagit/MTASpringBootIntegratesDMS.git&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thanks,&lt;/P&gt;&lt;P&gt;Sudhir Lenka.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/custom-spring-boot-application-in-sap-btp-cf-integrates-with-btp-document/ba-p/13797941"/>
    <published>2024-08-17T01:58:19.050000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-cloud-integration-api-collection-of-odata-clients-using-js-ts-and-sap/ba-p/13810288</id>
    <title>SAP Cloud Integration API - Collection of OData Clients using JS/TS and SAP Cloud SDK</title>
    <updated>2024-09-02T15:20:00.706000+02:00</updated>
    <author>
      <name>GiuseppeMP</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1645393</uri>
    </author>
    <content>&lt;H1 id="toc-hId-915098654"&gt;TL;DR&lt;/H1&gt;&lt;P&gt;Hey everyone, I'm a very new developer in the SAP ecosystem and I want to share some stuff.&lt;/P&gt;&lt;P&gt;To consume the SAP Cloud Integration APIs from JS/TS, you must install the SAP Cloud SDK and utilize the generated clients. It is necessary to properly configure tsconfig when using Typescript, which can be challenging as it may not always be compatible with your project.&lt;/P&gt;&lt;P&gt;(Trying to write down a entire client using axios is really painful)&lt;/P&gt;&lt;P&gt;Additionally, these files begin to appear in every project, leading to unnecessary boilerplate in many repositories within SAP projects.&lt;/P&gt;&lt;P&gt;Now you can simply run `npm install ts-sap-cloud-odata-api-v2-client` and start using the generated clients immediately without any stress.&lt;/P&gt;&lt;P&gt;Read more: &lt;A href="https://sap.github.io/cloud-sdk/docs/js/getting-started" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/getting-started&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Process followed: &lt;A href="https://sap.github.io/cloud-sdk/docs/js/features/odata/generate-client" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/features/odata/generate-client&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-847667868"&gt;Features&lt;/H2&gt;&lt;P&gt;I've just generated clients for the &lt;A href="https://api.sap.com/package/CloudIntegrationAPI/odata" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/package/CloudIntegrationAPI/odata&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Before moving forward, please pay attention to this: &lt;A href="https://github.com/GiuseppeMP/sap-cloud-integration-odata-api-v2-clients?tab=readme-ov-file#-disclaimer-" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/GiuseppeMP/sap-cloud-integration-odata-api-v2-clients?tab=readme-ov-file#-disclaimer-&lt;/A&gt; &lt;span class="lia-unicode-emoji" title=":folded_hands:"&gt;🙏&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-651154363"&gt;Install&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i ts-sap-cloud-odata-api-v2-client&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H2 id="toc-hId-454640858"&gt;Dependencies&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i -cloud-sdk/connectivity #required
npm i -cloud-sdk/odata-v2 #optional&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H2 id="toc-hId-258127353"&gt;Usage&lt;/H2&gt;&lt;P&gt;Now you can simply use the generated clients in your code. The entire interface was kept from the SDK, and you can refer to the &lt;A href="https://sap.github.io/cloud-sdk/docs/js/getting-started" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/getting-started&lt;/A&gt; to learn more.&lt;/P&gt;&lt;P&gt;&lt;A href="https://sap.github.io/cloud-sdk/docs/js/features/odata/execute-request" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/features/odata/execute-request&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;Each client is isolated in a module that can be imported using `'ts-sap-cloud-odata-api-v2-client/{APINAME}'`.&lt;BR /&gt;This is necessary to avoid conflicts with other modules as they are all generated separately.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example that how I'm using&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import {messageProcessingLogs, MessageProcessingLogsType } from 'ts-sap-cloud-odata-api-v2-client/MessageProcessingLogs'
import { registerDestination } from '@sap-cloud-sdk/connectivity'

async function example(name: string, url: string) {

await registerDestination(
{
name: name, // choose name
url: url // add url to your tenant
},
);

const basePath = "/api/v1" // change if needed

const requestBuilder = messageProcessingLogs&amp;lt;MessageProcessingLogsType&amp;gt;().messageProcessingLogsApi.requestBuilder().getAll()

const getAll = requestBuilder.setBasePath(basePath).addCustomHeaders({ 'authorization': `Bearer ...` })

return getAll.execute({ destinationName: name })
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-190696567"&gt;Show your support&lt;/H3&gt;&lt;P&gt;Give a &lt;span class="lia-unicode-emoji" title=":star:"&gt;⭐&lt;/span&gt;️ if this project helped you!&lt;/P&gt;&lt;P&gt;If you would like to ask about features, other API clients, report bugs, or seek help, please feel free to create an issue in the GitHub repository.&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/GiuseppeMP/sap-cloud-integration-odata-api-v2-clients/issues/new" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/GiuseppeMP/sap-cloud-integration-odata-api-v2-clients/issues/new&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;It's a very new repository, I really appreciate feedback and collaborations folks!&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;See you!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-cloud-integration-api-collection-of-odata-clients-using-js-ts-and-sap/ba-p/13810288"/>
    <published>2024-09-02T15:20:00.706000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/build-a-java-spring-boot-middleware-application-to-consume-sap-odata/ba-p/13858588</id>
    <title>Build a Java Spring boot middleware application to consume SAP OData service with SAP Cloud SDK</title>
    <updated>2024-09-08T01:45:30.799000+02:00</updated>
    <author>
      <name>Sudhir_Lenka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/208695</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We had a requirement to consume a SAP OData service in an existing spring boot application running on SAP BTP Cloud Foundry. There are many ways to consume an OData service in a Java application, but we found an easier way to consume the OData service by using SAP Cloud SDK. There are many business use cases where we need to develop an application to run on SAP BTP or any cloud and consume OData service. &amp;nbsp;In this blog, I will share the steps to consume an OData service in a maven-based Java Spring boot application with the help of SAP Cloud SDK.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Understanding SAP Cloud SDK&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP provides a software development kit (SDK) called the SAP Cloud SDK to make developers' jobs easier. The SDK contains a set of libraries that simplify interacting with APIs at a higher level by hiding technical communication details.&lt;/P&gt;&lt;P&gt;The SAP Cloud SDK was developed to reduce the effort of building extension applications for SAP S/4HANA Cloud. It provides Java and JavaScript libraries, as well as a set of tools for developers, such as fault tolerance, cache management, tutorials, and project templates.&lt;/P&gt;&lt;P&gt;The SAP Cloud SDK enables partners, customers to easily consume OData services from SAP S/4HANA Cloud, discover existing OData services, and use built-in developer tools such as cache management, API metering, latency, and fault tolerance.&lt;/P&gt;&lt;P&gt;SAP Cloud SDK also allows you to generate the Virtual Data Model (VDM) of custom OData Services as well as standard SAP OData Services.&amp;nbsp; This VDM can then be readily consumed by your application&lt;/P&gt;&lt;P&gt;SAP CAP Model uses SAP Cloud SDK behind the scenes to perform a variety of tasks.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Business use cases&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Scenario 1&lt;/STRONG&gt;:- If you are planning to build your application using MongoDB, then you will not be able to use the CAP Model (since it only supports HANA for production), so you can create an application(MTA) in Java Spring boot and make use of SAP Cloud SDK for connecting to remote systems, consuming APIs in a type-safe manner, securing your application and providing multi-tenant support, etc.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Scenario 2&lt;/STRONG&gt;: - If you already have an existing Java application that was built without using the SAP CAP Model and you want to add more features like consuming an OData service.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Scenario 3&lt;/STRONG&gt;: - If you need advanced features in your app (currently, not provided by CAP Model) - for example, Resilience.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Scenario 4&lt;/STRONG&gt;: - You Are Extending an SAP Product or Service, building a Middle-Ware, Publishing a Cloud App&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Steps at a high level&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create a maven-based Java Spring boot application/project.&lt;/LI&gt;&lt;LI&gt;Download the metadata of the service and save it as “serviceName.edmx”.&lt;/LI&gt;&lt;LI&gt;Put the EDMX file in the resource folder of the application/project.&lt;/LI&gt;&lt;LI&gt;(optional) Create a service naming properties file in the resource folder.&lt;/LI&gt;&lt;LI&gt;Add the dependencies (SAP Cloud SDK OData generator and others) in the pom.xml file.&lt;/LI&gt;&lt;LI&gt;Add the OData generator maven plugin in the pom.xml file.&lt;/LI&gt;&lt;LI&gt;Compile the application to generate the type-safe Java client library from the EDMX of the service, which gives you programmatic access to all the entities, fields, and structures of the OData service&lt;/LI&gt;&lt;LI&gt;Create the controller class and use the generated classes to interact with the OData service.&lt;/LI&gt;&lt;LI&gt;Create the destination in the environment variable for local testing and in the BTP for productive use.&lt;/LI&gt;&lt;LI&gt;Run the application and test it locally.&lt;/LI&gt;&lt;LI&gt;Deploy the application to BTP Cloud Foundry as an MTA application.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite &lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Eclipse(with Spring tool suite and Lombok plugin)&lt;/LI&gt;&lt;LI&gt;JDK(1.8).&lt;/LI&gt;&lt;LI&gt;Access to any OData service (I will be using Business Partner API from &lt;A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;) &amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;(In this blog I will not cover the BTP deployment, I will explain how to test the application locally.&amp;nbsp; Please refer to my other &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/custom-spring-boot-application-in-sap-btp-cf-integrates-with-btp-document/ba-p/13797941" target="_blank"&gt;blog&lt;/A&gt; for deployment to BTP Cloud Foundry)&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Steps&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a new spring boot project in Eclipse as mentioned below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_0-1725750408309.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163589iA78BFB12928184A3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_0-1725750408309.png" alt="Sudhir_Lenka_0-1725750408309.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;The project structure in eclipse will look like below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_1-1725750408314.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163588i110159FFEEB9B563/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_1-1725750408314.png" alt="Sudhir_Lenka_1-1725750408314.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the pom.xml file and replace the below code.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;relativePath /&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
	&amp;lt;/parent&amp;gt;
	&amp;lt;groupId&amp;gt;com.sl&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;SpringBootToConsumeODataThroughCloudSDK&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;name&amp;gt;SpringBootToConsumeODataThroughCloudSDK&amp;lt;/name&amp;gt;
	&amp;lt;description&amp;gt;Sample Spring Boot App to consume OData through Cloud SDK&amp;lt;/description&amp;gt;
	&amp;lt;url /&amp;gt;
	&amp;lt;licenses&amp;gt;
		&amp;lt;license /&amp;gt;
	&amp;lt;/licenses&amp;gt;
	&amp;lt;developers&amp;gt;
		&amp;lt;developer /&amp;gt;
	&amp;lt;/developers&amp;gt;
	&amp;lt;scm&amp;gt;
		&amp;lt;connection /&amp;gt;
		&amp;lt;developerConnection /&amp;gt;
		&amp;lt;tag /&amp;gt;
		&amp;lt;url /&amp;gt;
	&amp;lt;/scm&amp;gt;
	&amp;lt;properties&amp;gt;
		&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
	&amp;lt;/properties&amp;gt;
	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;

		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-web-services&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;



		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.sap.cloud.sdk.datamodel&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;odata-core&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;4.15.0&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
			&amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;javax.inject&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;javax.inject&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;

	&amp;lt;/dependencies&amp;gt;

	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
			&amp;lt;/plugin&amp;gt;

			&amp;lt;plugin&amp;gt;
				&amp;lt;groupId&amp;gt;com.sap.cloud.sdk.datamodel&amp;lt;/groupId&amp;gt;
				&amp;lt;artifactId&amp;gt;odata-generator-maven-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;!-- Please use the latest version here --&amp;gt;
				&amp;lt;version&amp;gt;4.15.0&amp;lt;/version&amp;gt;
				&amp;lt;executions&amp;gt;
					&amp;lt;execution&amp;gt;
						&amp;lt;id&amp;gt;generate-consumption&amp;lt;/id&amp;gt;
						&amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;
						&amp;lt;goals&amp;gt;
							&amp;lt;goal&amp;gt;generate&amp;lt;/goal&amp;gt;
						&amp;lt;/goals&amp;gt;
						&amp;lt;configuration&amp;gt;
							&amp;lt;inputDirectory&amp;gt;${project.basedir}/src/main/resources/edmx&amp;lt;/inputDirectory&amp;gt;
							&amp;lt;outputDirectory&amp;gt;${project.build.sourceDirectory}&amp;lt;/outputDirectory&amp;gt;
							&amp;lt;serviceNameMappingFile&amp;gt;${project.basedir}/src/main/resources/serviceNameMappings.properties&amp;lt;/serviceNameMappingFile&amp;gt;
							&amp;lt;deleteOutputDirectory&amp;gt;false&amp;lt;/deleteOutputDirectory&amp;gt;
							&amp;lt;packageName&amp;gt;com.sl.vdm&amp;lt;/packageName&amp;gt;
							&amp;lt;defaultBasePath&amp;gt;odata/v2/&amp;lt;/defaultBasePath&amp;gt;
							&amp;lt;compileScope&amp;gt;COMPILE&amp;lt;/compileScope&amp;gt;
							&amp;lt;serviceMethodsPerEntitySet&amp;gt;true&amp;lt;/serviceMethodsPerEntitySet&amp;gt;
							&amp;lt;overwriteFiles&amp;gt;true&amp;lt;/overwriteFiles&amp;gt;
						&amp;lt;/configuration&amp;gt;
					&amp;lt;/execution&amp;gt;
				&amp;lt;/executions&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;

&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(In this blog we will be using OData V2 and SAP Cloud SDK version 4, if you want to consume OData V4 then the dependency version needs to be changed in the pom.xml file)&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Go to &lt;A href="https://api.sap.com/products/SAPS4HANACloud/apis/ODATA" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP Business Accelerator Hub&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;to download the metadata of the OData service.&lt;/LI&gt;&lt;LI&gt;Search for “business” in the search box for business partner OData service (In this blog we will be using OData V2).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_2-1725750408350.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163590iF2D123A056A9A5E5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_2-1725750408350.png" alt="Sudhir_Lenka_2-1725750408350.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(Please login with your personal(trial) SAP user account)&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Click on “Business Partner (A2X)” to navigate to business partner API.&lt;/LI&gt;&lt;LI&gt;Click on “API Specification” and download the &lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;EDMX&lt;/A&gt; (service metadata).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_3-1725750408362.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163592i76EC5B90533F4EED/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_3-1725750408362.png" alt="Sudhir_Lenka_3-1725750408362.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(If you want to consume an OData service that is not available in the Business Accelerator Hub like On-promise ECC/S4HANA OData service then you can fetch the metadata of the service by using &lt;STRONG&gt;$metadata&lt;/STRONG&gt; and save the content in a .edmx file{&lt;EM&gt;any name&lt;/EM&gt;})&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a folder called “edmx” in the resource folder of the project and copy the downloaded/created edmx file.&lt;/LI&gt;&lt;LI&gt;Also create a properties file “serviceNameMappings.properties” in the resource folder.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;# API BUSINESS PARTNER
API_BUSINESS_PARTNER.className = APIBusinessPartner
API_BUSINESS_PARTNER.packageName = businesspartner&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&amp;nbsp;Now the folder structure in Eclipse should look like below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_4-1725750408365.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163591i8C5B65D8584025F8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_4-1725750408365.png" alt="Sudhir_Lenka_4-1725750408365.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Now compile the project by using the “&lt;EM&gt;maven install&lt;/EM&gt;” command.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_5-1725750408379.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163593iB526834AB6EE84C4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_5-1725750408379.png" alt="Sudhir_Lenka_5-1725750408379.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Once the project is compiled successfully it will generate the classes for the OData service which will be used in our business logic for integration with the OData service.&lt;/LI&gt;&lt;LI&gt;Now the folder structure should look like below in Eclipse.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_6-1725750408383.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163594iA4A0057296A42A7E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_6-1725750408383.png" alt="Sudhir_Lenka_6-1725750408383.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;(Sometimes it doesn’t create the correct URL in the generated &lt;STRONG&gt;service interface (&lt;EM&gt;APIBusinessPartnerService,java&lt;/EM&gt;)&lt;/STRONG&gt;, so please verify and replace it with the correct URL as mentioned below. You can find the correct URL when you click “Code Snippet” in the “Try Out” tab in Business Accelerator Hub)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;String DEFAULT_SERVICE_PATH = "odata/sap/API_BUSINESS_PARTNER";&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Now create a controller class (&lt;STRONG&gt;&lt;EM&gt;BusinessPartnerController.java&lt;/EM&gt;&lt;/STRONG&gt;) to fetch business partners.&lt;/LI&gt;&lt;LI&gt;Replace the below code in the BusinessPartnerController class.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package com.sl.api;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;
import com.sap.cloud.sdk.cloudplatform.connectivity.DestinationAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestination;
import com.sl.vdm.namespaces.businesspartner.BusinessPartner;
import com.sl.vdm.services.DefaultAPIBusinessPartnerService;

@RestController
public class BusinessPartnerController {

	private final Logger log = LoggerFactory.getLogger(this.getClass());
	private static final String APIKEY_HEADER = "apikey";
	private static final String SANDBOX_APIKEY = "---Generated API Key---";

	@GetMapping("/GetBusinessPartners")
	public ResponseEntity&amp;lt;?&amp;gt; getBusinessPartners() {
		String DESTINATION_NAME = "MyDestination"; // in productive code, use constants file to
													// retrieve destination name
		 HttpDestination destination =
                 DestinationAccessor.getDestination(DESTINATION_NAME).asHttp();
		

		final List&amp;lt;BusinessPartner&amp;gt; businessPartners = new DefaultAPIBusinessPartnerService()
				.getAllBusinessPartner().select(BusinessPartner.BUSINESS_PARTNER, BusinessPartner.LAST_NAME,
						BusinessPartner.FIRST_NAME, BusinessPartner.CREATED_ON)
				.filter(BusinessPartner.MALE.eq(true))
				.top(200)
                .withHeader(APIKEY_HEADER, SANDBOX_APIKEY)
				.executeRequest(destination);

		return ResponseEntity.ok( new Gson().toJson(businessPartners));
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Generate the API key from &lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;Business Accelerator Hub&lt;/A&gt; and copy it in the variable &lt;STRONG&gt;&lt;EM&gt;SANDBOX_APIKEY &lt;/EM&gt;&lt;/STRONG&gt;in BusinessPartnerController class.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_7-1725750408415.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163596iEF4796D7F6F96650/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_7-1725750408415.png" alt="Sudhir_Lenka_7-1725750408415.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;(If the OData service is from other system like ECC or S4HANA then this step is not required, and the authentication will be set in the destination which will be automatically picked up by the SAP Cloud SDK library)&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&amp;nbsp;Now we need to create a destination in the environment variable to configure the OData service URL and authentication details (in this case authentication is not required).&lt;/LI&gt;&lt;LI&gt;Right-click on the project and select the run configuration, select the “Environment” tab in the dialogue box.&lt;/LI&gt;&lt;LI&gt;Click on “Add” to create an environment variable for the destination. Keep the name as “destinations” and value as mentioned below.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;[{"name": "MyDestination", "url": "https://sandbox.api.sap.com/s4hanacloud/sap/opu/"}]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&amp;lt;&amp;lt;sample destination with basic authentication&amp;gt;&amp;gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;[{"name": "MyDestination", "url": "--OData service base URL--", "user": "---user name---", "password": "--password for the given user--" }]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(You can add multiple destinations to connect to different systems)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_8-1725750408430.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163595iE0A1DE35A97B5BEB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_8-1725750408430.png" alt="Sudhir_Lenka_8-1725750408430.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Click on apply and run.&lt;/LI&gt;&lt;LI&gt;If everything is fine, then it will be a success and show the port number for the App.&lt;/LI&gt;&lt;LI&gt;Now you can test it from your browser by using the application URL&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sudhir_Lenka_9-1725750408440.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/163597i6C65E4B5B39E3C7D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Sudhir_Lenka_9-1725750408440.png" alt="Sudhir_Lenka_9-1725750408440.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note :- This blog is written based on my personal learning and experience, please feel free to commnet for improvement.&lt;/P&gt;&lt;P&gt;Happy learning!!&lt;/P&gt;&lt;P&gt;Best Regards,&lt;/P&gt;&lt;P&gt;Sudhir.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/build-a-java-spring-boot-middleware-application-to-consume-sap-odata/ba-p/13858588"/>
    <published>2024-09-08T01:45:30.799000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/integrating-with-sap-datasphere-api-through-btp-destination-using-oauth/ba-p/13877833</id>
    <title>Integrating with SAP Datasphere API through BTP Destination Using OAuth SAML Bearer Assertion</title>
    <updated>2024-09-30T10:39:53.533000+02:00</updated>
    <author>
      <name>thomasswolfs</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/13757</uri>
    </author>
    <content>&lt;P&gt;For our proof of concept, we aimed to access the SAP Datasphere API via SAP BTP, utilizing the OAuth2 SAML Bearer authentication flow. Ideally, we wanted to connect directly to this destination through a route in our Approuter.&amp;nbsp;&lt;/P&gt;&lt;P&gt;We found this blog post helpful as a starting point: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/integrating-with-sap-datasphere-consumption-apis-using-saml-bearer/ba-p/13647905" target="_new"&gt;&lt;SPAN&gt;Integrating&lt;/SPAN&gt;&lt;SPAN&gt; with&lt;/SPAN&gt;&lt;SPAN&gt; SAP&lt;/SPAN&gt;&lt;SPAN&gt; Datasphere&lt;/SPAN&gt;&lt;SPAN&gt; Consumption&lt;/SPAN&gt;&lt;SPAN&gt; APIs&lt;/SPAN&gt;&lt;SPAN&gt; Using&lt;/SPAN&gt;&lt;SPAN&gt; SAML&lt;/SPAN&gt;&lt;SPAN&gt; Bearer&lt;/SPAN&gt;&lt;/A&gt;.&amp;nbsp; Thanks to&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/513684"&gt;@gustavokath&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;However, the solution required an additional (NodeJS) middleware. Our goal was to achieve this both with and without a Node.js middleware, leveraging the destination service and default approuter.&lt;/P&gt;&lt;P&gt;We encountered some issues that I would like to document. If our experience can help anyone facing similar challenges along the way, that would be wonderful! &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite:&amp;nbsp;&lt;/STRONG&gt;Make sure to check out the blog I mentioned earlier, as I won’t be going over all the steps again. I’ll just point out the differences we made.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;With NodeJS middleware:&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the scenario where we used a Node.js middleware, we opted for the SAP Cloud SDK instead of handling HTTP requests with Axios. The SAP Cloud SDK simplifies integration with SAP services, providing built-in tools for handling authentication and API interactions. You can find more details in the &lt;A href="https://sap.github.io/cloud-sdk/docs/js/getting-started" target="_new" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;SAP&lt;/SPAN&gt;&lt;SPAN&gt; Cloud&lt;/SPAN&gt;&lt;SPAN&gt; SDK&lt;/SPAN&gt;&lt;SPAN&gt; documentation&lt;/SPAN&gt;&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;The following code does the trick:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;//Imports
const connectivity = require("@sap-cloud-sdk/connectivity");
const httpclient = require('@sap-cloud-sdk/http-client');

//Simple example method to call datasphere destination via Cloud SDK
//Assuming req is a Request object coming from ExpressJS
const callDatasphere = (req, path, params) =&amp;gt; {

const jwt = connectivity.retrieveJwt(req);
const destination = await connectivity.getDestination({ destinationName: "datasphere_destination", jwt: jwt });

 let url = `${dest.url}${path}`;
    let result = await httpclient.executeHttpRequest(dest, {
      url: url,
      method: "get",
      headers: { "Content-Type": "application/xml" },
      params: params
    });

return result.data;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Without NodeJS middleware&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;The above example worked perfectly for us. However, we also wanted to explore an implementation without using a Node.js middleware. In this case, only a managed or custom approuter would be utilized.&lt;/P&gt;&lt;P&gt;For this we added a router to the approuter xs-ap.json file:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="thomasswolfs_1-1727279041911.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/171316i53CC75E77F099ADE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="thomasswolfs_1-1727279041911.png" alt="thomasswolfs_1-1727279041911.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;While testing this setup, we encountered an unexpected "unauthorized" error. This was puzzling because the destination worked flawlessly when used with the Cloud SDK. To investigate further, we fetched the destination data using Postman. The response confirmed that the tokens were generated correctly, indicating that the OAuth2 SAML Bearer flow was functioning as expected.&lt;/P&gt;&lt;P&gt;While debugging the Approuter, we discovered that it was adding additional headers to the request being sent to the Datasphere API.&lt;/P&gt;&lt;P&gt;One of these headers was "x-forwarded-host", which contained the source domain. By adding an additional property to the destination configuration, we were able to overwrite this header successfully:&lt;/P&gt;&lt;P&gt;uRL.headers.x-forwarded-host: "your-datasphere-domain.com"&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="thomasswolfs_0-1727278965038.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/171312i5DF54906DDFF9ABC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="thomasswolfs_0-1727278965038.png" alt="thomasswolfs_0-1727278965038.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;From this point on, we were able to make calls to Datasphere through the Approuter without needing an additional Node.js middleware. This approach also works with a managed Approuter, allowing you to achieve the integration without requiring a Cloud Foundry runtime.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Ideally, Datasphere would offer the ability to allowlist our source domains in a way, eliminating the need for the above change in the destination configuration. If you have any ideas on how to achieve this, feel free to share! For now, we will go forward with this work around :-).&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp; &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Technology+Platform/pd-p/73555000100700000172" class="lia-product-mention" data-product="1215-1"&gt;SAP Business Technology Platform&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/integrating-with-sap-datasphere-api-through-btp-destination-using-oauth/ba-p/13877833"/>
    <published>2024-09-30T10:39:53.533000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-sap-cloud-sdk-for-ai-javascript-typescript/ba-p/13892856</id>
    <title>Introducing the SAP Cloud SDK for AI (JavaScript/TypeScript) 🎉</title>
    <updated>2024-10-28T17:57:54.632000+01:00</updated>
    <author>
      <name>TomFrenken</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1456478</uri>
    </author>
    <content>&lt;DIV&gt;&lt;SPAN&gt;We are excited to announce the initial release of the &lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-js#readme" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;SAP Cloud SDK for AI&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Integrate generative AI capabilities into your SAP Business Technology Platform (BTP) applications and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;leverage the &lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/generative-ai-hub-in-sap-ai-core" target="_self" rel="noopener noreferrer"&gt;Generative AI Hub&lt;/A&gt; in&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/what-is-sap-ai-core" target="_self" rel="noopener noreferrer"&gt;&lt;SPAN&gt;SAP AI Core&lt;/SPAN&gt;&lt;/A&gt;.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;If you’re developing on SAP BTP, the SAP Cloud SDK for AI is designed to make AI integration more accessible and impactful in your applications. With features that streamline deployment management, enhance content safety, and simplify model orchestration, this SDK allows you to quickly incorporate advanced AI capabilities without extensive setup. Whether you need flexible workflows, secure data handling, or seamless integration with generative models, this SDK offers powerful tools to bring AI-driven functionality to your SAP BTP solutions.&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;In this blog post, we will introduce you to the key packages and their features.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-1180717513"&gt;&lt;FONT size="5"&gt;&lt;SPAN&gt;AI Orchestration with @​​​​​sap-ai-sdk/orchestration&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Leverage the generative AI Hub orchestration service and configure templating, content filtering, and data masking for your applications with the &lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/orchestration#readme" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ai-sdk/orchestration&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;package.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;With the orchestration service, you can streamline AI interactions and ensure compliance with content safety guidelines.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/blob/main/packages/orchestration/README.md#templating" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Templating&lt;/STRONG&gt;&lt;/A&gt;&lt;SPAN&gt;: Create dynamic prompts with placeholders to customize AI interactions based on user inputs.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/blob/main/packages/orchestration/README.md#content-filtering" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;Content Filtering&lt;/STRONG&gt;&lt;/A&gt;&lt;SPAN&gt;: Apply filters to ensure input and output adhere to content safety guidelines.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/blob/main/packages/orchestration/README.md#data-masking" target="_self" rel="nofollow noopener noreferrer"&gt;Data Masking&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&amp;nbsp;&lt;SPAN class=""&gt;Anonymize&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN class=""&gt;and&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN class=""&gt;pseudonymize&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN class=""&gt;sensitive&lt;/SPAN&gt;&amp;nbsp;information.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Grounding&lt;/STRONG&gt;: Integrate &lt;SPAN class=""&gt;external&lt;/SPAN&gt; &lt;SPAN class=""&gt;data&lt;/SPAN&gt; sources to provide contextually relevant information (planned for Q4 &lt;SPAN class=""&gt;2024&lt;/SPAN&gt;).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;&lt;H3 id="toc-hId-984204008"&gt;&lt;FONT size="5"&gt;AI Management with @​​​​​​​​sap-ai-sdk/ai-api&lt;/FONT&gt;&lt;/H3&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Automate processes such as creating artifacts, configurations, and deployments, executing batch inference jobs, as well as managing Docker registries and object storage for training data.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;The &lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/ai-api#readme" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ai-sdk/ai-api&lt;/A&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;package provides comprehensive tools for managing scenarios and workflows in SAP AI Core.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/ai-api#create-an-artifact" target="_self" rel="nofollow noopener noreferrer"&gt;Artifact Management&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;: Register and manage datasets and other model artifacts.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/ai-api#create-a-configuration" target="_self" rel="nofollow noopener noreferrer"&gt;Configuration Management&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;: Set up configurations for different models and use cases.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/ai-api#create-a-deployment" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;&lt;STRONG&gt;Deployment Management&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;: Deploy AI models and manage their lifecycle within SAP AI Core.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-787690503"&gt;&lt;FONT size="5"&gt;&lt;SPAN&gt;LangChain Integration with @​​​​sap-ai-sdk/langchai&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/langchain#readme" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ai-sdk/langchain&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;package provides LangChain-compatible clients for Azure OpenAI models deployed in SAP AI Core, enabling sophisticated AI pipelines within your SAP BTP applications.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Seamless Integration&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Built on SAP Cloud SDK for AI's foundation model clients, ensuring compatibility with SAP AI Core and LangChain's ecosystem.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Flexible Clients&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Easily initialize chat and embedding clients with support for advanced features like templating and output parsing.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;RAG Support&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Implement &lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/blob/main/sample-code/src/langchain-azure-openai.ts#L65" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;Retrieval-Augmented Generation workflows&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;by combining embedding capabilities with LangChain's text splitters and vector stores.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-591176998"&gt;&lt;FONT size="5"&gt;&lt;SPAN&gt;Generative AI with&amp;nbsp;@​​​​​​​​&lt;/SPAN&gt;&lt;/FONT&gt;&lt;FONT size="5"&gt;&lt;SPAN&gt;​​​​sap-ai-sdk/foundation-models&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/packages/foundation-models#readme" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;&lt;STRONG&gt;@sap-ai-sdk/foundation-models&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;package offers streamlined access to specific generative AI models accessible via Generative AI Hub.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;It provides a more focused interface compared to the full orchestration capabilities, concentrating on direct model interactions.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;This package is ideal for developers who need direct access to foundation models for inference and embedding requests without the additional layers of templating, content filtering, or data masking provided by the orchestration service.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-394663493"&gt;&lt;FONT size="5"&gt;Getting Started&lt;/FONT&gt;&lt;/H3&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;You will need Node v20 or higher and an ESM (ECMAScript Modules) compatible application to use the packages.&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;To explore these packages further, check out our &lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/tree/main/sample-code#readme" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;sample code&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;, which shows the usage of the various SDK packages.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-198149988"&gt;&lt;FONT size="5"&gt;&lt;SPAN&gt;Support and Feedback&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;We value your feedback on this initial release!&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;If you need support or want to share your thoughts and ideas, go ahead and open an issue on&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-js/issues" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;SPAN&gt;GitHub&lt;/SPAN&gt;&lt;/A&gt;.&lt;/DIV&gt;&lt;H3 id="toc-hId-1636483"&gt;&lt;FONT size="5"&gt;Latest News&lt;/FONT&gt;&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT size="3"&gt;Visit &lt;A href="https://www.sap.com/products/artificial-intelligence.html" target="_self" rel="noopener noreferrer"&gt;sap.com/ai&lt;/A&gt; and explore our portfolio&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT size="3"&gt;Explore the available AI capabilities on &lt;A href="https://discovery-center.cloud.sap/serviceCatalog/sap-ai-core/?region=all" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Discovery Center&lt;/A&gt;.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT size="3"&gt;Discover the latest announcements in the &lt;A href="https://news.sap.com/?p=228310" target="_self" rel="noopener noreferrer"&gt;SAP TechEd Press Release&lt;/A&gt; and the &lt;A href="https://www.sap.com/events/teched/news-guide.html&amp;quot;%20\t &amp;quot;_blank" target="_self" rel="noopener noreferrer"&gt;SAP TechEd News Guide&lt;/A&gt;.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT size="3"&gt;Review the &lt;A href="https://roadmaps.sap.com/board?range=FIRST-LAST&amp;amp;PRODUCT=73554900100800003641&amp;amp;PRODUCT=73555000100800003283&amp;quot;%20\l &amp;quot;Q3%202024&amp;quot; \t &amp;quot;_blank" target="_self" rel="noopener noreferrer"&gt;SAP Road Map Explorer&lt;/A&gt; for a detailed view of upcoming product innovations.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT size="3"&gt;Join the &lt;A href="https://pages.community.sap.com/topics/ai-core-artificial-intelligence&amp;quot;%20\t &amp;quot;_blank" target="_self" rel="noopener noreferrer"&gt;SAP Community&lt;/A&gt; page to connect with experts and share knowledge.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-sap-cloud-sdk-for-ai-javascript-typescript/ba-p/13892856"/>
    <published>2024-10-28T17:57:54.632000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-sap-cloud-sdk-for-ai-java/ba-p/13956162</id>
    <title>Introducing the SAP Cloud SDK for AI (Java) 🎉</title>
    <updated>2024-12-06T18:26:11.077000+01:00</updated>
    <author>
      <name>newtork</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1384533</uri>
    </author>
    <content>&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;We’re excited to announce the initial release of the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java#readme" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Cloud SDK for AI for Java&lt;/A&gt;! Only a few weeks ago we already&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-sap-cloud-sdk-for-ai-javascript-typescript/ba-p/13892856" target="_blank"&gt;announced the release&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;of the JavaScript/TypeScript variant. Similarly, this SDK for Java enables convenient integration of generative AI capabilities within your SAP Business Technology Platform (BTP) applications and allows you to utilize the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/generative-ai-hub-in-sap-ai-core" target="_blank" rel="noopener noreferrer"&gt;Generative AI Hub&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/what-is-sap-ai-core" target="_blank" rel="noopener noreferrer"&gt;SAP AI Core&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;For&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/btp?locale=en-US" target="_blank" rel="noopener noreferrer"&gt;SAP BTP&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;developers, the AI SDK is crafted to simplify AI integration and enhance application impact. With features that optimize deployment, improve content safety, and facilitate model orchestration, the SDK lets you bring advanced AI functionality to your applications swiftly and with minimal setup. Whether you need adaptable workflows, secure data handling, or smooth generative model integration, the SDK equips you with robust tools to embed AI-powered features in your SAP BTP solutions.&lt;/P&gt;&lt;P&gt;This post introduces the main modules and their features.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1076682325"&gt;AI Core - Setup and Usage&lt;/H2&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&amp;lt;&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;com.sap.ai.sdk&amp;lt;/&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;core&amp;lt;/&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;1.0.0&amp;lt;/&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;
&amp;lt;/&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;Automate tasks such as creating AI Core artifacts, configurations, and deployments, executing batch inference jobs, as well as managing Docker registries and object storage for training data. The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT face="courier new,courier"&gt;core&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;module provides tools for workflow and scenario management within SAP AI Core.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Artifact management: register and organize datasets and model artifacts.&lt;/LI&gt;&lt;LI&gt;Configuration management: set up configurations for various models and use cases.&lt;/LI&gt;&lt;LI&gt;Deployment management: deploy AI models and manage their lifecycle within SAP AI Core.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Example SDK code:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Create a deployment in SAP AI Core.&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;api&lt;/SPAN&gt; = &lt;SPAN class=""&gt;new&lt;/SPAN&gt; &lt;SPAN class=""&gt;DeploymentApi&lt;/SPAN&gt;();
&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;resourceGroupId&lt;/SPAN&gt; = &lt;SPAN class=""&gt;"default"&lt;/SPAN&gt;;
&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;request&lt;/SPAN&gt; =&lt;SPAN class=""&gt; AiDeploymentCreationRequest&lt;/SPAN&gt;.&lt;SPAN class=""&gt;create&lt;/SPAN&gt;().&lt;SPAN class=""&gt;configurationId&lt;/SPAN&gt;(&lt;SPAN class=""&gt;"12345-123-123-123-123456abcdefg"&lt;/SPAN&gt;);

&lt;SPAN class=""&gt;AiDeploymentCreationResponse&lt;/SPAN&gt; &lt;SPAN class=""&gt;deployment&lt;/SPAN&gt; = &lt;SPAN class=""&gt;api&lt;/SPAN&gt;.&lt;SPAN class=""&gt;create&lt;/SPAN&gt;(&lt;SPAN class=""&gt;resourceGroupId&lt;/SPAN&gt;, &lt;SPAN class=""&gt;request&lt;/SPAN&gt;);
&lt;SPAN class=""&gt;String&lt;/SPAN&gt; &lt;SPAN class=""&gt;id&lt;/SPAN&gt; = &lt;SPAN class=""&gt;deployment&lt;/SPAN&gt;.&lt;SPAN class=""&gt;getId&lt;/SPAN&gt;();
&lt;SPAN class=""&gt;AiExecutionStatus&lt;/SPAN&gt; &lt;SPAN class=""&gt;status&lt;/SPAN&gt; = &lt;SPAN class=""&gt;deployment&lt;/SPAN&gt;.&lt;SPAN class=""&gt;getStatus&lt;/SPAN&gt;();&lt;/PRE&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;You can learn more about the SDK's capabilities for SAP AI Core&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/blob/main/docs/guides/AI_CORE_DEPLOYMENT.md" target="_blank" rel="noopener nofollow noreferrer"&gt;in the public repository guide&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-880168820"&gt;AI Core - Orchestration&lt;/H2&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&amp;lt;&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;com.sap.ai.sdk&amp;lt;/&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;orchestration&amp;lt;/&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;1.0.0&amp;lt;/&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;
&amp;lt;/&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;&lt;/PRE&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;This&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT face="courier new,courier"&gt;&lt;SPAN&gt;orchestration&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;module lets you use the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/orchestration" target="_blank" rel="noopener noreferrer"&gt;Generative AI Hub Orchestration Service&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;with templating, content filtering, and data masking from within your applications. The Orchestration Service streamlines AI interactions while ensuring adherence to content safety guidelines.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;Templating: Build dynamic prompts with placeholders to tailor AI interactions to user inputs.&lt;/LI&gt;&lt;LI&gt;Content Filtering: Apply filters to maintain compliance with content safety guidelines.&lt;/LI&gt;&lt;LI&gt;Data Masking: Anonymize and pseudonymize sensitive data.&lt;/LI&gt;&lt;LI&gt;Grounding: Add external data sources for contextually relevant information (planned for Q1 2025).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Example SDK code:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Write a simple chat completion.&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;client&lt;/SPAN&gt; = &lt;SPAN class=""&gt;new&lt;/SPAN&gt; &lt;SPAN class=""&gt;OrchestrationClient&lt;/SPAN&gt;();
&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;config&lt;/SPAN&gt; = &lt;SPAN class=""&gt;new&lt;/SPAN&gt; &lt;SPAN class=""&gt;OrchestrationModuleConfig&lt;/SPAN&gt;().&lt;SPAN class=""&gt;withLlmConfig&lt;/SPAN&gt;(&lt;SPAN class=""&gt;OrchestrationAiModel&lt;/SPAN&gt;.&lt;SPAN class=""&gt;GPT_4O&lt;/SPAN&gt;);
&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;prompt&lt;/SPAN&gt; = &lt;SPAN class=""&gt;new&lt;/SPAN&gt; &lt;SPAN class=""&gt;OrchestrationPrompt&lt;/SPAN&gt;(&lt;SPAN class=""&gt;"Hello world! Why is this phrase so famous?"&lt;/SPAN&gt;);
&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;result&lt;/SPAN&gt; = &lt;SPAN class=""&gt;client&lt;/SPAN&gt;.&lt;SPAN class=""&gt;chatCompletion&lt;/SPAN&gt;(&lt;SPAN class=""&gt;prompt&lt;/SPAN&gt;, &lt;SPAN class=""&gt;config&lt;/SPAN&gt;);

&lt;SPAN class=""&gt;String&lt;/SPAN&gt; &lt;SPAN class=""&gt;messageResult&lt;/SPAN&gt; = &lt;SPAN class=""&gt;result&lt;/SPAN&gt;.&lt;SPAN class=""&gt;getContent&lt;/SPAN&gt;();&lt;/PRE&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;You can learn more about the SDK's capabilities for Orchestration Service&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/blob/main/docs/guides/ORCHESTRATION_CHAT_COMPLETION.md" target="_blank" rel="noopener nofollow noreferrer"&gt;in the public repository guide&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;H2 id="toc-hId-683655315"&gt;AI Core - Foundation Models&lt;/H2&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&amp;lt;&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;com.sap.ai.sdk.foundationmodels&amp;lt;/&lt;SPAN class=""&gt;groupId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;openai&amp;lt;/&lt;SPAN class=""&gt;artifactId&lt;/SPAN&gt;&amp;gt;
  &amp;lt;&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;1.0.0&amp;lt;/&lt;SPAN class=""&gt;version&lt;/SPAN&gt;&amp;gt;
&amp;lt;/&lt;SPAN class=""&gt;dependency&lt;/SPAN&gt;&amp;gt;&lt;/PRE&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;The&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT face="courier new,courier"&gt;&lt;SPAN&gt;openai&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;module, along with other modules in the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;com.sap.ai.sdk.foundationmodels&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;group, enables streamlined access to specific generative AI models available through the Generative AI Hub. The module provides a simplified interface focused on direct model interactions, ideal for developers who require direct access to foundation models for inference and embedding requests without additional orchestration features.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;Currently only&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;FONT face="courier new,courier"&gt;openai&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;is supported. Please open a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/issues/new/choose" target="_blank" rel="noopener nofollow noreferrer"&gt;feature request&lt;/A&gt;, if you need direct LLM access for other foundation models.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example SDK code:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Write a simple chat completion.&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;&lt;SPAN class=""&gt;var&lt;/SPAN&gt; &lt;SPAN class=""&gt;result&lt;/SPAN&gt; = 
  &lt;SPAN class=""&gt;OpenAiClient&lt;/SPAN&gt;.&lt;SPAN class=""&gt;forModel&lt;/SPAN&gt;(&lt;SPAN class=""&gt;GPT_35_TURBO&lt;/SPAN&gt;)
    .&lt;SPAN class=""&gt;withSystemPrompt&lt;/SPAN&gt;(&lt;SPAN class=""&gt;"You are a helpful AI"&lt;/SPAN&gt;)
    .&lt;SPAN class=""&gt;chatCompletion&lt;/SPAN&gt;(&lt;SPAN class=""&gt;"Hello World! Why is this phrase so famous?"&lt;/SPAN&gt;);

&lt;SPAN class=""&gt;String&lt;/SPAN&gt; &lt;SPAN class=""&gt;resultMessage&lt;/SPAN&gt; = &lt;SPAN class=""&gt;result&lt;/SPAN&gt;.&lt;SPAN class=""&gt;getContent&lt;/SPAN&gt;();&lt;/PRE&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;You can learn more about the SDK's capabilities for foundation models and OpenAI specific features&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/blob/main/docs/guides/OPENAI_CHAT_COMPLETION.md" target="_blank" rel="noopener nofollow noreferrer"&gt;in the public repository guide&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;H2 id="toc-hId-487141810"&gt;Getting Started&lt;/H2&gt;&lt;/DIV&gt;&lt;P&gt;You will need&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;Java 17&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;or higher.&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;Spring Boot&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;or&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;EM&gt;SAP Cloud Application Programming Model (CAP)&lt;/EM&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;as a framework is recommended, but not required. To explore these packages further, check out&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/tree/main/sample-code/spring-app" target="_blank" rel="noopener nofollow noreferrer"&gt;our sample project&lt;/A&gt;, which shows the usage of the various SDK packages.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;H2 id="toc-hId-290628305"&gt;Support and Feedback&lt;/H2&gt;&lt;/DIV&gt;&lt;P&gt;We’d love your feedback on this first release! For support or to share your ideas, feel free to open an issue on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP/ai-sdk-java/issues/new/choose" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;H2 id="toc-hId-94114800"&gt;Latest News&lt;/H2&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-sap-cloud-sdk-for-ai-javascript-typescript/ba-p/13892856" target="_blank"&gt;SAP Cloud SDK for AI for JavaScript&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;released in October 2024.&lt;/LI&gt;&lt;LI&gt;Visit&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.sap.com/products/artificial-intelligence.html" target="_blank" rel="noopener noreferrer"&gt;sap.com/ai&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and explore our portfolio&lt;/LI&gt;&lt;LI&gt;Explore the available AI capabilities on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://discovery-center.cloud.sap/serviceCatalog/sap-ai-core/?region=all" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Discovery Center&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;Discover the latest announcements in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://news.sap.com/?p=228310" target="_blank" rel="noopener noreferrer"&gt;SAP TechEd Press Release&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.sap.com/events/teched/news-guide.html" target="_blank" rel="noopener noreferrer"&gt;SAP TechEd News Guide&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;Review the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://roadmaps.sap.com/board?PRODUCT=73554900100800003641&amp;amp;PRODUCT=73555000100800003283&amp;amp;range=FIRST-LAST" target="_blank" rel="noopener noreferrer"&gt;SAP Road Map Explorer&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for a detailed view of upcoming product innovations.&lt;/LI&gt;&lt;LI&gt;Join the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://pages.community.sap.com/topics/ai-core-artificial-intelligence" target="_blank" rel="noopener noreferrer"&gt;SAP Community&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;page to connect with experts and share knowledge.&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-sap-cloud-sdk-for-ai-java/ba-p/13956162"/>
    <published>2024-12-06T18:26:11.077000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/product-lifecycle-management-blog-posts-by-members/sending-custom-emails-in-digital-manufacturing-using-sap-cloud-sdk/ba-p/13792568</id>
    <title>Sending Custom Emails in Digital Manufacturing Using SAP Cloud SDK</title>
    <updated>2025-01-10T14:22:58.291000+01:00</updated>
    <author>
      <name>egeAksoyek</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/879950</uri>
    </author>
    <content>&lt;H4 id="toc-hId-1281168231"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;In SAP DM, email notifications can be sent to one or multiple users using the Create &amp;amp; Update Alert Services. To do this, it is sufficient to provide our data to the AlertNotification field, apart from 'IN_APP'. With a recent update to DM, our existing mail destination was automatically brought into the Destinations section inside our BTP account.&lt;/P&gt;&lt;P&gt;When creating custom emails, this destination can be utilized via the Cloud SDK. The reason for leveraging the Cloud SDK for sending custom emails is that the styles and content of emails sent through alert services within DM cannot be customized. If there is a need to send information beyond the fixed email text, an alternative method outside of alert services is required.&lt;/P&gt;&lt;H4 id="toc-hId-1084654726"&gt;&lt;STRONG&gt;Sending Mails with Create Alert Service&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;In standard DM developments, when using the Create Alert service, we can send the alert to the specified email by setting the ActionType value to SAP_MAIL in the AlertNotification body parameter.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 1- Alert Notification Body Parameter&amp;quot;]" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210027iAE5109EBB652B6CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="alertNotificationBodyParams.png" alt="[&amp;quot;Figure 1- Alert Notification Body Parameter&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 1- Alert Notification Body Parameter"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Additionally, to utilize the mail service, it is necessary to verify that a destination of type 'Mail' is configured in the 'Destinations' section of SAP BTP.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 2- Destination Configuration of the Mail Server&amp;quot;]" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210759iE1C6456FD329AF7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="blogeditted.png" alt="[&amp;quot;Figure 2- Destination Configuration of the Mail Server&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 2- Destination Configuration of the Mail Server"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the necessary connections are established and the Create Alert service is triggered with the provided parameters, the email notification is received as shown below.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 3-Example Alert Mail&amp;quot;]" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210072iF739031906178607/image-size/large?v=v2&amp;amp;px=999" role="button" title="alertMailExample.png" alt="[&amp;quot;Figure 3-Example Alert Mail&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 3-Example Alert Mail"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;However, as can be seen, these template email notifications offer limited capabilities in terms of both content and scenario diversity.&amp;nbsp;&lt;/P&gt;&lt;P&gt;This blog will provide examples of integrating a custom email service into DM as a third party using the mail client feature in Cloud SDK, and utilizing the existing MAIL destination for our processes.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 4- Basic Send Mail Service&amp;quot;]" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210144i8521A234EB23D1C8/image-size/large?v=v2&amp;amp;px=999" role="button" title="newAlertServiceCode.png" alt="[&amp;quot;Figure 4- Basic Send Mail Service&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 4- Basic Send Mail Service"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="[&amp;quot;Figure 5- Receiced Basic Mail&amp;quot;]" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210143i3E98DF78480FA135/image-size/medium?v=v2&amp;amp;px=400" role="button" title="incomingMailExample.png" alt="[&amp;quot;Figure 5- Receiced Basic Mail&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 5- Receiced Basic Mail"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In addition to the simple email shown in the image, the main additional features that can be added and used are as follows: cc, replyTo, html (the message to be sent can be designed and shared in HTML format), attachments, and priority.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="[&amp;quot;Figure 6- Mail Attachment Examples&amp;quot;]" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210512iFECC78CFC2085478/image-size/medium?v=v2&amp;amp;px=400" role="button" title="attachmentObj.png" alt="[&amp;quot;Figure 6- Mail Attachment Examples&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 6- Mail Attachment Examples"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Images can be embedded within the page, and they can also be sent as attachments.&amp;nbsp;The key point here is that the name of the image used must match the provided CID correctly.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 7- Received Mail with Attachments and Images&amp;quot;]" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210603iDCD346E46050D19E/image-size/large?v=v2&amp;amp;px=999" role="button" title="sapMailSample.png" alt="[&amp;quot;Figure 7- Received Mail with Attachments and Images&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 7- Received Mail with Attachments and Images"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-888141221"&gt;&lt;STRONG&gt;Usage of the Mail Service as a Third Party in DM Processes&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;By triggering our service via Postman, we are now ready to integrate it as a third party within DM for future process designs. To achieve this, we navigate to 'Manage Service Registry' in DM and create a new service under 'API Services,' assigning our defined path to the URL path.&lt;/P&gt;&lt;P&gt;After configuring our method and defining the request and response structures, we save the service and proceed to 'Design Production Process' for testing.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="[&amp;quot;Figure 8- Service API Template of Mail Service&amp;quot;]" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210614i82C71D6D716B3899/image-size/large?v=v2&amp;amp;px=999" role="button" title="Ekran görüntüsü 2025-01-10 143909.png" alt="[&amp;quot;Figure 8- Service API Template of Mail Service&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 8- Service API Template of Mail Service"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;After opening our design, we navigate to 'Services and Process' and select our mail service from the group where it was added under 'Select Services.' Once selected, we save the configuration. This setup allows us to tailor our setups and introduce variety to our developments based on customer requirements.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 9a- Custom Service Selection in Process Designer&amp;quot;]" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210625iB17948E8139F7CB6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ekran görüntüsü 2025-01-10 144350.png" alt="[&amp;quot;Figure 9a- Custom Service Selection in Process Designer&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 9a- Custom Service Selection in Process Designer"]&lt;/span&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="[&amp;quot;Figure 9b- Basic Process Template with Third Party Service&amp;quot;]" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210626iEA75AC4CA65508E1/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ekran görüntüsü 2025-01-10 144622.png" alt="[&amp;quot;Figure 9b- Basic Process Template with Third Party Service&amp;quot;]" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;["Figure 9b- Basic Process Template with Third Party Service"]&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-691627716"&gt;&lt;STRONG&gt;Future Directions &amp;amp; Possibilities&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;"Examples of scenario customizations and the variety of responses to customer requests enabled by the added email service include:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Automatically sending data via email&lt;/STRONG&gt;: Instead of downloading filtered tables from report pages as Excel files, the data can be automatically sent to predetermined or input-specified email accounts after being retrieved.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Sending critical information with CCs&lt;/STRONG&gt;: Critical information can be sent to necessary groups, including CCs, to ensure the information reaches all relevant recipients.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Creating internal email handling pages&lt;/STRONG&gt;: Developing pages within DM for internal email receipt and response, facilitating better internal communication.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;If you like this post or have any questions, please let us know in the comments.&lt;BR /&gt;All questions are highly appreciated.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;Ege Aksöyek&lt;/STRONG&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-495114211"&gt;&lt;STRONG&gt;Reference Documents&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/sap-digital-manufacturing/operations-guide/configuring-email-notifications" target="_blank" rel="noopener noreferrer"&gt;Configure Email Notifications | SAP Help Portal&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/product-lifecycle-management-blog-posts-by-members/sending-custom-emails-in-digital-manufacturing-using-sap-cloud-sdk/ba-p/13792568"/>
    <published>2025-01-10T14:22:58.291000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-developer-news-january-23rd-2025/ba-p/13994568</id>
    <title>SAP Developer News, January 23rd, 2025</title>
    <updated>2025-01-23T21:10:00.156000+01:00</updated>
    <author>
      <name>thomas_jung</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/139</uri>
    </author>
    <content>&lt;P&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBO4qZLxBPG4%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBO4qZLxBPG4&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FBO4qZLxBPG4%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="400" height="225" scrolling="no" title="Dev Survey, Cloud SDK for AI, CodeConnect, Wait in BPA, Integration Group | SAP Developer News" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1209403396"&gt;DESCRIPTION&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Podcast: &lt;A href="https://podcast.opensap.info/sap-developers/2025/01/23/sap-developer-news-january-23rd-2025/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://podcast.opensap.info/sap-developers/2025/01/23/sap-developer-news-january-23rd-2025/&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Developer Insight Survey &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Blog Post &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/the-2025-sap-developer-survey-is-live-contribute-now/ba-p/13993753" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/the-2025-sap-developer-survey-is-live-contribute-now/ba-p/13993753&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Survey: &lt;A href="https://sapinsights.eu.qualtrics.com/jfe/form/SV_6AxTBFzfczfuoJg" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sapinsights.eu.qualtrics.com/jfe/form/SV_6AxTBFzfczfuoJg&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;New Release of the SAP Cloud SDK for AI &lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SDK Release Notes &lt;A href="https://github.com/SAP/ai-sdk-js/releases/tag/v1.6.0" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/ai-sdk-js/releases/tag/v1.6.0&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Code Connect 2025&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Conference website &lt;A href="https://code-connect.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://code-connect.dev/&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Storm Éowyn &lt;A href="https://www.bbc.co.uk/weather/articles/cr46z2dv606o" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.bbc.co.uk/weather/articles/cr46z2dv606o&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;My post-news-item run route &lt;A href="https://www.strava.com/activities/13430153502" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.strava.com/activities/13430153502&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;“Wait for an API Call” Step in SAP Build Process Automation&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Daniel’s blog post on the new process step: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/new-quot-wait-for-api-call-quot-integrates-processes-with-external-systems/ba-p/13992848" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/new-quot-wait-for-api-call-quot-integrates-processes-with-external-systems/ba-p/13992848&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;New SAP Community interest group - Integration&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Integration interest group: &lt;A href="https://community.sap.com/t5/integration/gh-p/integration" target="_blank"&gt;https://community.sap.com/t5/integration/gh-p/integration&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;New Certification Prerequisite for SAP Build Low-Code Certification&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Description: &lt;SPAN&gt;&lt;A href="https://www.linkedin.com/posts/sabrina-brueck_sapcertification-sapbuild-lowcodenocode-activity-7287391385630982145-4G-c" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.linkedin.com/posts/sabrina-brueck_sapcertification-sapbuild-lowcodenocode-activity-7287391385630982145-4G-c&lt;/A&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1012889891"&gt;CHAPTER TITLES&lt;/H3&gt;&lt;P&gt;0:00 Intro&lt;/P&gt;&lt;P&gt;0:10 2025 Developer Insight Survey&lt;/P&gt;&lt;P&gt;1:14 Code Connect 2025&lt;/P&gt;&lt;P&gt;2:32 New Release of the SAP Cloud SDK for AI&lt;/P&gt;&lt;P&gt;3:17 “Wait for an API Call” Step in SAP Build Process Automation&lt;/P&gt;&lt;P&gt;4:23 New SAP Community interest group - Integration&lt;/P&gt;&lt;P&gt;4:47 New Certification Prerequisite for SAP Build Low-Code Certification&lt;/P&gt;&lt;H3 id="toc-hId-816376386"&gt;Transcription&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;[Intro]&lt;/STRONG&gt; This is the SAP Developer News for January 23rd, 2025.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[Riley]&lt;/STRONG&gt; The annual SAP Developer Insight Survey is live now. This is the sixth annual running of the survey for us. If you've taken it before, you'll see many familiar questions, things that we use to track trends over time. There's also a deeper exploration this year of topics like generative AI for developers and also developer enablement. In the description section below, you're going to do that. to find two links. The first is actually a link to last year's report. If you haven't looked at that yet, I think you'll find the results interesting. The second link, of course, is to this year's survey. It will take about 12 to 15 minutes of your time to complete. The survey is going to be open for about six weeks. At the end of that time, we'll go off and analyze the data and produce a report that we'll share with you. So I look forward to seeing your comments at the point that we do that. In the meantime, dive into the links, explore it, and we appreciate your feedback. It's important because it helps us shape the programs that we use within the community for 2025. Thank you.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[DJ]&lt;/STRONG&gt; Good morning. Storm Éowyn is on its way. It's already bitterly cold. It's starting to rain and the winds are gathering. But I've just got time before I got on my run to tell you about the grassroots annual SAP Tech Conference of the year. That is, of course, Code Connect. Happy way again this year, in the usual place, certainly unruped, in Germany, near Walldorf. In the usual time of year, it's the first full week in July, and we have two usual suspect one-day conferences, the awesome recap and the amazing UI5con, and Code Connect is joined this by a new conference HANA TechCon. So we're also planning to run a couple of CodeJams on the Monday, the first day of the Code Connect week. So let us know if you're interested in those too. For those traveling from afar, there's also an early bird ticket application process. Anyway, all the links are in the description. I'm going to be there and I hope to see you there too.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[Thomas]&lt;/STRONG&gt; Hey, I wanted to tell you about the new release of the SAP Cloud SDK for AI. This is a great tool for JavaScript developers to be able to build your own custom AI orchestration services and interactive applications. In this new 1.6 release, we see the inclusion of image recognition in the orchestration service, as well as screaming. capabilities in the orchestration client. So if your JavaScript developer looking to get started with SAP AI capabilities, be sure to check out this new release of the SAP Cloud SDK for AI. AI.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[Daniel]&lt;/STRONG&gt; SAP Build Process Automation is introducing a new type of process step. Wait for an API call. The step lets you pause a process automation. and then let an external system call an API to resume it. When you add this type of step to your process, you are creating a new trigger. But instead of this trigger creating a new process instance, it merely resumes an existing instance that had already been paused by the step. The idea is to allow process automation to integrate with external systems and let those systems take over part of the process and then signal back to the process instance that it has finished. It seems like it'll open up a world of possible integration scenarios with process automation. I've written a blog on how to use it, step by step, and I will leave a link to the blog post in the description.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[Antonio]&lt;/STRONG&gt; Holla, SAP developers. Did you know that there is a new interest group in SAP community which focuses completely on the integration topic? This is our place to share and connect with a collaborative community of integration developers. Now, what are you waiting for? Go and join a new group. I'm including the link in the description.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;[Thomas]&lt;/STRONG&gt; I'd like to tell you about a new edition into the certification experience, particularly for SAP build low code no code certification. SAP is adding a new hands-on practical portion of the certification experience. This is a free learning course that comes with system access to allow you to execute exercises to get hands-on practical experience. This is part of a new effort by SAP to bring more practical capabilities and testing as part of the certification experience. So check out the links in the show notes for the addition to the certification, the particular certification that's involved, as well as the free experience learning journey that you can take to get ready for that certification.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-developer-news-january-23rd-2025/ba-p/13994568"/>
    <published>2025-01-23T21:10:00.156000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-1/ba-p/14008014</id>
    <title>SAP BTP Accessing Feature Flag using ClientCredentials Destination. Part - 1</title>
    <updated>2025-02-05T13:14:44.184000+01:00</updated>
    <author>
      <name>DebashishDas</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/121928</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction to SAP Feature Flags&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The SAP Feature Flags service is designed to help developers manage feature toggles efficiently. By using feature flags, you can control the availability of new features in your application dynamically. This blog post will walk you through a simple application that accesses a feature flag from the Feature Flag dashboard and uses its return value to control application behavior based on different requirements.&lt;/P&gt;&lt;P&gt;Let's not discuss more about it, rather jump into the action. You can find the more details in sap documentation - &lt;A href="https://discovery-center.cloud.sap/serviceCatalog/feature-flags-service?region=all" target="_blank" rel="noopener nofollow noreferrer"&gt;link&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Pre-Requisites&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Before diving into the implementation, ensure you have the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SAP BTP Feature Flag subscription&lt;/LI&gt;&lt;LI&gt;Feature Flag Instance&lt;/LI&gt;&lt;LI&gt;Flag created in the Feature Flag Dashboard&lt;/LI&gt;&lt;LI&gt;Destination instance&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For this demo, we have set up the SAP BTP Feature Flag service, created an instance of the feature flag service, and a destination named featureflagdest.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_1-1738757091797.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222231i3BBF726955FD079B/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_1-1738757091797.png" alt="DebashishDas_1-1738757091797.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Setting Up the Environment&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Creating the Certificate&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;First, create the necessary certificates for OAuth2ClientCredentials authentication.&lt;/P&gt;&lt;P&gt;Use the following commands in the BTP command prompt:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf service-key feature-flag flag-key | sed '/Getting key/d' | jq --raw-output .credentials.x509.certificate &amp;gt; mtls-certificate.pem
cf service-key feature-flag flag-key | sed '/Getting key/d' | jq --raw-output .credentials.x509.key &amp;gt; mtls-private-key.pem&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Both of these commands will extract certificate details and store in .pem files.&lt;/P&gt;&lt;P&gt;Combine the contents of mtls-certificate.pem and mtls-private-key.pem into a single certificate.pem file and upload it to the certificates section inside the destination service featureflagdest.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_2-1738757091801.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222233i9491B8B3EEE65C24/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_2-1738757091801.png" alt="DebashishDas_2-1738757091801.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_3-1738757091802.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222232iF51753D68DC12756/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_3-1738757091802.png" alt="DebashishDas_3-1738757091802.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Creating the Destination&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create a destination named FeatureDest with the following details:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: FeatureDest&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;: HTTP&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;URL&lt;/STRONG&gt;: &lt;A href="https://feature-flags.cfapps" target="_blank" rel="noopener nofollow noreferrer"&gt;https://feature-flags.cfapps&lt;/A&gt;.&amp;lt;region&amp;gt;.hana.ondemand.com&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Proxy Type&lt;/STRONG&gt;: Internet&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;: OAuth2ClientCredentials&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Use mTLS for token retrieval&lt;/STRONG&gt;: Checked&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Client ID&lt;/STRONG&gt;: &amp;lt;Service Key Credential-&amp;gt; x509-&amp;gt; client_id &amp;gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token Service Key Store Location&lt;/STRONG&gt;: certificate.pem&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token Service Key Store Password&lt;/STRONG&gt;: Auto-generated from certificate.pem&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token Service URL Type&lt;/STRONG&gt;: Dedicated&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token Service URL&lt;/STRONG&gt;: &lt;A href="https://trial-" target="_blank" rel="noopener nofollow noreferrer"&gt;https://trial-&lt;/A&gt;&amp;lt;subdomain&amp;gt;.authentication.cert.&amp;lt;region&amp;gt;.hana.ondemand.com/oauth/token&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Most of the inputs we will get from the flag-key credentials –&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_4-1738757091816.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222234iE8C7EC1C009E0452/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_4-1738757091816.png" alt="DebashishDas_4-1738757091816.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;We are done creating our destination. We could use Basic Authentication method but thought to use certificate-based ClientCredentials authentication and how to create the .pem file out of the service key.&lt;/P&gt;&lt;P&gt;In the next part we will develop a small application to access the Feature Flag.&lt;/P&gt;&lt;P&gt;--&amp;gt; &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-2/ba-p/14008046" target="_self"&gt;SAP BTP Accessing Feature Flag using ClientCredentials Destination. Part - 2&lt;/A&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-1/ba-p/14008014"/>
    <published>2025-02-05T13:14:44.184000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-2/ba-p/14008046</id>
    <title>SAP BTP Accessing Feature Flag using ClientCredentials Destination. Part - 2</title>
    <updated>2025-02-05T13:39:46.438000+01:00</updated>
    <author>
      <name>DebashishDas</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/121928</uri>
    </author>
    <content>&lt;P&gt;In Previous &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-1/ba-p/14008014" target="_self"&gt;Part-1&lt;/A&gt; we configured the destination through which we will access feature flags. Now we will develop an application. We could use a Simple NodeJs application to access BTP instance, but again thought of developing using sap cloud sdk as described by SAP.&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;&lt;EM&gt;How to develop a simple nodeJS application, you can follow one of my existing blog posts or any other out there in internet.&lt;/EM&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-members/run-nodejs-in-sap-btp-and-locally-part-1/ba-p/13552757" target="_blank"&gt;&lt;EM&gt;Run NodeJs in SAP BTP and Locally, Part - 1&lt;/EM&gt;&lt;/A&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;(** Note: The blog was written earlier, you may have to adjust the npm packages and little modifications in the code.)&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;Let’s Start with some command to install packages –&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Setting Up the Project&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;1. Install NestJS&lt;/STRONG&gt;: (documentation on NestJS - &lt;A href="https://docs.nestjs.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;link&lt;/A&gt; )&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i -g @nestjs/cli&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2&lt;/STRONG&gt;.&amp;nbsp;&lt;STRONG&gt;Scaffold an Application&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;nest new featureflagsapcloudsdk
cd featureflagsapcloudsdk&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;3.&amp;nbsp;&lt;STRONG&gt;Install OpenAPI Generator&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm install -D -cloud-sdk/openapi-generator&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;4.&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Download and Set Up FeatureFlagsAPI.yaml&lt;/STRONG&gt;:&lt;/P&gt;&lt;OL&gt;&lt;UL&gt;&lt;LI&gt;Download from SAP Business Accelerator Hub.&lt;/LI&gt;&lt;LI&gt;Create folders resources/service-specs and upload FeatureFlagsAPI.yaml. &lt;A href="https://api.sap.com/api/FeatureFlagsAPI/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/FeatureFlagsAPI/overview&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_1-1738757949656.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222238i6B6583189AF1254E/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_1-1738757949656.png" alt="DebashishDas_1-1738757949656.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;5. Create a file options-per-service.json and store in the same folder ‘resources/service-specs’.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "resources/service-specs/FeatureFlagsAPI.yaml": {}
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;6. Install SAP Cloud SDK OpenAPI Package&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i -cloud-sdk/openapi&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;7.&amp;nbsp;&lt;STRONG&gt;Generate Typed Client&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npx openapi-generator --input resources/service-specs --outputDir src/generated&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This will generate the below like folders and files –&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_2-1738757949657.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222239i4DFDF9FDCC6AAC5F/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_2-1738757949657.png" alt="DebashishDas_2-1738757949657.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;All the calls or routing will be navigating from app.controller.ts file. These files will be generated by-default.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_3-1738757949658.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222237iF4FE959A048FB6D9/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_3-1738757949658.png" alt="DebashishDas_3-1738757949658.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;8. Implementing the Application&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Modify app.controller.ts and app.service.ts to include methods for accessing the feature flag.&lt;/P&gt;&lt;P&gt;These applications are based on typescript which generated by sap cloud sdk, but for the demo purposes we are avoiding the types. Mostly we are providing &amp;lt;any&amp;gt; as assigning and return type.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;app.controller.ts&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_4-1738757949659.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222241i89204DBE5452C642/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_4-1738757949659.png" alt="DebashishDas_4-1738757949659.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;app.service.ts&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;Add “import { EvaluateV2Api } from './generated/FeatureFlagsAPI';”&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_5-1738757949660.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222242i0C7CF2D8033FFE10/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_5-1738757949660.png" alt="DebashishDas_5-1738757949660.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;9. Deploying the Application&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now let’s create a manifest file to deploy and bind with other resources –&lt;/P&gt;&lt;P&gt;Destination Featureflagdest already&lt;/P&gt;&lt;P&gt;&lt;FONT size="2"&gt;** I am not very much worried about the authentication here now. So only using the Destination service.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;manifest.yaml will look like below –&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_6-1738757949661.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222240iA4FA1F1DF6AC5D8D/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_6-1738757949661.png" alt="DebashishDas_6-1738757949661.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Before deploying use the below Command,&amp;nbsp;which is must each time you make any changes to any files.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;nest build&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now deploy manifest file to BTP Cloud foundry using Command&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf push&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_7-1738757949662.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222245i849D8C098C12A793/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_7-1738757949662.png" alt="DebashishDas_7-1738757949662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;10. Run the Application&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In BTP, Application is in running state and started.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_8-1738757949664.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222246i7EB766E241F92ED9/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_8-1738757949664.png" alt="DebashishDas_8-1738757949664.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Execute the module with the path /feature-flag&lt;/P&gt;&lt;P&gt;Here is the output when flag is set to true&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_9-1738757949665.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222243i6D68A4AC414C1468/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_9-1738757949665.png" alt="DebashishDas_9-1738757949665.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_10-1738757949666.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222248i18FE098649903404/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_10-1738757949666.png" alt="DebashishDas_10-1738757949666.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When the flag is false&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_11-1738757949666.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222249i98B75D141020B941/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_11-1738757949666.png" alt="DebashishDas_11-1738757949666.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DebashishDas_12-1738757949667.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/222247i3954091E7101F90F/image-size/large?v=v2&amp;amp;px=999" role="button" title="DebashishDas_12-1738757949667.png" alt="DebashishDas_12-1738757949667.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Code Snippet –&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;app.controller.ts&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { Controller, Get, HttpException } from '@nestjs/common';
import { AppService } from './app.service';
@Controller()
export class AppController {
  constructor(private readonly appService: AppService) { }
  @Get('/feature-flag')
  getFeatureFlag(): any {    
    return this.appService.getFlag()
    .then(response =&amp;gt; {
      return response;
    })
    .catch(error =&amp;gt; {
      throw new HttpException(
        `Failed to get Feature Flags - ${error.message}`,
        500
      )
    })
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;app.service.ts&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { Injectable, Get ,HttpException } from '@nestjs/common';
import { EvaluateV2Api } from './generated/FeatureFlagsAPI';
@Injectable()
export class AppService {
  async getFlag(): Promise&amp;lt;any&amp;gt; {
    return EvaluateV2Api
          .getV2EvaluateById('&amp;lt;feature_flag_name&amp;gt;', { identifier: '&amp;lt;tenant_id&amp;gt;'})
          .setBasePath('https://feature-flags.cfapps.&amp;lt;region&amp;gt;.hana.ondemand.com/api')
          .execute({ destinationName: '&amp;lt;destination_name&amp;gt;' });
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;manifest.yaml&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;applications:
  - name: featureflagsdk  
    path: .
    buildpacks:
      - nodejs_buildpack
    memory: 256M
    command: npm run start:prod
    random-route: true
    services:
      - featureflagdest&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1960130043"&gt;Conclusion:&amp;nbsp;&lt;/H4&gt;&lt;P&gt;&lt;SPAN&gt;By following this posts, you will get the guidance of how to access the BTP Feature flags and use in your different scenarios.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you have any questions or faced challenges, feel free to drop a comment below.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;References –&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/feature-flags-service/sap-feature-flags-service/what-is-sap-feature-flags-service" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/feature-flags-service/sap-feature-flags-service/what-is-sap-feature-flags-service&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://api.sap.com/api/FeatureFlagsAPI/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/FeatureFlagsAPI/overview&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://sap.github.io/cloud-sdk/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-accessing-feature-flag-using-clientcredentials-destination-part-2/ba-p/14008046"/>
    <published>2025-02-05T13:39:46.438000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929</id>
    <title>SAP BTP: Cloud Application Programming Model</title>
    <updated>2025-03-04T07:09:41.141000+01:00</updated>
    <author>
      <name>SekhuteTK</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/15314</uri>
    </author>
    <content>&lt;P&gt;SAP Cloud Application Programming (CAP) Model exposes the ability to extend standard Cloud, on-premises and hybrid application functionality with flexible custom business logic scripted using the developer’s choice of programing language (SQL, SQL Script, Python, Node.js and JavaScript) and exposing the functionality to various user interfaces (UIs) e.g. Microsoft Power Bi, SAP Fiori, Dataiku and Google Big Query using various integration frameworks e.g. OData v4,JDBC/ODBC depending on the case study.&lt;/P&gt;&lt;P&gt;The developer takes pride in delivering a scalable extended functionality, embedding robust real-time monitoring capabilities to ensure a health life cycle and protecting the functionality with secure authentication protocols e.g. OAuth 2.0, JWT Bearer, SAML version 2.0 and RFC Specification.&lt;/P&gt;&lt;P&gt;Furthermore, the developer ensures a reliable and robust solutions by implementing continuous integration and continuous delivery CI/CD pipelines that automates testing, building and deployment of code changes this strategy ensures a speedy development and delivery cycle.&lt;/P&gt;&lt;P&gt;Traditionally developers extended business logic directly on-premises on the ABAP application server. With the ever-changing world of technology, digital transformation has become essential for organization to say afloat of competitors and therefore the programming model paradigms and capabilities of extending SAP solutions have evolved drastically and provides a seamless experience into the cloud.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Programming model.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232631i560CE0B01EB4E6CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Programming model.png" alt="Programming model.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 1: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Architectural Paradigm Shift from Classic ABAP App server to CAP App server&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Thomas Jung, &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426" target="_blank"&gt;&lt;STRONG&gt;SAP HANA Extended Application Services&lt;/STRONG&gt;&lt;/A&gt; blog, URL: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;The SAP Cloud Application model comes with a rich set of languages, libraries, and tools for building enterprise-grade services and applications. It guides developers along a 'golden path' of proven&amp;nbsp;best practices&amp;nbsp;&amp;nbsp;and a great wealth of&amp;nbsp;out-of-the-box solutions&amp;nbsp;&amp;nbsp;to recurring tasks:&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="cap.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232633i1EC9379A4BB0DAA1/image-size/large?v=v2&amp;amp;px=999" role="button" title="cap.png" alt="cap.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 2: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;SAP Cloud Application Model Architecture&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source &lt;A href="HTTPS://Cap.cloud.sap" target="_blank" rel="nofollow noopener noreferrer"&gt;HTTPS://Cap.cloud.sap&lt;/A&gt; , U&lt;/EM&gt;&lt;EM&gt;RL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://cap.cloud.sap/docs/about/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://cap.cloud.sap/docs/about/&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The below diagram categories the skill set of SAP Cloud Developer based on the scope of the development either being ABAP or Non-ABAP. Each with its unique set of tools and methodologies:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ABAP VS NON.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232635i61C63058B7D72485/image-size/large?v=v2&amp;amp;px=999" role="button" title="ABAP VS NON.png" alt="ABAP VS NON.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 3:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;&amp;nbsp;SAP Cloud Developer skill set&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Building side-by-side extensions on SAP BTP, URL: &lt;A href="https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0" target="_blank" rel="noopener noreferrer"&gt;https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The Cloud Application Programming model enables a collaboration of agile cross functional teams inclusive of but not limited, depending on the scope of the development: &amp;nbsp;citizen developers (low-code/no-code), Professional developers (Scripting, OOP), business analysts, data engineers and application specialists to model robust data models:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Cross functional.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232636i237D8D5BBD7CB069/image-size/large?v=v2&amp;amp;px=999" role="button" title="Cross functional.png" alt="Cross functional.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 4:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Agile cross functional team&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: &lt;STRONG&gt;Investigating the Impact of Cross-Functional Teams on Business Success&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;URL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://www.iienstitu.com/en/blog/cross-functional-teams" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.iienstitu.com/en/blog/cross-functional-teams&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;SAP Cloud Application Programming (CAP) Model enables a culture where people regardless of their title or background, work together to imagine, develop, deploy, and operate a solution. This strengthens the trust between employees and authentic healthy work relationships.&lt;/P&gt;&lt;P&gt;Thank you all for taking a glimpse into the above Content. Please don’t for get to like, comment and share.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Abbreviations:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;APP: &lt;/STRONG&gt;Application&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CAP: &lt;/STRONG&gt;Cloud Application Programing&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CDS&lt;/STRONG&gt;: Core Data Services&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CI/CD:&lt;/STRONG&gt; Continuous Integration and Continuous Delivery&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;JWT&lt;/STRONG&gt;: JSON Web token&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;OData: &lt;/STRONG&gt;Open Data Protocol&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;RFC&lt;/STRONG&gt;: Remote Function Call&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SAML&lt;/STRONG&gt;: Security Assertion Markup Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SQL:&lt;/STRONG&gt; Structured Query Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;UIs:&lt;/STRONG&gt; User Interfaces&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929"/>
    <published>2025-03-04T07:09:41.141000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/autoloading-data-in-sap-fiori-apps-using-sap-capm-backend/ba-p/14052254</id>
    <title>Autoloading Data in SAP Fiori Apps Using SAP CAPM Backend</title>
    <updated>2025-04-10T16:54:38.645000+02:00</updated>
    <author>
      <name>Guru_Charan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451110</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Step-1&lt;/U&gt;&lt;/STRONG&gt; :&amp;nbsp;&lt;STRONG&gt;Locate&amp;nbsp;&lt;/STRONG&gt;the&amp;nbsp;&lt;STRONG&gt;Manifest.json&amp;nbsp;&lt;/STRONG&gt;in your application.&lt;/P&gt;&lt;P&gt;Step-2 : State the changes as shown below in the code.&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;      "targets": {
        "RecordList": {
          "type": "Component",
          "id": "RecordList",
          "name": "sap.fe.templates.ListReport",
          "options": {
            "settings": {
              "contextPath": "/Record",
              "variantManagement": "Page",
              "initialLoad":true, //Make the intial-load to true
              "navigation": {
                "Record": {
                  "detail": {
                    "route": "RecordObjectPage"
                  }
                }
              },&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;Step-3&lt;/STRONG&gt; : Make the i&lt;STRONG&gt;ntialLoad : true, &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;contextPath: Refers to the entity set exposed by your CAP service (e.g., /Record).&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-4&lt;/STRONG&gt; : Run your your &lt;STRONG&gt;sap fiori-application &amp;amp;&amp;nbsp;&lt;/STRONG&gt;See the magic that happens.&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Final Verdict:&lt;/STRONG&gt;&lt;/U&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Enabling initialLoad: true is a subtle but impactful enhancement that can significantly improve user experience in SAP Fiori List Report applications. However, like any performance-related tweak, it should be applied thoughtfully based on the app’s business purpose, dataset size, and user expectations.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;div class="lia-spoiler-container"&gt;&lt;a class="lia-spoiler-link" href="#" rel="nofollow noopener noreferrer"&gt;Spoiler&lt;/a&gt;&lt;noscript&gt; (Highlight to read)&lt;/noscript&gt;&lt;div class="lia-spoiler-border"&gt;&lt;div class="lia-spoiler-content"&gt;&lt;span class="lia-unicode-emoji" title=":megaphone:"&gt;📣&lt;/span&gt;I will give only the conditions when the initial-load is not to be used &amp;amp; consider using in other conditions&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;/div&gt;&lt;noscript&gt;&lt;div class="lia-spoiler-noscript-container"&gt;&lt;div class="lia-spoiler-noscript-content"&gt;I will give only the conditions when the initial-load is not to be used &amp;amp; consider using in other conditions&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/div&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1835488134"&gt;&lt;span class="lia-unicode-emoji" title=":cross_mark:"&gt;❌&lt;/span&gt; When &lt;EM&gt;Not&lt;/EM&gt; to Use initialLoad: true?&lt;/H3&gt;&lt;P class=""&gt;1)Your app handles large datasets or complex queries without filtering.&lt;BR /&gt;2) Real-time, always-fresh data is mandatory (e.g., live inventory counts).&lt;BR /&gt;3) You rely heavily on dynamic filters that users apply manually before loading.&lt;BR /&gt;4) There's a risk of backend performance bottlenecks on auto-load.&lt;BR /&gt;5) You're building an app with heavy personalization or variant management that changes frequently.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/autoloading-data-in-sap-fiori-apps-using-sap-capm-backend/ba-p/14052254"/>
    <published>2025-04-10T16:54:38.645000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/using-the-sap-cloud-javascript-sdk-for-ai/ba-p/14140582</id>
    <title>Using the SAP Cloud Javascript SDK for AI</title>
    <updated>2025-07-02T14:15:32.107000+02:00</updated>
    <author>
      <name>aliulashayir</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2035254</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1604971718"&gt;&lt;STRONG&gt;Using the SAP Cloud Javascript SDK for AI &lt;/STRONG&gt;&lt;/H1&gt;&lt;DIV&gt;&lt;H1 id="toc-hId-1408458213"&gt;Introduction&lt;/H1&gt;&lt;P&gt;In this blog, We will build a Node.js Service with authenticaton that Talks to SAP Generative AI Hub. We’ll spin up a tiny Express server, protect it with XSUAA, call an OpenAI model (gpt-4o-mini) deployed in the Generative AI Hub, and push the whole thing to Cloud Foundry.&lt;/P&gt;&lt;P&gt;Source code is ~70 lines; everything else is service wiring.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1341027427"&gt;Table of Contents&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_9151997441751361469182" target="_self" rel="nofollow noopener noreferrer"&gt;Prerequisites&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_830909271151751361475377" target="_self" rel="nofollow noopener noreferrer"&gt;Step 1 — Destination services&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_839652719261751361482623" target="_self" rel="nofollow noopener noreferrer"&gt;Step 2 — Create the XSUAA instance&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_716093466351751361488585" target="_self" rel="nofollow noopener noreferrer"&gt;Step 3 — Scaffold the Node project&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_991084637431751361494195" target="_self" rel="nofollow noopener noreferrer"&gt;Step 4 — Deploy to BTP&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_102502829501751361501241" target="_self" rel="nofollow noopener noreferrer"&gt;Step 5 — Test with Postman&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="#h_578059860561751361515951" target="_self" rel="nofollow noopener noreferrer"&gt;Useful Links&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1144513922"&gt;1 · Prerequisites&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;BTP sub-account&lt;/STRONG&gt; (any region)&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Generative AI Hub&lt;/STRONG&gt; enabled in BTP Cockpit&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Node.js ≥ 18&lt;/STRONG&gt; &amp;amp; &lt;STRONG&gt;cf CLI v8&lt;/STRONG&gt; - &lt;A href="https://nodejs.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://nodejs.org&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Postman&lt;/STRONG&gt; - &lt;A href="https://www.postman.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.postman.com/&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;VSCode&lt;/STRONG&gt; - &lt;A href="https://code.visualstudio.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://code.visualstudio.com/&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;AI Core Instance &amp;amp; Service Key&lt;/STRONG&gt; created from BTP&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-948000417"&gt;2 · Step 1 — Create Destination Service&lt;/H2&gt;&lt;P&gt;Creation of a Destination Service is needed as we will be using it to connect to our GenAI hub instance. There is a way to define custom destination programatically mentioned here.&lt;/P&gt;&lt;P&gt;&lt;A href="https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#register-destination" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#register-destination&lt;/A&gt;&lt;/P&gt;&lt;P&gt;However from my testing I just couldn’t got it to connect to my genai instance. So I will be creating a destination following the documentation&lt;/P&gt;&lt;P&gt;&lt;A href="https://sap.github.io/ai-sdk/docs/js/connecting-to-ai-core" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/ai-sdk/docs/js/connecting-to-ai-core&lt;/A&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Create the Destination Service&lt;/STRONG&gt;&lt;P&gt;Go to the Instances and Subscriptions and click the create button to the right&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ekran_Resmi_2025-06-30_15.15.36.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281149i8979DCAA79E66865/image-size/large?v=v2&amp;amp;px=999" role="button" title="Ekran_Resmi_2025-06-30_15.15.36.png" alt="Ekran_Resmi_2025-06-30_15.15.36.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;DIV&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/Ekran_Resmi_2025-06-30_15.15.36.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/Ekran_Resmi_2025-06-30_15.15.36.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;P&gt;Select the Destination Service and name it whatever you like&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281151i87CC394DEAA07B53/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;/DIV&gt;&lt;P&gt;Click on the newly created Destination Service Instance and create a Service Key for it&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ekran_Resmi_2025-06-30_15.25.51.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281152iA1A748EEB9B3CFCA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Ekran_Resmi_2025-06-30_15.25.51.png" alt="Ekran_Resmi_2025-06-30_15.25.51.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/Ekran_Resmi_2025-06-30_15.25.51.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/Ekran_Resmi_2025-06-30_15.25.51.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;P&gt;And then click the 3 dots up on the right corner and go to option View Dashboard here we will be creating a destination. Create a HTTP destination and select Authentication type as “OAuth2ClientCredentials” paste-in the values you have beforehand from the AI Core Service service key.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image 1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281155iA5F9BCED8B239FDC/image-size/large?v=v2&amp;amp;px=999" role="button" title="image 1.png" alt="image 1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-880569631"&gt;Important!&lt;/H3&gt;&lt;P&gt;Make sure to add /oauht/token to the end of your Token Service URL if there is none.&lt;/P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%201.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%201.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;P&gt;Click Check Connection. It will give a message;&lt;/P&gt;&lt;BLOCKQUOTE&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;Connection to "my-aicore" established. Response returned: "404: Not Found”.&lt;/BLOCKQUOTE&gt;&lt;P&gt;This is fine as we are not sending a request to the destination yet.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-554973407"&gt;3 · Step 2 — Create XSUAA Service and Service Key&lt;/H2&gt;&lt;P&gt;Just like the steps we did when creating our Destination Service create an Authorization and Trust Management (XSUAA) service instance and then create a service key for it.&lt;/P&gt;&lt;P&gt;Only thing to pay attention is to select plan “broker” when creating the service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image 2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281153i157063A01410E110/image-size/large?v=v2&amp;amp;px=999" role="button" title="image 2.png" alt="image 2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%202.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%202.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;P&gt;Then just create the service keys for this service aswell.&lt;/P&gt;&lt;H2 id="toc-hId-358459902"&gt;4 · Step 3 — Scaffold the Node project&lt;/H2&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mkdir genai-node &amp;amp;&amp;amp; cd genai-node
npm init -y
npm i express -ai-sdk/foundation-models
npm i cfenv /xssec
npm i -D typescript rimraf
npm i -D @types/express @types/cfenv to the
npx tsc --init --outDir dist --rootDir src \
 --target es2022 --module es2022 \
 --moduleResolution node --esModuleInterop tru
mkdir src
touch .cfignore #here put the paths of the files you don't want to deploy to BTP&lt;/code&gt;&lt;/pre&gt;&lt;BLOCKQUOTE&gt;&lt;span class="lia-unicode-emoji" title=":warning:"&gt;⚠️&lt;/span&gt;TypeScript typings &amp;amp; Express version&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;This tutorial uses &lt;/STRONG&gt;&lt;STRONG&gt;express@5.1&lt;/STRONG&gt; (bundles its own .d.ts files).&lt;P&gt;&lt;STRONG&gt;Do &lt;/STRONG&gt;&lt;EM&gt;&lt;STRONG&gt;not&lt;/STRONG&gt;&lt;/EM&gt;&lt;STRONG&gt; install &lt;/STRONG&gt;&lt;STRONG&gt;@types/express&lt;/STRONG&gt;&lt;STRONG&gt; with Express 5&lt;/STRONG&gt; – VS Code will show&lt;BR /&gt;&lt;BR /&gt;&lt;EM&gt;“Duplicate identifier / Cannot redeclare …”&lt;/EM&gt; errors because two sets of&lt;BR /&gt;typings clash.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;If you decide to downgrade to &lt;STRONG&gt;express@4.x&lt;/STRONG&gt;, then you &lt;STRONG&gt;must&lt;/STRONG&gt; add&lt;P&gt;npm i -D @types/express so the compiler can find the declarations.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In both cases you can safely install the helpers below:&lt;/P&gt;&lt;/BLOCKQUOTE&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;# always safe
npm i -D @types/node @types/cfenv&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;They silence any remaining red squiggles without affecting runtime.&lt;/P&gt;&lt;P&gt;Complete tsconfig.json&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
 "compilerOptions": {
 "target": "es2022",
 "module": "es2022",
 "moduleResolution": "node",
 "rootDir": "src",
 "outDir": "dist",
 "esModuleInterop": true,
 "allowSyntheticDefaultImports": true,
 "skipLibCheck": true // turns off deep type-checking in node_modules
 },
 "include": ["src/**/*.ts", "*.ts"]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Complete package.json&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
 "name": "genai-node",
 "version": "1.0.0",
 "type": "module",
 "scripts": {
 "build": "rimraf dist &amp;amp;&amp;amp; tsc",
 "start": "npm run build &amp;amp;&amp;amp; node dist/server.js"
 },
 "dependencies": {
 "@sap-ai-sdk/ai-api": "^1.15.0",
 "@sap-ai-sdk/foundation-models": "^1.15.0",
 "@sap-ai-sdk/langchain": "^1.15.0",
 "@sap-ai-sdk/orchestration": "^1.15.0",
 "@sap-cloud-sdk/connectivity": "^4.0.2",
 "@sap/xssec": "^4.8.0",
 "cfenv": "^1.2.4",
 "dotenv": "^16.5.0",
 "express": "^5.1.0"
 },
 "devDependencies": {
 "rimraf": "^6.0.1",
 "ts-node": "^10.9.2",
 "tsx": "^4.20.3",
 "typescript": "^5.8.3"
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;We compile on CF during npm start; the buildpack installs devDeps by default, so no extra steps required.&lt;/P&gt;&lt;P&gt;Create src/server.ts:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import express, { Request, Response, NextFunction } from 'express';
import { AzureOpenAiChatClient } from '@sap-ai-sdk/foundation-models';
import xssec from '@sap/xssec';
import cfenv from 'cfenv';
const app = express();
const port = process.env.PORT || 3000;
const XSUAA_SERVICE_NAME = process.env.XSUAA_SERVICE_NAME;
const appEnv = cfenv.getAppEnv();
const xsuaaService = appEnv.getService(XSUAA_SERVICE_NAME as any);
if (!xsuaaService) {
 throw new Error(`XSUAA service "${XSUAA_SERVICE_NAME}" not bound!`);
}
const uaaCreds = xsuaaService.credentials;
function verifyJwt(req: Request, _res: Response, next: NextFunction) {
 const auth = req.headers.authorization;
 if (!auth?.startsWith('Bearer ')) {
 return _res.status(403).send('Missing bearer token');
 }
 const token = auth.slice(7);
 xssec.createSecurityContext(token, uaaCreds)
 .then(() =&amp;gt; next())
.catch((e: any) =&amp;gt; {
 console.error('JWT rejected →', e.innerError ?? e.message ?? e);
 _res.status(403).send(String(e.innerError?.message ?? e.message));
});
}
const chat = new AzureOpenAiChatClient(
 {
 modelName: 'gpt-4o-mini' ,
 resourceGroup: 'your-resource-group'
 },
 {
 destinationName: 'my-aicore'
 }
);
app.post('/chat', verifyJwt express.json(), async (req, res) =&amp;gt; {
 const userMsg = String(req.body.message ?? '');
 try {
 const resp = await chat.run({
 messages: [{ role: 'user', content: userMsg }]
 });
 res.json({ answer: resp.getContent() });
 } catch (e: any) {
 console.error(e);
 res.status(500).json({ error: e?.message ?? 'server error' });
 }
});
app.listen(port, () =&amp;gt; console.log('⇢ listening on', port));&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-161946397"&gt;5 · Step 4 — Deploy to BTP&lt;/H2&gt;&lt;P&gt;manifest.yaml&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;---
applications:
 - name: genai-node
 buildpack: nodejs_buildpack
 command: npm start
 memory: 256M
 env:
 XSUAA_SERVICE_NAME: xsuaa-blog #Name of your service
 services:
 - destination-service
 - xsuaa-blog &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Push the codebase to the CloudFoundry and check if it is running&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf push
cf logs genai-node --recent&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId--34567108"&gt;5 · Step 6—Test with Postman&lt;/H2&gt;&lt;P&gt;After you deploy the application click on it to get the custom link to the app.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image 3.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281156iBA221A5F6E3CEC69/image-size/large?v=v2&amp;amp;px=999" role="button" title="image 3.png" alt="image 3.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image 4.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281157i71068D51A25A8C18/image-size/large?v=v2&amp;amp;px=999" role="button" title="image 4.png" alt="image 4.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%203.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%203.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%204.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%204.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Open up Postman and write your request with your endpoint&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;Go to the &lt;STRONG&gt;Authorization&lt;/STRONG&gt; tab → Select OAuth 2.0&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;Enter credentials&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image 5.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281154i9FD71599B30C3E13/image-size/large?v=v2&amp;amp;px=999" role="button" title="image 5.png" alt="image 5.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;A href="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%205.png" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;IMG src="https://community.sap.com/Using%20the%20SAP%20Cloud%20Javascript%20SDK%20for%20AI%2021f49ed7814680169bebea93fbfb20ae/image%205.png" border="0" alt="" /&gt;&lt;/A&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Scroll down to the “&lt;STRONG&gt;Get New Access Token&lt;/STRONG&gt;” and then “&lt;STRONG&gt;Use Token&lt;/STRONG&gt;”.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now you are good to send the request and get a result&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
 "answer": "Hello! How can I assist you today?"
}&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-116173744"&gt;7 · Useful Links&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://www.sap.com/events/teched/virtual/flow/sap/te24/catalog/page/catalog/session/1722557682293001fTqe" target="_blank" rel="noopener noreferrer"&gt;https://www.sap.com/events/teched/virtual/flow/sap/te24/catalog/page/catalog/session/1722557682293001fTqe&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/SAP-samples/teched2024-AI180" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-samples/teched2024-AI180&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://sap.github.io/ai-sdk/docs/js/connecting-to-ai-core" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/ai-sdk/docs/js/connecting-to-ai-core&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://sap.github.io/cloud-sdk/docs/js/tutorials/getting-started/introduction" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap.github.io/cloud-sdk/docs/js/tutorials/getting-started/introduction&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/using-the-sap-cloud-javascript-sdk-for-ai/ba-p/14140582"/>
    <published>2025-07-02T14:15:32.107000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-cloud-sdk-for-ai-in-an-existing-cap-nodejs-project-in-commonjs/ba-p/14169098</id>
    <title>How to use Cloud SDK for AI in an existing CAP NodeJS Project in CommonJS</title>
    <updated>2025-08-01T10:03:01.242000+02:00</updated>
    <author>
      <name>Jacky_Liu1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/132085</uri>
    </author>
    <content>&lt;P&gt;I have an existing SAP Cloud Application Program Project in CommonJs. I want to add custom AI function in it . So need to use &lt;A href="https://sap.github.io/ai-sdk/docs/js/overview-cloud-sdk-for-ai-js" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Cloud SDK for AI&amp;nbsp;&lt;/A&gt;in my project. But SAP Cloud SDK for AI only support native ESM.&amp;nbsp; Convert my existing project into ESM? I think it is too risky.&amp;nbsp; I need to use the ESM module in the CommonJs project.&amp;nbsp; At last, it works. Let me share the steps which maybe be helpful for you.&lt;/P&gt;&lt;H4 id="toc-hId-1994330268"&gt;Steps:&lt;/H4&gt;&lt;H5 id="toc-hId-1926899482"&gt;1,&amp;nbsp; Install&amp;nbsp;&lt;SPAN&gt;esbuild in the root path of my project:&lt;/SPAN&gt;&lt;/H5&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i esbuild&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-1730385977"&gt;2.&amp;nbsp; Create&amp;nbsp; folder named &lt;U&gt;&lt;EM&gt;esm&lt;/EM&gt;&lt;/U&gt; under&amp;nbsp; &lt;U&gt;&lt;EM&gt;srv&lt;/EM&gt;&lt;/U&gt;, then create a file named &lt;U&gt;&lt;EM&gt;index.js&lt;/EM&gt;&lt;/U&gt; under folder &lt;U&gt;&lt;EM&gt;esm&lt;/EM&gt;&lt;/U&gt; with the following code .&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { OrchestrationClient, buildAzureContentSafetyFilter } from '@sap-ai-sdk/orchestration';
import { AzureOpenAiEmbeddingClient } from '@sap-ai-sdk/langchain'

export { OrchestrationClient, buildAzureContentSafetyFilter, AzureOpenAiEmbeddingClient };&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-1533872472"&gt;3.&amp;nbsp; Add following script in my package.json file in project root path.&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt; "deps": "esbuild --platform=node srv/esm/index.js --bundle --outfile=srv/esm/bundle.js"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jacky_Liu1_0-1754034389278.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295028iDF153B0500979B79/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jacky_Liu1_0-1754034389278.png" alt="Jacky_Liu1_0-1754034389278.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1337358967"&gt;4.&amp;nbsp; Run the following command in the project root path in terminal.&lt;/H5&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm run deps&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jacky_Liu1_0-1754035312369.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295041i01BDB7AACC94EFE6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jacky_Liu1_0-1754035312369.png" alt="Jacky_Liu1_0-1754035312369.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1140845462"&gt;5.&amp;nbsp; Adjust the code of importing the module of &lt;U&gt;&lt;EM&gt;SAP Cloud SDK for AI &lt;/EM&gt;&lt;/U&gt;as the following.&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// const { OrchestrationClient, buildAzureContentSafetyFilter } = require('@sap-ai-sdk/orchestration');
const { OrchestrationClient, buildAzureContentSafetyFilter } = require('../esm/bundle');
// const { AzureOpenAiEmbeddingClient } = require('@sap-ai-sdk/langchain');
const { AzureOpenAiEmbeddingClient } = require('../esm/bundle');&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The ends!&lt;/P&gt;&lt;P&gt;Thanks for your time!&lt;/P&gt;&lt;P&gt;Jacky Liu&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-cloud-sdk-for-ai-in-an-existing-cap-nodejs-project-in-commonjs/ba-p/14169098"/>
    <published>2025-08-01T10:03:01.242000+02:00</published>
  </entry>
</feed>
