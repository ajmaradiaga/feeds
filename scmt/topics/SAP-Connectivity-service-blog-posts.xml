<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Connectivity-service-blog-posts.xml</id>
  <title>SAP Community - SAP Connectivity service</title>
  <updated>2025-10-08T11:12:40.061048+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Connectivity service/pd-p/67837800100800004901" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Connectivity service blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/next-in-the-sap-garage-integrate-sap-s-4hana-with-microsoft-teams-via-sap/ba-p/13576419</id>
    <title>Next in the SAP Garage – Integrate SAP S/4HANA with Microsoft Teams via SAP Business Technology Platform.</title>
    <updated>2023-09-05T14:40:09+02:00</updated>
    <author>
      <name>gauravdey</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/183532</uri>
    </author>
    <content>&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/Screenshot-2023-09-05-172942.png" height="347" width="693" /&gt;&lt;/P&gt;&lt;BR /&gt;
In the September 2023 edition of SAP Garage we feature this use case that highlights how to extend the business processes in SAP S/4HANA to the Microsoft Teams app, by using the SAP BTP Bridge Framework.&lt;BR /&gt;
&lt;BR /&gt;
The demo will focus on how to use the Bridge Framework to view the SAP S/4HANA purchase order data, update purchase order data if needed, and perform the release purchase order process in the Microsoft Teams.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN data-contrast="auto"&gt;Date of the session&lt;/SPAN&gt;&lt;SPAN data-ccp-props="{}"&gt;&amp;nbsp;–&amp;nbsp;&lt;STRONG&gt;September 6th, 2023, Wednesday&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI data-leveltext="" data-font="Symbol" data-listid="1" data-list-defn-props="{&amp;quot;335552541&amp;quot;:1,&amp;quot;335559684&amp;quot;:-2,&amp;quot;335559685&amp;quot;:720,&amp;quot;335559991&amp;quot;:360,&amp;quot;469769226&amp;quot;:&amp;quot;Symbol&amp;quot;,&amp;quot;469769242&amp;quot;:[8226],&amp;quot;469777803&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;469777804&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;469777815&amp;quot;:&amp;quot;hybridMultilevel&amp;quot;}" data-aria-posinset="2" data-aria-level="1"&gt;&lt;SPAN data-contrast="auto"&gt;SAP Discovery Center mission to be featured :&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://discovery-center.cloud.sap/missiondetail/4164/4408/" target="_blank" rel="noopener nofollow noreferrer"&gt;Integrate SAP S/4HANA with Microsoft Teams via SAP Business Technology Platform&lt;/A&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;A href="https://webinars.sap.com/2023-01-01-sap-ie-btp-garage-webinar-series/en/registration.aspx" target="_blank" rel="noopener noreferrer"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2022/07/Register.png" /&gt;&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;&lt;SPAN data-contrast="none"&gt;Meet the Experts:&lt;/SPAN&gt;&lt;/B&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/v.jpg" height="180" width="176" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;viancu&lt;/SPAN&gt;, is a Developer for the Strategic Customer Engagements team of SAP Platform Adoption and Advisory. He works alongside fellow developers, designers, and data scientists to harness the power of SAP BTP to deliver innovative solutions to customers. He began his SAP journey during college as a frontend development intern for SAP Ariba’s Guided Buying team. Since then, his fulltime role has expanded to include full-stack development centered around SAP BTP and the broader SAP Ecosystem. Victor’s most recent work has focused on bringing two worlds—SAP and Microsoft Teams—closer together through an integration solution on BTP.”&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/a.png" height="180" width="176" /&gt;&lt;/P&gt;&lt;BR /&gt;
Alex Bishka, a Developer in the Strategic Customer Engagements team of SAP Platform Adoption and Advisory. Alex started at SAP under the SAP Next Talent program. Since joining the team, Alex has focused on full stack development and automation around SAP BTP technologies: specifically on his current project which aims to bridge the gap between SAP and Microsoft Teams by implementing an integration solution via BTP.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/w.jpg" height="180" width="176" /&gt;&lt;/P&gt;&lt;BR /&gt;
Weikun Liu, a Software Developer from SAP T&amp;amp;I Strategic Customer Engagements team.​ He is an experienced software development engineer with 4+ years 'experience on crafting efficient and scalable back-end distributed systems within cloud environments. As a Software Developer at SAP Labs, Palo Alto, he collaborated closely with customers, orchestrating the development and delivery of systems for combining SAP Business Technology Platform (BTP) and other hyperscaler services.&lt;BR /&gt;
&lt;BR /&gt;
&lt;B&gt;&lt;SPAN data-contrast="none"&gt;Missed our last call?&lt;/SPAN&gt;&lt;/B&gt;&lt;BR /&gt;
&lt;BR /&gt;
No worries you can revisit the session with details below –&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI data-leveltext="" data-font="Symbol" data-listid="3" data-list-defn-props="{&amp;quot;335552541&amp;quot;:1,&amp;quot;335559684&amp;quot;:-2,&amp;quot;335559685&amp;quot;:720,&amp;quot;335559991&amp;quot;:360,&amp;quot;469769226&amp;quot;:&amp;quot;Symbol&amp;quot;,&amp;quot;469769242&amp;quot;:[8226],&amp;quot;469777803&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;469777804&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;469777815&amp;quot;:&amp;quot;hybridMultilevel&amp;quot;}" data-aria-posinset="1" data-aria-level="1"&gt;&lt;SPAN data-contrast="auto"&gt;Topic :&amp;nbsp;&lt;A href="https://discovery-center.cloud.sap/missiondetail/4172/4422/" target="_blank" rel="noopener nofollow noreferrer"&gt;Build Events-to-Business Actions Apps with SAP BTP and MS Azure/AWS&lt;/A&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI data-leveltext="" data-font="Symbol" data-listid="3" data-list-defn-props="{&amp;quot;335552541&amp;quot;:1,&amp;quot;335559684&amp;quot;:-2,&amp;quot;335559685&amp;quot;:720,&amp;quot;335559991&amp;quot;:360,&amp;quot;469769226&amp;quot;:&amp;quot;Symbol&amp;quot;,&amp;quot;469769242&amp;quot;:[8226],&amp;quot;469777803&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;469777804&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;469777815&amp;quot;:&amp;quot;hybridMultilevel&amp;quot;}" data-aria-posinset="2" data-aria-level="1"&gt;&lt;SPAN data-contrast="auto"&gt;Speakers&lt;/SPAN&gt;&lt;SPAN data-ccp-props="{}"&gt; :&amp;nbsp;&lt;/SPAN&gt;Praveen Kumar Padegal, Development Expert &amp;amp; Ajit Kumar Panda, Architect, Platform Adoption &amp;amp; Advisory team&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI data-leveltext="" data-font="Symbol" data-listid="3" data-list-defn-props="{&amp;quot;335552541&amp;quot;:1,&amp;quot;335559684&amp;quot;:-2,&amp;quot;335559685&amp;quot;:720,&amp;quot;335559991&amp;quot;:360,&amp;quot;469769226&amp;quot;:&amp;quot;Symbol&amp;quot;,&amp;quot;469769242&amp;quot;:[8226],&amp;quot;469777803&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;469777804&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;469777815&amp;quot;:&amp;quot;hybridMultilevel&amp;quot;}" data-aria-posinset="3" data-aria-level="1"&gt;Link to&amp;nbsp;&lt;A href="https://youtu.be/NrJXjWVg6c4" target="_blank" rel="noopener nofollow noreferrer"&gt;Recording&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;B&gt;&lt;SPAN data-contrast="none"&gt;Join us.&amp;nbsp;&lt;/SPAN&gt;&lt;/B&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN data-contrast="auto"&gt;Thank you for all of the positive feedback we continue to receive about the SAP Garage series. We are thrilled to bring you top SAP BTP use cases and demos directly from the experts. If you haven’t already,&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://webinars.sap.com/2023-01-01-sap-ie-btp-garage-webinar-series/en/registration.aspx" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN data-contrast="none"&gt;&lt;STRONG&gt;subscribe&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN data-contrast="auto"&gt;&amp;nbsp;to the series, bring your curiosity, your questions, and join us as we cover key SAP Business Technology Platform topics and use cases!&lt;/SPAN&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/next-in-the-sap-garage-integrate-sap-s-4hana-with-microsoft-teams-via-sap/ba-p/13576419"/>
    <published>2023-09-05T14:40:09+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/easy-way-to-provide-schema-access-to-a-btp-hana-cloud-standard-user/ba-p/13576462</id>
    <title>Easy way to provide schema access to a BTP HANA Cloud Standard User</title>
    <updated>2023-10-05T22:04:35+02:00</updated>
    <author>
      <name>kallolathome</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/14879</uri>
    </author>
    <content>&lt;H2 id="toc-hId-964015646"&gt;Problem&lt;/H2&gt;&lt;BR /&gt;
While working with the CAP applications, I have came across a situation that a standard HANA cloud user used in CPI cannot perform direct CRUD operations on the tables via the JDBC driver. The CPI will throw the error: insufficient privileges.&amp;nbsp; So, I am writing the blogpost for reference purpose.&lt;BR /&gt;
&lt;H2 id="toc-hId-767502141"&gt;Solution&lt;/H2&gt;&lt;BR /&gt;
Please follow the below mentioned steps:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Open the &lt;STRONG&gt;SQL Console&lt;/STRONG&gt; of the &lt;STRONG&gt;BTP HANA Cloud&lt;/STRONG&gt; by selecting the &lt;STRONG&gt;DBADMIN&lt;/STRONG&gt; node.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/8-8.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;Create the User group:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;CREATE USERGROUP USERGROUP_NAME&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/9-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;Creating the User &amp;amp; assigning it to the group: USER_01&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;CREATE USER USER_01 PASSWORD Password1111 NO FORCE_FIRST_PASSWORD_CHANGE SET USERGROUP USERGROUP_NAME&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;&lt;SPAN class="ui-provider ec bsg brz bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm" dir="ltr"&gt;Grant the User: &lt;STRONG&gt;USER_01&lt;/STRONG&gt; operator of the group: &lt;STRONG&gt;USERGROUP_NAME&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;GRANT USERGROUP OPERATOR ON USERGROUP USERGROUP_NAME TO USER_01&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/10-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If there is already a user present then please ignore the above steps.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Now, its time to check the &lt;STRONG&gt;SCHEMA_OWNER&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Get the SCHEMA name. Add the instance by selecting &lt;STRONG&gt;Instance Type&lt;/STRONG&gt;: HDI Container.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/1-33.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Expand &amp;amp; click on the &lt;STRONG&gt;Tables&lt;/STRONG&gt;. Select any table &amp;amp; then double click to &lt;STRONG&gt;open&lt;/STRONG&gt;. You will get the &lt;STRONG&gt;SCHEMA&lt;/STRONG&gt; name.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/2-16.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Go to the &lt;STRONG&gt;SAP HANA Cockpit&lt;/STRONG&gt;.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/5-10.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on the drop down list &amp;amp; select &lt;STRONG&gt;&lt;STRONG style="font-size: 1rem"&gt;Security and User Management&lt;/STRONG&gt;&lt;SPAN style="font-size: 1rem"&gt;.&lt;/SPAN&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/6-13.png" /&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Under the &lt;STRONG&gt;User &amp;amp; Role Management&lt;/STRONG&gt; tile, select the &lt;STRONG&gt;Role Assignment&lt;/STRONG&gt; option.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/7-11.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Select &lt;STRONG&gt;Assign roles to a user&lt;/STRONG&gt;. Enter the &lt;STRONG&gt;user&lt;/STRONG&gt;.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/11-4.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on the &lt;STRONG&gt;EDIT&lt;/STRONG&gt; button &amp;amp; add the roles by providing the &lt;STRONG&gt;SCHEMA&lt;/STRONG&gt; name.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/12-3.png" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Select &amp;amp; add the role you want. Then, save it.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Click on the added role to check more details.&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Object Privilege&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/13-5.png" /&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Assigned Users&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/14-2.png" /&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Now, the user is having access to the &lt;STRONG&gt;SCHEMA&lt;/STRONG&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;That's it.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now you can use the same user in the CPI for &lt;STRONG&gt;CRUD&lt;/STRONG&gt; operations.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
If you want to learn more about the &lt;STRONG&gt;privileges&lt;/STRONG&gt; then please check this &lt;A href="https://help.sap.com/docs/SAP_HANA_ONE/1c837b3899834ddcbae140cc3e7c7bdd/fb0f9b103d6940f28f3479b533c351e9.html" target="_blank" rel="noopener noreferrer"&gt;link&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;If I have missed something, please feel free to add it in the comment section so that, this post can be useful to others.&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-700071355"&gt;&lt;SPAN style="font-size: 1rem"&gt;References:&lt;/SPAN&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI class="style-scope ytd-watch-metadata"&gt;&lt;A href="https://www.youtube.com/watch?v=aK4Pd8KKBQE&amp;amp;t=600s" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP HANA Cloud User Management&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;DIV data-v-b0cfaade=""&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://help.sap.com/docs/SAP_HANA_ONE/1c837b3899834ddcbae140cc3e7c7bdd/bb37a9f2caf7438ca7332ceb3c5dc4d9.html" target="_blank" rel="noopener noreferrer"&gt;SAP HANA One Administration Guide&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV data-v-b0cfaade=""&gt;&lt;BR /&gt;
&lt;DIV data-v-5c31d43f="" data-v-b0cfaade=""&gt;&lt;BR /&gt;
&lt;DIV data-v-5c31d43f=""&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/easy-way-to-provide-schema-access-to-a-btp-hana-cloud-standard-user/ba-p/13576462"/>
    <published>2023-10-05T22:04:35+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-destinations-in-a-nutshell-part-3-oauth-2-0-client-credentials/ba-p/13577101</id>
    <title>SAP BTP Destinations in a nutshell Part 3 - OAuth 2.0 Client Credentials</title>
    <updated>2023-10-08T09:15:07+02:00</updated>
    <author>
      <name>JakobFra</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/178619</uri>
    </author>
    <content>&lt;H1 id="toc-hId-834959648"&gt;Introduction&lt;/H1&gt;&lt;BR /&gt;
The goal of this series is to introduce the different destination types of the SAP BTP, to show how they work and also to make them tangible with basic and easy to execute code examples. In parts one and two of this series, I looked at the basics, as well as the simplest destination types, NoAuthentication and BasicAuthentication. In this part, I'll dive into a more complex topic for the first time: I'll show you how to implement an OAuth 2.0 client credentials flow using Destination.&lt;BR /&gt;
&lt;H1 id="toc-hId-638446143"&gt;OAuth 2.0&lt;/H1&gt;&lt;BR /&gt;
&lt;P id="ember595" class="ember-view reader-content-blocks__paragraph"&gt;Before I turn to the concrete scenario and implementation, I will first take a closer look at the topic of OAuth. Most people in the IT environment have come across this term before, and a majority is still able to provide information when it comes to explaining at a high-level what it is and what it is used for. But as soon as it comes to the technical details, the exact workings of the protocols, the different authentication flows, etc., many (including me) quickly get tripped up. But fortunately I'm not alone in providing the most important information about OAuth, because there are also a large number of wonderful people who have a very deep understanding of the subject and are willing to document this knowledge and make it digitally available to their fellow world in an easy to understand way. One resource I came across a couple of years ago that has helped sharpen my understanding of this topic is this talk by Nate Barbettini:&amp;nbsp;&lt;A href="https://www.youtube.com/watch?v=996OiexHze0" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.youtube.com/watch?v=996OiexHze0&lt;/A&gt;&amp;nbsp;I can highly recommend this video to anyone who would like to learn more about OAuth 2.0 (and for good measure, OIDC) or is looking for a simple yet solid introduction to the topic. The investment of this one hour is definitely worth it.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember596" class="ember-view reader-content-blocks__paragraph"&gt;For those who are in a hurry, here is the most important information in a nutshell:&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember597" class="ember-view reader-content-blocks__paragraph"&gt;OAuth 2.0 is an open protocol that allows standardized, secure API authorization for desktop, web and mobile applications. This also covers the scenario of access delegation, i.e. that an application gets access to certain data or functionalities of another application with the permission of the user. Classic example: an application is granted permission by a user to send posts on Facebook or read contact data on their behalf.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-571015357"&gt;4 Roles&lt;/H2&gt;&lt;BR /&gt;
&lt;P id="ember599" class="ember-view reader-content-blocks__paragraph"&gt;&lt;STRONG&gt;Resource Owner&lt;/STRONG&gt;&amp;nbsp;- The owner of a resource (data). As a rule, this is simply a user, i.e. the person sitting in front of the computer / smartphone / tablet / ...&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember600" class="ember-view reader-content-blocks__paragraph"&gt;&lt;STRONG&gt;Resource Server&lt;/STRONG&gt;&amp;nbsp;- This is the application that stores the resources (data) of the resource owner (user)&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember601" class="ember-view reader-content-blocks__paragraph"&gt;&lt;STRONG&gt;Client&lt;/STRONG&gt;&amp;nbsp;- The client is the third-party application that wants to access resources (data) of the resource server on behalf of the resource owner (user) and needs a token for authentication that contains the corresponding authorization grant (so to speak, the proof that the client has received permission from the resource owner to access the resource server)&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember602" class="ember-view reader-content-blocks__paragraph"&gt;&lt;STRONG&gt;Authorization Server&lt;/STRONG&gt;&amp;nbsp;- The Authorization Server is the instance that manages Authorization grants and issues the tokens (these are usually JWT (JSON Web Tokens), i.e. JSON objects that contain the relevant token information) that authorize the client to access the Resource Server on behalf of the Resource Owner. In some cases, Resource Server and Authorization Server are identical, but often they are separate instances&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="ember603" class="ember-view" id="toc-hId-374501852"&gt;Client Credentials Flow&lt;/H2&gt;&lt;BR /&gt;
Depending on the specific use case, there are different flows in the OAuth 2.0 standard. In this part of the series, we will look at the client credentials flow. In order for a client to access a resource server, it must be registered with the Authorization Server, for each registered client there are client credentials, these are ultimately username and password. In the client credentials flow, the client also acts as the resource owner, because it does not obtain delegated access to the resource server, but instead requests a token for itself from the authentication server (using basic authentication with the client credentials) in order to then authenticate itself to the resource server with its own (technical) identity outside of a user context.&lt;BR /&gt;
&lt;H1 id="ember605" class="ember-view" id="toc-hId-48905628"&gt;XSUAA&lt;/H1&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;The XSUAA service, inside of the SAP BTP, handles the authorization flow between users, identity providers, and the applications or services. The XSUAA service is an internal development from SAP dedicated for the SAP BTP. In the Cloud Foundry project, there is an open-source component called UAA. UAA is an OAuth provider which takes care of authentication and authorization. SAP used the base of UAA and extended it with SAP specific features to be used in SAP BTP.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;A href="https://learning.sap.com/learning-journey/discover-sap-business-technology-platform/illustrating-sap-authorization-and-trust-management-service-xsuaa-_b9fde282-4cff-4dca-b146-7c8f8dde9955" target="test_blank" rel="noopener noreferrer"&gt;https://learning.sap.com/learning-journey/discover-sap-business-technology-platform/illustrating-sap-authorization-and-trust-management-service-xsuaa-_b9fde282-4cff-4dca-b146-7c8f8dde9955&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the context of OAuth 2.0, XSUAA is acting as the authentication server, i.e. it manages authorization grants and issues and validates JWT tokens. Important to know is, that there is always one XSUAA service instance per subaccount. As you will also later see in the concrete example, it is best practice to bind a dedicated XSUAA "service" resource to every application service (in our example: Client and Server). It took me a while to understand that those XSUAA services are not real running services in terms of a deployed container or something similar, but actually this are "only" pairs of Client ID and Client Secret (plus some additional meta information) that are injected into the application environment variables (VCAP_SERVICES). I.e. this binding represents a client in the sense of OAuth 2.0 terminology.&lt;BR /&gt;
&lt;H1 id="ember609" class="ember-view" id="toc-hId--147607877"&gt;Cloud 2 Cloud - OAuth 2.0 Client Credentials&lt;/H1&gt;&lt;BR /&gt;
&lt;A href="https://github.com/jfranken/sap-btp-destinations/tree/cloud-2-cloud-oauth2-client-credentials" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/jfranken/sap-btp-destinations/tree/cloud-2-cloud-oauth2-client-credentials&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
This all sounds rather abstract so far, so at this point I will fall back on our well-known example from the previous parts of this series to illustrate the use case:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/Bildschirmfoto-2023-10-03-um-17.09.00.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
In this scenario, the BTP Destinations Enthusiast acts as the resource owner, the server app is the resource server, and XSUAA represents the authorization server. When the user calls the client/helloWorldClientPlain(), the client app subsequently attempts to access the /server/helloWorldServer() endpoint upon execution, but not on behalf of the user, but in this scenarios by means of technical client credentials. This endpoint is secured using XSUAA, which means that the server app expects a JWT token in the request header, which is issued and validated by XSUAA. To obtain this token, the client makes use of an according OAuth2ClientCredentials destination in the destination service.&lt;BR /&gt;
&lt;H2 id="ember614" class="ember-view" id="toc-hId--215038663"&gt;Server Implementation&lt;/H2&gt;&lt;BR /&gt;
&lt;P id="ember615" class="ember-view reader-content-blocks__paragraph"&gt;At first, I will show you the basics of the implementation of the server app.&lt;/P&gt;&lt;BR /&gt;
&lt;P id="ember616" class="ember-view reader-content-blocks__paragraph"&gt;To be able to secure any endpoint of this service via XSUAA, we need to establish a binding between server app and XSUAA. This is done in the mta.yaml file that we use for the server app deployment:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;...&lt;BR /&gt;
resources:&lt;BR /&gt;
...    &lt;BR /&gt;
    - name: xsuaa-server-service&lt;BR /&gt;
      type: org.cloudfoundry.managed-service&lt;BR /&gt;
      parameters:&lt;BR /&gt;
          service: xsuaa&lt;BR /&gt;
          service-plan: application&lt;BR /&gt;
          service-name: xsuaa-server-service&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
In addition, it is required to enable JWT authentication. With SAP CAP, this is pretty staightforward within the cds configuration, which is located in the .cdsrc.js:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "requires": {&lt;BR /&gt;
        "auth": {&lt;BR /&gt;
            "kind": "jwt-auth"&lt;BR /&gt;
        },&lt;BR /&gt;
        "uaa": {&lt;BR /&gt;
            "kind": "xsuaa"&lt;BR /&gt;
        }&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Authentication checks can be added by means of annotations which can be added in the service CDS files (the example below shows the server-service.cds file), either on service level or for single entities / functions / actions. In the given example, I only add a very rudimentary check that requires nothing else than the caller to be authenticated at all (i.e. sending a valid JWT token, authenticated-user is an according pseudo role). It is also possible to check for concrete role assignments within the annotation, which is in real world scenarios normally the case, however, since this series aims at keeping the focus on the pure communication flow between the different instances, I try to keep it as simple as possible:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;service ServerService @(requires: 'authenticated-user') {&lt;BR /&gt;
    function helloWorldServer() returns String;&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The service implementation within the file server-service.js isn't very spectacular and should be familiar to the attentive readers of the first two parts of the series:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;module.exports = async (srv) =&amp;gt; {&lt;BR /&gt;
    srv.on('helloWorldServer', async (req) =&amp;gt; {&lt;BR /&gt;
        return 'Hello World from Server'&lt;BR /&gt;
    })&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="ember620" class="ember-view" id="toc-hId--411552168"&gt;Destination&lt;/H2&gt;&lt;BR /&gt;
As described above, the client app needs to use a destination to obtain a valid JWT token that allows access to the endpoint of the server app, which is secured via XSUAA. The most important aspect here is that I store the client credentials from the XSUAA binding of the&amp;nbsp;&lt;STRONG&gt;server app&lt;/STRONG&gt;&amp;nbsp;in the destination, because these represent the OAuth 2.0 client that is authorized to access the server app. The destination configuration in detail is as follows:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Name: Server&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Type: HTTP&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;URL:&amp;nbsp;https://${SERVER_APP_ROUTE}/server/helloWorldServer()&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;ProxyType: Internet&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Authentication: OAuth2ClientCredentials&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Client ID: Server XSUAA Client ID from Service Binding&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Client Secret: Server XSUAA Client Secret from Service Binding&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Token Service URL:&amp;nbsp;https://????????trial.authentication.????.hana.ondemand.com/oauth/token&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Please check the README.md file in the github repo. There you find a detailed description how you can find the concrete URLs and credentials via the BTP Cockpit and the Cloud Foundry CLI.&lt;BR /&gt;
&lt;H2 id="ember624" class="ember-view" id="toc-hId--608065673"&gt;Client Implementation&lt;/H2&gt;&lt;BR /&gt;
As always, the client includes two alternative implementations. On the one hand, the server call via Cloud SDK, and on the other hand, a plain variant that illustrates the communication processes step by step.&lt;BR /&gt;
&lt;H3 id="toc-hId--675496459"&gt;&lt;STRONG&gt;Cloud SDK&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;srv.on('helloWorldClientCloudSDK', async () =&amp;gt; {&lt;BR /&gt;
    return executeHttpRequest({ &lt;BR /&gt;
        destinationName: 'Server' &lt;BR /&gt;
    }).then((response) =&amp;gt; response.data)&lt;BR /&gt;
})&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--947241333"&gt;Plain&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/Bildschirmfoto-2023-09-27-um-07.45.19.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
First, the client authenticates against XSUAA with the client credentials from the destination service binding. I.e. here we already have the first client credentials flow to obtain a token that allows the client app to access the destination service. Afterwards, the client app requests the destination "Server" from the destination service, which is described in the chapter above. During this call, the destination service executes another client credentials flow and adds the token into the response which is then sent back to the client app. This could already be used to access the endpoint of the server app. However, for demonstration purposes, the client app implementation triggers another client credentials flow against XSUAA with the client credentials of the destination configuration.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;srv.on('helloWorldClientPlain', async () =&amp;gt; {&lt;BR /&gt;
    // get all the necessary destination service parameters from the  &lt;BR /&gt;
    // service binding in the VCAP_SERVICES env variable&lt;BR /&gt;
    const vcapServices = JSON.parse(process.env.VCAP_SERVICES)&lt;BR /&gt;
    const destinationServiceUrl =&lt;BR /&gt;
        vcapServices.destination[0].credentials.uri + &lt;BR /&gt;
        '/destination-configuration/v1/destinations/'&lt;BR /&gt;
    const destinationServiceClientId = &lt;BR /&gt;
        vcapServices.destination[0].credentials.clientid&lt;BR /&gt;
    const destinationServiceClientSecret = &lt;BR /&gt;
        vcapServices.destination[0].credentials.clientsecret&lt;BR /&gt;
    const destinationServiceTokenUrl = &lt;BR /&gt;
        vcapServices.destination[0].credentials.url + &lt;BR /&gt;
        '/oauth/token?grant_type=client_credentials'&lt;BR /&gt;
&lt;BR /&gt;
    // before we can fetch the destination from the destination &lt;BR /&gt;
    // service, we need to retrieve an auth token&lt;BR /&gt;
    const token = await axios.post(&lt;BR /&gt;
        destinationServiceTokenUrl, &lt;BR /&gt;
        null, &lt;BR /&gt;
        {&lt;BR /&gt;
            headers: {&lt;BR /&gt;
                authorization: 'Basic ' + &lt;BR /&gt;
                    Buffer.from(&lt;BR /&gt;
                        destinationServiceClientId + &lt;BR /&gt;
                        ':' +            &lt;BR /&gt;
                        destinationServiceClientSecret'&lt;BR /&gt;
                    ).toString('base64'),&lt;BR /&gt;
            },&lt;BR /&gt;
        }&lt;BR /&gt;
    )&lt;BR /&gt;
    const destinationServiceToken = token.data.access_token&lt;BR /&gt;
&lt;BR /&gt;
    // with this token, we can now request the "Server" destination &lt;BR /&gt;
    // from the destination service&lt;BR /&gt;
    const headers = {&lt;BR /&gt;
        authorization: 'Bearer ' + destinationServiceToken,&lt;BR /&gt;
    }&lt;BR /&gt;
    const destinationResult = await axios.get(&lt;BR /&gt;
        destinationServiceUrl + 'Server', &lt;BR /&gt;
        { headers }&lt;BR /&gt;
    )&lt;BR /&gt;
    const destination = destinationResult.data&lt;BR /&gt;
&lt;BR /&gt;
    // now, we use the retrieved the destination information to send &lt;BR /&gt;
    // a HTTP request to the token service endpoint;&lt;BR /&gt;
    // to authenticate, we take the Client ID attribute and the &lt;BR /&gt;
    // Client Secret attribute from the destination,&lt;BR /&gt;
    // encode ClientId:ClientSecret to Base64 and send the resulting &lt;BR /&gt;
    // string prefixed with "Basic " as Authorization&lt;BR /&gt;
    // header of the request;&lt;BR /&gt;
    // as a response, we receive a JWT token that we can then use to &lt;BR /&gt;
    // authenticate against the server&lt;BR /&gt;
    // alternatively, the JWT token could directly be fetched from &lt;BR /&gt;
    // destination.authTokens[0].value&lt;BR /&gt;
    const jwtTokenResponse = await axios.get(&lt;BR /&gt;
        destination.destinationConfiguration.tokenServiceURL + &lt;BR /&gt;
        '?grant_type=client_credentials', &lt;BR /&gt;
        {&lt;BR /&gt;
            headers: {&lt;BR /&gt;
                Authorization: 'Basic ' +&lt;BR /&gt;
                btoa(destination.destinationConfiguration.clientId + &lt;BR /&gt;
                ':' + &lt;BR /&gt;
                destination.destinationConfiguration.clientSecret),&lt;BR /&gt;
            }&lt;BR /&gt;
        }&lt;BR /&gt;
    )&lt;BR /&gt;
    const jwtToken = jwtTokenResponse.data.access_token&lt;BR /&gt;
&lt;BR /&gt;
    // here we call the server instance with the bearer token we &lt;BR /&gt;
    // received from the token service endpoint&lt;BR /&gt;
    const destinationResponse = await axios.get(&lt;BR /&gt;
        destination.destinationConfiguration.URL, &lt;BR /&gt;
        {&lt;BR /&gt;
            headers: {&lt;BR /&gt;
                Authorization: 'Bearer ' + jwtToken,&lt;BR /&gt;
            },&lt;BR /&gt;
        }&lt;BR /&gt;
    )&lt;BR /&gt;
    return destinationResponse.data&lt;BR /&gt;
})&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--850351831"&gt;Execution&lt;/H2&gt;&lt;BR /&gt;
Once the client and server are deployed and the destination is configured correctly, calls to both client endpoints should return the following result:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/1684662117403.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
That's it! In the next part of this series, I will go one step further. Instead of using technical client credentials, I will show you how you can use OAuth2TokenExchange destinations with authorization delegation. The client app will call the server app by propagating the identity of the user who calls the client endpoint in the beginning, i.e. we will cover one of the core scenarios for which OAuth 2.0 has been invented.&lt;BR /&gt;
&lt;H1 id="toc-hId--753462329"&gt;Disclaimer&lt;/H1&gt;&lt;BR /&gt;
The code examples provided are&amp;nbsp;&lt;STRONG&gt;not suitable&lt;/STRONG&gt;&amp;nbsp;to be transferred 1:1 into productive implementations, but they only serve to illustrate the functioning of destinations and Destination Service. In some cases, the interaction with the Destination Service is deliberately implemented in a “cumbersome” manner in order to illustrate the communication processes as explicitly and in detail as possible. SAP CAP and the SAP Cloud SDK provide various functionality to simplify and abstract the use of destinations. However, this would be more of a hindrance than a benefit to the purpose of the illustration.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-destinations-in-a-nutshell-part-3-oauth-2-0-client-credentials/ba-p/13577101"/>
    <published>2023-10-08T09:15:07+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/tell-us-about-your-experience-with-sap-btp-connectivity/ba-p/13577270</id>
    <title>Tell us about Your Experience with SAP BTP Connectivity</title>
    <updated>2023-10-18T23:22:32+02:00</updated>
    <author>
      <name>frank_mueller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/223421</uri>
    </author>
    <content>Have you ever been in touch with the Connectivity service or the Destination service for SAP Business Technology Platform (SAP BTP)?&lt;BR /&gt;
&lt;BR /&gt;
For example, creating or configuring a destination in the BTP cockpit, or doing some connectivity configuration in your app code?&lt;BR /&gt;
&lt;BR /&gt;
If so, let us know about your experience.&lt;BR /&gt;
&lt;BR /&gt;
There's a really short survey (5 minutes or less) that will help us improve SAP BTP Connectivity components according to your feedback.&lt;BR /&gt;
&lt;BR /&gt;
You can find the survey &lt;A href="https://sapinsights.eu.qualtrics.com/jfe/form/SV_7VZeDjYI5FSHJCS?source=blog" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thank you!</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/tell-us-about-your-experience-with-sap-btp-connectivity/ba-p/13577270"/>
    <published>2023-10-18T23:22:32+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/it-has-never-been-easier-connecting-cloud-apps-to-internet-and-on-premises/ba-p/13578208</id>
    <title>It has never been easier! Connecting cloud apps to Internet and on-premises systems using SAP BTP Connectivity</title>
    <updated>2023-11-14T21:29:59+01:00</updated>
    <author>
      <name>ManolV</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181738</uri>
    </author>
    <content>&lt;P&gt;It is a common scenario that cloud applications need to connect to remote systems to fulfil the business goals of their creators and those of their end users. This is essential for enterprise applications, which are generally complex and consume data from and/or push data to a variety of sources or destinations – systems that are directly accessible, systems hosted in &lt;A href="https://en.wikipedia.org/wiki/Cloud_computing" target="_blank" rel="noopener nofollow noreferrer"&gt;public or private cloud&lt;/A&gt;, or such that are hosted in the&amp;nbsp;&lt;A href="https://en.wikipedia.org/wiki/On-premises_software" target="_blank" rel="noopener nofollow noreferrer"&gt;customer premises&lt;/A&gt;. This use case is called hybrid connectivity.&lt;BR /&gt;&lt;BR /&gt;Sounds complex, right?! With this blog post, I show you that it has never been easier to solve this problem. Let’s get started and see how&amp;nbsp;&lt;A href="https://help.sap.com/docs/connectivity" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Connectivity&lt;/A&gt;&amp;nbsp;can help with this challenge, more specifically, in &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/d1abd18556f24fb091d081b2e3454b8b.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Kyma environment&lt;/A&gt;.&lt;/P&gt;&lt;H2 id="toc-hId-964073126"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;&lt;BR /&gt;Well, complex things cannot be made simple without proper preparation work. Therefore, I need to setup the environment. For the purposes of this blog post, I don’t get into details on how each step is done, if interested, you can follow the links:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Setup the &lt;STRONG&gt;cloud&lt;/STRONG&gt; environment:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Create a &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/144e1733d0d64d58a7176e817fa6aeb3.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP subaccount&lt;/A&gt; - the &lt;A href="https://en.wikipedia.org/wiki/Platform_as_a_service" target="_blank" rel="noopener nofollow noreferrer"&gt;PaaS&lt;/A&gt; context in the domain of &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/6a2c1ab5a31b4ed9a2ce17a5329e1dd8.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP&lt;/A&gt;, i.e., an account enabled to instantiate cloud application development environments, create and manage service instances, etc.&lt;/LI&gt;&lt;LI&gt;Enable &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/d1abd18556f24fb091d081b2e3454b8b.html" target="_blank" rel="noopener noreferrer"&gt;Kyma environment&lt;/A&gt; - the cloud-native application hosting environment&lt;OL&gt;&lt;LI&gt;Enable &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/0c035010a9d64cc8a02d872829c7fa75.html" target="_blank" rel="noopener noreferrer"&gt;Connectivity Proxy&lt;/A&gt; for cloud to premise technical connectivity, an &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/7501fbc9aebd4e3180eddec977ca288d.html" target="_blank" rel="noopener noreferrer"&gt;integrated module in Kyma environment&lt;/A&gt;&lt;BR /&gt;Edit: In the meantime, &lt;A href="https://help.sap.com/whats-new/cf0cb2cb149647329b5d02aa96303f56?Component=Connectivity&amp;amp;Valid_as_Of=2024-03-12%3A2024-03-12&amp;amp;locale=en-US" target="_blank" rel="noopener noreferrer"&gt;since March 12, 2024,&lt;/A&gt;&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/7501fbc9aebd4e3180eddec977ca288d.html" target="_blank" rel="noopener noreferrer"&gt;Connectivity Proxy has become a native Kyma Module&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Enable &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/1700cfe070704d2e80aa76de1033a6c4.html" target="_blank" rel="noopener noreferrer"&gt;Transparent Proxy&lt;/A&gt; for unified, virtually transparent technical connectivity to any destination or data source, an &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/1b548e9ad4744b978b8b595288b0cb5c.html" target="_blank" rel="noopener noreferrer"&gt;integrated module in Kyma environment&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;Setup the &lt;STRONG&gt;local&lt;/STRONG&gt; environment&lt;OL&gt;&lt;LI&gt;Install &lt;A href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubectl&lt;/A&gt; - the command line interface for &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/3e25944e491049b2aeec68c562a5ee48.html" target="_blank" rel="noopener noreferrer"&gt;connecting to and interacting with the Kyma instance&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Install &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e6c7616abb5710148cfcf3e75d96d596.html" target="_blank" rel="noopener noreferrer"&gt;Cloud Connector&lt;/A&gt; for &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/f42fe4471d6a4a5fb09b7f3bb83c66a4.html" target="_blank" rel="noopener noreferrer"&gt;controlled and secure exposure concrete systems or resources&lt;/A&gt;, hosted in a &lt;A href="https://en.wikipedia.org/wiki/Virtual_private_cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;VPC&lt;/A&gt; on &lt;A href="https://en.wikipedia.org/wiki/Hyperscale_computing" target="_blank" rel="noopener nofollow noreferrer"&gt;Hyperscalers&lt;/A&gt; or &lt;A href="https://en.wikipedia.org/wiki/On-premises_software" target="_blank" rel="noopener nofollow noreferrer"&gt;on-premises&lt;/A&gt; - in my case, on my PC.&lt;/LI&gt;&lt;/OL&gt;&lt;/LI&gt;&lt;LI&gt;For each scenario use case, &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/84e45e071c7646c88027fffc6a7bb787.html" target="_blank" rel="noopener noreferrer"&gt;create the relevant destinations in SAP Destination service&lt;/A&gt; using &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/4e750660b72e4fd6b2485ffb0b3cbdca.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP cockpit&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-767559621"&gt;Overview of the scenario&lt;/H2&gt;&lt;P&gt;&lt;BR /&gt;Image: &lt;EM&gt;Scenario Schematic Overview&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/uc-tp-kyma-blog-scenario-schematic-overview.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;This solution diagram depicts the high-level architecture and layout of the SAP BTP tools, software components, services listed above in the &lt;STRONG&gt;Prerequisites&lt;/STRONG&gt; section. The focus on the scenario is on the &lt;STRONG&gt;Application&lt;/STRONG&gt; side. The rest is depicted for completeness and better end-to-end understanding.&lt;BR /&gt;&lt;BR /&gt;In this blog, I showcase how I can connect my cloud application to the following &lt;STRONG&gt;target systems&lt;/STRONG&gt;. I start with the &lt;STRONG&gt;trivial&lt;/STRONG&gt; and then continue with the more &lt;STRONG&gt;advanced&lt;/STRONG&gt; use cases:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Google&lt;/EM&gt;&lt;/STRONG&gt; - direct connectivity &lt;SPAN&gt;without&lt;/SPAN&gt; using any of the SAP BTP Connectivity software and services&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Google via destination&lt;/EM&gt;&lt;/STRONG&gt; - direct connectivity &lt;SPAN&gt;with&lt;/SPAN&gt; usage of SAP BTP Connectivity software and services&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Google via destination and Cloud Connector&lt;/EM&gt;&lt;/STRONG&gt; - indirect cloud to premise connectivity - in my setup Google is directly accessible via my local Cloud Connector&lt;BR /&gt;&lt;U&gt;&lt;EM&gt;Note&lt;/EM&gt;&lt;/U&gt;: this use case is presented &lt;U&gt;only for the purpose of showcase&lt;/U&gt; and ease the perception of the reader, &lt;STRONG&gt;it is not expected to be done in production&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/access-sap-authorization-and-trust-management-service-apis" target="_blank" rel="noopener noreferrer"&gt;SAP Authorization and Trust Management Service (XSUAA)&lt;/A&gt; via destination&lt;/STRONG&gt; - OAuth based REST API&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;An HTTP system hosted on-premises&lt;/EM&gt;&lt;/STRONG&gt; &lt;EM&gt;&lt;STRONG&gt;via destination and Cloud Connector &lt;/STRONG&gt;&lt;/EM&gt;- indirect cloud to premise connectivity&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;An HTTPS system hosted on-premises&lt;/EM&gt; &lt;EM&gt;via destination and Cloud Connector &lt;/EM&gt;&lt;/STRONG&gt;- indirect cloud to premise connectivity with &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/c84d4d0b12d34890b334998185f49e88.html" target="_blank" rel="noopener noreferrer"&gt;Principal Propagation&lt;/A&gt; enabled, i.e., end-to-end secure user context propagation, a.k.a &lt;A href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="noopener nofollow noreferrer"&gt;Single Sign On (SSO)&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;I pick those systems to showcase what I claimed in the begging of this blog - &lt;STRONG&gt;It has never been easier!&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;U&gt;Note&lt;/U&gt;: For the creation of the destination pointing to XSUAA in step 4 of the scenario, I followed these two simple steps in &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/4e750660b72e4fd6b2485ffb0b3cbdca.html" target="_blank" rel="noopener noreferrer"&gt;BTP cockpit&lt;/A&gt;:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/8221b7434d8e484fab5ec5d219b7bf64.html" target="_blank" rel="noopener noreferrer"&gt;Create a service instance&lt;/A&gt; of &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/ebc9113a520e495ea5fb759b9a7929f2.html" target="_blank" rel="noopener noreferrer"&gt;service "xsuaa", plan "apiaccess"&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/685f383cebb54c009b2fac633b32c90f.html" target="_blank" rel="noopener noreferrer"&gt;Create a destination pointing to the service instance via destinations UI&lt;/A&gt; - just a few clicks job!&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-571046116"&gt;Configure the scenario&lt;/H2&gt;&lt;P&gt;&lt;BR /&gt;To get the scenario in action, at first I need to configure the target systems as technical connection configurations, a.k.a. destinations. In this way I control to which systems the application has access to and can switch the used technical authentication and authorisation mechanisms on the fly – changing the destination attributes without affecting the experience of the end user, and without affecting the lifecycle of the application.&lt;/P&gt;&lt;H3 id="toc-hId-503615330"&gt;Expose the on-premises system to the cloud&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;For the destinations pointing to systems hosted in the customer premises (points 5 and 6 of the scenario overview), I need to securely expose those to the cloud.&lt;BR /&gt;&lt;BR /&gt;You guessed it, for this I configure the respective &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/f42fe4471d6a4a5fb09b7f3bb83c66a4.html" target="_blank" rel="noopener noreferrer"&gt;Access Controls&lt;/A&gt; in my &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e6c7616abb5710148cfcf3e75d96d596.html" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Connector&lt;/A&gt;:&lt;BR /&gt;&lt;BR /&gt;Image: &lt;EM&gt;Access Control entries in Cloud Connector&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/scc-access-controls-1.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;In this example, the two systems hosted in the on-premises are simple HTTP and HTTPS servers:&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;System #1:&lt;STRONG&gt;&lt;EM&gt; localhost:8000&lt;/EM&gt;&lt;/STRONG&gt; - serves &lt;EM&gt;HTTP&lt;/EM&gt;, returns status code: &lt;STRONG&gt;&lt;EM&gt;200&amp;nbsp;&lt;/EM&gt;&lt;/STRONG&gt;with the received HTTP request line as a message.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;System #2:&lt;STRONG&gt;&lt;EM&gt; localhost:9000&lt;/EM&gt;&lt;/STRONG&gt; - serves &lt;EM&gt;HTTP&lt;STRONG&gt;S&lt;/STRONG&gt;&lt;/EM&gt;, returns status code: &lt;EM&gt;&lt;STRONG&gt;200&lt;/STRONG&gt;&lt;/EM&gt; with the received HTTP request line as a message, and&amp;nbsp;the subject common name (CN) of the received &lt;SPAN&gt;X.509 client certificate as part of the HTTP request - the user context propagated from the cloud, achieving Single Sign-On (SSO).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-307101825"&gt;Manage the technical connection configurations&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;One of the best practices for cloud-native applications is to externalise any configuration and avoid coupling it with the lifecycle of the application, e.g. via hard-coding it. I use &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/7e306250e08340f89d6c103e28840f30.html" target="_blank" rel="noopener noreferrer"&gt;Destination service&lt;/A&gt;&amp;nbsp;for&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/84e45e071c7646c88027fffc6a7bb787.html" target="_blank" rel="noopener noreferrer"&gt;managing the technical connection configurations (a.k.a. destinations)&lt;/A&gt;, as guided by the Golden Path defined in&amp;nbsp;&lt;A href="https://cap.cloud.sap/docs/about/" target="_blank" rel="noopener nofollow noreferrer"&gt;Cloud Application Programming&lt;/A&gt;&amp;nbsp;model of&amp;nbsp;&lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/6a2c1ab5a31b4ed9a2ce17a5329e1dd8.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;In the context of my&amp;nbsp;&lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/144e1733d0d64d58a7176e817fa6aeb3.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP subaccount&lt;/A&gt;, I create the following destinations, pointing to the variety of systems I’ll connect my cloud app workload running in my Kyma instance.&lt;BR /&gt;&lt;BR /&gt;Image: &lt;EM&gt;Destinations in BTP cockpit&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/BTP-cockpit-destinations.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-110588320"&gt;Expose the destinations in the Kyma instance&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;To allow an application to consume the defined destinations, I declaratively expose only those I'm interested in, and are specific for this particular use case. For this, I &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/c5257cf110bf4b7b9054eab74ededff4.html" target="_blank" rel="noopener noreferrer"&gt;create specific Destination Custom Resources&lt;/A&gt;, a &lt;A href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener nofollow noreferrer"&gt;common practice for cloud-native applications based on Kubernetes&lt;/A&gt;. In Kyma environment, I can do this either via &lt;A href="https://kyma-project.io/#/01-overview/ui/README?id=kyma-dashboard" target="_blank" rel="noopener nofollow noreferrer"&gt;Kyma Dashboard&lt;/A&gt;, or via command-line using &lt;A href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubectl&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;Image: &lt;EM&gt;Creation of a Destination CR in Kyma Dashboard&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/DestinationCRs-create-CR.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;Shortly after the&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/c5257cf110bf4b7b9054eab74ededff4.html" target="_blank" rel="noopener noreferrer"&gt;Destination CR&lt;/A&gt;&amp;nbsp;is created,&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/acc64ada71e34f98867f16fbcc471b5e.html" target="_blank" rel="noopener noreferrer"&gt;Transparent Proxy&lt;/A&gt;&amp;nbsp;process it and updates the status of the Destination CR with a message that the technical connectivity is successfully configured, and this destination is ready to be consumed.&lt;BR /&gt;&lt;BR /&gt;Image: &lt;EM&gt;Status of a Destination CR in Kyma Dashboard&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/DestinationCR-ConfigurationSuccessful.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;Using the same approach, I expose all the destinations required specifically for this use case.&lt;BR /&gt;&lt;BR /&gt;Image: &lt;EM&gt;Destination CRs in Kyma&amp;nbsp;&lt;/EM&gt;&lt;I&gt;Dashboard&lt;/I&gt;&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/DestinationCRs.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;It's all set now, let's play with the application.&lt;/P&gt;&lt;H2 id="toc-hId--215007904"&gt;Scenario in action: Connect the application to the remote systems&lt;/H2&gt;&lt;P&gt;&lt;BR /&gt;As described in the status message of the&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/c5257cf110bf4b7b9054eab74ededff4.html" target="_blank" rel="noopener noreferrer"&gt;Destination CR&lt;/A&gt;, the&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/acc64ada71e34f98867f16fbcc471b5e.html" target="_blank" rel="noopener noreferrer"&gt;Transparent Proxy&lt;/A&gt;&amp;nbsp;exposed the referenced &lt;STRONG&gt;destination&lt;/STRONG&gt; via the specified name in the form of &lt;STRONG&gt;locally accessible host&lt;/STRONG&gt;, leveraging the concept of&amp;nbsp;&lt;A href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubernetes Service&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;As a result, it’s&amp;nbsp;&lt;EM&gt;trivial&lt;/EM&gt;&amp;nbsp;for the application to connect to those local hosts, and this is the only task needed to be performed. It’s that easy!&lt;BR /&gt;&lt;BR /&gt;For simplicity and versatility reasons, my application is represented by a local terminal attached to a container running in a&amp;nbsp;&lt;A href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubernetes Pod&lt;/A&gt;&amp;nbsp;in the Kyma Instance. Then I use&amp;nbsp;&lt;A href="https://en.wikipedia.org/wiki/CURL" target="_blank" rel="noopener nofollow noreferrer"&gt;cURL&lt;/A&gt;&amp;nbsp;command-line tool for executing HTTP requests towards the target systems.&lt;BR /&gt;&lt;BR /&gt;How it’s done? Once connected to the Kyma instance via Kubectl, I run a sample&amp;nbsp;&lt;A href="https://hub.docker.com/r/curlimages/curl" target="_blank" rel="noopener nofollow noreferrer"&gt;cURL image&lt;/A&gt;&amp;nbsp;as a&amp;nbsp;&lt;A href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kuberenetes Pod&lt;/A&gt;&amp;nbsp;and open a terminal session via the following command:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;kubectl run mycurlpod -n sap-transp-proxy-system --image=curlimages/curl -i --tty -- sh&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--282438690"&gt;Executing request to Google:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is a trivial direct invocation of the public web page of Google:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl www.google.com -v

*   Trying 142.250.179.164:80...

* Connected to www.google.com (142.250.179.164) port 80

&amp;gt; GET / HTTP/1.1

&amp;gt; Host: www.google.com

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

...

&amp;lt; 

&amp;lt;!doctype html&amp;gt;&amp;lt;html...&amp;lt;title&amp;gt;Google&amp;lt;/title&amp;gt;&amp;lt;script...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--478952195"&gt;Executing request to Google via destination:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is an example reaching the same public web page of Google, but this time via &lt;EM&gt;destination&lt;/EM&gt;, locally exposed and served by Transparent Proxy, and centrally managed via Destination service:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl google -v

*   Trying 10.111.255.220:80...

* Connected to google (10.111.255.220) port 80

&amp;gt; GET / HTTP/1.1

&amp;gt; Host: google

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

...

&amp;lt; 

&amp;lt;!doctype html&amp;gt;&amp;lt;html...&amp;lt;title&amp;gt;Google&amp;lt;/title&amp;gt;&amp;lt;script...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--675465700"&gt;Executing request to Google via destination via Cloud Connector:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is an example of reaching the same public web page of Google via&amp;nbsp;&lt;EM&gt;destination&lt;/EM&gt;, locally exposed and served by Transparent Proxy, Connectivity Proxy, and centrally managed via Destination service. The destination is configured to point to an on-premises system, exposed to the cloud via Cloud Connector:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl mypremisegoogle -v

*   Trying 10.111.159.5:80...

* Connected to mypremisegoogle (10.111.159.5) port 80

&amp;gt; GET / HTTP/1.1

&amp;gt; Host: mypremisegoogle

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

...

&amp;lt; 

&amp;lt;!doctype html&amp;gt;&amp;lt;html...&amp;lt;title&amp;gt;Google&amp;lt;/title&amp;gt;&amp;lt;script...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--947210574"&gt;Executing request to XSUAA API via destination:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is an example for &lt;A href="https://api.sap.com/api/AuthorizationAPI/resource/Applications" target="_blank" rel="noopener noreferrer"&gt;getting the registered service instances of the current subaccount&lt;/A&gt; via &lt;EM&gt;destination&lt;/EM&gt;, locally exposed and served by Transparent Proxy, and centrally managed via Destination service.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl xsuaa-api/sap/rest/authorization/v2/apps -v

*   Trying 10.106.192.162:80...

* Connected to xsuaa-api (10.106.192.162) port 80

&amp;gt; GET /sap/rest/authorization/v2/apps HTTP/1.1

&amp;gt; Host: xsuaa-api

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

&amp;lt; cache-control: no-cache, no-store, max-age=0, must-revalidate

&amp;lt; content-length: 10621

...

&amp;lt; 

[{"appid":"app123!b13","serviceinstanceid":"15442f82-7d82-11ee-b26d-ab53f17d39a5","planId":"HWEgt9/213f90b0+/7d82-11ee=","planName":"broker"...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--1143724079"&gt;Executing request to an on-premises HTTP server via destination via Cloud Connector:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is an example of connecting to a simple on-premises HTTP server via &lt;EM&gt;destination&lt;/EM&gt;, locally exposed and served by Transparent Proxy, Connectivity Proxy, and centrally managed via Destination service. The destination is configured to point to an on-premises system, exposed to the cloud via Cloud Connector:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl mypremserver/test-path -v

*   Trying 10.110.23.19:80...

* Connected to mypremserver (10.110.23.19) port 80

&amp;gt; GET /test-path HTTP/1.1

&amp;gt; Host: mypremserver

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

...

&amp;lt; 

Response generated by HTTP server: 

GET /test-path HTTP/1.1&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--1340237584"&gt;Executing request to an on-premises HTTPS server via destination via Cloud Connector with Single Sign-On enabled:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;This is an example of connecting to an on-premises HTTPS server via &lt;EM&gt;destination&lt;/EM&gt;, locally exposed and served by Transparent Proxy, Connectivity Proxy, and centrally managed via Destination service. The HTTPS server requires the cloud user identity to be propagated. The destination is configured with PrincipalPropagation as authentication type, and to point to an on-premises system, exposed to the cloud via Cloud Connector:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;~ $ curl myppserver -H 'Authorization: Bearer eyJhbGciOiJSUzI1Ni...bwKMpAGKbhECqvkyibC7Q' -v

*   Trying 10.105.101.106:80...

* Connected to myppserver (10.105.101.106) port 80

&amp;gt; GET / HTTP/1.1

&amp;gt; Host: myppserver

&amp;gt; User-Agent: curl/8.4.0

&amp;gt; Accept: */*

&amp;gt; Authorization: Bearer yJhbGciOiJSUzI1Ni...bwKMpAGKbhECqvkyibC7Q

&amp;gt; 

&amp;lt; HTTP/1.1 200 OK

&amp;lt; server: envoy

&amp;lt; date: Tue, 07 Nov 2023 15:17:47 GMT

&amp;lt; content-type: text/plain; charset=utf-8

&amp;lt; content-length: 1956

&amp;lt; x-envoy-upstream-service-time: 657

&amp;lt; 

&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

Response generated by HTTPS server: 

GET / HTTP/1.1

=========

Received X.509 client certificate with Subject: &amp;lt;Name(CN=manol.valchev@sap.com)&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId--1243348082"&gt;Summary&lt;/H2&gt;&lt;P&gt;&lt;BR /&gt;As you can see,&amp;nbsp;&lt;STRONG&gt;it’s that simple!&lt;/STRONG&gt;&amp;nbsp;No matter of the type and hosting location of the target system, from the application development perspective the user experience is the same –&amp;nbsp;&lt;STRONG&gt;&lt;EM&gt;simple, unified, virtually transparent&lt;/EM&gt;&lt;/STRONG&gt;, and the technical complexity is handled by the usage of software components and services part of&amp;nbsp;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e54cc8fbbb571014beb5caaf6aa31280.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP BTP Connectivity&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;product portfolio:&lt;/P&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/7e306250e08340f89d6c103e28840f30.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Destination service&lt;/STRONG&gt;&lt;/A&gt; for &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/84e45e071c7646c88027fffc6a7bb787.html" target="_blank" rel="noopener noreferrer"&gt;managing the technical connection configurations (a.k.a. destinations)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/1700cfe070704d2e80aa76de1033a6c4.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Transparent Proxy&lt;/STRONG&gt;&lt;/A&gt; for unified, virtually transparent technical connectivity to any destination or data source, an &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/1b548e9ad4744b978b8b595288b0cb5c.html" target="_blank" rel="noopener noreferrer"&gt;integrated module in Kyma environment&lt;/A&gt;, also &lt;A href="https://hub.docker.com/u/sapse" target="_blank" rel="noopener nofollow noreferrer"&gt;available in Docker Hub&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/0c035010a9d64cc8a02d872829c7fa75.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Connectivity Proxy&lt;/STRONG&gt;&lt;/A&gt; for cloud to premise technical connectivity, an &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/0c035010a9d64cc8a02d872829c7fa75.html" target="_blank" rel="noopener noreferrer"&gt;integrated component in Kyma environment&lt;/A&gt;, also &lt;A href="https://hub.docker.com/u/sapse" target="_blank" rel="noopener nofollow noreferrer"&gt;available in Docker Hub&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e6c7616abb5710148cfcf3e75d96d596.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Cloud Connector&lt;/STRONG&gt;&lt;/A&gt; for &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/f42fe4471d6a4a5fb09b7f3bb83c66a4.html" target="_blank" rel="noopener noreferrer"&gt;controlled and secure exposure concrete systems or resources&lt;/A&gt;, hosted in a &lt;A href="https://en.wikipedia.org/wiki/Virtual_private_cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;VPC&lt;/A&gt; on &lt;A href="https://en.wikipedia.org/wiki/Hyperscale_computing" target="_blank" rel="noopener nofollow noreferrer"&gt;Hyperscalers&lt;/A&gt; or &lt;A href="https://en.wikipedia.org/wiki/On-premises_software" target="_blank" rel="noopener nofollow noreferrer"&gt;on-premises&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e54cc8fbbb571014beb5caaf6aa31280.html" target="_blank" rel="noopener noreferrer"&gt;Connectivity service&lt;/A&gt;&lt;/STRONG&gt; as the backbone for the multitude of &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/0c035010a9d64cc8a02d872829c7fa75.html" target="_blank" rel="noopener noreferrer"&gt;Connectivity Proxy&lt;/A&gt; and &lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e6c7616abb5710148cfcf3e75d96d596.html" target="_blank" rel="noopener noreferrer"&gt;Cloud Connector&lt;/A&gt; instances serving thousands of &lt;A href="https://help.sap.com/docs/BTP/65de2977205c403bbc107264b8eccf4b/6a2c1ab5a31b4ed9a2ce17a5329e1dd8.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP&lt;/A&gt; customers&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;BR /&gt;Тhis simple yet powerful approach enables &lt;STRONG&gt;application developers&lt;/STRONG&gt; to &lt;STRONG&gt;focus more on their business goals&lt;/STRONG&gt; and &lt;STRONG&gt;delegate the technical complexity&lt;/STRONG&gt; to &lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/e54cc8fbbb571014beb5caaf6aa31280.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Connectivity&lt;/A&gt;&lt;/STRONG&gt;, and at the same time the application administrators can manage the outbound technical connections (via destinations) without affecting the lifecycle and availability of the application itself.&lt;BR /&gt;&lt;BR /&gt;Stay tuned and subscribe to &lt;A href="https://help.sap.com/whats-new/cf0cb2cb149647329b5d02aa96303f56?Component=Connectivity" target="_blank" rel="noopener noreferrer"&gt;What's New for SAP BTP Connectivity&lt;/A&gt; page.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/it-has-never-been-easier-connecting-cloud-apps-to-internet-and-on-premises/ba-p/13578208"/>
    <published>2023-11-14T21:29:59+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/hey-abap-cloud-please-let-me-save-my-data-export-to-azure-storage-please/ba-p/13572978</id>
    <title>Hey ABAP Cloud please let me save my data export to Azure Storage please🥺🙏- part 4</title>
    <updated>2023-11-21T13:21:26+01:00</updated>
    <author>
      <name>Martin-Pankraz</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/143781</uri>
    </author>
    <content>&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;background-color: #ffd57a;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉🏿&lt;/span&gt;&lt;/STRONG&gt;&lt;STRONG&gt;back to&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://blogs.sap.com/2023/06/06/kick-start-your-sap-abap-platform-integration-journey-with-microsoft/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;blog series&lt;/STRONG&gt;&lt;/A&gt; or jump to &lt;A href="https://github.com/MartinPankraz/steampunk-helper" target="_blank" rel="nofollow noopener noreferrer"&gt;GitHub repos&lt;/A&gt;🧑🏽‍&lt;span class="lia-unicode-emoji" title=":laptop_computer:"&gt;💻&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;&amp;lt;&lt;A href="https://blogs.sap.com/2023/07/20/sap-btp-abap-environment-integration-journey-with-microsoft-part-3/" target="_blank" rel="noopener noreferrer"&gt;part 3&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
Hello and welcome back to your ABAP Cloud with Microsoft integration journey. Part 3 of this series got you covered with modern GraphQL API definition on top of your ABAP Cloud RAP APIs to expose a single API endpoint that may consume many different OData, OpenAPI, or REST endpoints at the same time.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Today will be different&lt;/STRONG&gt;. Sparked by a &lt;A href="https://twitter.com/PanzerDominik/status/1683252126884003840" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP community conversation&lt;/A&gt; with &lt;SPAN class="mention-scrubbed"&gt;dpanzer&lt;/SPAN&gt; and &lt;SPAN class="mention-scrubbed"&gt;lars.hvam&lt;/SPAN&gt; including a &lt;A href="https://answers.sap.com/questions/14009359/createsend-a-file-to-ftp-server-via-abap-cloud-or.html" target="_blank" rel="noopener noreferrer"&gt;community question&lt;/A&gt; by &lt;SPAN class="mention-scrubbed"&gt;rammel&lt;/SPAN&gt; on working with files with ABAP Cloud, I got inspired to propose a solution for the question below:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-twitter.png" height="146" width="493" /&gt;&lt;/P&gt;&lt;BR /&gt;
Before we dive into my proposal see here a list of alternative options that I came across as food for thought for your own research.&lt;BR /&gt;
&lt;TABLE&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;&lt;A href="https://docs.cloudfoundry.org/devguide/services/using-vol-services.html" target="_blank" rel="nofollow noopener noreferrer"&gt;Mount a file system&lt;/A&gt; to a Cloud Foundry app&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Create custom API hosted by your CF app and call via http client from ABAP Cloud&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;&lt;A href="https://blogs.sap.com/2021/05/12/how-to-connect-from-sap-cloud-integration-to-on-premise-sftp-server/" target="_blank" rel="noopener noreferrer"&gt;Connect to SFTP server&lt;/A&gt; via SAP Cloud Integration&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Design iFlow and call via http client from ABAP Cloud&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Integrate with &lt;A href="https://help.sap.com/docs/document-management-service/sap-document-management-service/what-is-document-management-service" target="_blank" rel="noopener noreferrer"&gt;SAP Document Management Service&lt;/A&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Call &lt;A href="https://api.sap.com/package/SAPDocumentManagementServiceIntegrationOptionCMISAPI/rest" target="_blank" rel="noopener noreferrer"&gt;SAP BTP REST APIs&lt;/A&gt; from ABAP Cloud directly&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Integrate with &lt;A href="https://help.sap.com/docs/object-store/object-store-service-on-sap-btp/what-is-object-store" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Object Store&lt;/A&gt; exposing hyperscaler storage services using SDKs&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Create custom API hosted by your CF or Kyma app and call via http client from ABAP Cloud&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Serve directly from ABAP Code via XCO&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Base64-encode your file content, wrap into ABAP code, and serve as XCO class. Lars likes it at least &lt;span class="lia-unicode-emoji" title=":winking_face_with_tongue:"&gt;😜&lt;/span&gt;. There were sarcastic smiles involved and some more “oh please”, so take it not too seriously.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Raise an &lt;A href="https://influence.sap.com/sap/ino/#/campaigns" target="_blank" rel="noopener noreferrer"&gt;influencing request at SAP&lt;/A&gt; to release something like the former NetWeaver MIME repos&lt;/TD&gt;&lt;BR /&gt;
&lt;TD width="301"&gt;Live the dream&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
A &lt;STRONG&gt;common theme&lt;/STRONG&gt; among all the options is the &lt;STRONG&gt;need to interact&lt;/STRONG&gt; with them from &lt;STRONG&gt;ABAP Cloud via the built-in http client&lt;/STRONG&gt;. On the downside some options require an additional app on CF or Kyma to orchestrate the storage interactions.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Ideally ABAP Cloud integrates directly with the storage account&lt;/STRONG&gt; to reduce complexity and maintenance.&lt;BR /&gt;
&lt;H1 id="toc-hId-834818605"&gt;You guessed rightly my own proposal focusses on direct integration with Azure Blob&lt;/H1&gt;&lt;BR /&gt;
To get started with this sample I ran through the SAP developer tutorial “&lt;A href="https://developers.sap.com/tutorials/abap-environment-console-application.html" target="_blank" rel="noopener noreferrer"&gt;Create Your First ABAP Cloud Console Application&lt;/A&gt;” and steps 1-6 of “&lt;A href="https://developers.sap.com/tutorials/abap-environment-external-api.html" target="_blank" rel="noopener noreferrer"&gt;Call an External API and Parse the Response in SAP BTP ABAP Environment&lt;/A&gt;. This way you can easily reproduce from an official reference.&lt;BR /&gt;
&lt;BR /&gt;
Got your hello world on Eclipse? Great, onwards, and upwards in the stack we go then 🪜. Or down to the engine room – that depends on your perspective.&lt;BR /&gt;
&lt;BR /&gt;
All the blob storage providers offer various options to authenticate with the service. See the current coverage for Azure &lt;A href="https://learn.microsoft.com/en-us/azure/storage/common/authorize-data-access#understand-authorization-for-data-operations" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-auth-methods.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.1 Screenshot of supported authentication methods for Azure Storage&lt;/P&gt;&lt;BR /&gt;
The Microsoft Entra ID option offers superior security capabilities compared to access keys – which can be leaked or lost for example – and is therefore recommended by Microsoft.&lt;BR /&gt;
&lt;BR /&gt;
For developer ease, I left the code using the simpler to configure “&lt;A href="https://learn.microsoft.com/azure/ai-services/translator/document-translation/how-to-guides/create-sas-tokens?tabs=Containers" target="_blank" rel="nofollow noopener noreferrer"&gt;Shared-Access-Signature (SAS) tokens&lt;/A&gt;” commented on the &lt;A href="https://github.com/MartinPankraz/steampunk-helper/blob/main/steampunk-part4/z_cl_steampunk_to_azure_blob.abap" target="_blank" rel="nofollow noopener noreferrer"&gt;shared GitHub repos&lt;/A&gt;. SAS tokens can be created from the Azure portal with two clicks.&lt;BR /&gt;
&lt;BR /&gt;
The &lt;A href="https://learn.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key" target="_blank" rel="nofollow noopener noreferrer"&gt;shared key approach&lt;/A&gt; requires a bit of hashing and marshaling on ABAP. Use the &lt;A href="https://github.com/microsoft/ABAP-SDK-for-Azure" target="_blank" rel="nofollow noopener noreferrer"&gt;ABAP SDK for Azure&lt;/A&gt; to accelerate that part of your implementation. Check the “&lt;A href="https://github.com/microsoft/ABAP-SDK-for-Azure/blob/master/src/zadf/zadf_service_blob/zcl_adf_service_blob.clas.abap#L656" target="_blank" rel="nofollow noopener noreferrer"&gt;get_sas_token&lt;/A&gt;” &amp;nbsp;method for reference.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://learn.microsoft.com/azure/storage/blobs/anonymous-read-access-configure?tabs=portal" target="_blank" rel="nofollow noopener noreferrer"&gt;Anonymous read access&lt;/A&gt; would only be ok for less sensitive content like static image files or the likes because anyone can access them once they have the URL.&lt;BR /&gt;
&lt;H1 id="toc-hId-638305100"&gt;For an enterprise-grade solution however, you will need to use a more secure protocol like OAuth2 with Microsoft Entra ID&lt;/H1&gt;&lt;BR /&gt;
Technically you could do the OAuth2 token fetching with plain http-client requests from ABAP Cloud. See &lt;A href="https://jacekw.dev/blog/2022/oauth-client-credentials-from-abap-cloud/" target="_blank" rel="nofollow noopener noreferrer"&gt;this blog&lt;/A&gt; by &lt;SPAN class="mention-scrubbed"&gt;jacek.wozniczak&lt;/SPAN&gt; for instance. However, it is recommended to use the steampunk “Communication Management” to abstract away the configuration from your code. Think “external configuration store”. Also, it reduces the complexity of your ABAP code, because Communication Management handles the OAuth2 flow for you.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 100%;background-color: #ffc68a"&gt;&lt;span class="lia-unicode-emoji" title=":loudspeaker:"&gt;📢&lt;/span&gt;Note: SAP will release the needed capability to maintain OAuth2 scopes in communication arrangements as part of your ABAP Cloud requests with the upcoming &lt;A href="https://help.sap.com/docs/abap-cross-product/roadmap-info/integration-services?locale=en-US#security-for-integration-services" target="_blank" rel="noopener noreferrer"&gt;SAP BTP, ABAP environment 2402&lt;/A&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
So, till then you will need to use the BTP Destination service. Target &lt;STRONG&gt;destinations&lt;/STRONG&gt; &lt;STRONG&gt;living on subaccount level&lt;/STRONG&gt; by calling them like so (omitting the i_service_instance_name, thank you &lt;SPAN class="mention-scrubbed"&gt;thwiegan&lt;/SPAN&gt; for calling that out &lt;A href="https://answers.sap.com/questions/13305436/abap-environment-cannot-access-remote-odata-servic.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;span class="lia-unicode-emoji" title=":disappointed_face:"&gt;😞&lt;/span&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;destination = cl_http_destination_provider=&amp;gt;create_by_cloud_destination(&lt;BR /&gt;
        i_name = |azure-blob|&lt;BR /&gt;
        i_authn_mode = if_a4c_cp_service=&amp;gt;service_specific&lt;BR /&gt;
    ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Or call &lt;STRONG&gt;destinations living on Cloud Foundry&lt;/STRONG&gt; spaces like so:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;destination = cl_http_destination_provider=&amp;gt;create_by_cloud_destination(&lt;BR /&gt;
        i_name = |azure-blob|&lt;BR /&gt;
        i_service_instance_name = |SAP_BTP_DESTINATION|&lt;BR /&gt;
        i_authn_mode = if_a4c_cp_service=&amp;gt;service_specific&lt;BR /&gt;
    ).&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
For above Cloud Foundry variation you need to deploy the “standard” communication scenario &amp;nbsp;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/integration-and-connectivity-communication-management#destination" target="_blank" rel="noopener noreferrer"&gt;SAP_COM_0276&lt;/A&gt;. My generated arrangement id in this case was “SAP_BTP_DESTINATION”.&lt;BR /&gt;
&lt;BR /&gt;
Be aware, SAP marked the approach with BTP destinations as &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/http-communication-via-destination-service-deprecated" target="_blank" rel="noopener noreferrer"&gt;deprecated&lt;/A&gt; for BTP ABAP. And we can now see why. It will be much nicer doing it from the single initial communication arrangement only, rather than having the overhead with additional services and arrangements. Looking forward to that in February &lt;span class="lia-unicode-emoji" title=":smiling_face_with_sunglasses:"&gt;😎&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
Not everything is “bad” about using BTP destinations with ABAP Cloud though. They have management APIs, which the communication arrangements don’t have yet. Also, re-use of APIs across your BTP estate beyond the boundary of your ABAP Environment tenant would be useful.&lt;BR /&gt;
&lt;H3 id="toc-hId-699957033"&gt;A fully automated solution deployment with the BTP and Azure terraform providers is only possible with the destination service approach as of today.&lt;/H3&gt;&lt;BR /&gt;
See &lt;A href="https://github.com/SAP-samples/teched2023-XP160" target="_blank" rel="nofollow noopener noreferrer"&gt;this TechEd 2023 session&lt;/A&gt; and watch this new &lt;A href="https://github.com/SAP-samples/btp-terraform-samples/tree/use-cases-ms/in-development/uc_abap_env_ms_obj_store" target="_blank" rel="nofollow noopener noreferrer"&gt;sample repos&lt;/A&gt; (still in development) for reference.&lt;BR /&gt;
&lt;H1 id="toc-hId-245278090"&gt;The application flow is quite simple once the authentication part is figured out&lt;/H1&gt;&lt;BR /&gt;
Access your communication management config from your ABAP web Ui:&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;A href="https://your-steampunk-domain.abap-web.eu20.hana.ondemand.com/ui#Shell-home" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://your-steampunk-domain.abap-web.eu20.hana.ondemand.com/ui#Shell-home&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
Steampunk supports the &lt;A href="https://help.sap.com/docs/sap-btp-abap-environment/abap-environment/supported-protocols-and-authentication-methods" target="_blank" rel="noopener noreferrer"&gt;typical set of authentication flows&lt;/A&gt; for outbound communication users using http that you are used to from BTP. I chose the OAuth2 Client Credentials grant because that is most widely referenced in the BTP world and reasonably secure.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-overview.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.2 ABAP Cloud API flow including OAuth2 token request from Microsoft Entra ID&lt;/P&gt;&lt;BR /&gt;
Since I am integrating with an Azure Storage account, I will need to authenticate via Microsoft Entra ID (formerly known as Azure Active Directory).&lt;BR /&gt;
&lt;BR /&gt;
Yes, Microsoft likes renaming stuff from time to time, too &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Using the &lt;A href="https://learn.microsoft.com/rest/api/storageservices/operations-on-blobs" target="_blank" rel="nofollow noopener noreferrer"&gt;Azure Storage REST API&lt;/A&gt; I can create, update, delete, and list files as I please.&lt;BR /&gt;
&lt;H1 id="toc-hId-48764585"&gt;The Entra ID setup takes a couple of clicks&lt;/H1&gt;&lt;BR /&gt;
Create a new App registration from Microsoft Entra ID service on your Azure portal and generate a new secret. Beware of the expiry date!&lt;BR /&gt;
&lt;BR /&gt;
Below preferred option will start working once SAP adds the scope parameter for OAuth2 Client Credentials grant as described before.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-auth-setup1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.3 Screenshot of attribute and secret mapping for ABAP Cloud Outbound user&lt;/P&gt;&lt;BR /&gt;
For now, let’s have a look at a destination on subaccount level instead. Be aware the scope parameter needs to be “&lt;A href="https://storage.azure.com/.default" target="_blank" rel="nofollow noopener noreferrer"&gt;https://storage.azure.com/.default&lt;/A&gt;” (see fig.4 below, additional properties section called “scope” on the bottom right). That is also the setting that we are missing for the preferred approach mentioned above.&lt;BR /&gt;
&lt;BR /&gt;
The standard login URLs for OAuth token endpoints on Microsoft Entra ID are the following:&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;A href="https://login.microsoftonline.com/your-tenantId/oauth2/v2.0/token" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://login.microsoftonline.com/your-tenantId/oauth2/v2.0/token&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;A href="https://login.microsoftonline.com/your-tenantId/oauth2/v2.0/authorize" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://login.microsoftonline.com/your-tenantId/oauth2/v2.0/authorize&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-auth-setup2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.4 Screenshot of attribute mapping from Entra ID to SAP BTP Destination&lt;/P&gt;&lt;BR /&gt;
So far so good. Let’s roll the integration test from our ABAP console application on Eclipse (ADT).&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-result.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.5 Screenshot of file interaction from ABAP Cloud and data container view on Azure&lt;/P&gt;&lt;BR /&gt;
Excellent, there is our booking request: Safe and sound stored as Azure Blob, posted from ABAP, and read again seamlessly.&lt;BR /&gt;
&lt;BR /&gt;
See the &lt;A href="https://raw.githubusercontent.com/MartinPankraz/steampunk-helper/main/Steampunk-Helper-Lib.postman_collection.json" target="_blank" rel="nofollow noopener noreferrer"&gt;shared Postman collection&lt;/A&gt; to help with your integration testing.&lt;BR /&gt;
&lt;H1 id="toc-hId--147748920"&gt;Thoughts on production readiness&lt;/H1&gt;&lt;BR /&gt;
The biggest caveat is the regularly required OAuth2 client credential secret rotation. Unfortunately, credential-free options with Azure Managed Identities are not possible, because BTP is hyperscaler-agnostic and does not expose the underlying Azure components to you.&lt;BR /&gt;
&lt;BR /&gt;
Some of you might say next: let’s use client certificates with “veeery long validity time frames like 2038” to push out the problem beyond so far out someone else will have to deal with it. Well, certificate lifetimes get reduced more and more (TLS certs for instance have a maximum of 13 months at &lt;A href="https://www.digicert.com/faq/public-trust-and-certificates/how-long-are-tls-ssl-certificate-validity-periods" target="_blank" rel="nofollow noopener noreferrer"&gt;DigiCert since 2020&lt;/A&gt;) and you have to rotate them eventually, too &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;. With shorter certificate lifetimes more secure hashing algorithms come into effect much quicker for instance.&lt;BR /&gt;
&lt;BR /&gt;
I will dedicate a separate post on client certificates (mTLS) with steampunk to consume Azure services.&lt;BR /&gt;
&lt;BR /&gt;
What about &lt;A href="https://learn.microsoft.com/graph/api/resources/federatedidentitycredentials-overview" target="_blank" rel="nofollow noopener noreferrer"&gt;federated identities&lt;/A&gt;? You could configure trust between your SAP Cloud Identity Service (or Steampunk auth service) and Microsoft Entra ID to allow requests from ABAP Cloud to authorize Azure services. However, that would be a more complex configuration with implications for your overall setup causing larger integration test needs. And we embarked on this journey to discover a simple solution not too far away from AL11 and the likes, right? &lt;span class="lia-unicode-emoji" title=":grinning_face_with_sweat:"&gt;😅&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;See a working implementation of federated identities with SAP Cloud Identity service consuming Microsoft Graph published by my colleagure &lt;SPAN class="mention-scrubbed"&gt;mraepple&lt;/SPAN&gt; in his blog series &lt;A href="https://blogs.sap.com/2022/11/02/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-vi-calling-the-microsoft-graph-on-behalf-of-the-sap-authenticated-user/" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Ok, then let’s compromise and see how we can automatically rotate secrets. Azure Key Vault exposes events for secrets, keys, and certificates to inform downstream services about due expiry. With that a small low code app can be provided to perform the secret update. See &lt;A href="https://github.com/Azure/AzureAD-AppSecretManager" target="_blank" rel="nofollow noopener noreferrer"&gt;below sample&lt;/A&gt; that went the extra mile asking the admins via Microsoft Teams if they wanted to perform the change or not:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/steampunk-blob-sec-rotate.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Fig.6 Architecture of secret rotation with Azure Key Vault and secret refresh approval&lt;/P&gt;&lt;BR /&gt;
A new secret for the app registration on Entra can be generated with the &lt;A href="https://learn.microsoft.com/en-us/graph/api/application-addpassword?view=graph-rest-1.0&amp;amp;tabs=http" target="_blank" rel="nofollow noopener noreferrer"&gt;Microsoft Graph API like so&lt;/A&gt;. See &lt;A href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/automate-secret-rotation-in-key-vault/ba-p/3275149" target="_blank" rel="nofollow noopener noreferrer"&gt;this post&lt;/A&gt; for details on the Azure Key Vault aspects of the mix.&lt;BR /&gt;
&lt;BR /&gt;
To apply that flow and propagate the new secret to steampunk, we need to call BTP APIs to save the new secret. See the BTP REST API for Destinations &lt;A href="https://api.sap.com/api/SAP_CP_CF_Connectivity_Destination/path/put_subaccountDestinations" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; to learn about the secret update method.&lt;BR /&gt;
&lt;BR /&gt;
Have a look at my earlier &lt;A href="https://blogs.sap.com/2022/12/02/automatic-sap-btp-trust-store-certificate-renewal-with-azure-key-vault-or-how-to-stop-thinking-about-expiry-dates-once-and-for-all/" target="_blank" rel="noopener noreferrer"&gt;blog post&lt;/A&gt; for specifics on how to do the same with certificates.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://github.com/Azure/AzureAD-AppSecretManager#costs" target="_blank" rel="nofollow noopener noreferrer"&gt;Estimated cost&lt;/A&gt; for such a secret rotation solution for 1000 rotations per month is around 2$ per month. With simpler configurations and less rotations, it can be covered by free tiers even.&lt;BR /&gt;
&lt;BR /&gt;
Once you have applied the means of automation as discussed above you may incorporate this into your DevOps process and live happily ever after with no manual secret handling &lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;.&lt;BR /&gt;
&lt;H1 id="toc-hId--344262425"&gt;Final Words&lt;/H1&gt;&lt;BR /&gt;
That’s a wrap &lt;span class="lia-unicode-emoji" title=":burrito:"&gt;🌯&lt;/span&gt;you saw today how – in the absence of an application server file system and NetWeaver MIME repository (good old days) – you can &lt;STRONG&gt;use Azure Storage Account as your external data store from BTP ABAP Environment&lt;/STRONG&gt; (steampunk) using ABAP Cloud. In addition to that, you&lt;STRONG&gt; gained insights into the proper setup for authentication&lt;/STRONG&gt; and what flavors are supported by steampunk now. You got a glimpse into &lt;STRONG&gt;automated deployment of the solution with the BTP and Azure terraform provider&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
To top it up you learnt what else is needed to &lt;STRONG&gt;operationalize the approach&lt;/STRONG&gt; at scale &lt;STRONG&gt;with regular secret/certificate rotation&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Check &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/developing-external-service-consumption-outbound-communication" target="_blank" rel="noopener noreferrer"&gt;SAP’s docs for external APIs&lt;/A&gt; with steampunk for further official materials.&lt;BR /&gt;
&lt;BR /&gt;
What do you think &lt;SPAN class="mention-scrubbed"&gt;dpanzer&lt;/SPAN&gt;&amp;nbsp;and &lt;SPAN class="mention-scrubbed"&gt;lars.hvam&lt;/SPAN&gt;? Not too bad, is it? &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
Find all the resources to replicate this setup on &lt;A href="https://github.com/MartinPankraz/steampunk-helper" target="_blank" rel="nofollow noopener noreferrer"&gt;this GitHub repos&lt;/A&gt;. Stay tuned for the remaining parts of the steampunk series with Microsoft Integration Scenarios from my &lt;A href="https://blogs.sap.com/2023/06/06/kick-start-your-sap-abap-platform-integration-journey-with-microsoft/" target="_blank" rel="noopener noreferrer"&gt;overview post&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Cheers&lt;BR /&gt;
&lt;BR /&gt;
Martin</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/hey-abap-cloud-please-let-me-save-my-data-export-to-azure-storage-please/ba-p/13572978"/>
    <published>2023-11-21T13:21:26+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/child-s-play-install-sap-btp-transparent-proxy-using-helm/ba-p/13574118</id>
    <title>Child's play: Install SAP BTP transparent proxy using Helm</title>
    <updated>2024-01-15T16:14:28+01:00</updated>
    <author>
      <name>iliyanvidenov9</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/343616</uri>
    </author>
    <content>&lt;P&gt;It is inevitable that cloud solutions have to communicate with other remote solutions. The latter can be situated on public or private clouds, or set up on client sites. Of course, it would be easier to have levers to facilitate this in the simplest possible way. This is where the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/connectivity" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Connectivity&lt;/A&gt; services and components come to the rescue! In this blog post, you will understand how to install one of these components using &lt;A href="https://helm.sh/" target="_blank" rel="noopener nofollow noreferrer"&gt;Helm&lt;/A&gt;: the &lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/acc64ada71e34f98867f16fbcc471b5e.html" target="_blank" rel="noopener noreferrer"&gt;SAP BTP transparent proxy&lt;/A&gt;&lt;/STRONG&gt;.&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN class=""&gt;SAP BTP transparent proxy simplifies the connection between &lt;A href="https://kubernetes.io/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubernetes&lt;/A&gt; workloads and target systems defined as destinations in the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/managing-destinations?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;SAP Destination service&lt;/A&gt;. To understand more about some of the features of the Transparent Proxy, you could check this &lt;A href="https://blogs.sap.com/2022/11/29/transparent-consumption-of-connectivity/" target="_blank" rel="noopener noreferrer"&gt;blog&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-963953032"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;Before you start, you should have the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;A &lt;A href="https://kubernetes.io/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubernetes&lt;/A&gt; cluster&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kubectl&lt;/A&gt;&lt;SPAN&gt; installed and configured on your local machine&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://helm.sh/" target="_blank" rel="noopener nofollow noreferrer"&gt;Helm&lt;/A&gt;&lt;SPAN&gt; installed on your local machine&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/btp-getting-started" target="_blank" rel="noopener noreferrer"&gt;SAP BTP subaccount&lt;/A&gt;&lt;SPAN&gt; with a Destination service instance and a Connectivity Proxy instance (optional for on-premise connectivity)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://istio.io/latest/" target="_blank" rel="noopener nofollow noreferrer"&gt;Istio&lt;/A&gt;&lt;SPAN&gt; or &lt;/SPAN&gt;&lt;A href="https://cert-manager.io/" target="_blank" rel="noopener nofollow noreferrer"&gt;cert-manager&lt;/A&gt;&lt;SPAN&gt; running in your Kubernetes cluster as a foundation for traffic encryption between the micro-components of the &lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/CP_CONNECTIVITY/cca91383641e40ffbe03bdc78f00f681/acc64ada71e34f98867f16fbcc471b5e.html" target="_blank" rel="noopener noreferrer"&gt;Transparent Proxy&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/connectivity-proxy-for-kubernetes?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;Connectivity proxy&lt;/A&gt;&lt;SPAN&gt; installed in your cluster (optional for on-premise connectivity)&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-767439527"&gt;Installation steps&lt;/H2&gt;&lt;P&gt;To install the Transparent Proxy using Helm, follow these steps:&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 1. Create a namespace for the Transparent Proxy in your Kubernetes cluster. For example:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl create namespace transparent-proxy​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 2. Create a Kubernetes secret with the credentials of your Destination service instance&lt;/P&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;You can obtain the credentials from the SAP BTP cockpit. Navigate to Services -&amp;gt; Instances and Subscriptions -&amp;gt; Click on the service instance row -&amp;gt; Service Keys -&amp;gt; View -&amp;gt; Copy JSON&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;Use the service key data to create the Kubernetes secret. For example:&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl create secret generic dest-svc-key -n transparent-proxy --from-literal=secret='&amp;lt;credentials&amp;gt;'​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 3. Create values.yaml according to your needs. You can find all available parameters &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/transparent-proxy-configuration-guide?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;. For example:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;config:
  security:
    communication:
      internal:
        encryptionEnabled: true
  integration:
    destinationService:
      defaultInstanceName: &amp;lt;instance-name&amp;gt;
      instances:
        - name: &amp;lt;instance-name&amp;gt;
          serviceCredentials:
            secretKey: &amp;lt;secret-key&amp;gt;
            secretName: &amp;lt;secret-name&amp;gt;
    serviceMesh:
      istio:
        istio-injection: enabled&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 4. Install the Transparent Proxy using the Helm values from step 3:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;helm install transparent-proxy oci://registry-1.docker.io/sapse/transparent-proxy --version &amp;lt;version of helm chart&amp;gt; --namespace transparent-proxy -f &amp;lt;path-to-values.yaml&amp;gt;​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You should receive a similar to this response:&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/Screenshot-2024-01-11-at-12.45.04.png" border="0" /&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;Successful installation of Transparent Proxy with Helm&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 5. Verify that the Transparent Proxy is running by checking the status of the pods and the health check:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl get pods -n transparent-proxy&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;There should be two pods running:&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/Screenshot-2024-01-11-at-12.05.51.png" border="0" /&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;Transparent Proxy components after installation&lt;/P&gt;&lt;P&gt;As you can see, the Transparent Proxy has a health check pod which constantly checks the status of all Transparent Proxy components. You can look at what capabilities the health check has in the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/transparent-proxy-verification-and-testing" target="_blank" rel="noopener noreferrer"&gt;Verification and Testing&lt;/A&gt; page in the Help portal. Here's how you can execute a component check:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl run perform-hc --image=curlimages/curl -it --rm --restart=Never -- curl -w "\n" 'sap-transp-proxy-int-healthcheck.transparent-proxy/status'​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;And the result should be the following:&lt;BR /&gt;&lt;BR /&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/Screenshot-2024-01-11-at-12.32.07.png" border="0" /&gt;&lt;BR /&gt;This means that the sap-transp-proxy-manager, the heart of the Transparent Proxy, is running smoothly and you are ready to consume your first target system through the Transparent Proxy!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-570926022"&gt;Try it out&lt;/H2&gt;&lt;P&gt;To use the Transparent Proxy, you should create a Destination Custom Resource (CR). Let's create a dynamic one. "&lt;EM&gt;Dynamic&lt;/EM&gt;" means a Destination CR will serve all destinations for a Destination service instance or its tenants. Follow these steps:&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 1. Create a Destination CR file with name &lt;EM&gt;dynamic-destination.yaml​&lt;/EM&gt;:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;apiVersion: destination.connectivity.api.sap/v1
kind: Destination
metadata:
  name: dynamic-destination
  namespace: transparent-proxy
spec:
  destinationRef:
    name: "*"
  destinationServiceInstanceName: dest-service-instance​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 2. Create the resource from step 1 in your cluster:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl create -f dynamic-destination.yaml​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 3. Wait for a successful status of the Destination CR. To check it execute:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl get dst dynamic-destination -n transparent-proxy -o yaml&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You should observe a status similar to this one:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;status:
  conditions:
  - lastUpdateTime: "2024-01-11T11:56:33.605473101Z"
    message: Technical connectivity is configured. Kubernetes service with name
      dynamic-destination is created.
    reason: ConfigurationSuccessful
    status: "True"
    type: Available&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 4. Create a curl pod, from where you can test the consumption of the target system through the Transparent Proxy:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;kubectl run curlpod -n transparent-proxy --image=curlimages/curl -n transparent-proxy -i --tty -- sh&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 5. Consume a target system defined as a destination in your Destination service instance:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;curl dynamic-destination -H "X-Destination-Name: &amp;lt;destination-name&amp;gt;"​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-503495236"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-306981731"&gt;Examples&lt;/H3&gt;&lt;P&gt;In the context of my &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/btp-getting-started" target="_blank" rel="noopener noreferrer"&gt;SAP BTP subaccount&lt;/A&gt;, I have created two destinations: one pointing to the SAP XSUAA API, and another pointing to a server on my local machine, exposed to the cloud via the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Connector&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2024/01/Screenshot-2024-01-11-at-17.21.39.png" border="0" /&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;Configured destinations in the SAP BTP Cockpit&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Executing a request to the SAP XSUAA API. This is an example for &lt;A href="https://api.sap.com/api/AuthorizationAPI/resource/Applications" target="_blank" rel="noopener noreferrer"&gt;getting the registered service instances of the current subaccount&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;via&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;destination&lt;/EM&gt;&lt;SPAN&gt;&lt;SPAN&gt;, locally exposed and served by Transparent Proxy, and centrally managed via the SAP Destination service:&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;~ $ curl dynamic-destination/sap/rest/authorization/v2/apps -H "X-Destination-Name: xsuaa-api" -v
* Host dynamic-destination:80 was resolved.
...
&amp;gt; GET /sap/rest/authorization/v2/apps HTTP/1.1
&amp;gt; Host: dynamic-destination
&amp;gt; User-Agent: curl/8.5.0
&amp;gt; Accept: */*
&amp;gt; X-Destination-Name: xsuaa-api
&amp;gt; 
&amp;lt; HTTP/1.1 200 OK
...
[{"appid":"auditlog!b3718","serviceinstanceid":"0889a7e7-61d8-41...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Executing a request to an on-premise system using principal propagation. That system is a simple server that maps the user certificate to a concrete user. The current response greets the requestor.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;~ $ curl dynamic-destination/principal-propagation -H "X-Destination-Name: my-on-premise-system" -H "Authorization: Bearer $TOKEN" -v
* Host dynamic-destination:80 was resolved.
...
* Connected to dynamic-destination (10.104.69.106) port 80
&amp;gt; GET /principal-propagation HTTP/1.1
&amp;gt; Host: dynamic-destination
&amp;gt; User-Agent: curl/8.5.0
&amp;gt; Accept: */*
&amp;gt; X-Destination-Name: my-on-premise-system
&amp;gt; Authorization: Bearer eyJhbGciOiJSUzI1NiIsImprdS...
...
&amp;lt; HTTP/1.1 200 OK
...
Hello Iliyan Videnov!​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;SPAN class=""&gt;In this blog post, you have learned how to install SAP BTP transparent proxy using Helm, and how to easily set up it for system consumption. I hope you find it useful and enjoy it. Ideas, suggestions, and comments are welcome. Thank you for reading!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/child-s-play-install-sap-btp-transparent-proxy-using-helm/ba-p/13574118"/>
    <published>2024-01-15T16:14:28+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/new-release-available-sap-cloud-connector-2-17-0/ba-p/13697681</id>
    <title>New Release Available: SAP Cloud Connector 2.17.0</title>
    <updated>2024-05-10T14:33:54.505000+02:00</updated>
    <author>
      <name>MarcoErtel</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/6305</uri>
    </author>
    <content>&lt;P&gt;We are happy to announce that the fresh version of the SAP Cloud Connector is now available for &lt;SPAN&gt;&lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;download&lt;/A&gt;&lt;/SPAN&gt;. It is (as usual) packed with a host of new features and improvements. From bug fixes to enhancements, we've worked diligently to deliver an updated connector that addresses critical issues while also enhancing usability and functionality, which you can find more detailed in the &lt;SPAN&gt;&lt;A href="https://help.sap.com/whats-new/cf0cb2cb149647329b5d02aa96303f56?Component=Connectivity&amp;amp;locale=en-US&amp;amp;version=Cloud&amp;amp;Software_Lifecycle=General%20Availability&amp;amp;Valid_as_Of=2024-05-01%3A2024-05-03" target="_blank" rel="noopener noreferrer"&gt;release notes&lt;/A&gt;&lt;/SPAN&gt;.&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;Moving onto enhancements, we've made changes to the underlying architecture and features of the Cloud Connector. One of the major changes is the switch from JavaWeb 3.x runtime on Tomcat 8.5 to JavaWeb 4.x, which operates on Tomcat 9. This new runtime container facilitates better performance and stability.&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;In addition, Cloud Connector 2.17 now supports the use of SapMachine 21 as Java runtime. This change can provide increased efficiency and flexibility for your operations.&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;One of the significant enhancements in this release is the addition of support for up to 3 LDAP servers for authentication.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_0-1715343899539.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108662i99117DCC49CE8FA5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_0-1715343899539.png" alt="MarcoErtel_0-1715343899539.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This feature is essential for setups where the user base is spread across multiple LDAP user stores or multiple user bases in a single LDAP user store (find more in the &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/use-ldap-for-authentication?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;documentation&lt;/A&gt;&lt;/SPAN&gt;).&lt;BR /&gt;We've also introduced the option to configure a separate port for the HA-related communication between the master and shadow instances.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_1-1715343899540.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108661i432E39BA1A67206C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_1-1715343899540.png" alt="MarcoErtel_1-1715343899540.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This new feature enables you to use HA in conjunction with certificate-based authentication to overcome the limitation from 2.16 (find more &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/install-failover-instance-for-high-availability?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;&lt;/SPAN&gt;)&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;Additional hardware monitoring REST APIs have been provided for disk and CPU status, allowing for more comprehensive system insights. Plus, you can now use the hardware monitor on the shadow instance as well.&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;To improve your operations, we’ve introduced for the access control settings a creation timestamp, providing more detailed and useful information for your operations:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_2-1715343899541.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108660i2C75337A93E41BD6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_2-1715343899541.png" alt="MarcoErtel_2-1715343899541.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Finally, we've improved the Cloud Connector UI by adding a session expiration progress bar. This new addition helps you keep track of your active session and alerts you when you need to log in again.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_3-1715343899542.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108663i3AADF3B061835890/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_3-1715343899542.png" alt="MarcoErtel_3-1715343899542.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In summary, with this release, we've not only ensured the highest security levels but also worked on improving the overall user experience and functionality. Don't hesitate to upgrade your Cloud Connector to version 2.17.0 today (by downloading it from &lt;SPAN&gt;&lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;&lt;/SPAN&gt;) and explore these new features and improvements. For more detailed information, make sure to check out the &lt;SPAN&gt;&lt;A href="https://help.sap.com/whats-new/cf0cb2cb149647329b5d02aa96303f56?Component=Connectivity&amp;amp;locale=en-US&amp;amp;version=Cloud&amp;amp;Software_Lifecycle=General%20Availability&amp;amp;Valid_as_Of=2024-05-01%3A2024-05-03" target="_blank" rel="noopener noreferrer"&gt;official release notes&lt;/A&gt;&lt;/SPAN&gt;. Enjoy the enhanced performance and functionality of the new SAP Cloud Connector!Happy Connecting!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/new-release-available-sap-cloud-connector-2-17-0/ba-p/13697681"/>
    <published>2024-05-10T14:33:54.505000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/configuration-as-code-cac-with-destinations/ba-p/13699003</id>
    <title>Configuration as code (CaC) with destinations.</title>
    <updated>2024-05-13T12:54:57.123000+02:00</updated>
    <author>
      <name>quovadis</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/743</uri>
    </author>
    <content>&lt;H1 id="toc-hId-865494464"&gt;Configuration as code (CaC) with destinations.&lt;/H1&gt;&lt;P&gt;Destinations are very handy and powerful mechanism to facilitate access to target systems and devices.&lt;/P&gt;&lt;P&gt;When it comes to SAP BTP destinations, the idea is to manage both &lt;STRONG&gt;subaccount&lt;/STRONG&gt; and &lt;STRONG&gt;instance&lt;/STRONG&gt; level destinations (and/or their certificates) as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;shared&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;configuration resources on a provider subaccount level.&lt;/P&gt;&lt;P&gt;That way, the destinations configurations can be stored as versioned assets in a source repository and need to be maintained only once per provider, thus, without incurring application runtime tie-in.&lt;/P&gt;&lt;P&gt;Last but not least, BTP destination service is used as a self-configuration tool.&lt;/P&gt;&lt;H2 id="toc-hId-798063678"&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#configuration-as-code-cac-quovadis-master" target="_blank" rel="noopener nofollow noreferrer"&gt;Configuration as code with SAP BTP destination service&lt;/A&gt;&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;Table of Contents&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#cac-dest" target="_blank" rel="noopener nofollow noreferrer"&gt;Configuration as code with SAP BTP destination service.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-dest-service" target="_blank" rel="noopener nofollow noreferrer"&gt;create shared destination service instance and binding&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-bootstrap" target="_blank" rel="noopener nofollow noreferrer"&gt;Provision bootstrap destinations.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#get-dest-credentials" target="_blank" rel="noopener nofollow noreferrer"&gt;retrieve destination service credentials from binding&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#create-bootstrap-payload" target="_blank" rel="noopener nofollow noreferrer"&gt;describe bootstrap destination definitions.&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#apply-payload" target="_blank" rel="noopener nofollow noreferrer"&gt;create bootstrap destinations on subaccount&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#configure-dest" target="_blank" rel="noopener nofollow noreferrer"&gt;Configure destination resources.&lt;/A&gt;&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#dynamic_dest" target="_blank" rel="noopener nofollow noreferrer"&gt;dynamic_dest route with managed approuter&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#cloud-sdk" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Cloud SDK built-in destinations&lt;/A&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;LI&gt;&lt;A href="https://gist.github.com/ptesny/aa8bc30ce043e1e11c145fe15278db62#documentation" target="_blank" rel="noopener nofollow noreferrer"&gt;Documentation.&lt;/A&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;PS.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Bootstrap destinations definitions. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Even, if there is no intrinsic BTP CLI command to assist in creation of destinations from service bindings, this can be achieved quite easily with a bit of jq gimmick by applying service binding credentials to a json payload template, for instance:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "init_data": {
        "subaccount": {
            "destinations": [
                  {
                    "Description": "dest-httpbin",
                    "Type": "HTTP",
                    "clientId": "sb-clone12847c4c89544b4f9234b26ede429f62!b282590|destination-xsappname!b62",
                    "HTML5.DynamicDestination": "true",
                    "HTML5.Timeout": "60000",
                    "Authentication": "OAuth2ClientCredentials",
                    "Name": "dest-httpbin",
                    "tokenServiceURL": "https://&amp;lt;subdomain&amp;gt;.authentication.us10.hana.ondemand.com/oauth/token",
                    "ProxyType": "Internet",
                    "URL": "https://httpbin.org",
                    "tokenServiceURLType": "Dedicated",
                    "clientSecret": "&amp;lt;clientSecret&amp;gt;"
                  },
                  {
                    "Description": "SAP Destination Service APIs",
                    "Type": "HTTP",
                    "clientId": "sb-clone12847c4c89544b4f9234b26ede429f62!b282590|destination-xsappname!b62",
                    "HTML5.DynamicDestination": "true",
                    "HTML5.Timeout": "60000",
                    "Authentication": "OAuth2ClientCredentials",
                    "Name": "destination-service",
                    "tokenServiceURL": "https://&amp;lt;subdomain&amp;gt;.authentication.us10.hana.ondemand.com/oauth/token",
                    "ProxyType": "Internet",
                    "URL": "https://destination-configuration.cfapps.us10.hana.ondemand.com/destination-configuration/v1",
                    "tokenServiceURLType": "Dedicated",
                    "clientSecret": "&amp;lt;clientSecret&amp;gt;"
                  }
            ],
           "certificates": [
           ],

            "existing_certificates_policy": "update",
            "existing_destinations_policy": "update"           
       }
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Alternatively, one could resort to using SAP Cloud SDK built-in &lt;A href="https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#service-binding-environment-variables" target="_self" rel="nofollow noopener noreferrer"&gt;service binding destinations&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;The below nodejs code snippet demonstrates how to leverage&amp;nbsp;SAP Cloud SDK with its service binding destinations with the likes of service manager and destinations services.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: {{ .Values.services.srv.name }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app: {{ .Values.services.srv.name }}
spec:
  runtime: {{ .Values.services.srv.runtime }}
#  runtimeImageOverride: {{ .Values.services.srv.runtimeImageOverride }}
  source:
    inline:
      dependencies: |
        {
          "name": "{{ .Values.services.srv.name }}",
          "version": "0.0.1",
          "dependencies": {
            "axios":"latest"
            ,"debug": "latest"
            ,"@sap/xsenv": "latest"
            ,"@sap-cloud-sdk/http-client": "latest"
            ,"@sap-cloud-sdk/connectivity": "latest"
            ,"@sap-cloud-sdk/resilience": "latest"
            ,"async-retry": "latest"
          }
        }
      source: |
        const debug = require('debug')('{{ .Values.services.srv.name }}:function');
        const NOT_FOUND = 'Not Found';
        const xsenv = require('@sap/xsenv');

        const services = xsenv.getServices({
          sm: { label: 'service-manager', name: 'saas-sm' }
          ,
          dest: { label: 'destination' }

        });
        console.log('saas-sm: ', services.sm);

        const readServices = xsenv.readServices();
        console.log('readServices: ', readServices);

        const httpClient = require('@sap-cloud-sdk/http-client');

        const cloudSdkConnectivity = require('@sap-cloud-sdk/connectivity');
        const { retrieveJwt, decodeJwt, Destination } = require('@sap-cloud-sdk/connectivity');
        const { setGlobalLogLevel, createLogger } = require('@sap-cloud-sdk/util');
        const { retry } = require ('@sap-cloud-sdk/resilience');
        const { resilience } = require ('@sap-cloud-sdk/resilience');
        const ResilienceOptions = {
          retry: 10,
          circuitBreaker: false,
          timeout: 300*1000 // 5 minutes in milliseconds
        };          

        const retryme = require('async-retry');

        setGlobalLogLevel('debug');
        const logger = createLogger('http-logs');

        module.exports = {
          main: async function (event, context) {
            const req = event.extensions.request;

            const message = `Hello World`
              + ` from the Kyma Function ${context['function-name']}`
              + ` running on ${context.runtime}!`
              + ` with the request headers ${JSON.stringify(req.headers,0,2)}`;
            console.log(message);
            
            if (typeof req.path !== undefined) {
              console.log('path: ', JSON.stringify(req.path,0,2))
            }
            if (typeof req.params !== undefined) {
              console.log('params: ', JSON.stringify(req.params,0,2))
            }
            if (typeof req.url !== undefined) {
              console.log('url: ', JSON.stringify(req.url,0,2))
            }
            if (typeof req.authInfo !== undefined) {
              console.log('authInfo: ', JSON.stringify(req.authInfo,0,2))
            }

            const { pathname } = new URL(req.url || '', `https://${req.headers.host}`)
            console.log('pathname: ', pathname)

            const url = require("url");
            var url_parts = url.parse(req.url);
            console.log(url_parts);
            console.log(url_parts.pathname);

            // returns an array with paths
            let path_array = req.url.match('^[^?]*')[0].split('/').slice(1);
            console.log(path_array)

            console.log(req.url.match('^[^?]*')[0])

            if (!path_array?.length) return 'Please use an API verb';  
            const actions = [ 
               { name: 'offerings', verb: 'service_offerings', dest:  'saas-sm', url: '/v1/' },
               { name: 'plans', verb: 'service_plans', dest:  'saas-sm', url: '/v1/'  },
               { name: 'instances', verb: 'service_instances', dest:  'saas-sm', url: '/v1/'  },
               { name: 'bindings', verb: 'service_bindings', dest:  'saas-sm', url: '/v1/'  },
               { name: 'instanceDestinations', verb: 'instanceDestinations', dest:  'faas-dest-x509', url: '/destination-configuration/v1/'  },
               { name: 'subaccountDestinations', verb: 'subaccountDestinations', dest:  'faas-dest-x509' , url: '/destination-configuration/v1/' }
            ];
            
            const action = actions.find( ({ name }) =&amp;gt; name === path_array[1] )
            console.log('action found: ', action)

            if (path_array[0] == 'srv' &amp;amp;&amp;amp;  action !== undefined) {

              path_array = req.url.match('^[^?]*')[0].split('/').slice(2);

              console.log('path_array: ', path_array)

              const queryString = req.query;
              console.log('queryString: ', queryString)
              const urlParams = new URLSearchParams(queryString);

              const params = req.params;
              console.log('params: ', params) 

              try {
                  // https://sap.github.io/cloud-sdk/docs/js/features/connectivity/destinations#service-binding-environment-variables
                  const endpoint =  path_array[1] !== undefined ? '/' + path_array[1] : '';
                  console.log(endpoint)
                  let res = await httpClient.executeHttpRequest({ destinationName: action.dest }, {
                      method: 'GET',
                      url: action.url + action.verb + endpoint
                  });
                  return res.data;
              } catch (err) {
                  console.log(err.stack);
                  return err.message;
              }
              
            }            
          }
        }
   scaleConfig:
    maxReplicas: 5
    minReplicas: 3
  resourceConfiguration:
    function:
      profile: S
  env: ## https://kyma-project.io/docs/kyma/latest/05-technical-reference/00-configuration-parameters/svls-02-environment-variables/#node-js-runtime-specific-environment-variables
    - name: FUNC_TIMEOUT ## Specifies the number of seconds in which a runtime must execute the code.
      value: '1800'
    - name: REQ_MB_LIMIT ## payload body size limit in megabytes.
      value: "10"

    - name: DEBUG
      value: '{{ .Values.services.srv.name }}:*'
    - name: SERVICE_BINDING_ROOT
      value: /bindings
    

  secretMounts: 
    - secretName: {{ .Values.services.sm.bindingSecretName }}
      mountPath: "/bindings/saas-sm"
    - secretName: {{ .Values.services.dest.bindingSecretNamex509 }}
      mountPath: "/bindings/faas-dest-x509"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/configuration-as-code-cac-with-destinations/ba-p/13699003"/>
    <published>2024-05-13T12:54:57.123000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538</id>
    <title>Technical User Propagation from JCo towards On-Premises</title>
    <updated>2024-05-22T15:06:16.024000+02:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P data-unlink="true"&gt;This blog lays out how to use a technical user instead of basic authentication from &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;JCo based on the SAP Java Buildpack in CF&lt;/A&gt; towards on-premises.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-885667874"&gt;Background&lt;/H1&gt;&lt;P data-unlink="true"&gt;JCo retrieves an access token representing the technical user which is then be sent to the Connectivity service. This is similar to principal propagation, but in this case, a technical user is propagated instead of a business user. The retrieval of the access token performs the OAuth 2.0 client credentials flow, according to the token service configurations in the destination. Currently for JCo the token service generation supports basic authentication only. The token service is called from the Internet, not from the Cloud Connector.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-689154369"&gt;Configuration&lt;/H1&gt;&lt;P&gt;Generally speaking, the setup as described in the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;documentation&lt;/A&gt; stays the same, only the destination configuration in the Destination Service needs to be adjusted.&lt;/P&gt;&lt;P&gt;In the UI select the authentication type&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;TechnicalUserPropagation&lt;/STRONG&gt;&lt;/EM&gt;. You now need to enter three values for:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_id&lt;/STRONG&gt; - the technical user name (client ID) which is forwarded towards on-premises and used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_secret&lt;/STRONG&gt; - the secret for &lt;EM&gt;jco.client.tech_user_id&lt;/EM&gt; used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_service_url&lt;/STRONG&gt; - the URL of the token service&lt;SPAN&gt;, against which the token exchange is performed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-621723583"&gt;&lt;SPAN&gt;Example&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;We are going to use the token of the XSUAA service instance here. We specified for the instance in the configuration JSON the &lt;STRONG&gt;xsappname&lt;/STRONG&gt; as &lt;EM&gt;jco-technicalProp&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After the application binding we can retrieve the relevant parameters from the CF environment variables VCAP_SERVICES:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"clientid": "sb-jco-technicalProp!t77058"
"clientsecret": "TMsePptYQLSRf6qUWWt+l1D0rUQ="
"url": "https://cf.authentication.hana.ondemand.com"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Entering it in the Destination Service:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Properties" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113368iDC4EDC134023C774/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_0-1716286606143.png" alt="simon_luser_0-1716286606143.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The token will now be forwarded to the Cloud Connector. Assuming all necessary basic &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configuring-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;steps&lt;/A&gt; for principal propagation are configured, we can &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configure-subject-patterns-for-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;configure a pattern&lt;/A&gt; to extract its name for the short-lived certificate:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pattern" style="width: 259px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112153iE8E7F78470E681B7/image-dimensions/259x107?v=v2" width="259" height="107" role="button" title="simon_luser_1-1715949812665.png" alt="simon_luser_1-1715949812665.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The ABAP backend needs to &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector-configure-principal-propagation-for-rfc?locale=en-US&amp;amp;version=Cloud#2.-map-short-lived-certificates-to-users" target="_self" rel="noopener noreferrer"&gt;maintain a user mapping&lt;/A&gt; for this technical user, in this case mapping it to the ABAP user &lt;EM&gt;SKYWALKER&lt;/EM&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Mapping" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113369iC19FACFAECE438B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_1-1716286913724.png" alt="simon_luser_1-1716286913724.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That's it!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538"/>
    <published>2024-05-22T15:06:16.024000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/announcing-the-new-quot-in-metro-quot-disaster-recovery-solution-for-sap/ba-p/13904013</id>
    <title>Announcing the New "In-Metro" Disaster Recovery Solution for SAP BTP</title>
    <updated>2024-10-18T17:27:59.877000+02:00</updated>
    <author>
      <name>NiklasSiemer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11942</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Overview&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;We’re excited to unveil the latest enhancement to &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Technology+Platform/pd-p/73555000100700000172" class="lia-product-mention" data-product="1215-1"&gt;SAP Business Technology Platform&lt;/a&gt;&amp;nbsp;(SAP BTP):&lt;BR /&gt;The&amp;nbsp;&lt;STRONG&gt;In-Metro Disaster Recovery (DR) &lt;/STRONG&gt;solution.&lt;/P&gt;&lt;P&gt;This solution is designed to protect you against disasters affecting a single Availability Zone (AZ) with contractually committed SLAs RPO and RTO, offering enhanced resilience and uninterrupted operations for your cloud services.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is "In-Metro" DR for SAP BTP?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;The &lt;STRONG&gt;In-Metro DR solution&lt;/STRONG&gt; is built to protect against local disasters by leveraging a Multi-AZ setup. It ensures that, in the event of a single AZ disaster, which is defined by SAP, services remain operational, data is protected, and business continues without significant downtime.&lt;/P&gt;&lt;P&gt;The key metrics are:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;RPO (Recovery Point Objective): 5 minutes&lt;/STRONG&gt; – Ensuring that data can be recovered with a maximum of 5 minutes' loss in case of a disaster.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;RTO (Recovery Time Objective): 2 hours&lt;/STRONG&gt; – Ensuring that the full system is restored and operational within 2 hours of an incident.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;The Power of Multi-AZ Architecture&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;At the heart of &lt;STRONG&gt;In-Metro DR&lt;/STRONG&gt; is the &lt;STRONG&gt;Multi-AZ (Multi Availability Zone)&lt;/STRONG&gt; architecture, ensuring that your applications and databases are spread across different zones to safeguard against single-point failures.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="multiAZ.png" style="width: 454px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/180827i665C5E45AE1129E4/image-size/large?v=v2&amp;amp;px=999" role="button" title="multiAZ.png" alt="multiAZ.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This includes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Active-active applications across 3 AZs&lt;/STRONG&gt;: Applications are distributed across three AZs, with real-time data replication ensuring that if one AZ fails, the others automatically take over without impacting availability.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Active-passive databases across 2 AZs&lt;/STRONG&gt;: Databases are set up in active-passive mode, with a failover mechanism in place to switch operations to a backup AZ if the primary one fails.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Through automatic failover, &lt;STRONG&gt;load balancing&lt;/STRONG&gt;, and &lt;STRONG&gt;failure detection&lt;/STRONG&gt;, the solution ensures that services stay online seamlessly. Internal stress tests, such as regular “Chaos Day” exercises, further reinforce the reliability of this DR solution.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Availability and Scope&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;As of now, the &lt;STRONG&gt;In-Metro DR solution&lt;/STRONG&gt; is not available for all SAP BTP services. While it already covers a wide range of services, its scope will continue to expand over time as we improve coverage and extend it to additional SAP BTP services. &lt;STRONG&gt;The services in scope will be regularly updated&lt;/STRONG&gt; in the corresponding documents.&lt;/P&gt;&lt;P&gt;In-Metro DR is specifically designed for &lt;STRONG&gt;SAP-managed scenarios&lt;/STRONG&gt;, meaning that customers using SAP BTP under SAP’s management can take advantage of the In-Metro DR setup without additional configuration or costs. However, for &lt;STRONG&gt;customer-managed scenarios&lt;/STRONG&gt;, such as &lt;STRONG&gt;side-by-side extensions&lt;/STRONG&gt;, the customer is responsible for configuring it accordingly (e.g. deploy the apps with multiple instances or configure data replicas on the persistency level).&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;DR Planning and Regular Testing&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;To ensure the highest levels of reliability:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The &lt;STRONG&gt;DR plan&lt;/STRONG&gt; is &lt;STRONG&gt;updated every 12 months&lt;/STRONG&gt;, ensuring that it incorporates the latest technology and best practices.&lt;/LI&gt;&lt;LI&gt;A &lt;STRONG&gt;DR test is conducted at least once a year&lt;/STRONG&gt; to verify that the solution can meet its RPO and RTO commitments under real-world conditions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The &lt;STRONG&gt;In-Metro DR solution&lt;/STRONG&gt; currently supports SAP BTP regions hosted on both &lt;STRONG&gt;AWS&lt;/STRONG&gt; and &lt;STRONG&gt;Azure&lt;/STRONG&gt; cloud infrastructures, providing flexibility for your organization’s cloud setup.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;Next Steps&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;By leveraging &lt;STRONG&gt;In-Metro DR&lt;/STRONG&gt; within SAP-managed scenarios, you can trust that your critical data and services are protected with cutting-edge resilience, without the need for extra investment. For customer-managed scenarios, setting up corresponding HA and DR solutions will ensure your setup is equally resilient.&lt;/P&gt;&lt;P&gt;To explore which services are already covered and get all information, check the &lt;A href="https://www.sap.com/about/agreements/policies/cloud-service-specifications.html?sort=latest_desc&amp;amp;pdf-asset=9eae8f83-da7e-0010-bca6-c68f7e60039b&amp;amp;page=1" target="_blank" rel="noopener noreferrer"&gt;description&lt;/A&gt; in SAP Trust Center&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Alternatively, you can watch a deep dive into this new solution at SAP TechED: &lt;A href="https://www.sap.com/events/teched/virtual/flow/sap/te24/catalog/page/catalog/session/1721792860998001VH1P" target="_blank" rel="noopener noreferrer"&gt;Watch the SAP TechED session on In-Metro DR&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/announcing-the-new-quot-in-metro-quot-disaster-recovery-solution-for-sap/ba-p/13904013"/>
    <published>2024-10-18T17:27:59.877000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-foundry-python-and-cloud-connector-http/ba-p/13965916</id>
    <title>SAP Cloud Foundry - Python and Cloud Connector - HTTP</title>
    <updated>2024-12-17T16:17:56.738000+01:00</updated>
    <author>
      <name>felixbartler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4997</uri>
    </author>
    <content>&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;SAP Cloud Foundry enables developers to create full-stack applications with seamless backend integration to on-premise systems. This blog explains how to use Python to connect to on-premise resources through the SAP Cloud Connector. Python is the preferred language in the AI ecosystem, making it increasingly important for developing intelligent agents. For instance, we may want our agent to access APIs in an S4HANA system. With the Cloud Connector, this can be done securely within the enterprise environment.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1077583592"&gt;Access HTTP-based resources:&lt;/H2&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;In this scenario, we want to connect to an HTTP-based API, such as a RESTful API or an OData service, using Python in SAP Cloud Foundry. To do this, we need to set up the SAP Cloud Connector.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;For this demonstration, we will use a simple "Hello World" server running locally on my computer. The goal is to access this local server from the SAP Cloud Foundry runtime through the Cloud Connector. This setup will show how to bridge cloud applications with on-premise resources.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_9-1734447079352.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/202767iFF24FE75D97E3D7A/image-size/large?v=v2&amp;amp;px=999" role="button" title="felixbartler_9-1734447079352.png" alt="felixbartler_9-1734447079352.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;Szenario Architecture&lt;/P&gt;&lt;H3 id="toc-hId-1010152806"&gt;Prerequisite:&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;Before proceeding with the steps outlined in this guide, it is essential to have an instance of the SAP Cloud Connector installed. While it is possible to install the cloud connector on a server, for the purposes of this demonstration, we will be using a Windows machine. We recommend following the instructions provided in this blog (&lt;/SPAN&gt;&lt;A href="https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector/" target="_new" rel="noopener noreferrer"&gt;https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector/&lt;/A&gt;&lt;SPAN&gt;) to install and configure the cloud connector.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Second requirement is a BTP subaccount with a Cloud Foundry Environment. To this subaccount we will connect the Cloud Connector.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-813639301"&gt;1. Cloud Connector Configuration:&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;&lt;SPAN&gt;The first step is to create a configuration in the Cloud Connector that connects to our subaccount and exposes the HTTP resource. For the purpose of this demonstration, I ran a small Node.js server on my Windows machine that outputs "Hello World".&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_1-1734443094716.png" style="width: 472px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/202729i0A9C7FA6B756AAA3/image-dimensions/472x222?v=v2" width="472" height="222" role="button" title="felixbartler_1-1734443094716.png" alt="felixbartler_1-1734443094716.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;Localhost Example Server&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;SPAN&gt;To create the configuration, navigate to the admin interface for the cloud connector and create a "Cloud to On-Premise" configuration.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_2-1734443094716.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/202730i2D2B996D3498FF2E/image-size/large?v=v2&amp;amp;px=999" role="button" title="felixbartler_2-1734443094716.png" alt="felixbartler_2-1734443094716.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;Cloud To On-Premise Configuration&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;SPAN&gt;In the screenshot above, you can see that I exposed the internal host "localhost" with port 3333 via a virtual host called "virtualhost". This virtual host is the host that we will be requesting from the BTP side. For the time being, I exposed all paths using an unrestricted access policy, but in production scenarios, access policies can be defined more granularly.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_3-1734443094718.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/221105i3B7B98B787F901CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="felixbartler_3-1734443094718.png" alt="felixbartler_3-1734443094718.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;BTP Registered Cloud Connectors&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the BTP end, we can check the cockpit and the connected cloud connectors in the respective menu tab. If you cannot see this tab, you may be missing some roles. It is important to note that we see the LocationID "FELIXLAPTOP", which is an identifier that distinguishes multiple cloud connectors connected to the same subaccount.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-617125796"&gt;2. Create Connectivity Service instance:&lt;/H3&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;To use the Cloud Connector from our runtime environment, we first need a connectivity service instance. Here’s how to do it:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;In the &lt;STRONG&gt;BTP Cockpit&lt;/STRONG&gt;, go to your desired &lt;STRONG&gt;Subaccount&lt;/STRONG&gt; and create a new service instance, as shown below.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_7-1734443863200.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/202738i6D002693AC6BF948/image-size/medium?v=v2&amp;amp;px=400" role="button" title="felixbartler_7-1734443863200.png" alt="felixbartler_7-1734443863200.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;We use the &lt;STRONG&gt;"Connectivity Service"&lt;/STRONG&gt; with the plan &lt;STRONG&gt;"lite"&lt;/STRONG&gt;. Give the service instance a name, assign it to a &lt;STRONG&gt;space&lt;/STRONG&gt;, and click &lt;STRONG&gt;create&lt;/STRONG&gt;.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_8-1734443870810.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/202739iD0B2DF4F1B1F6C14/image-size/medium?v=v2&amp;amp;px=400" role="button" title="felixbartler_8-1734443870810.png" alt="felixbartler_8-1734443870810.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;The important credentials are stored in a &lt;STRONG&gt;service key&lt;/STRONG&gt;. To get these credentials, we create a service key.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;{
    "clientid": "sb-sampleclientid!b3008|connectivity!b137",
    "clientsecret": "****-****-****-****",
    "url": "https://tenant_name.authentication.sap.hana.ondemand.com",
    "identityzone": "sample-zone",
    "tenantid": "xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "tenantmode": "dedicated",
    "verificationkey": "-----BEGIN PUBLIC KEY-----\nXXXXXX...\n-----END PUBLIC KEY-----",
    "xsappname": "sampleappname!b3008|connectivity!b137",
    "uaadomain": "authentication.sap.hana.ondemand.com",
    "credential-type": "binding-secret",
    "onpremise_proxy_host": "connectivityproxy.internal.cf.sap.hana.ondemand.com",
    "onpremise_proxy_http_port": "20003",
    "onpremise_proxy_ldap_port": "20001",
    "onpremise_proxy_port": "20003",
    "onpremise_proxy_rfc_port": "20001",
    "onpremise_socks5_proxy_port": "20004",
    "token_service_domain": "authentication.sap.hana.ondemand.com",
    "token_service_url": "https://tenant_name.authentication.sap.hana.ondemand.com"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;We now have a set of credentials, as shown above. The key details are:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;OAuth Credentials&lt;/STRONG&gt;: These include the &lt;STRONG&gt;"clientid"&lt;/STRONG&gt;, &lt;STRONG&gt;"clientsecret"&lt;/STRONG&gt;, and &lt;STRONG&gt;"url"&lt;/STRONG&gt;. They are used to authenticate when accessing the proxy.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Proxy Details&lt;/STRONG&gt;: These include the &lt;STRONG&gt;"onpremise_proxy_host"&lt;/STRONG&gt; and the various ports, such as &lt;STRONG&gt;"onpremise_proxy_port"&lt;/STRONG&gt;, &lt;STRONG&gt;"onpremise_proxy_http_port"&lt;/STRONG&gt;, and &lt;STRONG&gt;"onpremise_socks5_proxy_port"&lt;/STRONG&gt;. These details are configured as the proxy to route traffic. The proxy securely tunnels requests through the Cloud Connector to the on-premise destination.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-420612291"&gt;3. Developing a Cloud Foundry App:&lt;/H3&gt;&lt;P&gt;Now let’s put this together in a simple Python example to perform an actual HTTP request:&lt;/P&gt;&lt;P&gt;The Python script will send a request using Python's standard &lt;STRONG&gt;requests&lt;/STRONG&gt; library. We use the connection details provided by the Connectivity Service. To route the traffic through the Cloud Connector, we specify the proxy configuration, including the &lt;STRONG&gt;host&lt;/STRONG&gt;, &lt;STRONG&gt;port&lt;/STRONG&gt;, and the &lt;STRONG&gt;proxy-authentication header&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import requests

# Connectivity Service Service Key
connectivity_service_key = {
    "clientid": "sb-sampleclientid!b3008|connectivity!b137",
    "clientsecret": "****-****-****-****",
    "url": "https://tenant_name.authentication.sap.hana.ondemand.com",
    "identityzone": "sample-zone",
    "tenantid": "xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "tenantmode": "dedicated",
    "verificationkey": "-----BEGIN PUBLIC KEY-----\nXXXXXX...\n-----END PUBLIC KEY-----",
    "xsappname": "sampleappname!b3008|connectivity!b137",
    "uaadomain": "authentication.sap.hana.ondemand.com",
    "credential-type": "binding-secret",
    "onpremise_proxy_host": "connectivityproxy.internal.cf.sap.hana.ondemand.com",
    "onpremise_proxy_http_port": "20003",
    "onpremise_proxy_ldap_port": "20001",
    "onpremise_proxy_port": "20003",
    "onpremise_proxy_rfc_port": "20001",
    "onpremise_socks5_proxy_port": "20004",
    "token_service_domain": "authentication.sap.hana.ondemand.com",
    "token_service_url": "https://tenant_name.authentication.sap.hana.ondemand.com"
}


# Target Application Details (replace with your app information)
application_host = "virtualhost"
application_port = 3333
application_path = "/hello"
location_id = "FELIXLAPTOP"  # Adjust to match your Cloud Connector location

def get_connectivity_service_token(client_id, client_secret, token_service_url):
    """
    Fetches an OAuth token from the SAP Connectivity Service.
    """
    response = requests.post(
        url=token_service_url,
        params={"grant_type": "client_credentials"},
        auth=(client_id, client_secret)
    )

    if response.status_code != 200:
        print(f"Error: {response.status_code} - {response.text}")
        exit(-1)

    return response.json().get("access_token")


def example_http_request(host, port, path, auth_token, location_id, proxy_host):
    """
    Performs an HTTP GET request through SAP Cloud Connector.
    """
    url = f"http://{host}:{port}{path}"
    headers = {
        "Proxy-Authorization": f"Bearer {auth_token}",
        "SAP-Connectivity-SCC-Location_ID": location_id
    }
    proxies = {"http": proxy_host}

    response = requests.get(url, headers=headers, proxies=proxies, verify=False)
    return response


# Fetch OAuth Token
print("Fetching OAuth token...")
token = get_connectivity_service_token(
    connectivity_service_key["clientid"],
    connectivity_service_key["clientsecret"],
    connectivity_service_key["token_service_url"] + "/oauth/token"
)
print("Token acquired successfully.")

# Build proxy URL
proxy_host = "http://" + connectivity_service_key["onpremise_proxy_host"] + ":" + connectivity_service_key["onpremise_proxy_port"]

# Perform HTTP Request
print("Sending HTTP request through SAP Cloud Connector...")
response = example_http_request(application_host, application_port, application_path, token, location_id, proxy_host)
print("Response received:")
print(response.content.decode("utf-8"))
print("Script execution completed.")&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;First, we obtain a token from the &lt;/SPAN&gt;&lt;STRONG&gt;OAuth 2.0 Token Service URL&lt;/STRONG&gt;&lt;SPAN&gt;. This is done using the get_connectivity_service_token function, where we send the necessary credentials.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;BLOCKQUOTE&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: Make sure to add &lt;STRONG&gt;/oauth/token&lt;/STRONG&gt; at the end of the Token Service URL.&lt;/P&gt;&lt;/BLOCKQUOTE&gt;&lt;P&gt;The response will return a &lt;STRONG&gt;Bearer Token&lt;/STRONG&gt;, which we need to perform the actual HTTP request.&lt;/P&gt;&lt;P&gt;In the example_http_request function, we use Python's &lt;STRONG&gt;requests&lt;/STRONG&gt; library to send the request. The &lt;STRONG&gt;proxies&lt;/STRONG&gt; option allows us to route the traffic through the Cloud Connector's HTTP proxy. For this, we:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Combine the &lt;STRONG&gt;proxy_host&lt;/STRONG&gt; (connectivity service proxy host) and &lt;STRONG&gt;port&lt;/STRONG&gt; (e.g., HTTP port).&lt;/LI&gt;&lt;LI&gt;For other traffic types, such as TCP-based traffic, we would use the &lt;STRONG&gt;SOCKS5 port&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;We also include important headers:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Proxy-Authorization&lt;/STRONG&gt;: This includes the &lt;STRONG&gt;Bearer Token&lt;/STRONG&gt; ("Bearer &amp;lt;token&amp;gt;").&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SAP-Connectivity-Location-ID&lt;/STRONG&gt;: This optional header specifies the location ID of the connected Cloud Connector. For example, if my Cloud Connector is connected under &lt;STRONG&gt;"FELIXLAPTOP"&lt;/STRONG&gt;, I include this value.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The actual destination URL points to the &lt;STRONG&gt;virtual host&lt;/STRONG&gt; and &lt;STRONG&gt;virtual port&lt;/STRONG&gt; configured in the Cloud Connector. For this example:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;virtualhost:3333&lt;/STRONG&gt; communicates with my local server.&lt;/LI&gt;&lt;LI&gt;The path /hello returns a sample message.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Finally, we combine all steps into a simple sequential script to demonstrate the entire flow.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;To make it deployable on Cloud Foundry, we add a standard manifest.yaml file.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;---
applications:
- name: cloud_connector_test_task
  memory: 128MB
  buildpack: python_buildpack
  command: python app.py&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;It sets the buildpack to &lt;STRONG&gt;python_buildpack&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Additionally, we include a &lt;STRONG&gt;requirements.txt&lt;/STRONG&gt; file in the directory.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Ending up with the following structure:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;my-python-cloud-connector-app/
│
├── manifest.yaml
├── requirements.txt
├── app.py (or your main Python script)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The script we created obviously does not run on our local environment. Because a) we cannot connect to the connectivity service from outside of the BTP and b) the destination URL is not reachable from our local environment. In this blog, I show how to use a hybrid testing setup to develop against backend resources that&amp;nbsp; are behind the cloud connector.&lt;/P&gt;&lt;H3 id="toc-hId-224098786"&gt;4. Testing the Application:&lt;/H3&gt;&lt;P class=""&gt;Now lets deploy using the following command:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;cf push cloud_connector_test_task --task&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You push your script as a task (one-time executable) to the Cloud Foundry space. Then, you start the task using the following command:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;cf run-task cloud_connector_test_task --command "python app.py" --name example_task
cf logs cloud_connector_test_task --recent&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This will show the logs from the latest task execution. It may take a few seconds for the task to start and complete.&lt;/P&gt;&lt;P&gt;In the logs, if everything worked correctly, you should see the &lt;STRONG&gt;"Hello World"&lt;/STRONG&gt; message from your &lt;STRONG&gt;on-premises&lt;/STRONG&gt; PC, confirming that the connection through the Cloud Connector was successful.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;2024-12-17T15:25:11.52+0100 [APP/TASK/example_task/0] OUT Fetching OAuth token...
2024-12-17T15:25:11.69+0100 [APP/TASK/example_task/0] OUT Token acquired successfully.
2024-12-17T15:25:11.69+0100 [APP/TASK/example_task/0] OUT Sending HTTP request through SAP Cloud Connector...
2024-12-17T15:25:13.66+0100 [APP/TASK/example_task/0] OUT Response received:
2024-12-17T15:25:13.66+0100 [APP/TASK/example_task/0] OUT {"message":"Hello World 2024-12-17T14:25:13.444Z"}
2024-12-17T15:25:13.66+0100 [APP/TASK/example_task/0] OUT Script execution completed.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That means we have successfully established connectivity via the cloud connector and made a HTTP request.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;In the next blog I will show how to&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://blogs.sap.com/2023/04/14/sap-data-intelligence-python-operators-and-cloud-connector-tcp/" target="_blank" rel="noopener noreferrer"&gt;create a TCP socket in Python to connect to TCP resources&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Hope you find the content of this blog helpful. Feel free to comment for further clarifications.&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-foundry-python-and-cloud-connector-http/ba-p/13965916"/>
    <published>2024-12-17T16:17:56.738000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/hybrid-local-development-with-sap-cloud-foundry-access-on-premises-apis-via/ba-p/13967660</id>
    <title>Hybrid Local Development with SAP Cloud Foundry: Access On-Premises APIs via the Cloud Connector</title>
    <updated>2024-12-18T22:15:21.226000+01:00</updated>
    <author>
      <name>felixbartler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4997</uri>
    </author>
    <content>&lt;P&gt;When building full-stack applications on SAP BTP, debugging against on-premise backends is a common requirement. This post outlines a simple method to simulate the connectivity available in the BTP Cloud Foundry runtime on your local machine, enabling access to on-premise APIs through the BTP Subaccount and Cloud Connector.&lt;/P&gt;&lt;H1 id="toc-hId-948557721"&gt;Scenario:&lt;/H1&gt;&lt;P&gt;Imagine you're developing an AI Agent and need to create tools that interact with an on-premise API. In line with SAP best practices, this API is exposed to your Subaccount via the Cloud Connector. While deployed applications can access the API directly, how do you test this setup locally?&lt;/P&gt;&lt;P&gt;The solution is to use the Cloud Foundry CLI tooling to establish a tunnel to the Cloud Foundry environment, routing traffic through it. This allows local development and debugging as though you're working directly within the BTP runtime.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_2-1734523656039.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/203299i2E012EF07437D17C/image-size/large?v=v2&amp;amp;px=999" role="button" title="felixbartler_2-1734523656039.png" alt="felixbartler_2-1734523656039.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-881126935"&gt;Concept: SAP Cloud Connector:&lt;/H2&gt;&lt;P&gt;The SAP Cloud Connector (SCC) acts as a secure bridge between on-premise systems and cloud applications. It allows cloud applications, such as those running on SAP BTP (Business Technology Platform), to access resources in on-premise environments securely. The connector ensures data transfer via encrypted communication, maintaining the integrity and confidentiality of sensitive information. It supports fine-grained access control, enabling administrators to define which systems, services, or data can be exposed to the cloud. Additionally, SCC simplifies integration by avoiding the need for complex network configurations like VPNs. This makes it a critical tool for hybrid cloud setups, enabling seamless and secure connectivity.&lt;/P&gt;&lt;H2 id="toc-hId-684613430"&gt;Example Setup:&lt;/H2&gt;&lt;P&gt;For this example, I configured a Cloud Connector on a machine and exposed an HTTP-based sample server. You can refer to this detailed blog post &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-cloud-foundry-python-and-cloud-connector-http/ba-p/13965916#M177764" target="_new"&gt;&lt;SPAN&gt;here&lt;/SPAN&gt;&lt;/A&gt; to see the process outlined in Step 1.&lt;/P&gt;&lt;P&gt;The setup results in the virtualhost:3333 being securely exposed to my BTP Subaccount.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="hybrid.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/221101i7140FD3F9E172DE5/image-size/large?v=v2&amp;amp;px=999" role="button" title="hybrid.png" alt="hybrid.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Taking the script from that blog as an example, I make an HTTP request to the exposed virtualhost:3333:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def example_http_request(host, port, path, auth_token, location_id, proxy_host):
    """
    Performs an HTTP GET request through SAP Cloud Connector.
    """
    url = f"http://{host}:{port}{path}"
    headers = {
        "Proxy-Authorization": f"Bearer {auth_token}",
        "SAP-Connectivity-SCC-Location_ID": location_id
    }
    proxies = {"http": proxy_host}    response = requests.get(url, headers=headers, proxies=proxies, verify=False)
    return response&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&lt;P&gt;Doing the request on BTP, we receive the expected "Hello World" response. Running the same request on my local machine, however, would result in a connection error, as the on-premise API is not directly accessible from the local environment.&lt;/P&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;An error occurred: HTTPConnectionPool(host='connectivityproxy.internal.cf.sap.hana.ondemand.com', port=20003): Max retries exceeded with url: http://virtualhost:3333/hello (Caused by ProxyError('Unable to connect to proxy', ConnectTimeoutError(&amp;lt;urllib3.connection.HTTPConnection object at 0x00000191F0BFF6B0&amp;gt;, 'Connection to connectivityproxy.internal.cf.sap.hana.ondemand.com timed out. (connect timeout=None)')))&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: No surprise there, as the connectivity proxy is an internal host: connectivityproxy.&lt;STRONG&gt;internal&lt;/STRONG&gt;.cf.sap.hana.ondemand.com.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;H2 id="toc-hId-488099925"&gt;&lt;STRONG&gt;Setting Up a Tunnel to a Sample Application&lt;/STRONG&gt;&lt;/H2&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;There’s a light at the end of the tunnel: the Cloud Foundry Command Line Interface offers the ability to create an &lt;STRONG&gt;SSH tunnel&lt;/STRONG&gt; for deployed apps, as described in the documentation &lt;A href="https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-services.html" target="_new" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;here&lt;/SPAN&gt;&lt;/A&gt;. This feature can be useful in various scenarios. One example is accessing a database deployed within the environment, which is not exposed to the outside world—only your internal apps can access its ports. Another example is our case: developing locally against an on-premise backend.&lt;/P&gt;&lt;P&gt;However, this can only be done in relation to an app. You can either use your own existing app or a sample dummy app. In this case, I’ll use a sample app, which I’ve named &lt;EM&gt;myapp&lt;/EM&gt;, based on the code available &lt;A href="https://github.com/ihuston/python-cf-examples/tree/master/01-simple-python-app" target="_new" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;here&lt;/SPAN&gt;&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;After quickly running &lt;STRONG&gt;cf push&lt;/STRONG&gt;, the deployment is successfully completed.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;Waiting for app myapp to start...Instances starting...
Instances starting...
Instances starting...
Instances starting...name:              myapp
requested state:   started
routes:            myapp-brash-warthog-cj.cfapps.sap.hana.ondemand.com
last uploaded:     Wed 18 Dec 21:43:35 CET 2024
stack:             cflinuxfs4
buildpacks:
        name               version   detect output   buildpack name
        python_buildpack   1.8.30    python          pythontype:            web
sidecars:
instances:       1/1
memory usage:    128M
start command:   python hello.py
     state     since                  cpu    memory   disk     details
#0   running   2024-12-18T20:43:49Z   0.0%   0 of 0   0 of 0&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Having deployed the app we can then establish the SSH tunnel using the following command:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;cf ssh -L 8888:connectivityproxy.internal.cf.sap.hana.ondemand.com:20003 myapp&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Lets break this down:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;cf&lt;/STRONG&gt;: Refers to the Cloud Foundry CLI.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;ssh&lt;/STRONG&gt;: Invokes the SSH feature of the Cloud Foundry CLI.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;-L 8888:connectivityproxy.internal.cf.sap.hana.ondemand.com:20003&lt;/STRONG&gt;:&lt;BR /&gt;This specifies the SSH tunnel with the following parts:&lt;UL&gt;&lt;LI&gt;8888: The local port on your machine where the tunnel will be accessible.&lt;/LI&gt;&lt;LI&gt;connectivityproxy.internal.cf.sap.hana.ondemand.com: The target host inside the Cloud Foundry environment.&lt;/LI&gt;&lt;LI&gt;20003: The target port on the remote host within the Cloud Foundry environment.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;myapp&lt;/STRONG&gt;: The name of the application you want to connect to via SSH.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Essentially that leaves us with a tunnel that is reachable from localhost:8888 - forwarding our traffic to the internal connectivity proxy host at its http proxy port 20003.&lt;/P&gt;&lt;P&gt;Running the ssh tunnel command now gives us access to the runtime environment of the app:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;PS C:\Github\sap-cloud-foundry-python-cloud-connector&amp;gt; cf ssh -L 8888:connectivityproxy.internal.cf.sap.hana.ondemand.com:20003 myapp
vcap@3e707408-4eca-41f4-7dee-d848:~$ ls
app  deps  logs  profile.d  staging_info.yml  tmp
vcap@3e707408-4eca-41f4-7dee-d848:~$
vcap@3e707408-4eca-41f4-7dee-d848:~$&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-291586420"&gt;Running the Local Script via the Tunnel&lt;/H2&gt;&lt;P&gt;While the SSH session is active, the tunnel remains open. However, there’s a small adjustment we need to make: instead of using connectivityproxy.internal... as our proxy host URL, &lt;STRONG&gt;we must reference localhost:8888&lt;/STRONG&gt;. This requires updating the corresponding value in the secret. Once that’s done, we can run the script seamlessly—whether through a debugger or by executing it with the Python interpreter in a separate command-line process. It should now work as expected.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;PS C:\Github\sap-cloud-foundry-python-cloud-connector&amp;gt; python app.py
Fetching OAuth token...
Token acquired successfully.
Sending HTTP request through SAP Cloud Connector...
Response received:
{"message":"Hello World 2024-12-18T20:46:49.181Z"}
Script execution completed.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Great! We've seen how to connect to on-premise systems from our local environment using the cf ssh tunneling options to route traffic through the Cloud Connector.&lt;/P&gt;&lt;P&gt;This approach works for both HTTP and TCP traffic. Feel free to check out my other blog on how to proxy TCP traffic using Python.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/hybrid-local-development-with-sap-cloud-foundry-access-on-premises-apis-via/ba-p/13967660"/>
    <published>2024-12-18T22:15:21.226000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-foundry-python-and-cloud-connector-tcp/ba-p/13967140</id>
    <title>SAP Cloud Foundry - Python and Cloud Connector - TCP</title>
    <updated>2024-12-19T09:35:58.651000+01:00</updated>
    <author>
      <name>felixbartler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4997</uri>
    </author>
    <content>&lt;P&gt;The Transmission Control Protocol (TCP) is a widely used protocol that provides a reliable and ordered delivery of data between applications running on different hosts. It serves as the foundation for many technologies and plays a crucial role in modern IT infrastructure.&lt;/P&gt;&lt;P&gt;SAP Cloud Foundry is the Platform-as-a-service offering on BTP to build all kinds of Apps, Integration and nowadays also AI functionalities.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In this blog post, we will walk you through the process of establishing connectivity to an on-premises TCP-based system using Python within the Cloud Foundry runtime.&lt;/P&gt;&lt;H2 id="toc-hId-1077635573"&gt;Accessing TCP-Based Resources&lt;/H2&gt;&lt;P&gt;&lt;STRONG&gt;Scenario:&lt;/STRONG&gt; The objective is to establish a connection to a TCP-based system using Python within SAP Cloud Foundry. Many commonly used systems, such as databases like SAP HANA, PostgreSQL, and MySQL, as well as protocols like SSH and SFTP, rely on TCP for communication.&lt;/P&gt;&lt;P&gt;To achieve this, we will configure the Cloud Connector, a crucial tool for enabling secure communication between SAP Cloud Foundry and on-premises systems. For demonstration purposes, we will use a simple "Hello TCP" server running locally on my computer. The goal is to successfully connect to this server from within SAP Cloud Foundry using the Cloud Connector.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_0-1734560045393.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/203481i57E705B5F09FB4B3/image-size/large?v=v2&amp;amp;px=999" role="button" title="felixbartler_0-1734560045393.png" alt="felixbartler_0-1734560045393.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1010204787"&gt;Prerequisite:&lt;/H3&gt;&lt;P&gt;Before proceeding with the steps outlined in this guide, it is essential to have an instance of the SAP Cloud Connector installed. While it is possible to install the cloud connector on a server, for the purposes of this demonstration, we will be using a Windows machine. We recommend following the instructions provided in this blog (&lt;A href="https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector/" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector/&lt;/A&gt;) to install and configure the cloud connector.&lt;BR /&gt;&lt;BR /&gt;The second requirement is a BTP subaccount with a Data Intelligence cluster. To this Subaccount we will connect the Cloud Connector.&lt;/P&gt;&lt;H3 id="toc-hId-813691282"&gt;1. Configuration:&lt;/H3&gt;&lt;P&gt;The first step is to create a configuration in the Cloud Connector that connects to our subaccount and exposes the TCP resource. For the purpose of this demonstration, I ran a small Node.js server on my Windows machine that outputs &lt;A href="https://gist.github.com/fyx99/cb6389e3c1942729cdbfc7ad3a9e1c71" target="_blank" rel="noopener nofollow noreferrer"&gt;"Hello TCP!"&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;telnet localhost 4444

Connecting to localhost ...

Hello TCP!&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;To create the configuration, navigate to the admin interface for the cloud connector and create a "Cloud to On-Premise" configuration.&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/cloud-to-onpremise-configuration-tcp-1.png" border="0" /&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;Cloud Connector configuration&lt;/P&gt;&lt;P&gt;In the screenshot above, you can see that I exposed the internal host "localhost" with port 4444 via a virtual host called "virtualhost". This virtual host is the host that we will be requesting from the BTP side. Compared to HTTP resources, we do not need to explicitly expose paths.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="btp-registered-cloud-connectors-tcp.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/221095i3BB0026E904C8514/image-size/large?v=v2&amp;amp;px=999" role="button" title="btp-registered-cloud-connectors-tcp.png" alt="btp-registered-cloud-connectors-tcp.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;BTP Cockpit Cloud Connector Resources&lt;/P&gt;&lt;P&gt;On the BTP end, we can check the cockpit and the connected cloud connectors in the respective menu tab. If you cannot see this tab, you may be missing some roles. It is important to note that we see the LocationID "FELIXLAPTOP", which is an identifier that distinguishes multiple cloud connectors connected to the same subaccount.&lt;/P&gt;&lt;H3 id="toc-hId-617177777"&gt;2. Create Connectivity Service instance:&lt;/H3&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;To use the Cloud Connector from our runtime environment, we first need a connectivity service instance. Here’s how to do it:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;In the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;BTP Cockpit&lt;/STRONG&gt;, go to your desired&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Subaccount&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and create a new service instance, as shown below.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_0-1734595714565.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/203558i6D1541E92A464A41/image-size/medium?v=v2&amp;amp;px=400" role="button" title="felixbartler_0-1734595714565.png" alt="felixbartler_0-1734595714565.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;We use the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"Connectivity Service"&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with the plan&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"lite"&lt;/STRONG&gt;. Give the service instance a name, assign it to a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;space&lt;/STRONG&gt;, and click&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;create&lt;/STRONG&gt;.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="felixbartler_1-1734595714545.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/203557i499A411F5EEE62FB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="felixbartler_1-1734595714545.png" alt="felixbartler_1-1734595714545.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;The important credentials are stored in a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;service key&lt;/STRONG&gt;. To get these credentials, we create a service key.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;{
    "clientid": "sb-sampleclientid!b3008|connectivity!b137",
    "clientsecret": "****-****-****-****",
    "url": "https://tenant_name.authentication.sap.hana.ondemand.com",
    "identityzone": "sample-zone",
    "tenantid": "xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "tenantmode": "dedicated",
    "verificationkey": "-----BEGIN PUBLIC KEY-----\nXXXXXX...\n-----END PUBLIC KEY-----",
    "xsappname": "sampleappname!b3008|connectivity!b137",
    "uaadomain": "authentication.sap.hana.ondemand.com",
    "credential-type": "binding-secret",
    "onpremise_proxy_host": "connectivityproxy.internal.cf.sap.hana.ondemand.com",
    "onpremise_proxy_http_port": "20003",
    "onpremise_proxy_ldap_port": "20001",
    "onpremise_proxy_port": "20003",
    "onpremise_proxy_rfc_port": "20001",
    "onpremise_socks5_proxy_port": "20004",
    "token_service_domain": "authentication.sap.hana.ondemand.com",
    "token_service_url": "https://tenant_name.authentication.sap.hana.ondemand.com"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;We now have a set of credentials, as shown above. The key details are:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;OAuth Credentials&lt;/STRONG&gt;: These include the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"clientid"&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"clientsecret"&lt;/STRONG&gt;, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"url"&lt;/STRONG&gt;. They are used to authenticate when accessing the proxy.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Proxy Details&lt;/STRONG&gt;: These include the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"onpremise_proxy_host"&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and the various ports, such as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"onpremise_proxy_port"&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"onpremise_proxy_http_port"&lt;/STRONG&gt;, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"onpremise_socks5_proxy_port"&lt;/STRONG&gt;. These details are configured as the proxy to route traffic. The proxy securely tunnels requests through the Cloud Connector to the on-premise destination.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-420664272"&gt;3. Developing a Cloud Foundry App:&lt;/H3&gt;&lt;P&gt;Now let’s put this together in a simple Python example to perform an actual TCP request:&lt;/P&gt;&lt;P&gt;The Python script will send a request using Python's standard&amp;nbsp;&lt;STRONG&gt;&lt;SPAN&gt;socket&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;library. We use the connection details provided by the Connectivity Service Service Key. To route the traffic through the Cloud Connector, we specify the proxy configuration, including the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;host&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;port&lt;/STRONG&gt;, and the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;proxy-authentication header&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;To realize the connection to the Connectivity Proxy, we will be using the &lt;STRONG&gt;sapcloudconnectorpythonsocket&lt;/STRONG&gt; library I created for this purpose. This is a seperate dependency and needs to be included into the requirements file. The reason we cannot use standard library's like PySocks to connect to the connectivity service, is the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/using-tcp-protocol-for-cloud-applications" target="_blank" rel="noopener noreferrer"&gt;custom authentication flow used&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;The actual script looks straightforward:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import requests
from sapcloudconnectorpythonsocket import CloudConnectorSocket

# Connectivity Service Service Key
connectivity_service_key = {
    "clientid": "sb-sampleclientid!b3008|connectivity!b137",
    "clientsecret": "****-****-****-****",
    "url": "https://tenant_name.authentication.sap.hana.ondemand.com",
    "identityzone": "sample-zone",
    "tenantid": "xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "tenantmode": "dedicated",
    "verificationkey": "-----BEGIN PUBLIC KEY-----\nXXXXXX...\n-----END PUBLIC KEY-----",
    "xsappname": "sampleappname!b3008|connectivity!b137",
    "uaadomain": "authentication.sap.hana.ondemand.com",
    "credential-type": "binding-secret",
    "onpremise_proxy_host": "connectivityproxy.internal.cf.sap.hana.ondemand.com",
    "onpremise_proxy_http_port": "20003",
    "onpremise_proxy_ldap_port": "20001",
    "onpremise_proxy_port": "20003",
    "onpremise_proxy_rfc_port": "20001",
    "onpremise_socks5_proxy_port": "20004",
    "token_service_domain": "authentication.sap.hana.ondemand.com",
    "token_service_url": "https://tenant_name.authentication.sap.hana.ondemand.com"
}


# Target Application Details (replace with your app information)
application_host = "virtualhost"
application_port = 4444
location_id = "FELIXLAPTOP"  # Adjust to match your Cloud Connector location

def get_connectivity_service_token(client_id, client_secret, token_service_url):
    """
    Fetches an OAuth token from the SAP Connectivity Service.
    """
    response = requests.post(
        url=token_service_url,
        params={"grant_type": "client_credentials"},
        auth=(client_id, client_secret)
    )

    if response.status_code != 200:
        print(f"Error: {response.status_code} - {response.text}")
        exit(-1)

    return response.json().get("access_token")


def example_tcp_request(host, port, auth_token, location_id, proxy_host, proxy_port):
    """
    Performs an TCP request through SAP Cloud Connector.
    """
    cc_socket = CloudConnectorSocket()
    cc_socket.connect(
        dest_host=host, 
        dest_port=port, 
        proxy_host=proxy_host, 
        proxy_port=proxy_port, 
        token=auth_token,
        location_id=location_id
    )
    
    cc_socket.send(b"")
    
    response = cc_socket.recv(4096)
    return response
    

# Fetch OAuth Token
print("Fetching OAuth token...")
token = get_connectivity_service_token(
    connectivity_service_key["clientid"],
    connectivity_service_key["clientsecret"],
    connectivity_service_key["token_service_url"] + "/oauth/token"
)
print("Token acquired successfully.")

# Perform TCP Request
print("Sending TCP request through SAP Cloud Connector...")
response = example_tcp_request(application_host, application_port, token, location_id, connectivity_service_key["onpremise_proxy_host"], int(connectivity_service_key["onpremise_socks5_proxy_port"]))
print("Response received:")
print(response)

print("Script execution completed.")&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Let’s break down the steps performed in the script:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;&lt;BR /&gt;The script begins by authenticating with the OAuth endpoint using the details from the service key in&lt;/P&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;get_connectivity_service_token&lt;/STRONG&gt;&lt;SPAN&gt;. This step retrieves a &lt;STRONG&gt;Bearer Token&lt;/STRONG&gt;, which is required to access the Connectivity Proxy.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Establishing the Connection&lt;/STRONG&gt;&lt;BR /&gt;Next, the example_tcp_request function is called to send a sample request. This function establishes a connection to the target system via the SAP Cloud Connector. Under the hood, this involves multiple TCP request exchanges, during which the authentication token and location ID are passed. This process results in an open connection through the secure tunnel created by the Cloud Connector.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Using the SOCKS5 Proxy Port&lt;/STRONG&gt;&lt;BR /&gt;A key detail to note is that the script uses the SOCKS5 proxy port instead of the standard HTTP proxy port of the Connectivity Service. Looking at the service key of a Connectivity Service instance provides clarity:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;HTTP Proxy Port:&lt;/STRONG&gt; 20003&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SOCKS5/TCP Proxy Port:&lt;/STRONG&gt; 20004&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The SOCKS5 port (20004) is explicitly specified when opening the socket, as it is required for TCP communication in this context.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Sending and Receiving Data&lt;/STRONG&gt;&lt;BR /&gt;With the socket successfully opened, the script sends a request to the TCP server. In this example, an empty request body is sent, and the local server should respond with "Hello TCP!" for every request.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;To make it deployable on Cloud Foundry, we add a standard manifest.yaml file.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;---
applications:
- name: cloud_connector_test_task
  memory: 128MB
  buildpack: python_buildpack
  command: python app.py&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;It sets the buildpack to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;python_buildpack&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Additionally, we include a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;requirements.txt&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;file in the directory.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;requests
sapcloudconnectorpythonsocket&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Ending up with the following structure:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;my-python-cloud-connector-app/
│
├── manifest.yaml
├── requirements.txt
├── app.py (or your main Python script)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;The script we created obviously does not run on our local environment. Because a) we cannot connect to the connectivity service from outside of the BTP and b) the destination URL is not reachable from our local environment. &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/hybrid-local-development-with-sap-cloud-foundry-access-on-premises-apis-via/ba-p/13967660" target="_self"&gt;In this blog&lt;/A&gt;, I show how to use a hybrid testing setup to develop against backend resources that&amp;nbsp; are behind the cloud connector.&lt;/P&gt;&lt;H3 id="toc-hId-224150767"&gt;4. Testing the Application:&lt;/H3&gt;&lt;P class=""&gt;Now lets deploy using the following command:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;cf push cloud_connector_test_task --task&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You push your script as a task (one-time executable) to the Cloud Foundry space. Then, you start the task using the following command:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;cf run-task cloud_connector_test_task --command "python app.py" --name example_task
cf logs cloud_connector_test_task --recent&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This will show the logs from the latest task execution. It may take a few seconds for the task to start and complete.&lt;/P&gt;&lt;P&gt;In the logs, if everything worked correctly, you should see the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;"Hello TCP!"&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;message from your&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;on-premises&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;machine&lt;/SPAN&gt;, confirming that the connection through the Cloud Connector was successful.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;2024-12-18T23:30:15.23+0100 [APP/TASK/example_task/0] OUT Fetching OAuth token...
2024-12-18T23:30:15.38+0100 [APP/TASK/example_task/0] OUT Token acquired successfully.
2024-12-18T23:30:15.38+0100 [APP/TASK/example_task/0] OUT Sending TCP request through SAP Cloud Connector...
2024-12-18T23:30:15.53+0100 [APP/TASK/example_task/0] OUT Response received:
2024-12-18T23:30:15.53+0100 [APP/TASK/example_task/0] OUT b'Hello TCP!'
2024-12-18T23:30:15.53+0100 [APP/TASK/example_task/0] OUT Script execution completed.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;That means we were successful and the script was able to request the local TCP server on my windows machine. Checkout my similar blogpost &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-cloud-foundry-python-and-cloud-connector-http/ba-p/13965916" target="_self"&gt;targeting a example based on HTTP.&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;Hope you find the content of this blog helpful. Feel free to comment for further clarifications.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-foundry-python-and-cloud-connector-tcp/ba-p/13967140"/>
    <published>2024-12-19T09:35:58.651000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/consuming-external-services-odata-rest-using-destinations-configured-in-btp/ba-p/13978984</id>
    <title>Consuming external services(Odata/Rest) using destinations configured in BTP cockpit.</title>
    <updated>2025-01-14T16:22:49.327000+01:00</updated>
    <author>
      <name>SailiRBendale</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1882114</uri>
    </author>
    <content>&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Hello All,&lt;/P&gt;&lt;P&gt;In this blog post, I will be demonstrating on how to call external services using destinations configured in Destinations in BTP cockpit.&lt;/P&gt;&lt;P&gt;Before we start with demonstration, I would like to provide a brief information about the type of application development that we will be following in this demo.&lt;BR /&gt;- We will be creating a MTA application&lt;BR /&gt;- We will use managed approuter, In order to use this, we have to enable/configure the SAP Build Workzone subscription in trial account.&lt;BR /&gt;- We will deploy the application on cloud foundry.&lt;BR /&gt;- We will be consuming below mentioned external services:&lt;BR /&gt;-- &lt;A href="https://services.odata.org/V3/Northwind/Northwind.svc/Customers?$format=json" target="_blank" rel="noopener nofollow noreferrer"&gt;https://services.odata.org/V3/Northwind/Northwind.svc/Customers?$format=json&lt;/A&gt;&lt;BR /&gt;-- &lt;A href="https://api.restful-api.dev/objects/4" target="_blank" rel="noopener nofollow noreferrer"&gt;https://api.restful-api.dev/objects/4&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Creating Destination in BTP subaccount.&lt;/STRONG&gt;&lt;BR /&gt;Destinations has to be created at each subaccount level. Since, we are using Trial account for this demo, our cockpit will have only one subaccount.&lt;BR /&gt;We have created 2 destinations as mentioned below:&lt;BR /&gt;1. Northwind destination&lt;BR /&gt;2. Restful API destination&lt;BR /&gt;To create destination, follow the path Trial home -&amp;gt; Account Explorer (Global account) -&amp;gt; trial subaccount -&amp;gt; Connectivity -&amp;gt; Destinations&lt;BR /&gt;Below are the screenshot of the Destinations created.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736750124865.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211063i04CAFD20847F83FE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736750124865.png" alt="SailiRBendale_0-1736750124865.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_1-1736750154657.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211065i28E1E2029E25AFE6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_1-1736750154657.png" alt="SailiRBendale_1-1736750154657.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create new project from template&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We are going to create a Basic multitarget application. Configure the settings as shown below.&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736248723280.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208948i4275236E66565FCC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736248723280.png" alt="SailiRBendale_0-1736248723280.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_1-1736248731698.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208949i353525996DE18188/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_1-1736248731698.png" alt="SailiRBendale_1-1736248731698.png" /&gt;&lt;/span&gt;&lt;P&gt;A new mta project will be generated (Workspace will be automatically created) with below structure.&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736248848696.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208956iE7F2F7E876A0F2E2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736248848696.png" alt="SailiRBendale_0-1736248848696.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Note that the mta.yaml file will be initially empty as shown below.&lt;/P&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;schema-version: "3.2"
ID: demomta
version: 0.0.1​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Adding approuter to the mta project. &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Use managed app router, which is maintained by SAP. For using managed approuter, you need to subscribe to portal/launchpad service. We have subscribed to workzone service in cockpit.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Right click on mta.yaml file and select 'Create MTA Module from Template'.&lt;/LI&gt;&lt;LI&gt;Follow the steps shown in below screenshots for approuter creation.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_2-1736249034456.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208968iF3483DAEACF70A1D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_2-1736249034456.png" alt="SailiRBendale_2-1736249034456.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_4-1736249068324.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208970i550594E6430E59E9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_4-1736249068324.png" alt="SailiRBendale_4-1736249068324.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_5-1736249082234.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208971i43C0ED572CF46F46/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_5-1736249082234.png" alt="SailiRBendale_5-1736249082234.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note: mta.yaml file will be automatically updated as shown below.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;_schema-version: "3.2"
ID: demomta
version: 0.0.1
modules:
- name: demomta-destination-content
  type: com.sap.application.content
  requires:
  - name: demomta-destination-service
    parameters:
      content-target: true
  - name: demomta_html_repo_host
    parameters:
      service-key:
        name: demomta_html_repo_host-key
  - name: uaa_demomta
    parameters:
      service-key:
        name: uaa_demomta-key
  parameters:
    content:
      instance:
        destinations:
        - Name: demomtaapprouter_demomta_html_repo_host
          ServiceInstanceName: demomta-html5-app-host-service
          ServiceKeyName: demomta_html_repo_host-key
          sap.cloud.service: demomtaapprouter
        - Authentication: OAuth2UserTokenExchange
          Name: demomtaapprouter_uaa_demomta
          ServiceInstanceName: demomta-xsuaa-service
          ServiceKeyName: uaa_demomta-key
          sap.cloud.service: demomtaapprouter
        existing_destinations_policy: ignore
  build-parameters:
    no-source: true
resources:
- name: demomta-destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    config:
      HTML5Runtime_enabled: true
      init_data:
        instance:
          destinations:
          - Authentication: NoAuthentication
            Name: ui5
            ProxyType: Internet
            Type: HTTP
            URL: https://ui5.sap.com
          existing_destinations_policy: update
      version: 1.0.0
    service: destination
    service-name: demomta-destination-service
    service-plan: lite
- name: demomta_html_repo_host
  type: org.cloudfoundry.managed-service
  parameters:
    service: html5-apps-repo
    service-name: demomta-html5-app-host-service
    service-plan: app-host
- name: uaa_demomta
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: demomta-xsuaa-service
    service-plan: application
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Create a UI module in the mta project.&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Right click on mta.yaml file and select 'Create MTA Module from Template'.&lt;/LI&gt;&lt;LI&gt;Follow the steps shown in below screenshots for UI module creation.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736337229395.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209636i2B58279C7EEE698A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736337229395.png" alt="SailiRBendale_0-1736337229395.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_1-1736337240328.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209637iF950A341FFCED553/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_1-1736337240328.png" alt="SailiRBendale_1-1736337240328.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_2-1736337252378.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209638iD5D997D63D2B0C25/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_2-1736337252378.png" alt="SailiRBendale_2-1736337252378.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_3-1736337267792.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209639i5459F337E3EF5CC3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_3-1736337267792.png" alt="SailiRBendale_3-1736337267792.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_4-1736337274412.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209640i74FA031FB27D2386/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_4-1736337274412.png" alt="SailiRBendale_4-1736337274412.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_5-1736337284344.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209642i719548C29C51F8DE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_5-1736337284344.png" alt="SailiRBendale_5-1736337284344.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note: Project folder path should be the path of the MTA project created earlier and select the option to add deployment configuration to the project.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_6-1736337349432.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209643i861B5D417152F350/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_6-1736337349432.png" alt="SailiRBendale_6-1736337349432.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_7-1736337356222.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209644iB084BA22FA8E82C7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_7-1736337356222.png" alt="SailiRBendale_7-1736337356222.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note:&amp;nbsp;Mta.yaml file will be updated automatically to include newly added UI module in module section as highlighted below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736749828890.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211060iCBB14B552A06798B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736749828890.png" alt="SailiRBendale_0-1736749828890.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;_schema-version: "3.2"
ID: demomta
version: 0.0.1
modules:
- name: demomta-destination-content
  type: com.sap.application.content
  requires:
  - name: demomta-destination-service
    parameters:
      content-target: true
  - name: demomta_html_repo_host
    parameters:
      service-key:
        name: demomta_html_repo_host-key
  - name: uaa_demomta
    parameters:
      service-key:
        name: uaa_demomta-key
  parameters:
    content:
      instance:
        destinations:
        - Name: demomtaapprouter_demomta_html_repo_host
          ServiceInstanceName: demomta-html5-app-host-service
          ServiceKeyName: demomta_html_repo_host-key
          sap.cloud.service: demomtaapprouter
        - Authentication: OAuth2UserTokenExchange
          Name: demomtaapprouter_uaa_demomta
          ServiceInstanceName: demomta-xsuaa-service
          ServiceKeyName: uaa_demomta-key
          sap.cloud.service: demomtaapprouter
        existing_destinations_policy: ignore
  build-parameters:
    no-source: true
- name: demomta-app-content
  type: com.sap.application.content
  path: .
  requires:
  - name: demomta_html_repo_host
    parameters:
      content-target: true
  build-parameters:
    build-result: resources
    requires:
    - artifacts:
      - nwui.zip
      name: nwui
      target-path: resources/
- name: nwui
  type: html5
  path: nwui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
resources:
- name: demomta-destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    config:
      HTML5Runtime_enabled: true
      init_data:
        instance:
          destinations:
          - Authentication: NoAuthentication
            Name: ui5
            ProxyType: Internet
            Type: HTTP
            URL: https://ui5.sap.com
          existing_destinations_policy: update
      version: 1.0.0
    service: destination
    service-name: demomta-destination-service
    service-plan: lite
- name: demomta_html_repo_host
  type: org.cloudfoundry.managed-service
  parameters:
    service: html5-apps-repo
    service-name: demomta-html5-app-host-service
    service-plan: app-host
- name: uaa_demomta
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: demomta-xsuaa-service
    service-plan: application
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now, the&amp;nbsp;UI module will be created automatically with below structure.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_0-1736749614123.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211059iB6A25FC0163B232A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_0-1736749614123.png" alt="SailiRBendale_0-1736749614123.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Update the xs-app.json&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Update the xs-app.json file in the UI module folder to add routes for northwind service.&lt;/P&gt;&lt;P&gt;i.e. URLs which have nwdest in them will be redirected from mentioned destination in cockpit.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/nwdest/(.*)$",
      "target": "/$1",
      "authenticationType": "none",
      "destination": "northwind"
    },
    {
      "source": "^/resources/(.*)$",
      "target": "/resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/test-resources/(.*)$",
      "target": "/test-resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Calling the Northwind Service using AJAX call.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Add the below code in View1 controller init to call the NW service using destination configured in xs-app.json&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;  var sURL = "nwdest/V3/Northwind/Northwind.svc/Customers?$format=json";
            var data = jQuery.ajax({
                method: "GET",
                async: false,
                url: sURL,
                success: function (data) {
                    console.log("in success");
                }
            });&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7: Creation of second UI Module.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Repeat the Steps 4 to 6, to create another UI module which will call service using restful destination.&lt;/P&gt;&lt;P&gt;Below project structure will be created.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_2-1736337651827.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209650i85DD97CD0BD83C7B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_2-1736337651827.png" alt="SailiRBendale_2-1736337651827.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note:&amp;nbsp;Mta.yaml should be automatically updated to include both UI modules&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;_schema-version: "3.2"
ID: demomta
version: 0.0.1
modules:
- name: demomta-destination-content
  type: com.sap.application.content
  requires:
  - name: demomta-destination-service
    parameters:
      content-target: true
  - name: demomta_html_repo_host
    parameters:
      service-key:
        name: demomta_html_repo_host-key
  - name: uaa_demomta
    parameters:
      service-key:
        name: uaa_demomta-key
  parameters:
    content:
      instance:
        destinations:
        - Name: demomtaapprouter_demomta_html_repo_host
          ServiceInstanceName: demomta-html5-app-host-service
          ServiceKeyName: demomta_html_repo_host-key
          sap.cloud.service: demomtaapprouter
        - Authentication: OAuth2UserTokenExchange
          Name: demomtaapprouter_uaa_demomta
          ServiceInstanceName: demomta-xsuaa-service
          ServiceKeyName: uaa_demomta-key
          sap.cloud.service: demomtaapprouter
        existing_destinations_policy: ignore
  build-parameters:
    no-source: true
- name: demomta-app-content
  type: com.sap.application.content
  path: .
  requires:
  - name: demomta_html_repo_host
    parameters:
      content-target: true
  build-parameters:
    build-result: resources
    requires:
    - artifacts:
      - nwui.zip
      name: nwui
      target-path: resources/
    - artifacts:
      - restfulapiui.zip
      name: restfulapiui
      target-path: resources/
- name: nwui
  type: html5
  path: nwui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
- name: restfulapiui
  type: html5
  path: restfulapiui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
resources:
- name: demomta-destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    config:
      HTML5Runtime_enabled: true
      init_data:
        instance:
          destinations:
          - Authentication: NoAuthentication
            Name: ui5
            ProxyType: Internet
            Type: HTTP
            URL: https://ui5.sap.com
          existing_destinations_policy: update
      version: 1.0.0
    service: destination
    service-name: demomta-destination-service
    service-plan: lite
- name: demomta_html_repo_host
  type: org.cloudfoundry.managed-service
  parameters:
    service: html5-apps-repo
    service-name: demomta-html5-app-host-service
    service-plan: app-host
- name: uaa_demomta
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: demomta-xsuaa-service
    service-plan: application
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;xs-app.json in second UI module will look like below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_1-1736749961079.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211061i540CF1B20C4392FE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_1-1736749961079.png" alt="SailiRBendale_1-1736749961079.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/restfulapi/(.*)$",
      "target": "/$1",
      "authenticationType": "none",
      "destination": "restful"
    },
    {
      "source": "^/resources/(.*)$",
      "target": "/resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/test-resources/(.*)$",
      "target": "/test-resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;and below code should be added to the View 1 controller of second UI Module.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;  var sURL = "restfulapi/objects/4";
            var data = jQuery.ajax({
                method: "GET",
                async: false,
                url: sURL,
                success: function (data) {
                    console.log("in success");
                }
            });&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Build and deploy the project to cloud foundry&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Right click on the mta.yaml file and select 'Build MTA Project' to start the project build.&lt;/P&gt;&lt;P&gt;Once the build is successfully completed, a new folder 'mta_archives' will be added to the MTA project as shown below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_6-1736337865657.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209656iEA448DA2BD006751/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_6-1736337865657.png" alt="SailiRBendale_6-1736337865657.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The mta_archives folder will contain a .mtar file which will be used for deployment to cloud foundry.&lt;/P&gt;&lt;P&gt;Right click on the .mtar&amp;nbsp; file and select deploy option.&lt;/P&gt;&lt;P&gt;Note that system may prompt you to enter your Cloud Foundry credentials. Kindly enter the credentials and select correct API Endpoint and Org Space.&lt;/P&gt;&lt;P&gt;Once, application is successfully deployed, You will be able to find those applications in the cockpit under HTML5 Applications tab.&lt;/P&gt;&lt;P&gt;When you click on the link, you should be able to check the service call in network tab as shown below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_7-1736338107854.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209659i55C963F3FEE0F63E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_7-1736338107854.png" alt="SailiRBendale_7-1736338107854.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SailiRBendale_8-1736338114409.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209660i106B0F8C14B9DC27/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SailiRBendale_8-1736338114409.png" alt="SailiRBendale_8-1736338114409.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;With this, we come to the end of this blog post. I hope this blog post proves to be a useful resource in the future.&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/consuming-external-services-odata-rest-using-destinations-configured-in-btp/ba-p/13978984"/>
    <published>2025-01-14T16:22:49.327000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498</id>
    <title>Communicate from a Java Application to ABAP via WebSocket RFC using JCo - Migration Guide</title>
    <updated>2025-01-21T19:20:20.825000+01:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/websocket-rfc-rfc-for-the-internet/ba-p/13502531" target="_blank"&gt;WebSocket RFC&lt;/A&gt; is available for a while now. Continue reading, if&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;you want to communicate from an external Java application to an ABAP-based system via this new protocol using the&amp;nbsp;&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;JCo library&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;you have an existing JCo setup using classic CPIC-based RFC and want to migrate.&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-950224196"&gt;Adjusting the destination&lt;/H1&gt;&lt;P&gt;For specifying the destination, instead of providing properties for application server logon (&lt;SPAN&gt;&lt;EM&gt;jco.client.ashost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.sysnr&lt;/EM&gt;) or message server logon (&lt;EM&gt;jco.client.mshost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.msserv&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.r3name&lt;/EM&gt;), the f&lt;/SPAN&gt;ollowing properties must be provided:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wshost&lt;/STRONG&gt;: the hostname of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wsport&lt;/STRONG&gt;: the port for HTTPS/WSS (WebSocket Secure) of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Optionally, you can also specify&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&lt;/STRONG&gt;: If set to 1 this property enables to logon at the backend via the X.509 client&amp;nbsp;certificate that is used in the TLS handshake (mTLS). An associated user or mapping rule must be defined at the backend.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-753710691"&gt;Extending the implementation&lt;/H1&gt;&lt;P&gt;WebSocket RFC is based on TLS, thus a PKI infrastructure is required to be setup. To achieve that, following methods from the JCo interface &lt;EM&gt;DestinationDataProvider&lt;/EM&gt;&amp;nbsp;must be implemented:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext getSSLContext(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method returns a&amp;nbsp;&lt;EM&gt;javax.net.ssl.SSLContext&lt;/EM&gt; instance to JCo, which is used to create the TLS session for a given destination. How such an instance is created is up to the application - we are going to describe a simple use case in which all keys and CAs are stored in a local p12 file (&lt;EM&gt;p12FilePath&lt;/EM&gt;) and the password is read from a secured database.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext loadSSLContextFromFile() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException, UnrecoverableKeyException, KeyManagementException {
    File p12File = new File(p12FilePath);

    try (InputStream p12FileStream = new BufferedInputStream(new FileInputStream(p12File))) {
        KeyStore ks = KeyStore.getInstance("PKCS12");

        char[] pwd = SecuredDatabaseConnection.readPassword();

        ks.load(p12FileStream, pwd);
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(ks, pwd);

        // delete the plain text password from the heap memory as soon as possible
        Arrays.fill(pwd, (char) 0);
        pwd = null;

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ks);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
        return sslContext;
    }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(Optionally) If&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&amp;nbsp;&lt;/STRONG&gt;is used, the API below must be implemented additionally:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;X509Certificate getClientCertificate(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method must return the &lt;EM&gt;java.security.cert.X509Certificate&lt;/EM&gt; instance of the client certificate used for logon. It must be the one provided in the &lt;EM&gt;SSLContext&lt;/EM&gt;, which is used during the TLS handshake.&lt;/P&gt;&lt;H1 id="toc-hId-557197186"&gt;Setting up Trust&lt;/H1&gt;&lt;H2 id="toc-hId-489766400"&gt;Creating the p12 File&lt;/H2&gt;&lt;P&gt;Create a p12 file with a private key using a tool like &lt;A href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noopener nofollow noreferrer"&gt;keytool&lt;/A&gt; or &lt;A href="https://docs.openssl.org/1.1.1/man1/pkcs12/" target="_blank" rel="noopener nofollow noreferrer"&gt;OpenSSL&lt;/A&gt;. Create a CSR and import the CA response. Furthermore, import the CA certificate from the ABAP system which has been exported (see next section).&lt;/P&gt;&lt;H2 id="toc-hId-293252895"&gt;Configuring trust in ABAP&lt;/H2&gt;&lt;P&gt;Navigate to transaction STRUST and select "SSL-Server Standard". Select the own certificate and export it. For more information, see also &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/e73bba71770e4c0ca5fb2a3c17e8e229/4923501ebf5a1902e10000000a42189c.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;. Also, import the CA certificate from the p12 file and add it to the certificate list, so that mutual trust can be established.&lt;/P&gt;&lt;H1 id="toc-hId--32343329"&gt;Using WebSocket RFC in BTP&lt;/H1&gt;&lt;P&gt;If you use JCo in BTP in conjunction with the Destination Service and you want to use WebSocket RFC to call publicly exposed endpoints, you can skip the above "Extending the implementation" part. This integration is already implemented by SAP in the supported environments. You can follow the steps in the &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-configure-rfc-destination" target="_blank" rel="noopener noreferrer"&gt;BTP Connectivity Service documentation&lt;/A&gt;&lt;/SPAN&gt; on how to configure the Destination Service accordingly.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498"/>
    <published>2025-01-21T19:20:20.825000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/new-destinations-ui-available-now-in-beta-version/ba-p/14004542</id>
    <title>New Destinations UI available now in BETA version</title>
    <updated>2025-02-03T08:53:17.016000+01:00</updated>
    <author>
      <name>Yogananda</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/75</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1830932961"&gt;&lt;EM&gt;A new&amp;nbsp;Destinations&amp;nbsp;UI for managing destination configuration objects is now available as a BETA version in the SAP BTP cockpit, side-by-side with the current UI. It is not yet at feature parity with the current UI, but feel free to try it out and send us your feedback.&lt;/EM&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-02-03_08-48-30.png" style="width: 724px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/220952i3543AB1F19207409/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-02-03_08-48-30.png" alt="2025-02-03_08-48-30.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;Old Destination UI&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-02-02_22-13-08.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/220950iB803421B182A82BB/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-02-02_22-13-08.png" alt="2025-02-02_22-13-08.png" /&gt;&lt;/span&gt;&lt;/H3&gt;&lt;H4 id="toc-hId-1763502175"&gt;Getting Started with the New Destinations UI&lt;/H4&gt;&lt;P&gt;To start using the new Destinations UI, follow these steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Access the SAP BTP Cockpit&lt;/STRONG&gt;: Log in to your SAP BTP account and navigate to the cockpit.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Navigate to Destinations&lt;/STRONG&gt;: In the cockpit, go to the Connectivity section and select Destinations.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Explore the New UI&lt;/STRONG&gt;: you can access to the BETA version, you will see the new interface. Take some time to explore the different features and options available.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Create a New Destination&lt;/STRONG&gt;: Click on the "Create Destination" button and fill in the required details, such as the destination name, URL, and authentication method.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Save and Test&lt;/STRONG&gt;: Save your new destination and test the connection to ensure everything is configured correctly&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-1437905951"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-02-02_22-01-22.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/220948i30EE71E4BCD893B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-02-02_22-01-22.png" alt="2025-02-02_22-01-22.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;Check Connection&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-02-02_22-06-05.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/220951iD71B3D5089ED5FB0/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-02-02_22-06-05.png" alt="2025-02-02_22-06-05.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;Export Destination in (JSON, YAML &amp;amp; Properties)&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-02-02_22-04-34.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/220949i7C3BD44FCEB8D71B/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-02-02_22-04-34.png" alt="2025-02-02_22-04-34.png" /&gt;&lt;/span&gt;&lt;/H3&gt;&lt;H4 id="toc-hId-1370475165"&gt;Benefits of the New Destinations UI&lt;/H4&gt;&lt;P&gt;The new Destinations UI offers several benefits for SAP BTP users:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Efficiency&lt;/STRONG&gt;: The streamlined workflow and enhanced configuration options save time and reduce complexity.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Usability&lt;/STRONG&gt;: The intuitive interface makes it easier for users to manage their destinations, even if they are new to SAP BTP.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Flexibility&lt;/STRONG&gt;: The ability to configure advanced settings and custom headers provides greater flexibility in connecting to remote systems.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Visibility&lt;/STRONG&gt;: Improved visibility into destination details helps users quickly identify and address any issues, ensuring smooth operation of their applications&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1173961660"&gt;Conclusion&lt;/H4&gt;&lt;P&gt;The new Destinations UI in the SAP BTP cockpit is a significant step forward in simplifying the management of destination configuration objects. As a BETA version, it offers a glimpse into the future of SAP BTP, where usability and efficiency are at the forefront. If you have access to the BETA version, be sure to explore the new features and provide feedback to help shape the final release.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/new-destinations-ui-available-now-in-beta-version/ba-p/14004542"/>
    <published>2025-02-03T08:53:17.016000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-connector-2-18-is-out/ba-p/14049553</id>
    <title>SAP Cloud Connector 2.18 is out!</title>
    <updated>2025-03-19T23:42:44.566000+01:00</updated>
    <author>
      <name>MarcoErtel</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/6305</uri>
    </author>
    <content>&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;We’re excited to announce the availability of &lt;A href="https://tools.hana.ondemand.com/#cloud" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Cloud Connector version 2.18&lt;/A&gt;. Building on previous iterations, this latest version offers several technical enhancements and solutions aimed at streamlining operations. Here are the key updates:&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;This release introduces support for Windows Server 2025. If you're preparing to upgrade your infrastructure, now’s the time to explore this compatibility. Note that some older OS versions will no longer be supported, so check the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/prerequisites#loioe23f776e4d594fdbaeeb1196d47bbcc0__matrix" target="_blank" rel="noopener noreferrer"&gt;Product Availability Matrix&lt;/A&gt; for precise details.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Certificates are crucial for maintaining secure connections, but they come with expiration dates. As frequently requested by our users, the new version supports automatic renewal for subaccounts, minimizing the risk of downtime due to forgotten refreshes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_0-1742380121008.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239546i71853F2F0D895521/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_0-1742380121008.png" alt="MarcoErtel_0-1742380121008.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Don’t forget to enable Certificate refresh in the BTP Cockpit. This capability isn't available in all cloud regions immediately; it will be rolled out in phases across different regions. Once it becomes available in your region, the toggle button in the BTP Cockpit will be visible.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The administration UI defaults to Morning Horizon theme. However, you can also choose from other Horizon options, including Evening Horizon and Black/White High Contrast variants.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_1-1742380121011.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239549i104C528706EDF172/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_1-1742380121011.png" alt="MarcoErtel_1-1742380121011.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Navigate to Configuration &amp;gt; User Interface to set your preferred theme.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Version 2.18 introduces centralized management of E-mail and LDAP server trust stores directly within the Cloud Connector, bypassing the traditional JDK trust store. This setup allows finer control over securing backend communications with trusted certificates.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;A new Troubleshooting section proactively diagnoses problems within the Cloud Connector.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_2-1742380121014.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239555i265BCC01F26748D2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_2-1742380121014.png" alt="MarcoErtel_2-1742380121014.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;&amp;nbsp;You’ll find detailed reports on issues, especially those affecting data tunnels, along with root cause analyses and potential fixes. The framework categorizes and tracks recurring issues, providing insights into their recurrence patterns over time.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The cross-subaccount performance monitor aggregates metrics from all subaccounts related to cloud-to-on-premises traffic.&lt;/SPAN&gt; &lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MarcoErtel_3-1742380362462.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239557i08AB526E4C1816EE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarcoErtel_3-1742380362462.png" alt="MarcoErtel_3-1742380362462.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;This consolidation aids in a more comprehensive analysis, helping you optimize resource allocation and network configurations efficiently.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Configure a fadeout time for service channels in HA setups to ensure smoother transitions when roles change intentionally between master and shadow instances. Known as the Service Channel Termination Grace Period, this new feature minimizes service disruptions by maintaining active channels during switches.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Certificate-based authentication now has a fallback mechanism to revert to user/password authentication if necessary. This added flexibility in logon processes ensures continual access, even when certificate-related issues arise.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Overall, SAP Cloud Connector 2.18 delivers enhancements focused on facilitating better security management, improving performance insights, and increasing reliability in high-stakes environments. Upgrade today to leverage these new features. For all technical details, see our comprehensive &lt;A href="https://help.sap.com/whats-new/cf0cb2cb149647329b5d02aa96303f56?Component=Connectivity&amp;amp;locale=en-US&amp;amp;version=Cloud&amp;amp;Valid_as_Of=2025-03-06:2025-03-06" target="_blank" rel="noopener noreferrer"&gt;release notes&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Happy connecting!&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-connector-2-18-is-out/ba-p/14049553"/>
    <published>2025-03-19T23:42:44.566000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/solving-the-serviceinstancename-dilemma-token-forwarding-destinations-on/ba-p/14119749</id>
    <title>Solving the ServiceInstanceName Dilemma: Token-Forwarding Destinations on SAP BTP with init_data</title>
    <updated>2025-06-05T10:59:00.926000+02:00</updated>
    <author>
      <name>mlu2</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1379</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1602471079"&gt;Solving the ServiceInstanceName Dilemma: Token-Forwarding Destinations on SAP BTP with init_data&lt;/H1&gt;&lt;P&gt;When building multi-application landscapes on SAP BTP, configuring destinations correctly is crucial for seamless service integration. A common pattern is to forward an existing authentication token from an incoming request to a backend service secured by the same identity provider. The expectation is to avoid explicitly configuring authentication credentials or service bindings in the destination—just forward the token and go.&lt;/P&gt;&lt;H2 id="toc-hId-1535040293"&gt;The Goal&lt;/H2&gt;&lt;P&gt;We wanted to create subaccount-level destinations using the Generic Application Content Deployment (GACD) module in our MTA. These destinations should:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Forward the authorization token from the request (forwardAuthToken: true).&lt;/LI&gt;&lt;LI&gt;Avoid the need for service bindings or token service configurations.&lt;/LI&gt;&lt;LI&gt;Be configured with NoAuthentication, since the actual token is already included in the request.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1338526788"&gt;The Problem: Our Initial Approach with GACD&lt;/H2&gt;&lt;P&gt;Based on SAP documentation, we structured our mta.yaml like this:&lt;/P&gt;&lt;PRE&gt;modules:
- name: destination-content
  type: com.sap.application.content
  requires:
  - name: destination-service
    parameters:
      content-target: true
  - name: foo-api
  - name: bar-api
  parameters:
    content:
      subaccount:
        destinations:
        - Name: foo-api
          URL: ~{foo-api/url}
          forwardAuthToken: true
        - Name: bar-api
          URL: ~{bar-api/url}
          forwardAuthToken: true
resources:
- name: destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    service: destination
    service-plan: lite&lt;/PRE&gt;&lt;P&gt;The expectation was straightforward: deploy this MTA, and the foo-api and bar-api destinations would be created, correctly forwarding the authorization token.&lt;/P&gt;&lt;H2 id="toc-hId-1142013283"&gt;The Unexpected Outcome: Missing destination property [ServiceInstanceName]&lt;/H2&gt;&lt;P&gt;However, upon deployment, we were met with the following error:&lt;/P&gt;&lt;PRE&gt;[ERROR] Missing destination property [ServiceInstanceName] in destination foo-api&lt;/PRE&gt;&lt;P&gt;This error was perplexing. Why would ServiceInstanceName be required for a destination designed to &lt;EM&gt;forward&lt;/EM&gt; an existing token, rather than obtain one from a service instance (like an XSUAA or IAS service)? This seemed to contradict the very purpose of forwardAuthToken: true in this context.&lt;/P&gt;&lt;H2 id="toc-hId-945499778"&gt;Clarification from SAP Support&lt;/H2&gt;&lt;P&gt;After seeking clarification, insights from SAP Development Support shed light on the situation. Here are the key points:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The GACD destination scenario, as currently implemented, primarily supports creating destinations &lt;STRONG&gt;through a service instance&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;This means that even with forwardAuthToken: true, the GACD content module expects a ServiceInstanceName property. This implies an implicit dependency on a service instance for destination configuration, even if not for token fetching in the runtime.&lt;/LI&gt;&lt;LI&gt;For creating "NoAuthentication" destinations that simply forward the authorization token and do not rely on the destination service to obtain one from a bound service instance, the &lt;STRONG&gt;init_data approach&lt;/STRONG&gt; is the recommended method.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-748986273"&gt;The Recommended Solution: Using init_data&lt;/H2&gt;&lt;P&gt;The init_data configuration within the resources section of your mta.yaml allows for direct definition of destination properties, bypassing the GACD content module's specific requirements for ServiceInstanceName in this `forwardAuthToken` scenario.&lt;/P&gt;&lt;P&gt;Here are corrected examples demonstrating how to achieve this using init_data:&lt;/P&gt;&lt;H3 id="toc-hId-681555487"&gt;Example 1: Creating my_destination_service-1&lt;/H3&gt;&lt;PRE&gt;_schema-version: 3.1.0
ID: destination-with-app-1
version: 4.0.0

modules:
- name: app-provides-url-1
  type: staticfile
  path: ./hello-world.zip
  parameters:
    memory: 64M
  provides:
  - name: srv-api-1
    properties:
      srv-url: ${default-url}

resources:
  - name: my_destination_service
    type: org.cloudfoundry.managed-service
    requires:
      - name: srv-api-1
    parameters:
      service-plan: lite
      service: destination
      config:
        HTML5Runtime_enabled: true
        init_data:
          subaccount:
            existing_destinations_policy: update
            destinations:
              - Authentication: NoAuthentication
                HTML5.ForwardAuthToken: true
                Name: my_destination_service-1
                ProxyType: Internet
                Type: HTTP
                URL: ~{srv-api-1/srv-url}&lt;/PRE&gt;&lt;H3 id="toc-hId-485041982"&gt;Example 2: Appending my_destination_service-2 (reusing the same destination service instance)&lt;/H3&gt;&lt;PRE&gt;_schema-version: 3.1.0
ID: destination-with-app-2
version: 4.0.0

modules:
- name: app-provides-url-2
  type: staticfile
  path: ./hello-world.zip
  parameters:
    memory: 64M
  provides:
  - name: srv-api-2
    properties:
      srv-url: ${default-url}

resources:
  - name: my_destination_service
    type: org.cloudfoundry.managed-service
    requires:
      - name: srv-api-2
    parameters:
      service-plan: lite
      service: destination
      config:
        HTML5Runtime_enabled: true
        init_data:
          subaccount:
            existing_destinations_policy: update
            destinations:
              - Authentication: NoAuthentication
                HTML5.ForwardAuthToken: true
                Name: my_destination_service-2 # Name must be different from existing destinations
                ProxyType: Internet
                Type: HTTP
                URL: ~{srv-api-2/srv-url}&lt;/PRE&gt;&lt;H3 id="toc-hId-288528477"&gt;Key Highlights for `init_data` Destinations:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication: NoAuthentication:&lt;/STRONG&gt; Explicitly states that the destination itself will not handle authentication.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;HTML5.ForwardAuthToken: true:&lt;/STRONG&gt; This specific property (often used in the context of HTML5 applications and Approuter) instructs the runtime to forward the incoming authorization token.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;No ServiceInstanceName Needed:&lt;/STRONG&gt; When defined via `init_data` in this manner, you avoid the GACD-imposed requirement for this property.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Direct Configuration:&lt;/STRONG&gt; The destination is configured directly as part of the destination service instance's parameters, rather than through a separate `com.sap.application.content` module.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--37067747"&gt;Understanding Resource Reuse and Destination Merging&lt;/H2&gt;&lt;P&gt;A crucial point highlighted was how the my_destination_service resource behaves across multiple MTA deployments. When a resource with the same name and type (org.cloudfoundry.managed-service) is defined in several MTAs:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The system creates the service instance with the initialization data from the &lt;STRONG&gt;first deployment&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Subsequent deployments&lt;/STRONG&gt; of other MTAs defining the &lt;EM&gt;same resource&lt;/EM&gt; will &lt;STRONG&gt;update&lt;/STRONG&gt; this existing service instance. Their init_data will be incorporated, effectively &lt;STRONG&gt;merging&lt;/STRONG&gt; the destinations.&lt;/LI&gt;&lt;LI&gt;Crucially, existing destinations (with different names) will &lt;STRONG&gt;not be deleted&lt;/STRONG&gt;. New destinations are appended to the existing set. This "append" behavior is governed by the existing_destinations_policy: update setting within the init_data.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;This means that if you deploy "destination-with-app-1" first, my_destination_service is created with my_destination_service-1. If you then deploy "destination-with-app-2" (using the same my_destination_service resource name), my_destination_service-2 will be added, resulting in both destinations existing within the same my_destination_service instance.&lt;/P&gt;&lt;H2 id="toc-hId-113673105"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;While the GACD content module offers a streamlined way to deploy destinations alongside application content, its current limitations prevent it from directly supporting simple token-forwarding destinations without a mandatory `ServiceInstanceName`. For now, leveraging the init_data configuration provides the flexibility to define these "NoAuthentication" destinations, ensuring that the authorization token is forwarded as intended without unnecessary dependencies.&lt;/P&gt;&lt;P&gt;Understanding the nuances of how service instances and their init_data are managed across MTA deployments is key to building robust and scalable solutions on SAP BTP. We hope to see future enhancements to the GACD module to more intuitively support this common and valuable pattern.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/solving-the-serviceinstancename-dilemma-token-forwarding-destinations-on/ba-p/14119749"/>
    <published>2025-06-05T10:59:00.926000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/exposing-sap-s4-onprem-data-to-external-system-odata-service-btp/ba-p/14151915</id>
    <title>Exposing SAP S4 Onprem data to external System || Odata Service || BTP || Destination-Connectivity</title>
    <updated>2025-07-24T09:09:11.979000+02:00</updated>
    <author>
      <name>Ace_D</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1501366</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1735011379"&gt;&lt;STRONG&gt;Prerequisites from BTP Side&lt;/STRONG&gt;&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;SAP BTP Account&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Access to SAP Business Technology Platform (BTP) with appropriate entitlements.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SAP Cloud Connector Setup&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;SAP Cloud Connector installed and configured to connect your on-premise S/4HANA system to SAP BTP.&lt;/LI&gt;&lt;LI&gt;Destination configured in BTP cockpit pointing to your on-premise system.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Connectivity Service and Destination Service&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;SAP BTP Connectivity service and destination service instance on the BTP account.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Cloud Foundry Environment&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Cloud Foundry space set up in your BTP subaccount to deploy the application.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Use Case:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets take a simple use case for creating a RAP service on S4, which is a wrapper API call on the reprocess IDOC function module.&lt;/P&gt;&lt;P&gt;For this we will create a RAP service on the S4 box, than activate the service with the &lt;STRONG&gt;/IWFND/MAINT_SERVICE&amp;nbsp;&lt;/STRONG&gt;and activate the &lt;STRONG&gt;ICF Node as well.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Note: In this blog we will not go through the steps of setting cloud connector and destination on the BTP account. We will assume that destination with cloud connector setup is already available on the BTP.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create and activate the RAP service on the S4 Box.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;We will create a unmanaged rap scenario with custom entity and than we will create a service definition and top of service definition we will create service binding.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_0-1752479114889.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286063i6147300A58FD94EB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_0-1752479114889.png" alt="Ace_D_0-1752479114889.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Lets create the class for the query implementation.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_1-1752479219667.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286066i8FE4DD17F2125A3B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_1-1752479219667.png" alt="Ace_D_1-1752479219667.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_3-1752479284513.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286068i7DF33D859E64B0B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_3-1752479284513.png" alt="Ace_D_3-1752479284513.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_4-1752479314425.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286069i1ADC607EAFF20853/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_4-1752479314425.png" alt="Ace_D_4-1752479314425.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;We are calling the FM to reprocess the idoc and checking the relevant table to get the latest reprocessed idoc status for the same.&lt;/P&gt;&lt;P&gt;Now we will create a service definition and service binding for the custom entity created.&lt;/P&gt;&lt;P&gt;Service Definition&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_8-1752479854976.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286073i72B0728E2CDB8D9C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_8-1752479854976.png" alt="Ace_D_8-1752479854976.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And overall project will look something like this.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_5-1752479511558.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286070iB8D8CB8704C75416/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_5-1752479511558.png" alt="Ace_D_5-1752479511558.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here i have created two types of service bindings v2 and v4 but we will be using only v2 for this.&lt;/P&gt;&lt;P&gt;So overall we created below 4 artifacts.&lt;/P&gt;&lt;P&gt;1. Custom entity&lt;/P&gt;&lt;P&gt;2. Class&lt;/P&gt;&lt;P&gt;3. Service definition&lt;/P&gt;&lt;P&gt;4. Service binding&lt;/P&gt;&lt;P&gt;Now to test the service we will publish the service first and than call the generated url&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_7-1752479816432.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286072iDC562CE467DBAAA5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_7-1752479816432.png" alt="Ace_D_7-1752479816432.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;if you see the image, i have published the service and after publish we also got the custom entity that we have created, click on the &lt;STRONG&gt;service url&lt;/STRONG&gt; and it will open in browser asking for authentication of S4 user id and password.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_9-1752480025822.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286074iD29880ABB4A5E44A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_9-1752480025822.png" alt="Ace_D_9-1752480025822.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the authentication is successful you should be able to see this.&lt;/P&gt;&lt;P&gt;Now lets open the SAP GUI so that i can show you the ICF node activation, which is generally taken care by basis team.&lt;/P&gt;&lt;P&gt;Open the Tcode:&amp;nbsp;&lt;STRONG&gt;/IWFND/MAINT_SERVICE&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_10-1752480290098.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286075i2C11D72626448B10/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_10-1752480290098.png" alt="Ace_D_10-1752480290098.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here you can find your activated service binding and make sure all components of the service looks as it is in the image.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Assuming cloud connector and destination is setup on BTP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With this we completed the S4 box setup, now its ready to communicate with other external systems.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Creating the Destination service and Connectivity service on the BTP Account.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Login in to BTP account and lets create 2 service instances with service keys.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_11-1752483153170.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286097iDCC3A3321CE1ECB0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_11-1752483153170.png" alt="Ace_D_11-1752483153170.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;1.&amp;nbsp;&lt;STRONG&gt;Destination service&lt;/STRONG&gt;, this will help us to get the destination details, Destination service gets all the registered destinations on the BTP, from which we can filter out the destination that is up for our S4 onprem box.&lt;/P&gt;&lt;P&gt;Destination service will give us all the relevant things like user id passwd, location and etc. for that destination.&lt;/P&gt;&lt;P&gt;Service key for the destination service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_12-1752483270245.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286098iBE180D64FD0F615E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_12-1752483270245.png" alt="Ace_D_12-1752483270245.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_13-1752483330309.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286099i127A1F287FB75995/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_13-1752483330309.png" alt="Ace_D_13-1752483330309.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. &lt;STRONG&gt;Connectivity Service,&amp;nbsp;&lt;/STRONG&gt;Since we are trying to get the data out of onprem system we will have to use connectivity service from btp, which will provide us proxies, this proxies will be use to call the onprem odata url.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_14-1752483491742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286106i3806395799EEF5CB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_14-1752483491742.png" alt="Ace_D_14-1752483491742.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_15-1752483598535.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286107iCD11D07C5A492C3E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_15-1752483598535.png" alt="Ace_D_15-1752483598535.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;It is important to paste here the service keys for better understanding since we will be using many things from the service key into our application&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Lets create a python application to call the onprem service.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Important things to consider here.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;By using destination and connectivity service we cannot test the application on local system, we will have to deploy our app on CF to test the same.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We will use the flask requests and certain other libraries for the python programming&lt;/P&gt;&lt;P&gt;file: .env file to store all the secrets this secrets are from the service keys only.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_2-1752492372749.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286202iF6300349E7896528/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_2-1752492372749.png" alt="Ace_D_2-1752492372749.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;File: Requirements.txt&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_0-1752492015085.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286200i27F53BD3C09B09AE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_0-1752492015085.png" alt="Ace_D_0-1752492015085.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;File: Runtime.txt&lt;/P&gt;&lt;P&gt;python-3.11.*&lt;/P&gt;&lt;P&gt;file: manifest.yaml&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_1-1752492157202.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286201iA56CB734CFA3967C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_1-1752492157202.png" alt="Ace_D_1-1752492157202.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;file:idocapis.py (should be same as mentioned in Manifest.yml file&lt;/P&gt;&lt;P&gt;Load all the required libraries.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_3-1752492555784.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286203iEB454EAAAAA7E66C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_3-1752492555784.png" alt="Ace_D_3-1752492555784.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;define the function to get the token&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_4-1752493129840.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286204i152BA582C8BA1F8B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_4-1752493129840.png" alt="Ace_D_4-1752493129840.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to get the list of all destinations on the BTP&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_5-1752493241781.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286205iA640B84C01B00E5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_5-1752493241781.png" alt="Ace_D_5-1752493241781.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define the function to construct the URL for the odata call&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_6-1752493319173.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286206i83806D03EC8AE6C7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_6-1752493319173.png" alt="Ace_D_6-1752493319173.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to get token for the connectivity service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_7-1752493411094.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286213i4C439E0B0047EB4E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_7-1752493411094.png" alt="Ace_D_7-1752493411094.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to call the odata service with connectivity things&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_8-1752493551879.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286242iDE3AED9EE0D95C35/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_8-1752493551879.png" alt="Ace_D_8-1752493551879.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_9-1752493573946.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286243i670226B5E2674B07/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_9-1752493573946.png" alt="Ace_D_9-1752493573946.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now lets define the final route in flask to call this service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_13-1752494450583.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286281i0C7C7F657EECF5CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_13-1752494450583.png" alt="Ace_D_13-1752494450583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;One thing to note here the&amp;nbsp;&lt;STRONG&gt;RESOURCE variable will depend on the destination url of the onprem that is setup on BTP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_11-1752494105816.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286279i7A1D0EA83E29C50A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_11-1752494105816.png" alt="Ace_D_11-1752494105816.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_12-1752494133009.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286280iBAC4EB399CB3AEFD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_12-1752494133009.png" alt="Ace_D_12-1752494133009.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;STEP 4: Deployment&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets deploy the app on the CF by pushing the app to the cloud foundry from the BAS&lt;/P&gt;&lt;P&gt;Use command &lt;STRONG&gt;cf push&lt;/STRONG&gt; after successful authentication for your cloud foundry space.&lt;/P&gt;&lt;P&gt;After the deployment on the cloud we can get the url that is generated on the cloud.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_14-1752495094785.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286283iF188D4ACAB2AC66A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_14-1752495094785.png" alt="Ace_D_14-1752495094785.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Testing the application:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets create a small python program to call this API in local now to test it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_15-1752495325813.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286284iA1C1678704489B7A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_15-1752495325813.png" alt="Ace_D_15-1752495325813.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You should get response coming from your S4 onPrem system.&lt;/P&gt;&lt;P&gt;Thanks for staying till the end!!!&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/exposing-sap-s4-onprem-data-to-external-system-odata-service-btp/ba-p/14151915"/>
    <published>2025-07-24T09:09:11.979000+02:00</published>
  </entry>
</feed>
