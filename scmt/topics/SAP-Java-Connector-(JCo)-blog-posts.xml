<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Java-Connector-(JCo)-blog-posts.xml</id>
  <title>SAP Community - SAP Java Connector (JCo)</title>
  <updated>2025-10-09T11:13:07.569742+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Java Connector (JCo)/pd-p/564816056037766647630637313516056" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Java Connector (JCo) blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/calling-a-bapi-in-the-sap-s-4hana-cloud-from-a-non-sap-system/ba-p/13391096</id>
    <title>Calling a BAPI in the SAP S/4HANA Cloud from a non-SAP system</title>
    <updated>2019-07-03T18:42:57+02:00</updated>
    <author>
      <name>former_member131481</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/131481</uri>
    </author>
    <content>&lt;H2 id="toc-hId-908451684"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
In the &lt;A href="https://blogs.sap.com/2019/06/25/calling-a-bapi-in-the-sap-s4-hana-public-cloud-from-sap-process-orchestration/" target="_blank" rel="noopener noreferrer"&gt;previous blog post of this series&lt;/A&gt; we saw how to call a whitelisted BAPI in the SAP S/4HANA Cloud using SAP Process Orchestration. Now we are going to take a look how we can do the same from a non-SAP application.&lt;BR /&gt;
&lt;H2 id="toc-hId-711938179"&gt;Calling a BAPI in the Cloud from non-SAP systems ( e.g. a JAVA program)&lt;/H2&gt;&lt;BR /&gt;
Non-SAP systems can make RFC-Calls to the S/4HANA Cloud as long as they adhere to the RFC standards. That is usually done by implementing the libraries which were published by SAP. There are numerous solutions available which implement the RFC protocol this way and are certified. These 3rd party products usually come along with a guide which explains how to integrate with SAP systems. For SAP On-Premise solutions it has been like this for many years. For the SAP S/4HANA Cloud it works as well (as we will see) but there are some official restrictions:&lt;BR /&gt;
&lt;BR /&gt;
Please keep &lt;A href="https://launchpad.support.sap.com/#/notes/2447593/E" target="_blank" rel="noopener noreferrer"&gt;SAP Note 2447593&lt;/A&gt; in mind which is saying that RFC should only be used to integrate S/4 HANA Cloud with SAP OnPremise-Solutions (and be it, that it is SAP PO). So whatever you do with non-SAP systems, RFC/BAPI and the SAP S/4HANA Cloud is at your own risk.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/TC3.jpg" /&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-515424674"&gt;Preparation&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-447993888"&gt;What I used&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;A functional SAP Cloud Connector Instance + user with administrative privileges&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;An SAP S/4 HANA Public Cloud Tenant + user with administrative privileges&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Eclipse&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP JCO libraries&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-251480383"&gt;What I did&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Download the JCO libraries&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Import the JCO libraries into Eclipse&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Set up the JCO Destination File&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Test the connection and the BAPI call with the sample programs&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-54966878"&gt;Setting up Eclipse&lt;/H3&gt;&lt;BR /&gt;
One way of simulating a non-SAP System is making use of a SAP Connector, the JCO libraries. You can find them here: &lt;A href="https://support.sap.com/en/product/connectors/jco.html#section" target="_blank" rel="noopener noreferrer"&gt;SAP Java Connector&lt;/A&gt;. In my example I set up an Eclipse Project and implemented a program that was based on the samples provided with the JCO library. I had to play around a little bit but in the end it worked.&lt;BR /&gt;
&lt;BR /&gt;
Being not much of a Java guy, I was inspired by 2 Blogs from &lt;SPAN class="mention-scrubbed"&gt;varun.boyina#overview&lt;/SPAN&gt; which helped me to set up the example.&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI class="dm-contentHero__title"&gt;&lt;A href="https://blogs.sap.com/2016/05/19/sap-ui-5-calling-rfc-through-sap-jco-2/" target="_blank" rel="noopener noreferrer"&gt;SAP UI 5 – CALLING RFC THROUGH SAP JCO&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI class="dm-contentHero__title"&gt;&lt;A href="https://blogs.sap.com/2016/05/16/sap-ui5-calling-servletwhich-returns-single-value-using-jquery-ajax/" target="_blank" rel="noopener noreferrer"&gt;SAP UI5 – Calling Servlet(which Returns Single Value) using JQUERY AJAX&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
Initially I wanted to go via the good old RFC libraries which were used to be delivered with the SAP GUI and included such useful programs like startrfc.exe but that isn’t the case anymore. You can still download a NW RFC library if you want to (&lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;see here&lt;/A&gt;) but startrfc doesn’t work the way I thought it did anymore or maybe I’m mixing things up and don't remember it properly. The last time I actually used startrfc was about 15 years ago. Programs change, memories fade…&lt;BR /&gt;
&lt;BR /&gt;
Eclipse and the JCO worked fine for me and anybody who is more familiar with Eclipse and Java should get along easily.The project structure in Eclipse looks like this:&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/06/Eclipse.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--141546627"&gt;JCO Destination File&lt;/H3&gt;&lt;BR /&gt;
You can either put the destination details into the program or put an RFC destination file into the project. This file contains the information to establish a connection:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;#for tests only !&lt;BR /&gt;
#Tue May 15 16:51:44 CET 2019&lt;BR /&gt;
jco.client.lang=EN&lt;BR /&gt;
jco.client.client=100&lt;BR /&gt;
jco.client.passwd= &amp;lt;Put the password of the S4HC API User of the CommScenario here&amp;gt;&lt;BR /&gt;
jco.client.user=&amp;lt;Put the name of the S4HC API User of the CommScenario here&amp;gt;&lt;BR /&gt;
jco.client.sysnr=00&lt;BR /&gt;
jco.client.ashost=&amp;lt;Adress of the SCC, e.g. xxx.mo.sap.corp&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
If you get a RFC_NO_AUTHORIZATION in BAPI_METADATA_GET error you could try this:&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;jco.destination.repository_roundtrip_optimization&lt;/EM&gt;=0&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
(Thank you Jacky Liu, Ban Luo and Echo Chen for finding the solution and testing it)&lt;BR /&gt;
&lt;BR /&gt;
In the example the file is called "SCC_PRACTICE.jcoDestination". You can see it in the project structure above. You need to put your own destination details for passwd, user and ashost.&lt;BR /&gt;
&lt;H3 id="toc-hId--338060132"&gt;Sample Program&lt;/H3&gt;&lt;BR /&gt;
With the program below I was able to read equipment data from the S/4 HANA Cloud. It is a very basic program and not dynamic at all. But it shows that actually not much is required to do the calls. If you want to get into the details I recommend that you read the documentation: &lt;A href="https://support.sap.com/content/dam/support/en_us/library/ssp/products/connectors/jco/jco_30_documentation_en.pdf" target="_blank" rel="noopener noreferrer"&gt;SAP Java Connector (Standalone Version).&lt;/A&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;package jne;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
import com.sap.conn.jco.AbapException;&lt;BR /&gt;
//	import com.sap.conn.jco.JCoContext;&lt;BR /&gt;
	import com.sap.conn.jco.JCoDestination;&lt;BR /&gt;
	import com.sap.conn.jco.JCoDestinationManager;&lt;BR /&gt;
	import com.sap.conn.jco.JCoException;&lt;BR /&gt;
//	import com.sap.conn.jco.JCoField;&lt;BR /&gt;
	import com.sap.conn.jco.JCoFunction;&lt;BR /&gt;
//	import com.sap.conn.jco.JCoFunctionTemplate;&lt;BR /&gt;
	import com.sap.conn.jco.JCoStructure;&lt;BR /&gt;
//	import com.sap.conn.jco.JCoTable;&lt;BR /&gt;
//  import com.sap.conn.jco.ext.DestinationDataProvider;&lt;BR /&gt;
&lt;BR /&gt;
	/**&lt;BR /&gt;
	 * basic examples for Java to ABAP communication  &lt;BR /&gt;
	 */&lt;BR /&gt;
	public class RFCBAPI&lt;BR /&gt;
	{&lt;BR /&gt;
//		static String SCC = "SCC_JNE";&lt;BR /&gt;
		static String SCC = "SCC_PRACTICE";&lt;BR /&gt;
		&lt;BR /&gt;
	      	  	    &lt;BR /&gt;
	    /**&lt;BR /&gt;
	     * This example demonstrates the destination concept introduced with JCO 3.&lt;BR /&gt;
	     * The application does not deal with single connections anymore. Instead&lt;BR /&gt;
	     * it works with logical destinations like ABAP_AS and ABAP_MS which separates&lt;BR /&gt;
	     * the application logic from technical configuration.     &lt;BR /&gt;
	     * @throws JCoException&lt;BR /&gt;
	     */&lt;BR /&gt;
	    public static void step1Connect() throws JCoException&lt;BR /&gt;
	    {&lt;BR /&gt;
	        JCoDestination destination = JCoDestinationManager.getDestination(SCC);&lt;BR /&gt;
	        System.out.println("Attributes:");&lt;BR /&gt;
	        System.out.println(destination.getAttributes());&lt;BR /&gt;
	        System.out.println();&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
	    }&lt;BR /&gt;
	    &lt;BR /&gt;
	   &lt;BR /&gt;
	    public static void step5CallBAPI() throws JCoException&lt;BR /&gt;
	    {&lt;BR /&gt;
	       	System.out.println("Initiating");&lt;BR /&gt;
			JCoDestination destination = JCoDestinationManager.getDestination(SCC);&lt;BR /&gt;
			System.out.println("Calling:");&lt;BR /&gt;
			JCoFunction function = destination.getRepository().getFunction("BAPI_EQUI_GETDETAIL");&lt;BR /&gt;
			if(function == null)&lt;BR /&gt;
				throw new RuntimeException("BAPI_EQUI_GETDETAIL not found in SAP.");&lt;BR /&gt;
				try&lt;BR /&gt;
					{&lt;BR /&gt;
						function.getImportParameterList().setValue("EQUIPMENT", "000000000010000000");&lt;BR /&gt;
						function.execute(destination);&lt;BR /&gt;
					}&lt;BR /&gt;
				catch(AbapException e)&lt;BR /&gt;
					{&lt;BR /&gt;
					System.out.println("ABAP Exception");	&lt;BR /&gt;
					System.out.println(e.toString());&lt;BR /&gt;
					}&lt;BR /&gt;
				try&lt;BR /&gt;
					{&lt;BR /&gt;
					System.out.println("BAPI_EQUI_GETDETAIL finished:");&lt;BR /&gt;
//					System.out.println(function.toXML());&lt;BR /&gt;
 					printStruct(function,"DATA_GENERAL_EXP");&lt;BR /&gt;
//					printStruct(function,"DATA_SPECIFIC_EXP");&lt;BR /&gt;
//					printStruct(function,"DATA_FLEET_EXP");&lt;BR /&gt;
//					printStruct(function,"RETURN");&lt;BR /&gt;
				  					}&lt;BR /&gt;
				catch(Exception e)&lt;BR /&gt;
					{&lt;BR /&gt;
						e.printStackTrace();&lt;BR /&gt;
					}&lt;BR /&gt;
	    }&lt;BR /&gt;
&lt;BR /&gt;
	    &lt;BR /&gt;
	    public static void step6PrintBAPI() throws JCoException&lt;BR /&gt;
	    {&lt;BR /&gt;
	       	System.out.println("Initiating:");&lt;BR /&gt;
			JCoDestination destination = JCoDestinationManager.getDestination(SCC);&lt;BR /&gt;
			System.out.println("Calling:");&lt;BR /&gt;
			JCoFunction function = destination.getRepository().getFunction("BAPI_EQUI_GETDETAIL");&lt;BR /&gt;
			if(function == null)&lt;BR /&gt;
				throw new RuntimeException("BAPI_EQUI_GETDETAIL not found in SAP.");&lt;BR /&gt;
				try&lt;BR /&gt;
					{&lt;BR /&gt;
						function.getImportParameterList().setValue("EQUIPMENT", "000000000010000000");&lt;BR /&gt;
//						function.getImportParameterList().setValue("REQUEST_INSTALLATION_DATA", "X");&lt;BR /&gt;
						function.execute(destination);&lt;BR /&gt;
					}&lt;BR /&gt;
				catch(AbapException e)&lt;BR /&gt;
					{&lt;BR /&gt;
					System.out.println("ABAP Exception");	&lt;BR /&gt;
					System.out.println(e.toString());&lt;BR /&gt;
					}&lt;BR /&gt;
				try&lt;BR /&gt;
					{&lt;BR /&gt;
					System.out.println("BAPI_EQUI_GETDETAIL finished:");&lt;BR /&gt;
					System.out.println(function.toXML());&lt;BR /&gt;
//					System.out.println(function.getFunctionTemplate());&lt;BR /&gt;
// 					printStruct(function,"DATA_GENERAL_EXP");&lt;BR /&gt;
//					printStruct(function,"DATA_SPECIFIC_EXP");&lt;BR /&gt;
//					printStruct(function,"DATA_FLEET_EXP");&lt;BR /&gt;
//					printStruct(function,"RETURN");&lt;BR /&gt;
				  					}&lt;BR /&gt;
				catch(Exception e)&lt;BR /&gt;
					{&lt;BR /&gt;
						e.printStackTrace();&lt;BR /&gt;
					}&lt;BR /&gt;
	    }&lt;BR /&gt;
	    &lt;BR /&gt;
	    public static void printStruct(JCoFunction BAPI, String StrucName) {&lt;BR /&gt;
	    	&lt;BR /&gt;
	    	System.out.println("\n" + "Structure: " + StrucName);&lt;BR /&gt;
	    	JCoStructure BAPIStruc = BAPI.getExportParameterList().getStructure(StrucName);&lt;BR /&gt;
	    	for (int i = 0; i &amp;lt; BAPIStruc.getFieldCount(); i++)&lt;BR /&gt;
	        {&lt;BR /&gt;
            	System.out.println(i + ": " + BAPIStruc.getString(i));;&lt;BR /&gt;
	        }	&lt;BR /&gt;
	    }&lt;BR /&gt;
	    &lt;BR /&gt;
	    &lt;BR /&gt;
	    public static void main(String[] args) throws JCoException&lt;BR /&gt;
	    {&lt;BR /&gt;
//			Set Destination	 &lt;BR /&gt;
&lt;BR /&gt;
//	    	step0DestinationFile();&lt;BR /&gt;
	        step1Connect();&lt;BR /&gt;
//          step2ConnectUsingPool();&lt;BR /&gt;
//	        step3SimpleCall();&lt;BR /&gt;
//	        step4WorkWithTable();&lt;BR /&gt;
//	        step4SimpleStatefulCalls();&lt;BR /&gt;
//            step5CallBAPI();&lt;BR /&gt;
            step6PrintBAPI();&lt;BR /&gt;
	    }&lt;BR /&gt;
	}&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--663656356"&gt;Conclusion&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--731087142"&gt;What I learned from this test case&lt;/H3&gt;&lt;BR /&gt;
With this test case I brushed up my Java a little bit. For somebody who has used the JCO libraries already in the OnPrem world there is nothing new. The implementation is the same, just the RFC Destination is pointing to the SAP Cloud Connector.&lt;BR /&gt;
&lt;H3 id="toc-hId--1002832016"&gt;Your Feedback&lt;/H3&gt;&lt;BR /&gt;
Please let me know if the description was helpful and you were able to set up the same test case. Any feedback how to improve this blog post is welcomed! Please put it in the comment section.&lt;BR /&gt;
&lt;H3 id="toc-hId--1199345521"&gt;What’s next&lt;/H3&gt;&lt;BR /&gt;
Next time I will show you how to call a BAPI on-premise from SAP Cloud Platform Integration. It's also the preparation for the final test case in which I do a call from the Cloud and back. Check back soon!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/calling-a-bapi-in-the-sap-s-4hana-cloud-from-a-non-sap-system/ba-p/13391096"/>
    <published>2019-07-03T18:42:57+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-hana-xsa-code-jam-en-ciudad-de-mexico-2019/ba-p/13412139</id>
    <title>SAP Hana XSA Code Jam en Ciudad de Mexico ?? 2019</title>
    <updated>2019-08-03T03:31:09+02:00</updated>
    <author>
      <name>MariettaLopez</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/797</uri>
    </author>
    <content>&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/SAPCodeJamMexico.png" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-1058805955"&gt;Este 21 de Agosto en la Ciudad de México de 9 AM a 3 PM estaremos llevando a cabo un &lt;SPAN class="_5afx"&gt;&lt;SPAN class="_58cm"&gt;&lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP&lt;/STRONG&gt;&lt;/A&gt; &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class="_5afx"&gt;&lt;SPAN class="_58cl _5afz" aria-label="hashtag"&gt;#&lt;/SPAN&gt;&lt;SPAN class="_58cm"&gt;HANA&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN class="_5afx"&gt;&lt;SPAN class="_58cl _5afz" aria-label="hashtag"&gt;#&lt;/SPAN&gt;&lt;SPAN class="_58cm"&gt;XSA Code Jam&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt; junto con el &lt;STRONG&gt;&lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;SAP&lt;/A&gt; Inside Track Mexico 2019&lt;/STRONG&gt; un evento donde podrás desarrollar una solución utilizando diversas tecnologías, plataformas y herramientas de &lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;SAP.&lt;/A&gt; Se le presentará un escenario de inicio a fin, en el que podrá ver cómo las diferentes tecnologías se integran y trabajan juntas mientras construye su solución.&lt;/H3&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screenshot-2019-05-14-21.35.39.png" height="177" width="326" /&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-862292450"&gt;Es un evento GRATUITO, pero como es un evento práctico tiene ciertos requerimientos para poder participar&lt;/H3&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-536696226"&gt;Debes traer tu propia computadora portátil) &lt;SPAN class="text_exposed_show"&gt;y de preferencia q tengas #HANA #&lt;SPAN class="_5afx"&gt;&lt;SPAN class="_58cm"&gt;Express instalado&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-469265440"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/08/Screenshot-2019-08-02-20.18.05.png" height="268" width="206" /&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-272751935"&gt;La ponencia estará dictada por la catedrática&amp;nbsp;&lt;SPAN class="mention-scrubbed"&gt;lsubatin&lt;/SPAN&gt;&amp;nbsp;de &lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;@SAP&lt;/A&gt;, experta en la materia, que estará en el sitio para responder a sus preguntas y compartir información y consejos relevantes.&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-76238430"&gt;&lt;SPAN lang="ES"&gt;If you are a&lt;/SPAN&gt;&lt;SPAN lang="ES"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN lang="ES"&gt;&lt;A href="https://www.sap.com/" target="_blank" rel="noopener noreferrer"&gt;SAP&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN lang="ES"&gt;&amp;nbsp;programmer, who seeks to know or update,&lt;/SPAN&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--249357794"&gt;&lt;STRONG&gt;Made your pre-register &lt;A href="https://www.eventbrite.com/e/sap-codejam-ciudad-de-mexico-registration-68050072599" target="_blank" rel="nofollow noopener noreferrer"&gt;ASAP&lt;/A&gt;&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;Organizers:&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screenshot-2019-05-14-19.40.02-1.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;&lt;SPAN class="mention-scrubbed"&gt;maria.antonieta.lopez&lt;/SPAN&gt;&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;&lt;SPAN class="mention-scrubbed"&gt;jhonjairoteran#overview&lt;/SPAN&gt;&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;EM&gt;&lt;SPAN class="mention-scrubbed"&gt;9958e4b6df99431a84a41b015b639ac8#overview&lt;/SPAN&gt;&lt;/EM&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--445871299"&gt;Sponsors&lt;/H2&gt;&lt;BR /&gt;
&lt;A href="https://www.sap.com/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;&lt;STRONG&gt;Mexico will kindly provide us the place for the event &lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/SAP-logo.gif" height="171" width="313" /&gt;&lt;BR /&gt;
&lt;P id="tw-target-text" class="tw-data-text tw-ta tw-text-small" dir="ltr" data-placeholder="Translation"&gt;&lt;STRONG&gt;&lt;SPAN lang="en"&gt;The &lt;A href="https://www.sap.com/community.html" target="_blank" rel="noopener noreferrer"&gt;SAP Community&lt;/A&gt; will support us with a lunch for the attendees.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/Screenshot-2019-05-12-15.23.19.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;SAP PRESS&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Attendees who stay at the end of the event will receive a 15% discount on their purchases at the &amp;nbsp;&lt;A class="jive-link-external-small" href="https://www.sap-press.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP Press&lt;/A&gt; store and will be able to win one of the 2 e-books we will raffle!&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/04/press_1029908.png" height="230" width="419" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN lang="en"&gt;We also have the sponsorship of the &lt;A href="https://espresso-tutorials.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;Espresso Tutorials&lt;/A&gt;, attendees who stay at the end of the event will receive access to their content online for 1 month.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/espresso-tutorials-logo-1.png" height="89" width="312" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Apoyo:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;A href="https://www.sap.com/community/resources/influencer-programs/mentors.html" target="_blank" rel="noopener noreferrer"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2016/04/thumbnail_942597.png" height="56" width="443" /&gt;&lt;/A&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--642384804"&gt;&lt;STRONG&gt;Important Facts&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;Date and Hours:&lt;/STRONG&gt; August &lt;/EM&gt;21, 2019 from 09:00 to 15:00 hrs.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;Address:&lt;/STRONG&gt; Prolongación&amp;nbsp;Paseo de la Reforma 600, Santa Fe, Zedec Sta Fé, 01210 Ciudad de México, CDMX&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Hashtag&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;#CodeJamMEX&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--838898309"&gt;CONTACT&lt;/H2&gt;&lt;BR /&gt;
?&lt;span class="lia-unicode-emoji" title=":envelope:"&gt;✉️&lt;/span&gt;&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;SAP&lt;/A&gt;&lt;A href="https://blogs.sap.com/2019/05/15/sap-inside-track-de-la-ciudad-de-mexico-mex-%f0%9f%87%b2%f0%9f%87%bd-2019/comment-page-1/sapinsidetrackmexico@gmail.com" target="_blank" rel="noopener noreferrer"&gt;InsideTrackMexico@gmail.com&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/download-1.png" height="31" width="32" /&gt;&amp;nbsp;&lt;A href="https://twitter.com/InsideTrackMEX" target="_blank" rel="nofollow noopener noreferrer"&gt;@InsideTrackMEX&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2019/05/face.png" height="29" width="29" /&gt;&lt;STRONG&gt;&amp;nbsp;@&lt;A href="https://www.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;SAP&lt;/A&gt;&lt;A href="https://www.facebook.com/SAP.Inside.Track.Mex/" target="_blank" rel="nofollow noopener noreferrer"&gt;.Inside.Track.Mex&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-hana-xsa-code-jam-en-ciudad-de-mexico-2019/ba-p/13412139"/>
    <published>2019-08-03T03:31:09+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13431769</id>
    <title>Produce/consume messages in KAFKA with SAP Netweaver using Java Connector - Part 1/3</title>
    <updated>2020-04-14T14:11:48+02:00</updated>
    <author>
      <name>michael_pang4</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/245249</uri>
    </author>
    <content>&lt;H1 id="toc-hId-802463627"&gt;Introduction&lt;/H1&gt;&lt;BR /&gt;
Is it possible to produce/send a message from SAP to KAFKA using ABAP? What about is it possible to consume/receive a message in SAP from KAFKA?&lt;BR /&gt;
&lt;BR /&gt;
In this blog I'll demonstrate how it is possible to do this using the SAP Java Connector and the Apache Java API.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId-605950122"&gt;Use case&lt;/H1&gt;&lt;BR /&gt;
We live in a world where we need to reduce data friction between systems. Let's suppose you are asked to send the details (say a business partner) out to a Kafka topic as changes happen inside SAP. As a developer you've located the perfect user exit/BADI that gets triggered on/after save where you can put your ABAP code. Now you are stuck. How do you go from taking all the data in ABAP memory, and pass it to KAFKA?&lt;BR /&gt;
&lt;BR /&gt;
Kafka cannot receive HTTP calls out of the box. You need to use a Java API, or a third party API, or setup an intermediate server to translate HTTP calls to call Kafka.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId-409436617"&gt;What are my options?&lt;/H1&gt;&lt;BR /&gt;
There are heaps of options to produce/consume messages in KAFKA. Some free, others are not, all with their pros and cons.&amp;nbsp; &lt;A href="https://kafka.apache.org/documentation/" target="_blank" rel="nofollow noopener noreferrer"&gt;Apache&lt;/A&gt; has a Java client, and &lt;A href="https://docs.confluent.io/current/clients/index.html" target="_blank" rel="nofollow noopener noreferrer"&gt;Confluent.io&lt;/A&gt; has a tonnes of options - .NET, Go, Python etc. There are also heaps of &lt;A href="https://cwiki.apache.org/confluence/display/KAFKA/Clients" target="_blank" rel="nofollow noopener noreferrer"&gt;third party&lt;/A&gt; options to support other languages as well.&lt;BR /&gt;
&lt;BR /&gt;
ABAP to Kafka connector? Well, you are out of luck here (at least at the time of this article).&lt;BR /&gt;
&lt;BR /&gt;
The obvious choice for the unsupported languages is to host a &lt;A href="https://www.confluent.io/blog/a-comprehensive-rest-proxy-for-kafka/" target="_blank" rel="nofollow noopener noreferrer"&gt;HTTP/REST API&lt;/A&gt; for any systems to call. Confluent has a REST support as well.&lt;BR /&gt;
&lt;BR /&gt;
There are also options where you can stream straight from the database/HANA/hadoop as well. I'm not quite sure how that's going to work for SAP data, where the data is spread across multiple tables and don't always make sense to the outside world.&lt;BR /&gt;
&lt;BR /&gt;
You can spend days exploring the different options, so choose the one that suits.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId-212923112"&gt;What about standard SAP and third party enterprise products?&lt;/H1&gt;&lt;BR /&gt;
SAP of course have their standard solutions, such as SAP Data Hub, SAP HANA Connector, and possibly others. I have not tried them. There are also other third party companies that provide enterprise solutions at a cost, such as Ad. Google it or search on SDN, all with their pros and cons.&lt;BR /&gt;
&lt;BR /&gt;
When I first started, I was hoping there could be a standard SAP KAFKA class that I can call to send a message, but there isn't one. I've read a blog that talked about using ABAP Channels but it didn't work for us.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId-16409607"&gt;Disclaimer&lt;/H1&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;I'm not here to say which solution is better as I don't know. My intention is not to compete with the various products/solutions out there either. As a techie, I just want to see what is possible. To me this option might be the cheapest one without the need of extra hardware or too much setup.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This is not a tutorial on Java, or &lt;A href="https://kafka.apache.org/documentation/" target="_blank" rel="nofollow noopener noreferrer"&gt;KAFKA&lt;/A&gt;, AWS, or how to run your own Netweaver environment. It does require knowledge on all of these to follow what I'm doing, so let's hope you can follow along.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This is also not a production scale demo. There are many tweaks you can do to make this scale.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;This demo will cost you money for cloud hosting if you were to follow.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Hopefully some of you will find this interesting. It took me a couple of nights to understand how to setup a JCO server properly as the standard SAP documentation is not the best.&lt;BR /&gt;
&lt;H1 id="toc-hId--180103898"&gt;What am I going to do?&lt;/H1&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setup a demo Netweaver system using SAP CAL (Cloud Appliance Library) in AWS&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setup some tools that I'm going to use in the EC2 instance&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setup KAFKA&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setup SAP Java Connector (JCo)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create/configure SAP Java Connector Server&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Produce a message to a KAFKA topic from ABAP&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Consume a message from a KAFKA topic and call ABAP&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId--376617403"&gt;Versions&lt;/H1&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;KAFKA - 2.12&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Java Connector (JCo) - 3.0&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP NetWeaver AS ABAP 7.51 SP02 on ASE&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId--573130908"&gt;Source code&lt;/H1&gt;&lt;BR /&gt;
I've put my code on github.... you might find it useful.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://github.com/joymike/sap_kafka_demo.git" target="_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/joymike/sap_kafka_demo.git&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId--769644413"&gt;Blog links&lt;/H1&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2020/04/14/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector-part-1-3/" target="_blank" rel="noopener noreferrer"&gt;Produce/consume messages in KAFKA with SAP Netweaver using Java Connector – Part 1/3&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2020/04/14/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector-part-2-3/" target="_blank" rel="noopener noreferrer"&gt;Produce/consume messages in KAFKA with SAP Netweaver using Java Connector – Part 2/3&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2020/04/14/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector-part-3-3/" target="_blank" rel="noopener noreferrer"&gt;Produce/consume messages in KAFKA with SAP Netweaver using Java Connector – Part 3/3&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId--966157918"&gt;Architecture&lt;/H1&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/SAP-KAFKA-DrawIO.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId--392931340"&gt;Setup a demo NW system in SAP CAL&lt;/H1&gt;&lt;BR /&gt;
&lt;SPAN style="color: #ff0000"&gt;&lt;EM&gt;&lt;STRONG&gt;If you do this, it will cost you money!!!&amp;nbsp;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--882847852"&gt;SAP Cloud Appliance Library (CAL)&lt;/H2&gt;&lt;BR /&gt;
Go to SAP Cloud Appliance Library - &lt;A href="https://cal.sap.com/" target="test_blank" rel="noopener noreferrer"&gt;https://cal.sap.com/&lt;/A&gt;, register and create a new "SAP Netweaver AS ABAP 7.51 SP02 on ASE" instance on AWS. You will be presented with many solution choices, so you can pretty much choose any NW instances available. Some options are slightly cheaper than others. You can choose other cloud providers like Google Cloud or Azure. Like I said I'm not here teach you how to use CAL here, so I'm sure you can google it and find out.&lt;BR /&gt;
&lt;BR /&gt;
When I first tried to do so, it didn't work, but a day later I got an email and I went in again and it worked again. I can choose from 113 solutions, it's really quite fascinating!&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/SAP-CAL.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1372764364"&gt;Cost&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/SAP-CAL-cost.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--1569277869"&gt;Tips&lt;/H3&gt;&lt;BR /&gt;
Download the Key and save it somewhere (Don't lose it)&lt;BR /&gt;
&lt;BR /&gt;
Remember the password you entered to create the instance with CAL. There's no way of recovering (that I know of), and you'll need to that to use the SAP system.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--1472388367"&gt;Amazon AWS EC2&lt;/H2&gt;&lt;BR /&gt;
As you can see there are two instances created. These are not covered in Amazon AWS free tier so they will cost you some money.&lt;BR /&gt;
&lt;BR /&gt;
After a while, I have 2x AWS EC2 instances:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;a SUSE Enterprise Linux server instance installed with the SAP Netweaver with HANA backend, installed and ready to go.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;a Windows instance with SAPGUI and all the development tools you'll need (you may or may not need this, you can delete it to save some money if you got all the tools installed on your laptop already)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/AWS-EC2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1962304879"&gt;Tips&lt;/H3&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;I have SAPGUI installed on my laptop&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;I've attached an elastic IP to my instances so that the Public DNS and IP does not change after EC2 restart.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Turn of your EC2 instances if you are not using it. It cost less than USD$0.50 per hour but it does add up over time.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setup cost alarms in AWS to warn you if you go over your budget.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;I've setup a AWS CloudWatch event that calls a Lambda function to switch off my EC2 instances every hour to safe cost. Yes it's inconvenient but I make sure I don't get a nasty surprise.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Again, this is not a tutorial about AWS, so go google it and I'm sure you can find out &lt;span class="lia-unicode-emoji" title=":grinning_face_with_smiling_eyes:"&gt;😄&lt;/span&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-2136148912"&gt;SSH into the Linux instance&lt;/H3&gt;&lt;BR /&gt;
You can use PUTTY (for Windows) or just terminal for Mac. I'm sure you can work out how to do this with a quick googling around.&lt;BR /&gt;
&lt;BR /&gt;
Now notice the user created is "root", and password is the same password you entered for CAL when you created the instance. You need to provide the key/cert to log in.&lt;BR /&gt;
&lt;BR /&gt;
For Putty you will need to convert the cert using PUTTYGEN first.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
See you in part 2!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Leave me some comments so I know how I went.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13431769"/>
    <published>2020-04-14T14:11:48+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13433006</id>
    <title>Produce/consume messages in KAFKA with SAP Netweaver using Java Connector – Part 2/3</title>
    <updated>2020-04-14T14:12:29+02:00</updated>
    <author>
      <name>michael_pang4</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/245249</uri>
    </author>
    <content>This is the second part to demonstrating how to get SAP Netweaver to produce/consume messages in KAFKA from SAP.&lt;BR /&gt;
&lt;BR /&gt;
Link to part 1 &lt;A href="https://blogs.sap.com/2020/04/14/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector-part-1-3/" target="_blank" rel="noopener noreferrer"&gt;Part 1&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
If you are just keen to see the results, go to &lt;A href="https://blogs.sap.com/2020/04/14/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector-part-3-3/" target="_blank" rel="noopener noreferrer"&gt;Part 3&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Below will cover the following:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Connect to your SAP server using SAPGUI&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Install license&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Developer Key&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setting up tools&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Java Development Kit&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Nano&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setting up KAFKA&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setting up SAP Java Connector (JCo)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Just to reiterate, I didn't use the windows EC2 instance that had all the developer tools. I only used the SUSE linux instance installed with the SAP Netweaver backend.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-931599012"&gt;Source code&lt;/H2&gt;&lt;BR /&gt;
I've put my code on &lt;A href="https://github.com/joymike/sap_kafka_demo.git" target="_blank" rel="nofollow noopener noreferrer"&gt;github&lt;/A&gt;.... you might find it useful.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-735085507"&gt;Setup your SAP system&lt;/H2&gt;&lt;BR /&gt;
You can either use your windows EC2 instance's SAPGUI and it is already setup with a system to connect to.&lt;BR /&gt;
&lt;BR /&gt;
If you have your own SAPGUI installed on your own machine. The application server should point to your elastic IP of your EC2 instance, or else it may change after every EC2 restart.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/SAPGUI-Param.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-667654721"&gt;First log in&lt;/H3&gt;&lt;BR /&gt;
Client 001&lt;BR /&gt;
&lt;BR /&gt;
User: DEVELOPER&lt;BR /&gt;
&lt;BR /&gt;
Password: What you entered when you created your CAL instance&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-471141216"&gt;Install trial license&lt;/H3&gt;&lt;BR /&gt;
See &lt;A href="https://wiki.scn.sap.com/wiki/pages/viewpage.action?pageId=526880970" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; , or google how to get a minisap license.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;In a nutshell, get your hardware key from transaction transaction SLICENSE.&lt;/P&gt;&lt;BR /&gt;
Go to &lt;A href="https://go.support.sap.com/minisap/#/minisap" target="test_blank" rel="noopener noreferrer"&gt;https://go.support.sap.com/minisap/#/minisap&lt;/A&gt; and generate a license for A4H, enter your hardware key.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/minisap-license.png" /&gt;Upload it to SLICENSE and you are done.&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-274627711"&gt;Developer key&lt;/H3&gt;&lt;BR /&gt;
The user DEVELOPER should already have a developer key assigned, so in case you are wondering, you don't need one. Just don't go and create your own user and expect to be able to get a developer key for it (I found out the hard way).&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--50968513"&gt;&lt;SPAN style="text-decoration: underline"&gt;Setting up tools&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
First you need to make sure you can SSH into your EC2 instance.&lt;BR /&gt;
&lt;H3 id="toc-hId--118399299"&gt;JDK&lt;/H3&gt;&lt;BR /&gt;
Both KAFKA and SAP Java Connector requires Java, so it makes sense to start installing that first.&lt;BR /&gt;
&lt;BR /&gt;
From memory a Java 1.6 comes with the EC2 instance but it is too old for KAFKA, so we need a newer one.&lt;BR /&gt;
&lt;H4 id="toc-hId--185830085"&gt;To install&lt;/H4&gt;&lt;BR /&gt;
Run command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;sudo zypper --non-interactive install java-1_8_0-openjdk-devel&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--382343590"&gt;To test:&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;Run Command:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;java -version&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;Run Command:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;javac&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
If they didn't return any error, you are good to go.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--707939814"&gt;Nano&lt;/H3&gt;&lt;BR /&gt;
This step is entirely optional. I need an editor in linux, and I like to use nano. You can use whatever you like such as vi.&lt;BR /&gt;
&lt;H4 id="toc-hId--1273087695"&gt;To install&lt;/H4&gt;&lt;BR /&gt;
Run Command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;wget &lt;A href="https://download.opensuse.org/repositories/openSUSE:/Leap:/15.1/standard/x86_64/nano-2.9.6-lp151.2.3.x86_64.rpm" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://download.opensuse.org/repositories/openSUSE:/Leap:/15.1/standard/x86_64/nano-2.9.6-lp151.2.3.x86_64.rpm&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
sudo rpm -i nano-2.9.6-lp151.2.3.x86_64.rpm&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
If this link does not work (because I have no control over it, search for somewhere that that might have a nano rpm distribution)&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--1469601200"&gt;To test:&lt;/H4&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;nano &amp;lt;any file&amp;gt;&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--1666114705"&gt;To exit:&lt;/H4&gt;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Ctrl + X&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--1275822196"&gt;&lt;SPAN style="text-decoration: underline"&gt;Setting up KAFKA&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1765738708"&gt;Install&lt;/H3&gt;&lt;BR /&gt;
Run Command:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;curl -O &lt;A href="http://apache.mirror.amaze.com.au/kafka/2.4.1/kafka_2.12-2.4.1.tgz" target="test_blank" rel="nofollow noopener noreferrer"&gt;http://apache.mirror.amaze.com.au/kafka/2.4.1/kafka_2.12-2.4.1.tgz&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
tar -xvf kafka_2.12-2.4.1.tgz&lt;BR /&gt;
&lt;BR /&gt;
rm -rf kafka_2.12-2.4.1.tgz&lt;BR /&gt;
&lt;BR /&gt;
sudo ln -s ~/kafka_2.12-2.4.1 /opt/kafka&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-2039312076"&gt;Let's explain&lt;/H4&gt;&lt;BR /&gt;
The script will first go to &lt;A href="https://kafka.apache.org/downloads" target="_blank" rel="nofollow noopener noreferrer"&gt;Apache&lt;/A&gt; and download KAFKA. If the link in the above command does not work, then change it to the latest from Apache.&lt;BR /&gt;
&lt;BR /&gt;
The EC2 instance will download KAFKA tgz file, untar it and we create a symbolic link /opt/kafka to the decompressed kafka directory.&lt;BR /&gt;
&lt;BR /&gt;
That's it... now KAKFA is installed!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-2136201578"&gt;Configure&lt;/H3&gt;&lt;BR /&gt;
We are going with the most basic configuration/setup here, with single zookeeper, single KAFKA server. It's up to you to explore more complex setup.&lt;BR /&gt;
&lt;BR /&gt;
Now I'm going to refer to the Apache &lt;A href="https://kafka.apache.org/quickstart" target="_blank" rel="nofollow noopener noreferrer"&gt;quick start guide&lt;/A&gt; since I can't explain it any better and there's no point of me repeating either.&lt;BR /&gt;
&lt;BR /&gt;
In short, we are going setup one zoo keeper (on port 2181), one KAFKA server (on port 9092).&amp;nbsp; Remember these ports as you will see code referring to them later.&lt;BR /&gt;
&lt;BR /&gt;
I run the following script to start the zookeeper and KAFKA server. You need to repeat this after each restart.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;#!/bin/bash&lt;BR /&gt;
export KAFKA_HOME="/opt/kafka"&lt;BR /&gt;
export KAFKA_HEAP_OPTS="-Xmx512M -Xms256M"&lt;BR /&gt;
nohup sudo $KAFKA_HOME/bin/zookeeper-server-start.sh $KAFKA_HOME/config/zookeeper.properties &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;BR /&gt;
sleep 2&lt;BR /&gt;
nohup  $KAFKA_HOME/bin/kafka-server-start.sh  $KAFKA_HOME/config/server.properties &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;BR /&gt;
sleep 2&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Note that I set the KAFKA heap to be smaller as the EC2 instance struggled with the default memory settings.&lt;BR /&gt;
&lt;BR /&gt;
Remember to chmod it to execute.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;chmod +x kafka_start.sh&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;A href="https://github.com/joymike/sap_kafka_demo/tree/master/1.%20kafka%20startup%20script" target="_blank" rel="nofollow noopener noreferrer"&gt;See code here&lt;/A&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1646285066"&gt;Create a topic:&lt;/H4&gt;&lt;BR /&gt;
I'm going to create a topic "my-kafka-topic". You can call it whatever you want. &lt;SPAN style="text-decoration: underline"&gt;You only need to do this once.&lt;/SPAN&gt; If you get an error it means your zookeeper or KAFKA server is not started properly.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;/opt/kafka/bin/kafka-topics.sh --create --topic my-kafka-topic --zookeeper localhost:2181 --partitions 1 --replication-factor 1&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1743174568"&gt;Test it&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1253258056"&gt;Produce a message&lt;/H4&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;/opt/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-kafka-topic&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-1224928242"&gt;Consume the message&lt;/H4&gt;&lt;BR /&gt;
In another SSH session, run this:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;/opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-kafka-topic --from-beginning&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-1615220751"&gt;Setting up SAP JCo&lt;/H2&gt;&lt;BR /&gt;
&lt;SPAN style="text-decoration: underline"&gt;&lt;STRONG&gt;Make sure you get JCo 3.0 and not 3.1&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
I paid a hefty price of trying to get version 3.1 to work, only to wasted hours on trying to fix a ARPCRFC fast serialization error. So I'm going to use version 3.0 here&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1125304239"&gt;Where to download&lt;/H3&gt;&lt;BR /&gt;
&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="test_blank" rel="noopener noreferrer"&gt;https://support.sap.com/en/product/connectors/jco.html&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-928790734"&gt;Install&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-438874222"&gt;Transfer and unzip the file to the EC2 instance&lt;/H4&gt;&lt;BR /&gt;
I suggest you download the "sapjco30P_20-10005328.zip" file first in your desktop and upload it to the EC2 instance. I suggest you either put it somewhere public on the internet and use "wget" or "curl" in the SSH terminal to download. I put it in an S3 bucket and use AWS CLI commands to retrieve it - do whatever works for you.&lt;BR /&gt;
&lt;BR /&gt;
After the file is on the server, you should unzip it to the folder sapjco30.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;mkdir sapjco30&lt;BR /&gt;
cd sapjco30&lt;BR /&gt;
aws s3 cp s3://&amp;lt;my-s3-bucket&amp;gt;/sapjco30P_20-10005328.zip sapjco30P_20-10005328.zip&lt;BR /&gt;
unzip sapjco30P_20-10005328.zip&lt;BR /&gt;
tar -xvf sapjco30P_20-10005328.tgz&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
If you are not using S3 bucket for transfer, skip the s3 line.&lt;BR /&gt;
&lt;BR /&gt;
That's it. SAP Java Connector is ready to be used!&lt;BR /&gt;
&lt;BR /&gt;
Your directory should look like this.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/sap-jco-directory-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now let's get the simple JCo Server to work. JCo server is basically the receiver of an RFC calls from any NW system. You need to first register this "JCo Server" with the SAP system, kind of like a handshake, so that the NW system knows where to call.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-242360717"&gt;Create RFC Destination&lt;/H4&gt;&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Name&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;ZMP_JCO_SERVER&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Type&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;T&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Program ID&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;ZMP_JCO_SERVER&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Activation type&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 50%;height: 14px"&gt;Registered Server Program&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/sm59-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-45847212"&gt;Test the RFC Destination&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;It should return an error for now... don't worry... it will work later on.&lt;/P&gt;&lt;BR /&gt;
The error means it can't connect to the JCo server.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/sm59-connection_test_error.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-142736714"&gt;Configure the JCo Server&lt;/H3&gt;&lt;BR /&gt;
I'm going to use the stock standard JCo Server example provided by SAP. You can make this a lot more complex and scalable and performant.&lt;BR /&gt;
&lt;H4 id="toc-hId--347179798"&gt;Create the JCo Destination file&lt;/H4&gt;&lt;BR /&gt;
&lt;EM&gt;This bit took me hours to figure out, as I couldn't find any documentation that explains this. Perhaps it is straight forward. Standard HTML documentation that comes with the zip file shows you the code and assume you to know how to run it.&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;This tells the JCo Server code where our SAP system is. The JCo Server will use this to call SAP system to register a program ID. &lt;/EM&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;EXT_SERVER.jcoServer&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;#A sample confidguration for a standard registered server &lt;BR /&gt;
#Replace the dummy values and put this file in the working directory.&lt;BR /&gt;
#In eclipse environment it is the project root directory.&lt;BR /&gt;
jco.server.connection_count=2&lt;BR /&gt;
jco.server.gwhost=localhost&lt;BR /&gt;
jco.server.progid=ZMP_JCO_SERVER&lt;BR /&gt;
jco.server.gwserv=sapgw00&lt;BR /&gt;
jco.server.repository_destination=ABAP_AS1&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Make sure you enter the same program Id as the RFC destination file.&lt;BR /&gt;
&lt;BR /&gt;
For the registration, the ABAP_AS1 is required as the JCo server makes a call to SAP.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP_AS1.jcoDestination&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;#Sample destination configuration when using an application server over CPIC&lt;BR /&gt;
#Replace the dummy values and put this file in the working directory.&lt;BR /&gt;
#In eclipse environment it is the project root directory.&lt;BR /&gt;
jco.client.ashost=vhcalnplci&lt;BR /&gt;
jco.client.sysnr=00&lt;BR /&gt;
jco.client.client=&amp;lt;sap client&amp;gt;&lt;BR /&gt;
jco.client.user=&amp;lt;sap user&amp;gt;&lt;BR /&gt;
jco.client.passwd=&amp;lt;sap password&amp;gt;&lt;BR /&gt;
jco.client.lang=en &lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Change your ashost to the server name. localhost might work, haven't tried.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--543693303"&gt;Compile the jco server example:&lt;/H4&gt;&lt;BR /&gt;
Edit the StepByStepServer.java file that comes with the Jco zip file.&lt;BR /&gt;
&lt;BR /&gt;
Configure the server name to be the name of your file.&lt;BR /&gt;
&lt;BR /&gt;
DESTINATION_NAME=Program ID of RFC Destination.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    static String SERVER_NAME1 = "EXT_SERVER";&lt;BR /&gt;
    static String DESTINATION_NAME1 = "ZMP_JCO_SERVER";&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Comment out these lines.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    public static void main(String[] a)&lt;BR /&gt;
    {&lt;BR /&gt;
        step1SimpleServer();&lt;BR /&gt;
//      step2SimpleServer();&lt;BR /&gt;
//      step3SimpleTRfcServer();&lt;BR /&gt;
//      step4StaticRepository();&lt;BR /&gt;
    }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--572023117"&gt;Run&lt;/H4&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;javac -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/* StepByStepServer.java&lt;BR /&gt;
&lt;BR /&gt;
java -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/*:. StepByStepServer&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/jco-server-start.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--475133615"&gt;Test it&lt;/H3&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--965050127"&gt;Test the RFC destination&lt;/H4&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/sm59-connection_test.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
It's working!&lt;BR /&gt;
&lt;H4 id="toc-hId--1161563632"&gt;Test the function module&lt;/H4&gt;&lt;BR /&gt;
Go to transaction SE37 and call function STFC_CONNECTION with the RFC destination.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/jco-server-test.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
The call is successful. The Java code response with "Hello World".&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/jco-server-test-result-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
The call is successfully received by the JCo Server.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/jco-server-test-result-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Finally, all the bits and bobs are set up... Now... back to why we are trying to do this, we want to be able for ABAP to call a java program using Java Connector, and produce a message on KAFKA... See Part 3.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13433006"/>
    <published>2020-04-14T14:12:29+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13433087</id>
    <title>Produce/consume messages in KAFKA with SAP Netweaver using Java Connector – Part 3/3</title>
    <updated>2020-04-15T00:36:31+02:00</updated>
    <author>
      <name>michael_pang4</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/245249</uri>
    </author>
    <content>This is the final part of my blog.... we are now going to join the dots together.&lt;BR /&gt;
&lt;BR /&gt;
The funny thing with doing a proof of concept on AWS is like getting a taxi ride... every minute counts... &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
Let's recap.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
We now have an EC2 instance running in AWS with:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP NW backend&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;RFC destination setup&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;KAFKA setup and we can produce and consume messges from a topic "my-kafka-topic"&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP JCo Server setup and connection established with the SAP NW&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Now, back to the fun part.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-931599261"&gt;Produce a message from SAP to KAFKA&lt;/H2&gt;&lt;BR /&gt;
I copied the Java code from "Tutorialspoint.com" and put it inside StepByStepServer.java provided by SAP. See SimpleProducer.java from &lt;A href="https://www.tutorialspoint.com/apache_kafka/apache_kafka_simple_producer_example.htm" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://www.tutorialspoint.com/apache_kafka/apache_kafka_simple_producer_example.htm&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
(I will not take credit for this code.)&lt;BR /&gt;
&lt;H3 id="toc-hId-864168475"&gt;Compile and run the code&lt;/H3&gt;&lt;BR /&gt;
&lt;A href="https://github.com/joymike/sap_kafka_demo/tree/master/3.%20sap-kafka-producer" target="_blank" rel="nofollow noopener noreferrer"&gt;See code here&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
You need the following files:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP_AS1.jcoDestination&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;EXT_SERVER.jcoServer&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://github.com/joymike/sap_kafka_demo/blob/master/3.%20sap-kafka-producer/StepByStepServer.java" target="_blank" rel="nofollow noopener noreferrer"&gt;StepByStepServer.java&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Now this StepByStepServer.java file is a combination of the SAP example "StepByStepServer.java" and some code I copied from &lt;A href="https://www.tutorialkart.com/apache-kafka/" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;. I didn't spend too much time on making the code pretty and neat. I just did the necessary to make it work so please don't judge.&lt;BR /&gt;
&lt;H3 id="toc-hId-667654970"&gt;What did I change in StepByStepServer.java:&lt;/H3&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;    static String SERVER_NAME1 = "EXT_SERVER";&lt;BR /&gt;
    static String DESTINATION_NAME1 = "ZMP_JCO_SERVER";&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
In the handleRequest method, I added the following:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;            String message = function.getImportParameterList().getString("REQUTEXT");&lt;BR /&gt;
&lt;BR /&gt;
            // Assign topicName to string variable&lt;BR /&gt;
            String topicName = "my-kafka-topic";&lt;BR /&gt;
&lt;BR /&gt;
            // create instance for properties to access producer configs&lt;BR /&gt;
            Properties props = new Properties();&lt;BR /&gt;
            // Assign localhost id&lt;BR /&gt;
            props.put("bootstrap.servers", "localhost:9092");&lt;BR /&gt;
            // Set acknowledgements for producer requests.&lt;BR /&gt;
            props.put("acks", "all");&lt;BR /&gt;
            // If the request fails, the producer can automatically retry,&lt;BR /&gt;
            props.put("retries", 0);&lt;BR /&gt;
            // Specify buffer size in config&lt;BR /&gt;
            props.put("batch.size", 16384);&lt;BR /&gt;
            // Reduce the no of requests less than 0&lt;BR /&gt;
            props.put("linger.ms", 1);&lt;BR /&gt;
            // The buffer.memory controls the total amount of memory available to the&lt;BR /&gt;
            // producer for buffering.&lt;BR /&gt;
            props.put("buffer.memory", 33554432);&lt;BR /&gt;
            props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");&lt;BR /&gt;
            props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");&lt;BR /&gt;
            producer = new KafkaProducer&amp;lt;String, String&amp;gt;(props);&lt;BR /&gt;
            producer.send(new ProducerRecord&amp;lt;String, String&amp;gt;(topicName, message, message));&lt;BR /&gt;
            function.getExportParameterList().setValue("RESPTEXT", "Message sent successfully");&lt;BR /&gt;
            System.out.println("Message sent successfully");&lt;BR /&gt;
            // producer.close();​&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
What the code does is take the text passed from the STFC_CONNECTION function module, and call the Apache KAFKA producer API with it. It's that simple.&lt;BR /&gt;
&lt;BR /&gt;
Compile and run. Notice I need to put both JCo and KAFKA libraries in the classpath now.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;export KAFKA_HEAP_OPTS="-Xmx512M -Xms256M"&lt;BR /&gt;
javac -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/* StepByStepServer.java&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-471141465"&gt;Run the JCo Server&lt;/H3&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;java -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/*:. StepByStepServer&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-274627960"&gt;Start KAFKA consumer&lt;/H3&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;/opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-kafka-topic&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-78114455"&gt;Call RFC function module&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--118399050"&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--314912555"&gt;Result&lt;/H3&gt;&lt;BR /&gt;
Here's a link to the youtube video for the result&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://youtu.be/giAMdDeKUs0" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://youtu.be/giAMdDeKUs0&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IFRAME width="560" height="315" src="https://www.youtube.com/embed/giAMdDeKUs0&amp;amp;feature=youtu.be" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--640508779"&gt;Consume a message using the Java connector client and call RFC&lt;/H2&gt;&lt;BR /&gt;
Now let's try the other way. Someone changed a transaction outside and published to a KAFKA topic and SAP wants to know about it and do something with it.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The flow is:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Message is produced to KAFKA topic&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Java client (with Java Connector) consumes the message.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Java client calls SAP RFC&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP RFC do something with the message.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
I copied the Java code from "Tutorialspoint.com" and put it inside StepByStepServer.java provided by SAP. See SimpleProducer.java from &lt;A href="https://www.tutorialspoint.com/apache_kafka/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://www.tutorialspoint.com/apache_kafka/&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
(I will not take credit for this code.)&lt;BR /&gt;
&lt;H3 id="toc-hId--707939565"&gt;Setup and run the JCo Client&lt;/H3&gt;&lt;BR /&gt;
&lt;A href="https://github.com/joymike/sap_kafka_demo/tree/master/4.%20sap-kafka-consumer" target="_blank" rel="nofollow noopener noreferrer"&gt;See code here&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
You need the following files:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP_AS1.jcoDestination&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A id="3469f1fdb23d0d7fa0421cab47c2323f-77521d240ba5943d8696f90be451a5dc5563b473" class="js-navigation-open " title="SapKafkaConsumer.java" href="https://github.com/joymike/sap_kafka_demo/blob/master/4.%20sap-kafka-consumer/SapKafkaConsumer.java" target="_blank" rel="nofollow noopener noreferrer"&gt;SapKafkaConsumer.java&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A id="1ef51d7189a82c90b45f904331d3dc02-1f9cd9cafdbeab1050e7a403cef599527a6fa466" class="js-navigation-open " title="SapKafkaConsumerDemo.java" href="https://github.com/joymike/sap_kafka_demo/blob/master/4.%20sap-kafka-consumer/SapKafkaConsumerDemo.java" target="_blank" rel="nofollow noopener noreferrer"&gt;SapKafkaConsumerDemo.java&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Now let's explain.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A id="3469f1fdb23d0d7fa0421cab47c2323f-77521d240ba5943d8696f90be451a5dc5563b473" class="js-navigation-open " title="SapKafkaConsumer.java" href="https://github.com/joymike/sap_kafka_demo/blob/master/4.%20sap-kafka-consumer/SapKafkaConsumer.java" target="_blank" rel="nofollow noopener noreferrer"&gt;SapKafkaConsumer.java&lt;/A&gt; is a copy of the SimpleConsumer.java which I borrowed from &lt;A href="https://www.tutorialspoint.com/apache_kafka/" target="_blank" rel="nofollow noopener noreferrer"&gt;here &lt;/A&gt;&amp;nbsp;as mentioned, combined with the code from the StepByStepClient.java from the SAP example.&lt;BR /&gt;
&lt;BR /&gt;
The code can already consume a message from a KAFKA topic "my-kafka-topic", and I take that message and call function STFC_CONNECTION in SAP with the message.&lt;BR /&gt;
&lt;BR /&gt;
The function will echo back the text showing it has successfully received it.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In the doWork method which is called when a message is received, I've added the code to call function STFC_CONNECTION. It should be straight forward what the code does.&lt;BR /&gt;
&lt;H4 id="toc-hId--1273087446"&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--1469600951"&gt;Compile and run the Java client&lt;/H4&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;javac -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/* -Xlint:deprecation *.java&lt;BR /&gt;
java -cp ~/sapjco30/sapjco3.jar:/opt/kafka/libs/*:. SapKafkaConsumeDemo&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1372711449"&gt;Produce a message to KAFKA topic&lt;/H3&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;/opt/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-kafka-topic&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--1569224954"&gt;Results&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Client-producer-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/04/Client-consumer-sapjco.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Voila.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Here's a youtube video.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IFRAME width="560" height="315" src="https://www.youtube.com/embed/2XtHmhM18UE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In summary, it is possible and also not too difficult to do so.&lt;BR /&gt;
&lt;BR /&gt;
What we now need to explore is how to productionize this solution, how to make this HA/DR etc. I'm still have some unanswered questions on how this can handle massive volume in an enterprise environment, or whether the JCo server and client should be on a separate instance.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Anyway, thanks for you time, I hope you find this interesting. Leave me some comments below.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/produce-consume-messages-in-kafka-with-sap-netweaver-using-java-connector/ba-p/13433087"/>
    <published>2020-04-15T00:36:31+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/big-data-integration-of-sap-netweaver-using-i-ohja/ba-p/13434740</id>
    <title>Big Data integration of SAP Netweaver using i-OhJa</title>
    <updated>2020-05-05T12:19:53+02:00</updated>
    <author>
      <name>ronald_schertle</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/595539</uri>
    </author>
    <content>&lt;H1 id="toc-hId-802552929"&gt;Introduction&lt;/H1&gt;&lt;BR /&gt;
In this blog post I want to share some ideas and experiences with implementing a component using SAP &lt;STRONG&gt;J&lt;/STRONG&gt;ava &lt;STRONG&gt;Co&lt;/STRONG&gt;nnector to easily access data and integrate non-SAP processes like data pipelines in big data clusters with the SAP Netweaver Application Server. This finally led to our solution called i-OhJa.&lt;BR /&gt;
&lt;BR /&gt;
About two years ago we started working on a project for some customer in the financial sector. The main task was to set up a Hadoop stack as the new company wide BI platform for big data and streaming. One requirement in the migration phase was to stage load data from SAP BW (on Oracle) to Kafka, another one to load data from Kafka to BW in streaming mode. During this time Kafka streams was out of scope, so we decided to implement our dataflows in Spark streaming. This was the first project to run i-OhJa on customer side in a Spark cluster.&lt;BR /&gt;
&lt;BR /&gt;
Prior to the project we already started evaluating SAP JCo as a library not only providing a JDBC driver for databases in a SAP Netweaver system, but being able to tightly integrate SAP and non-SAP applications in a flexible way. Our goal for i-OhJa was to implement a thin library that meets the requirements mentioned above in a highly regulated sector of financial institutions, without the need to introduce new complex infrastructures or clusters. JCo being a mighty but also basic Java library with the ability to establish a trusted and encrypted connection to SAP Netweaver systems using SNC and SSO provided by the SAP Cryptolib was the best fit for this scenario.&lt;BR /&gt;
&lt;BR /&gt;
To be honest, the last time I implemented software in Java and J2EE using Eclipse IDE was back in 2008. After a long period mostly utilizing ABAP in SAP Netweaver based systems, I was pleased to use a more modern IDE and a functional and type safe language like Scala as our choice for developing i-OhJa. In the above-mentioned scenario, we chose to use SAP BW Open Hubs and SAP Netweaver events to get data out of BW. For the opposite direction we used Webservice DataSources to load data into BW in a streaming and real-time manner. All these interfaces are based on RFC enabled function modules and have a tight integration into the monitoring and scheduling environment of SAP BW.&lt;BR /&gt;
&lt;H1 id="toc-hId-606039424"&gt;EL(T)&lt;/H1&gt;&lt;BR /&gt;
Since there are already a bunch of ETL tools out there and as we wanted to keep i-OhJa as thin as possible, we decided to cover only the &lt;STRONG&gt;E&lt;/STRONG&gt;xtraction and &lt;STRONG&gt;L&lt;/STRONG&gt;oad of ELT. This also follows some basic ideas of modern microservice architectures. In the scenarios mentioned above this means that the data held in Kafka is a close replication of the data being transferred via OpenHub or Webservice DataSource.&lt;BR /&gt;
&lt;H1 id="toc-hId-409525919"&gt;Type safety and wrappers&lt;/H1&gt;&lt;BR /&gt;
A thing we like most about Scala besides its functional style is keeping our code type safe. A short time after starting to implement i-OhJa we decided to wrap all necessary JCo classes in Scala classes for being able to use them natively in e.g. pattern matching and collection functions and providing type safety and immutability. We provide class wrappers for function templates, function requests, function responses, tables, records/structures, record fields, all elementary types available in JCo 3.1, parameter lists, corresponding meta data classes of JCo, DDIC types, message types, selection ranges, aggregation functions, ABAP exceptions, JCo destinations, BAPI return messages, BAPI transaction commit and rollback in JCo context and more.&lt;BR /&gt;
&lt;H1 id="toc-hId-213012414"&gt;Code generation&lt;/H1&gt;&lt;BR /&gt;
With one of our customers we saw customer specific ELT frameworks written in Scala using JSON-like configuration files to define individual data pipelines. Concepts following this dynamic principle have some drawbacks:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The configuration files need to be parsed with every execution of the batch or streaming pipeline&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Issues in the configuration files besides syntactic correctness lead to runtime exceptions because they bypass type checks of the compiler.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The ELT framework implementation makes heavy use of methods like &lt;EM&gt;asInstanceOf&lt;/EM&gt; and &lt;EM&gt;isInstanceOf&lt;/EM&gt; to cope with the vast amount of different interface data structures and types. As all the ELT logic is kept in configuration files the individual data types are known as soon as these files are being parsed, which is at runtime of the pipelines.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Using configuration files to define pipelines makes them more flexible. They can be changed and maintained without the need to change the underlying code. Therefore, the changes don’t need to be recompiled and you don’t have to follow the build and release cycle of the customer.&lt;BR /&gt;
We consider this approach as a drawback here. Changes to configuration files are comparable to code changes bypassing all the code checks and quality gates implemented in your continuous integration processes.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Us being supporters of static type safety, we decided to take a different approach to handle the challenge of diverse data structures. We implemented Scala code generators producing case classes representing the structure of individual RFC function modules.&lt;BR /&gt;
An example of the generated classes for a simple BAPI like BAPI_ODSO_GETLIST, delivering a list of available DSOs in a SAP BW system, would look like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image001.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;case class JCoBapiOdsoGetlistWrapper(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; importing: JCoBapiOdsoGetlistWrapper.Importing = JCoBapiOdsoGetlistWrapper.&lt;EM&gt;Importing&lt;/EM&gt;(),&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; exporting: JCoBapiOdsoGetlistWrapper.Exporting = JCoBapiOdsoGetlistWrapper.&lt;EM&gt;Exporting&lt;/EM&gt;(),&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; changing: JCoBapiOdsoGetlistWrapper.Changing = JCoBapiOdsoGetlistWrapper.&lt;EM&gt;Changing&lt;/EM&gt;(),&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; tables: JCoBapiOdsoGetlistWrapper.Tables) extends JCoBapiOdsoGetlistWrapper.JCoFunctionWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Importing(objvers: Option[Char] = Some('R')) extends JCoParametersWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Exporting(`return`: Exporting.Return = Exporting.Return()) extends JCoParametersWrapper {…}&lt;BR /&gt;
case class Changing() extends JCoParametersWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Tables(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; odsobjectlist: Seq[Tables.Odsobjectlist] = &lt;EM&gt;Nil&lt;/EM&gt;,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; selodsobject: Seq[Tables.Selodsobject] = &lt;EM&gt;Nil&lt;/EM&gt;,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; seltextlong: Seq[Tables.Seltextlong] = &lt;EM&gt;Nil&lt;/EM&gt;) extends JCoParametersWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Return(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; `type`: Option[Char] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; id: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; number: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; message: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; logNo: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; logMsgNo: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; messageV1: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; messageV2: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; messageV3: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; messageV4: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; parameter: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; row: Option[Int] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; field: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; system: Option[String] = None) extends JCoRecordWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Odsobjectlist(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; odsobject: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; objvers: Option[Char] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; textlong: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; objstat: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; activfl: Option[Char] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; infoarea: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; odsotype: Option[Char] = None) extends JCoRecordWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Selodsobject(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; sign: Option[Char] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; option: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; odsobjectlow: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; odsobjecthigh: Option[String] = None) extends JCoRecordWrapper {…}&lt;BR /&gt;
&lt;BR /&gt;
case class Seltextlong(&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; sign: Option[Char] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; option: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; textlonglow: Option[String] = None,&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; textlonghigh: Option[String] = None) extends JCoRecordWrapper {…}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-16498909"&gt;Client and server&lt;/H1&gt;&lt;BR /&gt;
JCo consists of two types of library components: JCo server and JCo client. For now, it is enough to know that JCo Server will be used in cases where SAP Netweaver ABAP initiates communication (here: OpenHub scenario). Whereas JCo client is used if non-SAP applications make calls to RFCs (here: Webservice DataSource push).&lt;BR /&gt;
&lt;H2 id="toc-hId--50931877"&gt;BW and ODP specific client libraries&lt;/H2&gt;&lt;BR /&gt;
For interfaces, protocols and function libraries that are more complex than just calling one single RFC function module, it makes sense to provide specific client library modules.&lt;BR /&gt;
&lt;BR /&gt;
We have done so for the good old BW OpenHub connections, BW BAPIs and Operational Data Provisioning. As one might expect all these interfaces are based on plain RFC functions, even ODPs as successor of the business content DataSources, which were based on ALE/IDocs.&lt;BR /&gt;
&lt;BR /&gt;
A challenge you will face when querying data through generic interfaces like OpenHubs, BW BAPIs or ODPs serving different kind of data structures is that data is serialized as text encoded strings with a record being a concatenation of different data types in a single string. An obvious option to reconstruct data structures would be to parse these strings directly into native Java or Scala objects. We took an alternative approach by parsing the strings into wrapped JCo structures created on the fly based on the meta information we get from the corresponding function modules. This way we use JCo to convert the strings into proper data types and we can afterwards make use of all the methods provided by i-OhJa for the respective wrapper classes.&lt;BR /&gt;
&lt;BR /&gt;
JCo allows creating JCoStructure and JCoTable objects based on JCoRecordMetaData objects. In a normal use case one would get these meta data objects by querying the repository, but in this scenario the structures need to be built at runtime by making use of the &lt;EM&gt;JCo.createRecordMetaData&lt;/EM&gt; method. A challenge we faced was providing byte lengths, offsets and alignments to the &lt;EM&gt;JCoRecordMetaData.add&lt;/EM&gt; methods for all the data types a field of a structure can have. i-OhJa offers the ability to calculate the byte offsets and lengths for all JCo type wrappers. Together with conversion methods for all the different DDIC and InfoObject types it can create structures and even whole JCoFunction instances based on different kind of metadata.&lt;BR /&gt;
&lt;H2 id="toc-hId--247445382"&gt;Reactive OpenHub server using Akka&lt;/H2&gt;&lt;BR /&gt;
For being able to listen for new incoming data and requests i-OhJa provides a server component with services wrapped around JCo server. Services have to extend a defined service trait and have to implement the logic for listening and processing incoming requests from a SAP system. They can also make use of the i-OhJa client libraries to request data from the SAP system. The services can be provided at runtime by registering to an i-OhJa server instance. Some predelivered services like the OpenHub extraction provide another interface for being able to register so called data adapters. The services will pass the processed data to the registered data adapter that contains the logic to finally pass or store the data. Predelivered data adapters for the OpenHub service can store data in a CSV file, output data in the console or publish data to a Kafka topic in a Kafka cluster. Further services or data adapters can be implemented according to customer specific requirements.&lt;BR /&gt;
&lt;BR /&gt;
For being able to react fast on incoming requests, a dispatcher instance forwards requests instantly to the corresponding services. The OpenHub service uses Akka to process several OpenHub request-packages asynchronously and in parallel. A backpressure algorithm takes care of in-/decreasing the amount of data packages extracted and processed in parallel according to the resources being available.&lt;BR /&gt;
&lt;H1 id="toc-hId--573041606"&gt;Converters and SerDe&lt;/H1&gt;&lt;BR /&gt;
A typical scenario in JCo applications is to register a destination provider before using a destination object to retrieve a function object from the repository. This mutable function object contains all meta data of the corresponding RFC function module together with the state of parameter values and exceptions before and after calling the function module. In short, this object contains all the information we send to and get back from the Netweaver system using function modules.&lt;BR /&gt;
In several cases you will have the need to serialize this object or parts of it, e.g. when sending data to Kafka or storing RFC responses for use in unit tests. Another advantage of serializing function objects is that after storing a serialized RFC response you don’t need an active SAP connection anymore to create function objects. This is an alternative to using JCo function templates, which are supported by i-OhJa too.&lt;BR /&gt;
You can serialize a function object easily by using native Java serialization with several drawbacks, like not being able to deserialize it when upgrading JCo versions and so on. But this was only one reason for us to implement (de-)serialization using different kind of data formats.&lt;BR /&gt;
&lt;BR /&gt;
So far, we have implemented and used converters and SerDes for the following data formats:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;i-OhJa Scala wrappers and case classes from JCo Java classes:&lt;BR /&gt;
For all the converters and SerDes implemented, i-OhJa provides implicit Scala conversion classes that just need to be imported in your application code. JCo is completely and transparently hidden behind the corresponding Scala wrappers and you do not have to worry about internal conversion and usage of JCo.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;JSON:&lt;BR /&gt;
The JSON SerDe provides lossless bidirectional serialization and deserialization holding data values and types in the same structure. We recommend the use of JSON as serialization format e.g. for RFC function templates, so you will be able to store the interface definition of common RFC enabled function modules or BAPIs provided by SAP Netweaver systems in a human readable way.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Avro 1.9.2:&lt;BR /&gt;
Avro is widely used when it comes to serialization in big data systems like Kafka. It was our first choice for serializing data coming from SAP in the scenarios mentioned in the introduction. It supports all the data types we need like deep structures and separates the schema definition from the actual serialized data. i-OhJa can be used to apply lossless bidirectional serialization and deserialization using Avro. The generated schema definition can be used to e.g. include it in the stream of data published to Kafka, it can be stored in a AVSC file or send to a schema registry service.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Protobuf v3:&lt;BR /&gt;
The Protobuf SerDe uses a fixed schema defined in a .proto file according to the type wrapper classes used to represent RFC requests and responses and all dependent types like records, tables and elementary types.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CSV:&lt;BR /&gt;
The structure of CSV files only allows to store two-dimensional data like tables, so currently there is only support to serialize tables and records used in function modules in CSV files.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Spark:&lt;BR /&gt;
Spark structured streaming uses its own schema definition defined in the package &lt;EM&gt;sql&lt;/EM&gt;. Data structures can be nested deeply in objects of the class &lt;EM&gt;sql.Row&lt;/EM&gt;. Spark includes all data types and schema structures necessary to convert all kind of JCo types into Spark SQL types. i-OhJa includes corresponding conversion methods, which were used when implementing the data pipelines in our customers projects.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Kafka connect:&lt;BR /&gt;
Kafka connect defines unique schema and data objects for internal use. This allows to apply common data type converters supplied by Confluent to data streams created by diffent kind of source connectors. In a POC we implemented a flexible Kafka connect SAP Netwevaer source connector tested using the debezium embedded engine for use in the Confluent platform.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Native object serialization:&lt;BR /&gt;
One can use native Scala and Java object serialization for the wrapper classes of i-OhJa or the POJOs that can be extracted from wrapped data.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--769555111"&gt;UI&lt;/H1&gt;&lt;BR /&gt;
We provide two types of user interfaces for interaction with i-OhJa: A &lt;STRONG&gt;C&lt;/STRONG&gt;ommand &lt;STRONG&gt;L&lt;/STRONG&gt;ine &lt;STRONG&gt;I&lt;/STRONG&gt;nterface and a simple server and client Web UI based on Twirl and Akka HTTP. Akka HTTP is used for building a reactive HTTP server, while Twirl allows to generate HTML pages based on native Scala code. This is an easy way to provide direct access to all kind of Scala based functionality provided by i-OhJa that is wrapped around JCo.&lt;BR /&gt;
The following screenshots show basic web pages demonstrating possibilities to monitor and access i-OhJa.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image002.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;The Server page is a simple page containing information about registered services and their RFC modules as well as running instances. In the Image shown above you can see the progress of extracting an OpenHub request.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image003.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
The i-OhJa client page gives an overview of artifacts available in a connected SAP Netweaver system like RFCs, ODPs, OpenHubs and so on.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image004.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image005.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
The page for a SAP BW DataStoreObject gives you an overview of the properties of a DSO and the available fields respectively InfoObjects. One can download the schema of the data in various formats or open a data preview for active data of the DSO for being able to see what the structure of the data being extracted will look like.&lt;BR /&gt;
&lt;H1 id="toc-hId--966068616"&gt;Testing and mocks&lt;/H1&gt;&lt;BR /&gt;
When it comes to unit testing of interface library functions like the ones contained in i-OhJa, we first must provide server and client mocks for being able to execute local tests without the need to establish a connection to a SAP Netweaver system. This was achieved by extending the wrapped JCo classes like JCoDestination, DestinationDataProvider, ServerDataProvider, JCoServerFactory etc.&lt;BR /&gt;
With the mocks in place you just have to implement the behavior of the mocks based on RFC function calls. A simple scala test for the BI client method to retrieve a list of OpenHub objects available in a SAP system looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/image006.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
This test implementation uses a trace of an RFC call stored in a json file to retrieve the list of OpenHubs without establishing a connection to a SAP system.&lt;BR /&gt;
For generating test data, one has basically two options:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Create a function template object and use generators like the ones from ScalaCheck to fill the parameters of the created function objects with generated values.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Trace SAP RFC function calls once, serialize and store them in object files using a SerDe and use these to replay a specific scenario locally without an active connection to a SAP system. This is the scenario we can see in the example provided above.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--392842038"&gt;Side notes&lt;/H1&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Before starting to work with JCo it is worth to know that renaming the JCo-jar leads to a runtime exception because SAP doesn’t allow renaming this file:&lt;BR /&gt;
Exception in thread "main" java.lang.ExceptionInInitializerError: JCo initialization failed with java.lang.ExceptionInInitializerError:&lt;BR /&gt;
&lt;EM&gt;Illegal JCo archive "sapjco-3.1.2.jar". It is not allowed to rename or repackage the original archive "sapjco3.jar".&lt;BR /&gt;
at com.sap.conn.jco.rt.MiddlewareJavaRfc.&amp;lt;clinit&amp;gt;(MiddlewareJavaRfc.java:165)&lt;BR /&gt;
at com.sap.conn.jco.rt.DefaultJCoRuntime.initialize(DefaultJCoRuntime.java:78)&lt;BR /&gt;
at com.sap.conn.jco.rt.JCoRuntimeFactory.&amp;lt;clinit&amp;gt;(JCoRuntimeFactory.java:23)&lt;/EM&gt;&lt;BR /&gt;
This is an issue when working with local artifactories storing artifacts using the Maven naming conventions. One workaround is to store the native libraries and the jar as a zip-file and configuring local unzipping as part of your POM. Another solution is to provide the path to the native library when starting your application using jvm parameter -Djco.library=".\sapjco-3.1.2.dll". If doing so the jar needs to be stored at the same path as the native library, but you will be able to rename it.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;When running JCo in a Hortonworks HDP cluster we realized that using &lt;EM&gt; isDestinationDataProviderRegistered()&lt;/EM&gt; does not lead to the expected results. This will often return &lt;EM&gt;false&lt;/EM&gt;, but if you try to register a destination provider afterwards you will get a runtime exception saying that a destination provider was already registered.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;An attentive reader might have noticed the default value ‘R’ for the object version in the importing parameter list of the generated code example for BAPI BAPI_ODSO_GETLIST. This seems to be a bug in JCo not being able to resolve parameter default values based on type pool constants like RS_C_OBJVERS-ACTIVE.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--589355543"&gt;Summary&lt;/H1&gt;&lt;BR /&gt;
SAP JCo and IDoc provide basic APIs for a flexible and extensive interaction with SAP Netweaver application servers. We have implemented i-OhJa as a Scala framework for being able to use SAP JCo in a functional, typesafe and easy way. Furthermore, it simplifies accessing and transforming data transmitted via RFCs. We have successfully utilized it in a Big Data scenario using Apache Spark to integrate streaming pipelines with SAP Netweaver systems. This kind of integration is much more flexible compared to simple JDBC drivers with direct database access and allows to combine any kind of services and processes available in Java and SAP Netweaver based systems.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/big-data-integration-of-sap-netweaver-using-i-ohja/ba-p/13434740"/>
    <published>2020-05-05T12:19:53+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-call-function-modules-using-sap-cloud-sdk-for-java/ba-p/13439653</id>
    <title>How to call function modules using SAP Cloud SDK for Java</title>
    <updated>2020-05-08T07:21:21+02:00</updated>
    <author>
      <name>Fukuhara</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44116</uri>
    </author>
    <content>Hi All,&lt;BR /&gt;
&lt;BR /&gt;
I am writing this blog to describe steps to build Java application calling function modules on SAP Cloud Platform CF with SAP Cloud SDK.&lt;BR /&gt;
&lt;BR /&gt;
Function modules are on on-premise environment and called by JCo via SAP Cloud Connector.&lt;BR /&gt;
&lt;BR /&gt;
There are so many useful information &lt;A href="https://sap.github.io/cloud-sdk/docs/java/features/bapi-and-rfc/bapi-and-rfc-overview" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.(2020/8/21 Added)&lt;BR /&gt;
&lt;H1 id="toc-hId-802700957"&gt;Architecture&lt;/H1&gt;&lt;BR /&gt;
System architecture is as below image, which is on the &lt;A href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/bfcb54ca058f4b1dafd26e438ff1e2f4.html" target="_blank" rel="noopener noreferrer"&gt;SAP Help portal&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG src="https://help.sap.com/doc/PRODUCTION/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/loiocfadd397cba3494a9261bf1990978bba_LowRes.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
It takes time to test this for me, since I was unfamiliar with SAP Cloud Platform services like XSUAA and App Router.&amp;nbsp; To understand SAP Cloud Platform services, I posted &lt;A href="https://blogs.sap.com/2020/05/01/app-router-xsuaa%e3%81%a8java-application%e9%96%8b%e7%99%ba/" target="_blank" rel="noopener noreferrer"&gt;an article about App Router, XSUAA and Java Application in Japanese.&lt;/A&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-606187452"&gt;Environment&lt;/H1&gt;&lt;BR /&gt;
I used both Windows and Ubuntu PC, just because my development environment is separated into Java and others.&amp;nbsp; It is not mandatory to use both windows and ubuntu.&lt;BR /&gt;
&lt;H2 id="toc-hId-538756666"&gt;Local PC(Java development on Windows)&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;OS: Windows10 64-bit&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;openJDK: 1.8.0_242&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Chocolatey: 0.10.15&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;maven: 3.6.3&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;IDE: IntelliJ IDEA Community Edition 2019.3.5&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CF cli: 6.51.0+2acd15650.2020-04-07&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cloud SDK for Java: 3.19.1&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-342243161"&gt;Local PC(App router development on Ubuntu)&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;OS: Ubuntu18.04.01 LTS&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;nvm: 0.35.3&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Node.js: 12.16.2&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;npm: 6.14.5&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cloud SDK for JavaScript:1.19.0&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cloud SDK cli: 0.1.8&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CF cli: 6.51.0+2acd15650.2020-04-07&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-145729656"&gt;Cloud Foundry&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Java Buildpack version: sap java build pack 1.25.0&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;CF (Europe – Frankfurt)&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--50783849"&gt;Netweaver ABAP&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;NetWeaver ABAP 7.53 SP0&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--247297354"&gt;Cloud Connector&lt;/H2&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cloud Connector 2.11.2&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Seeing following stackoverflow question, invoking function modules/ BAPIs from localhost is not supported.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;What you wanna do is technically not supported: You want to invoke a BAPI&amp;nbsp;&lt;I&gt;from your localhost&lt;/I&gt;&amp;nbsp;via the transport protocol RFC using the JCo library (used behind the scenes via the SAP Cloud SDK). The usage of JCo requires to run your app on SAP Cloud Platform.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;A href="https://stackoverflow.com/questions/59819607/target-host-is-not-specified-exception-while-calling-bapi-from-java-using-sap-cl" target="_blank" rel="nofollow noopener noreferrer"&gt;https://stackoverflow.com/questions/59819607/target-host-is-not-specified-exception-while-calling-bapi-from-java-using-sap-cl&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
I'm not sure if invoking them is possible with Neo SDK.&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;when deploying locally you must add a dependency to Neo SDK (which also contains the JCO libraries).&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;A href="https://answers.sap.com/questions/13012430/classnotfoundexception-when-calling-remote-functio.html?childToView=13013904#answer-13013904" target="_blank" rel="noopener noreferrer"&gt;https://answers.sap.com/questions/13012430/classnotfoundexception-when-calling-remote-functio.html?childToView=13013904#answer-13013904&lt;/A&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--572893578"&gt;Steps&lt;/H1&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--640324364"&gt;1. Setup Cloud Connector&lt;/H2&gt;&lt;BR /&gt;
Access SAP Cloud Connector and setup connection from SAP Cloud Platform to ABAP Server.&amp;nbsp; The steps are same as the one of&amp;nbsp; &lt;A href="https://blogs.sap.com/2020/05/07/configure-cloud-connector-for-rfc-connection-from-cloud-to-on-premise/" target="_blank" rel="noopener noreferrer"&gt;blog post "Configure Cloud Connector for RFC connection from cloud to on-premise".&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--836837869"&gt;2. Create Destination&lt;/H2&gt;&lt;BR /&gt;
Create Destination service by&amp;nbsp;&lt;A href="http://cli.cloudfoundry.org/en-US/cf/create-service.html" target="_blank" rel="nofollow noopener noreferrer"&gt;CF cli command “cf create-service”&lt;/A&gt;.&amp;nbsp; “lite” is service plan name.&amp;nbsp; The steps are same as the one of&amp;nbsp; &lt;A href="https://blogs.sap.com/2020/05/07/configure-cloud-connector-for-rfc-connection-from-cloud-to-on-premise/" target="_blank" rel="noopener noreferrer"&gt;blog post "Configure Cloud Connector for RFC connection from cloud to on-premise".&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--686097017"&gt;3. Create Routes for Java and App Router&lt;/H2&gt;&lt;BR /&gt;
I did this step on Ubuntu PC.&lt;BR /&gt;
&lt;BR /&gt;
Firstly create routes for Java application and App Router by &lt;A href="http://cli.cloudfoundry.org/en-US/cf/create-route.html" target="_blank" rel="nofollow noopener noreferrer"&gt;cf cli create-route command&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Please replace from &amp;lt;space name&amp;gt; to your space name.&amp;nbsp; Name &amp;lt;host name of XXX&amp;gt; as you like.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;cf create-route &amp;lt;space name&amp;gt; cfapps.eu10.hana.ondemand.com --hostname &amp;lt;host name of App Router&amp;gt;&lt;BR /&gt;
cf create-route &amp;lt;space name&amp;gt; cfapps.eu10.hana.ondemand.com --hostname &amp;lt;host name of Java App&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--882610522"&gt;4. Create Java Application&lt;/H2&gt;&lt;BR /&gt;
I did this step on Windows PC.&lt;BR /&gt;
&lt;BR /&gt;
With maven, create a Java Application project.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;mvn archetype:generate "-DarchetypeGroupId=com.sap.cloud.sdk.archetypes" "-DarchetypeArtifactId=scp-cf-tomee" "-DarchetypeVersion=RELEASE"&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I set following information during prompt.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;groupId: com.sap.cloud.sdk&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;artifactId: test-rfc&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;version: 1.0-SNAPSHOT&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;package: com.sap.cloud.sdk&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Change "manifest.yml" file.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Add the created route in step 3 to "routers" -&amp;gt; "route"&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Change values of "random-route"&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Add the created destination to "services"&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;---&lt;BR /&gt;
applications:&lt;BR /&gt;
&lt;BR /&gt;
- name: test-rfc&lt;BR /&gt;
  memory: 1024M&lt;BR /&gt;
  timeout: 300&lt;BR /&gt;
  routers:&lt;BR /&gt;
    - route: &lt;A href="https://&amp;lt;route" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://&amp;lt;route&lt;/A&gt; host name&amp;gt;.&amp;lt;route domain name&amp;gt;&lt;BR /&gt;
  random-route: false&lt;BR /&gt;
  path: application/target/test-rfc-application.war&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
    - sap_java_buildpack&lt;BR /&gt;
  env:&lt;BR /&gt;
    TARGET_RUNTIME: tomee7&lt;BR /&gt;
    SET_LOGGING_LEVEL: '{ROOT: INFO, com.sap.cloud.sdk: INFO}'&lt;BR /&gt;
    JBP_CONFIG_SAPJVM_MEMORY_SIZES: 'metaspace:128m..'&lt;BR /&gt;
  services:&lt;BR /&gt;
#  - my-application-logs&lt;BR /&gt;
  - &amp;lt;destination name&amp;gt;&lt;BR /&gt;
#  - my-connectivity&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thought it is unusual, "Plugins Usage Analytics Maven Plugin" version 3.19.1 doesn't exist on the maven repository.&amp;nbsp; So I changed the version on "&amp;lt;project root&amp;gt;/application/pom.xml".&amp;nbsp; In addition, I changed skipUsageAnalytics value.&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;            &amp;lt;plugin&amp;gt;&lt;BR /&gt;
                &amp;lt;groupId&amp;gt;com.sap.cloud.sdk.plugins&amp;lt;/groupId&amp;gt;&lt;BR /&gt;
                &amp;lt;artifactId&amp;gt;usage-analytics-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;BR /&gt;
                &amp;lt;!-- changed from 3.19.1 to 3.18.0 --&amp;gt;&lt;BR /&gt;
                &amp;lt;version&amp;gt;3.18.0&amp;lt;/version&amp;gt;&lt;BR /&gt;
                &amp;lt;executions&amp;gt;&lt;BR /&gt;
                    &amp;lt;execution&amp;gt;&lt;BR /&gt;
                        &amp;lt;goals&amp;gt;&lt;BR /&gt;
                            &amp;lt;goal&amp;gt;usage-analytics&amp;lt;/goal&amp;gt;&lt;BR /&gt;
                        &amp;lt;/goals&amp;gt;&lt;BR /&gt;
                        &amp;lt;configuration&amp;gt;&lt;BR /&gt;
                            &amp;lt;!-- changed from false to true --&amp;gt;&lt;BR /&gt;
                            &amp;lt;skipUsageAnalytics&amp;gt;true&amp;lt;/skipUsageAnalytics&amp;gt;&lt;BR /&gt;
                            &amp;lt;generateSalt&amp;gt;true&amp;lt;/generateSalt&amp;gt;&lt;BR /&gt;
                            &amp;lt;!--&lt;BR /&gt;
                            Note: A random salt is auto-generated once the project is built for the first time.&lt;BR /&gt;
                            Please keep the generated salt in the POM file, for example, when pushing to git.&lt;BR /&gt;
&lt;BR /&gt;
                            To learn more, visit: &lt;A href="https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/" target="test_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/&lt;/A&gt;&lt;BR /&gt;
                            --&amp;gt;&lt;BR /&gt;
                            &amp;lt;salt&amp;gt;55578c0d7b7bff985020ad9ce2e033dbb9bd6425acb24eb8d4b40dcc1ba0f9b0&amp;lt;/salt&amp;gt;&lt;BR /&gt;
                        &amp;lt;/configuration&amp;gt;&lt;BR /&gt;
                    &amp;lt;/execution&amp;gt;&lt;BR /&gt;
                &amp;lt;/executions&amp;gt;&lt;BR /&gt;
            &amp;lt;/plugin&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
After project generation, build and deploy the Java application.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;mvn clean package &amp;amp;&amp;amp; cf push&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Check if the deployment is successful using Curl.&amp;nbsp; Only this command run on Ubuntu PC.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;$ curl &lt;A href="https://test-rfc.cfapps.eu10.hana.ondemand.com/hello" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://test-rfc.cfapps.eu10.hana.ondemand.com/hello&lt;/A&gt;&lt;BR /&gt;
Hello World!&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--1079124027"&gt;5. Create XSUAA service and App Router&lt;/H2&gt;&lt;BR /&gt;
I did this step on Ubuntu PC.&lt;BR /&gt;
&lt;H3 id="toc-hId--1569040539"&gt;5.1. Create App Router Project&lt;/H3&gt;&lt;BR /&gt;
I created App Router using SAP Cloud SDK for Javascript cli. During prompt, input Java application name "test-rfc".&lt;BR /&gt;
&lt;BR /&gt;
It is not mandatory to use the cli.&amp;nbsp; App Router and relevant codes are very simple.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;$ sap-cloud-sdk add-approuter&lt;BR /&gt;
No 'manifest.yml' found.&lt;BR /&gt;
Enter project name as maintained in Cloud Foundry: test-rfc&lt;BR /&gt;
  ✔ Creating files&lt;BR /&gt;
&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Successfully added approuter to your project.&lt;BR /&gt;
&lt;BR /&gt;
Generated files might need customization. Documentation available here:&lt;BR /&gt;
- xs-security.json (for help check &lt;A href="https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.02/en-US/e6fc90df44464a29952e1c2c36dd9861.html)" target="test_blank" rel="noopener noreferrer"&gt;https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.02/en-US/e6fc90df44464a29952e1c2c36dd9861.html)&lt;/A&gt;&lt;BR /&gt;
- xs-app.json (for help check &lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/c103fb414988447ead2023f768096dcc.html)" target="test_blank" rel="noopener noreferrer"&gt;https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/c103fb414988447ead2023f768096dcc.html)&lt;/A&gt;&lt;BR /&gt;
- mainfest.yml (for help check &lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/ba527058dc4d423a9e0a69ecc67f4593.html)" target="test_blank" rel="noopener noreferrer"&gt;https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/ba527058dc4d423a9e0a69ecc67f4593.html)&lt;/A&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1765554044"&gt;5.2. Change "xs-security.json"&lt;/H3&gt;&lt;BR /&gt;
Change "tenant-mode" value on "aprouter/xs-security.json" file.&amp;nbsp; I have never used "shared".&amp;nbsp; Please refer to &lt;A href="https://developers.sap.com/tutorials/s4sdk-secure-cloudfoundry.html#0ae205fa-df73-4ab6-9c45-a47b40c491d3" target="_blank" rel="noopener noreferrer"&gt;tutorial &lt;/A&gt;and &lt;A href="https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/517895a9612241259d6941dbf9ad81cb.html" target="_blank" rel="noopener noreferrer"&gt;help document&lt;/A&gt; for further detail.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "xsappname": "test-rfc",&lt;BR /&gt;
  "tenant-mode": "dedicated"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1962067549"&gt;5.3. Create XSUAA service&lt;/H3&gt;&lt;BR /&gt;
Create XSUAA service using xs-security.json by &lt;A href="http://cli.cloudfoundry.org/en-US/cf/create-service.html" target="_blank" rel="nofollow noopener noreferrer"&gt;cf cli command&lt;/A&gt;.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;cf create-service xsuaa application &amp;lt;xsuaa name&amp;gt; -c xs-security.json&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
bind XSUAA service and the Java application.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;cf bind-service test-rfc &amp;lt;xsuaa name&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-2136386242"&gt;5.4. Create App Router&lt;/H3&gt;&lt;BR /&gt;
Change manifest.yml file.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;applications:&lt;BR /&gt;
  - name: test-rfc-approuter&lt;BR /&gt;
    routes:&lt;BR /&gt;
      - route: &amp;gt;-&lt;BR /&gt;
          &lt;A href="https://&amp;lt;App" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://&amp;lt;App&lt;/A&gt; Router Route host name&amp;gt;&amp;lt;App Router Route domain&amp;gt;&lt;BR /&gt;
    path: .&lt;BR /&gt;
    memory: 128M&lt;BR /&gt;
    buildpacks:&lt;BR /&gt;
      - nodejs_buildpack&lt;BR /&gt;
    env:&lt;BR /&gt;
#      TENANT_HOST_PATTERN: &amp;gt;-&lt;BR /&gt;
#        "test-rfc-(.*).cfapps.sap.hana.ondemand.com"&lt;BR /&gt;
      destinations: &amp;gt;-&lt;BR /&gt;
        [{"name":"test-rfc","url":"https://&amp;lt;Java Route host name&amp;gt;.&amp;lt;Java Route domain&amp;gt;","forwardAuthToken":true}]&lt;BR /&gt;
    services:&lt;BR /&gt;
      - &amp;lt;xsuaa name&amp;gt;&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Deploy the App Router.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;cf push&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now go to App router route url via browser and redirect to XSUAA service.&amp;nbsp; After authentication, "Hello World!" is displayed on browser.&lt;BR /&gt;
&lt;H2 id="toc-hId--2061691552"&gt;7. Create Connectivity&lt;/H2&gt;&lt;BR /&gt;
I did this step on Ubuntu PC.&lt;BR /&gt;
&lt;BR /&gt;
Create Connectivity service.&amp;nbsp; The Connectivity service is necessary to connect from cloud to on-premise environment according to &lt;A href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/daca64dacc6148fcb5c70ed86082ef91.html" target="_blank" rel="noopener noreferrer"&gt;Help document&lt;/A&gt;.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;cf create-service connectivity lite &amp;lt;connectivity name&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-2036762239"&gt;8. Update Java Application&lt;/H2&gt;&lt;BR /&gt;
I did this step on Windows PC.&lt;BR /&gt;
&lt;BR /&gt;
Change "&amp;lt;project root&amp;gt;/manifest.yml" to bind created services.&amp;nbsp; Make sure that "env" is also updated.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;---&lt;BR /&gt;
applications:&lt;BR /&gt;
&lt;BR /&gt;
- name: test-rfc&lt;BR /&gt;
  memory: 1024M&lt;BR /&gt;
  timeout: 300&lt;BR /&gt;
  random-route: false&lt;BR /&gt;
  routers:&lt;BR /&gt;
    - route: &lt;A href="https://test-rfc-java.cfapps.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://test-rfc-java.cfapps.eu10.hana.ondemand.com&lt;/A&gt;&lt;BR /&gt;
  path: application/target/test-rfc-application.war&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
    - sap_java_buildpack&lt;BR /&gt;
  env:&lt;BR /&gt;
    TARGET_RUNTIME: tomee7&lt;BR /&gt;
    SET_LOGGING_LEVEL: '{ROOT: INFO, com.sap.cloud.sdk: INFO}'&lt;BR /&gt;
    JBP_CONFIG_SAPJVM_MEMORY_SIZES: 'metaspace:128m..'&lt;BR /&gt;
    xsuaa_connectivity_instance_name: "&amp;lt;xsuaa name&amp;gt;"&lt;BR /&gt;
  services:&lt;BR /&gt;
  - &amp;lt;destination name&amp;gt;&lt;BR /&gt;
  - &amp;lt;xsuaa name&amp;gt;&lt;BR /&gt;
  - &amp;lt;connectivity name&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Create "&amp;lt;project root&amp;gt;/application/src/main/java/com/sap/cloud/sdk/RfcServlet.java".&amp;nbsp; Please replace from &amp;lt;destination name&amp;gt; to your destination name.&amp;nbsp; The servlet receive "name" url parameter, which is function module name.&amp;nbsp; If there is no "name" parameter, "RFC PING" is called.&lt;BR /&gt;
&lt;BR /&gt;
I haven't implemented security in this Java App, so the app can be called without App Router though it fails.&amp;nbsp; I posted about the security implementation in &lt;A href="https://blogs.sap.com/2020/05/01/app-router-xsuaa%E3%81%A8java-application%E9%96%8B%E7%99%BA/" target="_blank" rel="noopener noreferrer"&gt;another article&lt;/A&gt;, though it is in Japanese.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;package com.sap.cloud.sdk;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
import com.google.gson.Gson;&lt;BR /&gt;
import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;&lt;BR /&gt;
import com.sap.cloud.sdk.cloudplatform.connectivity.DestinationAccessor;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.exception.RequestExecutionException;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.RfmRequest;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.RfmRequestResult;&lt;BR /&gt;
import org.slf4j.Logger;&lt;BR /&gt;
import org.slf4j.LoggerFactory;&lt;BR /&gt;
&lt;BR /&gt;
import javax.servlet.annotation.WebServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServletRequest;&lt;BR /&gt;
import javax.servlet.http.HttpServletResponse;&lt;BR /&gt;
import java.io.IOException;&lt;BR /&gt;
&lt;BR /&gt;
@WebServlet("/rfc")&lt;BR /&gt;
public class RfcServlet extends HttpServlet {&lt;BR /&gt;
    private static final long serialVersionUID = 1L;&lt;BR /&gt;
    private static final Logger logger = LoggerFactory.getLogger(RfcServlet.class);&lt;BR /&gt;
    private static final Destination destinationRfc =&lt;BR /&gt;
            DestinationAccessor.getDestination("&amp;lt;destination name&amp;gt;");&lt;BR /&gt;
&lt;BR /&gt;
    @Override&lt;BR /&gt;
    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)&lt;BR /&gt;
            throws IOException {&lt;BR /&gt;
&lt;BR /&gt;
        logger.info("Start get method: " + request.getRequestURI());&lt;BR /&gt;
        String parameter = request.getParameter("name");&lt;BR /&gt;
        logger.info("Get parameter 'name': " + parameter);&lt;BR /&gt;
        if (parameter == null) {&lt;BR /&gt;
            parameter = "RFCPING";&lt;BR /&gt;
        }&lt;BR /&gt;
        Iterable names = destinationRfc.getPropertyNames();&lt;BR /&gt;
        logger.info(new Gson().toJson(names));&lt;BR /&gt;
&lt;BR /&gt;
        try {&lt;BR /&gt;
            final RfmRequestResult rfmTest = new RfmRequest(parameter, false) //false is for non-commit&lt;BR /&gt;
                    .execute(destinationRfc);&lt;BR /&gt;
            response.setContentType("application/json");&lt;BR /&gt;
            response.setCharacterEncoding("UTF-8");&lt;BR /&gt;
            response.getWriter().write(new Gson().toJson(rfmTest));&lt;BR /&gt;
        } catch (RequestExecutionException e) {&lt;BR /&gt;
            e.printStackTrace();&lt;BR /&gt;
        }&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Finally, build and deploy the Java application.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;# from application directory&lt;BR /&gt;
mvn clean package &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; cf push&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H1 id="toc-hId-2133651741"&gt;Result&lt;/H1&gt;&lt;BR /&gt;
When I open the Java Application via App router, then result is like this.&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://&amp;lt;App" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://&amp;lt;App&lt;/A&gt; Router route host name&amp;gt;.&amp;lt;App Router route domain&amp;gt;/rfc?name=RFC_TEST_EXTERNAL&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/30.result01-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
There are many words "Error" on the screen. but actually it is not errors.&amp;nbsp; It just displays error mapping information.&lt;BR /&gt;
&lt;BR /&gt;
If you access the app without App router, Internal Server Error occurs.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-call-function-modules-using-sap-cloud-sdk-for-java/ba-p/13439653"/>
    <published>2020-05-08T07:21:21+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-sdk%E3%81%AErfmrequest%E3%81%A7rfc%E3%82%92%E8%A9%A6%E3%81%99-bapi%E3%82%82/ba-p/13445153</id>
    <title>SAP Cloud SDKのRfmRequestでRFCを試す(BAPIも)</title>
    <updated>2020-05-11T11:07:53+02:00</updated>
    <author>
      <name>Fukuhara</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44116</uri>
    </author>
    <content>SAP Cloud SDK for Javaで&lt;A href="https://help.sap.com/doc/b579bf8578954412aea2b458e8452201/1.0/en-US/com/sap/cloud/sdk/s4hana/connectivity/rfc/RfmRequest.html" target="_blank" rel="noopener noreferrer"&gt;RfmRequest&lt;/A&gt;を使ってRFCを試してみました。メモ程度の簡単な内容ですが投稿します。&lt;BR /&gt;
&lt;BR /&gt;
基本的なRFCのやり方は別記事&lt;A href="https://blogs.sap.com/2020/05/08/how-to-call-function-modules-using-sap-cloud-sdk-for-java/" target="_blank" rel="noopener noreferrer"&gt;「How to call function modules using SAP Cloud SDK for Java」&lt;/A&gt;を参照ください。&lt;BR /&gt;
&lt;H1 id="toc-hId-803500509"&gt;環境&lt;/H1&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cloud SDK for Java: 3.19.1&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;NetWeaver ABAP 7.53 SP0&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Java Buildpack version: sap java build pack 1.25.0&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-606987004"&gt;開発内容&lt;/H1&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-539556218"&gt;ABAP側RFM&lt;/H2&gt;&lt;BR /&gt;
いろいろなパラメータを試して見るべく、リモート呼出可能な汎用モジュールを登録。&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;FUNCTION y_348221_test01_rfc .&lt;BR /&gt;
*"----------------------------------------------------------------------&lt;BR /&gt;
*"*"ローカルインタフェース:&lt;BR /&gt;
*"  IMPORTING&lt;BR /&gt;
*"     VALUE(IV_NUM) TYPE  I DEFAULT 1&lt;BR /&gt;
*"     VALUE(IS_TEST) TYPE  YS348221_TEST00 OPTIONAL&lt;BR /&gt;
*"     VALUE(IT_TEST) TYPE  YT348221_TEST00 OPTIONAL&lt;BR /&gt;
*"  EXPORTING&lt;BR /&gt;
*"     VALUE(EV_NUM) TYPE  I&lt;BR /&gt;
*"     VALUE(ES_TEST) TYPE  YS348221_TEST00&lt;BR /&gt;
*"     VALUE(ET_TEST) TYPE  YT348221_TEST00&lt;BR /&gt;
*"  TABLES&lt;BR /&gt;
*"      ET_RETURN STRUCTURE  BAPIRET2 OPTIONAL&lt;BR /&gt;
*"  CHANGING&lt;BR /&gt;
*"     VALUE(CV_NUM) TYPE  I DEFAULT 10&lt;BR /&gt;
*"     VALUE(CS_TEST) TYPE  YS348221_TEST00 OPTIONAL&lt;BR /&gt;
*"     VALUE(CT_TEST) TYPE  YT348221_TEST00 OPTIONAL&lt;BR /&gt;
*"----------------------------------------------------------------------&lt;BR /&gt;
&lt;BR /&gt;
  ev_num = iv_num + 1.&lt;BR /&gt;
  cv_num = cv_num + 1.&lt;BR /&gt;
&lt;BR /&gt;
  es_test = is_test.&lt;BR /&gt;
  es_test-yyint4 = es_test-yyint4 + 1.&lt;BR /&gt;
  es_test-yydate = sy-datum.&lt;BR /&gt;
  es_test-yytime = sy-uzeit.&lt;BR /&gt;
&lt;BR /&gt;
  cs_test-yyint4 = cs_test-yyint4 + 1.&lt;BR /&gt;
  cs_test-yydate = sy-datum + 10.&lt;BR /&gt;
  cs_test-yytime = sy-uzeit + 10.&lt;BR /&gt;
&lt;BR /&gt;
  APPEND es_test TO et_test.&lt;BR /&gt;
  APPEND cs_test TO ct_test.&lt;BR /&gt;
&lt;BR /&gt;
  DATA lt_return TYPE bapiret2_t.&lt;BR /&gt;
&lt;BR /&gt;
  MESSAGE e001(00) WITH 'error v1' 'error v2' 'error v3' 'error v4' INTO DATA(lv_dummy).&lt;BR /&gt;
&lt;BR /&gt;
  CALL FUNCTION 'ISU_CRM_IL_BAPIRET2_FILL'&lt;BR /&gt;
    CHANGING&lt;BR /&gt;
      ct_msg = lt_return.&lt;BR /&gt;
&lt;BR /&gt;
  MESSAGE i001(00) WITH 'info v1' 'info v2' 'info v3' 'info v4' INTO lv_dummy.&lt;BR /&gt;
&lt;BR /&gt;
  CALL FUNCTION 'ISU_CRM_IL_BAPIRET2_FILL'&lt;BR /&gt;
    CHANGING&lt;BR /&gt;
      ct_msg = lt_return.&lt;BR /&gt;
&lt;BR /&gt;
  MESSAGE s001(00) WITH 'success v1' 'success v2' 'success v3' 'success v4' INTO lv_dummy.&lt;BR /&gt;
&lt;BR /&gt;
  CALL FUNCTION 'ISU_CRM_IL_BAPIRET2_FILL'&lt;BR /&gt;
    CHANGING&lt;BR /&gt;
      ct_msg = lt_return.&lt;BR /&gt;
&lt;BR /&gt;
  et_return[] = lt_return.&lt;BR /&gt;
&lt;BR /&gt;
ENDFUNCTION.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
参照する型YS348221_TEST00は構造で、いろいろなデータ型を含めたのですが、3つくらいしか試していません。時間がなかったからです。&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/types.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
型YT348221_TEST00は構造YT348221_TEST00のテーブルデータ型です。&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-343042713"&gt;Java開発&lt;/H2&gt;&lt;BR /&gt;
Java側のサーブレットはこんなコード。&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;package com.sap.cloud.sdk;&lt;BR /&gt;
&lt;BR /&gt;
import com.google.gson.Gson;&lt;BR /&gt;
import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;&lt;BR /&gt;
import com.sap.cloud.sdk.cloudplatform.connectivity.DestinationAccessor;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.exception.RequestExecutionException;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.Fields;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.Table;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.RfmRequest;&lt;BR /&gt;
import com.sap.cloud.sdk.s4hana.connectivity.rfc.RfmRequestResult;&lt;BR /&gt;
import org.slf4j.Logger;&lt;BR /&gt;
import org.slf4j.LoggerFactory;&lt;BR /&gt;
&lt;BR /&gt;
import javax.servlet.annotation.WebServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServletRequest;&lt;BR /&gt;
import javax.servlet.http.HttpServletResponse;&lt;BR /&gt;
import java.io.IOException;&lt;BR /&gt;
&lt;BR /&gt;
@WebServlet("/rfc")&lt;BR /&gt;
public class RfcServlet extends HttpServlet {&lt;BR /&gt;
    private static final long serialVersionUID = 1L;&lt;BR /&gt;
    private static final Logger logger = LoggerFactory.getLogger(RfcServlet.class);&lt;BR /&gt;
    private static final Destination destinationRfc =&lt;BR /&gt;
            DestinationAccessor.getDestination("Erp1809Rfc");&lt;BR /&gt;
&lt;BR /&gt;
    @Override&lt;BR /&gt;
    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)&lt;BR /&gt;
            throws IOException {&lt;BR /&gt;
&lt;BR /&gt;
        logger.info("Start get method: " + request.getRequestURI());&lt;BR /&gt;
        Fields inStructure = new Fields();&lt;BR /&gt;
        inStructure.field("YYINT4", "I", 12);&lt;BR /&gt;
        Fields exStructure = new Fields();&lt;BR /&gt;
        Fields chStructure = new Fields();&lt;BR /&gt;
        chStructure.field("YYINT4", "I", 4);&lt;BR /&gt;
&lt;BR /&gt;
        try {&lt;BR /&gt;
            RfmRequest rfmRequest = new RfmRequest("Y_348221_TEST01_RFC", false)&lt;BR /&gt;
                    .withExporting("IV_NUM", "I", 10)&lt;BR /&gt;
                    .withExportingFields("IS_TEST", "YS348221_TEST00", inStructure)&lt;BR /&gt;
                    .withImporting("EV_NUM", "I", 0)&lt;BR /&gt;
                    .withImportingFields("ES_TEST", "YS348221_TEST00", exStructure)&lt;BR /&gt;
                    .withImportingTable("ET_TEST", "YT348221_TEST00").end()&lt;BR /&gt;
                    .withChanging("CV_NUM", "I", 0)&lt;BR /&gt;
                    .withChangingFields("CS_TEST", "YS348221_TEST00", chStructure)&lt;BR /&gt;
                    .withTableAsReturn("ET_RETURN", "BAPIRET2")&lt;BR /&gt;
                    .ignoringErrors();  //ignoringErrorsをしておかないとエラーでExceptionに行く&lt;BR /&gt;
&lt;BR /&gt;
            Table&amp;lt;RfmRequest&amp;gt; exTable = rfmRequest.withExportingTable("IT_TEST", "YS348221_TEST00");&lt;BR /&gt;
            exTable.row().field("YYINT4", "I", 9)&lt;BR /&gt;
                         .field("YYCHAR10", "C", "ABC");&lt;BR /&gt;
            Table&amp;lt;RfmRequest&amp;gt; chTable = rfmRequest.withChangingTable("CT_TEST", "YS348221_TEST00");&lt;BR /&gt;
            chTable.row().field("YYINT4", "I", 14)&lt;BR /&gt;
                    .field("YYCHAR10", "C", "ABCDE");&lt;BR /&gt;
&lt;BR /&gt;
            final RfmRequestResult rfmTest = rfmRequest.execute(destinationRfc);&lt;BR /&gt;
&lt;BR /&gt;
            response.setContentType("application/json");&lt;BR /&gt;
            response.setCharacterEncoding("UTF-8");&lt;BR /&gt;
            response.getWriter().write("IV_NUM: " + String.valueOf(rfmTest.get("IV_NUM")) + "\n");&lt;BR /&gt;
            response.getWriter().write("EV_NUM: " + String.valueOf(rfmTest.get("EV_NUM")) + "\n");&lt;BR /&gt;
            response.getWriter().write("CV_NUM: " + String.valueOf(rfmTest.get("CV_NUM")) + "\n");&lt;BR /&gt;
            response.getWriter().write("IS_TEST: " + rfmTest.get("IS_TEST").toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("ES_TEST: " + rfmTest.get("ES_TEST").toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("CS_TEST: " + rfmTest.get("CS_TEST").toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("IS_TEST-YYINT4: " + String.valueOf(rfmTest.get("IS_TEST").getAsObject().get("YYINT4")) + "\n");&lt;BR /&gt;
            response.getWriter().write("ES_TEST-YYINT4: " + String.valueOf(rfmTest.get("ES_TEST").getAsObject().get("YYINT4")) + "\n");&lt;BR /&gt;
            response.getWriter().write("CS_TEST-YYINT4: " + String.valueOf(rfmTest.get("CS_TEST").getAsObject().get("YYINT4")) + "\n");&lt;BR /&gt;
            response.getWriter().write("IT_TEST: " + rfmTest.get("IT_TEST").getAsCollection().toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("ET_TEST: " + rfmTest.get("ET_TEST").getAsCollection().toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("CT_TEST: " + rfmTest.get("CT_TEST").getAsCollection().toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("Error Message: " + rfmTest.getErrorMessages().toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("Information Message: " + rfmTest.getInformationMessages().toString() + "\n");&lt;BR /&gt;
            response.getWriter().write("Success Message: " + rfmTest.getSuccessMessages().toString() + "\n");&lt;BR /&gt;
&lt;BR /&gt;
        } catch (RequestExecutionException e) {&lt;BR /&gt;
            response.setContentType("application/json");&lt;BR /&gt;
            response.setCharacterEncoding("UTF-8");&lt;BR /&gt;
            response.getWriter().write(new Gson().toJson(e));&lt;BR /&gt;
            e.printStackTrace();&lt;BR /&gt;
        }&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-17446489"&gt;実行結果&lt;/H1&gt;&lt;BR /&gt;
呼び出したときのブラウザに表示される結果はこんな感じです。&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;IV_NUM: GsonResultPrimitive(jsonPrimitive=10)&lt;BR /&gt;
EV_NUM: GsonResultPrimitive(jsonPrimitive=11)&lt;BR /&gt;
CV_NUM: GsonResultPrimitive(jsonPrimitive=1)&lt;BR /&gt;
IS_TEST: GsonResultObject(jsonObject={"YYINT4":12,"YYCHAR10":"","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":null,"YYTIME":"19700101 000000"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))&lt;BR /&gt;
ES_TEST: GsonResultObject(jsonObject={"YYINT4":13,"YYCHAR10":"","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":"20200511 000000","YYTIME":"19700101 085007"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))&lt;BR /&gt;
CS_TEST: GsonResultObject(jsonObject={"YYINT4":5,"YYCHAR10":"","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":"20200521 000000","YYTIME":"19700101 085017"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))&lt;BR /&gt;
IS_TEST-YYINT4: GsonResultPrimitive(jsonPrimitive=12)&lt;BR /&gt;
ES_TEST-YYINT4: GsonResultPrimitive(jsonPrimitive=13)&lt;BR /&gt;
CS_TEST-YYINT4: GsonResultPrimitive(jsonPrimitive=5)&lt;BR /&gt;
IT_TEST: DefaultResultCollection(resultElements=[GsonResultObject(jsonObject={"YYINT4":9,"YYCHAR10":"ABC","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":null,"YYTIME":"19700101 000000"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))])&lt;BR /&gt;
ET_TEST: DefaultResultCollection(resultElements=[GsonResultObject(jsonObject={"YYINT4":13,"YYCHAR10":"","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":"20200511 000000","YYTIME":"19700101 085007"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))])&lt;BR /&gt;
CT_TEST: DefaultResultCollection(resultElements=[GsonResultObject(jsonObject={"YYINT4":14,"YYCHAR10":"ABCDE","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":null,"YYTIME":"19700101 000000"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a)), GsonResultObject(jsonObject={"YYINT4":5,"YYCHAR10":"","YYQUAN":0.00,"YYUNIT":"","YYCURR":0.00,"YYCUKY":"","YYDATE":"20200521 000000","YYTIME":"19700101 085017"}, resultElementFactory=GsonResultElementFactory(gsonBuilder=com.google.gson.GsonBuilder@2d7d1b5a))])&lt;BR /&gt;
Error Message: [RemoteFunctionMessage(messageType=E, messageClass=00, messageNumber=001, messageText=error v1error v2error v3error v4)]&lt;BR /&gt;
Information Message: [RemoteFunctionMessage(messageType=I, messageClass=00, messageNumber=001, messageText=info v1info v2info v3info v4)]&lt;BR /&gt;
Success Message: [RemoteFunctionMessage(messageType=S, messageClass=00, messageNumber=001, messageText=success v1success v2success v3success v4)]&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
ちなみに、こんな書き方で値だけを取り出すことができます。&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;response.getWriter().write(rfmTest.get("RFCSI_EXPORT").getAsObject().get("RFCKERNRL").asString());&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
また、私がよくやる書き方のこいつをやるとエラーがよく起きます。原因をわすれてしまったのですが、構造/テーブル型のパラメータがある場合にエラーとなっている記憶があります。&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;response.getWriter().write(new Gson().toJson(rfmTest));&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--49984297"&gt;BAPIの場合(2020/7/16追加)&lt;/H2&gt;&lt;BR /&gt;
RFMではなく、BAPIの場合は、使うクラスこそ変わるものの使い方は大差ないです。&lt;BR /&gt;
&lt;BR /&gt;
以下は、順にユーザロック解除、ユーザ変更BAPIを呼び出す場合です。&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;        final BapiRequestResult bapiResult = new BapiRequest("BAPI_USER_UNLOCK", false)&lt;BR /&gt;
                .withExporting("USERNAME", "C", userId)  //userID becomes upper case in BAPI&lt;BR /&gt;
                .withTableAsReturn("RETURN", "BAPIRET2")&lt;BR /&gt;
                .execute(destinationRfc);&lt;BR /&gt;
&lt;BR /&gt;
        logger.debug("-----------BAPI Result---------");&lt;BR /&gt;
        logger.info(bapiResult.toString());&lt;BR /&gt;
        logger.debug(bapiResult.getSuccessMessages().get(0).getMessageText());&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;        final BapiRequestResult bapiResult = new BapiRequest("BAPI_USER_CHANGE", false) //commit triggered inside bapi&lt;BR /&gt;
                .withExporting("USERNAME", "C", userId)  //userID becomes upper case in BAPI&lt;BR /&gt;
                .withExportingFields("PASSWORD", "BAPIPWD", password)&lt;BR /&gt;
                .withExportingFields("PASSWORDX", "BAPIPWDX", passwordChange)&lt;BR /&gt;
                //.withExporting("GENERATE_PWD", "C", "X")  //&lt;BR /&gt;
                .withTableAsReturn("RETURN", "BAPIRET2")&lt;BR /&gt;
                .execute(destinationRfc);&lt;/CODE&gt;&lt;/PRE&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-sdk%E3%81%AErfmrequest%E3%81%A7rfc%E3%82%92%E8%A9%A6%E3%81%99-bapi%E3%82%82/ba-p/13445153"/>
    <published>2020-05-11T11:07:53+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/connect-to-sap-netweaver-in-a-jupyter-notebook-using-i-ohja/ba-p/13441148</id>
    <title>Connect to SAP Netweaver in a Jupyter notebook using i-OhJa</title>
    <updated>2020-05-31T22:38:21+02:00</updated>
    <author>
      <name>ronald_schertle</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/595539</uri>
    </author>
    <content>&lt;H1 id="toc-hId-803381319"&gt;Introduction&lt;/H1&gt;&lt;BR /&gt;
In this blog post I want to show how to use our solution called i-OhJa for connecting to SAP Netweaver based systems in Jupyter notebooks.&lt;BR /&gt;
i-OhJa is a solution based on the SAP &lt;STRONG&gt;J&lt;/STRONG&gt;ava &lt;STRONG&gt;Co&lt;/STRONG&gt;nnector for being able to interact with SAP Netweaver systems in the application layer. It is written in the Scala programming language and provides wrapper classes for all the basic JCo classes. In addition to that it contains SAP modules specific libraries, servers, conversion and SerDe libraries for different formats and a lot more.&lt;BR /&gt;
In the following I will show how to use Jupyter notebooks together with i-OhJa to directly interact with an SAP Netweaver system by using the i-OhJa client library and by setting up a simple server instance for getting data in a more stream-oriented way.&lt;BR /&gt;
Jupyter notebook is a common tool for data scientists to create and share documents, code and reports. We will use the Almond kernel here to execute Scala code directly in Jupyter notebook.&lt;BR /&gt;
&lt;H1 id="toc-hId-606867814"&gt;Prerequisites&lt;/H1&gt;&lt;BR /&gt;
Local installation and usage of python and Jupyter notebook is straight forward and well described on the web. In addition to that you need to install the Almond kernel and download the SAP Java Connector native library (.dll/.so) and Java archive (.jar) from SAP marketplace.&lt;BR /&gt;
&lt;H1 id="toc-hId-410354309"&gt;Client connection&lt;/H1&gt;&lt;BR /&gt;
i-OhJa includes a SAP BW client library and we will use it to download time tracking data from a BW &lt;STRONG&gt;D&lt;/STRONG&gt;ata&lt;STRONG&gt;S&lt;/STRONG&gt;tore&lt;STRONG&gt;O&lt;/STRONG&gt;bject. At the end we will aggregate the times per person and display it in a nice and simple bar chart. This will be achieved by implementing the following steps in a Scala notebook:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Load all necessary libraries&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Setting up the client connection to a SAP system&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Query for time tracking data stored in a standard DSO&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Aggregate the data and display it in a Vegas bar chart&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-213840804"&gt;Data streams&lt;/H1&gt;&lt;BR /&gt;
Getting data as a continuous stream from a SAP system requires to set up a server instance in the notebook itself. In the example shown here we will start a simple server instance that will listen on incoming RFCs issued by a SAP system. The RFC function we will use has a simple signature that allows to send a text together with a timestamp. This function module will be used in a simple ABAP report to send a ‘Hello World’ together with the current timestamp in a loop of 20 iterations to the running i-OhJa server instance in Jupyter.&lt;BR /&gt;
&lt;BR /&gt;
Figure: ZHELLOWORLD RFC function module&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/ZHelloworld_fuba.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
*&amp;amp;&amp;nbsp;Report&amp;nbsp;&amp;nbsp;ZHELLOWORLD&lt;BR /&gt;
*&amp;amp;&lt;BR /&gt;
*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
*&amp;amp;&lt;BR /&gt;
*&amp;amp;&lt;BR /&gt;
*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
REPORT&amp;nbsp;zhelloworld.&lt;BR /&gt;
&lt;BR /&gt;
DATA:&amp;nbsp;lv_timestamp&amp;nbsp;TYPE&amp;nbsp;timestampl.&lt;BR /&gt;
&lt;BR /&gt;
DO&amp;nbsp;20&amp;nbsp;TIMES.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;GET&amp;nbsp;TIME&amp;nbsp;STAMP&amp;nbsp;FIELD&amp;nbsp;lv_timestamp.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;CALL&amp;nbsp;FUNCTION&amp;nbsp;'ZHELLOWORLD'&amp;nbsp;DESTINATION&amp;nbsp;'JCO_TEST'&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EXPORTING&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iv_text&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&amp;nbsp;'Hello&amp;nbsp;World'&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iv_timestamp&amp;nbsp;=&amp;nbsp;lv_timestamp.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&amp;nbsp;WAIT&amp;nbsp;UP&amp;nbsp;TO&amp;nbsp;10&amp;nbsp;SECONDS.&lt;BR /&gt;
&lt;BR /&gt;
ENDDO.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId-17327299"&gt;Notebook implementation&lt;/H1&gt;&lt;BR /&gt;
The following notebook includes the implementation for both scenarios described above.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/05/Jupyter_ohja-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Almond runs on Ammonite REPL that allows to load managed and unmanaged java archives during runtime. We used it to load the dependencies mentioned in the prerequisites.&lt;BR /&gt;
&lt;BR /&gt;
Setting up a connection to a SAP system requires to provide some property values like hostname, username and password. This can be done by setting up a secured network connection and single sign on, by implementing a custom destination provider service or by simply passing the properties in the notebook itself.&lt;BR /&gt;
&lt;BR /&gt;
As you can see in paragraph “Get DSO data” it just takes some seconds to set up the connection to the SAP system and to download a set of nearly 250.000 records. In this simple example we chose to select only two columns: personnel number and duration.&lt;BR /&gt;
&lt;BR /&gt;
In the last paragraph of the notebook we run a server listening on "Hello World" requests and printing out the request instances in a human readable html format. Almond allows to update the output of a cell and we used this to display only the current requests of the stream. The output will be updated as soon as a new request arrive, which will be the case every 10 seconds.&lt;BR /&gt;
&lt;H1 id="toc-hId--179186206"&gt;Summary&lt;/H1&gt;&lt;BR /&gt;
Jupyter notebook together with i-OhJa provide a simple and yet powerful solution to interactively query and process data coming directly from a SAP Netweaver system. Data Scientists can make use of this solution to build rich reports and dashboards or prototypes on productive data in SAP. The i-OhJa server scenario furthermore enables to display and plot data flowing in as streams in real time.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/connect-to-sap-netweaver-in-a-jupyter-notebook-using-i-ohja/ba-p/13441148"/>
    <published>2020-05-31T22:38:21+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/a-few-code-snippets-while-developing-an-adt-plugin/ba-p/13452089</id>
    <title>A few code snippets while developing an ADT plugin</title>
    <updated>2020-06-05T16:20:51+02:00</updated>
    <author>
      <name>matt</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/310</uri>
    </author>
    <content>&lt;H2 id="toc-hId-933416514"&gt;Introduction&lt;/H2&gt;&lt;BR /&gt;
I'm busy developing a plug-in for ADT. It sends information about the currently selected class, program, function group etc. to the back-end, where some analysis is done and the results are presented.&lt;BR /&gt;
&lt;BR /&gt;
The plug-in itself is not something that would be useful to publish, as the back-end is something useful only to my client, but I thought some snippets of how I achieved some key tasks might be helpful to others who embark on this journey.&lt;BR /&gt;
&lt;BR /&gt;
These were developed on Eclipse 2020-03 using&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP Core Development Tools 3.10.2&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP Connectivity and Integrations Development Tools 1.120.0&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Eclipse PDE 3.14.300&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
The backend is version 7.31 sp 17.&lt;BR /&gt;
&lt;H2 id="toc-hId-736903009"&gt;Connecting to the backend SAP system (on-premise)&lt;/H2&gt;&lt;BR /&gt;
I wanted to connect to the backend using the same credentials as the ABAP project. My application is launched in the same was as ATC, via "Run as..."&lt;BR /&gt;
&lt;BR /&gt;
For this, I use the org.eclipse.debug.ui.launchShortcuts extension in my PDE project, with a class like this:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;public class LaunchShortcut implements ILaunchShortcut {&lt;BR /&gt;
&lt;BR /&gt;
	@Override&lt;BR /&gt;
	public void launch(ISelection selection, String mode) {&lt;BR /&gt;
		new myAppRunner().runFromSelection(selection);&lt;BR /&gt;
	}&lt;BR /&gt;
&lt;BR /&gt;
	@Override&lt;BR /&gt;
	public void launch(IEditorPart editorPart, String mode) {&lt;BR /&gt;
		if (editorPart instanceof MultiPageEditorPart) {&lt;BR /&gt;
			MultiPageEditorPart editor = (MultiPageEditorPart) editorPart;&lt;BR /&gt;
			new myAppRunner().runFromEditor(editor);&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
To be able to get the project credentials, I'm going to need to get some kind of project object. For the first&amp;nbsp;&lt;EM&gt;launch&lt;/EM&gt; method, I can get it from&amp;nbsp;&lt;EM&gt;selection&lt;/EM&gt;.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;	public void runFromSelection(ISelection selection) {&lt;BR /&gt;
		IProject project = ProjectUtil.getActiveAdtCoreProject(selection, null, null,&lt;BR /&gt;
				IAdtCoreProject.ABAP_PROJECT_NATURE);&lt;BR /&gt;
		if (project == null) {&lt;BR /&gt;
			MessageDialog.openInformation(Display.getCurrent().getActiveShell(), "No selection",&lt;BR /&gt;
					"No ABAP Project selected");&lt;BR /&gt;
		} else {&lt;BR /&gt;
   ...&lt;BR /&gt;
...&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
For the second&amp;nbsp;&lt;EM&gt;launch&lt;/EM&gt; method it turns out that the editor (if it's some kind of ABAP editor), implements &lt;EM&gt;com.sap.adt.project.IProjectProvider&amp;nbsp;&lt;/EM&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;	public void runFromEditor(MultiPageEditorPart editor) {&lt;BR /&gt;
		IProject project = null;&lt;BR /&gt;
		if (editor instanceof IProjectProvider) {&lt;BR /&gt;
			IProjectProvider projectProvider = (IProjectProvider) editor;&lt;BR /&gt;
			project = projectProvider.getProject();&lt;BR /&gt;
		}&lt;BR /&gt;
		if (project == null) {&lt;BR /&gt;
			MessageDialog.openInformation(Display.getCurrent().getActiveShell(), "No selection",&lt;BR /&gt;
					"No ABAP Project selected");&lt;BR /&gt;
		}&lt;BR /&gt;
    ...&lt;BR /&gt;
...&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
From the project, I can get the destination, connect via JCo, and run the RFC enabled function module.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;	private void callBapi(IProject project, ArrayList&amp;lt;MyAppObjectStr&amp;gt; items) {&lt;BR /&gt;
		try {&lt;BR /&gt;
			String destinationId = com.sap.adt.project.AdtCoreProjectServiceFactory.createCoreProjectService()&lt;BR /&gt;
					.getDestinationId(project);&lt;BR /&gt;
			JCoDestination destination = JCoDestinationManager.getDestination(destinationId);&lt;BR /&gt;
&lt;BR /&gt;
			JCoFunction function = destination.getRepository().getFunction("Z_MY_APP");&lt;BR /&gt;
		...&lt;BR /&gt;
 			function.execute(destination);&lt;BR /&gt;
		...&lt;BR /&gt;
		} catch (JCoException | PartInitException e1) {&lt;BR /&gt;
			e1.printStackTrace();&lt;BR /&gt;
		}&lt;BR /&gt;
	}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-540389504"&gt;Determining what I've got&lt;/H2&gt;&lt;BR /&gt;
This took ages. Debugging, going through the classes that make up ADT, testing, trying again and again. Until eventually, I got what I wanted without any nasty yellow (or worse red) messages coming up saying things like not an API, use discouraged - or not allowed at all.&lt;BR /&gt;
&lt;BR /&gt;
Again, I've got the two launch shortcuts - one with an ISelection and one with an IEditorPart&lt;BR /&gt;
&lt;BR /&gt;
selection was quite easy&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;if (selection instanceof ITreeSelection) {                              &lt;BR /&gt;
	ITreeSelection treeSelection = (ITreeSelection) selection;  &lt;BR /&gt;
	ArrayList&amp;lt;myObjects&amp;gt; items = new ArrayList&amp;lt;myObjects&amp;gt;();                                      &lt;BR /&gt;
	for (final Iterator&amp;lt;?&amp;gt; i = treeSelection.iterator(); i.hasNext();) {                              &lt;BR /&gt;
		Object nodeObject = i.next();                                                                 &lt;BR /&gt;
		if (nodeObject instanceof TreeNode) {                                                         &lt;BR /&gt;
			TreeNode node = (TreeNode) nodeObject;                                                    &lt;BR /&gt;
			if (node.getValue() instanceof AdtObjectReference) {                                      &lt;BR /&gt;
				AdtObjectReference value = (AdtObjectReference) node.getValue();                      &lt;BR /&gt;
				myObject item = new myObject();                                                 &lt;BR /&gt;
				item.name = value.getName();   // Name of the class for example                                                       &lt;BR /&gt;
				item.type = value.getType().split("/")[0];  // CLAS/OC for example - I only want the bit before the /                                           &lt;BR /&gt;
				items.add(item);                                                                      &lt;BR /&gt;
			}                                                                                         &lt;BR /&gt;
		}                                                                                &lt;BR /&gt;
	}                                                                                                 &lt;BR /&gt;
}                                                                       &lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
IEditorPart took me a bit longer, until i released that the concrete object that's passed to here is (I think) for every ABAP editor, an implementation of com.sap.adt.tools.core.ui.editors.IAdtFormEditor&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;if (editor instanceof IAdtFormEditor) {&lt;BR /&gt;
	String objectName = editor.getTitle();&lt;BR /&gt;
	IAdtFormEditor formEditor = (IAdtFormEditor) editor;&lt;BR /&gt;
	String objectType = formEditor.getModel().getType();&lt;BR /&gt;
	ArrayList&amp;lt;MyObject&amp;gt; items = new ArrayList&amp;lt;MyObject&amp;gt;();&lt;BR /&gt;
	MyObject myObject = new MyObject();&lt;BR /&gt;
	myObject.name = objectName.split(" ")[1]; // Splitting "SystemID ObjectName"&lt;BR /&gt;
	myObject.type = objectType.split("/")[0]; // Splitting e.g. "CLAS/OC"&lt;BR /&gt;
	items.add(myObject);&lt;BR /&gt;
	...&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-343875999"&gt;Things to do&lt;/H2&gt;&lt;BR /&gt;
1. Ensure the "Run as myapp" option only appears when it's contextually correct&lt;BR /&gt;
&lt;BR /&gt;
2. I'd like to run directly from a launch configuration using the org.eclipse.debug.core.launchConfigurationTypes extension in my PDE project. This would also allow me to run from the Outline of a class, for example.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;public class LaunchConfigurationDelegate implements ILaunchConfigurationDelegate {&lt;BR /&gt;
&lt;BR /&gt;
	@Override&lt;BR /&gt;
	public void launch(ILaunchConfiguration config, String mode, ILaunch launch, IProgressMonitor monitor)&lt;BR /&gt;
			throws CoreException {&lt;BR /&gt;
		monitor.beginTask("Running ...", 0);&lt;BR /&gt;
		new myAppRunner().run(config, launch);&lt;BR /&gt;
		monitor.done();&lt;BR /&gt;
	}&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
What I've not figured out is how to get the current object from&amp;nbsp;&lt;STRONG&gt;config&lt;/STRONG&gt; or&amp;nbsp;&lt;STRONG&gt;launch.&lt;/STRONG&gt; But I have my suspicions it'll all become clear when I get the configuration functionality installed.&lt;BR /&gt;
&lt;BR /&gt;
3. Completely finish my app - but after 2, that's just a question of Eclipse development, not ADT!&lt;BR /&gt;
&lt;H2 id="toc-hId-147362494"&gt;Most irritating aspect&lt;/H2&gt;&lt;BR /&gt;
Obviously, it'd be lovely if we could have a fully documented set of APIs! But it doesn't have to be a stumbling block.&lt;BR /&gt;
&lt;BR /&gt;
No, the most irritating aspect was when I couldn't debug my Java code any more. In the end I resolved it by eliminating Larry Eillison's Java, and replacing it with SAPMachine &lt;A href="https://sap.github.io/SapMachine/" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://sap.github.io/SapMachine/&lt;/A&gt;. That, with a fresh install of the latest Eclipse, PDE and ADT, and everything sprang back to life.&lt;BR /&gt;
&lt;H2 id="toc-hId--49151011"&gt;Thanks&lt;/H2&gt;&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;sebastian.ratz&lt;/SPAN&gt; and &lt;SPAN class="mention-scrubbed"&gt;armin.beil.2&lt;/SPAN&gt; of the ADT development team.&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;christian.drumm&lt;/SPAN&gt; for his blogs on developing plugins&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;andreas.gautsch&lt;/SPAN&gt; for the &lt;A href="https://blogs.sap.com/2019/01/24/abap-code-insight-plugin-inline-code-information-in-eclipse/" target="_blank" rel="noopener noreferrer"&gt;Code Insight&lt;/A&gt; plugin&amp;nbsp; and &lt;A href="https://blogs.sap.com/2018/08/20/abap-continuous-integration-plugin-now-with-plug-and-play/" target="_blank" rel="noopener noreferrer"&gt;ABAP Continuous Improvement&lt;/A&gt; plugin&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;28f4b37a40894f18a22abc696b8154f4&lt;/SPAN&gt; for the &lt;A href="https://blogs.sap.com/2017/07/23/abap-favorites-plugin-for-adt/" target="_blank" rel="noopener noreferrer"&gt;ABAP Favourites&lt;/A&gt; plugin&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="mention-scrubbed"&gt;thomasalexander.ritter&lt;/SPAN&gt; for his response to the blog &lt;A href="https://blogs.sap.com/2014/11/16/extensibility-aint-just-a-13-letter-word/" target="_blank" rel="noopener noreferrer"&gt;&lt;EM&gt;Extensibility Ain’t Just A 13-Letter Word&lt;/EM&gt;&lt;/A&gt;, by "A former member".&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/a-few-code-snippets-while-developing-an-adt-plugin/ba-p/13452089"/>
    <published>2020-06-05T16:20:51+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/data-ingestion-from-sap-hana-cubes-into-sap-analytics-cloud-instalment-1/ba-p/13459475</id>
    <title>Data ingestion from SAP HANA cubes into SAP Analytics Cloud. Instalment 1.</title>
    <updated>2020-06-30T16:49:42+02:00</updated>
    <author>
      <name>quovadis</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/743</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1062711579"&gt;Abstract.&lt;/H3&gt;&lt;BR /&gt;
In this article I would like to share some insight into the data ingestion techniques from SAP HANA cubes into SAP Analytics Cloud data wranglers.&lt;BR /&gt;
&lt;BR /&gt;
When it comes to&amp;nbsp; SAP HANA the focus will be on using different SAP HANA cloud services available on SAP Cloud Platform [SCP] Cloud Foundry [CF].&lt;BR /&gt;
&lt;BR /&gt;
In this instalment, I shall start with SAP PSA (Persistence Service) HANA service on&amp;nbsp; &lt;A href="https://help.sap.com/viewer/a12d484310c847d2bb7ce1f0283cdb1e/Cloud/en-US/d5089968190147ce965e1f7ec29d6f44.html" target="_blank" rel="noopener noreferrer"&gt;Azure&lt;/A&gt; CF.&lt;BR /&gt;
&lt;BR /&gt;
Next will follow the HaaS CF and eventually the tally will culminate with the latest HANA Cloud service on [CF].&lt;BR /&gt;
&lt;BR /&gt;
When it comes to SAP Analytics Cloud the product features I will be making use of are described in the Feature Scope Description (FSD) &lt;A href="https://help.sap.com/viewer/92a4a76cf6ae454cbf55b73df1cc2f3d/release/en-US/26b634b6a5a64b9c9c6867a46c4aeedd.html" target="_blank" rel="noopener noreferrer"&gt;document&lt;/A&gt;.&lt;BR /&gt;
&lt;H3 id="toc-hId-866198074"&gt;Let's go.&lt;/H3&gt;&lt;BR /&gt;
Every analytical tool has its sweet spot. SAP Analytics Cloud [&lt;A href="https://help.sap.com/viewer/product/SAP_ANALYTICS_CLOUD/release/en-US" target="_blank" rel="noopener noreferrer"&gt;SAC&lt;/A&gt;] supports natively &lt;A href="https://help.sap.com/viewer/2d7115b0e0aa4f78bfd9c06fdc1fe4f6/release/en-US/3ac0033a49a649299f060a68013c2bb6.html" target="_blank" rel="noopener noreferrer"&gt;direct&lt;/A&gt; connectivity to a number&amp;nbsp; of SAP Applications as data sources. SAP HANA is one of them.&lt;BR /&gt;
&lt;BR /&gt;
However, it has been brought to my attention that there are use cases where the live connectivity is not &lt;EM&gt;desirable&lt;/EM&gt; especially with business applications that require data be fully vetted and curated at all times and where the content providers need to impose stricter controls over the data/content being delivered to the consumers.&lt;BR /&gt;
&lt;BR /&gt;
The live SAP HANA connection has been an &lt;EM&gt;outspoken&lt;/EM&gt; advantage that SAC has had over its competition.&lt;BR /&gt;
&lt;BR /&gt;
Live or direct connectivity means not only there is no data replication but it also implies a &lt;EM&gt;semantic&lt;/EM&gt; knowledge of the data source.&lt;BR /&gt;
&lt;BR /&gt;
But, and this is maybe of a less common knowledge, with SAC one can create queries and &lt;A href="https://help.sap.com/viewer/2d7115b0e0aa4f78bfd9c06fdc1fe4f6/release/en-US/8fd8c51abff4436dbe4d96a5eca0b914.html" target="_blank" rel="noopener noreferrer"&gt;acquire&lt;/A&gt; data directly from SAP HANA cubes with &lt;EM&gt;no&lt;/EM&gt; ETL tool required.&lt;BR /&gt;
&lt;BR /&gt;
(This resembles a lot the universe/query paradigm found with WebIntelligence for example.)&lt;BR /&gt;
&lt;H4 id="toc-hId-798767288"&gt;How is it possible ?&lt;/H4&gt;&lt;BR /&gt;
SAC sports a long list of so-called acquired data sources. Again, SAP HANA is one of them.&lt;BR /&gt;
&lt;BR /&gt;
SAC is a cloud appliance sitting in its own SAP Cloud Platform [SCP] sub-account (on either Cloud Foundry or SAP Neo).&lt;BR /&gt;
&lt;BR /&gt;
And this is where the SAP Cloud Connector [&lt;A href="https://help.sap.com/viewer/2d7115b0e0aa4f78bfd9c06fdc1fe4f6/release/en-US/cd88cdcbc28d448f9fcb8871e33d0c92.html" target="_blank" rel="noopener noreferrer"&gt;SCC&lt;/A&gt;] comes into the mix as it allows to leverage the cloud to on premise connectivity through the SCP connectivity service.&lt;BR /&gt;
&lt;BR /&gt;
Question. But SCC provides the secure communication tunnel only. So what about the data itself? How do one gets connected to a data source?&lt;BR /&gt;
&lt;BR /&gt;
Answer. That's where the SAC Cloud Agent [&lt;A href="https://help.sap.com/viewer/2d7115b0e0aa4f78bfd9c06fdc1fe4f6/release/en-US/7e521fe163414afaade71f90affd153b.html" target="_blank" rel="noopener noreferrer"&gt;C4A&lt;/A&gt;] comes into play.&lt;BR /&gt;
&lt;BR /&gt;
The C4A is essentially a connectivity &lt;EM&gt;broker&lt;/EM&gt; - "the connection server" - a witty piece of middleware that understands the semantics of the underlying data sources.&lt;BR /&gt;
&lt;BR /&gt;
C4A is provided as a ready-to-deploy &lt;EM&gt;servlet&lt;/EM&gt;. It is best deployed on the on-premise side together with SCC.&lt;BR /&gt;
&lt;H4 id="toc-hId-602253783"&gt;Let's have closer look on how to acquire data from SAP HANA Service (PSA) available on SCP Cloud Foundry on Azure .&lt;/H4&gt;&lt;BR /&gt;
As a quick reminder all SAP HANA services on Cloud Foundry come without application runtime (no XSA). And with the exception of the PSA-based HANA service they do &lt;EM&gt;not&lt;/EM&gt; offer XSC either.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
That makes live connectivity a little bit more cumbersome because it implies the deployment of the HANA Analytical Adapter [&lt;A href="https://tools.hana.ondemand.com/#hanatools" target="_blank" rel="nofollow noopener noreferrer"&gt;HAA&lt;/A&gt;] which is a dedicated java application that implements the SAP Information Access (InA) REST protocol required to establish the live connectivity.&lt;BR /&gt;
&lt;BR /&gt;
But if the data acquisition is a &lt;EM&gt;viable&lt;/EM&gt; option it may help simplify the data ingestion process and help keep the cost low (by eliminating the need of using the CF application runtime for HAA deployment)&lt;BR /&gt;
&lt;H4 id="toc-hId-405740278"&gt;JDBC endpoint&lt;/H4&gt;&lt;BR /&gt;
In a nutshell, all that has to be done is to expose the &lt;EM&gt;jdbc&lt;/EM&gt; SQL endpoint of the SAP HANA service.&lt;BR /&gt;
&lt;BR /&gt;
With PSA HANA Service the jdbc SQL endpoint is already exposed on CF. However, in order to be able to use it one would need to create and bind a CF application to the service first.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;This is beyond the scope of this article but if there is interest from the readers to cover this approach I might do it in one of the next episodes. so please do vote:).&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Alternatively, one can use the &lt;STRONG&gt;SCC&lt;/STRONG&gt; to connect to the &lt;STRONG&gt;CF sub-account&lt;/STRONG&gt; where the HANA PSA-based service has been provisioned to and then create a &lt;A href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/3dc28b456bb64fad89084d2d10af602c.html" target="_blank" rel="noopener noreferrer"&gt;&lt;EM&gt;service channel&lt;/EM&gt; &lt;/A&gt;to the HANA instance.&lt;BR /&gt;
&lt;BR /&gt;
As we have already made use of SCC to enable cloud to on premise connectivity from SAC side we shall re-use the same SCC for the service channel sake.&lt;BR /&gt;
&lt;BR /&gt;
We can create several service channels to the same [tenant] database as depicted below.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;service channels&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
For instance, this is how it looks like with SAP HANA Studio.&lt;BR /&gt;
&lt;BR /&gt;
There are 3 different variants of connections definitions using two different service channels ports (30515 and 30615).&lt;BR /&gt;
&lt;BR /&gt;
It is worth noticing is that all 3 connections point to &lt;EM&gt;one same tenant database&lt;/EM&gt; (the system database is managed by SAP and cannot be accessed via the service)&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import4.png" height="358" width="401" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;SAP HANA Studio&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
OK. From now on one can attempt to create a SAP HANA import connection with SAC.&lt;BR /&gt;
&lt;BR /&gt;
We shall focus on the two following options:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;connect to _SYS_BIC schema&amp;nbsp; and get access to the cubes there [with a "classic" database user]&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;connect to a HDI container and acquire data from the container's cubes [using the user access details from the service key of the HDI container service instance.]&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
The first option may be very convenient; when it comes to migrating from on-premise HANA development into Cloud Foundry universe.&lt;BR /&gt;
&lt;BR /&gt;
The latter (and preferred) option allows to fully unleash the power of hardware deployment infrastructure with the focus on container shipment as opposed to package delivery.&lt;BR /&gt;
&lt;H4 id="toc-hId-209226773"&gt;[_SYS_BIC]&lt;/H4&gt;&lt;BR /&gt;
In order to demonstrate the first approach I uploaded a well known HANA SHINE package into the database.&lt;BR /&gt;
&lt;BR /&gt;
This &lt;EM&gt;mimics&lt;/EM&gt; a typical SAP HANA development paradigm where developers would work on packages that may contain a number of cubes each.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;(on a side note: the data would be loaded into HANA tables either via HANA SDI engine or any other ETL tool (SAP SLT, SAP Data Services, SAP DataHub etc) - this is not in scope of this article)&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-12713268"&gt;Let's try to connect the dots.&lt;/H4&gt;&lt;BR /&gt;
Next step is with SAC and all that has to be done there is to create a new SAP HANA connection. (That may require having an administration profile granted to your SAC user.)&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import7.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Once we have a working connection it is time to create a model [that will contain business information required for story telling.]&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import8.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
You may pick up any cube available for this connection and then build a query to further refine the data you are about to bring into SAC model.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import10.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Once your query is built you will execute it.&lt;BR /&gt;
&lt;BR /&gt;
This will start data acquisition into a new &lt;EM&gt;data wrangler&lt;/EM&gt; that will be securely kept by SAC for a period of up to 7 days:&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--183800237"&gt;Data wrangler&lt;/H4&gt;&lt;BR /&gt;
Data wrangler is an important concept. It holds the acquired data.&lt;BR /&gt;
&lt;BR /&gt;
All the subsequent operations will be performed on the SAC tenant itself.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import11.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Data wrangler&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--380313742"&gt;Data model and smart discovery.&lt;/H4&gt;&lt;BR /&gt;
From now the data can be further curated and eventually a model will be created.&lt;BR /&gt;
&lt;BR /&gt;
The data in the model can be periodically refreshed through scheduling.&lt;BR /&gt;
&lt;BR /&gt;
The model can be used to build stories either manually or automatically leveraging the&amp;nbsp; the smart discovery functionality.&lt;BR /&gt;
&lt;BR /&gt;
For instance you may have decided to run a smart discovery based on &lt;EM&gt;Netamount&lt;/EM&gt; measure.&lt;BR /&gt;
&lt;BR /&gt;
SAC will then generate a story with 4 pages containing the overview, the influencers, the outliers and an interactive simulation page.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/06/import12.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;SmartDiscovery&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
OK. That concludes the part 1. I hope you have enjoyed reading it. Looking forward to comments.&lt;BR /&gt;
&lt;BR /&gt;
best wishes&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Piotr Tesny&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
PS.&lt;BR /&gt;
&lt;BR /&gt;
In the second instalment I shall demonstrate how to import data from an HDI container (option 2 above)</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/data-ingestion-from-sap-hana-cubes-into-sap-analytics-cloud-instalment-1/ba-p/13459475"/>
    <published>2020-06-30T16:49:42+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-cloud-foundry-to-on-premise-rfc-connection-using-jco/ba-p/13467090</id>
    <title>SAP Cloud Foundry To On-Premise RFC Connection Using JCo</title>
    <updated>2020-07-30T12:29:06+02:00</updated>
    <author>
      <name>former_member313918</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/313918</uri>
    </author>
    <content>&lt;BLOCKQUOTE&gt;The SAP Java Connector (SAP JCo) is a development library that enables development of SAP compatible components in Java. It can be used to communicate with on-premise SAP systems via SAP's RFC protocol.&lt;BR /&gt;
&lt;BR /&gt;
(Source: &lt;A href="https://support.sap.com/en/product/connectors/jco.html)" target="test_blank" rel="noopener noreferrer"&gt;https://support.sap.com/en/product/connectors/jco.html)&lt;/A&gt;&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
In this tutorial, we are going to learn how can we call a function module in an on-premise ABAP system by SAP JCo (Inbound).&lt;BR /&gt;
&lt;BR /&gt;
Let’s go step by step.&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 1&lt;/STRONG&gt;: As a starting point, I build a maven web project with the following code:&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;package com.test.jco;&lt;BR /&gt;
&lt;BR /&gt;
import java.io.IOException;&lt;BR /&gt;
import java.io.PrintWriter;&lt;BR /&gt;
import javax.servlet.ServletException;&lt;BR /&gt;
import javax.servlet.annotation.WebServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServlet;&lt;BR /&gt;
import javax.servlet.http.HttpServletRequest;&lt;BR /&gt;
import javax.servlet.http.HttpServletResponse;&lt;BR /&gt;
&lt;BR /&gt;
 &lt;BR /&gt;
import com.sap.conn.jco.JCoDestination;&lt;BR /&gt;
import com.sap.conn.jco.JCoDestinationManager;&lt;BR /&gt;
import com.sap.conn.jco.JCoFunction;&lt;BR /&gt;
import com.sap.conn.jco.JCoParameterList;&lt;BR /&gt;
import com.sap.conn.jco.JCoRepository;&lt;BR /&gt;
&lt;BR /&gt;
 &lt;BR /&gt;
@WebServlet("/ConnectRFC/*")&lt;BR /&gt;
&lt;BR /&gt;
public class ConnectRFC extends HttpServlet {&lt;BR /&gt;
&lt;BR /&gt;
    private static final long serialVersionUID = 1L;&lt;BR /&gt;
&lt;BR /&gt;
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&lt;BR /&gt;
&lt;BR /&gt;
        PrintWriter responseWriter = response.getWriter();&lt;BR /&gt;
&lt;BR /&gt;
        try {&lt;BR /&gt;
&lt;BR /&gt;
            // access the RFC Destination "Test"&lt;BR /&gt;
            JCoDestination destination = JCoDestinationManager.getDestination("Test");&lt;BR /&gt;
&lt;BR /&gt;
            // make an invocation of STFC_CONNECTION in the backend&lt;BR /&gt;
            JCoRepository repo = destination.getRepository();&lt;BR /&gt;
            JCoFunction stfcConnection = repo.getFunction("STFC_CONNECTION");&lt;BR /&gt;
&lt;BR /&gt;
            JCoParameterList imports = stfcConnection.getImportParameterList();&lt;BR /&gt;
            imports.setValue("REQUTEXT", "JCO successful");&lt;BR /&gt;
&lt;BR /&gt;
            stfcConnection.execute(destination);&lt;BR /&gt;
&lt;BR /&gt;
            JCoParameterList exports = stfcConnection.getExportParameterList();&lt;BR /&gt;
            String echotext = exports.getString("ECHOTEXT");&lt;BR /&gt;
            String resptext = exports.getString("RESPTEXT");&lt;BR /&gt;
&lt;BR /&gt;
            responseWriter.println(echotext+":"+resptext);&lt;BR /&gt;
        } catch (Exception e) {&lt;BR /&gt;
&lt;BR /&gt;
            e.printStackTrace();&lt;BR /&gt;
&lt;BR /&gt;
        }&lt;BR /&gt;
&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The explanation goes as follows:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;"Test" is the name of the destination which will be used after a few steps.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;"STFC_CONNECTION" is a standard ABAP function module, which I am using here to test the connectivity.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
Following JCo dependency needs to be included in your project.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;&amp;lt;dependencies&amp;gt;&lt;BR /&gt;
  &amp;lt;dependency&amp;gt;&lt;BR /&gt;
    &amp;lt;groupId&amp;gt;com.sap.cloud&amp;lt;/groupId&amp;gt;&lt;BR /&gt;
    &amp;lt;artifactId&amp;gt;neo-java-web-api&amp;lt;/artifactId&amp;gt;&lt;BR /&gt;
    &amp;lt;version&amp;gt;[3.71.8,4.0.0)&amp;lt;/version&amp;gt;&lt;BR /&gt;
    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;BR /&gt;
  &amp;lt;/dependency&amp;gt;&lt;BR /&gt;
&amp;lt;/dependencies&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 2&lt;/STRONG&gt;: Now we need to log into the SAP CF subaccount, where we want to deploy our application. Here we need to create and bind instances for the following three services:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Connectivity Service&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Destination Service&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;XSUAA service&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
I have created these service instances and named them as following - &lt;STRONG&gt;jco_con , jco_dest, &lt;/STRONG&gt;and&lt;STRONG&gt; jco_xs&lt;/STRONG&gt;. Select the service plan as application and Provide the following configuration in parameters while creating xsuaa instance. Here "connect-rfc" is the app name by which I will deploy my java application in CF.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "xsappname" : "connect-rfc",&lt;BR /&gt;
    "tenant-mode": "dedicated",&lt;BR /&gt;
    "scopes": [&lt;BR /&gt;
        {&lt;BR /&gt;
            "name": "$XSAPPNAME.all",&lt;BR /&gt;
            "description": "all"&lt;BR /&gt;
        }&lt;BR /&gt;
    ]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 3&lt;/STRONG&gt;: Now deploy the war file to the subaccount with the following manifest.yml configuration.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;---&lt;BR /&gt;
&lt;BR /&gt;
applications:&lt;BR /&gt;
&lt;BR /&gt;
 &lt;BR /&gt;
&lt;BR /&gt;
- name: connect-rfc&lt;BR /&gt;
&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
&lt;BR /&gt;
  - sap_java_buildpack&lt;BR /&gt;
&lt;BR /&gt;
  env:&lt;BR /&gt;
&lt;BR /&gt;
    SAP_JWT_TRUST_ACL: '[{"clientid":"*","identityzone":"*"}]'&lt;BR /&gt;
&lt;BR /&gt;
    xsuaa_connectivity_instance_name: "jco_xs"&lt;BR /&gt;
&lt;BR /&gt;
  services:&lt;BR /&gt;
&lt;BR /&gt;
    - jco_xs&lt;BR /&gt;
&lt;BR /&gt;
    - jco_con&lt;BR /&gt;
&lt;BR /&gt;
    - jco_dest&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 4&lt;/STRONG&gt;: Create a node (&lt;EM&gt;approuter )&lt;/EM&gt; ** . Make necessary arrangements into xs-app.json (Point the URL to the destination). Finally, Deploy this in the subaccount with the following manifest.yml configuration.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;---&lt;BR /&gt;
&lt;BR /&gt;
applications:&lt;BR /&gt;
&lt;BR /&gt;
 &lt;BR /&gt;
&lt;BR /&gt;
- name: approuter-jco&lt;BR /&gt;
&lt;BR /&gt;
  path: ./&lt;BR /&gt;
&lt;BR /&gt;
  buildpacks:&lt;BR /&gt;
&lt;BR /&gt;
  - nodejs_buildpack&lt;BR /&gt;
&lt;BR /&gt;
  memory: 120M&lt;BR /&gt;
&lt;BR /&gt;
  env:&lt;BR /&gt;
&lt;BR /&gt;
    NODE_TLS_REJECT_UNAUTHORIZED: 0&lt;BR /&gt;
&lt;BR /&gt;
    destinations: &amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
      [&lt;BR /&gt;
&lt;BR /&gt;
         {"name":"dest", "url" :"https://&amp;lt;your java application url&amp;gt;/ConnectRFC", "forwardAuthToken": true }&lt;BR /&gt;
&lt;BR /&gt;
      ]&lt;BR /&gt;
&lt;BR /&gt;
  services:&lt;BR /&gt;
&lt;BR /&gt;
    - jco_xs​&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
When choosing the application route, you are requested to login. Provide the credentials known by the IdP you configured in&amp;nbsp;&lt;SPAN class="ph uicontrol"&gt;Roles &amp;amp; Trust&lt;/SPAN&gt;. After successful login, you are routed to the java application which is then executed. It prompts an error that destination "Test" does not exist, which is obvious as we didn't create a destination till now.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 5&lt;/STRONG&gt;: Create an RFC destination named "Test" in your destination instance.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 6&lt;/STRONG&gt;: Configure the system mapping and the function module in the&amp;nbsp;&lt;SPAN class="ph pname"&gt;Cloud Connector&lt;/SPAN&gt;. Provide access to the function module "STFC_CONNECTION".&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/1-35.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;cloud connector&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/07/2-20.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;SAP Cloud Platform - CF&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Step 7&lt;/STRONG&gt;: Run approuter, provide the credentials. This time you will receive the output of your Servlet. I received the following output.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;JCO successful:SAP R/3 Rel. 752   Sysid: XXX      Date: 20200725   Time: 110012   Logon_Data: 100/XXXX/E&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;Note : In this tutorial, I used approuter for authentication purpose. You can use AppToAppSSO to propagate authentication token. Token is required for On-Premise connectivity.&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
**Follow the steps in &lt;A class="xref" title="The application router is the single point-of-entry for an application running in the Cloud Foundry environment on SAP Cloud Platform. The application router is used to serve static content, authenticate users, rewrite URLs, and forward or proxy requests to other micro services while propagating user information." href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/01c5f9ba7d6847aaaf069d153b981b51.html" target="_blank" rel="noopener noreferrer"&gt;Application Router&lt;/A&gt;&amp;nbsp;or use the demo file&amp;nbsp;&lt;SPAN class="keyword"&gt;approuter.zip&lt;/SPAN&gt;&amp;nbsp;(&lt;A class="xref" title="https://help.sap.com/http.svc/download?deliverable_id=21564649" href="https://help.sap.com/http.svc/download?deliverable_id=21564649" target="_blank" rel="noopener noreferrer"&gt;download&lt;/A&gt;).&lt;BR /&gt;
&lt;BR /&gt;
With this, I would like to conclude the tutorial. For more details, follow the below links :&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;https://support.sap.com/en/product/connectors/jco.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/e54cc8fbbb571014beb5caaf6aa31280.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/e54cc8fbbb571014beb5caaf6aa31280.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/7e306250e08340f89d6c103e28840f30.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/7e306250e08340f89d6c103e28840f30.html&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-cloud-foundry-to-on-premise-rfc-connection-using-jco/ba-p/13467090"/>
    <published>2020-07-30T12:29:06+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/analytics-agent-on-paraya-glassfish/ba-p/13474152</id>
    <title>Analytics Agent on Paraya Glassfish</title>
    <updated>2020-09-15T11:06:12+02:00</updated>
    <author>
      <name>former_member207606</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/207606</uri>
    </author>
    <content>The SAP Analytics Agent is intended to connect on Premise Systems via the Cloud Connector to SAP Analytics cloud.&lt;BR /&gt;
&lt;BR /&gt;
The agent itself comes as a war file deployable for Apache Tomcat servers.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 100%"&gt;&lt;STRONG&gt;DISCLAIMER&lt;/STRONG&gt;: This is an experimental setup. It is &lt;STRONG&gt;NOT SUPPORTED&lt;/STRONG&gt; and should not be used in a productive environment.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
Despite Tomcat being the most widely used Java application server I recently came across an environment where Tomcat was not available but Glassfish was the Java Server of choice. In this blog I would like to share the results of my experiments.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 100%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
TL;DR&lt;BR /&gt;
&lt;BR /&gt;
The Analytics Agent seems to be running fine on Glassfish too. Only simple queries were used in my experiments - so this is still a very weak statement.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;For this tutorial we need:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;UL style="margin-left: .375in;direction: ltr;margin-top: 0in;margin-bottom: 0in" type="disc"&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;A SAC tennant where we have admin rights&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;An SAP JCO Adapter Version 3 SF 20&amp;nbsp; - search for Java Connector at &lt;A href="https://launchpad.support.sap.com/#/softwarecenter" target="_blank" rel="noopener noreferrer"&gt;https://launchpad.support.sap.com/#/softwarecenter&lt;/A&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;An up and running SAP Cloud Connector with access to the internet&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;The Analytics Agent war file (search via the link above for "analytics agent") - SAP Analytics Cloud Agent 1.0.83 was used here.&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;The Paraya Glassfish 5 Web Application Server (Community Edition) - download via their website&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI style="margin-top: 0;margin-bottom: 0;vertical-align: middle"&gt;&lt;SPAN style="font-family: Calibri;font-size: 11.0pt"&gt;A backend system (here we use BW/4)&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;First we download and install the Paraya Glassfish community edition.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;I will install it on my local machine on Windows 10 which is pretty much just unzipping it to a folder on my local harddrive. I have created a folder &lt;EM&gt;\paraya5&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;Then we copy the JCO files to the Paraya &lt;EM&gt;\lib&lt;/EM&gt; folder &lt;SPAN style="font-size: 11pt"&gt;&lt;EM&gt;payara5\glassfish\lib&lt;/EM&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;and start the server via &lt;EM&gt;&lt;SPAN style="font-size: 11pt"&gt;payara5\glassfish\asadmin.bat&lt;/SPAN&gt;&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;I've had a bit of an issue with my JDK not being picked up - so I made some changes to the config of glassfish &lt;EM&gt;&lt;SPAN style="font-size: 11pt"&gt;payara5\\glassfish\config\asenv.bat to specifically point to the intended JDK.&lt;/SPAN&gt;&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;PRE class="language-c"&gt;&lt;CODE&gt;set AS_JAVA=C:\Program Files\Java\jdk-11&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;padding-left: 80px"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;After starting the Glassfish we can reach the admin console via the URL :&amp;nbsp;&lt;A href="http://127.0.0.1:4848" target="_blank" rel="nofollow noopener noreferrer"&gt;http://127.0.0.1:4848&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;No admin password is required in the default setup.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;Then we deploy the Analytics Agent war file via&amp;nbsp;&lt;EM&gt;Applications-&amp;gt; Deploy &lt;/EM&gt;or the direct link&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard01-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard02.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;The Analytics Agent will start and be available via &lt;A href="http://127.0.0.1:8080" target="_blank" rel="nofollow noopener noreferrer"&gt;http://127.0.0.1:8080&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;Then we need to create an Analytics Agent user to be able to access the just deployed application. We go back to the command line where we started the Paraya Server using asadmin.bat&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;In the admin console we enter:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;PRE class="language-c"&gt;&lt;CODE&gt;asamin&amp;gt; create-file-user --groups Services user1&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;text-align: left"&gt;This will create a user: &lt;EM&gt;user1&lt;/EM&gt; that belongs to the group "&lt;EM&gt;Services&lt;/EM&gt;" then we will be prompted to create a password we will need later&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;text-align: left"&gt;We switch back to the &lt;STRONG&gt;SAC Tennant&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;text-align: left"&gt;&lt;EM&gt;I assume that this is the first CloudConnector connected to SAC&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;text-align: left"&gt;We go to &lt;EM&gt;System-&amp;gt;Administration-&amp;gt;Datasource Configuration&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in 0in 0in 0.375in;font-family: Calibri;font-size: 11pt;text-align: left"&gt;We need to enable CC Connections to the tenant by activating the SAP CP Account. I have added my email address and subsequently the Subaccount number can be seen.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard03.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;We copy this number and go next to our &lt;STRONG&gt;Cloud Connector &lt;/STRONG&gt;administration.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;Here we create a new connection to our SAC Tennant. The quired information can be taken from the previous step in the SAC Tennant. Just make sure that your Subaccount user has the Cloud Connector Admin role.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard04.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;Next we add the connection details to our Glassfish server. I have both the Cloud Connector and Glassfish running on the same machine: So this gives the following configuration:&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard05.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;Make sure to add the URL Path /C4_AGENT/ to the Resources (Path+AllSubPath - see Arrow) or you will get an "access denied" entry in you CC Log files.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;As the next step we go back to the &lt;STRONG&gt;SAC Tennant:&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;To &lt;EM&gt;System-&amp;gt;Administration-&amp;gt;Datasource Configuration a&lt;/EM&gt;nd add an onPremise Datasource&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard06.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;In the Cloud Connector we have configured the "Virtual Host" to be &lt;EM&gt;127.0.0.1&lt;/EM&gt; Port &lt;EM&gt;8080&lt;/EM&gt; and this is the information we put here.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;The user + password is for the Analytics Agent and was previously configured by us via the Glassfish Admin Console (user1 + password)&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="padding-left: 40px"&gt;So we have all the required information to fill in the details for the &lt;EM&gt;Default Location&lt;/EM&gt;:&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard07.jpg" height="504" width="286" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;To configure the connection to the BW/4 System is the last part and is surprisingly done &lt;STRONG&gt;via SAC&lt;/STRONG&gt; and not within the Analytics Agent.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;We go to &lt;EM&gt;System-&amp;gt; Connection&lt;/EM&gt; and &lt;SPAN style="text-decoration: underline"&gt;add a new Connection&lt;/SPAN&gt;:&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard08.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;font-family: Calibri;font-size: 11.0pt"&gt;We add the system details and our BW/4 login credentials (we need the SID, System Number, Client ID, Application Server URL, User Credentials)&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;The server URL needs to be accessible from the Analytics Agent, make sure that no Firewall is blocking the agent from accessing the BW/4 system. There is no need to open the BW/4 system to the internet.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard09.jpg" height="484" width="323" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;Finally we can create a new Model based on the just created Data Connection:&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="margin: 0in;margin-left: .375in;font-family: Calibri;font-size: 11.0pt"&gt;&lt;EM&gt;GetDataFromSource-&amp;gt; BW/4&lt;/EM&gt; and then we select the just created Connection.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US" style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2020/09/Clipboard10-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;From there we can use the model and create a story based on it.&lt;/P&gt;&lt;BR /&gt;
&lt;P lang="en-US"&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/analytics-agent-on-paraya-glassfish/ba-p/13474152"/>
    <published>2020-09-15T11:06:12+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/rfc-gateway-security-part-1-basic-understanding/ba-p/13475684</id>
    <title>RFC Gateway security, part 1 - basic understanding</title>
    <updated>2021-01-26T09:05:26+01:00</updated>
    <author>
      <name>JoeGoerlich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2716</uri>
    </author>
    <content>From my experience the RFC Gateway security is for many SAP Administrators still a not well understood topic. As a result many SAP systems lack for example of proper defined ACLs to prevent malicious use of the RFC Gateway.&lt;BR /&gt;
&lt;BR /&gt;
After an attack vector was published in the talk "SAP Gateway to Heaven" from Mathieu Geli and Dmitry Chastuhin at OPDCA 2019 Dubai (&lt;A href="https://github.com/gelim/sap_ms" target="_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/gelim/sap_ms&lt;/A&gt;) the RFC Gateway security is even more important than ever. This publication got considerable public attention as &lt;STRONG&gt;10KBLAZE&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
With this blogpost series i try to give a comprehensive explanation of the RFC Gateway Security:&lt;BR /&gt;
&lt;BR /&gt;
Part 1: General questions about the RFC Gateway and RFC Gateway security.&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/01/27/rfc-gateway-security-part-2-reginfo-acl/" target="_blank" rel="noopener noreferrer"&gt;Part 2: reginfo ACL in detail.&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/01/29/rfc-gateway-security-part-3-secinfo-acl/" target="_blank" rel="noopener noreferrer"&gt;Part 3: secinfo ACL in detail.&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/02/01/rfc-gateway-security-part-4-prxyinfo-acl/" target="_blank" rel="noopener noreferrer"&gt;Part 4: prxyinfo ACL in detail.&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/02/03/rfc-gateway-security-part-5-acls-and-the-rfc-gateway-security/" target="_blank" rel="noopener noreferrer"&gt;Part 5: Security considerations related to these ACLs.&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/02/05/rfc-gateway-security-part-6-logging/" target="_blank" rel="noopener noreferrer"&gt;Part 6: RFC Gateway Logging.&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2021/11/10/rfc-gateway-security-part-7-secure-communication/" target="_blank" rel="noopener noreferrer"&gt;Part 7: Secure communication&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2023/02/28/rfc-gateway-security-part-8-os-command-execution-using-sapxpg/" target="_blank" rel="noopener noreferrer"&gt;Part 8: OS command execution using sapxpg&lt;/A&gt;&lt;BR /&gt;
&lt;A href="https://blogs.sap.com/2023/03/21/rfc-gateway-security-part-9-enhanced-security-for-sapxpg/" target="_blank" rel="noopener noreferrer"&gt;Part 9: enhanced security for sapxpg&lt;/A&gt;&lt;BR /&gt;
&lt;H6 id="toc-hId-1451689566"&gt;Updates:&lt;/H6&gt;&lt;BR /&gt;
&lt;H6 id="toc-hId-1255176061"&gt;2023-11-15: Added usage type 'extern-to-extern RFC communication with JCo&amp;nbsp;3.x'&lt;BR /&gt;
2023-03-21: Added Part 9: enhanced security for sapxpg&lt;BR /&gt;
2023-02-28: Added Part 8: OS command execution using sapxpg&lt;BR /&gt;
2021-11-10: Added Part 7: Secure communication&lt;/H6&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;HR /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H1 id="toc-hId-413248961"&gt;Basic understanding&lt;/H1&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
In the following i will do the question and answer game to develop a basic understanding of the RFC Gateway, the RFC Gateway security and its related terms.&lt;BR /&gt;
&lt;H2 id="toc-hId-345818175"&gt;What is the RFC Gateway?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway can be seen as a communication middleware. The RFC Gateway act as an RFC Server which enables RFC function modules to be used by RFC clients. It also enables communication between work or server processes of SAP NetWeaver AS and external programs.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;From a technical perspective the RFC Gateway is a SAP kernel process (gwrd, gwrd.exe) running on OS level as user &amp;lt;sapsid&amp;gt;adm.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-149304670"&gt;Where can we find the RFC Gateway?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;There are three places where we can find an RFC Gateway:&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI style="list-style-type: none"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;In SAP NetWeaver Application Server ABAP: Every Application Server has a built-in RFC Gateway.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Ohne-Titel2.png" height="343" width="328" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;In SAP NetWeaver Application Server Java: The SCS instance has a built-in RFC Gateway. &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Ohne-Titel-2.png" height="407" width="342" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The Stand-alone RFC Gateway: As a dedicated RFC Gateway serving for various RFC clients or as an additional component which may be used to extend a SAP NW AS ABAP or AS Java system.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--47208835"&gt;Who can access the RFC Gateway in general&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway is by default reachable via the services 'sapgw&amp;lt;InstNo&amp;gt;' and 'sapgw&amp;lt;InstNo&amp;gt;s' which can be mapped to the ports '33&amp;lt;InstNo&amp;gt;' and '48&amp;lt;InstNo&amp;gt;'. Access to this ports is typically restricted on network level.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;There may also be an ACL in place which controls access on application level. The location of this ACL can be defined by parameter 'gw/acl_file'.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--243722340"&gt;Which usage types are there?&lt;/H2&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;padding-left: 40px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2021/01/Bildschirmfoto-2021-01-25-um-11.24.10-3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;This diagram shows all use-cases except `Proxy to other RFC Gateways´. The subsequent blogs of will describe each individually.&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;'Registered external RFC Servers'&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway allows 'external RFC Server programs' (also known as 'Registered Server' or 'Registered Server Program') to register to itself and allows RFC clients to consume the functions offered by these programs.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;An example would be 'Trex_&amp;lt;SID&amp;gt;_&amp;lt;timestamp&amp;gt;' registered at the RFC Gateway of the SAP NW AS ABAP from the server running SAP TREX and consumed by the same AS ABAP as an RFC client.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Another example would be 'IGS.&amp;lt;SID&amp;gt;' of SAP IGS registered at the RFC Gateway of the SAP NW AS ABAP from the same server as AS ABAP (since it is also part of it) and consumed by the same AS ABAP as an RFC client.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;'Started external RFC Servers'&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway is capable to start programs on the OS level.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Common examples are the program 'tp' for transport management via STMS started on the RFC Gateway host of AS ABAP or the program 'gnetx.exe' for the graphical screen painter started on the SAP GUI client host.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;While typically remote servers start the to-be-registered program on the OS level by themselves, there may be cases where starting a program is used to register a 'Registered Server Program' at the RFC Gateway. In these cases the program started by the RFC Gateway may also be the program which tries to register to the same RFC Gateway.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE style="padding-left: 40px"&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;Please note:&lt;/STRONG&gt; One should be aware that starting a program using the RFC Gateway is an interactive task. This means the call of a program is always waiting for an answer before it times out. If the called program is not an RFC enabled program (compiled with the SAP RFC library) the call will time out, but the program is still left running on the OS level!&lt;BR /&gt;
To overcome this issue the RFC enabled program 'SAPXPG' can be used as a wrapper to call any OS command. This is for example used by AS ABAP when starting external commands using transaction SM49/SM69.&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;'RFC destinations'&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Most common use-case is the SAP-to-SAP communication, in other words communication via RFC connections between SAP NetWeaver AS systems, but also communication from RFC clients using the SAP Java Connector (JCo) or the SAP .NET Connector (NCo) to SAP NetWeaver systems.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway hands over the request from the RFC client to the dispatcher which assigns it to a work process (AS ABAP) or to a server process (AS Java).&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;'Proxy to other RFC Gateways'&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The RFC Gateway can be used to proxy requests to other RFC Gateways.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;'extern-to-extern RFC communication with JCo&amp;nbsp;3.x'&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;As of JCo 3.0.10, there is also a use-case where a JCo based RFC Client communicates via the RFC Gateway with a JCo based registered external RFC server.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;Please note:&lt;/STRONG&gt; For security reasons, this usage type is not recommended. For more details, see &lt;A href="https://me.sap.com/notes/1877907" target="_blank" rel="noopener noreferrer"&gt;SAP Note 1877907&lt;/A&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--440235845"&gt;What about the reginfo ACL?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The reginfo file is holding rules controlling which remote servers (based on their hostname/ip-address) are allowed to either register, access or cancel which 'Registered Server Programs' (based on their program alias (also known as 'TP name')).&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Its location is defined by parameter 'gw/reg_info'.&lt;BR /&gt;
In case of AS ABAP for example it may be defined as '$(DIR_GLOBAL)$(DIR_SEP)security$(DIR_SEP)data$(DIR_SEP)$(FN_REG_INFO)' to make sure all RFC Gateways of the application servers of the same system relay on the same configuration.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--636749350"&gt;What about the secinfo ACL?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The secinfo file is holding rules controlling which programs (based on their executable name or fullpath, if not in $PATH) can be started by which user calling from which host(s) (based on its hostname/ip-address) on which RFC Gateway server(s) (based on their hostname/ip-address).&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Its location is defined by parameter 'gw/sec_info'.&lt;BR /&gt;
In case of AS ABAP for example it may be defined as '$(DIR_GLOBAL)$(DIR_SEP)security$(DIR_SEP)data$(DIR_SEP)$(FN_SEC_INFO)' to make sure all RFC Gateways of the application servers of the same system relay on the same configuration.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--833262855"&gt;How are reginfo and secinfo related?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;As we learnt before the reginfo and secinfo are defining rules for very different use-cases, so they are not related.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--682522003"&gt;What about the prxyinfo ACL?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The prxyinfo file is holding rules controlling which source systems (based on their hostname/ip-address) are allowed to talk to which destination systems (based on their hostname/ip-address) over the current RFC Gateway.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;Its location is defined by parameter 'gw/prxy_info'.&lt;BR /&gt;
In case of AS ABAP for example it may be defined as '$(DIR_GLOBAL)$(DIR_SEP)security$(DIR_SEP)data$(DIR_SEP)$(FN_PRXY_INFO)' to make sure all RFC Gateways of the application servers of the same system relay on the same configuration.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--879035508"&gt;What about the SNC System ACL?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;RFCs between two SAP NetWeaver AS ABAP systems are typically controlled on network level only. The RFC Gateway does not perform any additional security checks.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;When using SNC to secure RFC destinations on AS ABAP the so called 'SNC System ACL', also known as 'System Authentication', is introduced and must be maintained accordingly.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;This ACL is applied on the ABAP layer and is maintained in transaction SNC0.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;Please note:&lt;/STRONG&gt; 'SNC System ACL' is not a feature of the RFC Gateway itself.&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--1075549013"&gt;What about the SNC User ACL?&lt;/H2&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;RFCs between RFC clients using JCo/NCo or Registered Server Programs and the AS ABAP are typically controlled on network level only. The RFC Gateway does not perform any additional security checks.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;When using SNC to secure logon for RFC Clients or Registered Server Programs the so called 'Extended SNC Access Control List (ACL) for Users', also known as 'User Authentication', is introduced. With this, the AS ABAP verifies whether the RFC client is allowed to logon with the combination of username and SNC name sent in the connection attempt. The SNC name taken from the X.509 client certificate is used for the authentication in favor of password based logon.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;This Extended SNC ACL for Users is applied on the ABAP layer and is maintained in table USRACLEXT, for example using transaction SM30.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;The mapping of an SNC name to a user can also be done in transaction SU01. Keep in mind that in SU01 only a 1:1 mapping can be performed while in the table USRACLEXT more than one certificates can be mapped to one user.&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;P style="padding-left: 40px"&gt;&lt;STRONG&gt;Please note:&lt;/STRONG&gt; 'SNC User ACL' is not a feature of the RFC Gateway itself.&lt;/P&gt;&lt;BR /&gt;
&lt;/BLOCKQUOTE&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;HR /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="text-align: right"&gt;&lt;A href="https://blogs.sap.com/2021/01/27/rfc-gateway-security-part-2-reginfo-acl/" target="_blank" rel="noopener noreferrer"&gt;Next --&amp;gt;&lt;/A&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/rfc-gateway-security-part-1-basic-understanding/ba-p/13475684"/>
    <published>2021-01-26T09:05:26+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/sap-build-apps-and-bapis-rfc-meets-web/ba-p/13555549</id>
    <title>SAP Build Apps and BAPIs: RFC meets Web</title>
    <updated>2023-04-02T12:17:56+02:00</updated>
    <author>
      <name>Gunter</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/727</uri>
    </author>
    <content>&lt;H2 id="toc-hId-962139719"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-02-164241.jpg" /&gt;&lt;EM&gt;"RFC meets Web"&lt;/EM&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-894708933"&gt;Enable all your RFC functions for web consumption without development?&lt;/H3&gt;&lt;BR /&gt;
Today, I'm excited to share a new thing: A proxy on SAP BTP that translates from REST to SAP RFC calls, making it possible to use BAPIs and RFC-enabled function modules on &lt;STRONG&gt;older SAP ECC&lt;/STRONG&gt; or S/4HANA systems.&lt;BR /&gt;
&lt;BR /&gt;
This solution is particularly useful for SAP ERP users who are looking to integrate with systems that lack the new OData APIs that are only available on newer S/4HANA systems. With the REST-to-RFC proxy, RFC meets web, creating a seamless integration experience that unlocks the full potential of your SAP ecosystem.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Benefits:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Protect your past investment: Use your function modules for the web&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;RFC modules turned into synchronous REST APIs&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;No further development work&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Secured communication through SAP BTP destinations&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-02-160900-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 1: Outline of solution - it works with any RFC function module (Y/Z-RFC modules included)&lt;/P&gt;&lt;BR /&gt;
In this blog post, we'll take a closer look at how this proxy works, the benefits it provides, and the impact it can have on your SAP integration projects. So, let's dive in and discover the possibilities of web meets RFC!&lt;BR /&gt;
&lt;H2 id="toc-hId-569112709"&gt;Solution approach&lt;/H2&gt;&lt;BR /&gt;
SAP BTP offers the destination service to define ways to connect to systems. Keeping destinations separate from applications makes them reusable and easy to maintain. They come in several flavors like:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;HTTP - for anything like REST, OData-REST, HTML and the like.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;LDAP - Lightweight Directory Access Protocol to lookup information in a network. Often used for organizational data of entities and persons.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;MAIL - to send emails to an SMTP server&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;RFC - Remote Function Call, this is what we look at for the cloud connector-facing side.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
From here we define the first destination to the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector" target="_blank" rel="noopener noreferrer"&gt;cloud connector&lt;/A&gt; (CC) as RFC. You need to white-list the function modules you plan to use in your cloud connector instance.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-02-165040.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 2: Example of an RFC destination. The ashost is as defined in your CC.&lt;/P&gt;&lt;BR /&gt;
I use this destination in the Java HTTPServlet. On the consumption side you'll need another destination that you can use for e.g. SAP Build Apps and which is provided by the HTTPServlet. If you secure it with OAuth2 the config could look like that.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-02-165543.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 3: REST destination for consumption of BAPIs or RFC functions in general.&lt;/P&gt;&lt;BR /&gt;
Since I use xsuaa for authentication and authorization I've defined 2 scopes to allow for display and change authorization.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-02-170311.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 4: POST and GET related scopes to be assigned to relevant users for consumption.&lt;/P&gt;&lt;BR /&gt;
The difference between the two is that the POST will trigger a BAPI.commit and therefore posts data in your S/4HANA or ECC system while the GET doesn't. Of course it depends on how you've designed your ABAP code - standard BAPIs will adhere to this approach.&lt;BR /&gt;
&lt;H2 id="toc-hId-372599204"&gt;SAP Build Apps demo: Change material master&lt;/H2&gt;&lt;BR /&gt;
Enough talk! Let's see a demo built with SAP Build Apps. It uses 3 BAPIs:&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;BAPI_MATERIAL_GETLIST - To search for materials and get them in a list&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;BAPI_MATERIAL_GETALL - To retrieve the details of a selected material&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;BAPI_MATERIAL_SAVEDATA - To change some fields in the material master&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
There is no development done on both backend and frontend.&lt;BR /&gt;
&lt;H3 id="toc-hId-305168418"&gt;1. Mobile application&lt;/H3&gt;&lt;BR /&gt;
&lt;IFRAME id="kaltura_player_1_p5s5dr9z" src="https://sapvideoa35699dc5.hana.ondemand.com/?entry_id=1_2wkpiuv2" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-108654913"&gt;2. SAP Build and S/4HANA Backend&lt;/H3&gt;&lt;BR /&gt;
&lt;IFRAME id="kaltura_player_1_p5s5dr9z" src="https://sapvideoa35699dc5.hana.ondemand.com/?entry_id=1_upydyozz" allowfullscreen="true" webkitallowfullscreen="" mozallowfullscreen="" width="625px" height="360px" frameborder="0"&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--216941311"&gt;Solution Architecture&lt;/H2&gt;&lt;BR /&gt;
Below are the schematics for using the REST to RFC proxy running on BTP Cloud Foundry.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/スクリーンショット-2023-04-01-220657-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 2: Solution architecture for REST-RFC proxy on SAP BTP Cloud Foundry&lt;/P&gt;&lt;BR /&gt;
I'll explain the technical details in a second blog if you are interested to create such a proxy on BTP for yourself.&lt;BR /&gt;
&lt;H2 id="toc-hId--413454816"&gt;Conclusion&lt;/H2&gt;&lt;BR /&gt;
And there it is: A proxy that opens all your RFC developments to the web in a secured manner. Hope it is useful!&lt;BR /&gt;
&lt;BR /&gt;
Check my &lt;A href="https://blogs.sap.com/2023/04/04/rfc-meets-the-web-building-the-proxy/" target="_blank" rel="noopener noreferrer"&gt;second blog&lt;/A&gt; for the technical details on how you can design the proxy on SAP BTP.</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/sap-build-apps-and-bapis-rfc-meets-web/ba-p/13555549"/>
    <published>2023-04-02T12:17:56+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/calling-a-sap-pi-po-rfc-integration-from-java-with-jco-library/ba-p/13578451</id>
    <title>Calling a SAP PI/PO RFC integration from Java with JCo Library</title>
    <updated>2023-09-14T01:24:37+02:00</updated>
    <author>
      <name>rsedatgoc</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/702931</uri>
    </author>
    <content>Hello everyone,&lt;BR /&gt;
&lt;BR /&gt;
We needed to call SAP PI/PO RFC integration with Java according to a customer's need. I was able to call functions from SAP using JCo before, but I had not worked on triggering the SAP PI/PO RFC sender. After some research, I found out how to do it and I wanted to share it with you.&lt;BR /&gt;
&lt;BR /&gt;
Before we write our Java code, we have a small but necessary step to do.&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN class="HwtZe" lang="en"&gt;&lt;SPAN class="HwtZe" lang="en"&gt;&lt;SPAN class="HwtZe" lang="en"&gt;&lt;SPAN class="jCAhz ChMk0b"&gt;&lt;SPAN class="ryNqvb"&gt;First of all, you need to download the JCo driver for your operating system.&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN class="jCAhz ChMk0b"&gt;&lt;SPAN class="ryNqvb"&gt;It is important to review the installation.html page located in the javadoc folder in the driver archive you downloaded.&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN class="jCAhz ChMk0b"&gt;&lt;SPAN class="ryNqvb"&gt;Actions to be taken according to your operating system are written on the HTML page. (&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;SAP JCo Page&lt;/A&gt;)&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;You need to add "&lt;STRONG&gt;jco.allow_non_abap_partner&lt;/STRONG&gt;" parameter to the VM parameter of SAP PI/PO instance. You can review this SNote showing how to add a parameter. (&lt;A href="https://me.sap.com/notes/1729203" target="_blank" rel="noopener noreferrer"&gt;1729203 - Support for communication with external RFC server&lt;/A&gt;)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Next step is create a RFC sender channel. You can create a standart RFC sender channel. But you have to enable Advanced Mode. Also you need to unchecked Verify Sender System parameter.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/verify_sender_system_unchecked-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
My channel looks like;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/rfc_sender_adapter_configuration-1.png" height="439" width="744" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Also we need to create an RFC integration. I imported a function to ESR from SAP which I will call from Java.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/imported_object.png" height="71" width="288" /&gt;&lt;/P&gt;&lt;BR /&gt;
Then I created an ICO with that function.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/rfc_integration.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
If everything is okay, let's start!&lt;BR /&gt;
&lt;BR /&gt;
First, we need to define &lt;STRONG&gt;SAP.jcoDestination&lt;/STRONG&gt; file for Repository. You can fill this template with your SAP system information for &lt;STRONG&gt;SAP.jcoDestination&lt;/STRONG&gt; file.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;jco.client.ashost=sap_application_server_host&lt;BR /&gt;
jco.client.sysnr=sap_system_number&lt;BR /&gt;
jco.client.client=sap_system_client_number&lt;BR /&gt;
jco.client.user=sap_user&lt;BR /&gt;
jco.client.passwd=sap_user_password&lt;BR /&gt;
jco.client.lang=sap_language&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Then, we have to create &lt;STRONG&gt;SAP_PO.jcoDestination&lt;/STRONG&gt; file for communicate with SAP PI/PO. You can fill this template with your PO system information for &lt;STRONG&gt;SAP_PO.jcoDestination&lt;/STRONG&gt; file.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;jco.client.type=E&lt;BR /&gt;
jco.client.gwhost=your_po_host&lt;BR /&gt;
jco.client.gwserv=your_po_gateway&lt;BR /&gt;
jco.client.tpname=PO_RFC_SND&lt;BR /&gt;
jco.destination.repository_destination=repository_file_name&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The &lt;STRONG&gt;jco.client.tpname&lt;/STRONG&gt; parameter represents the Program ID parameter on the RFC sender channel. I write &lt;STRONG&gt;PO_RFC_SND&lt;/STRONG&gt; to the value of this parameter because I write &lt;STRONG&gt;PO_RFC_SND&lt;/STRONG&gt; to the Program ID value in the RFC channel.&lt;BR /&gt;
&lt;BR /&gt;
The value of &lt;STRONG&gt;jco.destination.repository_destination&lt;/STRONG&gt; parameter must be SAP Repository file name. We defined the name of the file as &lt;STRONG&gt;SAP.jcoDestination&lt;/STRONG&gt; in this blog. Therefore, we write &lt;STRONG&gt;SAP&lt;/STRONG&gt; to the value of the jco.destination.repository_destination parameter.&lt;BR /&gt;
&lt;BR /&gt;
After the files are created, your project folder should look like this. (&lt;EM&gt;&lt;STRONG&gt;The .jcoDestination files must be in the same place as your project.&lt;/STRONG&gt; &lt;/EM&gt;)&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/sap_pi_rfc_project_structure.png" height="226" width="402" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Let's code! &lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
First, you have to add sapjco3.jar as external library to your project. If you done, you can continue next step.&lt;BR /&gt;
&lt;BR /&gt;
Define a JCoDestination variable. We have to write SAP_PO in &lt;STRONG&gt;getDestination&lt;/STRONG&gt; method. Because our PO destination configuration file name is &lt;STRONG&gt;SAP_PO.jcoDestination&lt;/STRONG&gt;. (If you named the file differently, use the name you typed. Don't forget! The file extension must be &lt;STRONG&gt;.jcoDestination&lt;/STRONG&gt;. )&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;JCoDestination dest = JCoDestinationManager.getDestination("SAP_PO");&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
We have to define JCoFunction variable. After that, we will use getFunction method with function name which we want to call. I will use "RFC_FUNCTION_SEARCH" function.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;JCoFunction function = dest.getRepository().getFunction("RFC_FUNCTION_SEARCH");&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now, we need to set import parameters of RFC_FUNCTION_SEARCH function. You can see parameters of the function with SE37 tcode in SAP system.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/se37_import.png" height="245" width="491" /&gt;&lt;/P&gt;&lt;BR /&gt;
I can see only FUNCNAME parameter is mandatory. I want to get all Z* named functions from SAP system therefore I assigned "Z*" to the FUNCNAME parameter.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;function.getImportParameterList().setValue("FUNCNAME","Z*");&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I am running the function.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;function.execute(dest);&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
If you want to get result after execute the function, you can do with below code.&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;String result = function.getTableParameterList().toJSON();&lt;BR /&gt;
System.out.println(result);&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Result;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/function_result.png" height="95" width="491" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;package com.example;&lt;BR /&gt;
&lt;BR /&gt;
import com.sap.conn.jco.JCoDestination;&lt;BR /&gt;
import com.sap.conn.jco.JCoDestinationManager;&lt;BR /&gt;
import com.sap.conn.jco.JCoException;&lt;BR /&gt;
import com.sap.conn.jco.JCoFunction;&lt;BR /&gt;
&lt;BR /&gt;
import java.io.IOException;&lt;BR /&gt;
public class Main {&lt;BR /&gt;
&lt;BR /&gt;
	public static void main(String[] args) throws IOException, JCoException {&lt;BR /&gt;
&lt;BR /&gt;
		// Define a JCoDestination variable. We have to write SAP_PO in getDestination method.&lt;BR /&gt;
		// Because our PO destination configuration file name is SAP_PO.jcoDestination.&lt;BR /&gt;
		// (If you named the file differently, use the name you typed. Don't forget! The file extension must be .jcoDestination. )&lt;BR /&gt;
		JCoDestination dest = JCoDestinationManager.getDestination("SAP_PO");&lt;BR /&gt;
&lt;BR /&gt;
		//We can define the function which we want to call. I will use "RFC_FUNCTION_SEARCH" function.&lt;BR /&gt;
		JCoFunction function  = dest.getRepository().getFunction("RFC_FUNCTION_SEARCH");&lt;BR /&gt;
&lt;BR /&gt;
		//Now, we need to set import parameters of RFC_FUNCTION_SEARCH function.&lt;BR /&gt;
		// You can see parameters of the function with SE37 tcode in SAP system.&lt;BR /&gt;
		function.getImportParameterList().setValue("FUNCNAME","Z*");&lt;BR /&gt;
&lt;BR /&gt;
		//Execute the function&lt;BR /&gt;
		function.execute(dest);&lt;BR /&gt;
&lt;BR /&gt;
		//Print result&lt;BR /&gt;
		String result = function.getTableParameterList().toJSON();&lt;BR /&gt;
		System.out.println(result);&lt;BR /&gt;
&lt;BR /&gt;
	}&lt;BR /&gt;
&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
When you call the RFC with Java, you can see the message in Message Monitor.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/rfc_message_monitoring.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1093157915"&gt;Conclusion&lt;/H3&gt;&lt;BR /&gt;
In summary, with this blog you can call the RFC integrations you developed in PI/PO with Java using the JCO library. In addition, based on this example, you can also call the function from SAP without PI/PO. You can use the &lt;STRONG&gt;SimpleCall.java&lt;/STRONG&gt; example in the JCO file you downloaded.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thank you for reading.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/calling-a-sap-pi-po-rfc-integration-from-java-with-jco-library/ba-p/13578451"/>
    <published>2023-09-14T01:24:37+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/import-data-connection-to-sap-s-4hana-in-sap-analytics-cloud-technical/ba-p/13697364</id>
    <title>Import Data Connection to SAP S/4HANA in SAP Analytics Cloud : Technical Configuration</title>
    <updated>2024-05-10T12:04:30.942000+02:00</updated>
    <author>
      <name>Utkarsh_goel123</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/166457</uri>
    </author>
    <content>&lt;P&gt;In this blog we’ll discuss complete steps for Import data connection from S/4 hana on-premise system to SAP Analytics Cloud . The Operating system we are using on which S/4 Hana system is installed is SUSE Linux SP 15.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_26-1715328017346.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108457i04372F5188423BC5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_26-1715328017346.png" alt="Utkarsh_goel123_26-1715328017346.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Here, Our Data source is S/4 Hana from which the SAP Analytics Cloud is connected using the SAP Analytics Cloud Agent and SAP Cloud Connector.&lt;/P&gt;&lt;P&gt;It is recommended that the Cloud Connector,&amp;nbsp;&lt;SPAN&gt;SAP Analytics Cloud&lt;/SPAN&gt;&amp;nbsp;agent, and the SAP Java Connector (JCo) are installed together on a dedicated server, and not a personal computer. This helps to ensure that multiple users can use an import data connection without experiencing slowness or downtime.&lt;/P&gt;&lt;P&gt;The SAP Analytics Cloud Agent Simple Deployment Kit allows you to quickly get your import data connections working.&lt;/P&gt;&lt;P&gt;The simple deployment kit is only supported on Windows 64-bit operating systems. If you have a different server, such as Linux, you'll need to install and configure the agent manually.&lt;/P&gt;&lt;P&gt;If we have windows Environment, then the SAP Analytics Cloud Agent Simple Deployment Kit is preferred. More details can be found in the below link.&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/c4751c8f9d0049a68d4202ebfc34ebe7.html" target="_blank" rel="noopener noreferrer"&gt;SAP Analytics Cloud Agent Simple Deployment Kit | SAP Help Portal&lt;/A&gt;&lt;/P&gt;&lt;P&gt;For Linux Environment we have to install SAP JVM, SAP Cloud Connector, Tomcat Apache server, SAC Agent, Java Connector.&lt;/P&gt;&lt;P&gt;Below are the steps for Import Data connection for On-premise S/4 HANA systems -&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;SAP JVM 8.1 and JDK installation on the linux server&lt;/LI&gt;&lt;LI&gt;Install SAP Cloud Connector on the same linux server.&lt;/LI&gt;&lt;LI&gt;Installing Tomcat Apache server&lt;/LI&gt;&lt;LI&gt;Installing and configuring Java connector (Jco)in Tomcat .&lt;/LI&gt;&lt;LI&gt;Installing and configuring SAP Analytics Cloud Agent .&lt;/LI&gt;&lt;LI&gt;Configuration and Connection steps in SAC portal&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-1123603390"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-927089885"&gt;&lt;STRONG&gt;1. SAP JVM 8.1 installation on the same linux server&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;Download the SAP JVM from the below link:&lt;/P&gt;&lt;P&gt;&lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;https://tools.hana.ondemand.com/#cloud&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_27-1715328017356.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108459i398BCD78CD8AB1B3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_27-1715328017356.png" alt="Utkarsh_goel123_27-1715328017356.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Download the rpm file compatible for linux 86x64 - &lt;A href="https://tools.hana.ondemand.com/additional/sapjvm-8.1.095-linux-x64.rpm" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;BR /&gt;sapjvm-8.1.095-linux-x64.rpm&lt;/A&gt;&amp;nbsp;(&lt;A href="https://tools.hana.ondemand.com/additional/sapjvm-8.1.095-linux-x64.rpm.sha1" target="_blank" rel="noopener nofollow noreferrer"&gt;sha1&lt;/A&gt;)&lt;/P&gt;&lt;P&gt;Move the file to the server and run the below command to install SAP JVM&lt;/P&gt;&lt;P&gt;rpm -i &amp;lt;file_name&amp;gt;.rpm&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_28-1715328017360.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108458i6D388AB613A2FD7F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_28-1715328017360.png" alt="Utkarsh_goel123_28-1715328017360.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Also it is recommended to install the openjdk packages on SUSE linux .&lt;/P&gt;&lt;P&gt;Run command ‘zypper install java’&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_29-1715328017368.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108466i2C28DBEBC5343ADE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_29-1715328017368.png" alt="Utkarsh_goel123_29-1715328017368.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;To check the verison of openjdk installed.&lt;/P&gt;&lt;P&gt;Run command 'java –version'&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_30-1715328017370.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108463i51A9F4314BA743B0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_30-1715328017370.png" alt="Utkarsh_goel123_30-1715328017370.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-730576380"&gt;&lt;STRONG&gt;2. Install SAP Cloud Connector on the same linux server.&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;To download the SAP Cloud Connector go to the below link :&lt;/P&gt;&lt;P&gt;&lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;https://tools.hana.ondemand.com/#cloud&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_31-1715328017379.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108467iA8AF031804F52E2A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_31-1715328017379.png" alt="Utkarsh_goel123_31-1715328017379.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Download the zip file for Linux x86_64 Architechture and move the downloaded file to the server.&lt;/P&gt;&lt;P&gt;Now, unzip the file and install the rpm package for cloud connector as below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_32-1715328017381.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108471i59685BA67E5A6062/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_32-1715328017381.png" alt="Utkarsh_goel123_32-1715328017381.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Cloud connector is installed now.&lt;/P&gt;&lt;P&gt;To open the SCC, enter: https://&amp;lt;hostname&amp;gt;:8443 in a browser, where the &amp;lt;hostname&amp;gt; is the hostname of the machine on which the connector is installed, and the port number is the one configured during installation. The default port number is 8443&lt;/P&gt;&lt;P&gt;By default Login Credentials are :&lt;/P&gt;&lt;P&gt;Username : Administrator&lt;/P&gt;&lt;P&gt;Password : manage&lt;/P&gt;&lt;P&gt;After the fist login , It prompts you to change password for the Administrator User.&lt;/P&gt;&lt;H6 id="toc-hId-921311032"&gt;Now Add the SAC subaccount to the cloud connector:&lt;/H6&gt;&lt;P&gt;&amp;nbsp;Click on “Add subaccount” and enter the details SAC subaccount , which you can find on SAP Analytics Cloud.&lt;/P&gt;&lt;P&gt;To find the Subaccount details of SAP Analytics Cloud :&lt;/P&gt;&lt;P&gt;You must use a System Owner account to perform the following steps. If you don't know who the system owner is, log on to&amp;nbsp;&lt;SPAN&gt;SAP Analytics Cloud&lt;/SPAN&gt;&amp;nbsp;and from the side navigation, choose&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;&amp;nbsp;Security&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Users&lt;/STRONG&gt;&lt;/SPAN&gt;.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Log on to&amp;nbsp;SAP Analytics Cloud.&lt;/LI&gt;&lt;LI&gt;From the side navigation, choose&amp;nbsp;&lt;STRONG&gt;System&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;&amp;gt;&amp;nbsp;Administration&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Switch to the&amp;nbsp;&lt;STRONG&gt;Data Source Configuration&lt;/STRONG&gt;&amp;nbsp;tab.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_35-1715328017388.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108478iCB8E7FB44A866FA4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_35-1715328017388.png" alt="Utkarsh_goel123_35-1715328017388.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-337549370"&gt;3.&lt;STRONG&gt;Installing Tomcat&amp;nbsp; Apache Server : &lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create a directory named tomcat in the /opt folder:&lt;/LI&gt;&lt;LI&gt;Go to the Apache Tomcat 8 Download page by clicking this&amp;nbsp;&lt;A title="link" href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener nofollow noreferrer"&gt;https://tomcat.apache.org/download-80.cgi&lt;/A&gt;&amp;nbsp; Place your cursor under 8.5.65 Binary Distributions, right-click on the tar file and select the copy link address from the menu that appears (as shown in the picture below). At the time of writing, Tomcat 8 is the most recent edition, but you are free to use whatever version is most current.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_36-1715328017391.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108475iFBC4D04DAB84F3D1/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Utkarsh_goel123_36-1715328017391.png" alt="Utkarsh_goel123_36-1715328017391.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Download the file from wget&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_37-1715328017392.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108476iCF815F783BA5FAD0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_37-1715328017392.png" alt="Utkarsh_goel123_37-1715328017392.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_38-1715328017397.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108482i296DAF30D2E5D3CF/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_38-1715328017397.png" alt="Utkarsh_goel123_38-1715328017397.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Extract the tar.gz file&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_39-1715328017400.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108483i2C58DD63B1A721BE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_39-1715328017400.png" alt="Utkarsh_goel123_39-1715328017400.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_40-1715328017402.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108481iB2C9E5E6C7F9A6FD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_40-1715328017402.png" alt="Utkarsh_goel123_40-1715328017402.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Starting Tomcat apache server&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_41-1715328017407.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108488i44A22E817C1E26AB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_41-1715328017407.png" alt="Utkarsh_goel123_41-1715328017407.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-141035865"&gt;&lt;STRONG&gt;4.Installing and configuring Java connector (Jco)in Tomcat .&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Download SAP Java connector from SAP support portal -&amp;gt; Software downloads&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_42-1715328017408.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108487i088448E388E29408/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_42-1715328017408.png" alt="Utkarsh_goel123_42-1715328017408.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;On a Linux server, put the&amp;nbsp;sapjco3.jar&amp;nbsp;and&amp;nbsp;libsapjco3.so&amp;nbsp;in the&amp;nbsp;lib&amp;nbsp;folder of Apache Tomcat.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_43-1715328017420.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108489i72B35E60F944ED22/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_43-1715328017420.png" alt="Utkarsh_goel123_43-1715328017420.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--55477640"&gt;&lt;STRONG&gt;5. Installing and configuring SAP Analytics Cloud Agent .&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;It is recommended, but not mandatory, that the Cloud Connector,&amp;nbsp;&lt;SPAN&gt;SAP Analytics Cloud&lt;/SPAN&gt;&amp;nbsp;agent, and the SAP JCO are installed together on a dedicated server, and not a personal computer. This helps to ensure that multiple users can use an import data connection without experiencing slowness or downtime.&lt;/P&gt;&lt;P&gt;Modifying the Cloud Connector’s embedded web application and deploying the agent to it is not supported.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Download the&amp;nbsp;SAP Analytics Cloud&amp;nbsp;agent from the SAP Support Portal.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The agent is available on the&amp;nbsp;&lt;A href="https://launchpad.support.sap.com/#/softwarecenter" target="_blank" rel="noopener noreferrer"&gt;SAP Software Downloads&lt;/A&gt;&amp;nbsp;page. Expand&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;By Category&lt;/STRONG&gt;&lt;/SPAN&gt;, select&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;SAP Cloud Solutions&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;STRONG&gt;SAP ANALYTICS CLOUD CONN&lt;/STRONG&gt;&amp;nbsp;&amp;gt; &lt;STRONG&gt;SAP ANALYTICS CLOUD CONN 1.0&lt;/STRONG&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;STRONG&gt;SAP ANALYTICS CLOUD AGENT 1.0&lt;/STRONG&gt;&lt;/SPAN&gt;&amp;nbsp;and download the latest version.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Unzip the downloaded file and rename the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;WAR&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;file to&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;C4A_AGENT.war&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Extract the package and copy the file&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;C4A_AGENT.war&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;to your Tomcat&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;webapps&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;directory.&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_44-1715328017443.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108495i79829B6D2DD05368/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_44-1715328017443.png" alt="Utkarsh_goel123_44-1715328017443.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The agent will automatically deploy when Tomcat is restarted.&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Create a user for the&amp;nbsp;SAP Analytics Cloud&amp;nbsp;agent and assign the&amp;nbsp;&lt;/SPAN&gt;Services&lt;SPAN&gt;&amp;nbsp;role to the user.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_45-1715328017453.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108494i4B301691F87B4890/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_45-1715328017453.png" alt="Utkarsh_goel123_45-1715328017453.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The user credentials will be needed later for setting up the connection to&amp;nbsp;&lt;SPAN&gt;SAP Analytics Cloud&lt;/SPAN&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_46-1715328017454.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108493iE22515C3982ABCB0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_46-1715328017454.png" alt="Utkarsh_goel123_46-1715328017454.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Restart the Tomcat application server for the settings to take effect.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Test if the installation was successful, by opening the following URL in your browser:&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;http://&lt;/SPAN&gt;&amp;lt;Host&amp;gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&amp;lt;Port&amp;gt;&lt;SPAN&gt;/C4A_AGENT/deploymentInfo&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The version of the&amp;nbsp;&lt;SPAN&gt;SAP Analytics Cloud&lt;/SPAN&gt;&amp;nbsp;agent installed is displayed.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--251991145"&gt;&lt;STRONG&gt;6. Configuration and Connection steps in SAC portal&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Add the Data source in System &amp;gt; Administration &amp;gt; on-premise data sources&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_47-1715328017463.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108499i0B612F42A9660FB0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_47-1715328017463.png" alt="Utkarsh_goel123_47-1715328017463.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Check connection configuration , It should be green.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_48-1715328017470.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108500i0DBF023DFAAAF316/image-size/large?v=v2&amp;amp;px=999" role="button" title="Utkarsh_goel123_48-1715328017470.png" alt="Utkarsh_goel123_48-1715328017470.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;From the side navigation, choose&amp;nbsp;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;STRONG&gt;Connections &amp;gt;&amp;nbsp;&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;(Add Connection)&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The&amp;nbsp;&lt;STRONG&gt;Select a data source&lt;/STRONG&gt;&amp;nbsp;dialog will appear.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Expand&amp;nbsp;&lt;STRONG&gt;Acquire Data&lt;/STRONG&gt;&amp;nbsp;and select&amp;nbsp;&lt;STRONG&gt;SAP S/4HANA&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the&amp;nbsp;&lt;STRONG&gt;New SAP S/4HANA Connection&lt;/STRONG&gt;&amp;nbsp;dialog, do the following:&lt;/LI&gt;&lt;/UL&gt;&lt;OL&gt;&lt;OL&gt;&lt;LI&gt;In the&amp;nbsp;&lt;STRONG&gt;Connection Information&lt;/STRONG&gt;&amp;nbsp;section, add a&amp;nbsp;&lt;STRONG&gt;Connection Name&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;Description&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;If you are connecting to an&amp;nbsp;SAP S/4HANA&amp;nbsp;on-premise system, select&amp;nbsp;&lt;STRONG&gt;Connect to an On-Premise OData service&lt;/STRONG&gt;, and then select the&amp;nbsp;&lt;STRONG&gt;Location&lt;/STRONG&gt;&amp;nbsp;of your Cloud Connector from the list.&lt;/LI&gt;&lt;LI&gt;Enter the&amp;nbsp;&lt;STRONG&gt;Data Service URL&lt;/STRONG&gt;&amp;nbsp;published during your configuration&lt;/LI&gt;&lt;/OL&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Select the authentication type.&lt;/LI&gt;&lt;LI&gt;Enter the&amp;nbsp;&lt;STRONG&gt;User Name&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;Password&lt;/STRONG&gt;&amp;nbsp;of the user you want to import data from.&lt;/LI&gt;&lt;LI&gt;Choose&amp;nbsp;&lt;STRONG&gt;Create&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The new connection is added to the list of connections on the&amp;nbsp;&lt;STRONG&gt;Connections&lt;/STRONG&gt;&amp;nbsp;screen.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Utkarsh_goel123_51-1715328017474.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/108502iF36599FE6D0E2DC9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Utkarsh_goel123_51-1715328017474.png" alt="Utkarsh_goel123_51-1715328017474.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId--319421931"&gt;Conclusion :&lt;/H4&gt;&lt;P&gt;Import Data Connection to S/4Hana on-premise system in SAP Analytics Cloud has been established successfully.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/import-data-connection-to-sap-s-4hana-in-sap-analytics-cloud-technical/ba-p/13697364"/>
    <published>2024-05-10T12:04:30.942000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538</id>
    <title>Technical User Propagation from JCo towards On-Premises</title>
    <updated>2024-05-22T15:06:16.024000+02:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P data-unlink="true"&gt;This blog lays out how to use a technical user instead of basic authentication from &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;JCo based on the SAP Java Buildpack in CF&lt;/A&gt; towards on-premises.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-885667874"&gt;Background&lt;/H1&gt;&lt;P data-unlink="true"&gt;JCo retrieves an access token representing the technical user which is then be sent to the Connectivity service. This is similar to principal propagation, but in this case, a technical user is propagated instead of a business user. The retrieval of the access token performs the OAuth 2.0 client credentials flow, according to the token service configurations in the destination. Currently for JCo the token service generation supports basic authentication only. The token service is called from the Internet, not from the Cloud Connector.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-689154369"&gt;Configuration&lt;/H1&gt;&lt;P&gt;Generally speaking, the setup as described in the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;documentation&lt;/A&gt; stays the same, only the destination configuration in the Destination Service needs to be adjusted.&lt;/P&gt;&lt;P&gt;In the UI select the authentication type&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;TechnicalUserPropagation&lt;/STRONG&gt;&lt;/EM&gt;. You now need to enter three values for:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_id&lt;/STRONG&gt; - the technical user name (client ID) which is forwarded towards on-premises and used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_secret&lt;/STRONG&gt; - the secret for &lt;EM&gt;jco.client.tech_user_id&lt;/EM&gt; used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_service_url&lt;/STRONG&gt; - the URL of the token service&lt;SPAN&gt;, against which the token exchange is performed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-621723583"&gt;&lt;SPAN&gt;Example&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;We are going to use the token of the XSUAA service instance here. We specified for the instance in the configuration JSON the &lt;STRONG&gt;xsappname&lt;/STRONG&gt; as &lt;EM&gt;jco-technicalProp&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After the application binding we can retrieve the relevant parameters from the CF environment variables VCAP_SERVICES:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"clientid": "sb-jco-technicalProp!t77058"
"clientsecret": "TMsePptYQLSRf6qUWWt+l1D0rUQ="
"url": "https://cf.authentication.hana.ondemand.com"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Entering it in the Destination Service:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Properties" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113368iDC4EDC134023C774/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_0-1716286606143.png" alt="simon_luser_0-1716286606143.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The token will now be forwarded to the Cloud Connector. Assuming all necessary basic &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configuring-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;steps&lt;/A&gt; for principal propagation are configured, we can &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configure-subject-patterns-for-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;configure a pattern&lt;/A&gt; to extract its name for the short-lived certificate:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pattern" style="width: 259px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112153iE8E7F78470E681B7/image-dimensions/259x107?v=v2" width="259" height="107" role="button" title="simon_luser_1-1715949812665.png" alt="simon_luser_1-1715949812665.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The ABAP backend needs to &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector-configure-principal-propagation-for-rfc?locale=en-US&amp;amp;version=Cloud#2.-map-short-lived-certificates-to-users" target="_self" rel="noopener noreferrer"&gt;maintain a user mapping&lt;/A&gt; for this technical user, in this case mapping it to the ABAP user &lt;EM&gt;SKYWALKER&lt;/EM&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Mapping" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113369iC19FACFAECE438B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_1-1716286913724.png" alt="simon_luser_1-1716286913724.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That's it!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538"/>
    <published>2024-05-22T15:06:16.024000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498</id>
    <title>Communicate from a Java Application to ABAP via WebSocket RFC using JCo - Migration Guide</title>
    <updated>2025-01-21T19:20:20.825000+01:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/websocket-rfc-rfc-for-the-internet/ba-p/13502531" target="_blank"&gt;WebSocket RFC&lt;/A&gt; is available for a while now. Continue reading, if&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;you want to communicate from an external Java application to an ABAP-based system via this new protocol using the&amp;nbsp;&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;JCo library&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;you have an existing JCo setup using classic CPIC-based RFC and want to migrate.&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-950224196"&gt;Adjusting the destination&lt;/H1&gt;&lt;P&gt;For specifying the destination, instead of providing properties for application server logon (&lt;SPAN&gt;&lt;EM&gt;jco.client.ashost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.sysnr&lt;/EM&gt;) or message server logon (&lt;EM&gt;jco.client.mshost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.msserv&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.r3name&lt;/EM&gt;), the f&lt;/SPAN&gt;ollowing properties must be provided:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wshost&lt;/STRONG&gt;: the hostname of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wsport&lt;/STRONG&gt;: the port for HTTPS/WSS (WebSocket Secure) of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Optionally, you can also specify&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&lt;/STRONG&gt;: If set to 1 this property enables to logon at the backend via the X.509 client&amp;nbsp;certificate that is used in the TLS handshake (mTLS). An associated user or mapping rule must be defined at the backend.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-753710691"&gt;Extending the implementation&lt;/H1&gt;&lt;P&gt;WebSocket RFC is based on TLS, thus a PKI infrastructure is required to be setup. To achieve that, following methods from the JCo interface &lt;EM&gt;DestinationDataProvider&lt;/EM&gt;&amp;nbsp;must be implemented:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext getSSLContext(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method returns a&amp;nbsp;&lt;EM&gt;javax.net.ssl.SSLContext&lt;/EM&gt; instance to JCo, which is used to create the TLS session for a given destination. How such an instance is created is up to the application - we are going to describe a simple use case in which all keys and CAs are stored in a local p12 file (&lt;EM&gt;p12FilePath&lt;/EM&gt;) and the password is read from a secured database.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext loadSSLContextFromFile() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException, UnrecoverableKeyException, KeyManagementException {
    File p12File = new File(p12FilePath);

    try (InputStream p12FileStream = new BufferedInputStream(new FileInputStream(p12File))) {
        KeyStore ks = KeyStore.getInstance("PKCS12");

        char[] pwd = SecuredDatabaseConnection.readPassword();

        ks.load(p12FileStream, pwd);
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(ks, pwd);

        // delete the plain text password from the heap memory as soon as possible
        Arrays.fill(pwd, (char) 0);
        pwd = null;

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ks);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
        return sslContext;
    }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(Optionally) If&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&amp;nbsp;&lt;/STRONG&gt;is used, the API below must be implemented additionally:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;X509Certificate getClientCertificate(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method must return the &lt;EM&gt;java.security.cert.X509Certificate&lt;/EM&gt; instance of the client certificate used for logon. It must be the one provided in the &lt;EM&gt;SSLContext&lt;/EM&gt;, which is used during the TLS handshake.&lt;/P&gt;&lt;H1 id="toc-hId-557197186"&gt;Setting up Trust&lt;/H1&gt;&lt;H2 id="toc-hId-489766400"&gt;Creating the p12 File&lt;/H2&gt;&lt;P&gt;Create a p12 file with a private key using a tool like &lt;A href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noopener nofollow noreferrer"&gt;keytool&lt;/A&gt; or &lt;A href="https://docs.openssl.org/1.1.1/man1/pkcs12/" target="_blank" rel="noopener nofollow noreferrer"&gt;OpenSSL&lt;/A&gt;. Create a CSR and import the CA response. Furthermore, import the CA certificate from the ABAP system which has been exported (see next section).&lt;/P&gt;&lt;H2 id="toc-hId-293252895"&gt;Configuring trust in ABAP&lt;/H2&gt;&lt;P&gt;Navigate to transaction STRUST and select "SSL-Server Standard". Select the own certificate and export it. For more information, see also &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/e73bba71770e4c0ca5fb2a3c17e8e229/4923501ebf5a1902e10000000a42189c.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;. Also, import the CA certificate from the p12 file and add it to the certificate list, so that mutual trust can be established.&lt;/P&gt;&lt;H1 id="toc-hId--32343329"&gt;Using WebSocket RFC in BTP&lt;/H1&gt;&lt;P&gt;If you use JCo in BTP in conjunction with the Destination Service and you want to use WebSocket RFC to call publicly exposed endpoints, you can skip the above "Extending the implementation" part. This integration is already implemented by SAP in the supported environments. You can follow the steps in the &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-configure-rfc-destination" target="_blank" rel="noopener noreferrer"&gt;BTP Connectivity Service documentation&lt;/A&gt;&lt;/SPAN&gt; on how to configure the Destination Service accordingly.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498"/>
    <published>2025-01-21T19:20:20.825000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/common-mistakes-companies-make-when-building-sap-connectors-and-how-to/ba-p/14145970</id>
    <title>Common Mistakes Companies Make When Building SAP Connectors (and How to Avoid Them)</title>
    <updated>2025-07-13T11:19:51.321000+02:00</updated>
    <author>
      <name>Former Member</name>
    </author>
    <content>&lt;P class=""&gt;&lt;I&gt;&lt;SPAN&gt;Planning to build an SAP connector? Are you sure you’ve considered all the hidden complexities that could lead to expensive fixes? Pause for a moment and read this guide.&lt;/SPAN&gt;&lt;/I&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Building an SAP connector might look straightforward on a whiteboard, but reality paints a very different picture. Connecting your SaaS platform, mobile app, or third-party system to SAP is rarely a plug-and-play task. SAP’s deep business logic, evolving standards, and ecosystem complexity demand more than just technical know-how. They require strategic foresight.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;I've seen it too often that teams jump into SAP integrations assuming it’s just a matter of “connecting endpoints.” But SAP isn't your typical system. It’s layered, business-rule-heavy, and often full of legacy quirks that don’t play nicely with modern tools - unless handled properly.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Most issues don’t show up until deep into the dev cycle when fixes are expensive and rollout deadlines are near.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Let's break down the most common mistakes companies make while planning and building SAP connectors.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1734207203"&gt;&lt;SPAN&gt;1. Underestimating Scope&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;Do you know what trips up most teams when building SAP connectors? Thinking the connector is a “quick build.” Teams often assume it’s just a matter of hitting an API endpoint or exposing a data source. In reality, SAP connectors can involve deep data mapping, complex authorisation checks, bidirectional syncing, and often back-end middleware.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;For example, syncing customer data might sound like a single endpoint call. But what about custom fields, multiple sales data tables, approval flows, or regional tax logic?&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Now, you're not just calling an API, you’re orchestrating data, managing errors, and tuning performance just to keep things stable.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Start with proper scoping, don’t skip it. Sit down with your SAP team and map out which modules are in play, what kind of data volumes you're dealing with, and how the integration needs to work.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Got custom logic? Flag it early. Even better, build a quick proof-of-concept for your most critical data flows. It’ll help you spot hidden dependencies and test your assumptions before you're knee-deep in development.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Trust me, a little clarity upfront saves a ton of cleanup later.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1537693698"&gt;&lt;SPAN&gt;2. Over-Customisation&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;One of the fastest ways to derail your SAP connector? Trying to make it “do everything.” Developers often get pulled into adding logic for every Z-table, custom field, and one-off process in a client’s system. The result? A bloated connector that’s impossible to reuse, hard to test, and a nightmare to maintain.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Here’s a common scenario: a logistics tech company wants to integrate with customers’ SAP systems to fetch delivery schedules. Instead of mapping to standard delivery BAPIs, developers get pulled into supporting custom date logic, dozens of user exits, and every custom delivery status imaginable.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;What should have been a 6-week connector project turns into a 9-month maintenance marathon, multiplied by every new client.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Resist the temptation to over-engineer. Stick with SAP-standard APIs, BAPIs, or &lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/understanding-sap-idocs/ba-p/13976339" target="_blank"&gt;IDocs&lt;/A&gt; as much as possible; they’re stable, supported, and documented. Build flexibility into the connector via configuration, not custom code.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;And ask yourself this: are you solving for a general integration use case or replicating someone’s entire SAP landscape? If it’s the latter, pause and re-scope.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;A lean, modular connector will go further and scale faster.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1341180193"&gt;&lt;SPAN&gt;3. Poor Testing Strategy&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;You can write perfect code and still end up with a broken connector if you skip proper testing. &lt;STRONG&gt;&lt;EM&gt;One of the most overlooked areas in SAP integration is testing under real-world conditions&lt;/EM&gt;&lt;/STRONG&gt;. Teams often run a few unit tests and assume everything will hold up. But when the connector goes live and hits real data, timeouts, failed transactions, and authorisation errors start to surface.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;SAP environments vary wildly: different data volumes, inconsistent master data, missing authorisations, and custom logic that doesn’t show up in sandbox systems.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;And that means your connector needs more than a happy path test.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;EM&gt;It needs stress tests, security tests, integration tests, and data validation.&lt;/EM&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;&lt;STRONG&gt;For example,&lt;/STRONG&gt; a SaaS platform launched a connector that worked flawlessly in development. But once it hit the production SAP instance, BAPI calls failed due to missing authorisations, and batch processes timed out due to high-volume data fetches.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Plan for multiple test phases: unit, integration, volume, and user acceptance testing. Simulate real data scenarios and edge cases, especially around failed transactions or partial syncs. Invest in a sandbox SAP instance or partner with consultants who have one. Simulate real data, workflows, and user authorisations, and ensure your test environments mirror the production scale as closely as possible.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;&lt;EM&gt;Good testing doesn’t slow you down; it prevents disaster at go-live.&lt;/EM&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1144666688"&gt;&lt;SPAN&gt;4. Lack of SAP Expertise on the Team&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;No matter how smart your dev team is, SAP has a steep learning curve. OData services, RFCs, BAPI constraints, and handling user contexts in SAP NetWeaver Gateway require hands-on experience. Without it, teams waste weeks on simple missteps, or worse, build something that breaks at go-live.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Involve an experienced SAP technical consultant early. Ideally, someone who has built connectors before. They’ll catch what others miss, guide your team through correct integration paths, and save you from costly detours.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-948153183"&gt;&lt;SPAN&gt;5. Ignoring Security &amp;amp; Licensing&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;SAP doesn’t play around with security, and neither should you. Many projects forget to account for &lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/sap-single-sign-on-sso-3-0-configuration-for-sap-abap-application-server/ba-p/13386781" target="_blank"&gt;SSO configurations&lt;/A&gt;, token expiration, and access control within the SAP system. Worse, they overlook SAP licensing implications, which can lead to surprise costs.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Consult your SAP security team about user access and role requirements. Understand the difference between named users, technical users, and indirect access. Validate connector licensing with your SAP AE if you’re selling the connector or integrating with third parties.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-751639678"&gt;&lt;SPAN&gt;6. No Versioning or Change Control&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;Many SAP environments differ slightly across dev, test, and production. When connector logic isn’t versioned properly or environments aren’t synchronised, you risk unexpected behaviour or even data corruption.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Worse yet, some projects hardcode transformations, endpoints, or credentials instead of managing them through configuration. What works in Dev may break in QA or Prod, and you’ll &lt;/SPAN&gt;&lt;STRONG&gt;end up chasing vague “it works here but not there” bugs across environments.&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Use proper source control (Git or similar) for the connector. Separate config from code. Set up CI/CD for your connector, where possible and test every transport. Treat SAP like any enterprise system—with dev ops discipline.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;For more information, read this:&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/ci-and-cd-set-up-in-s-4hana-system-journey-continues/ba-p/13534612" target="_blank"&gt;CI and CD Setup in S/4HANA Ecosystem&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-555126173"&gt;&lt;SPAN&gt;7. Disconnected Stakeholders&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN&gt;Often, the team building the connector isn’t the same team that owns the SAP system or its business processes. This leads to misaligned expectations, late-stage changes, and friction during testing.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;The development team and the SAP owners often operate in silos. You might have your integration team building against technical specs, only to discover during UAT that key assumptions, like how orders are created or which data triggers updates, were wrong. Why? Because the people writing the code never spoke to the people running the business process.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;This disconnect leads to:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Late-stage rework because business validations weren’t captured early.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Surprise edge cases like region-specific tax logic or approval flows.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Friction during testing occurs when functional teams reject what’s been built.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;For example,&lt;/STRONG&gt;&lt;SPAN&gt; a development team builds a connector to sync invoice status from SAP to an external CRM. They assumed “invoice paid” meant status F in the accounting document. But in practice, the business team considers invoices settled only when payment is cleared and matched, stored in a different table altogether.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Now, the connector logic must be rewritten days before going live.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;How to avoid it:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Involve SAP functional consultants early, especially those who understand the source data, business rules, and edge cases.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Define clear ownership for data mapping, transformation rules, and validation logic.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Set up recurring checkpoints between dev, QA, and business teams. Short weekly syncs can save weeks of debugging.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Walk through real data scenarios during development.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-358612668"&gt;&lt;SPAN&gt;Final Thoughts&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class="" data-unlink="true"&gt;&lt;SPAN&gt;Building an SAP connector&amp;nbsp;is a strategic effort, especially if it forms the bridge between your product and your enterprise data. It deserves thoughtful planning, expert input, and rigorous testing. Avoiding these common pitfalls will not only save you from costly rework but also accelerate your delivery and business outcomes.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/common-mistakes-companies-make-when-building-sap-connectors-and-how-to/ba-p/14145970"/>
    <published>2025-07-13T11:19:51.321000+02:00</published>
  </entry>
</feed>
