<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-Development-blog-posts.xml</id>
  <title>SAP Community - ABAP Development</title>
  <updated>2025-10-04T11:00:02.841104+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP Development/pd-p/833755570260738661924709785639136" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP Development blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714</id>
    <title>ABAP Cloud Number Ranges: The ABAP RAP COMMIT WORK Conflict and the Simple Fix</title>
    <updated>2025-09-23T12:45:39.845000+02:00</updated>
    <author>
      <name>suzanne_alivand</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/848404</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Many business applications require unique numbers, for example, to complete the keys of data records. In order to get numbers from an interval, a number range object must be defined which can contain different properties. Standard Number ranges are typically maintained via customizing in each system (Test and Production). However, the process for&amp;nbsp;&lt;STRONG&gt;custom&lt;/STRONG&gt;&amp;nbsp;Number Range Objects in the S/4HANA Cloud Public Edition is different.&lt;/P&gt;&lt;P&gt;These custom objects must be created in the development environment, configured in the customizing client, and then transported through the landscape. This blog outlines that end-to-end process, including a frustrating short dump I encountered and the surprisingly simple configuration change that solved it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 1: The Developer's Task - Defining the Blueprint in ADT&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Unlike the on-premises world, the process for a custom number range begins in the developer's toolkit: ABAP Development Tools (ADT). Here, you create the&amp;nbsp;&lt;EM&gt;definition&lt;/EM&gt;&amp;nbsp;or the&amp;nbsp;&lt;EM&gt;blueprint&lt;/EM&gt;&amp;nbsp;of your number range object.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In your ABAP package, right-click and choose&amp;nbsp;New&amp;nbsp;-&amp;gt;&amp;nbsp;Other ABAP Repository Object.&lt;/LI&gt;&lt;LI&gt;Search for&amp;nbsp;&lt;STRONG&gt;"Number Range Object"&lt;/STRONG&gt;, give it a name and a description.&lt;/LI&gt;&lt;LI&gt;Assign it to a&amp;nbsp;&lt;STRONG&gt;Workbench Transport&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the object editor, the most important property is the&amp;nbsp;&lt;STRONG&gt;Number Length Domain&lt;/STRONG&gt;. It’s a best practice to create a custom domain for this to define the length and type. For my&amp;nbsp;ZPO_RUN_ID, I used a domain of type&amp;nbsp;NUMC(10).&lt;/LI&gt;&lt;LI&gt;Save and&amp;nbsp;&lt;STRONG&gt;activate&lt;/STRONG&gt;&amp;nbsp;the object.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_7-1758216453231.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316647iBAD6D68F8E9EC235/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_7-1758216453231.png" alt="suzanne_alivand_7-1758216453231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The system now knows what a&amp;nbsp;ZPO_RUN_ID&amp;nbsp;is, but it has no actual number intervals defined.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 2: The Customizer's Task - Setting Intervals in Fiori&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This is where we move to the Fiori Launchpad, specifically in the&amp;nbsp;&lt;STRONG&gt;Customizing Client&lt;/STRONG&gt;.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to your Customizing client and open the&amp;nbsp;&lt;STRONG&gt;"Manage Number Range Intervals"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;LI&gt;Search for your newly created object,&amp;nbsp;ZPO_RUN_ID.&lt;/LI&gt;&lt;LI&gt;Navigate to the "Number Ranges" tab and click&amp;nbsp;&lt;STRONG&gt;"Create"&lt;/STRONG&gt;. Here you'll define your interval, for example,&amp;nbsp;01&amp;nbsp;with its lower and upper limits.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_8-1758216453232.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316646i0A9308E96CB6625D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_8-1758216453232.png" alt="suzanne_alivand_8-1758216453232.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_13-1758216499507.png" style="width: 663px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316652i70CFA2444947FDD8/image-dimensions/663x226?v=v2" width="663" height="226" role="button" title="suzanne_alivand_13-1758216499507.png" alt="suzanne_alivand_13-1758216499507.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 3: The Transport &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The system needs a&amp;nbsp;&lt;STRONG&gt;Customizing Transport&lt;/STRONG&gt;&amp;nbsp;to record this change.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In a new tab, open the&amp;nbsp;&lt;STRONG&gt;"Export Customizing Transports"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_10-1758216453236.png" style="width: 237px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316649iD7EFC91ECED66A4B/image-dimensions/237x191?v=v2" width="237" height="191" role="button" title="suzanne_alivand_10-1758216453236.png" alt="suzanne_alivand_10-1758216453236.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a new&amp;nbsp;&lt;STRONG&gt;"Customizing Request"&lt;/STRONG&gt;&amp;nbsp;and give it a description. It's a good practice to set this as your "Default" request using the "Change Category" button.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_11-1758216453238.png" style="width: 734px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316650i3B8DE8A478A85F6C/image-dimensions/734x90?v=v2" width="734" height="90" role="button" title="suzanne_alivand_11-1758216453238.png" alt="suzanne_alivand_11-1758216453238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Go back to the Number Range app and save your interval again. This time, it will find your open request and save the change successfully.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_12-1758216453239.png" style="width: 823px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316651i263BA5C692E50873/image-dimensions/823x99?v=v2" width="823" height="99" role="button" title="suzanne_alivand_12-1758216453239.png" alt="suzanne_alivand_12-1758216453239.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now you have two transports: the Workbench TR from ADT with the object definition, and the Customizing TR from Fiori with the interval data. The Workbench TR should be a prerequisite for the Customizing TR when you import them.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 4: The Payoff - Using the Number Range in RAP&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With everything configured, it was time to use it in my ABAP RAP application. The correct, released API is the class&amp;nbsp;CL_NUMBERRANGE_RUNTIME.&lt;/P&gt;&lt;P&gt;I had two main options for assigning an ID based on the business requirement:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;An&amp;nbsp;early numbering&amp;nbsp;determination, which runs before the save phase.&lt;/LI&gt;&lt;LI&gt;A&amp;nbsp;determination on save, which runs during the final save transaction.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I initially chose early numbering&amp;nbsp;determination. My&amp;nbsp;earlynumbering_create method was clean and used the correct class.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD earlynumbering_create.

    DATA: latest_num   TYPE cl_numberrange_runtime=&amp;gt;nr_number.

    DATA(All_entities) = entities.
    DELETE All_entities WHERE  RunId IS NOT INITIAL.

    TRY.
        cl_numberrange_runtime=&amp;gt;number_get(
          EXPORTING
            nr_range_nr = '01'
            object      = 'ZPO_RUN_ID'
            quantity = CONV #( lines( all_entities ) )
          IMPORTING
            number      = latest_num
            returncode = DATA(code)
            returned_quantity = DATA(return_qty) ).

      CATCH cx_nr_object_not_found INTO DATA(lx_obj_not_found).
      CATCH cx_number_ranges INTO DATA(lx_ranges_error).

        LOOP AT All_entities INTO DATA(entity_line).

          APPEND VALUE #( %cid = entity_line-%cid
                          %key  = entity_line-%key ) TO failed-run.
          APPEND VALUE #( %cid = entity_line-%cid
                          %key = entity_line-%key
                          %msg = lx_ranges_error ) TO reported-run.
        ENDLOOP.
        EXIT.
    ENDTRY.

    DATA(curr_num) = latest_num - return_qty.

    LOOP AT All_entities INTO entity_line.
      curr_num = curr_num + 1 .
      APPEND VALUE #( %cid = entity_line-%cid
      RunUuid = curr_num ) TO mapped-run.

    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I ran the app, created an entry, clicked "Save," and was met with a short dump:&amp;nbsp;&lt;STRONG&gt;ABAP Runtime error 'BEHAVIOR_ILLEGAL_STATEMENT'&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;The "Aha!" Moment: The&amp;nbsp;COMMIT WORK&amp;nbsp;Conflict and the Simple Fix&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;My code was correct. The class was correct. The configuration was correct. So, what was wrong?&lt;/P&gt;&lt;P&gt;The problem was my number range was&amp;nbsp;&lt;STRONG&gt;not buffered&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;After a long debugging session, I discovered that when&amp;nbsp;cl_numberrange_runtime&amp;nbsp;is called for a non-buffered number range, it&amp;nbsp;&lt;STRONG&gt;must&lt;/STRONG&gt;&amp;nbsp;perform an immediate database&amp;nbsp;UPDATE&amp;nbsp;and its own&amp;nbsp;COMMIT WORK&amp;nbsp;to guarantee the number is reserved. The RAP framework, in its strictly controlled Save phase, saw this independent&amp;nbsp;COMMIT&amp;nbsp;as a violation of its own transaction and triggered the dump to prevent data inconsistency.&lt;/P&gt;&lt;P&gt;The solution wasn't in my ABAP code at all. It was in the configuration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enabling buffering solves this transactional conflict.&lt;/STRONG&gt;&amp;nbsp;Here’s why:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;With buffering, the class gets the next number from the application server's&amp;nbsp;&lt;STRONG&gt;memory&lt;/STRONG&gt;, not directly from the database.&lt;/LI&gt;&lt;LI&gt;Getting a number from memory requires&amp;nbsp;&lt;STRONG&gt;no immediate database update&lt;/STRONG&gt;&amp;nbsp;and, crucially,&amp;nbsp;&lt;STRONG&gt;no conflicting&amp;nbsp;COMMIT WORK&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I edited the&amp;nbsp;&lt;STRONG&gt;Properties&lt;/STRONG&gt;&amp;nbsp;of my&amp;nbsp;ZPO_RUN_ID&amp;nbsp;object and changed the&amp;nbsp;&lt;STRONG&gt;Buffering&lt;/STRONG&gt;&amp;nbsp;type to&amp;nbsp;&lt;STRONG&gt;"Main Memory Buffering"&lt;/STRONG&gt;&amp;nbsp;with a size of 10.&lt;/P&gt;&lt;P&gt;With that one configuration change, everything worked perfectly. My&amp;nbsp;determination on save&amp;nbsp;now executes without any issues.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Final Thoughts&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the ABAP Cloud, writing correct code is only half the battle. We also have to deeply understand and respect the strict transactional model of the RAP framework. A seemingly simple configuration choice, like buffering, can be the key to resolving what looks like a complex runtime error.&lt;/P&gt;&lt;P&gt;If you ever face an unexpected&amp;nbsp;BEHAVIOR_ILLEGAL_STATEMENT&amp;nbsp;dump, consider what your code might be doing that could be trying to interfere with the framework's unit of work.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714"/>
    <published>2025-09-23T12:45:39.845000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/validations-in-bopf-and-consistency-validation-in-bopf/ba-p/14214587</id>
    <title>Validations in BOPF and Consistency Validation in BOPF</title>
    <updated>2025-09-24T07:00:43.999000+02:00</updated>
    <author>
      <name>Krishna_karale</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451081</uri>
    </author>
    <content>&lt;P&gt;Hello Everyone,&lt;/P&gt;&lt;P&gt;In this blog we will be going to learn about the Validations in BOPF.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What is Validation in BOPF?&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In BOPF, &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;a validation is a consistency check defined on a node of the business object that ensures the data fulfills specific business rules before it is saved or processed.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In BOPF, keeping the data clean and consistent is very important. Validations help achieve this by checking the data against specific rules. Just like determinations, validations are created on the node of the data model where they are needed. Today, we’ll walk you through how to create a validation and write the logic for it in the implementation class.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;Procedure &amp;nbsp;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we are defining a custom Travel table (zkk_dt_travel).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Data base table for Travel Details'
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #ALLOWED
define table zkk_dt_travel {

  key client     : abap.clnt not null;
  key travel_id  : zkk_de_travel_id not null;
  key user_email : zkk_de_email not null;
  start_date     : dats;
  destination    : zkk_de_destination;
  status         : zkk_de_status;
  expense_type   : zkk_de_item_type;
  @Semantics.amount.currencyCode : 'zkk_travel_hdr.curr_key'
  total_cost     : zkk_de_cost;
  curr_key       : zkk_de_cost_key;
  remarks        : zkk_de_remarks;
  created_by     : zkk_de_createdby;
  created_on     : datum;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;The above table has the below shown data.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757594071182.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313058i31645446FA5AE134/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757594071182.png" alt="Krishna_karale_1-1757594071182.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;For the Database table we are defining the Basic view &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.sqlViewName: 'ZKK_DBV_TRAVEL'
@AbapCatalog.compiler.compareFilter: true
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface view for Travel details'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true


@ObjectModel:{
modelCategory: #BUSINESS_OBJECT,
compositionRoot: true,
transactionalProcessingEnabled: true,
writeActivePersistence: 'ZKK_dt_travel',

createEnabled: true,
updateEnabled: true,
deleteEnabled: true
}

@OData.publish: true
define view zi_kk_travel
  as select from zkk_dt_travel
{
  key travel_id,
      @ObjectModel.mandatory: true
  key user_email,
      start_date,
      destination,
      status,
      @ObjectModel.mandatory: true
      expense_type,
      @ObjectModel.mandatory: true
      total_cost,
      curr_key,
      remarks,
      created_by,
      created_on
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;For creating the Business object directly from the Eclipse editor, we have to make use of annotations which I have given with their functionality&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here’s the explanation of each annotation in your snippet:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@ObjectModel: {&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;modelCategory: #BUSINESS_OBJECT,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;compositionRoot: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;transactionalProcessingEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;writeActivePersistence: 'ZKK_dt_travel',&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;createEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;updateEnabled: true,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;deleteEnabled: true&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;}&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Explanation&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;modelCategory: #BUSINESS_OBJECT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Declares that the CDS view represents a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Business Object (BO)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. This means it can be used in BOPF to handle business logic and transactional operations.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;compositionRoot: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Defines this entity as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;root node&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; of the Business Object. Other nodes (child entities) can be linked to it via composition relationships.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactionalProcessingEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Enables &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactional behavior&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (create, update, delete, save, rollback) for the entity, making it suitable for business object processing.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;writeActivePersistence: 'ZKK_dt_travel'&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Specifies the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;database table&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (&lt;/SPAN&gt;&lt;SPAN&gt;ZKK_DT_TRAVEL&lt;/SPAN&gt;&lt;SPAN&gt;) where the active (persisted) data of this entity is stored.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;createEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows the creation of new records in the entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;updateEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows modification of existing records.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;deleteEnabled: true&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Allows deletion of records.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1599241"&gt;@odata&lt;/a&gt;.publish: true&lt;/STRONG&gt;&lt;SPAN&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;turns your CDS view into an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;OData service provider&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, making its data available for consumption via OData protocols.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;In short:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This annotation block is used to define a CDS entity as a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Business Object root node&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; with full CRUD (Create, Read, Update, Delete) support and persistence in the custom table &lt;/SPAN&gt;&lt;SPAN&gt;ZKK_DT_TRAVEL&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here I am creating the Metadata extension for the Basic view (ZI_KK_TRAVEL) for consuming it in the front end.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
@UI.headerInfo: {
    typeName: 'Travel',
    typeNamePlural: 'Travel Details'
}
annotate entity zi_kk_travel
    with 
{
@UI.facet: [{ 
id: 'Travel', 
purpose: #STANDARD, 
position: 10, 
label: 'Travel Details ', 
type: #IDENTIFICATION_REFERENCE 
} ]
 @UI.lineItem: [{ position: 10, label: 'Travel Id' }]
 @UI.identification: [{ position: 10 }]
    travel_id;
 @UI.lineItem: [{ position: 20, label: 'Email' }]
 @UI.identification: [{ position: 20 }]
    user_email;
 @UI.lineItem: [{ position: 30, label: 'Travel Date' }]
 @UI.identification: [{ position: 30 }]
    start_date;
 @UI.lineItem: [{ position: 40, label: 'Destination' }]
 @UI.identification: [{ position: 40 }]
    destination;
 @UI.lineItem: [{ position: 50, label: 'Status' }]
 @UI.identification: [{ position: 50 }]
    status;
 @UI.lineItem: [{ position: 60, label: 'Expense Type' }]
 @UI.identification: [{ position: 60 }]
    expense_type;
 @UI.lineItem: [{ position: 65, label: 'Amount' }]
 @UI.identification: [{ position: 65 }]
    total_cost;
 @UI.lineItem: [{ position: 70, label: 'Currency' }]
 @UI.identification: [{ position: 70 }]
    curr_key;
 @UI.lineItem: [{ position: 80, label: 'Remarks for Expense' }]
 @UI.identification: [{ position: 80 }]
    remarks;
 @UI.lineItem: [{ position: 85, label: 'Created By' }]
 @UI.identification: [{ position: 10 }]
    created_by;
 @UI.lineItem: [{ position: 90, label: 'Created Date' }]
 @UI.identification: [{ position: 90 }]
    created_on;   
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Now activate the Basic view and the meta data extension, when it gets activated the Business Object get created implicitly.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now open the BOBX Transaction.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757592499811.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313013iA3CE0EC7DAE390B8/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Krishna_karale_0-1757592499811.png" alt="Krishna_karale_0-1757592499811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can search the business object in Home business objects or click on the below marked option.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757592499815.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313014iC696BF0CC68256E1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757592499815.png" alt="Krishna_karale_1-1757592499815.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the BO name which is our Basic View name (ZI_KK_TRAVEL)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757592550543.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313015iEB32B50190C69B55/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757592550543.png" alt="Krishna_karale_2-1757592550543.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_3-1757592550545.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313016i52BC1E6BA95F4920/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_3-1757592550545.png" alt="Krishna_karale_3-1757592550545.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now to Implement the validations expand the Node Elements &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_4-1757592664872.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313018iAD4AC1A6BC6E15F5/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_4-1757592664872.png" alt="Krishna_karale_4-1757592664872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Right Click on Validations will see the option to Create Validations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_5-1757592664876.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313019iFE10A410C3DA9B77/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_5-1757592664876.png" alt="Krishna_karale_5-1757592664876.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the Validation Name and Description and Class for implementing the validation logic.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_6-1757592724202.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313021iE409E1816592FD3A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_6-1757592724202.png" alt="Krishna_karale_6-1757592724202.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Double click on Class Name, and create a class which will be having the super class implicitly&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_7-1757592724204.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313022i60C54D71A4DAD6DC/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_7-1757592724204.png" alt="Krishna_karale_7-1757592724204.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_8-1757592724206.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313023i7D5C4DCD05FAB412/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_8-1757592724206.png" alt="Krishna_karale_8-1757592724206.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now we have to provide Triggering conditions for the validations, so select the Node instance and tick on Create, Update, Delete and Check &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_9-1757592724208.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313025i9F8AA07FF69DD538/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_9-1757592724208.png" alt="Krishna_karale_9-1757592724208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Save it and check and generate it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_10-1757592724210.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313024i2B58966A704D4508/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_10-1757592724210.png" alt="Krishna_karale_10-1757592724210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;After this we have to go&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;to eclipse and &lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt; a service definition on basic &lt;/SPAN&gt;&lt;SPAN class=""&gt;view&lt;/SPAN&gt; &lt;SPAN class=""&gt;(&lt;/SPAN&gt;&lt;SPAN class=""&gt;ZI_KK_TRAVEL)&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757593000483.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313029i1C822052AE6EFECE/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_0-1757593000483.png" alt="Krishna_karale_0-1757593000483.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now create a Service binding on top of Service definition and publish it &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757593000486.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313028i7CF7AC634D5DAC04/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757593000486.png" alt="Krishna_karale_1-1757593000486.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When we preview it &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It will be navigated to the frontend while navigating it will ask for your SAP GUI Credentials to login.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757594121268.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313059iAEC5D4AF3D524A70/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757594121268.png" alt="Krishna_karale_2-1757594121268.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now go to SE91 Transaction and create a message class &lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_3-1757593000492.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313032iC0B1ADEA725893E0/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_3-1757593000492.png" alt="Krishna_karale_3-1757593000492.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here, I am doing Validation for a Single status field only so i have passed only two messages &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_4-1757593127901.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313039iA7B37EE8E3E92A3F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_4-1757593127901.png" alt="Krishna_karale_4-1757593127901.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;Now I want to provide the Validations for Status field, so go to our class which we have created in Validations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_5-1757593127904.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313040i39BD2E5B3B58359A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_5-1757593127904.png" alt="Krishna_karale_5-1757593127904.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;Implement our Custom login in this method.&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD /bobf/if_frw_validation~execute.

    CLEAR : et_failed_key, eo_message.
    eo_message = /bobf/cl_frw_factory=&amp;gt;get_message( ).
    DATA : lt_data TYPE ztikk_travel,   " Table type for header node
           ls_msg  TYPE symsg.
    io_read-&amp;gt;retrieve(
      EXPORTING
        iv_node                 = is_ctx-node_key
        it_key                  = it_key
        iv_fill_data            = abap_true
        it_requested_attributes = VALUE #(
                                          (                 zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status )
                                         ) )
      IMPORTING
        et_data                 = lt_data
    ).
    LOOP AT lt_data REFERENCE INTO DATA(ls_data).
      IF ls_data-&amp;gt;status IS INITIAL .
        ls_msg-msgid = 'ZKK_MSG_BOPF'.
        ls_msg-msgno = '000'.
        ls_msg-msgty = 'E'.

        eo_message-&amp;gt;add_message(
          is_msg       = ls_msg                 " Message that is to be added to the message object
          iv_node      = is_ctx-node_key            " Node to be used in the origin location
          iv_key       = ls_data-&amp;gt;key            " Instance key to be used in the origin location
iv_attribute = zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status
          " Attribute to be used in the origin location
        ).

        INSERT VALUE #( key = ls_data-&amp;gt;key ) INTO TABLE et_failed_key.
      ENDIF.

      DATA(lv_status) = to_upper( condense( ls_data-&amp;gt;status ) ).
      IF lv_status NA 'ACCEPT' OR lv_status NA 'REJECT'.
        ls_msg-msgid = 'ZKK_MSG_BOPF'.
        ls_msg-msgno = '001'.
        ls_msg-msgty = 'E'.

        eo_message-&amp;gt;add_message(
          is_msg       = ls_msg
          iv_node      = is_ctx-node_key
          iv_key       = ls_data-&amp;gt;key
          iv_attribute = zif_i_kk_travel_c=&amp;gt;sc_node_attribute-zi_kk_travel-status
        ).

        INSERT VALUE #( key = ls_data-&amp;gt;key ) INTO TABLE et_failed_key.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;Now go to service binding and preview it. Try to create a new record.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here I am keeping Status field as empty so it will throw error.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_0-1757593607942.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313054i8AFBB4A6CB13AC7F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_0-1757593607942.png" alt="Krishna_karale_0-1757593607942.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now Status should accept only ‘ACCEPT’ or ‘REJECT’. If I&amp;nbsp;try to give any other value it will throw error again.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_1-1757593607945.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313055i5F011EB0883B6BFE/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_1-1757593607945.png" alt="Krishna_karale_1-1757593607945.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you give the correct value ‘Accept’ or ‘Reject’.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Krishna_karale_2-1757593607947.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313053iAD827C3ADC2B81D1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Krishna_karale_2-1757593607947.png" alt="Krishna_karale_2-1757593607947.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1889114913"&gt;&lt;U&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/U&gt;&lt;/H3&gt;&lt;P&gt;Validations in BOPF play a vital role in safeguarding data quality and enforcing business rules at the framework level. By defining validations directly on the business object nodes, we ensure that only consistent and compliant data enters the system, regardless of whether it originates from an SAP UI, an external interface, or a background process. This not only strengthens the reliability of the application but also reduces the need for redundant checks across different layers. In short, validations serve as a powerful and centralized mechanism to guarantee data integrity within the BOPF model.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/validations-in-bopf-and-consistency-validation-in-bopf/ba-p/14214587"/>
    <published>2025-09-24T07:00:43.999000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/step-by-step-guide-to-creating-a-custom-business-object-in-bopf/ba-p/14219614</id>
    <title>Step-by-Step Guide to Creating a Custom Business Object in BOPF</title>
    <updated>2025-09-24T07:03:08.226000+02:00</updated>
    <author>
      <name>Naveen_n</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1388970</uri>
    </author>
    <content>&lt;P&gt;Introduction&amp;nbsp;&lt;/P&gt;&lt;P&gt;The Business Object Processing Framework (BOPF) is an SAP framework that simplifies the development of business objects by providing a standardized way to handle data persistence, business logic, validations, determinations, and actions. Instead of writing custom code for every use case, developers can rely on BOPF’s reusable building blocks, ensuring consistency and reducing development effort.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In this guide, we will walk through the step-by-step process of creating a custom Business Object in BOPF. Starting with the creation of dictionary elements, moving through defining the root node and generating dictionary artifacts in transaction BOBX, and finally testing our object in BOBT, you’ll gain a clear understanding of how to set up and validate your first custom BO.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Steps to Create a Custom Business Object&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Create the Business Object in BOBX&amp;nbsp;&lt;BR /&gt;Go to transaction BOBX.&amp;nbsp;&lt;BR /&gt;Click on the Create menu option.&amp;nbsp;&lt;BR /&gt;Enter the Business Object name and description.&amp;nbsp;&lt;BR /&gt;In the Properties section, select Business Object.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_0-1758091096241.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315626i3A44179849257F89/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Naveen_n_0-1758091096241.png" alt="Naveen_n_0-1758091096241.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_1-1758091096243.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315628iD9E0E09A85F5E0B6/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_1-1758091096243.png" alt="Naveen_n_1-1758091096243.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Define the Root Node&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Click on ROOT.&amp;nbsp;&lt;BR /&gt;Provide the following:&amp;nbsp;&lt;BR /&gt;Data Structure&amp;nbsp;&lt;BR /&gt;Combined Structure&amp;nbsp;&lt;BR /&gt;Combined Table Type&amp;nbsp;&lt;BR /&gt;Database Table Name&amp;nbsp;&lt;BR /&gt;Click Save.&amp;nbsp;&lt;BR /&gt;Double-click on the database table name. If it does not exist, create it explicitly in SE11.&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_2-1758091096245.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315627i7B4B1B40935345F6/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_2-1758091096245.png" alt="Naveen_n_2-1758091096245.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_3-1758091096247.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315630i5C27FC11C41779A2/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_3-1758091096247.png" alt="Naveen_n_3-1758091096247.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Generate Dictionary Elements&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Once the database table is created, return to BOBX.&amp;nbsp;&lt;BR /&gt;Navigate to Extras → Generate Dictionary Elements.&amp;nbsp;&lt;BR /&gt;This will automatically generate the required structures and table types.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_4-1758091096250.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315629iEC7876C49A6C94C0/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_4-1758091096250.png" alt="Naveen_n_4-1758091096250.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_5-1758091096252.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315631i0C4CBDF84A40FED0/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_5-1758091096252.png" alt="Naveen_n_5-1758091096252.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_6-1758091096255.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315632iCAA7970C916FB817/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_6-1758091096255.png" alt="Naveen_n_6-1758091096255.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Check and Generate&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Run Check and Correct in BOBX to validate your business object.&amp;nbsp;&lt;BR /&gt;Once validation is successful, click on the Generate button.&amp;nbsp;&lt;BR /&gt;The system generates the BOPF repository objects for your Business Object.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_7-1758091096257.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315635iFFE55E83ADF76943/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_7-1758091096257.png" alt="Naveen_n_7-1758091096257.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_8-1758091096259.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315633i52A439D4F0998E64/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_8-1758091096259.png" alt="Naveen_n_8-1758091096259.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_9-1758091096261.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315637i865A709F6A9D3865/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_9-1758091096261.png" alt="Naveen_n_9-1758091096261.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Test the Business Object in BOBT&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Go to transaction BOBT.&amp;nbsp;&lt;BR /&gt;Select your custom Business Object.&amp;nbsp;&lt;BR /&gt;Perform test operations such as Create, Update, and Delete.&amp;nbsp;&lt;BR /&gt;Verify that the database entries are updated correctly.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_10-1758091096262.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315636iA9479A9E4A8947A2/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Naveen_n_10-1758091096262.png" alt="Naveen_n_10-1758091096262.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_11-1758091096262.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315638i892BDDD112E057F3/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_11-1758091096262.png" alt="Naveen_n_11-1758091096262.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_12-1758091096263.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315639i5292754BBFC37B7A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_12-1758091096263.png" alt="Naveen_n_12-1758091096263.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_n_13-1758091096265.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315640iEA3FD4682626123C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Naveen_n_13-1758091096265.png" alt="Naveen_n_13-1758091096265.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Conclusion:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;By following the steps outlined in this guide, you can successfully create, configure, and test a custom Business Object in BOPF. Using BOBX for modeling and generation and BOBT for testing, you gain hands-on experience with one of the most powerful frameworks in SAP for managing business data and logic.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;BOPF not only reduces manual coding but also enforces a structured, model-driven development approach, making your applications easier to maintain and extend. Once you are comfortable with creating root nodes and dictionary elements, you can explore advanced topics such as actions, determinations, validations, and associations to implement complete business processes.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/step-by-step-guide-to-creating-a-custom-business-object-in-bopf/ba-p/14219614"/>
    <published>2025-09-24T07:03:08.226000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/working-with-internal-tables-parallel-cursor-control-break-statements/ba-p/14220084</id>
    <title>Working with Internal Tables, Parallel cursor, Control Break Statements, Messages</title>
    <updated>2025-09-24T07:10:34.969000+02:00</updated>
    <author>
      <name>mandanaveenofficial</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1975320</uri>
    </author>
    <content>&lt;P&gt;Working with internal Tables&lt;/P&gt;&lt;P&gt;Below topics we are going to discuss in detail&lt;/P&gt;&lt;P&gt;1.Types of Internal Tables&lt;/P&gt;&lt;P&gt;2.Creating Internal Tables&lt;/P&gt;&lt;P&gt;3.Populating and Processing Internal Tables&lt;/P&gt;&lt;P&gt;4.Usage of work area and Field-symbol&lt;/P&gt;&lt;P&gt;5.Data manipulation in Internal table&lt;/P&gt;&lt;P&gt;6.Parallel Cursor usage&lt;/P&gt;&lt;P&gt;7.Control Break Statements&lt;/P&gt;&lt;P&gt;8.Messages&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;1. Types of Internal Tables&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In SAP ABAP (Advanced Business Application Programming),&amp;nbsp;Internal tables&amp;nbsp;are used to store temporary data during program execution.&lt;/P&gt;&lt;P&gt;There are&amp;nbsp;three main types of internal tables&amp;nbsp;in SAP:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Standard Internal Table&lt;/LI&gt;&lt;LI&gt;Sorted Internal Table&lt;/LI&gt;&lt;LI&gt;Hashed Internal Table&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Standard Internal Table &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This is default internal table type.&lt;/P&gt;&lt;P&gt;In Standard internal table, Table entries are stored in the order they are inserted.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Standard internal table are not sorted automatically. We have to use the SORT statement for sorting the table entries based on keys.&lt;/LI&gt;&lt;LI&gt;Standard internal table follows Linear search process for searching the records&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Here passing of data from work area to internal table is through APPEND keyword.&lt;/LI&gt;&lt;LI&gt;Standard internal table is not recommended for large datasets&lt;/LI&gt;&lt;LI&gt;Standard internal table accepts duplicate entries unless explicitly defined with a unique key.&lt;/LI&gt;&lt;LI&gt;Standard internal table is accessed by using index or key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Usage: Standard internal table is recommended only when sequence of fields are mattered or dealing with small datasets.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Example :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;DATA: lt_standard TYPE STANDARD TABLE OF mara.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Sorted Internal Table&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Sorted internal table entries are automatically sorted based on a defined key.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Sorted internal table follows binary search process for searching of records&lt;/LI&gt;&lt;LI&gt;Here passing of data from work area to internal table is through INSERT keyword.&lt;/LI&gt;&lt;LI&gt;Can enforce unique keys or allow duplicates depending on declaration&lt;/LI&gt;&lt;LI&gt;Here we must specify at least one field as unique or non-unique&lt;/LI&gt;&lt;LI&gt;Cannot manually sort or insert at a specific position.&lt;/LI&gt;&lt;LI&gt;Sorted internal table is accessed by using index or key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Usage: Sorted internal table is recommended for reading the entries based on keys&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Example:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;DATA: lt_sorted TYPE SORTED TABLE OF mara WITH UNIQUE KEY matnr.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hashed Internal Table&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Hashed internal table uses a hashed algorithm for key-based access.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Hashed internal table follows Hashed Algorithm for searching of single record&lt;/LI&gt;&lt;LI&gt;Here passing of data from work area to internal table is through COLLECT keyword.&lt;/LI&gt;&lt;LI&gt;Fastest access for reading single entries using keys.&lt;/LI&gt;&lt;LI&gt;It does not accept duplicate records.&lt;/LI&gt;&lt;LI&gt;Only allows unique keys.&lt;/LI&gt;&lt;LI&gt;Hashed internal table is accessed by using key only&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Usage: Hashed internal table is recommended for reading single entry from table by using key&lt;/P&gt;&lt;P&gt;Example: DATA: lt_hashed TYPE HASHED TABLE OF mara WITH UNIQUE KEY matnr.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Decision Framework of Standard/ Sorted / Hashed Internal Tables&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_1-1758108428636.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315795i4B3AD60DEF73EAFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_1-1758108428636.png" alt="Naveen_Manda1_1-1758108428636.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2. Creating Internal Tables &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Examples for creating Internal tables with type declarations and using standard table&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_2-1758108498709.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315797i20C5D42132B3D734/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_2-1758108498709.png" alt="Naveen_Manda1_2-1758108498709.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3.&amp;nbsp;Populating and processing Internal Table&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Example1: Standard table&amp;nbsp; Example with Reading data from table MARA (General Article Data)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_5-1758108565208.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315800i07F43B3015B3444E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_5-1758108565208.png" alt="Naveen_Manda1_5-1758108565208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Example 2 : Appending the data to Internal table&amp;nbsp; and display.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_6-1758108591369.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315801iC27F5A828CFE6413/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_6-1758108591369.png" alt="Naveen_Manda1_6-1758108591369.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_7-1758108597174.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315802i8CFB1C940E01F24A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_7-1758108597174.png" alt="Naveen_Manda1_7-1758108597174.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Example 3 : Sorted table data display&lt;/P&gt;&lt;P&gt;a&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_8-1758108617398.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315803i744932AF52C9AB10/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_8-1758108617398.png" alt="Naveen_Manda1_8-1758108617398.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_9-1758108631753.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315804i4CF92573B8037186/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_9-1758108631753.png" alt="Naveen_Manda1_9-1758108631753.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Example 4: Hashed table&amp;nbsp; data display&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_10-1758108672712.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315805iA9B989EB62A85384/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_10-1758108672712.png" alt="Naveen_Manda1_10-1758108672712.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_11-1758108689703.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315807i1B32F244E7A80768/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_11-1758108689703.png" alt="Naveen_Manda1_11-1758108689703.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;4. Usage of Work area and Field Symbol&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_12-1758108819570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315810i6088F94CA9FD4D8F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_12-1758108819570.png" alt="Naveen_Manda1_12-1758108819570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Example on using work area&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_13-1758108882570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315811i0C6CD3EACF49B88C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_13-1758108882570.png" alt="Naveen_Manda1_13-1758108882570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Result:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_14-1758108907551.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315813i4B682EB91466D706/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_14-1758108907551.png" alt="Naveen_Manda1_14-1758108907551.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Example on Field-symbol&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_15-1758108922544.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315814iCDF320D3C5141D49/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_15-1758108922544.png" alt="Naveen_Manda1_15-1758108922544.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Result&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_16-1758108929662.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315815i165752184CDAE54F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_16-1758108929662.png" alt="Naveen_Manda1_16-1758108929662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;5. Data manipulation in Internal Table&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_17-1758109058950.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315817i1F85F4150C9451BA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_17-1758109058950.png" alt="Naveen_Manda1_17-1758109058950.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_18-1758109085277.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315818iDA339EB04ED374E2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_18-1758109085277.png" alt="Naveen_Manda1_18-1758109085277.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Result&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_19-1758109115211.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315819iDC4023D92A11BA63/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_19-1758109115211.png" alt="Naveen_Manda1_19-1758109115211.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;6.Parallel Cursor&lt;/P&gt;&lt;P class=""&gt;Parallel cursor is a performance optimization technique used primarily to enhance the efficiency of programs involving nested loops, especially when dealing with large internal tables.&lt;/P&gt;&lt;P class=""&gt;Improve the performance of program.&lt;/P&gt;&lt;P class=""&gt;Decreases the CPU and memory consumption associated with extensive loop iterations.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_20-1758109428852.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315820i5BB1970AFD925C9D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_20-1758109428852.png" alt="Naveen_Manda1_20-1758109428852.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;7.Control Break Statements&lt;/P&gt;&lt;P class=""&gt;Control break statements are events inside the loop statement.&lt;/P&gt;&lt;P class=""&gt;There are 5 control break statements in ABAP.&lt;/P&gt;&lt;P class=""&gt;They are used within loop.(Except ON CHANGE OF which can be used outside the loop as well)&lt;/P&gt;&lt;P class=""&gt;AT FIRST - ENDAT&lt;/P&gt;&lt;P class=""&gt;AT NEW - ENDAT&lt;/P&gt;&lt;P class=""&gt;AT END OF - ENDAT&lt;/P&gt;&lt;P class=""&gt;AT LAST - ENDAT&lt;/P&gt;&lt;P class=""&gt;ON CHANGE OF&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;AT FIRST&lt;/STRONG&gt;: Will trigger at the first run of the loop.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;AT LAST&lt;/STRONG&gt;: Will trigger at the last run of the loop.&lt;/P&gt;&lt;P class=""&gt;The below 3 events are normally used when the table is sorted.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;AT END OF&lt;/STRONG&gt; : When we use At end for a field, it will trigger whenever there is any change in any of the fields from the left to that of the particular field. The trigger point will be the at the last occurrence &amp;nbsp;of the same value for the field.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;AT NEW&lt;/STRONG&gt;: When we use At new for a field, it will trigger whenever there is any change in any of the fields from the left to that of the particular field.The trigger point will be the at the first occurrence of the new value for the field.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;ON CHANGE OF&lt;/STRONG&gt;: On change of it triggers only when there is any change in the particular field.&lt;/P&gt;&lt;P class=""&gt;On change of can be used outside the loop too&lt;/P&gt;&lt;P&gt;Example code on Control Break Statements&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_21-1758109691186.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315823iDEAFFD3B746EF711/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_21-1758109691186.png" alt="Naveen_Manda1_21-1758109691186.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_22-1758110343651.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315828i4CDFEE4F508E0DBA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_22-1758110343651.png" alt="Naveen_Manda1_22-1758110343651.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_23-1758111321451.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315852i3AB448A890E5644E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_23-1758111321451.png" alt="Naveen_Manda1_23-1758111321451.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_24-1758111355776.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315853i28009934266C83BD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_24-1758111355776.png" alt="Naveen_Manda1_24-1758111355776.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_25-1758111369241.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315854i0BE3F2E936081D6F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_25-1758111369241.png" alt="Naveen_Manda1_25-1758111369241.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_26-1758111436649.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315855i2FAC36A6D4FC8826/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_26-1758111436649.png" alt="Naveen_Manda1_26-1758111436649.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_27-1758111491119.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315856i1FA3F44601ACE936/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_27-1758111491119.png" alt="Naveen_Manda1_27-1758111491119.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_28-1758111523266.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315857iB2D4FD3C559C0DD7/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_28-1758111523266.png" alt="Naveen_Manda1_28-1758111523266.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;8. Messages&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;In classical ABAP reports, messages are used to communicate information, warnings, errors, or success statuses to the user.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;These messages are typically displayed on the screen or in the status bar, and their behaviour depends on the message type.&lt;/LI&gt;&lt;LI&gt;Message Types in ABAP&lt;/LI&gt;&lt;OL class=""&gt;&lt;LI&gt;Success - Type S - Displays the status of the program. ( Success message)&lt;/LI&gt;&lt;LI&gt;Error - Type E - An error message appears and the program stops.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Information - Type I - &amp;nbsp;The program is executed and information message&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;is displayed&lt;/LI&gt;&lt;LI&gt;Warning - Type W - This is used to display warning information for the user, but they don’t stop the program&lt;/LI&gt;&lt;LI&gt;Exit - Type X - The program terminates and the detailed information can be found in transaction ST22&lt;/LI&gt;&lt;LI&gt;Abort - Type&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;A - The message appears in a dialog box and the program terminates.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;Success Message: &lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax : MESSAGE 'Success message: Operation successful!' TYPE ’S'.&lt;/P&gt;&lt;P class=""&gt;Output :&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_29-1758111602739.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315859iCFB8ED678CE35C85/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_29-1758111602739.png" alt="Naveen_Manda1_29-1758111602739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Information Message&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax:&lt;SPAN class=""&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;MESSAGE 'Informational message.' TYPE ‘I'.&lt;/P&gt;&lt;P class=""&gt;Output:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_30-1758111655869.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315861i8EE1D08FA281776B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_30-1758111655869.png" alt="Naveen_Manda1_30-1758111655869.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Warning Message:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax: MESSAGE 'Warning message: Data inconsistent' TYPE ‘W'.&lt;/P&gt;&lt;P class=""&gt;Output&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_31-1758111690871.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315862i4B03DC77D41F1276/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_31-1758111690871.png" alt="Naveen_Manda1_31-1758111690871.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;Syntax: MESSAGE 'Warning message: Data inconsistent' TYPE 'W' DISPLAY LIKE ‘I'.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_32-1758111702506.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315863i6DA6088B0C583CF1/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_32-1758111702506.png" alt="Naveen_Manda1_32-1758111702506.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Error Message: &lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax:&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;MESSAGE 'Error Message: An error occurred during processing.' TYPE ‘E'.&lt;/P&gt;&lt;P class=""&gt;Output&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_33-1758111708996.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315864iFCB248395F3ED57E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_33-1758111708996.png" alt="Naveen_Manda1_33-1758111708996.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Abort Message &lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax: MESSAGE 'Abort Message:&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;Program terminated due to critical error.' TYPE 'A'.&lt;/P&gt;&lt;P class=""&gt;Output:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_34-1758111727927.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315865iFADD59F0A0BC5864/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_34-1758111727927.png" alt="Naveen_Manda1_34-1758111727927.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Exit Message&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Syntax:&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;MESSAGE 'Exit Message: Critical error encountered!' TYPE 'X'.&lt;/P&gt;&lt;P class=""&gt;Output:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_35-1758111752493.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315866i38166B74C653E46B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_35-1758111752493.png" alt="Naveen_Manda1_35-1758111752493.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Creating Message through text messages in report&lt;/STRONG&gt;&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;SE38—&amp;gt; In Menu bar select&lt;SPAN class=""&gt;&amp;nbsp; &lt;/SPAN&gt;GOTO —&amp;gt; Select text symbols —&amp;gt; enter text name&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_36-1758111791162.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315867i0C49138BAEC9E99F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Naveen_Manda1_36-1758111791162.png" alt="Naveen_Manda1_36-1758111791162.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Code: Message text-001 type 'S'.&lt;/P&gt;&lt;P class=""&gt;Output:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Naveen_Manda1_37-1758111819713.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315868i6C65BC343DD12EFE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Naveen_Manda1_37-1758111819713.png" alt="Naveen_Manda1_37-1758111819713.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thanks!!&lt;/P&gt;&lt;P&gt;Finally we covered working with internal tables, creating and populating data in report , work area&amp;nbsp; and field symbol usage , Parallel cursor usage, Control break statements, Messages&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/working-with-internal-tables-parallel-cursor-control-break-statements/ba-p/14220084"/>
    <published>2025-09-24T07:10:34.969000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report/ba-p/14190153</id>
    <title>BRF+ Object Creation using ABAP Z-Report</title>
    <updated>2025-09-24T07:11:38.092000+02:00</updated>
    <author>
      <name>manoj_sm</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/151098</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1738668106"&gt;&lt;SPAN&gt;Introduction&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;When working with SAP BRF+ (Business Rule Framework Plus), &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Elements&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; are the most basic building blocks. They represent data fields such as numbers, text, or dates, and act as reusable components for structures, tables, functions, and rules. Without elements, we cannot define or process rules effectively in BRF+.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we will learn how to create &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;BRF+ Elements programmatically&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; using ABAP. This provides a scalable way to automate the creation of data objects and integrate them into larger rule frameworks.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1542154601"&gt;&lt;SPAN&gt;Why Elements?&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Describes data types of the variable. They are the data carriers helping in signature or context of a function,&amp;nbsp;variables in a rule or rulesets, building blocks for Decision tables, Etc. You can create data objects by defining&amp;nbsp;attributes like element type, length, decimals or you can directly bind to existing DDIC elements.&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Reusability&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Once created, elements can be used in multiple structures and rules.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Flexibility&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Programmatic creation ensures consistency across environments.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1345641096"&gt;&lt;SPAN&gt;ABAP Program to Create Elements&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Below is a sample ABAP program (&lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_BRF_APP&lt;/SPAN&gt;&lt;SPAN&gt;) that:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN&gt;Creates a BRF+ Application.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN&gt;Defines three Elements (&lt;/SPAN&gt;&lt;SPAN&gt;ELEMENT_1&lt;/SPAN&gt;&lt;SPAN&gt;, &lt;/SPAN&gt;&lt;SPAN&gt;ELEMENT_2&lt;/SPAN&gt;&lt;SPAN&gt;, and &lt;/SPAN&gt;&lt;SPAN&gt;CARRID&lt;/SPAN&gt;&lt;SPAN&gt;).&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; Report ZDEMO_BRF_APP
*&amp;amp;---------------------------------------------------------------------*
*&amp;amp;
*&amp;amp;---------------------------------------------------------------------*
REPORT zdemo_brf_app.

DATA: lo_factory           TYPE REF TO if_fdt_factory,
      lo_application       TYPE REF TO if_fdt_application,
      lt_message           TYPE if_fdt_types=&amp;gt;t_message,
      lv_message           TYPE string,
      lv_boolean           TYPE abap_bool,
      lv_demo_appl_id      TYPE if_fdt_types=&amp;gt;id,
      lv_string            TYPE string,
      lo_element_1         TYPE REF TO if_fdt_element,
      lo_element_2         TYPE REF TO if_fdt_element,
      lo_element_3         TYPE REF TO if_fdt_element,
      lo_table             TYPE REF TO if_fdt_table,
      lo_table_1           TYPE REF TO if_fdt_table,
      lo_structure         TYPE REF TO if_fdt_structure,
      lv_element1_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element2_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element3_id       TYPE if_fdt_types=&amp;gt;id,
      lv_input_number_id   TYPE if_fdt_types=&amp;gt;id,
      lv_result_counter_id TYPE if_fdt_types=&amp;gt;id,
     

FIELD-SYMBOLS:
  &amp;lt;ls_message&amp;gt; TYPE if_fdt_types=&amp;gt;s_message,
  &amp;lt;lv_value&amp;gt;   TYPE any.


PARAMETERS: pv_lcl  TYPE abap_bool RADIOBUTTON GROUP r00 DEFAULT 'X',
            pv_sys  TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_mstr TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_name TYPE char30.
*           p_ele_01  TYPE i DEFAULT 5,
*            p_ele_02  TYPE i DEFAULT 4,
*            p_ele_03  TYPE i DEFAULT 8,
*            p_ele_04  TYPE i DEFAULT 3,
*            p_ele_05  TYPE i DEFAULT 13,
*            p_ele_06  TYPE i DEFAULT 2.
*           pv_ele   TYPE char20,
*           pv_str TYPE char20,
*           pv_tab TYPE char20.

IF pv_name IS NOT INITIAL AND pv_lcl IS NOT INITIAL OR pv_sys IS NOT INITIAL OR pv_mstr IS NOT INITIAL.

* get a reference to the instance of the factory
  lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( ).

* =============================================================
* definition of the new application:
* get an initial application object from the factory
  lo_application = lo_factory-&amp;gt;get_application( ).
  lo_application-&amp;gt;if_fdt_transaction~enqueue( ).
* set values for the application, especially the name is important
* You need to have a unique name for each application, here we use the
* FDT Service class method to get the unique name.
  lo_application-&amp;gt;set_application_component( 'BC' ).        "#EC NOTEXT
  lo_application-&amp;gt;set_software_component( 'SAP_BASIS' ).    "#EC NOTEXT
  lo_application-&amp;gt;set_development_package( '$TMP' ).        "#EC NOTEXT
*lo_application-&amp;gt;if_fdt_admin_data~set_name( cl_fdt_services=&amp;gt;get_unique_name( ) ).
  lo_application-&amp;gt;if_fdt_admin_data~set_name( pv_name ).


* In FDT terms there are 3 different type of Applications, Local application,
* system pplication and MasterData Application. The following lines shows how you
* can create local Application, masterdata Application and system Application.
  IF pv_lcl EQ abap_true.
    lo_application-&amp;gt;create_local_application( ).
  ELSEIF pv_sys EQ abap_true.
    lo_application-&amp;gt;create_system_application( ).
  ELSEIF pv_mstr EQ abap_true.
    lo_application-&amp;gt;create_masterdata_application( ).
  ENDIF.
  lo_application-&amp;gt;if_fdt_transaction~activate(
             IMPORTING et_message           = lt_message
                       ev_activation_failed = lv_boolean ).
  IF lv_boolean EQ abap_true.
*     for some reason the activation failed -&amp;gt; individual handling needed
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
  ELSE.
    lo_application-&amp;gt;if_fdt_transaction~save( ).
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
*     usually it makes sense to store the id for later access to the application
    lv_demo_appl_id = lo_application-&amp;gt;mv_id.
  ENDIF.
  WRITE: 'The ID of the application created is: ', lv_demo_appl_id. "#EC NOTEXT
ELSE.
  MESSAGE 'Provide all the required information' TYPE 'E'.
ENDIF.
*for creating Element,Structure,Table by Data Object


lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( lv_demo_appl_id ).
*                          if_fdt_constants=&amp;gt;gc_application_tmp  ).
* Note, that you are not required to use an application as input; however,
* we recommend to do so and work with a specific application instead of
* the generic local FDT applications.
*------------Element
lo_element_1 ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_element ).
lo_element_1-&amp;gt;if_fdt_transaction~enqueue( ).
lo_element_1-&amp;gt;if_fdt_admin_data~set_name( 'ELEMENT_1' ).

* set the element-type (see if_fdt_constants=&amp;gt;gc_element_type_* for
* a list of available element types)
lo_element_1-&amp;gt;set_element_type( if_fdt_constants=&amp;gt;gc_element_type_number ).

******************************************************************************
* Alternately user can create an element using the service clas method
* CL_FDT_CONVENIENCE=&amp;gt;CREATE_ELEMENT as follows.
*
* cl_fdt_convenience=&amp;gt;create_element( EXPORTING iv_name = 'DEMO_ELEMENT_1'
*                                              iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                              iv_element_type   = if_fdt_constants=&amp;gt;gc_element_type_number
*                                              iv_activate       = ABAP_false
*                                    IMPORTING
*                                              eo_element        = lo_element ).
*******************************************************************************
* Set some attributes for the element.
lo_element_1-&amp;gt;set_element_type_attributes(
  EXPORTING
    iv_length        = 6
    iv_decimals      = 2
    iv_only_positive = abap_false ).

lo_element_1-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
* for some reason the activation failed -&amp;gt; individual handling needed
  lo_element_1-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_element_1-&amp;gt;if_fdt_transaction~save( ).
  lo_element_1-&amp;gt;if_fdt_transaction~dequeue( ).
* usually it makes sense to store the id for later access
  lv_element1_id = lo_element_1-&amp;gt;mv_id.

  ls_element-position = 1.
  ls_element-element_id = lv_element1_id.
  APPEND ls_element TO lts_element.
ENDIF.

* Create another element
lo_element_2 ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_element ).
lo_element_2-&amp;gt;if_fdt_transaction~enqueue( ).
lo_element_2-&amp;gt;if_fdt_admin_data~set_name( 'ELEMENT_2' ).



* set the element-type (see if_fdt_constants=&amp;gt;gc_element_type_* for
* a list of available element types)
lo_element_2-&amp;gt;set_element_type( if_fdt_constants=&amp;gt;gc_element_type_number ).

lo_element_2-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
* for some reason the activation failed -&amp;gt; individual handling needed
  lo_element_2-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_element_2-&amp;gt;if_fdt_transaction~save( ).
  lo_element_2-&amp;gt;if_fdt_transaction~dequeue( ).
* usually it makes sense to store the id for later access to the application
  lv_element2_id = lo_element_2-&amp;gt;mv_id.
  ls_element-position = 2.
  ls_element-element_id = lv_element2_id.
  APPEND ls_element TO lts_element.
ENDIF.

* create a third element
lo_element_3 ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_element ).
lo_element_3-&amp;gt;if_fdt_transaction~enqueue( ).
lo_element_3-&amp;gt;if_fdt_admin_data~set_name( ' CARRID ' ).
lo_element_3-&amp;gt;set_element_type( if_fdt_constants=&amp;gt;gc_element_type_number ).

lo_element_3-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
* for some reason the activation failed -&amp;gt; individual handling needed
  lo_element_3-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_element_3-&amp;gt;if_fdt_transaction~save( ).
  lo_element_3-&amp;gt;if_fdt_transaction~dequeue( ).
* usually it makes sense to store the id for later access to the application
  lv_element3_id = lo_element_3-&amp;gt;mv_id.
  ls_element-position = 3.
  ls_element-element_id = lv_element3_id.
  APPEND ls_element TO lts_element.
ENDIF.
* WRITE: / lo_element-&amp;gt;mv_id .
lv_string = lo_element_1-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to string method call Element: ' , lv_string. "#EC NOTEXT&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-1149127591"&gt;&lt;SPAN&gt;Execution &amp;amp; Output&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;When you execute the above ABAP report, the newly created &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Application and Elements&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; will immediately be reflected in the BRF+ Workbench (/nBRF+). You can navigate to the workbench to verify that the application &lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_APP&lt;/SPAN&gt;&lt;SPAN&gt; and its elements have been created successfully.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183254.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315883iB6D2B340C3182643/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183254.png" alt="Screenshot 2025-09-17 183254.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183237.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315886i6FC868376F4CF813/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183237.png" alt="Screenshot 2025-09-17 183237.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183157.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315885i9101A9EC7B85CA3E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183157.png" alt="Screenshot 2025-09-17 183157.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183106.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315887iA7BBC93F259DB8BD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183106.png" alt="Screenshot 2025-09-17 183106.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After running the program, you will see system-generated IDs for each element created. These IDs are crucial when referencing the elements in Structures, Rules, or Functions.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-952614086"&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;In the next part of this blog series, we will explore how to create &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Structures&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; using these Elements. Subsequent blogs will also cover &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Table, DB Lookup, Loop, Formula, Rule, and Function&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; in detail.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report/ba-p/14190153"/>
    <published>2025-09-24T07:11:38.092000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/maintain-file-in-web-repository/ba-p/14223659</id>
    <title>Maintain File In WEB Repository</title>
    <updated>2025-09-24T12:44:39.921000+02:00</updated>
    <author>
      <name>Nayanakumar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1490076</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Transaction code&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;SMW0&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;in SAP ABAP is the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;SAP Web Repository&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Its primary purpose is to&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;manage binary and text-based objects&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;that are used by various applications within the SAP system, particularly those related to web-based technologies and user interfaces.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Explanation&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The main types of objects you can manage with SMW0 are:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Binary Data for&amp;nbsp;WebRFC&amp;nbsp;Applications:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This is the most common use case. It's for uploading and storing binary files like images, logos, sound files, or other media. These objects can then be referenced and displayed in ABAP programs, SAP GUI screens, or used in forms like Smart Forms.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;HTML Templates for&amp;nbsp;WebRFC&amp;nbsp;Applications:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This allows developers to store HTML files or templates. These templates can be used to generate dynamic web pages or for sending rich HTML emails from ABAP programs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;XSLT Programs for Transformation:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;You can also store XSLT (eXtensible&amp;nbsp;Stylesheet Language Transformations) files here, which are used to transform XML documents.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Common Use Cases for SMW0&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Uploading Company Logos:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This is a very frequent use of SMW0. Developers upload a company logo (e.g., in&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;.BMP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;or&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;.GIF&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;format) as binary data to the repository. The logo is then configured to appear on the SAP Easy Access screen or on reports and forms.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Displaying Images in ABAP Programs:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;You can use SMW0 to store images and then display them in your custom ABAP programs by referencing the stored object. This is typically done with ABAP GUI controls, such as&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;CL_GUI_PICTURE&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Creating Predefined Format Of Files:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;For eg. In the Excel file need to make few fields as char type in that case&amp;nbsp; we will use the web repository.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;Key Points for ABAP Developers&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Object Naming:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Objects in SMW0 have a unique name. It's a best practice to use a customer namespace (starting with 'Z' or 'Y') to avoid conflicts with standard SAP objects.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;MIME Types:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Before uploading a file, you must ensure that its&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MIME type&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;(e.g.,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;image/jpeg&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;for a JPEG image) is maintained in the system settings within SMW0.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Transportability:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Objects created in SMW0 are transportable. You can assign them to a transport request to move them between development, quality assurance, and production systems.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Steps To add the File in Web repository.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Start the Transaction: Go to transaction code SMW0.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Select Binary Data: On the initial screen, select the radio button for "Binary data for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;WebRFC&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;applications" and click the Execute button.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_0-1758518731700.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317652i5873D615E60173C4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_0-1758518731700.png" alt="Nayanakumar_0-1758518731700.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define Mime types.&lt;/P&gt;&lt;P&gt;In the Settings-&amp;gt;Define Mime Types&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_1-1758518952760.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317653i17915CD4AE3E99B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_1-1758518952760.png" alt="Nayanakumar_1-1758518952760.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Click on create button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_3-1758519203728.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317655i1B6656F87306C8DD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_3-1758519203728.png" alt="Nayanakumar_3-1758519203728.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_4-1758519272477.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317656iF69911FD379115CA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_4-1758519272477.png" alt="Nayanakumar_4-1758519272477.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Create a New Object: Click on the Create button (or press F5).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Define Object Details: A dialog box will appear where you'll need to enter the following information:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;OBJID: This is the unique identifier for your file, such as ZSO_UPLOAD_TEMPLATE.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Description: A short, descriptive text for the object .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Save the Entry: Save the object definition.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_5-1758519355940.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317657iCBA701FABCCCADA8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_5-1758519355940.png" alt="Nayanakumar_5-1758519355940.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Import the File: With your newly created object selected, click the Import button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Choose the File: A file selection dialog will pop up, allowing you to browse your local computer and choose the file you want to upload.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Save the Changes: After selecting the file, save your changes. The file content is now stored in the WWWDATA table and is linked to the OBJID you created.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_6-1758519486366.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317659iFDBAA248B76EF9F6/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_6-1758519486366.png" alt="Nayanakumar_6-1758519486366.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The entries are added in wwwdata table.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_7-1758519645707.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317660i467504ED62843BF0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_7-1758519645707.png" alt="Nayanakumar_7-1758519645707.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Download the Filed from WWWDATA Table Using report Program.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: lv_objid   TYPE wwwdatatab-objid VALUE 'ZN_UPLOAD_TEMPLATE', 
      ls_objdata TYPE wwwdatatab, 
      lv_file    TYPE string, 
      lv_msg     TYPE string, 
      lv_file1   TYPE rlgrap-filename, 
      lv_subrc   TYPE sy-subrc. 
 
" Get desktop path 
CALL METHOD cl_gui_frontend_services=&amp;gt;get_desktop_directory 
  CHANGING 
    desktop_directory = lv_file. 
 
CONCATENATE lv_file 'C:\sales\order455.xlsx' INTO lv_file1. 

" Read object metadata 
SELECT SINGLE relid objid INTO CORRESPONDING FIELDS OF ls_objdata 
  FROM wwwdata 
  WHERE srtf2 = 0 AND relid = 'MI' AND objid = lv_objid. 
 
IF sy-subrc = 0. 
  " Download the file 
  CALL FUNCTION 'DOWNLOAD_WEB_OBJECT' 
    EXPORTING 
      key         = ls_objdata 
      destination = lv_file1 
    IMPORTING 
      rc          = lv_subrc. 

   IF lv_subrc = 0. 
     lv_msg =  'Template downloaded sucessfully'. 
     CONCATENATE lv_msg lv_file1 INTO lv_msg. 
     MESSAGE lv_msg TYPE 'S'. 
  ELSE. 
    MESSAGE 'Download failed.' TYPE 'E'. 
  ENDIF. 
ELSE. 
  MESSAGE 'Template not found in repository.' TYPE 'E'. 
ENDIF. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_8-1758520006811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317661i6B865850387D2632/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_8-1758520006811.png" alt="Nayanakumar_8-1758520006811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Conclusion.&lt;/P&gt;&lt;P&gt;SMW0 is a specialized SAP transaction code for managing non-transactional files like images and HTML templates. Its primary use case is to store and make these files available for display and use across various SAP applications, particularly for branding and UI purposes.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/maintain-file-in-web-repository/ba-p/14223659"/>
    <published>2025-09-24T12:44:39.921000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report-part-2/ba-p/14220395</id>
    <title>BRF+ Object Creation using ABAP Z-Report, Part 2</title>
    <updated>2025-09-25T06:39:29.292000+02:00</updated>
    <author>
      <name>manoj_sm</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/151098</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;To create&amp;nbsp;&lt;STRONG&gt;BRF+ Elements programmatically&lt;/STRONG&gt;&amp;nbsp;using ABAP Refer Previous blog&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;BRF+ Object Creation using ABAP Z-Report&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we will learn how to create&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;BRF+ Structures and Table type programmatically&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;using ABAP. This provides a scalable way to automate the creation of data objects and integrate them into larger rule frameworks.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Structure Creation:&lt;/STRONG&gt;&amp;nbsp;The same application should be used to create the structure.&lt;BR /&gt;It is not necessary to build a structure if our result contains just one column. There is also no need to create a structure if the output for a single condition is a single row.&amp;nbsp;If more than one column appears in our result, we should make a structure with all of those columns. Additionally, a structure must be shown if the output consists of multiple rows.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Table type Creation:&lt;/STRONG&gt;&amp;nbsp;In order to have multiple result rows based on a single condition in our decision table, we can create a table in the same application. Therefore, table creation is necessary in our case.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1345641096" id="toc-hId-1760834658"&gt;&lt;SPAN&gt;ABAP Program to Create Structure and Table type&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Below is a sample ABAP program (&lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_BRF_APP&lt;/SPAN&gt;&lt;SPAN&gt;)&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT zdemo_brf_app.

DATA: lo_factory           TYPE REF TO if_fdt_factory,
      lo_application       TYPE REF TO if_fdt_application,
      lt_message           TYPE if_fdt_types=&amp;gt;t_message,
      lv_message           TYPE string,
      lv_boolean           TYPE abap_bool,
      lv_demo_appl_id      TYPE if_fdt_types=&amp;gt;id,
      lv_string            TYPE string,
      lo_element_1         TYPE REF TO if_fdt_element,
      lo_element_2         TYPE REF TO if_fdt_element,
      lo_element_3         TYPE REF TO if_fdt_element,
      lo_table             TYPE REF TO if_fdt_table,
      lo_table_1           TYPE REF TO if_fdt_table,
      lo_structure         TYPE REF TO if_fdt_structure,
      lv_element1_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element2_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element3_id       TYPE if_fdt_types=&amp;gt;id,
      lv_input_number_id   TYPE if_fdt_types=&amp;gt;id,
      lv_result_counter_id TYPE if_fdt_types=&amp;gt;id,
     

FIELD-SYMBOLS:
  &amp;lt;ls_message&amp;gt; TYPE if_fdt_types=&amp;gt;s_message,
  &amp;lt;lv_value&amp;gt;   TYPE any.


PARAMETERS: pv_lcl  TYPE abap_bool RADIOBUTTON GROUP r00 DEFAULT 'X',
            pv_sys  TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_mstr TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_name TYPE char30.
*           p_ele_01  TYPE i DEFAULT 5,
*            p_ele_02  TYPE i DEFAULT 4,
*            p_ele_03  TYPE i DEFAULT 8,
*            p_ele_04  TYPE i DEFAULT 3,
*            p_ele_05  TYPE i DEFAULT 13,
*            p_ele_06  TYPE i DEFAULT 2.
*           pv_ele   TYPE char20,
*           pv_str TYPE char20,
*           pv_tab TYPE char20.

IF pv_name IS NOT INITIAL AND pv_lcl IS NOT INITIAL OR pv_sys IS NOT INITIAL OR pv_mstr IS NOT INITIAL.

* get a reference to the instance of the factory
  lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( ).

* =============================================================
* definition of the new application:
* get an initial application object from the factory
  lo_application = lo_factory-&amp;gt;get_application( ).
  lo_application-&amp;gt;if_fdt_transaction~enqueue( ).
* set values for the application, especially the name is important
* You need to have a unique name for each application, here we use the
* FDT Service class method to get the unique name.
  lo_application-&amp;gt;set_application_component( 'BC' ).        "#EC NOTEXT
  lo_application-&amp;gt;set_software_component( 'SAP_BASIS' ).    "#EC NOTEXT
  lo_application-&amp;gt;set_development_package( '$TMP' ).        "#EC NOTEXT
*lo_application-&amp;gt;if_fdt_admin_data~set_name( cl_fdt_services=&amp;gt;get_unique_name( ) ).
  lo_application-&amp;gt;if_fdt_admin_data~set_name( pv_name ).


* In FDT terms there are 3 different type of Applications, Local application,
* system pplication and MasterData Application. The following lines shows how you
* can create local Application, masterdata Application and system Application.
  IF pv_lcl EQ abap_true.
    lo_application-&amp;gt;create_local_application( ).
  ELSEIF pv_sys EQ abap_true.
    lo_application-&amp;gt;create_system_application( ).
  ELSEIF pv_mstr EQ abap_true.
    lo_application-&amp;gt;create_masterdata_application( ).
  ENDIF.
  lo_application-&amp;gt;if_fdt_transaction~activate(
             IMPORTING et_message           = lt_message
                       ev_activation_failed = lv_boolean ).
  IF lv_boolean EQ abap_true.
*     for some reason the activation failed -&amp;gt; individual handling needed
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
  ELSE.
    lo_application-&amp;gt;if_fdt_transaction~save( ).
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
*     usually it makes sense to store the id for later access to the application
    lv_demo_appl_id = lo_application-&amp;gt;mv_id.
  ENDIF.
  WRITE: 'The ID of the application created is: ', lv_demo_appl_id. "#EC NOTEXT
ELSE.
  MESSAGE 'Provide all the required information' TYPE 'E'.
ENDIF.
*for creating Element,Structure,Table by Data Object


lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( lv_demo_appl_id ).
* =============================================================
* definition of a data object structure:
* get an initial data object structure from the factory
lo_structure ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_structure ).
lo_structure-&amp;gt;if_fdt_transaction~enqueue( ).
lo_structure-&amp;gt;if_fdt_admin_data~set_name( 'STRUCTURE' ).
lo_structure-&amp;gt;set_elements( lts_element ).
**********************************************************************************
* Alternately user can create a structure by using the service class method,
* CL_FDT_CONVENIENCE=&amp;gt;CREATE_STRUCTURE as follows.
* Cl_fdt_convenience=&amp;gt;create_structure( EXPORTING iv_name = 'DEMO_STRUCTURE_1'
*                                                iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                                it_element        =  lts_element
*                                                iv_activate       = ABAP_false
*                                      IMPORTING
*                                                eo_structure      = lo_structure ).
***********************************************************************************

lo_structure-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).


IF lv_boolean EQ abap_true.
  LOOP AT lt_message ASSIGNING &amp;lt;ls_message&amp;gt;.
    MESSAGE ID &amp;lt;ls_message&amp;gt;-msgid TYPE &amp;lt;ls_message&amp;gt;-msgty NUMBER &amp;lt;ls_message&amp;gt;-msgno
        WITH &amp;lt;ls_message&amp;gt;-msgv1 &amp;lt;ls_message&amp;gt;-msgv2 &amp;lt;ls_message&amp;gt;-msgv3 &amp;lt;ls_message&amp;gt;-msgv4
        INTO lv_message.
  ENDLOOP.
  WRITE : lv_message.
*         for some reason the activation failed -&amp;gt; individual handling needed
  lo_structure-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_structure-&amp;gt;if_fdt_transaction~save( ).
  lo_structure-&amp;gt;if_fdt_transaction~dequeue( ).
*         usually it makes sense to store the id for later access to the application
  lv_structure_id = lo_structure-&amp;gt;mv_id.
ENDIF.
*   WRITE: / lo_structure-&amp;gt;mv_id .
lv_string = lo_structure-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to string method call Structure: ' , lv_string. "#EC NOTEXT
* =============================================================
* definition of a data object table:
*     get an initial data object Table from the factory
lo_table ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_table ).
lo_table-&amp;gt;if_fdt_transaction~enqueue( ).
lo_table-&amp;gt;if_fdt_admin_data~set_name( 'TABLE' ).
lo_table-&amp;gt;set_structure( lv_structure_id ).
INSERT lo_table-&amp;gt;mv_id INTO TABLE lts_context_id.
***********************************************************************
* Alternately user can create a Table by using the service class method,
* CL_FDT_CONVENIENCE=&amp;gt;CREATE_TABLE as follows.
* cl_fdt_convenience=&amp;gt;create_table( EXPORTING iv_name = 'DEMO_TABLE_1'
*                                            iv_structure_name = 'DEMO_STRUCTURE_1'
*                                            iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                            it_element        = its_element
*                                            iv_activate       = ABAP_false
*                                  IMPORTING
*                                            eo_table          = lo_table ).
***********************************************************************



lo_table-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
*        for some reason the activation failed -&amp;gt; individual handling needed
  lo_table-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_table-&amp;gt;if_fdt_transaction~save( ).
  lo_table-&amp;gt;if_fdt_transaction~dequeue( ).
*        usually it makes sense to store the id for later access to the application

ENDIF.
*   WRITE: / lo_table-&amp;gt;mv_id .
lv_string = lo_table-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to_string method call Table: ' , lv_string. "#EC NOTEXT


* cl_fdt_convenience=&amp;gt;create_table( EXPORTING iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                                iv_element_type   = if_fdt_constants=&amp;gt;gc_data_object_type_table
*                                                iv_activate       = abap_false
*                                                iv_name           = 'RESULT_COUNTER'
*                                      IMPORTING eo_element        = lo_result_counter ).
*
*  INSERT lo_result_counter-&amp;gt;mv_id INTO TABLE lts_context_id.
*TYPES: BEGIN OF ty_element ,
*  name TYPE if_fdt_types=&amp;gt;name,
*  lv_element type if_fdt_types=&amp;gt;element_type,
*  END OF ty_element.
*DATA: lt_element TYPE TABLE OF ty_element,
*      lss_element TYPE ty_element.
*  lss_element-name = 'SFLIGHT_TAB'.
*  lss_element-lv_element = if_fdt_constants=&amp;gt;gc_data_object_type_table.
*  APPEND lss_element TO lt_element.


lo_table_1 ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_table ).
lo_table_1-&amp;gt;if_fdt_transaction~enqueue( ).
lo_table_1-&amp;gt;if_fdt_admin_data~set_name( 'SFLIGHT_TAB' ).
lo_table_1-&amp;gt;set_structure( lv_result_table_id ).
APPEND lo_table_1-&amp;gt;mv_id TO lts_context_id.

lo_table_1-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
*        for some reason the activation failed -&amp;gt; individual handling needed
  lo_table_1-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_table_1-&amp;gt;if_fdt_transaction~save( ).
  lo_table_1-&amp;gt;if_fdt_transaction~dequeue( ).
*        usually it makes sense to store the id for later access to the application

ENDIF.
*   WRITE: / lo_table-&amp;gt;mv_id .
lv_string = lo_table_1-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to_string method call Table: ' , lv_string. "#EC NOTEXT

*
*  cl_fdt_convenience=&amp;gt;create_table(
*    EXPORTING
*      iv_name           =  'RESULT_TABLE'                " Name
*      iv_structure_name = lv_name
*      iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp                " Universal Unique Identifier
*      it_element        = lt_element              " Elements
*      iv_activate       = abap_true        " Activate changes?
*    IMPORTING
**      ev_table_id       =                  " Universal Unique Identifier
*      eo_table          = lo_result_table                " FDT: Data Object of Type Table
*  ).
*  CATCH cx_fdt_input. " FDT: Invalid Input&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-1149127591" id="toc-hId-1564321153"&gt;&lt;SPAN&gt;Execution &amp;amp; Output&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;When you execute the above ABAP report, the newly created&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Application , Structure and Table&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;will immediately be reflected in the BRF+ Workbench (/nBRF+). You can navigate to the workbench to verify that the application&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_APP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and its elements have been created successfully.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183106.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316035i340B5B5D75B3E0F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183106.png" alt="Screenshot 2025-09-17 183106.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220313.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316034iB705E65CA51EB4DB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220313.png" alt="Screenshot 2025-09-17 220313.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220331.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316037iD47E80206F81B84C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220331.png" alt="Screenshot 2025-09-17 220331.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220409.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316038iCC9677B2BEC3EEAA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220409.png" alt="Screenshot 2025-09-17 220409.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After running the program, you will see system-generated IDs for each element created. These IDs are crucial when referencing the elements in Structures, Rules, or Functions.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-952614086" id="toc-hId-1367807648"&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;In the next part of this blog series, we will explore how to create&amp;nbsp;&lt;STRONG&gt;DB Lookup, Loop, Formula, Rule, and Function in&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Subsequent blogs &lt;/SPAN&gt;&lt;SPAN&gt;in detail.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report-part-2/ba-p/14220395"/>
    <published>2025-09-25T06:39:29.292000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/1-500-faster-abap-cloud-api-with-just-gzip/ba-p/14229207</id>
    <title>1,500× Faster: ABAP Cloud API with “Just” Gzip</title>
    <updated>2025-09-26T16:36:17.362000+02:00</updated>
    <author>
      <name>natanael1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1557162</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1890184258"&gt;The 3-hours to 7-Second Story&lt;/H3&gt;
&lt;P&gt;We had a weekly data integration form ABAP in Cloud, via an OData service, that took about &lt;STRONG&gt;3 hours&lt;/STRONG&gt;(10800 seconds) and nearly &lt;STRONG&gt;600 requests&lt;/STRONG&gt; to finish. After a small redesign, the same data now arrives in &lt;STRONG&gt;~7 seconds(instead of 10800 seconds)&lt;/STRONG&gt; using just &lt;STRONG&gt;3 requests&lt;/STRONG&gt;. So a dramatic x1500 reduction. No new servers, no fancy tools, just smarter packaging of the data, but of course with some drawback.&lt;/P&gt;
&lt;P&gt;The full PDF paper, and code is available in this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;
&lt;H3 id="toc-hId-1693670753"&gt;Quick Context&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Where:&lt;/STRONG&gt; ABAP in Cloud on SAP BTP.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;What:&lt;/STRONG&gt; A big, flat table (around 3 million rows) needed once a week.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Old approach: &lt;/STRONG&gt;OData service exposing this table, called 600 times,&amp;nbsp;5,000 rows per call → slow and expensive, the extraction workflow took ~3 hours&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Constraint:&lt;/STRONG&gt; We can’t stream chunks; each response is built on the server, then sent.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; Deliver everything fast, simple, and cheap for both sides.&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId-1497157248"&gt;The Simple Change&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; make a big weekly export feel like a single, quick download. No fancy infra, no special client libraries.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Why not OData for this job&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;OData shines for interactive reads: $filter, $expand, small pages, typed entities.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Our use case was the opposite: &lt;STRONG&gt;one flat dataset, all of it, as fast as possible&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;With OData we’d still pay the cost of many small pages and per-entity overhead the client didn’t need.&lt;/LI&gt;
&lt;LI&gt;Most consumers wanted a simple file-like payload they could ingest with generic tools.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why a plain HTTP service instead&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;A plain GET endpoint gives us &lt;STRONG&gt;full control over the wire format&lt;/STRONG&gt; (JSON/CSV), headers, and compression.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;It’s easier for any consumer to adopt (curl, Python, Node, SAP or non-SAP).&lt;/LI&gt;
&lt;LI&gt;We can define a &lt;STRONG&gt;predictable paging contract&lt;/STRONG&gt; (e.g., offset/count) and let the client fetch pages in parallel.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why “just HTTP” still wasn’t enough&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;In ABAP Cloud, we don’t stream chunked responses; the server assembles the response first, then sends it.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;If we naïvely send a huge JSON array, the &lt;STRONG&gt;payload is too big&lt;/STRONG&gt; and &lt;STRONG&gt;too slow&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;If we keep tiny pages, we fix size but suffer &lt;STRONG&gt;hundreds of roundtrips&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;Conclusion: we needed to &lt;STRONG&gt;keep HTTP simple but make each response compact and each request count&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;What we explored&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Formats:&lt;/STRONG&gt; JSON vs CSV vs newline-delimited JSON. CSV is smaller raw, but…&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Serialization:&lt;/STRONG&gt; /ui2/cl_json, XCO, and CALL TRANSFORMATION for speed and stability.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Compression:&lt;/STRONG&gt; no compression vs gzip; single gzip member vs multiple members inside one response.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Delivery patterns:&lt;/STRONG&gt; direct download vs staging to storage; server-side streaming ideas (ruled out).&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Paging shapes:&lt;/STRONG&gt; many small pages vs a few big pages; client parallelism vs server complexity.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;What we landed on (the pattern)&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Keep JSON&lt;/STRONG&gt; for compatibility, but &lt;STRONG&gt;generate it fast&lt;/STRONG&gt; (use the fastest serializer available to you).&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Compress every response&lt;/STRONG&gt; and signal it with Content-Encoding: gzip. One &lt;STRONG&gt;single gzip member&lt;/STRONG&gt; per response so common clients auto-decompress reliably.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Use coarse paging&lt;/STRONG&gt; (few big pages) to cut roundtrips. Expose simple params (e.g., offset and count) and a “count only” helper so clients can plan pages.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Let clients parallelize&lt;/STRONG&gt; safely: stable ordering, idempotent reads, and clear retry rules.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Stay boring on the protocol:&lt;/STRONG&gt; plain HTTP GET, clear headers, predictable JSON shape. No streaming tricks, no custom encodings that break tools.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why this works?&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;We &lt;STRONG&gt;remove protocol overhead&lt;/STRONG&gt; we don’t need (OData features) and &lt;STRONG&gt;add the two things we do need&lt;/STRONG&gt; for bulk: fast serialization + compression.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Coarse pages shift the bottleneck from “too many calls” to “a few efficient transfers”.&lt;/LI&gt;
&lt;LI&gt;Gzip neutralizes JSON’s key overhead, so we keep a &lt;STRONG&gt;friendly format&lt;/STRONG&gt; without paying a size penalty.&lt;/LI&gt;
&lt;LI&gt;The approach is &lt;STRONG&gt;portable and observable&lt;/STRONG&gt;: easy to test locally, easy to monitor in production, and easy for partners to adopt.&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId-1300643743"&gt;Before vs After&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;TL;DR:&lt;/STRONG&gt; We didn’t change the data, only the delivery: coarse pages, fast JSON, and gzip over a plain HTTP contract.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;
&lt;P&gt;Dimension Before (many small pages) After (few big pages + gzip) Why it matters&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;Dataset&lt;/TD&gt;
&lt;TD&gt;~3,000,000 rows (flat, ~12 columns)&lt;/TD&gt;
&lt;TD&gt;Same&lt;/TD&gt;
&lt;TD&gt;Same data, new delivery.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Page size&lt;/TD&gt;
&lt;TD&gt;5,000 rows/page&lt;/TD&gt;
&lt;TD&gt;~1,000,000 rows/page (tunable)&lt;/TD&gt;
&lt;TD&gt;Fewer roundtrips, less latency.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Number of requests&lt;/TD&gt;
&lt;TD&gt;~593&lt;/TD&gt;
&lt;TD&gt;3&lt;/TD&gt;
&lt;TD&gt;Network overhead drops dramatically.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;End-to-end time&lt;/TD&gt;
&lt;TD&gt;~3 hours (sequential pulls)&lt;/TD&gt;
&lt;TD&gt;~6-7 seconds (3 parallel pulls)&lt;/TD&gt;
&lt;TD&gt;Parallelizable, near “single download” feel.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Format on the wire&lt;/TD&gt;
&lt;TD&gt;JSON (uncompressed)&lt;/TD&gt;
&lt;TD&gt;JSON (gzipped)&lt;/TD&gt;
&lt;TD&gt;Keep JSON for compatibility; shrink it with gzip.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Total transfer&lt;/TD&gt;
&lt;TD&gt;~0.6 GB&lt;/TD&gt;
&lt;TD&gt;~9 MB&lt;/TD&gt;
&lt;TD&gt;Bandwidth and cost fall off a cliff.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Payload per page&lt;/TD&gt;
&lt;TD&gt;~1.15 MB per 5k rows (raw)&lt;/TD&gt;
&lt;TD&gt;~3 MB per 1M rows (gzipped)&lt;/TD&gt;
&lt;TD&gt;Gzip beats key overhead; size scales well.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Serialization&lt;/TD&gt;
&lt;TD&gt;Generic JSON serializer&lt;/TD&gt;
&lt;TD&gt;Fast serializer (CALL TRANSFORMATION)&lt;/TD&gt;
&lt;TD&gt;Server can build big pages quickly.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Protocol&lt;/TD&gt;
&lt;TD&gt;OData-style paging&lt;/TD&gt;
&lt;TD&gt;Plain HTTP GET with offset/count&lt;/TD&gt;
&lt;TD&gt;Simple contract any client can call.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Compression&lt;/TD&gt;
&lt;TD&gt;None&lt;/TD&gt;
&lt;TD&gt;Content-Encoding: gzip (single member)&lt;/TD&gt;
&lt;TD&gt;Works out-of-the-box with common tools/SDKs.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Client pattern&lt;/TD&gt;
&lt;TD&gt;Sequential loop&lt;/TD&gt;
&lt;TD&gt;Fetch pages in parallel, then merge&lt;/TD&gt;
&lt;TD&gt;Easy speed-up without server tricks.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Retry model&lt;/TD&gt;
&lt;TD&gt;Many small retries&lt;/TD&gt;
&lt;TD&gt;Few coarse, idempotent retries&lt;/TD&gt;
&lt;TD&gt;Fewer moving parts, simpler error handling.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Server behavior&lt;/TD&gt;
&lt;TD&gt;Build JSON, send raw&lt;/TD&gt;
&lt;TD&gt;Build JSON → gzip → send single member&lt;/TD&gt;
&lt;TD&gt;Reliable auto-decompression on client side.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Limits to watch&lt;/TD&gt;
&lt;TD&gt;Too many roundtrips; egress cost&lt;/TD&gt;
&lt;TD&gt;Client RAM per page; choose page size wisely&lt;/TD&gt;
&lt;TD&gt;Balance page size vs client capacity.&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TBODY&gt;
&lt;/TABLE&gt;
&lt;H3 id="toc-hId-1104130238"&gt;How to reproduce this in three simple steps&lt;/H3&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;Heads-up: in here I will refer to an Appendix, you can find it in the detailed PDF paper about the optimization, the paper and some code is available on GitHub&lt;/P&gt;
&lt;/BLOCKQUOTE&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-1036699452"&gt;Step 1. Define a tiny HTTP contract&lt;/H4&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Endpoint:&lt;/STRONG&gt; GET /entity?offset=…&amp;amp;count=…&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Helper:&lt;/STRONG&gt; GET /entity?get_only_count=true returns a small pagination object with totals and suggested pages, for example:&lt;/P&gt;
&lt;/LI&gt;
&lt;/UL&gt;
&lt;PRE&gt;{
  "number_of_records": 2496434,
  "batch_size": { "maximum": 1500000, "recommended": 1000000 },
  "recommended_pages": [
    "/entity?offset=0&amp;amp;count=1000000",
    "/entity?offset=1000000&amp;amp;count=1000000",
    "/entity?offset=2000000&amp;amp;count=1000000"
  ]
}&lt;/PRE&gt;
&lt;P&gt;This keeps clients simple and lets them plan parallel pulls.&lt;/P&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-840185947"&gt;Step 2. Build one big page, serialize fast, and gzip it on the server&lt;/H4&gt;
&lt;P&gt;&lt;STRONG&gt;a) Fast JSON generation with CALL TRANSFORMATION&lt;/STRONG&gt;&lt;BR /&gt;Appendix C shows the lean serializer that won your benchmarks:&lt;/P&gt;
&lt;PRE&gt;METHOD convert_json_transformation.
  DATA(lo_writer) = cl_sxml_string_writer⇒create( type = if_sxml⇒co_xt_json ).
  CALL TRANSFORMATION id
    SOURCE itab = data
    RESULT XML lo_writer.
  string = lo_writer-&amp;gt;get_output( ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;Use this to turn your internal table into JSON quickly.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;b) Minimal HTTP handler that serves one gzipped page&lt;/STRONG&gt;&lt;BR /&gt;Appendix I demonstrates the pattern: set headers, read a deterministic slice, serialize, gzip once, send bytes.&lt;/P&gt;
&lt;PRE&gt;METHOD gzip_json_single_page.
  response-&amp;gt;set_status( 200 ).
  response-&amp;gt;set_content_type( 'application/gzip' ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Disposition'
    i_value = |attachment; filename="data_subset.gz"| ).
  response-&amp;gt;set_compression(
    options = if_web_http_response⇒co_compress_none ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Encoding'
    i_value = |deflate| ).

  SELECT column_1, column_2, ... , column_12
    FROM dbtable
    ORDER BY column_2
    INTO TABLE @DATA(page)
    UP TO @page_size ROWS.

  cl_abap_gzip⇒compress_binary(
    EXPORTING raw_in = convert_json_transformation( page )
    IMPORTING gzip_out = DATA(gzip) ).

  response-&amp;gt;set_binary( gzip ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;&lt;STRONG&gt;c) Where the handler is wired&lt;/STRONG&gt;&lt;BR /&gt;Appendix F shows the entry point choosing which implementation to run:&lt;/P&gt;
&lt;PRE&gt;METHOD if_http_service_extension~handle_request.
  " choose one of these
  gzip_json_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_multiple_pages( CHANGING request = request response = response ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;Keep it simple in production and call the JSON + single-member gzip method.&lt;/P&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-643672442"&gt;Step 3. Let the client pull a few big pages in parallel&lt;/H4&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;Ask get_only_count first to get total and recommended pages.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Fire 2–4 page requests in parallel, then merge locally.&lt;/LI&gt;
&lt;LI&gt;Most clients auto-decompress when Content-Encoding is set, which is exactly why the server returns a single gzip response.&lt;/LI&gt;
&lt;/UL&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-447158937"&gt;Optional: CSV variant from the appendix&lt;/H4&gt;
&lt;P&gt;If you ever need CSV, Appendix H shows the single-page CSV + gzip flow. The JSON path above stayed as our final choice because gzip erases most of JSON’s key overhead while keeping tooling friendly.&lt;/P&gt;
&lt;H3 id="toc-hId-121562713"&gt;When to use this pattern and when not to&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;Use it when&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;You need to deliver a large, flat dataset fast, usually for batch or analytics.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Your consumers are happy with a plain HTTP GET that returns JSON.&lt;/LI&gt;
&lt;LI&gt;You can sort by a unique key and read stable slices with offset and count.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Think twice when&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Consumers need rich OData features&lt;/STRONG&gt; like server-side filtering and $expand. You will be giving those up and implementing only what you need in plain HTTP.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Clients cannot hold the decompressed page in memory.&lt;/STRONG&gt; A 1,000,000 row page is roughly a few hundred MB once decompressed, so plan for that on the client side.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;You require true streaming.&lt;/STRONG&gt; ABAP ICF in the cloud does not support HTTP/1.1 chunked transfer, so streaming is out of scope here.
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId--150182161"&gt;Gotchas to avoid&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Do not concatenate multiple gzip members&lt;/STRONG&gt; in one HTTP response if you expect tools like Postman to auto-decompress. Many clients only unpack the first member. Prefer one contiguous gzip stream per response.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Set the right headers.&lt;/STRONG&gt; Send Content-Encoding: gzip for the single member response. If you build a multi-member payload, clients may not decode it automatically, which is why your final solution avoided that.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Keep ordering stable.&lt;/STRONG&gt; Always ORDER BY a unique key to make pages deterministic and retries idempotent. (Your examples order by a key column before slicing.)&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Pick a page size both sides can hold.&lt;/STRONG&gt; You found that 1,000,000 rows per page hits a good balance. Results and size scale with total rows, not so much with page count.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Stick to one gzip pass per response.&lt;/STRONG&gt; Compress after you generate JSON for the page, not per record or per mini-chunk inside the same response. It keeps clients simple.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;For the full PDF paper, and code please check this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/1-500-faster-abap-cloud-api-with-just-gzip/ba-p/14229207"/>
    <published>2025-09-26T16:36:17.362000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/mime-types-truncated-in-sap-web-repository-smw0/ba-p/14229638</id>
    <title>MIME Types truncated in SAP Web Repository (SMW0)</title>
    <updated>2025-09-28T15:47:48.134000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Context&lt;/STRONG&gt;: I have some Microsoft Office files, Excel, Word and PowerPoint, already uploaded to the SAP Web Repository (transaction SMW0). My system is ABAP 7.52.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Goal&lt;/STRONG&gt;: I want to display these files from SMW0, via the Microsoft Office applications installed on my laptop.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Standard solution and issues&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Their MIME Types must be defined via the menu Settings &amp;gt; Define MIME Types:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_1-1758997727373.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320761i0C424F4402993787/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_1-1758997727373.png" alt="Sandra_Rossi_1-1758997727373.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_2-1758997760008.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320762i697951BE30278898/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_2-1758997760008.png" alt="Sandra_Rossi_2-1758997760008.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1758997792055.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320763i71E6E387E7EA0CBC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1758997792055.png" alt="Sandra_Rossi_3-1758997792055.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here I can enter the &lt;A href="https://stackoverflow.com/questions/4212861/what-is-a-correct-mime-type-for-docx-pptx-etc" target="_self" rel="nofollow noopener noreferrer"&gt;MIME types&lt;/A&gt; and corresponding file extensions of Microsoft Office applications.&lt;/P&gt;&lt;P&gt;I repeat the operation 3 times, each time pickup the value for MIME TYPE and EXTENSION:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/LI&gt;&lt;LI&gt;.xlsx&lt;/LI&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.wordprocessingml.document&lt;/LI&gt;&lt;LI&gt;.docx&lt;/LI&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.presentationml.presentation&lt;/LI&gt;&lt;LI&gt;.pptx&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1758997659407.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320760i6C1672CF0F99E694/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1758997659407.png" alt="Sandra_Rossi_0-1758997659407.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, associate the corresponding programs installed on my laptop via the menu Settings &amp;gt; Assign MIME editor; these settings are user-dependent:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_4-1758997893725.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320764iA9BD767920C728F1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_4-1758997893725.png" alt="Sandra_Rossi_4-1758997893725.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_5-1758997930909.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320765i4E870110E4710DAB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_5-1758997930909.png" alt="Sandra_Rossi_5-1758997930909.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The possible MIME type values are truncated in the screen:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_6-1758998028502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320766iD91AE175086BFC1C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_6-1758998028502.png" alt="Sandra_Rossi_6-1758998028502.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you choose one of the Office MIME types, its name appears truncated again:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_7-1758998087903.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320767i478B87EC1E3FD840/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_7-1758998087903.png" alt="Sandra_Rossi_7-1758998087903.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you don't fix it and save, you get the error "MIME type&amp;nbsp;application/vnd.openxmlformats-officedocument&amp;nbsp;unknown. Edit the settings":&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1759052563573.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320798i8C47AF7CF2D9CD12/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1759052563573.png" alt="Sandra_Rossi_0-1759052563573.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;NB: what's fun is that the setting is saved (but it's useless).&lt;/P&gt;&lt;P&gt;So, &lt;STRONG&gt;the first problem&lt;/STRONG&gt; about the truncation is that you have to remember its complete name and type it manually. We'll see below a custom solution to display the full MIME types.&lt;/P&gt;&lt;P&gt;Now, complete the MIME type name, the Excel one for instance:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the Editor, you define the path to the program on your laptop, for instance:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now, if you select an Excel file (uploading files is simple, so I didn't show how to do it), it downloads the file to a temporary folder on your laptop, Excel opens it:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_10-1758998929744.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320770i53B8E5405D8C6198/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_10-1758998929744.png" alt="Sandra_Rossi_10-1758998929744.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1759066958245.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320823i0FC8D00B8F61E83F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1759066958245.png" alt="Sandra_Rossi_3-1759066958245.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;NB: if you open it in change mode, SMW0 will propose to import the temporary file.&lt;/P&gt;&lt;P&gt;So far, so good.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now comes &lt;STRONG&gt;the second problem&lt;/STRONG&gt; about the MIME type truncation (on the screen). If the associated program has been upgraded and is now at a different location, or if you just want to see the MIME type/editor associations, the truncation problem prevents from retrieving and showing the associated program.&lt;/P&gt;&lt;P&gt;So, I have created this little program to display and edit these associations (press F4 to select the MIME type editor; press Save or Execute to save):&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_4-1759067145276.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320825iE6CB58622E909FEE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_4-1759067145276.png" alt="Sandra_Rossi_4-1759067145276.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Have fun!&lt;/P&gt;&lt;P&gt;For information, in SMW0, the menu Settings &amp;gt; Delete assignments doesn't help, it deletes &lt;STRONG&gt;all&lt;/STRONG&gt; the assignments, so it's not very useful:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_9-1758998206985.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320769i857E72C5DD185CFB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_9-1758998206985.png" alt="Sandra_Rossi_9-1758998206985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_8-1758998142917.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320768iEA40787D34EDD1BD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_8-1758998142917.png" alt="Sandra_Rossi_8-1758998142917.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Code of the program to display and edit the MIME type/editor associations:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT.
TABLES sscrfields.
PARAMETERS dummy.
CLASS lcl_app DEFINITION DEFERRED.
DATA app TYPE REF TO lcl_app.
LOAD-OF-PROGRAM.
  CREATE OBJECT app TYPE ('LCL_APP').
AT SELECTION-SCREEN OUTPUT.
  CALL METHOD app-&amp;gt;('PBO').
AT SELECTION-SCREEN.
  CALL METHOD app-&amp;gt;('PAI').


CLASS lcl_app DEFINITION.
  PUBLIC SECTION.
    METHODS pbo.
    METHODS pai.

  PRIVATE SECTION.
    TYPES:
      "! w3mimeappl-appli TYPE c LENGTH 250
      BEGIN OF ty_alv_mimeapp_appli,
        appli_1 TYPE c LENGTH 128,
        appli_2 TYPE c LENGTH 122,
      END OF ty_alv_mimeapp_appli.
    TYPES:
      BEGIN OF ty_alv_mimeapp,
        mtype TYPE w3mimeappl-mtype.
        INCLUDE TYPE ty_alv_mimeapp_appli AS appli.
    TYPES:
      END OF ty_alv_mimeapp.
    TYPES tt_alv_mimeapps TYPE STANDARD TABLE OF ty_alv_mimeapp WITH EMPTY KEY.
    TYPES tt_mimeapps     TYPE TABLE OF w3mimeappl WITH EMPTY KEY.

    CONSTANTS c_mimeappl TYPE w3objid VALUE 'mimeappl'.

    DATA alv_mimeapps TYPE tt_alv_mimeapps.
    DATA grid         TYPE REF TO cl_gui_alv_grid.
    DATA table_spfli  TYPE TABLE OF spfli.

    METHODS get_mimetypes  RETURNING VALUE(et_mimeapps) TYPE tt_mimeapps.
    METHODS save_mimetypes IMPORTING it_mimeapps        TYPE tt_mimeapps.

    METHODS on_onf4
      FOR EVENT onf4 OF cl_gui_alv_grid
      IMPORTING e_fieldname
                es_row_no
                e_fieldvalue
                er_event_data.
ENDCLASS.


CLASS lcl_app IMPLEMENTATION.
  METHOD pbo.
    IF grid IS BOUND.
      RETURN.
    ENDIF.
    SELECT * FROM mimetypes INTO TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(mimetypes).
    DATA(mimeapps) = get_mimetypes( ).
    alv_mimeapps = VALUE #( FOR &amp;lt;mimeapp&amp;gt; IN mimeapps
                            ( mtype   = &amp;lt;mimeapp&amp;gt;-mtype
                              appli_1 = &amp;lt;mimeapp&amp;gt;-appli(128)
                              appli_2 = &amp;lt;mimeapp&amp;gt;-appli+128 ) ).
    LOOP AT mimetypes REFERENCE INTO DATA(mimetype).
      IF NOT line_exists( alv_mimeapps[ mtype = mimetype-&amp;gt;type ] ).
        INSERT VALUE #( mtype   = mimetype-&amp;gt;type
                        appli_1 = ''
                        appli_2 = '' ) INTO TABLE alv_mimeapps.
      ENDIF.
    ENDLOOP.
    LOOP AT alv_mimeapps REFERENCE INTO DATA(alv_mimeapp)
         WHERE appli NP '!! *'.
      IF NOT line_exists( mimetypes[ type = alv_mimeapp-&amp;gt;mtype ] ).
        alv_mimeapp-&amp;gt;appli = CONV w3mimeappl-appli( |!! { CONV string( alv_mimeapp-&amp;gt;appli ) }| ).
      ENDIF.
    ENDLOOP.
    grid = NEW cl_gui_alv_grid( i_parent = cl_gui_container=&amp;gt;screen0 ).
    SET HANDLER on_onf4 FOR grid.
    grid-&amp;gt;register_f4_for_fields( it_f4 = VALUE #( register   = abap_true
                                                   chngeafter = abap_true
                                                   ( fieldname  = 'APPLI_1' )
                                                   ( fieldname  = 'APPLI_2' ) ) ).
    DATA(fieldcatalog) = VALUE lvc_t_fcat( ( fieldname = 'MTYPE' ref_table = 'W3MIMEAPPL' ref_field = 'MTYPE' )
                                           ( fieldname  = 'APPLI_1'
                                             dd_outlen  = 128
                                             inttype    = 'C'
                                             lowercase  = abap_true
                                             f4availabl = abap_true
                                             scrtext_l  = 'Editor path (128 first characters)' )
                                           ( fieldname  = 'APPLI_2'
                                             dd_outlen  = 122
                                             inttype    = 'C'
                                             lowercase  = abap_true
                                             f4availabl = abap_true
                                             scrtext_l  = 'Editor path (last characters)' ) ).
    grid-&amp;gt;set_table_for_first_display( EXPORTING  is_layout       = VALUE #( edit       = abap_true
                                                                             cwidth_opt = abap_true  )
                                       CHANGING   it_outtab       = alv_mimeapps
                                                  it_fieldcatalog = fieldcatalog
                                       EXCEPTIONS OTHERS          = 4 ).
  ENDMETHOD.

  METHOD pai.
    CASE sscrfields-ucomm.
      WHEN 'ONLI'
        OR 'SPOS'.
        grid-&amp;gt;check_changed_data( ).
        DATA(mimeapps) = VALUE tt_mimeapps( FOR &amp;lt;alv_mimeapp&amp;gt; IN alv_mimeapps
                                            ( mtype = &amp;lt;alv_mimeapp&amp;gt;-mtype
                                              appli = &amp;lt;alv_mimeapp&amp;gt;-appli ) ).
        save_mimetypes( mimeapps ).
        MESSAGE 'Data saved' TYPE 'I'.
        " Don't trigger save of selection screen variant
        sscrfields-ucomm = ''.
    ENDCASE.
  ENDMETHOD.

  METHOD on_onf4.
    DATA lt_filetable TYPE filetable.
    DATA l_rc         TYPE i.
    DATA l_action     TYPE i.
    DATA return       TYPE TABLE OF ddshretval.

    FIELD-SYMBOLS &amp;lt;ls_file&amp;gt;    TYPE file_table.
    FIELD-SYMBOLS &amp;lt;table_modi&amp;gt; TYPE lvc_t_modi.

    CASE e_fieldname.
      WHEN 'APPLI_1'
        OR 'APPLI_2'.
        DATA(alv_mimeapp) = alv_mimeapps[ es_row_no-row_id ].
        cl_gui_frontend_services=&amp;gt;file_open_dialog( EXPORTING  default_filename = CONV #( alv_mimeapp-appli )
                                                    CHANGING   file_table       = lt_filetable
                                                               rc               = l_rc
                                                               user_action      = l_action
                                                    EXCEPTIONS OTHERS           = 5 ).
        IF sy-subrc &amp;lt;&amp;gt; 0.
          " TODO error
        ELSEIF l_action &amp;lt;&amp;gt; cl_gui_frontend_services=&amp;gt;action_ok.
          " F4 cancelled by user
        ELSE.
          " 1 file selected
          READ TABLE lt_filetable INDEX 1 ASSIGNING &amp;lt;ls_file&amp;gt;.
          IF sy-subrc = 0.
            DATA(ls_alv_mimeapp) = CONV ty_alv_mimeapp-appli( &amp;lt;ls_file&amp;gt;-filename ).
            ASSIGN er_event_data-&amp;gt;m_data-&amp;gt;* TO &amp;lt;table_modi&amp;gt;.
            &amp;lt;table_modi&amp;gt; = VALUE #( BASE &amp;lt;table_modi&amp;gt;
                                    row_id = es_row_no-row_id
                                    ( fieldname = 'APPLI_1'
                                      value     = ls_alv_mimeapp-appli_1 )
                                    ( fieldname = 'APPLI_2'
                                      value     = ls_alv_mimeapp-appli_2 ) ).
          ENDIF.
        ENDIF.
        er_event_data-&amp;gt;m_event_handled = 'X'.
    ENDCASE.
  ENDMETHOD.

  METHOD get_mimetypes.
    DATA l_objid TYPE wwwdataid.

    CONCATENATE c_mimeappl sy-uname INTO l_objid-objid.
    CLEAR et_mimeapps.
    IMPORT mimeapps = et_mimeapps FROM DATABASE wwwdata(st) ID l_objid.
  ENDMETHOD.

  METHOD save_mimetypes.
    DATA l_objid TYPE wwwdataid.

    CONCATENATE c_mimeappl sy-uname INTO l_objid-objid.
    EXPORT mimeapps = it_mimeapps TO DATABASE wwwdata(st) ID l_objid.
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/mime-types-truncated-in-sap-web-repository-smw0/ba-p/14229638"/>
    <published>2025-09-28T15:47:48.134000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397</id>
    <title>ABAP's Parallel Processing Frameworks: Practical Guide to Performance Tuning of Mass Data Processing</title>
    <updated>2025-09-29T08:52:47.138000+02:00</updated>
    <author>
      <name>marc_steinert</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/892436</uri>
    </author>
    <content>&lt;P&gt;While working on a project to optimize a standard SAP report that struggled with large data volumes, I took a deep dive into &lt;STRONG&gt;performance tuning&lt;/STRONG&gt; in ABAP, specifically focusing on &lt;STRONG&gt;parallel processing&lt;/STRONG&gt;. This journey led me to a comprehensive analysis of the various methods SAP provides for running processes in parallel.&lt;/P&gt;&lt;P&gt;I discovered that parallel processing in ABAP is achieved using one of two core technologies. The first is the &lt;STRONG&gt;Remote Function Call (RFC)&lt;/STRONG&gt;, where both &lt;STRONG&gt;asynchronous (aRFC)&lt;/STRONG&gt; and &lt;STRONG&gt;background (bgRFC)&lt;/STRONG&gt; variants can be used to run tasks in parallel. The second technology is based on &amp;nbsp;&lt;STRONG&gt;background processes&lt;/STRONG&gt;. To make implementation easier, several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; have been built on top of these technologies, simplifying the development process.&lt;/P&gt;&lt;P&gt;This blog post is a &lt;STRONG&gt;summary&lt;/STRONG&gt; of the theoretical research I conducted for my bachelor's thesis. Its goal is to provide a &lt;STRONG&gt;comprehensive overview&lt;/STRONG&gt; of the different technologies and the six key frameworks I identified. Think of it as a practical guide to help you choose the most suitable framework for your needs, with linked resources for anyone who wants to dive deeper into a specific topic.&lt;/P&gt;&lt;H3 id="toc-hId-1890036543"&gt;&lt;STRONG&gt;The Landscape of Parallel Processing in ABAP&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;As mentioned in the introduction, parallel processing in ABAP is based on two core technologies. To simplify their use, multible frameworks have been developed for easier implementation. The following table provides an overview of these technologies and their corresponding frameworks:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="marc_steinert_0-1758550065480.png" style="width: 706px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318006iFE283EECD9A1C02A/image-dimensions/706x145?v=v2" width="706" height="145" role="button" title="marc_steinert_0-1758550065480.png" alt="marc_steinert_0-1758550065480.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, let's explore how each of these core technologies enables parallel processing.&lt;/P&gt;&lt;H4 id="toc-hId-1822605757"&gt;&lt;STRONG&gt;Asynchronous Remote Function Call (aRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Asynchronous Remote Function Call&lt;/STRONG&gt; is one of the older and established SAP technology for parallel processing in ABAP. It works by starting a session in a separate &lt;STRONG&gt;dialog work process&lt;/STRONG&gt;, which then executes a function module in parallel with the main program. The calling program does not wait for the function to finish and continues its own processing immediately.&lt;/P&gt;&lt;P&gt;By starting multiple aRFCs in a row, you can achieve a significant parallelization effect, as each call runs simultaneously in its own process. This is implemented using the &lt;EM&gt;STARTING NEW TASK&lt;/EM&gt; addition to the standard &lt;EM&gt;CALL FUNCTION&lt;/EM&gt; statement. A example call could look like this:&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
STARTING NEW TASK '&amp;lt;task_name&amp;gt;'
DESTINATION IN GROUP &amp;lt;server_group&amp;gt;
PERFORMING &amp;lt;callback_form&amp;gt; ON END OF TASK.&lt;/PRE&gt;&lt;P&gt;For a more detailed guide on aRFCs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Gahm, H. (2009): ABAP Performance Tuning&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://pdfcoffee.com/5-rfc-types-in-abap-pdf-free.html" target="_self" rel="nofollow noopener noreferrer"&gt;Jolfaei, M. A. and Neuwirt, E. (2006): Master the five remote function call (RFC) types in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/doc/saphelp_em92/9.2/en-US/48/89673284b84e6fe10000000a421937/content.htm?no_cache=true" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Asynchronous RFC (aRFC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/753088fc00704d0a80e7fbd6803c8adb/489aa5b948c673e8e10000000a42189b.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing with Asynchronous RFC&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1626092252"&gt;&lt;STRONG&gt;Background Remote Function Call (bgRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Remote Function Call&lt;/STRONG&gt; is a newer method for parallelization. While it also uses dialog work processes for execution like the aRFC, its operational logic is quite different.&lt;/P&gt;&lt;P&gt;Instead of executing immediately, a bgRFC call is first saved to a &lt;STRONG&gt;persistent queue&lt;/STRONG&gt; in the database. The actual processing is only triggered by an explicit &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement and is managed by a dedicated &lt;STRONG&gt;scheduler&lt;/STRONG&gt;. This approach makes it possible to execute tasks with an &lt;STRONG&gt;"Exactly Once"&lt;/STRONG&gt; or even an &lt;STRONG&gt;"Exactly Once in Order"&lt;/STRONG&gt; guarantee, which provides a high degree of reliability.&lt;/P&gt;&lt;P&gt;The implementation is nearly identical to that of an aRFC. The key difference is the use of the &lt;EM&gt;IN BACKGROUND UNIT&lt;/EM&gt; statement, which groups one or more function calls into a single, logical unit of work.&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
IN BACKGROUND UNIT &amp;lt;unit_object&amp;gt;.&lt;/PRE&gt;&lt;P&gt;You can find more information about this technology here:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://support.sap.com/en/alm/sap-focused-run/expert-portal/integration-cloud-monitoring/bgrfc.html" target="_self" rel="noopener noreferrer"&gt;SAP Support: bgRFC&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/48927c2caa6b17cee10000000a421937.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: bgRFC (Background Remote Function Call)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1429578747"&gt;&lt;STRONG&gt;Background Processes&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Using dedicated &lt;STRONG&gt;Background Processes&lt;/STRONG&gt; is another established method for achieving parallelism in SAP Systems, especially suitable for long-running and resource-intensive tasks that can be clearly divided.&lt;/P&gt;&lt;P&gt;Parallelizing with background processes follows the same core principle as with aRFCs: multiple tasks are started to run simultaneously. This can be achieved in two main ways. The first approach is done purely through configuration. Here, an administrator can manually schedule the same ABAP program multiple times, where each parallel &lt;STRONG&gt;job&lt;/STRONG&gt; uses a unique &lt;STRONG&gt;variant&lt;/STRONG&gt; with a different dataset&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The second approach is to implement this parallelization within a single ABAP program. This is done using a set of function modules that control the job lifecycle:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_OPEN&lt;/STRONG&gt;&lt;/EM&gt; creates a new job.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_SUBMIT&lt;/STRONG&gt;&lt;/EM&gt; adds the program and its variant as a step.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_CLOSE&lt;/STRONG&gt;&lt;/EM&gt; releases the job to the system for execution.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For more details on implementing parallel background jobs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-with-background-jobs-in-sap/ba-p/14001745" target="_self"&gt;SAP Community (2025): Parallel Processing with Background Jobs in SAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/7bfe8cdcfbb040dcb6702dada8c3e2f0/4d95304dd1b83c46e10000000a42189e.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Programming with the Background Processing System (BC-CCM-BTC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-of-background-jobs-in-sap/ba-p/13244439" target="_self"&gt;SAP Community (2014):&amp;nbsp;Parallel processing of background jobs in SAP&amp;nbsp;&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1103982523"&gt;&lt;STRONG&gt;Frameworks for Easier Implementation&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;While the core technologies provide the fundamental mechanisms for parallel processing, implementing them directly requires handling details like load balancing, package creation and managing parallel tasks. To simplify this process, SAP provides several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; that build on these technologies. These frameworks offer a structured, reusable and often easier way to implement robust parallel processing.&lt;/P&gt;&lt;P&gt;To select the most suitable framework, the following decision matrix based on the Qualitative Weight and Summ (QWS) method provides a visual comparison. The &lt;STRONG&gt;darker the green shade&lt;/STRONG&gt;, the better a framework fulfills a specific criterion. Please note that this matrix reflects my subjective evaluation for a specific use case. Your assessment will likely differ based on your project's unique requirements.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="marc_steinert_1-1758550429007.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318022i6DE4D8A1A7502555/image-size/large?v=v2&amp;amp;px=999" role="button" title="marc_steinert_1-1758550429007.png" alt="marc_steinert_1-1758550429007.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Evaluation Criteria Explained&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Here is a brief summary of each criterion used in the matrix:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Platform Compatibility:&lt;/STRONG&gt; Runs on both SAP ECC and S/4HANA systems.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Timeout Robustness:&lt;/STRONG&gt; Handles long-running tasks without timing out.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Package Creation:&lt;/STRONG&gt; Automatically divides data into work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Configurable Package Size:&lt;/STRONG&gt; Allows the developer to define the size of work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Parallel Execution:&lt;/STRONG&gt; Automatically starts and manages the execution of parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Result Aggregation:&lt;/STRONG&gt; Helps collect and consolidate results from parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Multi-Server Function:&lt;/STRONG&gt; Can distribute tasks across multiple application servers.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Processing Server Selection:&lt;/STRONG&gt; Allows specifying a server or server group for execution.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Load Balancing:&lt;/STRONG&gt; Automatically distributes tasks based on system load.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;System Load Control:&lt;/STRONG&gt; Allows setting limits on the maximum system resources used.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Implementation Effort:&lt;/STRONG&gt; The complexity and time required to implement the framework.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Documentation Quality:&lt;/STRONG&gt; The availability and quality of supporting documentation.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now lets have a look at the individual Frameworks.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1036551737"&gt;&lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt; provides a straightforward, function-module-based approach to simplify parallel processing with aRFCs. Instead of requiring the developer to manage the aRFC calls manually, the framework encapsulates the entire parallelization logic within a single, reusable function module, &lt;EM&gt;SPTA_PARA_PROCESS_START_2&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;To use the SPTA framework, a developer implements three specific form routines that serve as callbacks, filling them with the custom logic required for the application. The &lt;EM&gt;BEFORE_RFC_CALLBACK_FORM&lt;/EM&gt; is responsible for preparing the data and creating the work packages. The core processing logic, which is to be executed in parallel, is placed within the &lt;EM&gt;IN_RFC_CALLBACK_FORM&lt;/EM&gt;. After all the parallel tasks have been completed, the &lt;EM&gt;AFTER_RFC_CALLBACK_FORM&lt;/EM&gt; is called to consolidate the results and make them available for further processing.&lt;/P&gt;&lt;P&gt;For more information on the SPTA Framework, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://me.sap.com/notes/3002940/E" target="_self" rel="noopener noreferrer"&gt;SAP for Me (2020): 3002940 - Parallel Processing FAQ&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://sapyard.com/spta-parallel-processing-framework-in-abap" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] SAPYARD (2018): SPTA Parallel Processing Framework in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://www.linkedin.com/pulse/lets-talk-spta-framework-your-guide-parallel-sap-dzmitryi-kharlanau-1skaf/" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] LinkedIn (2024): Let’s Talk About the SPTA Framework: Your Guide to Parallel Processing in SAP&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-840038232"&gt;&lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt; is a more powerful and modern, object-oriented framework that also simplifies the use of aRFCs. It is structured into four main components that work together to provide a robust parallelization environment: the &lt;STRONG&gt;Package Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt;&amp;nbsp;and the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;The &lt;STRONG&gt;Package Provider&lt;/STRONG&gt; is responsible for automatically dividing the total dataset into smaller, processable packages according to configurable rules. The &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt; actively monitors the system's memory and process utilization to determine the maximum allowed number of parallel tasks, thereby preventing system overloads. The &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt; then calls the application-specific logic for each package in a separate aRFC task, while the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt; coordinates the entire process by requesting packages and resources and launching the asynchronous tasks.&lt;/P&gt;&lt;P&gt;Implementation is done in an object-oriented manner, starting with the factory class &lt;EM&gt;CL_SHDB_PFW_FACTORY&lt;/EM&gt; and using configuration objects from &lt;EM&gt;CL_SHDB_PFW_CONFIG&lt;/EM&gt; to define parameters like the number of parallel processes or package parameters.&lt;/P&gt;&lt;P&gt;While a complete guide for the SHDB Framework is not publicly available at this time, some information can be found on the SAP for Me portal. Relevant resources are available there using the search terms &lt;STRONG&gt;"SHDB Framework"&lt;/STRONG&gt; or &lt;STRONG&gt;"SHDB PFW"&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-643524727"&gt;&lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt; framework is another object-oriented solution for aRFC-based parallelization. Its name, while not official, comes from its original project folder. It is a lightweight solution centered around a main class and an interface that developers use to structure their parallel logic.&lt;/P&gt;&lt;P&gt;The implementation pattern requires the developer to create a processing class that implements the &lt;EM&gt;IF_ABAP_PARALLEL&lt;/EM&gt; interface. All the custom logic intended to run in parallel is then placed within its &lt;EM&gt;DO&lt;/EM&gt; method. Finally, the entire process is managed by an instance of the main &lt;EM&gt;CL_ABAP_PARALLEL&lt;/EM&gt; class and the parallel execution is triggered by calling the &lt;EM&gt;RUN_INST&lt;/EM&gt; method.&lt;/P&gt;&lt;P&gt;For more information on &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Schwarzmann, W. (2022): Parallel Processing with ABAP Objects: Implementation and Testing, isbn: 978-1-4932-2354-1&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/parallel-processing" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/using-class-cl-abap-parallel-for-mass-parallel-dialog-work-processes/ba-p/13579844" target="_self"&gt;SAP Community (2023): Using class CL_ABAP_PARALLEL for mass parallel dialog work processes&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-447011222"&gt;&lt;STRONG&gt;Background Processing Framework (bgPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Processing Framework&lt;/STRONG&gt; serves as the dedicated framework for the &lt;STRONG&gt;bgRFC&lt;/STRONG&gt; technology.&lt;/P&gt;&lt;P&gt;The implementation pattern requires a developer to encapsulate the business logic in a dedicated class that implements a framework interface. For most use cases, &lt;EM&gt;IF_BGMC_OP_SINGLE&lt;/EM&gt; is used to ensure the process follows strict transactional rules for data consistency.&lt;/P&gt;&lt;P&gt;Once this class with the business logic is ready, it is passed to the &lt;EM&gt;CL_BGMC_PROCESS_FACTORY&lt;/EM&gt;. This is a helper class provided by the framework that constructs the main process object for the background task. The task is then registered by calling the &lt;EM&gt;save_for_execution()&lt;/EM&gt; method and the entire process is finally triggered by a &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement.&lt;/P&gt;&lt;P&gt;For more information on the bgPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-concepts/background-processing-framework" target="_self" rel="noopener noreferrer"&gt;SAP Help Protal: Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-background-processing-framework/ba-p/13579056" target="_self"&gt;SAP Community (2023): Introducing the Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-250497717"&gt;&lt;STRONG&gt;Parallel Processing Framework (PPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Parallel Processing Framework&lt;/STRONG&gt;, sometimes also referred to as the &lt;STRONG&gt;Framework for Parallel Processing (FPP)&lt;/STRONG&gt;, is a framework based on background processes used to structure and execute mass-data processing runs in parallel.&lt;/P&gt;&lt;P&gt;Its implementation requires both settings in Customizing and the development of custom ABAP function modules. A developer first defines an &lt;STRONG&gt;application type&lt;/STRONG&gt; using transaction &lt;EM&gt;BANK_CUS_PPC&lt;/EM&gt;. This application type links specific processing steps, such as data packaging or execution, to the custom-developed function modules that contain the business logic.&lt;/P&gt;&lt;P&gt;The entire process is then initiated from a report by calling the central function module &lt;EM&gt;BANK_MAP_PP_START&lt;/EM&gt;, which uses the application type's configuration to manage the parallel jobs.&lt;/P&gt;&lt;P&gt;For more information on the PPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/sap-for-banking-blogs/exploring-mass-run-program-based-on-ppf/ba-p/13136452" target="_self"&gt;SAP Community (2015): Exploring Mass run program based on PPF&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/5bec6e0df6b549258e7ae381fedd4066/593e3752aeefbc02e10000000a44176d.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing (FPP)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--443732883"&gt;&lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt; is a comprehensive solution for structuring and controlling complex projects that involve large-scale data changes and is often used in migration scenarios.&lt;/P&gt;&lt;P&gt;The implementation requires just like the Parallel Processing Framework a combination of &lt;STRONG&gt;Customizing&lt;/STRONG&gt; and &lt;STRONG&gt;development&lt;/STRONG&gt;. In Customizing (via transaction SM30), a developer defines the entire project structure. This involves creating a &lt;STRONG&gt;Project Type&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MPROJ_TYP&lt;/EM&gt;), which consists of a sequence of &lt;STRONG&gt;Activities&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_SET&lt;/EM&gt;). Each activity is made up of one or more &lt;STRONG&gt;Steps&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_STEP&lt;/EM&gt;), where the custom ABAP logic is assigned.&lt;/P&gt;&lt;P&gt;The developer's main task is to create an &lt;STRONG&gt;application class&lt;/STRONG&gt; that contains the business logic for a step. This class must implement the interface &lt;EM&gt;IF_FINS_MASS_DATA&lt;/EM&gt;, which includes three key methods. The &lt;EM&gt;GET_PACKAGES&lt;/EM&gt; method is called to define the work packages. The &lt;EM&gt;PREPARE &lt;/EM&gt;method can be used for any setup tasks before the parallel processing starts. Finally, the &lt;EM&gt;PROCESS &lt;/EM&gt;method contains the core logic that is executed in parallel for each individual package.&lt;/P&gt;&lt;P&gt;As it is an older framework, further resources for the Mass Data Framework are primarily located on internal SAP platforms and are not publicly available.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I hope you found this overview informative and that it helps you tackle your own performance tuning challenges.&lt;/P&gt;&lt;P&gt;A special thanks to &lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/226501"&gt;@ManuS&lt;/a&gt;&amp;nbsp;&lt;/STRONG&gt; for the help and guidance!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397"/>
    <published>2025-09-29T08:52:47.138000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441</id>
    <title>Foreign entity in RAP</title>
    <updated>2025-09-29T09:05:47.440000+02:00</updated>
    <author>
      <name>Shyam4U</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1512208</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Description:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;A RAP BO entity which is not part of the BO composition tree for which it is defined. Defining a foreign entity in the behavior definition enables cross-BO message mapping between the two BOs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Key Concepts:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;RAP foreign entity is a component of the BC-ESI-RAP RESTful ABAP Programming Model. It is a representation of an external entity, such as a web service, that can be used in an ABAP program. The foreign entity is defined in the ABAP program and can be used to access data from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tips &amp;amp; Tricks:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;When defining a RAP foreign entity, it is important to ensure that all authentication information is correct. This will ensure that requests are sent securely and that responses are received correctly. Additionally, it is important to ensure that the URL of the external source is correct, as this will ensure that requests are sent to the correct location.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;How to use it:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;To use a RAP foreign entity, first define the entity in the ABAP program. This includes specifying the URL of the external source, as well as any authentication information that may be required. Once the entity is defined, it can be used to access data from the external source. This can be done using the RAP API, which provides methods for making requests and receiving responses from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758779361113.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319667i1BD7D26A3B6E12D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758779361113.png" alt="Shyam4U_0-1758779361113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Example : &lt;/STRONG&gt;&lt;/FONT&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;"In our system, we have two distinct business entities: &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Inventory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Order&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Although they are separate, they are fundamentally linked. We manage this connection by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;product ID&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; as the key identifier. This ensures that every time a sales order is created, the system automatically checks and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;deducts the correct quantity from the available stock&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the inventory. This process maintains accurate, real-time stock levels, which is critical for our operations."&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'inverty table' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_t_inventory { 

key product_id : abap.char(10) not null; 
stock_level : abap.int4; 
product_name : abap.char(40); 
create_at : timestampl; 
last_chdate : timestampl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INTERFACE VIEW INVERNTORY' 
@Metadata.ignorePropagatedAnnotations: true 
define root view entity ZSCN_i_INVENTORY as select from zscn_t_inventory 
{ 
key product_id as ProductId, 
stock_level as StockLevel, 
product_name as ProductName, 
create_at as CreateAt, 
last_chdate as LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INVENTORY CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: true 
@VDM.viewType: #TRANSACTIONAL 
define root view entity ZSCN_C_INVENTORY 
provider contract transactional_query 
as projection on ZSCN_i_INVENTORY 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Product Id' }] 
@UI.identification:[{ position: 10 , label: 'Product Id' }] 
key ProductId, 
@UI.lineItem: [{ position: 20 , label: 'Stock Level' }] 
@UI.identification:[{ position: 20 , label: 'Stock Level' }] 
StockLevel, 
@UI.lineItem: [{ position: 30 , label: 'Product Name' }] 
@UI.identification:[{ position: 30 , label: 'Product Name' }] 
ProductName, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_inventory unique; 
strict ( 2 ); 
with draft; 

define behavior for ZSCN_i_INVENTORY //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_t_inventory 
lock master 
total etag LastChdate 
draft table zscn_t_invent_d 
authorization master ( instance ) 
late numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 
create ( authorization : global ); 
update; 
delete; 
field ( readonly ) ProductId; 

validation vali_Stock on save { create; update; } 

draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_t_inventory { 
CreateAt = create_at ; 
LastChdate = last_chdate ; 
ProductId = product_id ; 
ProductName = product_name ; 
StockLevel = stock_level; 
} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758779760747.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319670i23615557B62C460B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758779760747.png" alt="Shyam4U_1-1758779760747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In our system, a key validation for inventory is to prevent the stock level from ever going into a negative value.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758780972739.png" style="width: 655px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319675i7F29A75ECBAD4A91/image-dimensions/655x264?v=v2" width="655" height="264" role="button" title="Shyam4U_0-1758780972739.png" alt="Shyam4U_0-1758780972739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD vali_Stock.
    
LOOP AT keys INTO DATA(lv_key).

      READ ENTITY IN LOCAL MODE ZSCN_i_INVENTORY
       ALL FIELDS WITH VALUE #( (  %key = lv_key-%key ) )
      RESULT DATA(lt_result).

      CHECK lt_result IS NOT INITIAL.

      LOOP AT lt_result INTO DATA(lv_result).
        IF lv_result-StockLevel &amp;lt; 0 .
          APPEND VALUE #(  %tky = lv_result-%tky  ) TO failed-zscn_i_inventory.

          APPEND VALUE #(  %tky = lv_result-%tky
                 %msg = new_message_with_text( severity =
                 if_abap_behv_message=&amp;gt;severity-error
                 text = 'Stock value should not be negative value ' &amp;amp;&amp;amp; ' ' &amp;amp;&amp;amp; lv_result-StockLevel )
                 %element-stocklevel = if_abap_behv=&amp;gt;mk-on  ) TO reported-zscn_i_inventory .

        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758781361679.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319683i21B33569A1767987/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758781361679.png" alt="Shyam4U_2-1758781361679.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Sales order Entity&amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'SALES ORDER' 
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_dt_salesord { 

key sales_order_id : abap.numc(10) not null; 
product_id : abap.char(10) not null; 
quantity : abap.numc(5); 
customer_id : abap.char(10); 
order_date : abap.dats; 
@Semantics.amount.currencyCode : 'zscn_dt_salesord.currency' 
total_amount : abap.curr(13,2); 
currency : abap.cuky; 
create_at : timestamp; 
last_changed : timestamp; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'SALESORD CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: false 
define root view entity ZSCN_C_SALESORD 
provider contract transactional_query 
as projection on ZSCN_I_SALESORD 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Sales Order Id' }] 
@UI.identification:[{ position: 10 , label: 'Sales Order Id' }] 
key SalesOrderId, 
@UI.lineItem: [{ position: 20 , label: 'Product Id' }] 
@UI.identification:[{ position: 20 , label: 'Product Id' }] 
@Consumption.valueHelpDefinition: [{ 
entity: { name: 'ZSCN_C_INVENTORY', element: 'ProductId' } }] 
ProductId, 
@UI.lineItem: [{ position: 30 , label: 'Quantity' }] 
@UI.identification:[{ position: 30 , label: 'Quantity' }] 
Quantity, 
@UI.lineItem: [{ position: 40 , label: 'Customer Id' }] 
@UI.identification:[{ position: 40 , label: 'Customer Id' }] 
CustomerId, 
@UI.lineItem: [{ position: 50 , label: 'Order Date' }] 
@UI.identification:[{ position: 50 , label: 'Order Date' }] 
OrderDate, 
@UI.lineItem: [{ position: 60 , label: 'Total Amount' }] 
@UI.identification:[{ position: 60 , label: 'Total Amount' }] 
TotalAmount, 
Currency, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChanged 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_salesord unique; 
strict ( 2 ); 
with draft; 

//foreign entity Zscn_i_inventory alias _inventory ; 
define behavior for ZSCN_I_SALESORD //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_dt_salesord 
lock master 
total etag LastChanged 
draft table zscn_dt_salord_d 
authorization master ( instance ) 
early numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 

create ( authorization : global ); 
update; 
delete; 
field ( readonly ) SalesOrderId; 

validation valid_ProductId on save { create; update; } 
determination stock_upadte on save { field Quantity; } 
 
draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_dt_salesord 
{ 
CreateAt = create_at; 
Currency = currency; 
CustomerId = customer_id; 
LastChanged = last_changed; 
OrderDate = order_date;
ProductId = product_id; 
SalesOrderId = sales_order_id; 
Quantity = quantity; 
TotalAmount = total_amount; 

} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;without the foreign entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt; &lt;SPAN class=""&gt;syntax ,&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; behavior definition of the ZSCN_I_SALESORD it only holding the structure of ZSCN_I_SALESORD it &lt;/SPAN&gt;&lt;SPAN class=""&gt;doesn't&lt;/SPAN&gt;&lt;SPAN class=""&gt; hold the structure &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt;&lt;SPAN class=""&gt; .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758782312689.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319693i04E76CF2ACE2702F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758782312689.png" alt="Shyam4U_3-1758782312689.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758782320070.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319694iBE9FAD22C19ED3EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_4-1758782320070.png" alt="Shyam4U_4-1758782320070.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Due to the separate entity definitions, errors from an inventory stock update cannot be directly propagated to the sales order user interface. In Failed and &lt;/SPAN&gt;&lt;SPAN class=""&gt;Reported structure will be miss &lt;/SPAN&gt;&lt;SPAN class=""&gt;match. &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;T&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;o propagate &lt;/SPAN&gt;&lt;SPAN class=""&gt;this&lt;/SPAN&gt;&lt;SPAN class=""&gt; we use of foreign entity syntax&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;uncomment the&amp;nbsp;//foreign entity Zscn_i_inventory alias _inventory ;&amp;nbsp; in Behavior definition of&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Zscn_i_salesord .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758782990181.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319700i976D6F6DBC5BC8E1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758782990181.png" alt="Shyam4U_0-1758782990181.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After adding the Foreign entity Zscn_i_inventory &amp;nbsp;alies _inventory ; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can see the change in the entity Zscn_i_salesord structure .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758783042974.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319701i23555758241BE272/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758783042974.png" alt="Shyam4U_1-1758783042974.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758783077463.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319702i7ED69A661F19E1EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_2-1758783077463.png" alt="Shyam4U_2-1758783077463.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758783109372.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319703iBBF8EBD3793DA2F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758783109372.png" alt="Shyam4U_3-1758783109372.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758783178499.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319704iD42E5E0BC1A228ED/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_4-1758783178499.png" alt="Shyam4U_4-1758783178499.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using the Determination we are update the stock of&amp;nbsp;the inventory table based on the Product id in Behavior definition implementation class .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A critical validation has been implemented: when a sales order is created, if the requested quantity is greater than the available stock level, an error is raised in the inventory business logic. This error is then propagated to the sales order entity, making it visible on the sales order screen.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD stock_upadte. 

LOOP AT keys INTO DATA(lv_key). 

READ ENTITY IN LOCAL MODE zscn_i_salesord ALL FIELDS WITH 
VALUE #( ( %key = lv_key-%key ) ) 
RESULT DATA(lt_result). 

CHECK lt_result IS NOT INITIAL. 

LOOP AT lt_result INTO DATA(lv_result). 
 
READ ENTITY ZSCN_i_INVENTORY 
ALL FIELDS WITH VALUE #( ( ProductId = lv_result-ProductId ) ) 
RESULT DATA(lt_result_inventory). 

LOOP AT lt_result_inventory INTO DATA(lv_inventory). 

 DATA(lv_stock) = CONV i( lv_inventory-StockLevel - lv_result-Quantity ). 

MODIFY ENTITY ZSCN_i_INVENTORY UPDATE FIELDS ( StockLevel ) 
WITH VALUE #( ( %key-ProductId = lv_inventory-%key-ProductId 
StockLevel = lv_stock ) ) REPORTED DATA(ltreported). 

if ltreported is not INITIAL. 
 
DATA: lt_dummy LIKE reported-_inventory. 
lt_dummy = CORRESPONDING #( ltreported-zscn_i_inventory ). 

APPEND LINES OF lt_dummy TO reported-_inventory.  

endif. 
      ENDLOOP. 
   ENDLOOP. 
ENDLOOP. 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;above&lt;/SPAN&gt;&lt;SPAN class=""&gt; code &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt; am using &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CORRESPONDING #( &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ltreported&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;zscn_i_inventory&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; ). &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;because &lt;/SPAN&gt;&lt;SPAN class=""&gt;of while&lt;/SPAN&gt; &lt;SPAN class=""&gt;using&lt;/SPAN&gt;&lt;SPAN class=""&gt; the EML syntax the report will be early but inside the Behavior &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition it&lt;/SPAN&gt;&lt;SPAN class=""&gt; will be late &lt;/SPAN&gt;&lt;SPAN class=""&gt;structure.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_5-1758783700742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319709i8DE267E217225D43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_5-1758783700742.png" alt="Shyam4U_5-1758783700742.png" /&gt;&lt;/span&gt;&amp;nbsp; &lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_6-1758783731326.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319710i291685CEEACF10B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_6-1758783731326.png" alt="Shyam4U_6-1758783731326.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In inventory entity this are the possible product we have in that &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; will &lt;/SPAN&gt;&lt;SPAN class=""&gt;chose&lt;/SPAN&gt;&lt;SPAN class=""&gt; Titan watch&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758784285024.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319716i82C35938198C8543/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758784285024.png" alt="Shyam4U_0-1758784285024.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When creating a sales order for a Titan watch, if the requested quantity of 50 exceeds the available stock of 40, the system will prevent the transaction and display an error.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758784335793.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319717i0D9C69770EC165AB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758784335793.png" alt="Shyam4U_1-1758784335793.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;The error which is from the inventory entity by using the foreign entity concept we are propagating the error message of &lt;/SPAN&gt;&lt;SPAN class=""&gt;inventory in&lt;/SPAN&gt;&lt;SPAN class=""&gt; sales order entity.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758784368449.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319718i9251943C19615F88/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758784368449.png" alt="Shyam4U_2-1758784368449.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related Information:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;For more information on using RAP foreign entities, please refer to the SAP Help documentation on BC-ESI-RAP RESTful ABAP Programming Model. Additionally, there are many tutorials available online which provide step-by-step instructions on how to use RAP foreign entities in an ABAP program.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Thanks for &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.erplingo.com/sap-glossary/en/bc-esi-rap/rap-foreign-entity" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;What is RAP foreign entity in SAP BC-ESI-RAP? Definition &amp;amp; Tips&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441"/>
    <published>2025-09-29T09:05:47.440000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/enhancing-standard-bapis-when-and-how-to-do-it/ba-p/14228472</id>
    <title>Enhancing Standard BAPIs: When and How to Do It</title>
    <updated>2025-09-29T09:08:51.264000+02:00</updated>
    <author>
      <name>Shantalinga</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2248550</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Enhancing Standard BAPIs: When and How to Do It&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Business Application Programming Interfaces (&lt;STRONG&gt;BAPIs&lt;/STRONG&gt;) are one of the most powerful tools in SAP, designed to enable seamless integration between SAP and external systems. In most cases, the &lt;STRONG&gt;standard BAPIs&lt;/STRONG&gt; provided by SAP are sufficient to cover typical business scenarios.&lt;/P&gt;&lt;P&gt;However, real-world requirements often demand more. Maybe you need an extra field that isn’t delivered, or you have to add custom checks before the data is posted. That’s when &lt;STRONG&gt;enhancing a standard BAPI&lt;/STRONG&gt; becomes necessary.&lt;/P&gt;&lt;P&gt;In this blog, we’ll look at &lt;STRONG&gt;when&lt;/STRONG&gt; it makes sense to enhance a BAPI and &lt;STRONG&gt;how&lt;/STRONG&gt; you can do it safely without breaking SAP best practices.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;When Should You Enhance a Standard BAPI?&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Missing Fields&lt;/STRONG&gt;&lt;BR /&gt;Sometimes the delivered BAPI doesn’t expose all the fields you need. For example, a custom field in the material master might not be available.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Extra Validations&lt;/STRONG&gt;&lt;BR /&gt;You may need business-specific checks before the BAPI processes data.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Logic Before or After Execution&lt;/STRONG&gt;&lt;BR /&gt;You might want to execute additional steps either before calling the BAPI or right after it completes.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Integration with External Systems&lt;/STRONG&gt;&lt;BR /&gt;If you’re mapping SAP data with a third-party system, additional fields or transformations may be needed.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Performance Improvements&lt;/STRONG&gt;&lt;BR /&gt;In some cases, the standard BAPI processes more than you need. Enhancements can help you fine-tune the performance.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;How to Enhance a Standard BAPI&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP provides different ways to enhance BAPIs, depending on the extensibility options available. Let’s go through them one by one:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Using BADI Enhancements (Recommended)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Many standard BAPIs come with &lt;STRONG&gt;Business Add-Ins (BADI)&lt;/STRONG&gt; to make them extensible.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Check in &lt;STRONG&gt;SE18/SE19&lt;/STRONG&gt; if a BADI exists for the BAPI.&lt;/LI&gt;&lt;LI&gt;Implement the BADI and add your custom logic.&lt;/LI&gt;&lt;LI&gt;Activate and test.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shantalinga_0-1758866381921.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320103i78596E4A8F912B5C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shantalinga_0-1758866381921.png" alt="Shantalinga_0-1758866381921.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_ex_customer_add_data~check_all_data.
  IF s_kna1-kredit = '50000'.
    "Custom validation logic here
  ENDIF.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Enhancing BAPI Structures (Appending Fields)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;If you need extra fields, check if the BAPI’s structure allows &lt;STRONG&gt;append structures&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Extend the structure using &lt;STRONG&gt;SE11&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Populate the new fields via a user exit or BADI.&lt;/LI&gt;&lt;LI&gt;Test the enhanced BAPI thoroughly.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;User Exits in BAPI Processing&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Some BAPIs offer user exits where custom code can be added.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Identify the exit in &lt;STRONG&gt;SMOD&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Implement it using &lt;STRONG&gt;CMOD&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Add your business logic.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shantalinga_1-1758867075869.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320119i7A1E757890B55595/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shantalinga_1-1758867075869.png" alt="Shantalinga_1-1758867075869.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;INCLUDE MF02DFEX.
IF sy-tcode = 'XD01'.
  "CUSTOM LOGIC
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Wrapper Function Modules&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;If no BADI or exit is available, create a &lt;STRONG&gt;custom wrapper&lt;/STRONG&gt; around the standard BAPI.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Copy the BAPI into a custom function module (ZBAPI_...).&lt;/LI&gt;&lt;LI&gt;Insert your logic.&lt;/LI&gt;&lt;LI&gt;Use the wrapper instead of calling the standard BAPI directly.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Implicit Enhancements&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;When all else fails, use &lt;STRONG&gt;implicit enhancements&lt;/STRONG&gt; at predefined spots in the BAPI.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Create an enhancement via &lt;STRONG&gt;SE19&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Insert your custom code.&lt;/LI&gt;&lt;LI&gt;Activate and test.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Enhancing a standard BAPI is often the only way to meet specific business needs, but it must be done carefully. By sticking to SAP’s recommended approaches—such as &lt;STRONG&gt;BADIs, user exits, wrapper functions, and implicit enhancements&lt;/STRONG&gt;—you can deliver the required functionality without risking system stability or upgrade issues.&lt;/P&gt;&lt;P&gt;The key is to &lt;STRONG&gt;choose the right enhancement technique&lt;/STRONG&gt; based on your scenario, test extensively, and document everything. Done right, BAPI enhancements make your system more flexible while keeping it aligned with SAP best practices.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/enhancing-standard-bapis-when-and-how-to-do-it/ba-p/14228472"/>
    <published>2025-09-29T09:08:51.264000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-abap-sdk-for-ibm-watsonx-v1-4-0-released/ba-p/14230743</id>
    <title>SAP ABAP SDK for IBM watsonx v1.4.0 released</title>
    <updated>2025-09-29T16:50:19.279000+02:00</updated>
    <author>
      <name>christian_bartels</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/184450</uri>
    </author>
    <content>&lt;P&gt;On September 26, 2025, IBM has released version 1.4.0 of its ABAP® Software Development Kit (SDK) for IBM® watsonx™ services. The &lt;A href="https://www.ibm.com/products/watsonx-ai" target="_self" rel="nofollow noopener noreferrer"&gt;watsonx.ai&lt;/A&gt; service can be used to train, validate, tune, and deploy foundation and machine learning models. The &lt;A href="https://cloud.ibm.com/catalog/services/watsonxai-runtime" target="_self" rel="nofollow noopener noreferrer"&gt;watsonx.ai Runtime&lt;/A&gt; is used to build, run and manage generative AI and machine learning applications with built-in performance and scalabilityThe ABAP SDK provides a class library that can be downloaded to SAP systems using &lt;A href="https://abapgit.org/" target="_self" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt; and comes in two flavors:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/IBM/abap-sdk-nwas-x" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP SDK for IBM watsonx, using SAP NetWeaver&lt;/A&gt; for the SAP Business Suite running on SAP NetWeaver 7.50 or above and for the SAP S/4HANA on-premises edition.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/IBM/abap-sdk-btp-x" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP SDK for IBM watsonx, using SAP BTP ABAP Environment&lt;/A&gt; for the SAP Business Technology Platform ABAP Environment.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Enhancements in this release include new watsonx.ai methods in the groups Prompt Sessions and Prompts. More information about the changes in version 1.4.0 can be found in the repositories in the migration document &lt;A href="https://github.com/IBM/abap-sdk-nwas-x/blob/main/MIGRATION-V1.4.0.md" target="_self" rel="nofollow noopener noreferrer"&gt;MIGRATION-V1.4.0.md&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Detailed information on how to setup and use the SDK can be found in the README.md files of the GitHub repositories. The README.md files also provide two comprehensive examples to show how the supported services can be used. An even more elaborated article about how use watsonx services with the ABAP SDK can be found in Joachim Rese's blog article &lt;A href="https://community.sap.com/t5/application-development-blog-posts/how-to-bring-generative-ai-to-your-abap-program-using-the-abap-sdk-for-ibm/ba-p/13694067" target="_self"&gt;How to Bring Generative AI to Your ABAP Program Using the ABAP SDK for IBM watsonx&lt;/A&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-abap-sdk-for-ibm-watsonx-v1-4-0-released/ba-p/14230743"/>
    <published>2025-09-29T16:50:19.279000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-general-blog-posts/smart-debugger/ba-p/14231014</id>
    <title>Smart Debugger</title>
    <updated>2025-09-29T23:51:26.297000+02:00</updated>
    <author>
      <name>yury_sichov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/200363</uri>
    </author>
    <content>&lt;P&gt;Hello everyone. I invented a new&lt;A href="https://github.com/ysichov/Smart-Debugger" target="_self" rel="nofollow noopener noreferrer"&gt; Abap debugger&lt;/A&gt; ) This is an &lt;A href="https://github.com/ysichov/Smart-Debugger/blob/master/src/z_smart_debugger_test.prog.abap" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP Script&lt;/A&gt; which can be used like addon to the standard debugger.&lt;/P&gt;&lt;P&gt;The main feature is that&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;it can work as debugger time machine which store every variables changes on every steps and show it in convenient format. Usuful to analyse deep structures, several tables simultaneously and search changes in the past!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Instance variables, structures and deep structures are shown as&amp;nbsp; hierarchiсal trees so we can have a 'helicopter view' for all variables at any step! Double-click on any table variable or table inside a deep structure will show it in separate window! And we don't have no limitations for windows quantity. If you have a big display you can open more then 10 tables simultaneously and analyse it!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="deep.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321385i2DD6CDE8A9D9199E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="deep.png" alt="deep.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Also it can show &lt;A href="https://github.com/WegnerDan/abapMermaid" target="_self" rel="nofollow noopener noreferrer"&gt;mermaid&lt;/A&gt; diagram with calls execution or draw execution flow&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Stack calls" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321372i4CC82D2F14B0A223/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="ice.jfif" alt="Stack calls" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Stack calls&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After double-click on any variable it works as watchpoint and collects not only selected variables but dependents also (forms/methods/functions call). Button "Calculation Flow" will paint all steps in the code where variables were changed and paints Mermaid diagram for it.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The main profit for me is to getting calculation history quick. As I am an HR developer I tested salary calculations cases. In the classic debugger I can set a watchpoint. But in real program variables names are altered by calls. I name it outer and inners names. And in real debugging I should find manually all that altering to get the origin of all calculations. With Smart Debugger I get calculations history immediately because it can track all that names changes and can collect history path for selected variable by me.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="calc.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321376i361A8008B388948E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="calc.png" alt="calc.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/ysichov/Smart-Debugger/blob/master/Z_SDDE_mermaid" target="_self" rel="nofollow noopener noreferrer"&gt;Mermaid version is here&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;We can Set/Delete Session/External breakpoints and run standard debug buttons( F5. F6, F7, F8). Also we can get back to the past steps and see variables state at that moment.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;So set break-points in any abap code and run. After break-point is triggered, go to the last tab "script" and paste the script.&amp;nbsp;Choose radio button "Execute directly" and press "Start Script" button.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="start.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321386i676776CC08C8038A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="start.png" alt="start.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="http://zevolving.com/2012/01/iterator-design-pattern-to-access-linked-list/" target="_self" rel="nofollow noopener noreferrer"&gt;Iterators example&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iter.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321438iC40BE2DC5803F2E1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="iter.png" alt="iter.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Feel free to open any issue or Idea/requests for changes.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-general-blog-posts/smart-debugger/ba-p/14231014"/>
    <published>2025-09-29T23:51:26.297000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-28/ba-p/14231467</id>
    <title>Customer &amp; Partner Roundtable for SAP BTP ABAP Environment #28</title>
    <updated>2025-09-30T11:14:17.098000+02:00</updated>
    <author>
      <name>iwona_hahn</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4326</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1860394371" id="toc-hId-1890871559"&gt;&lt;STRONG&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;The call for contributions for one of the upcoming roundtables is open!&amp;nbsp;&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;If you want to show a demo or share a use case scenario for SAP BTP ABAP Environment, send us an&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="mailto:sap_btp_abap_environment@sap.com" target="_blank" rel="noopener nofollow noreferrer"&gt;email&lt;/A&gt;&amp;nbsp;and we will get back to you.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1534798147" id="toc-hId-1565275335"&gt;Introduction&lt;/H2&gt;&lt;DIV&gt;&lt;SPAN class=""&gt;A&lt;/SPAN&gt;&lt;SPAN class=""&gt;s&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;A href="https://www.sap.com/products/technology-platform/abap/environment.html" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN class=""&gt;SAP&amp;nbsp;BTP&amp;nbsp;ABAP&amp;nbsp;environment (aka Steampunk)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/A&gt;and ABAP Cloud&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;became&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;more popular&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;inside and outside of SAP, there is a high demand for rolling out the latest product news and updates, asking questions, and showing demos.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;You can find the slides presented, recordings, and further references from the previous roundtables in this&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/iwonahahn/SAP-BTP-ABAP-Environment-Roundtable/tree/main" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub repository&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_0-1751374366410.jpeg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281320iF5290A011527C9B9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_0-1751374366410.jpeg" alt="iwona_hahn_0-1751374366410.jpeg" /&gt;&lt;/span&gt;&lt;H2 id="toc-hId-1338284642" id="toc-hId-1368761830"&gt;Meeting Information&lt;BR /&gt;&lt;BR /&gt;&lt;/H2&gt;&lt;STRONG&gt;When:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;October 30&lt;/SPAN&gt;&lt;/STRONG&gt;, 2:00 - 3:00 PM CEST&amp;nbsp; – &lt;A href="https://sap-se.zoom.us/meeting/register/BNTQg36rTgWstLMzArws0g" target="_blank" rel="noopener nofollow noreferrer"&gt;Zoom Meeting&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(&lt;STRONG&gt;please register&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in advance)&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Who:&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;All interested&amp;nbsp;&lt;STRONG&gt;customers, partners,&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;stakeholders&lt;/STRONG&gt;&amp;nbsp;are invited to join this roundtable&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BTP ABAP team&lt;/STRONG&gt;:&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4296" target="_blank"&gt;Frank Jentsch&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(Product Lead for SAP BTP ABAP&amp;nbsp;Environment)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4326" target="_self"&gt;&lt;SPAN class=""&gt;Iwona Hahn&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(Product Management)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Jan Ole Skirke (Development Expert)&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Preliminary Agenda:&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;Product update for SAP BTP ABAP Environment&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Downtime-optimized hotfix collection updates for SAP BTP ABAP Environment &lt;STRONG&gt;including demo&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Q&amp;amp;A&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;SPAN&gt;Looking forward to meeting you!&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;A href="https://sap-se.zoom.us/meeting/register/BNTQg36rTgWstLMzArws0g" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_1-1751374366424.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281321i39537B5D388BE6C4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_1-1751374366424.png" alt="iwona_hahn_1-1751374366424.png" /&gt;&lt;/span&gt;&lt;/A&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Check out our&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://pages.community.sap.com/topics/btp-abap-environment" target="_blank" rel="noopener noreferrer"&gt;SAP Business Technology ABAP Environment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;page in SAP Community&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;product&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;updates&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;upcoming events.&lt;/SPAN&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-28/ba-p/14231467"/>
    <published>2025-09-30T11:14:17.098000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-based-on-grouping-tax-number-is-mandatory/ba-p/14231728</id>
    <title>SAP MDG: Based on Grouping, Tax Number is Mandatory</title>
    <updated>2025-09-30T15:37:27.383000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note: This blog does not include execution screenshots.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in &lt;STRONG&gt;SAP Master Data Governance (MDG) to make the Tax Number field mandatory for specific Groupings. The logic is implemented using the enhancement framework via BADI: &lt;CODE&gt;USMD_RULE_SERVICE, specifically through the method CHECK_ENTITY.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite: A working knowledge of BADI &lt;CODE&gt;USMD_RULE_SERVICE and ABAP development is required to follow this implementation.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;!--   StartFragment    --&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Development Details&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Target Groupings: &lt;CODE&gt;ZSGP, ZSGC&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Class: &lt;CODE&gt;ZMDGS_MSG_CLASS&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Number: &lt;CODE&gt;001&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Type: &lt;CODE&gt;E&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Text: &lt;CODE&gt;Tax Number is Mandatory !!!&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BADI Method Implemented: &lt;CODE&gt;IF_EX_USMD_RULE_SERVICE~CHECK_ENTITY&amp;nbsp;&lt;/CODE&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;The validation logic is written directly in the method &lt;CODE&gt;CHECK_ENTITY&lt;/CODE&gt;&lt;P&gt;&lt;!--   EndFragment    --&gt;&lt;/P&gt;&lt;P&gt;This ensures that when the specified groupings are selected, the system enforces the presence of a Tax Number and raises a custom message if it's missing.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD if_ex_usmd_rule_service~check_entity.
    CALL METHOD io_model-&amp;gt;read_entity_data_all
      EXPORTING
        i_fieldname    = 'BP_HEADER'            
        if_active      = abap_false            
        i_crequest     = id_crequest            " Change Request
      IMPORTING
        et_data_entity = DATA(lt_data).        " Data for Entity Types
    .
    READ TABLE lt_data INTO DATA(ls_data) WITH KEY usmd_entity = 'BP_HEADER' usmd_entity_cont = ' ' struct = 'KATTR'.
    ASSIGN ls_data-r_t_data-&amp;gt;* TO FIELD-SYMBOL(&amp;lt;lt_data&amp;gt;).
    LOOP AT &amp;lt;lt_data&amp;gt; ASSIGNING FIELD-SYMBOL(&amp;lt;ls_data&amp;gt;).
      ASSIGN COMPONENT 'BU_GROUP' OF STRUCTURE &amp;lt;ls_data&amp;gt; TO FIELD-SYMBOL(&amp;lt;lv_group&amp;gt;).
      IF &amp;lt;lv_group&amp;gt; IS ASSIGNED AND
         &amp;lt;lv_group&amp;gt; EQ 'ZSGP' OR
         &amp;lt;lv_group&amp;gt; EQ 'ZSGC'.
        READ TABLE lt_data INTO ls_data WITH KEY usmd_entity = 'BP_HEADER' usmd_entity_cont = 'BP_TAXNUM' struct = 'KATTR'.
        IF sy-subrc &amp;lt;&amp;gt; 0.
          et_message = VALUE #( ( msgid = 'ZMDGS_MSG_CLASS' msgty = 'E' msgno = '001' ) ).
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-based-on-grouping-tax-number-is-mandatory/ba-p/14231728"/>
    <published>2025-09-30T15:37:27.383000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-no-special-characters-in-account-holder-field/ba-p/14232445</id>
    <title>SAP MDG: Validation - No Special Characters in Account Holder Field</title>
    <updated>2025-10-01T11:30:00.034000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;Hi&lt;STRONG&gt; SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01: This blog does not include execution screenshots.&lt;BR /&gt;Note 02: The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in SAP Master Data Governance (MDG) to restrict the use of special characters in the Account Holder field. The validation logic is implemented using the enhancement framework via BADI: &lt;STRONG&gt;&lt;CODE&gt;USMD_RULE_SERVICE, specifically through the method CHECK_ENTITY. This ensures data consistency and compliance with formatting standards during master data creation and change processes.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite: A working knowledge of BADI&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;USMD_RULE_SERVICE and ABAP development is required to follow this implementation.&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Development Details&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Message Class:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;ZMDGS_MSG_CLASS&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Number:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;002&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Type:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;E&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Text:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;The Account Holder field must not contain any special characters&lt;BR /&gt;&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BADI Method Implemented:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;IF_EX_USMD_RULE_SERVICE~CHECK_ENTITY&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;The validation logic is written directly in the method&amp;nbsp;CHECK_ENTITY&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;P&gt;This ensures that when the Account Holder field is entered, the system validates the content to ensure it does not contain any special characters, and raises a custom message if invalid characters are found&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; METHOD if_ex_usmd_rule_service~check_entity.
   DATA: lt_data        TYPE usmd_ts_data_entity,
         lt_bank_data   TYPE REF TO data,
         lt_msg         TYPE usmd_t_message,
         ls_msg         TYPE usmd_s_message,
         lv_fieldname   TYPE bu_koinh,
         lv_acc_holder TYPE char20.
   FIELD-SYMBOLS:
     &amp;lt;lt_bank&amp;gt;        TYPE SORTED TABLE,
     &amp;lt;ls_bank&amp;gt;        TYPE any,
     &amp;lt;lv_acc_holder&amp;gt; TYPE any.
   io_model-&amp;gt;get_changed_fields(
     IMPORTING	
       et_entity_fieldname =  DATA(lt_fieldname)               
   )
   .
   LOOP AT lt_fieldname INTO DATA(ls_fieldname).
     lv_fieldname = ls_fieldname-fieldname.
     IF lv_fieldname = 'KOINH'.
       lv_acc_holder = lv_fieldname.
     ENDIF.
   ENDLOOP.
   IF lv_acc_holder = 'KOINH'.
     io_model-&amp;gt;read_entity_data_all(
      EXPORTING
        i_fieldname      =       'BP_HEADER'           " Financial MDM: Field Name
        if_active        =         abap_false          " Financial MDM: General Indicator
    i_crequest       =            id_crequest          " Change Request
      IMPORTING
    et_message       =        lt_msg          " Messages
        et_data_entity   =      lt_data            " Data for Entity Types
    ).
     lt_bank_data = VALUE #( lt_data[ usmd_entity = 'BP_HEADER' usmd_entity_cont = 'BP_BKDTL' struct = 'KATTR' ]-r_t_data  OPTIONAL ).
     IF lt_bank_data IS NOT INITIAL.
       ASSIGN lt_bank_data-&amp;gt;* TO &amp;lt;lt_bank&amp;gt;.
       IF &amp;lt;lt_bank&amp;gt; IS ASSIGNED.
         LOOP AT &amp;lt;lt_bank&amp;gt; ASSIGNING &amp;lt;ls_bank&amp;gt;.
           ASSIGN COMPONENT 'KOINH' OF STRUCTURE &amp;lt;ls_bank&amp;gt; TO &amp;lt;lv_acc_holder&amp;gt;.
           IF &amp;lt;lv_acc_holder&amp;gt; IS ASSIGNED AND
              &amp;lt;lv_acc_holder&amp;gt; IS NOT INITIAL AND                        
             &amp;lt;lv_acc_holder&amp;gt; CA '~`!@#$%^&amp;amp;*()-_+={}[]|\:;"&amp;lt;,&amp;gt;.?/'.
             et_message = VALUE #( BASE et_message ( fieldname = 'KOINH' msgid = 'ZMDGS_MESSAGE_CLS' msgno = '002' msgty = 'E' ) ).
           ENDIF.
         ENDLOOP.
       ENDIF.
     ENDIF.
   ENDIF.
 ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-no-special-characters-in-account-holder-field/ba-p/14232445"/>
    <published>2025-10-01T11:30:00.034000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-cds-based-analytical-models-with-the-relation-explorer-analytical/ba-p/14229070</id>
    <title>Exploring CDS based Analytical Models with the Relation Explorer - analytical view/perspective</title>
    <updated>2025-10-01T16:39:40.313000+02:00</updated>
    <author>
      <name>martin_mayer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191669</uri>
    </author>
    <content>&lt;P&gt;Relation explorer &lt;STRONG&gt;analytical view / analytical perspective&lt;/STRONG&gt; makes it easy to get an&amp;nbsp;overview of the analytical model with very less clicks.&amp;nbsp;No need to open all the views to understands details.&lt;/P&gt;&lt;P&gt;We start small , looking to a branch of a star schema , &lt;STRONG&gt;dimension&lt;/STRONG&gt; Connection (&amp;nbsp;/DMO/ANA_I_Connection ) which is part of the flight data model.&amp;nbsp; After calling the relation explorer we see the Relation Explorer Tab in the below section of the screenshot.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1759323592595.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322013iB6966D0C878BC05F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="martin_mayer_1-1759323592595.png" alt="martin_mayer_1-1759323592595.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Relation Explorer tab shows:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;in the left pane the associations from the dimension to other CDS views &lt;U&gt;over all levels&lt;/U&gt; are&amp;nbsp;visualizes . It starts fully expanded!&lt;BR /&gt;next to the CDS view name we see the view type. E.g. /DMO/ANA_I_CARRIER is of type [Dimension]&lt;/LI&gt;&lt;LI&gt;in the right pane one can see all the elements of current view. As&amp;nbsp;/DMO/ANA_I_Connection is selected all elements of this dimension are displayed.&lt;UL&gt;&lt;LI&gt;One can select (single click) any other view e.g. /DMO/ANA_I_CARRIER and the right pane get updated with the elements of that view.&lt;/LI&gt;&lt;LI&gt;double clicking the view will directly open the view&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;the right pane displays all elements grouped by roles.&lt;UL&gt;&lt;LI&gt;In this example we have 2 keys and e.g. expanding AirlineID show label and additional details about association and InfoObject. In case of compounded parent we would have seen the Parent element.&lt;/LI&gt;&lt;LI&gt;double clicking AirlineID highlight the element in the source ( see line 21 )&lt;/LI&gt;&lt;LI&gt;[Text] gives a hint that AirlineID has text,&amp;nbsp;this is missing for ConnetionID -&amp;gt; no Text supported&lt;/LI&gt;&lt;LI&gt;Attributes list all dimension attributes. Last one, DistanceUnit is a Unit element.&lt;/LI&gt;&lt;LI&gt;the Unit group show all unit related elements.&lt;/LI&gt;&lt;LI&gt;other group are shown if relevant.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;One can also start the analytical Relation Explorer based on query or cube view.&lt;BR /&gt;In both cases the cube view is opened and visualizes the cube with all associations .&lt;/P&gt;&lt;P&gt;We change focus and look to the example of a &lt;STRONG&gt;query&lt;/STRONG&gt;&amp;nbsp;- starting relation explorer shows the cube definition including dimension Connection from above.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_0-1759325206609.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322016i9D9521200352EC39/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="martin_mayer_0-1759325206609.png" alt="martin_mayer_0-1759325206609.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;with one view&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;in the left pane we get all associations visualizes. View names are shown with the view types&lt;/LI&gt;&lt;LI&gt;in the right pane we can see all 13 dimensions of the cube and get if dimension support Text, have Attributes or Hierarchies&lt;UL&gt;&lt;LI&gt;from 1st screenshot we already know that Text, Attributes and Hierarchies are available for AirlineID&lt;/LI&gt;&lt;LI&gt;expanding ConnectionID show that it is compounded to AirlineID&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;we see all 5 measures with additional details like aggregation method and unit&lt;/LI&gt;&lt;LI&gt;with " Units (2) " we see the unit related dimensions. This section only list those dimension that are unit relevant.&amp;nbsp; Expanding the dimension like CurrencyCode lists all related measures.&amp;nbsp;&lt;BR /&gt;( Both dimension are also listed in dimension section. )&lt;/LI&gt;&lt;LI&gt;for time based dimension one can directly understand the base dimension and wherefrom it is derived without looking into the source ( see below snippet with FiscalYearMonth )&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_0-1759322874979.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322010i53240695CD5E5697/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="martin_mayer_0-1759322874979.png" alt="martin_mayer_0-1759322874979.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;How to start the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-development-tools-user-guide/relation-explorer" target="_self" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Relation Explorer&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1758891540834.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320499i4A0D737B505A0062/image-size/medium?v=v2&amp;amp;px=400" role="button" title="martin_mayer_1-1758891540834.png" alt="martin_mayer_1-1758891540834.png" /&gt;&lt;/span&gt;call relation explorer to see the view&lt;/P&gt;&lt;P&gt;right click somewhere in the CDS view&amp;nbsp;&lt;/P&gt;&lt;P&gt;(&amp;nbsp;in case of CDS view type cube, dimension or query the analytical view is the default view )&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;If the view is not shown, choose &lt;STRONG&gt;Configure Context&lt;/STRONG&gt; and activate it.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;one can switch any time to different perspective / context if needed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1759325661029.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322021i11B35C6E5358E291/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="martin_mayer_1-1759325661029.png" alt="martin_mayer_1-1759325661029.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Release Info:&lt;/STRONG&gt;&amp;nbsp; analytical view / analytical perspective started with&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;BW/4HANA 2023 FP 04&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;S/4HANA Public Cloud and Privat Cloud OP2023&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-cds-based-analytical-models-with-the-relation-explorer-analytical/ba-p/14229070"/>
    <published>2025-10-01T16:39:40.313000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-notes-mandatory/ba-p/14232849</id>
    <title>SAP MDG: Validation - Notes Mandatory</title>
    <updated>2025-10-01T17:58:56.527000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi&amp;nbsp;SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01: This blog does not include execution screenshots.&lt;BR /&gt;Note 02: The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;!-- StartFragment  --&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in SAP Master Data Governance (MDG) to enforce mandatory entry of &lt;EM&gt;Notes&lt;/EM&gt; during master data processes. The validation logic is implemented using the enhancement framework via:&lt;BR /&gt;&lt;STRONG&gt;BADI:&lt;CODE&gt;USMD_RULE_SERVICE&lt;/CODE&gt;&lt;/STRONG&gt;, specifically through the method&amp;nbsp;&lt;STRONG&gt;&lt;CODE&gt;CHECK_ENTITY&lt;/CODE&gt;&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This ensures that users provide the required notes, thereby improving data completeness, auditability, and compliance during master data creation and change activities.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA:
  lv_cr_number TYPE usmd_crequest,
  lv_crtype    TYPE usmd_crequest_type,
  lv_process   TYPE usmd_process.

DATA(lo_context) = cl_usmd_app_context=&amp;gt;get_context( ).

IF lo_context IS BOUND.
  CALL METHOD lo_context-&amp;gt;get_attributes
    IMPORTING
      ev_crequest_id   = lv_cr_number
      ev_crequest_type = lv_crtype
      ev_process       = lv_process.
ENDIF.

IF lv_crtype EQ 'ZSUCRTYPE'.
  DATA(lv_s_notes) = cl_usmd_conv_som_gov_api=&amp;gt;get_instance( )-&amp;gt;get_notes( ).
       IF lv_s_notes IS INITIAL.
          APPEND cl_usmd_message=&amp;gt;convert_text2_message(
          EXPORTING
          iv_message_text = 'Please Maintain Notes, It's Mandatory !!!'.
          iv_message_type = 'E' ) to et_message.
       ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;!-- EndFragment  --&gt;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-notes-mandatory/ba-p/14232849"/>
    <published>2025-10-01T17:58:56.527000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696</id>
    <title>Collective Search Help Using Abstract Entity in RAP</title>
    <updated>2025-10-03T11:51:37.840000+02:00</updated>
    <author>
      <name>sanjay22</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1535416</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Collective Value Help with Abstract Entity in SAP RAP&lt;/SPAN&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can define a Collective Search Help&amp;nbsp;that combines multiple elementary &lt;/SPAN&gt;&lt;SPAN class=""&gt;search&lt;/SPAN&gt;&lt;SPAN class=""&gt; helps. This allows users to choose between different search paths and fetch values from various sources in a single dialog. The same concept is available in SAP Fiori through a Collective Value Help&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;It is implemented using an Abstract &lt;/SPAN&gt;&lt;SPAN class=""&gt;Entity that&lt;/SPAN&gt;&lt;SPAN class=""&gt; aggregates multiple elementary value helps and defines potential field mappings&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;An Abstract Entity does not hold data. Instead, it acts as a container for the Collective Search Help. This means it only groups together multiple elementary value helps and defines how they are mapped, without storing any business data itself.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The Collective Value Help shall be annotated with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.collectiveValueHelp.for.element&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; pointing to the field for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The referenced field must be assigned at least one elementary value help using the annotation &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@Consumption.valueHelpDefinition.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;This setup ensures that your Collective Value Help aggregates multiple search options seamlessly for end-users.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Only specific keywords are allowed in a collective value help:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity.name&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity. Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding local Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding. Element qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create a&amp;nbsp;Abstract Entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abstract entity'
@ObjectModel.supportedCapabilities: [ #COLLECTIVE_VALUE_HELP ]
@ObjectModel.collectiveValueHelp.for.element: 'Country'
define abstract entity ZSM_ABSTRACT_CDS_ENTITY

{
  @Consumption.valueHelpDefinition: [
  {
       entity: { name: 'I_Country' },
       label: 'Search by Country'
  },
   {
      entity: {
      name: 'I_RegionVH',
      element: 'Country'
  },
  additionalBinding: [{ localElement: 'Region', element: 'Region' }],
  label   : 'Search by Region',
  qualifier: 'Regionsearch'
   }
   ]
  Country : land1;
  Region  : regio;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758879930864.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320249i89C882018112B8B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758879930864.png" alt="sanjay22_0-1758879930864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.CollectiveValueHelp.for.element &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;→&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Specifies the field (Country) for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;The Abstract Entity (&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;zsm_abstract_cds_entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;) &amp;nbsp;acts as a container, not holding data itself. acts as a Consumption value Help Definition search paths Defines multiple Search by Country (default value help) (alternative path with additional Search by Region binding to Region.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;@&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Consumption.valueHelpDefintion &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;→ Defines multiple search paths :&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Country( default Value Help )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Region( Alternate path with additional binding to Region )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create an Interface View&lt;/SPAN&gt;&lt;SPAN class=""&gt; on Database Table&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880109210.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320250i35C6CA50B680760A/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880109210.png" alt="sanjay22_0-1758880109210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Assign a Value Help for the Country field inside a &lt;/SPAN&gt;&lt;SPAN class=""&gt;Metadata Extension&lt;/SPAN&gt;&lt;SPAN class=""&gt; CDS.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880183958.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320251iCD87357B0371C953/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880183958.png" alt="sanjay22_1-1758880183958.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Here Country field uses Collective search &lt;/SPAN&gt;&lt;SPAN class=""&gt;help( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_I_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL) &lt;/SPAN&gt;&lt;SPAN class=""&gt;with&lt;/SPAN&gt;&lt;SPAN class=""&gt; binding to &lt;/SPAN&gt;&lt;SPAN class=""&gt;Region&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the above Interface View.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880250069.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320252i495BFA8BE3403846/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880250069.png" alt="sanjay22_2-1758880250069.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Projection View for the Above Interface view&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880409200.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320255iBBBDF9FB40C44CFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880409200.png" alt="sanjay22_0-1758880409200.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the Interface View&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880499246.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320256i0DAD0BA5C278B5F3/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880499246.png" alt="sanjay22_1-1758880499246.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Service Binding &lt;/SPAN&gt;&lt;SPAN class=""&gt;( OData&lt;/SPAN&gt;&lt;SPAN class=""&gt; – V&lt;/SPAN&gt;&lt;SPAN class=""&gt;4 )&lt;/SPAN&gt;&lt;SPAN class=""&gt; to expose the Entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_C_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL )&lt;/SPAN&gt; &lt;SPAN class=""&gt;to the front end.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880554639.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320257i45126292733C4314/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880554639.png" alt="sanjay22_2-1758880554639.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;F4 for Country Field – Search by Country&lt;/SPAN&gt;&lt;SPAN class=""&gt;, Search by region two value help screen.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_3-1758880593273.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320258i131D140173B03D26/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_3-1758880593273.png" alt="sanjay22_3-1758880593273.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696"/>
    <published>2025-10-03T11:51:37.840000+02:00</published>
  </entry>
</feed>
