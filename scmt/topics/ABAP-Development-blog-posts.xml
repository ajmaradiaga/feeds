<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-Development-blog-posts.xml</id>
  <title>SAP Community - ABAP Development</title>
  <updated>2025-10-06T17:00:04.049679+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP Development/pd-p/833755570260738661924709785639136" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP Development blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/maintain-file-in-web-repository/ba-p/14223659</id>
    <title>Maintain File In WEB Repository</title>
    <updated>2025-09-24T12:44:39.921000+02:00</updated>
    <author>
      <name>Nayanakumar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1490076</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Transaction code&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;SMW0&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;in SAP ABAP is the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;SAP Web Repository&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Its primary purpose is to&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;manage binary and text-based objects&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;that are used by various applications within the SAP system, particularly those related to web-based technologies and user interfaces.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Explanation&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The main types of objects you can manage with SMW0 are:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Binary Data for&amp;nbsp;WebRFC&amp;nbsp;Applications:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This is the most common use case. It's for uploading and storing binary files like images, logos, sound files, or other media. These objects can then be referenced and displayed in ABAP programs, SAP GUI screens, or used in forms like Smart Forms.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;HTML Templates for&amp;nbsp;WebRFC&amp;nbsp;Applications:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This allows developers to store HTML files or templates. These templates can be used to generate dynamic web pages or for sending rich HTML emails from ABAP programs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;XSLT Programs for Transformation:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;You can also store XSLT (eXtensible&amp;nbsp;Stylesheet Language Transformations) files here, which are used to transform XML documents.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Common Use Cases for SMW0&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Uploading Company Logos:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;This is a very frequent use of SMW0. Developers upload a company logo (e.g., in&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;.BMP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;or&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;.GIF&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;format) as binary data to the repository. The logo is then configured to appear on the SAP Easy Access screen or on reports and forms.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Displaying Images in ABAP Programs:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;You can use SMW0 to store images and then display them in your custom ABAP programs by referencing the stored object. This is typically done with ABAP GUI controls, such as&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;CL_GUI_PICTURE&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Creating Predefined Format Of Files:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;For eg. In the Excel file need to make few fields as char type in that case&amp;nbsp; we will use the web repository.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;Key Points for ABAP Developers&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Object Naming:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Objects in SMW0 have a unique name. It's a best practice to use a customer namespace (starting with 'Z' or 'Y') to avoid conflicts with standard SAP objects.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;MIME Types:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Before uploading a file, you must ensure that its&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MIME type&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;(e.g.,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;image/jpeg&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;for a JPEG image) is maintained in the system settings within SMW0.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Transportability:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Objects created in SMW0 are transportable. You can assign them to a transport request to move them between development, quality assurance, and production systems.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Steps To add the File in Web repository.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Start the Transaction: Go to transaction code SMW0.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Select Binary Data: On the initial screen, select the radio button for "Binary data for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;WebRFC&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;applications" and click the Execute button.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_0-1758518731700.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317652i5873D615E60173C4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_0-1758518731700.png" alt="Nayanakumar_0-1758518731700.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define Mime types.&lt;/P&gt;&lt;P&gt;In the Settings-&amp;gt;Define Mime Types&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_1-1758518952760.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317653i17915CD4AE3E99B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_1-1758518952760.png" alt="Nayanakumar_1-1758518952760.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Click on create button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_3-1758519203728.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317655i1B6656F87306C8DD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_3-1758519203728.png" alt="Nayanakumar_3-1758519203728.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_4-1758519272477.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317656iF69911FD379115CA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_4-1758519272477.png" alt="Nayanakumar_4-1758519272477.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Create a New Object: Click on the Create button (or press F5).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Define Object Details: A dialog box will appear where you'll need to enter the following information:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;OBJID: This is the unique identifier for your file, such as ZSO_UPLOAD_TEMPLATE.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Description: A short, descriptive text for the object .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Save the Entry: Save the object definition.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_5-1758519355940.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317657iCBA701FABCCCADA8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_5-1758519355940.png" alt="Nayanakumar_5-1758519355940.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Import the File: With your newly created object selected, click the Import button.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Choose the File: A file selection dialog will pop up, allowing you to browse your local computer and choose the file you want to upload.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Save the Changes: After selecting the file, save your changes. The file content is now stored in the WWWDATA table and is linked to the OBJID you created.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_6-1758519486366.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317659iFDBAA248B76EF9F6/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_6-1758519486366.png" alt="Nayanakumar_6-1758519486366.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The entries are added in wwwdata table.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_7-1758519645707.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317660i467504ED62843BF0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_7-1758519645707.png" alt="Nayanakumar_7-1758519645707.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Download the Filed from WWWDATA Table Using report Program.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: lv_objid   TYPE wwwdatatab-objid VALUE 'ZN_UPLOAD_TEMPLATE', 
      ls_objdata TYPE wwwdatatab, 
      lv_file    TYPE string, 
      lv_msg     TYPE string, 
      lv_file1   TYPE rlgrap-filename, 
      lv_subrc   TYPE sy-subrc. 
 
" Get desktop path 
CALL METHOD cl_gui_frontend_services=&amp;gt;get_desktop_directory 
  CHANGING 
    desktop_directory = lv_file. 
 
CONCATENATE lv_file 'C:\sales\order455.xlsx' INTO lv_file1. 

" Read object metadata 
SELECT SINGLE relid objid INTO CORRESPONDING FIELDS OF ls_objdata 
  FROM wwwdata 
  WHERE srtf2 = 0 AND relid = 'MI' AND objid = lv_objid. 
 
IF sy-subrc = 0. 
  " Download the file 
  CALL FUNCTION 'DOWNLOAD_WEB_OBJECT' 
    EXPORTING 
      key         = ls_objdata 
      destination = lv_file1 
    IMPORTING 
      rc          = lv_subrc. 

   IF lv_subrc = 0. 
     lv_msg =  'Template downloaded sucessfully'. 
     CONCATENATE lv_msg lv_file1 INTO lv_msg. 
     MESSAGE lv_msg TYPE 'S'. 
  ELSE. 
    MESSAGE 'Download failed.' TYPE 'E'. 
  ENDIF. 
ELSE. 
  MESSAGE 'Template not found in repository.' TYPE 'E'. 
ENDIF. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_8-1758520006811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/317661i6B865850387D2632/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_8-1758520006811.png" alt="Nayanakumar_8-1758520006811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Conclusion.&lt;/P&gt;&lt;P&gt;SMW0 is a specialized SAP transaction code for managing non-transactional files like images and HTML templates. Its primary use case is to store and make these files available for display and use across various SAP applications, particularly for branding and UI purposes.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/maintain-file-in-web-repository/ba-p/14223659"/>
    <published>2025-09-24T12:44:39.921000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report-part-2/ba-p/14220395</id>
    <title>BRF+ Object Creation using ABAP Z-Report, Part 2</title>
    <updated>2025-09-25T06:39:29.292000+02:00</updated>
    <author>
      <name>manoj_sm</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/151098</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;To create&amp;nbsp;&lt;STRONG&gt;BRF+ Elements programmatically&lt;/STRONG&gt;&amp;nbsp;using ABAP Refer Previous blog&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;BRF+ Object Creation using ABAP Z-Report&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we will learn how to create&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;BRF+ Structures and Table type programmatically&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;using ABAP. This provides a scalable way to automate the creation of data objects and integrate them into larger rule frameworks.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Structure Creation:&lt;/STRONG&gt;&amp;nbsp;The same application should be used to create the structure.&lt;BR /&gt;It is not necessary to build a structure if our result contains just one column. There is also no need to create a structure if the output for a single condition is a single row.&amp;nbsp;If more than one column appears in our result, we should make a structure with all of those columns. Additionally, a structure must be shown if the output consists of multiple rows.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Table type Creation:&lt;/STRONG&gt;&amp;nbsp;In order to have multiple result rows based on a single condition in our decision table, we can create a table in the same application. Therefore, table creation is necessary in our case.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1345641096" id="toc-hId-1760834658"&gt;&lt;SPAN&gt;ABAP Program to Create Structure and Table type&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Below is a sample ABAP program (&lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_BRF_APP&lt;/SPAN&gt;&lt;SPAN&gt;)&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT zdemo_brf_app.

DATA: lo_factory           TYPE REF TO if_fdt_factory,
      lo_application       TYPE REF TO if_fdt_application,
      lt_message           TYPE if_fdt_types=&amp;gt;t_message,
      lv_message           TYPE string,
      lv_boolean           TYPE abap_bool,
      lv_demo_appl_id      TYPE if_fdt_types=&amp;gt;id,
      lv_string            TYPE string,
      lo_element_1         TYPE REF TO if_fdt_element,
      lo_element_2         TYPE REF TO if_fdt_element,
      lo_element_3         TYPE REF TO if_fdt_element,
      lo_table             TYPE REF TO if_fdt_table,
      lo_table_1           TYPE REF TO if_fdt_table,
      lo_structure         TYPE REF TO if_fdt_structure,
      lv_element1_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element2_id       TYPE if_fdt_types=&amp;gt;id,
      lv_element3_id       TYPE if_fdt_types=&amp;gt;id,
      lv_input_number_id   TYPE if_fdt_types=&amp;gt;id,
      lv_result_counter_id TYPE if_fdt_types=&amp;gt;id,
     

FIELD-SYMBOLS:
  &amp;lt;ls_message&amp;gt; TYPE if_fdt_types=&amp;gt;s_message,
  &amp;lt;lv_value&amp;gt;   TYPE any.


PARAMETERS: pv_lcl  TYPE abap_bool RADIOBUTTON GROUP r00 DEFAULT 'X',
            pv_sys  TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_mstr TYPE abap_bool RADIOBUTTON GROUP r00,
            pv_name TYPE char30.
*           p_ele_01  TYPE i DEFAULT 5,
*            p_ele_02  TYPE i DEFAULT 4,
*            p_ele_03  TYPE i DEFAULT 8,
*            p_ele_04  TYPE i DEFAULT 3,
*            p_ele_05  TYPE i DEFAULT 13,
*            p_ele_06  TYPE i DEFAULT 2.
*           pv_ele   TYPE char20,
*           pv_str TYPE char20,
*           pv_tab TYPE char20.

IF pv_name IS NOT INITIAL AND pv_lcl IS NOT INITIAL OR pv_sys IS NOT INITIAL OR pv_mstr IS NOT INITIAL.

* get a reference to the instance of the factory
  lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( ).

* =============================================================
* definition of the new application:
* get an initial application object from the factory
  lo_application = lo_factory-&amp;gt;get_application( ).
  lo_application-&amp;gt;if_fdt_transaction~enqueue( ).
* set values for the application, especially the name is important
* You need to have a unique name for each application, here we use the
* FDT Service class method to get the unique name.
  lo_application-&amp;gt;set_application_component( 'BC' ).        "#EC NOTEXT
  lo_application-&amp;gt;set_software_component( 'SAP_BASIS' ).    "#EC NOTEXT
  lo_application-&amp;gt;set_development_package( '$TMP' ).        "#EC NOTEXT
*lo_application-&amp;gt;if_fdt_admin_data~set_name( cl_fdt_services=&amp;gt;get_unique_name( ) ).
  lo_application-&amp;gt;if_fdt_admin_data~set_name( pv_name ).


* In FDT terms there are 3 different type of Applications, Local application,
* system pplication and MasterData Application. The following lines shows how you
* can create local Application, masterdata Application and system Application.
  IF pv_lcl EQ abap_true.
    lo_application-&amp;gt;create_local_application( ).
  ELSEIF pv_sys EQ abap_true.
    lo_application-&amp;gt;create_system_application( ).
  ELSEIF pv_mstr EQ abap_true.
    lo_application-&amp;gt;create_masterdata_application( ).
  ENDIF.
  lo_application-&amp;gt;if_fdt_transaction~activate(
             IMPORTING et_message           = lt_message
                       ev_activation_failed = lv_boolean ).
  IF lv_boolean EQ abap_true.
*     for some reason the activation failed -&amp;gt; individual handling needed
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
  ELSE.
    lo_application-&amp;gt;if_fdt_transaction~save( ).
    lo_application-&amp;gt;if_fdt_transaction~dequeue( ).
*     usually it makes sense to store the id for later access to the application
    lv_demo_appl_id = lo_application-&amp;gt;mv_id.
  ENDIF.
  WRITE: 'The ID of the application created is: ', lv_demo_appl_id. "#EC NOTEXT
ELSE.
  MESSAGE 'Provide all the required information' TYPE 'E'.
ENDIF.
*for creating Element,Structure,Table by Data Object


lo_factory = cl_fdt_factory=&amp;gt;if_fdt_factory~get_instance( lv_demo_appl_id ).
* =============================================================
* definition of a data object structure:
* get an initial data object structure from the factory
lo_structure ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_structure ).
lo_structure-&amp;gt;if_fdt_transaction~enqueue( ).
lo_structure-&amp;gt;if_fdt_admin_data~set_name( 'STRUCTURE' ).
lo_structure-&amp;gt;set_elements( lts_element ).
**********************************************************************************
* Alternately user can create a structure by using the service class method,
* CL_FDT_CONVENIENCE=&amp;gt;CREATE_STRUCTURE as follows.
* Cl_fdt_convenience=&amp;gt;create_structure( EXPORTING iv_name = 'DEMO_STRUCTURE_1'
*                                                iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                                it_element        =  lts_element
*                                                iv_activate       = ABAP_false
*                                      IMPORTING
*                                                eo_structure      = lo_structure ).
***********************************************************************************

lo_structure-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).


IF lv_boolean EQ abap_true.
  LOOP AT lt_message ASSIGNING &amp;lt;ls_message&amp;gt;.
    MESSAGE ID &amp;lt;ls_message&amp;gt;-msgid TYPE &amp;lt;ls_message&amp;gt;-msgty NUMBER &amp;lt;ls_message&amp;gt;-msgno
        WITH &amp;lt;ls_message&amp;gt;-msgv1 &amp;lt;ls_message&amp;gt;-msgv2 &amp;lt;ls_message&amp;gt;-msgv3 &amp;lt;ls_message&amp;gt;-msgv4
        INTO lv_message.
  ENDLOOP.
  WRITE : lv_message.
*         for some reason the activation failed -&amp;gt; individual handling needed
  lo_structure-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_structure-&amp;gt;if_fdt_transaction~save( ).
  lo_structure-&amp;gt;if_fdt_transaction~dequeue( ).
*         usually it makes sense to store the id for later access to the application
  lv_structure_id = lo_structure-&amp;gt;mv_id.
ENDIF.
*   WRITE: / lo_structure-&amp;gt;mv_id .
lv_string = lo_structure-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to string method call Structure: ' , lv_string. "#EC NOTEXT
* =============================================================
* definition of a data object table:
*     get an initial data object Table from the factory
lo_table ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_table ).
lo_table-&amp;gt;if_fdt_transaction~enqueue( ).
lo_table-&amp;gt;if_fdt_admin_data~set_name( 'TABLE' ).
lo_table-&amp;gt;set_structure( lv_structure_id ).
INSERT lo_table-&amp;gt;mv_id INTO TABLE lts_context_id.
***********************************************************************
* Alternately user can create a Table by using the service class method,
* CL_FDT_CONVENIENCE=&amp;gt;CREATE_TABLE as follows.
* cl_fdt_convenience=&amp;gt;create_table( EXPORTING iv_name = 'DEMO_TABLE_1'
*                                            iv_structure_name = 'DEMO_STRUCTURE_1'
*                                            iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                            it_element        = its_element
*                                            iv_activate       = ABAP_false
*                                  IMPORTING
*                                            eo_table          = lo_table ).
***********************************************************************



lo_table-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
*        for some reason the activation failed -&amp;gt; individual handling needed
  lo_table-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_table-&amp;gt;if_fdt_transaction~save( ).
  lo_table-&amp;gt;if_fdt_transaction~dequeue( ).
*        usually it makes sense to store the id for later access to the application

ENDIF.
*   WRITE: / lo_table-&amp;gt;mv_id .
lv_string = lo_table-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to_string method call Table: ' , lv_string. "#EC NOTEXT


* cl_fdt_convenience=&amp;gt;create_table( EXPORTING iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp
*                                                iv_element_type   = if_fdt_constants=&amp;gt;gc_data_object_type_table
*                                                iv_activate       = abap_false
*                                                iv_name           = 'RESULT_COUNTER'
*                                      IMPORTING eo_element        = lo_result_counter ).
*
*  INSERT lo_result_counter-&amp;gt;mv_id INTO TABLE lts_context_id.
*TYPES: BEGIN OF ty_element ,
*  name TYPE if_fdt_types=&amp;gt;name,
*  lv_element type if_fdt_types=&amp;gt;element_type,
*  END OF ty_element.
*DATA: lt_element TYPE TABLE OF ty_element,
*      lss_element TYPE ty_element.
*  lss_element-name = 'SFLIGHT_TAB'.
*  lss_element-lv_element = if_fdt_constants=&amp;gt;gc_data_object_type_table.
*  APPEND lss_element TO lt_element.


lo_table_1 ?= lo_factory-&amp;gt;get_data_object(
    iv_data_object_type = if_fdt_constants=&amp;gt;gc_data_object_type_table ).
lo_table_1-&amp;gt;if_fdt_transaction~enqueue( ).
lo_table_1-&amp;gt;if_fdt_admin_data~set_name( 'SFLIGHT_TAB' ).
lo_table_1-&amp;gt;set_structure( lv_result_table_id ).
APPEND lo_table_1-&amp;gt;mv_id TO lts_context_id.

lo_table_1-&amp;gt;if_fdt_transaction~activate(
  IMPORTING
    et_message           = lt_message
    ev_activation_failed = lv_boolean ).
IF lv_boolean EQ abap_true.
*        for some reason the activation failed -&amp;gt; individual handling needed
  lo_table_1-&amp;gt;if_fdt_transaction~dequeue( ).
ELSE.
  lo_table_1-&amp;gt;if_fdt_transaction~save( ).
  lo_table_1-&amp;gt;if_fdt_transaction~dequeue( ).
*        usually it makes sense to store the id for later access to the application

ENDIF.
*   WRITE: / lo_table-&amp;gt;mv_id .
lv_string = lo_table_1-&amp;gt;if_fdt_admin_data~to_string(  iv_mode = if_fdt_constants=&amp;gt;gc_tostring_mode_complete ).
WRITE : / 'The result of to_string method call Table: ' , lv_string. "#EC NOTEXT

*
*  cl_fdt_convenience=&amp;gt;create_table(
*    EXPORTING
*      iv_name           =  'RESULT_TABLE'                " Name
*      iv_structure_name = lv_name
*      iv_application_id = if_fdt_constants=&amp;gt;gc_application_tmp                " Universal Unique Identifier
*      it_element        = lt_element              " Elements
*      iv_activate       = abap_true        " Activate changes?
*    IMPORTING
**      ev_table_id       =                  " Universal Unique Identifier
*      eo_table          = lo_result_table                " FDT: Data Object of Type Table
*  ).
*  CATCH cx_fdt_input. " FDT: Invalid Input&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-1149127591" id="toc-hId-1564321153"&gt;&lt;SPAN&gt;Execution &amp;amp; Output&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;When you execute the above ABAP report, the newly created&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Application , Structure and Table&amp;nbsp;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;will immediately be reflected in the BRF+ Workbench (/nBRF+). You can navigate to the workbench to verify that the application&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;ZDEMO_APP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and its elements have been created successfully.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 183106.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316035i340B5B5D75B3E0F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 183106.png" alt="Screenshot 2025-09-17 183106.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220313.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316034iB705E65CA51EB4DB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220313.png" alt="Screenshot 2025-09-17 220313.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220331.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316037iD47E80206F81B84C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220331.png" alt="Screenshot 2025-09-17 220331.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-17 220409.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316038iCC9677B2BEC3EEAA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-09-17 220409.png" alt="Screenshot 2025-09-17 220409.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After running the program, you will see system-generated IDs for each element created. These IDs are crucial when referencing the elements in Structures, Rules, or Functions.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-952614086" id="toc-hId-1367807648"&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;In the next part of this blog series, we will explore how to create&amp;nbsp;&lt;STRONG&gt;DB Lookup, Loop, Formula, Rule, and Function in&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Subsequent blogs &lt;/SPAN&gt;&lt;SPAN&gt;in detail.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/brf-object-creation-using-abap-z-report-part-2/ba-p/14220395"/>
    <published>2025-09-25T06:39:29.292000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/1-500-faster-abap-cloud-api-with-just-gzip/ba-p/14229207</id>
    <title>1,500× Faster: ABAP Cloud API with “Just” Gzip</title>
    <updated>2025-09-26T16:36:17.362000+02:00</updated>
    <author>
      <name>natanael1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1557162</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1890184258"&gt;The 3-hours to 7-Second Story&lt;/H3&gt;
&lt;P&gt;We had a weekly data integration form ABAP in Cloud, via an OData service, that took about &lt;STRONG&gt;3 hours&lt;/STRONG&gt;(10800 seconds) and nearly &lt;STRONG&gt;600 requests&lt;/STRONG&gt; to finish. After a small redesign, the same data now arrives in &lt;STRONG&gt;~7 seconds(instead of 10800 seconds)&lt;/STRONG&gt; using just &lt;STRONG&gt;3 requests&lt;/STRONG&gt;. So a dramatic x1500 reduction. No new servers, no fancy tools, just smarter packaging of the data, but of course with some drawback.&lt;/P&gt;
&lt;P&gt;The full PDF paper, and code is available in this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;
&lt;H3 id="toc-hId-1693670753"&gt;Quick Context&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Where:&lt;/STRONG&gt; ABAP in Cloud on SAP BTP.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;What:&lt;/STRONG&gt; A big, flat table (around 3 million rows) needed once a week.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Old approach: &lt;/STRONG&gt;OData service exposing this table, called 600 times,&amp;nbsp;5,000 rows per call → slow and expensive, the extraction workflow took ~3 hours&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Constraint:&lt;/STRONG&gt; We can’t stream chunks; each response is built on the server, then sent.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; Deliver everything fast, simple, and cheap for both sides.&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId-1497157248"&gt;The Simple Change&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; make a big weekly export feel like a single, quick download. No fancy infra, no special client libraries.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Why not OData for this job&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;OData shines for interactive reads: $filter, $expand, small pages, typed entities.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Our use case was the opposite: &lt;STRONG&gt;one flat dataset, all of it, as fast as possible&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;With OData we’d still pay the cost of many small pages and per-entity overhead the client didn’t need.&lt;/LI&gt;
&lt;LI&gt;Most consumers wanted a simple file-like payload they could ingest with generic tools.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why a plain HTTP service instead&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;A plain GET endpoint gives us &lt;STRONG&gt;full control over the wire format&lt;/STRONG&gt; (JSON/CSV), headers, and compression.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;It’s easier for any consumer to adopt (curl, Python, Node, SAP or non-SAP).&lt;/LI&gt;
&lt;LI&gt;We can define a &lt;STRONG&gt;predictable paging contract&lt;/STRONG&gt; (e.g., offset/count) and let the client fetch pages in parallel.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why “just HTTP” still wasn’t enough&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;In ABAP Cloud, we don’t stream chunked responses; the server assembles the response first, then sends it.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;If we naïvely send a huge JSON array, the &lt;STRONG&gt;payload is too big&lt;/STRONG&gt; and &lt;STRONG&gt;too slow&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;If we keep tiny pages, we fix size but suffer &lt;STRONG&gt;hundreds of roundtrips&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;LI&gt;Conclusion: we needed to &lt;STRONG&gt;keep HTTP simple but make each response compact and each request count&lt;/STRONG&gt;.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;What we explored&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Formats:&lt;/STRONG&gt; JSON vs CSV vs newline-delimited JSON. CSV is smaller raw, but…&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Serialization:&lt;/STRONG&gt; /ui2/cl_json, XCO, and CALL TRANSFORMATION for speed and stability.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Compression:&lt;/STRONG&gt; no compression vs gzip; single gzip member vs multiple members inside one response.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Delivery patterns:&lt;/STRONG&gt; direct download vs staging to storage; server-side streaming ideas (ruled out).&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Paging shapes:&lt;/STRONG&gt; many small pages vs a few big pages; client parallelism vs server complexity.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;What we landed on (the pattern)&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Keep JSON&lt;/STRONG&gt; for compatibility, but &lt;STRONG&gt;generate it fast&lt;/STRONG&gt; (use the fastest serializer available to you).&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Compress every response&lt;/STRONG&gt; and signal it with Content-Encoding: gzip. One &lt;STRONG&gt;single gzip member&lt;/STRONG&gt; per response so common clients auto-decompress reliably.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Use coarse paging&lt;/STRONG&gt; (few big pages) to cut roundtrips. Expose simple params (e.g., offset and count) and a “count only” helper so clients can plan pages.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Let clients parallelize&lt;/STRONG&gt; safely: stable ordering, idempotent reads, and clear retry rules.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Stay boring on the protocol:&lt;/STRONG&gt; plain HTTP GET, clear headers, predictable JSON shape. No streaming tricks, no custom encodings that break tools.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Why this works?&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;We &lt;STRONG&gt;remove protocol overhead&lt;/STRONG&gt; we don’t need (OData features) and &lt;STRONG&gt;add the two things we do need&lt;/STRONG&gt; for bulk: fast serialization + compression.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Coarse pages shift the bottleneck from “too many calls” to “a few efficient transfers”.&lt;/LI&gt;
&lt;LI&gt;Gzip neutralizes JSON’s key overhead, so we keep a &lt;STRONG&gt;friendly format&lt;/STRONG&gt; without paying a size penalty.&lt;/LI&gt;
&lt;LI&gt;The approach is &lt;STRONG&gt;portable and observable&lt;/STRONG&gt;: easy to test locally, easy to monitor in production, and easy for partners to adopt.&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId-1300643743"&gt;Before vs After&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;TL;DR:&lt;/STRONG&gt; We didn’t change the data, only the delivery: coarse pages, fast JSON, and gzip over a plain HTTP contract.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;
&lt;P&gt;Dimension Before (many small pages) After (few big pages + gzip) Why it matters&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;Dataset&lt;/TD&gt;
&lt;TD&gt;~3,000,000 rows (flat, ~12 columns)&lt;/TD&gt;
&lt;TD&gt;Same&lt;/TD&gt;
&lt;TD&gt;Same data, new delivery.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Page size&lt;/TD&gt;
&lt;TD&gt;5,000 rows/page&lt;/TD&gt;
&lt;TD&gt;~1,000,000 rows/page (tunable)&lt;/TD&gt;
&lt;TD&gt;Fewer roundtrips, less latency.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Number of requests&lt;/TD&gt;
&lt;TD&gt;~593&lt;/TD&gt;
&lt;TD&gt;3&lt;/TD&gt;
&lt;TD&gt;Network overhead drops dramatically.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;End-to-end time&lt;/TD&gt;
&lt;TD&gt;~3 hours (sequential pulls)&lt;/TD&gt;
&lt;TD&gt;~6-7 seconds (3 parallel pulls)&lt;/TD&gt;
&lt;TD&gt;Parallelizable, near “single download” feel.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Format on the wire&lt;/TD&gt;
&lt;TD&gt;JSON (uncompressed)&lt;/TD&gt;
&lt;TD&gt;JSON (gzipped)&lt;/TD&gt;
&lt;TD&gt;Keep JSON for compatibility; shrink it with gzip.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Total transfer&lt;/TD&gt;
&lt;TD&gt;~0.6 GB&lt;/TD&gt;
&lt;TD&gt;~9 MB&lt;/TD&gt;
&lt;TD&gt;Bandwidth and cost fall off a cliff.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Payload per page&lt;/TD&gt;
&lt;TD&gt;~1.15 MB per 5k rows (raw)&lt;/TD&gt;
&lt;TD&gt;~3 MB per 1M rows (gzipped)&lt;/TD&gt;
&lt;TD&gt;Gzip beats key overhead; size scales well.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Serialization&lt;/TD&gt;
&lt;TD&gt;Generic JSON serializer&lt;/TD&gt;
&lt;TD&gt;Fast serializer (CALL TRANSFORMATION)&lt;/TD&gt;
&lt;TD&gt;Server can build big pages quickly.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Protocol&lt;/TD&gt;
&lt;TD&gt;OData-style paging&lt;/TD&gt;
&lt;TD&gt;Plain HTTP GET with offset/count&lt;/TD&gt;
&lt;TD&gt;Simple contract any client can call.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Compression&lt;/TD&gt;
&lt;TD&gt;None&lt;/TD&gt;
&lt;TD&gt;Content-Encoding: gzip (single member)&lt;/TD&gt;
&lt;TD&gt;Works out-of-the-box with common tools/SDKs.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Client pattern&lt;/TD&gt;
&lt;TD&gt;Sequential loop&lt;/TD&gt;
&lt;TD&gt;Fetch pages in parallel, then merge&lt;/TD&gt;
&lt;TD&gt;Easy speed-up without server tricks.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Retry model&lt;/TD&gt;
&lt;TD&gt;Many small retries&lt;/TD&gt;
&lt;TD&gt;Few coarse, idempotent retries&lt;/TD&gt;
&lt;TD&gt;Fewer moving parts, simpler error handling.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Server behavior&lt;/TD&gt;
&lt;TD&gt;Build JSON, send raw&lt;/TD&gt;
&lt;TD&gt;Build JSON → gzip → send single member&lt;/TD&gt;
&lt;TD&gt;Reliable auto-decompression on client side.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Limits to watch&lt;/TD&gt;
&lt;TD&gt;Too many roundtrips; egress cost&lt;/TD&gt;
&lt;TD&gt;Client RAM per page; choose page size wisely&lt;/TD&gt;
&lt;TD&gt;Balance page size vs client capacity.&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TBODY&gt;
&lt;/TABLE&gt;
&lt;H3 id="toc-hId-1104130238"&gt;How to reproduce this in three simple steps&lt;/H3&gt;
&lt;BLOCKQUOTE&gt;
&lt;P&gt;Heads-up: in here I will refer to an Appendix, you can find it in the detailed PDF paper about the optimization, the paper and some code is available on GitHub&lt;/P&gt;
&lt;/BLOCKQUOTE&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-1036699452"&gt;Step 1. Define a tiny HTTP contract&lt;/H4&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Endpoint:&lt;/STRONG&gt; GET /entity?offset=…&amp;amp;count=…&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Helper:&lt;/STRONG&gt; GET /entity?get_only_count=true returns a small pagination object with totals and suggested pages, for example:&lt;/P&gt;
&lt;/LI&gt;
&lt;/UL&gt;
&lt;PRE&gt;{
  "number_of_records": 2496434,
  "batch_size": { "maximum": 1500000, "recommended": 1000000 },
  "recommended_pages": [
    "/entity?offset=0&amp;amp;count=1000000",
    "/entity?offset=1000000&amp;amp;count=1000000",
    "/entity?offset=2000000&amp;amp;count=1000000"
  ]
}&lt;/PRE&gt;
&lt;P&gt;This keeps clients simple and lets them plan parallel pulls.&lt;/P&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-840185947"&gt;Step 2. Build one big page, serialize fast, and gzip it on the server&lt;/H4&gt;
&lt;P&gt;&lt;STRONG&gt;a) Fast JSON generation with CALL TRANSFORMATION&lt;/STRONG&gt;&lt;BR /&gt;Appendix C shows the lean serializer that won your benchmarks:&lt;/P&gt;
&lt;PRE&gt;METHOD convert_json_transformation.
  DATA(lo_writer) = cl_sxml_string_writer⇒create( type = if_sxml⇒co_xt_json ).
  CALL TRANSFORMATION id
    SOURCE itab = data
    RESULT XML lo_writer.
  string = lo_writer-&amp;gt;get_output( ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;Use this to turn your internal table into JSON quickly.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;b) Minimal HTTP handler that serves one gzipped page&lt;/STRONG&gt;&lt;BR /&gt;Appendix I demonstrates the pattern: set headers, read a deterministic slice, serialize, gzip once, send bytes.&lt;/P&gt;
&lt;PRE&gt;METHOD gzip_json_single_page.
  response-&amp;gt;set_status( 200 ).
  response-&amp;gt;set_content_type( 'application/gzip' ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Disposition'
    i_value = |attachment; filename="data_subset.gz"| ).
  response-&amp;gt;set_compression(
    options = if_web_http_response⇒co_compress_none ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Encoding'
    i_value = |deflate| ).

  SELECT column_1, column_2, ... , column_12
    FROM dbtable
    ORDER BY column_2
    INTO TABLE @DATA(page)
    UP TO @page_size ROWS.

  cl_abap_gzip⇒compress_binary(
    EXPORTING raw_in = convert_json_transformation( page )
    IMPORTING gzip_out = DATA(gzip) ).

  response-&amp;gt;set_binary( gzip ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;&lt;STRONG&gt;c) Where the handler is wired&lt;/STRONG&gt;&lt;BR /&gt;Appendix F shows the entry point choosing which implementation to run:&lt;/P&gt;
&lt;PRE&gt;METHOD if_http_service_extension~handle_request.
  " choose one of these
  gzip_json_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_multiple_pages( CHANGING request = request response = response ).
ENDMETHOD.&lt;/PRE&gt;
&lt;P&gt;Keep it simple in production and call the JSON + single-member gzip method.&lt;/P&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-643672442"&gt;Step 3. Let the client pull a few big pages in parallel&lt;/H4&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;Ask get_only_count first to get total and recommended pages.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Fire 2–4 page requests in parallel, then merge locally.&lt;/LI&gt;
&lt;LI&gt;Most clients auto-decompress when Content-Encoding is set, which is exactly why the server returns a single gzip response.&lt;/LI&gt;
&lt;/UL&gt;
&lt;HR /&gt;
&lt;H4 id="toc-hId-447158937"&gt;Optional: CSV variant from the appendix&lt;/H4&gt;
&lt;P&gt;If you ever need CSV, Appendix H shows the single-page CSV + gzip flow. The JSON path above stayed as our final choice because gzip erases most of JSON’s key overhead while keeping tooling friendly.&lt;/P&gt;
&lt;H3 id="toc-hId-121562713"&gt;When to use this pattern and when not to&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;Use it when&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;You need to deliver a large, flat dataset fast, usually for batch or analytics.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;Your consumers are happy with a plain HTTP GET that returns JSON.&lt;/LI&gt;
&lt;LI&gt;You can sort by a unique key and read stable slices with offset and count.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Think twice when&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Consumers need rich OData features&lt;/STRONG&gt; like server-side filtering and $expand. You will be giving those up and implementing only what you need in plain HTTP.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Clients cannot hold the decompressed page in memory.&lt;/STRONG&gt; A 1,000,000 row page is roughly a few hundred MB once decompressed, so plan for that on the client side.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;You require true streaming.&lt;/STRONG&gt; ABAP ICF in the cloud does not support HTTP/1.1 chunked transfer, so streaming is out of scope here.
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;/LI&gt;
&lt;/UL&gt;
&lt;H3 id="toc-hId--150182161"&gt;Gotchas to avoid&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;P&gt;&lt;STRONG&gt;Do not concatenate multiple gzip members&lt;/STRONG&gt; in one HTTP response if you expect tools like Postman to auto-decompress. Many clients only unpack the first member. Prefer one contiguous gzip stream per response.&lt;/P&gt;
&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Set the right headers.&lt;/STRONG&gt; Send Content-Encoding: gzip for the single member response. If you build a multi-member payload, clients may not decode it automatically, which is why your final solution avoided that.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Keep ordering stable.&lt;/STRONG&gt; Always ORDER BY a unique key to make pages deterministic and retries idempotent. (Your examples order by a key column before slicing.)&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Pick a page size both sides can hold.&lt;/STRONG&gt; You found that 1,000,000 rows per page hits a good balance. Results and size scale with total rows, not so much with page count.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Stick to one gzip pass per response.&lt;/STRONG&gt; Compress after you generate JSON for the page, not per record or per mini-chunk inside the same response. It keeps clients simple.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;For the full PDF paper, and code please check this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/1-500-faster-abap-cloud-api-with-just-gzip/ba-p/14229207"/>
    <published>2025-09-26T16:36:17.362000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/mime-types-truncated-in-sap-web-repository-smw0/ba-p/14229638</id>
    <title>MIME Types truncated in SAP Web Repository (SMW0)</title>
    <updated>2025-09-28T15:47:48.134000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Context&lt;/STRONG&gt;: I have some Microsoft Office files, Excel, Word and PowerPoint, already uploaded to the SAP Web Repository (transaction SMW0). My system is ABAP 7.52.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Goal&lt;/STRONG&gt;: I want to display these files from SMW0, via the Microsoft Office applications installed on my laptop.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Standard solution and issues&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Their MIME Types must be defined via the menu Settings &amp;gt; Define MIME Types:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_1-1758997727373.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320761i0C424F4402993787/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_1-1758997727373.png" alt="Sandra_Rossi_1-1758997727373.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_2-1758997760008.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320762i697951BE30278898/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_2-1758997760008.png" alt="Sandra_Rossi_2-1758997760008.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1758997792055.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320763i71E6E387E7EA0CBC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1758997792055.png" alt="Sandra_Rossi_3-1758997792055.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here I can enter the &lt;A href="https://stackoverflow.com/questions/4212861/what-is-a-correct-mime-type-for-docx-pptx-etc" target="_self" rel="nofollow noopener noreferrer"&gt;MIME types&lt;/A&gt; and corresponding file extensions of Microsoft Office applications.&lt;/P&gt;&lt;P&gt;I repeat the operation 3 times, each time pickup the value for MIME TYPE and EXTENSION:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/LI&gt;&lt;LI&gt;.xlsx&lt;/LI&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.wordprocessingml.document&lt;/LI&gt;&lt;LI&gt;.docx&lt;/LI&gt;&lt;LI&gt;application/vnd.openxmlformats-officedocument.presentationml.presentation&lt;/LI&gt;&lt;LI&gt;.pptx&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1758997659407.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320760i6C1672CF0F99E694/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1758997659407.png" alt="Sandra_Rossi_0-1758997659407.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, associate the corresponding programs installed on my laptop via the menu Settings &amp;gt; Assign MIME editor; these settings are user-dependent:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_4-1758997893725.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320764iA9BD767920C728F1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_4-1758997893725.png" alt="Sandra_Rossi_4-1758997893725.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_5-1758997930909.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320765i4E870110E4710DAB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_5-1758997930909.png" alt="Sandra_Rossi_5-1758997930909.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The possible MIME type values are truncated in the screen:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_6-1758998028502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320766iD91AE175086BFC1C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_6-1758998028502.png" alt="Sandra_Rossi_6-1758998028502.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you choose one of the Office MIME types, its name appears truncated again:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_7-1758998087903.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320767i478B87EC1E3FD840/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_7-1758998087903.png" alt="Sandra_Rossi_7-1758998087903.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you don't fix it and save, you get the error "MIME type&amp;nbsp;application/vnd.openxmlformats-officedocument&amp;nbsp;unknown. Edit the settings":&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1759052563573.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320798i8C47AF7CF2D9CD12/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1759052563573.png" alt="Sandra_Rossi_0-1759052563573.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;NB: what's fun is that the setting is saved (but it's useless).&lt;/P&gt;&lt;P&gt;So, &lt;STRONG&gt;the first problem&lt;/STRONG&gt; about the truncation is that you have to remember its complete name and type it manually. We'll see below a custom solution to display the full MIME types.&lt;/P&gt;&lt;P&gt;Now, complete the MIME type name, the Excel one for instance:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the Editor, you define the path to the program on your laptop, for instance:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now, if you select an Excel file (uploading files is simple, so I didn't show how to do it), it downloads the file to a temporary folder on your laptop, Excel opens it:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_10-1758998929744.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320770i53B8E5405D8C6198/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_10-1758998929744.png" alt="Sandra_Rossi_10-1758998929744.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1759066958245.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320823i0FC8D00B8F61E83F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1759066958245.png" alt="Sandra_Rossi_3-1759066958245.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;NB: if you open it in change mode, SMW0 will propose to import the temporary file.&lt;/P&gt;&lt;P&gt;So far, so good.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now comes &lt;STRONG&gt;the second problem&lt;/STRONG&gt; about the MIME type truncation (on the screen). If the associated program has been upgraded and is now at a different location, or if you just want to see the MIME type/editor associations, the truncation problem prevents from retrieving and showing the associated program.&lt;/P&gt;&lt;P&gt;So, I have created this little program to display and edit these associations (press F4 to select the MIME type editor; press Save or Execute to save):&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_4-1759067145276.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320825iE6CB58622E909FEE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_4-1759067145276.png" alt="Sandra_Rossi_4-1759067145276.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Have fun!&lt;/P&gt;&lt;P&gt;For information, in SMW0, the menu Settings &amp;gt; Delete assignments doesn't help, it deletes &lt;STRONG&gt;all&lt;/STRONG&gt; the assignments, so it's not very useful:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_9-1758998206985.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320769i857E72C5DD185CFB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_9-1758998206985.png" alt="Sandra_Rossi_9-1758998206985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_8-1758998142917.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320768iEA40787D34EDD1BD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_8-1758998142917.png" alt="Sandra_Rossi_8-1758998142917.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Code of the program to display and edit the MIME type/editor associations:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT.
TABLES sscrfields.
PARAMETERS dummy.
CLASS lcl_app DEFINITION DEFERRED.
DATA app TYPE REF TO lcl_app.
LOAD-OF-PROGRAM.
  CREATE OBJECT app TYPE ('LCL_APP').
AT SELECTION-SCREEN OUTPUT.
  CALL METHOD app-&amp;gt;('PBO').
AT SELECTION-SCREEN.
  CALL METHOD app-&amp;gt;('PAI').


CLASS lcl_app DEFINITION.
  PUBLIC SECTION.
    METHODS pbo.
    METHODS pai.

  PRIVATE SECTION.
    TYPES:
      "! w3mimeappl-appli TYPE c LENGTH 250
      BEGIN OF ty_alv_mimeapp_appli,
        appli_1 TYPE c LENGTH 128,
        appli_2 TYPE c LENGTH 122,
      END OF ty_alv_mimeapp_appli.
    TYPES:
      BEGIN OF ty_alv_mimeapp,
        mtype TYPE w3mimeappl-mtype.
        INCLUDE TYPE ty_alv_mimeapp_appli AS appli.
    TYPES:
      END OF ty_alv_mimeapp.
    TYPES tt_alv_mimeapps TYPE STANDARD TABLE OF ty_alv_mimeapp WITH EMPTY KEY.
    TYPES tt_mimeapps     TYPE TABLE OF w3mimeappl WITH EMPTY KEY.

    CONSTANTS c_mimeappl TYPE w3objid VALUE 'mimeappl'.

    DATA alv_mimeapps TYPE tt_alv_mimeapps.
    DATA grid         TYPE REF TO cl_gui_alv_grid.
    DATA table_spfli  TYPE TABLE OF spfli.

    METHODS get_mimetypes  RETURNING VALUE(et_mimeapps) TYPE tt_mimeapps.
    METHODS save_mimetypes IMPORTING it_mimeapps        TYPE tt_mimeapps.

    METHODS on_onf4
      FOR EVENT onf4 OF cl_gui_alv_grid
      IMPORTING e_fieldname
                es_row_no
                e_fieldvalue
                er_event_data.
ENDCLASS.


CLASS lcl_app IMPLEMENTATION.
  METHOD pbo.
    IF grid IS BOUND.
      RETURN.
    ENDIF.
    SELECT * FROM mimetypes INTO TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(mimetypes).
    DATA(mimeapps) = get_mimetypes( ).
    alv_mimeapps = VALUE #( FOR &amp;lt;mimeapp&amp;gt; IN mimeapps
                            ( mtype   = &amp;lt;mimeapp&amp;gt;-mtype
                              appli_1 = &amp;lt;mimeapp&amp;gt;-appli(128)
                              appli_2 = &amp;lt;mimeapp&amp;gt;-appli+128 ) ).
    LOOP AT mimetypes REFERENCE INTO DATA(mimetype).
      IF NOT line_exists( alv_mimeapps[ mtype = mimetype-&amp;gt;type ] ).
        INSERT VALUE #( mtype   = mimetype-&amp;gt;type
                        appli_1 = ''
                        appli_2 = '' ) INTO TABLE alv_mimeapps.
      ENDIF.
    ENDLOOP.
    LOOP AT alv_mimeapps REFERENCE INTO DATA(alv_mimeapp)
         WHERE appli NP '!! *'.
      IF NOT line_exists( mimetypes[ type = alv_mimeapp-&amp;gt;mtype ] ).
        alv_mimeapp-&amp;gt;appli = CONV w3mimeappl-appli( |!! { CONV string( alv_mimeapp-&amp;gt;appli ) }| ).
      ENDIF.
    ENDLOOP.
    grid = NEW cl_gui_alv_grid( i_parent = cl_gui_container=&amp;gt;screen0 ).
    SET HANDLER on_onf4 FOR grid.
    grid-&amp;gt;register_f4_for_fields( it_f4 = VALUE #( register   = abap_true
                                                   chngeafter = abap_true
                                                   ( fieldname  = 'APPLI_1' )
                                                   ( fieldname  = 'APPLI_2' ) ) ).
    DATA(fieldcatalog) = VALUE lvc_t_fcat( ( fieldname = 'MTYPE' ref_table = 'W3MIMEAPPL' ref_field = 'MTYPE' )
                                           ( fieldname  = 'APPLI_1'
                                             dd_outlen  = 128
                                             inttype    = 'C'
                                             lowercase  = abap_true
                                             f4availabl = abap_true
                                             scrtext_l  = 'Editor path (128 first characters)' )
                                           ( fieldname  = 'APPLI_2'
                                             dd_outlen  = 122
                                             inttype    = 'C'
                                             lowercase  = abap_true
                                             f4availabl = abap_true
                                             scrtext_l  = 'Editor path (last characters)' ) ).
    grid-&amp;gt;set_table_for_first_display( EXPORTING  is_layout       = VALUE #( edit       = abap_true
                                                                             cwidth_opt = abap_true  )
                                       CHANGING   it_outtab       = alv_mimeapps
                                                  it_fieldcatalog = fieldcatalog
                                       EXCEPTIONS OTHERS          = 4 ).
  ENDMETHOD.

  METHOD pai.
    CASE sscrfields-ucomm.
      WHEN 'ONLI'
        OR 'SPOS'.
        grid-&amp;gt;check_changed_data( ).
        DATA(mimeapps) = VALUE tt_mimeapps( FOR &amp;lt;alv_mimeapp&amp;gt; IN alv_mimeapps
                                            ( mtype = &amp;lt;alv_mimeapp&amp;gt;-mtype
                                              appli = &amp;lt;alv_mimeapp&amp;gt;-appli ) ).
        save_mimetypes( mimeapps ).
        MESSAGE 'Data saved' TYPE 'I'.
        " Don't trigger save of selection screen variant
        sscrfields-ucomm = ''.
    ENDCASE.
  ENDMETHOD.

  METHOD on_onf4.
    DATA lt_filetable TYPE filetable.
    DATA l_rc         TYPE i.
    DATA l_action     TYPE i.
    DATA return       TYPE TABLE OF ddshretval.

    FIELD-SYMBOLS &amp;lt;ls_file&amp;gt;    TYPE file_table.
    FIELD-SYMBOLS &amp;lt;table_modi&amp;gt; TYPE lvc_t_modi.

    CASE e_fieldname.
      WHEN 'APPLI_1'
        OR 'APPLI_2'.
        DATA(alv_mimeapp) = alv_mimeapps[ es_row_no-row_id ].
        cl_gui_frontend_services=&amp;gt;file_open_dialog( EXPORTING  default_filename = CONV #( alv_mimeapp-appli )
                                                    CHANGING   file_table       = lt_filetable
                                                               rc               = l_rc
                                                               user_action      = l_action
                                                    EXCEPTIONS OTHERS           = 5 ).
        IF sy-subrc &amp;lt;&amp;gt; 0.
          " TODO error
        ELSEIF l_action &amp;lt;&amp;gt; cl_gui_frontend_services=&amp;gt;action_ok.
          " F4 cancelled by user
        ELSE.
          " 1 file selected
          READ TABLE lt_filetable INDEX 1 ASSIGNING &amp;lt;ls_file&amp;gt;.
          IF sy-subrc = 0.
            DATA(ls_alv_mimeapp) = CONV ty_alv_mimeapp-appli( &amp;lt;ls_file&amp;gt;-filename ).
            ASSIGN er_event_data-&amp;gt;m_data-&amp;gt;* TO &amp;lt;table_modi&amp;gt;.
            &amp;lt;table_modi&amp;gt; = VALUE #( BASE &amp;lt;table_modi&amp;gt;
                                    row_id = es_row_no-row_id
                                    ( fieldname = 'APPLI_1'
                                      value     = ls_alv_mimeapp-appli_1 )
                                    ( fieldname = 'APPLI_2'
                                      value     = ls_alv_mimeapp-appli_2 ) ).
          ENDIF.
        ENDIF.
        er_event_data-&amp;gt;m_event_handled = 'X'.
    ENDCASE.
  ENDMETHOD.

  METHOD get_mimetypes.
    DATA l_objid TYPE wwwdataid.

    CONCATENATE c_mimeappl sy-uname INTO l_objid-objid.
    CLEAR et_mimeapps.
    IMPORT mimeapps = et_mimeapps FROM DATABASE wwwdata(st) ID l_objid.
  ENDMETHOD.

  METHOD save_mimetypes.
    DATA l_objid TYPE wwwdataid.

    CONCATENATE c_mimeappl sy-uname INTO l_objid-objid.
    EXPORT mimeapps = it_mimeapps TO DATABASE wwwdata(st) ID l_objid.
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/mime-types-truncated-in-sap-web-repository-smw0/ba-p/14229638"/>
    <published>2025-09-28T15:47:48.134000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397</id>
    <title>ABAP's Parallel Processing Frameworks: Practical Guide to Performance Tuning of Mass Data Processing</title>
    <updated>2025-09-29T08:52:47.138000+02:00</updated>
    <author>
      <name>marc_steinert</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/892436</uri>
    </author>
    <content>&lt;P&gt;While working on a project to optimize a standard SAP report that struggled with large data volumes, I took a deep dive into &lt;STRONG&gt;performance tuning&lt;/STRONG&gt; in ABAP, specifically focusing on &lt;STRONG&gt;parallel processing&lt;/STRONG&gt;. This journey led me to a comprehensive analysis of the various methods SAP provides for running processes in parallel.&lt;/P&gt;&lt;P&gt;I discovered that parallel processing in ABAP is achieved using one of two core technologies. The first is the &lt;STRONG&gt;Remote Function Call (RFC)&lt;/STRONG&gt;, where both &lt;STRONG&gt;asynchronous (aRFC)&lt;/STRONG&gt; and &lt;STRONG&gt;background (bgRFC)&lt;/STRONG&gt; variants can be used to run tasks in parallel. The second technology is based on &amp;nbsp;&lt;STRONG&gt;background processes&lt;/STRONG&gt;. To make implementation easier, several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; have been built on top of these technologies, simplifying the development process.&lt;/P&gt;&lt;P&gt;This blog post is a &lt;STRONG&gt;summary&lt;/STRONG&gt; of the theoretical research I conducted for my bachelor's thesis. Its goal is to provide a &lt;STRONG&gt;comprehensive overview&lt;/STRONG&gt; of the different technologies and the six key frameworks I identified. Think of it as a practical guide to help you choose the most suitable framework for your needs, with linked resources for anyone who wants to dive deeper into a specific topic.&lt;/P&gt;&lt;H3 id="toc-hId-1890036543"&gt;&lt;STRONG&gt;The Landscape of Parallel Processing in ABAP&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;As mentioned in the introduction, parallel processing in ABAP is based on two core technologies. To simplify their use, multible frameworks have been developed for easier implementation. The following table provides an overview of these technologies and their corresponding frameworks:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="marc_steinert_0-1758550065480.png" style="width: 706px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318006iFE283EECD9A1C02A/image-dimensions/706x145?v=v2" width="706" height="145" role="button" title="marc_steinert_0-1758550065480.png" alt="marc_steinert_0-1758550065480.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, let's explore how each of these core technologies enables parallel processing.&lt;/P&gt;&lt;H4 id="toc-hId-1822605757"&gt;&lt;STRONG&gt;Asynchronous Remote Function Call (aRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Asynchronous Remote Function Call&lt;/STRONG&gt; is one of the older and established SAP technology for parallel processing in ABAP. It works by starting a session in a separate &lt;STRONG&gt;dialog work process&lt;/STRONG&gt;, which then executes a function module in parallel with the main program. The calling program does not wait for the function to finish and continues its own processing immediately.&lt;/P&gt;&lt;P&gt;By starting multiple aRFCs in a row, you can achieve a significant parallelization effect, as each call runs simultaneously in its own process. This is implemented using the &lt;EM&gt;STARTING NEW TASK&lt;/EM&gt; addition to the standard &lt;EM&gt;CALL FUNCTION&lt;/EM&gt; statement. A example call could look like this:&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
STARTING NEW TASK '&amp;lt;task_name&amp;gt;'
DESTINATION IN GROUP &amp;lt;server_group&amp;gt;
PERFORMING &amp;lt;callback_form&amp;gt; ON END OF TASK.&lt;/PRE&gt;&lt;P&gt;For a more detailed guide on aRFCs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Gahm, H. (2009): ABAP Performance Tuning&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://pdfcoffee.com/5-rfc-types-in-abap-pdf-free.html" target="_self" rel="nofollow noopener noreferrer"&gt;Jolfaei, M. A. and Neuwirt, E. (2006): Master the five remote function call (RFC) types in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/doc/saphelp_em92/9.2/en-US/48/89673284b84e6fe10000000a421937/content.htm?no_cache=true" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Asynchronous RFC (aRFC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/753088fc00704d0a80e7fbd6803c8adb/489aa5b948c673e8e10000000a42189b.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing with Asynchronous RFC&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1626092252"&gt;&lt;STRONG&gt;Background Remote Function Call (bgRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Remote Function Call&lt;/STRONG&gt; is a newer method for parallelization. While it also uses dialog work processes for execution like the aRFC, its operational logic is quite different.&lt;/P&gt;&lt;P&gt;Instead of executing immediately, a bgRFC call is first saved to a &lt;STRONG&gt;persistent queue&lt;/STRONG&gt; in the database. The actual processing is only triggered by an explicit &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement and is managed by a dedicated &lt;STRONG&gt;scheduler&lt;/STRONG&gt;. This approach makes it possible to execute tasks with an &lt;STRONG&gt;"Exactly Once"&lt;/STRONG&gt; or even an &lt;STRONG&gt;"Exactly Once in Order"&lt;/STRONG&gt; guarantee, which provides a high degree of reliability.&lt;/P&gt;&lt;P&gt;The implementation is nearly identical to that of an aRFC. The key difference is the use of the &lt;EM&gt;IN BACKGROUND UNIT&lt;/EM&gt; statement, which groups one or more function calls into a single, logical unit of work.&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
IN BACKGROUND UNIT &amp;lt;unit_object&amp;gt;.&lt;/PRE&gt;&lt;P&gt;You can find more information about this technology here:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://support.sap.com/en/alm/sap-focused-run/expert-portal/integration-cloud-monitoring/bgrfc.html" target="_self" rel="noopener noreferrer"&gt;SAP Support: bgRFC&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/48927c2caa6b17cee10000000a421937.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: bgRFC (Background Remote Function Call)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1429578747"&gt;&lt;STRONG&gt;Background Processes&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Using dedicated &lt;STRONG&gt;Background Processes&lt;/STRONG&gt; is another established method for achieving parallelism in SAP Systems, especially suitable for long-running and resource-intensive tasks that can be clearly divided.&lt;/P&gt;&lt;P&gt;Parallelizing with background processes follows the same core principle as with aRFCs: multiple tasks are started to run simultaneously. This can be achieved in two main ways. The first approach is done purely through configuration. Here, an administrator can manually schedule the same ABAP program multiple times, where each parallel &lt;STRONG&gt;job&lt;/STRONG&gt; uses a unique &lt;STRONG&gt;variant&lt;/STRONG&gt; with a different dataset&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The second approach is to implement this parallelization within a single ABAP program. This is done using a set of function modules that control the job lifecycle:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_OPEN&lt;/STRONG&gt;&lt;/EM&gt; creates a new job.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_SUBMIT&lt;/STRONG&gt;&lt;/EM&gt; adds the program and its variant as a step.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_CLOSE&lt;/STRONG&gt;&lt;/EM&gt; releases the job to the system for execution.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For more details on implementing parallel background jobs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-with-background-jobs-in-sap/ba-p/14001745" target="_self"&gt;SAP Community (2025): Parallel Processing with Background Jobs in SAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/7bfe8cdcfbb040dcb6702dada8c3e2f0/4d95304dd1b83c46e10000000a42189e.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Programming with the Background Processing System (BC-CCM-BTC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-of-background-jobs-in-sap/ba-p/13244439" target="_self"&gt;SAP Community (2014):&amp;nbsp;Parallel processing of background jobs in SAP&amp;nbsp;&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1103982523"&gt;&lt;STRONG&gt;Frameworks for Easier Implementation&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;While the core technologies provide the fundamental mechanisms for parallel processing, implementing them directly requires handling details like load balancing, package creation and managing parallel tasks. To simplify this process, SAP provides several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; that build on these technologies. These frameworks offer a structured, reusable and often easier way to implement robust parallel processing.&lt;/P&gt;&lt;P&gt;To select the most suitable framework, the following decision matrix based on the Qualitative Weight and Summ (QWS) method provides a visual comparison. The &lt;STRONG&gt;darker the green shade&lt;/STRONG&gt;, the better a framework fulfills a specific criterion. Please note that this matrix reflects my subjective evaluation for a specific use case. Your assessment will likely differ based on your project's unique requirements.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="marc_steinert_1-1758550429007.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318022i6DE4D8A1A7502555/image-size/large?v=v2&amp;amp;px=999" role="button" title="marc_steinert_1-1758550429007.png" alt="marc_steinert_1-1758550429007.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Evaluation Criteria Explained&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Here is a brief summary of each criterion used in the matrix:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Platform Compatibility:&lt;/STRONG&gt; Runs on both SAP ECC and S/4HANA systems.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Timeout Robustness:&lt;/STRONG&gt; Handles long-running tasks without timing out.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Package Creation:&lt;/STRONG&gt; Automatically divides data into work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Configurable Package Size:&lt;/STRONG&gt; Allows the developer to define the size of work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Parallel Execution:&lt;/STRONG&gt; Automatically starts and manages the execution of parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Result Aggregation:&lt;/STRONG&gt; Helps collect and consolidate results from parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Multi-Server Function:&lt;/STRONG&gt; Can distribute tasks across multiple application servers.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Processing Server Selection:&lt;/STRONG&gt; Allows specifying a server or server group for execution.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Load Balancing:&lt;/STRONG&gt; Automatically distributes tasks based on system load.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;System Load Control:&lt;/STRONG&gt; Allows setting limits on the maximum system resources used.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Implementation Effort:&lt;/STRONG&gt; The complexity and time required to implement the framework.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Documentation Quality:&lt;/STRONG&gt; The availability and quality of supporting documentation.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now lets have a look at the individual Frameworks.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1036551737"&gt;&lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt; provides a straightforward, function-module-based approach to simplify parallel processing with aRFCs. Instead of requiring the developer to manage the aRFC calls manually, the framework encapsulates the entire parallelization logic within a single, reusable function module, &lt;EM&gt;SPTA_PARA_PROCESS_START_2&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;To use the SPTA framework, a developer implements three specific form routines that serve as callbacks, filling them with the custom logic required for the application. The &lt;EM&gt;BEFORE_RFC_CALLBACK_FORM&lt;/EM&gt; is responsible for preparing the data and creating the work packages. The core processing logic, which is to be executed in parallel, is placed within the &lt;EM&gt;IN_RFC_CALLBACK_FORM&lt;/EM&gt;. After all the parallel tasks have been completed, the &lt;EM&gt;AFTER_RFC_CALLBACK_FORM&lt;/EM&gt; is called to consolidate the results and make them available for further processing.&lt;/P&gt;&lt;P&gt;For more information on the SPTA Framework, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://me.sap.com/notes/3002940/E" target="_self" rel="noopener noreferrer"&gt;SAP for Me (2020): 3002940 - Parallel Processing FAQ&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://sapyard.com/spta-parallel-processing-framework-in-abap" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] SAPYARD (2018): SPTA Parallel Processing Framework in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://www.linkedin.com/pulse/lets-talk-spta-framework-your-guide-parallel-sap-dzmitryi-kharlanau-1skaf/" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] LinkedIn (2024): Let’s Talk About the SPTA Framework: Your Guide to Parallel Processing in SAP&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-840038232"&gt;&lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt; is a more powerful and modern, object-oriented framework that also simplifies the use of aRFCs. It is structured into four main components that work together to provide a robust parallelization environment: the &lt;STRONG&gt;Package Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt;&amp;nbsp;and the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;The &lt;STRONG&gt;Package Provider&lt;/STRONG&gt; is responsible for automatically dividing the total dataset into smaller, processable packages according to configurable rules. The &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt; actively monitors the system's memory and process utilization to determine the maximum allowed number of parallel tasks, thereby preventing system overloads. The &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt; then calls the application-specific logic for each package in a separate aRFC task, while the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt; coordinates the entire process by requesting packages and resources and launching the asynchronous tasks.&lt;/P&gt;&lt;P&gt;Implementation is done in an object-oriented manner, starting with the factory class &lt;EM&gt;CL_SHDB_PFW_FACTORY&lt;/EM&gt; and using configuration objects from &lt;EM&gt;CL_SHDB_PFW_CONFIG&lt;/EM&gt; to define parameters like the number of parallel processes or package parameters.&lt;/P&gt;&lt;P&gt;While a complete guide for the SHDB Framework is not publicly available at this time, some information can be found on the SAP for Me portal. Relevant resources are available there using the search terms &lt;STRONG&gt;"SHDB Framework"&lt;/STRONG&gt; or &lt;STRONG&gt;"SHDB PFW"&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-643524727"&gt;&lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt; framework is another object-oriented solution for aRFC-based parallelization. Its name, while not official, comes from its original project folder. It is a lightweight solution centered around a main class and an interface that developers use to structure their parallel logic.&lt;/P&gt;&lt;P&gt;The implementation pattern requires the developer to create a processing class that implements the &lt;EM&gt;IF_ABAP_PARALLEL&lt;/EM&gt; interface. All the custom logic intended to run in parallel is then placed within its &lt;EM&gt;DO&lt;/EM&gt; method. Finally, the entire process is managed by an instance of the main &lt;EM&gt;CL_ABAP_PARALLEL&lt;/EM&gt; class and the parallel execution is triggered by calling the &lt;EM&gt;RUN_INST&lt;/EM&gt; method.&lt;/P&gt;&lt;P&gt;For more information on &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Schwarzmann, W. (2022): Parallel Processing with ABAP Objects: Implementation and Testing, isbn: 978-1-4932-2354-1&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/parallel-processing" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/using-class-cl-abap-parallel-for-mass-parallel-dialog-work-processes/ba-p/13579844" target="_self"&gt;SAP Community (2023): Using class CL_ABAP_PARALLEL for mass parallel dialog work processes&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-447011222"&gt;&lt;STRONG&gt;Background Processing Framework (bgPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Processing Framework&lt;/STRONG&gt; serves as the dedicated framework for the &lt;STRONG&gt;bgRFC&lt;/STRONG&gt; technology.&lt;/P&gt;&lt;P&gt;The implementation pattern requires a developer to encapsulate the business logic in a dedicated class that implements a framework interface. For most use cases, &lt;EM&gt;IF_BGMC_OP_SINGLE&lt;/EM&gt; is used to ensure the process follows strict transactional rules for data consistency.&lt;/P&gt;&lt;P&gt;Once this class with the business logic is ready, it is passed to the &lt;EM&gt;CL_BGMC_PROCESS_FACTORY&lt;/EM&gt;. This is a helper class provided by the framework that constructs the main process object for the background task. The task is then registered by calling the &lt;EM&gt;save_for_execution()&lt;/EM&gt; method and the entire process is finally triggered by a &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement.&lt;/P&gt;&lt;P&gt;For more information on the bgPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-concepts/background-processing-framework" target="_self" rel="noopener noreferrer"&gt;SAP Help Protal: Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-background-processing-framework/ba-p/13579056" target="_self"&gt;SAP Community (2023): Introducing the Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-250497717"&gt;&lt;STRONG&gt;Parallel Processing Framework (PPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Parallel Processing Framework&lt;/STRONG&gt;, sometimes also referred to as the &lt;STRONG&gt;Framework for Parallel Processing (FPP)&lt;/STRONG&gt;, is a framework based on background processes used to structure and execute mass-data processing runs in parallel.&lt;/P&gt;&lt;P&gt;Its implementation requires both settings in Customizing and the development of custom ABAP function modules. A developer first defines an &lt;STRONG&gt;application type&lt;/STRONG&gt; using transaction &lt;EM&gt;BANK_CUS_PPC&lt;/EM&gt;. This application type links specific processing steps, such as data packaging or execution, to the custom-developed function modules that contain the business logic.&lt;/P&gt;&lt;P&gt;The entire process is then initiated from a report by calling the central function module &lt;EM&gt;BANK_MAP_PP_START&lt;/EM&gt;, which uses the application type's configuration to manage the parallel jobs.&lt;/P&gt;&lt;P&gt;For more information on the PPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/sap-for-banking-blogs/exploring-mass-run-program-based-on-ppf/ba-p/13136452" target="_self"&gt;SAP Community (2015): Exploring Mass run program based on PPF&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/5bec6e0df6b549258e7ae381fedd4066/593e3752aeefbc02e10000000a44176d.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing (FPP)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--443732883"&gt;&lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt; is a comprehensive solution for structuring and controlling complex projects that involve large-scale data changes and is often used in migration scenarios.&lt;/P&gt;&lt;P&gt;The implementation requires just like the Parallel Processing Framework a combination of &lt;STRONG&gt;Customizing&lt;/STRONG&gt; and &lt;STRONG&gt;development&lt;/STRONG&gt;. In Customizing (via transaction SM30), a developer defines the entire project structure. This involves creating a &lt;STRONG&gt;Project Type&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MPROJ_TYP&lt;/EM&gt;), which consists of a sequence of &lt;STRONG&gt;Activities&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_SET&lt;/EM&gt;). Each activity is made up of one or more &lt;STRONG&gt;Steps&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_STEP&lt;/EM&gt;), where the custom ABAP logic is assigned.&lt;/P&gt;&lt;P&gt;The developer's main task is to create an &lt;STRONG&gt;application class&lt;/STRONG&gt; that contains the business logic for a step. This class must implement the interface &lt;EM&gt;IF_FINS_MASS_DATA&lt;/EM&gt;, which includes three key methods. The &lt;EM&gt;GET_PACKAGES&lt;/EM&gt; method is called to define the work packages. The &lt;EM&gt;PREPARE &lt;/EM&gt;method can be used for any setup tasks before the parallel processing starts. Finally, the &lt;EM&gt;PROCESS &lt;/EM&gt;method contains the core logic that is executed in parallel for each individual package.&lt;/P&gt;&lt;P&gt;As it is an older framework, further resources for the Mass Data Framework are primarily located on internal SAP platforms and are not publicly available.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I hope you found this overview informative and that it helps you tackle your own performance tuning challenges.&lt;/P&gt;&lt;P&gt;A special thanks to &lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/226501"&gt;@ManuS&lt;/a&gt;&amp;nbsp;&lt;/STRONG&gt; for the help and guidance!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397"/>
    <published>2025-09-29T08:52:47.138000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441</id>
    <title>Foreign entity in RAP</title>
    <updated>2025-09-29T09:05:47.440000+02:00</updated>
    <author>
      <name>Shyam4U</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1512208</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Description:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;A RAP BO entity which is not part of the BO composition tree for which it is defined. Defining a foreign entity in the behavior definition enables cross-BO message mapping between the two BOs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Key Concepts:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;RAP foreign entity is a component of the BC-ESI-RAP RESTful ABAP Programming Model. It is a representation of an external entity, such as a web service, that can be used in an ABAP program. The foreign entity is defined in the ABAP program and can be used to access data from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tips &amp;amp; Tricks:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;When defining a RAP foreign entity, it is important to ensure that all authentication information is correct. This will ensure that requests are sent securely and that responses are received correctly. Additionally, it is important to ensure that the URL of the external source is correct, as this will ensure that requests are sent to the correct location.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;How to use it:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;To use a RAP foreign entity, first define the entity in the ABAP program. This includes specifying the URL of the external source, as well as any authentication information that may be required. Once the entity is defined, it can be used to access data from the external source. This can be done using the RAP API, which provides methods for making requests and receiving responses from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758779361113.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319667i1BD7D26A3B6E12D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758779361113.png" alt="Shyam4U_0-1758779361113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Example : &lt;/STRONG&gt;&lt;/FONT&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;"In our system, we have two distinct business entities: &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Inventory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Order&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Although they are separate, they are fundamentally linked. We manage this connection by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;product ID&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; as the key identifier. This ensures that every time a sales order is created, the system automatically checks and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;deducts the correct quantity from the available stock&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the inventory. This process maintains accurate, real-time stock levels, which is critical for our operations."&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'inverty table' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_t_inventory { 

key product_id : abap.char(10) not null; 
stock_level : abap.int4; 
product_name : abap.char(40); 
create_at : timestampl; 
last_chdate : timestampl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INTERFACE VIEW INVERNTORY' 
@Metadata.ignorePropagatedAnnotations: true 
define root view entity ZSCN_i_INVENTORY as select from zscn_t_inventory 
{ 
key product_id as ProductId, 
stock_level as StockLevel, 
product_name as ProductName, 
create_at as CreateAt, 
last_chdate as LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INVENTORY CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: true 
@VDM.viewType: #TRANSACTIONAL 
define root view entity ZSCN_C_INVENTORY 
provider contract transactional_query 
as projection on ZSCN_i_INVENTORY 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Product Id' }] 
@UI.identification:[{ position: 10 , label: 'Product Id' }] 
key ProductId, 
@UI.lineItem: [{ position: 20 , label: 'Stock Level' }] 
@UI.identification:[{ position: 20 , label: 'Stock Level' }] 
StockLevel, 
@UI.lineItem: [{ position: 30 , label: 'Product Name' }] 
@UI.identification:[{ position: 30 , label: 'Product Name' }] 
ProductName, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_inventory unique; 
strict ( 2 ); 
with draft; 

define behavior for ZSCN_i_INVENTORY //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_t_inventory 
lock master 
total etag LastChdate 
draft table zscn_t_invent_d 
authorization master ( instance ) 
late numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 
create ( authorization : global ); 
update; 
delete; 
field ( readonly ) ProductId; 

validation vali_Stock on save { create; update; } 

draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_t_inventory { 
CreateAt = create_at ; 
LastChdate = last_chdate ; 
ProductId = product_id ; 
ProductName = product_name ; 
StockLevel = stock_level; 
} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758779760747.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319670i23615557B62C460B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758779760747.png" alt="Shyam4U_1-1758779760747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In our system, a key validation for inventory is to prevent the stock level from ever going into a negative value.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758780972739.png" style="width: 655px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319675i7F29A75ECBAD4A91/image-dimensions/655x264?v=v2" width="655" height="264" role="button" title="Shyam4U_0-1758780972739.png" alt="Shyam4U_0-1758780972739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD vali_Stock.
    
LOOP AT keys INTO DATA(lv_key).

      READ ENTITY IN LOCAL MODE ZSCN_i_INVENTORY
       ALL FIELDS WITH VALUE #( (  %key = lv_key-%key ) )
      RESULT DATA(lt_result).

      CHECK lt_result IS NOT INITIAL.

      LOOP AT lt_result INTO DATA(lv_result).
        IF lv_result-StockLevel &amp;lt; 0 .
          APPEND VALUE #(  %tky = lv_result-%tky  ) TO failed-zscn_i_inventory.

          APPEND VALUE #(  %tky = lv_result-%tky
                 %msg = new_message_with_text( severity =
                 if_abap_behv_message=&amp;gt;severity-error
                 text = 'Stock value should not be negative value ' &amp;amp;&amp;amp; ' ' &amp;amp;&amp;amp; lv_result-StockLevel )
                 %element-stocklevel = if_abap_behv=&amp;gt;mk-on  ) TO reported-zscn_i_inventory .

        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758781361679.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319683i21B33569A1767987/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758781361679.png" alt="Shyam4U_2-1758781361679.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Sales order Entity&amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'SALES ORDER' 
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_dt_salesord { 

key sales_order_id : abap.numc(10) not null; 
product_id : abap.char(10) not null; 
quantity : abap.numc(5); 
customer_id : abap.char(10); 
order_date : abap.dats; 
@Semantics.amount.currencyCode : 'zscn_dt_salesord.currency' 
total_amount : abap.curr(13,2); 
currency : abap.cuky; 
create_at : timestamp; 
last_changed : timestamp; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'SALESORD CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: false 
define root view entity ZSCN_C_SALESORD 
provider contract transactional_query 
as projection on ZSCN_I_SALESORD 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Sales Order Id' }] 
@UI.identification:[{ position: 10 , label: 'Sales Order Id' }] 
key SalesOrderId, 
@UI.lineItem: [{ position: 20 , label: 'Product Id' }] 
@UI.identification:[{ position: 20 , label: 'Product Id' }] 
@Consumption.valueHelpDefinition: [{ 
entity: { name: 'ZSCN_C_INVENTORY', element: 'ProductId' } }] 
ProductId, 
@UI.lineItem: [{ position: 30 , label: 'Quantity' }] 
@UI.identification:[{ position: 30 , label: 'Quantity' }] 
Quantity, 
@UI.lineItem: [{ position: 40 , label: 'Customer Id' }] 
@UI.identification:[{ position: 40 , label: 'Customer Id' }] 
CustomerId, 
@UI.lineItem: [{ position: 50 , label: 'Order Date' }] 
@UI.identification:[{ position: 50 , label: 'Order Date' }] 
OrderDate, 
@UI.lineItem: [{ position: 60 , label: 'Total Amount' }] 
@UI.identification:[{ position: 60 , label: 'Total Amount' }] 
TotalAmount, 
Currency, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChanged 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_salesord unique; 
strict ( 2 ); 
with draft; 

//foreign entity Zscn_i_inventory alias _inventory ; 
define behavior for ZSCN_I_SALESORD //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_dt_salesord 
lock master 
total etag LastChanged 
draft table zscn_dt_salord_d 
authorization master ( instance ) 
early numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 

create ( authorization : global ); 
update; 
delete; 
field ( readonly ) SalesOrderId; 

validation valid_ProductId on save { create; update; } 
determination stock_upadte on save { field Quantity; } 
 
draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_dt_salesord 
{ 
CreateAt = create_at; 
Currency = currency; 
CustomerId = customer_id; 
LastChanged = last_changed; 
OrderDate = order_date;
ProductId = product_id; 
SalesOrderId = sales_order_id; 
Quantity = quantity; 
TotalAmount = total_amount; 

} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;without the foreign entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt; &lt;SPAN class=""&gt;syntax ,&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; behavior definition of the ZSCN_I_SALESORD it only holding the structure of ZSCN_I_SALESORD it &lt;/SPAN&gt;&lt;SPAN class=""&gt;doesn't&lt;/SPAN&gt;&lt;SPAN class=""&gt; hold the structure &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt;&lt;SPAN class=""&gt; .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758782312689.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319693i04E76CF2ACE2702F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758782312689.png" alt="Shyam4U_3-1758782312689.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758782320070.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319694iBE9FAD22C19ED3EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_4-1758782320070.png" alt="Shyam4U_4-1758782320070.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Due to the separate entity definitions, errors from an inventory stock update cannot be directly propagated to the sales order user interface. In Failed and &lt;/SPAN&gt;&lt;SPAN class=""&gt;Reported structure will be miss &lt;/SPAN&gt;&lt;SPAN class=""&gt;match. &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;T&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;o propagate &lt;/SPAN&gt;&lt;SPAN class=""&gt;this&lt;/SPAN&gt;&lt;SPAN class=""&gt; we use of foreign entity syntax&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;uncomment the&amp;nbsp;//foreign entity Zscn_i_inventory alias _inventory ;&amp;nbsp; in Behavior definition of&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Zscn_i_salesord .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758782990181.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319700i976D6F6DBC5BC8E1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758782990181.png" alt="Shyam4U_0-1758782990181.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After adding the Foreign entity Zscn_i_inventory &amp;nbsp;alies _inventory ; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can see the change in the entity Zscn_i_salesord structure .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758783042974.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319701i23555758241BE272/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758783042974.png" alt="Shyam4U_1-1758783042974.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758783077463.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319702i7ED69A661F19E1EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_2-1758783077463.png" alt="Shyam4U_2-1758783077463.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758783109372.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319703iBBF8EBD3793DA2F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758783109372.png" alt="Shyam4U_3-1758783109372.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758783178499.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319704iD42E5E0BC1A228ED/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_4-1758783178499.png" alt="Shyam4U_4-1758783178499.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using the Determination we are update the stock of&amp;nbsp;the inventory table based on the Product id in Behavior definition implementation class .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A critical validation has been implemented: when a sales order is created, if the requested quantity is greater than the available stock level, an error is raised in the inventory business logic. This error is then propagated to the sales order entity, making it visible on the sales order screen.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD stock_upadte. 

LOOP AT keys INTO DATA(lv_key). 

READ ENTITY IN LOCAL MODE zscn_i_salesord ALL FIELDS WITH 
VALUE #( ( %key = lv_key-%key ) ) 
RESULT DATA(lt_result). 

CHECK lt_result IS NOT INITIAL. 

LOOP AT lt_result INTO DATA(lv_result). 
 
READ ENTITY ZSCN_i_INVENTORY 
ALL FIELDS WITH VALUE #( ( ProductId = lv_result-ProductId ) ) 
RESULT DATA(lt_result_inventory). 

LOOP AT lt_result_inventory INTO DATA(lv_inventory). 

 DATA(lv_stock) = CONV i( lv_inventory-StockLevel - lv_result-Quantity ). 

MODIFY ENTITY ZSCN_i_INVENTORY UPDATE FIELDS ( StockLevel ) 
WITH VALUE #( ( %key-ProductId = lv_inventory-%key-ProductId 
StockLevel = lv_stock ) ) REPORTED DATA(ltreported). 

if ltreported is not INITIAL. 
 
DATA: lt_dummy LIKE reported-_inventory. 
lt_dummy = CORRESPONDING #( ltreported-zscn_i_inventory ). 

APPEND LINES OF lt_dummy TO reported-_inventory.  

endif. 
      ENDLOOP. 
   ENDLOOP. 
ENDLOOP. 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;above&lt;/SPAN&gt;&lt;SPAN class=""&gt; code &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt; am using &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CORRESPONDING #( &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ltreported&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;zscn_i_inventory&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; ). &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;because &lt;/SPAN&gt;&lt;SPAN class=""&gt;of while&lt;/SPAN&gt; &lt;SPAN class=""&gt;using&lt;/SPAN&gt;&lt;SPAN class=""&gt; the EML syntax the report will be early but inside the Behavior &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition it&lt;/SPAN&gt;&lt;SPAN class=""&gt; will be late &lt;/SPAN&gt;&lt;SPAN class=""&gt;structure.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_5-1758783700742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319709i8DE267E217225D43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_5-1758783700742.png" alt="Shyam4U_5-1758783700742.png" /&gt;&lt;/span&gt;&amp;nbsp; &lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_6-1758783731326.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319710i291685CEEACF10B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_6-1758783731326.png" alt="Shyam4U_6-1758783731326.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In inventory entity this are the possible product we have in that &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; will &lt;/SPAN&gt;&lt;SPAN class=""&gt;chose&lt;/SPAN&gt;&lt;SPAN class=""&gt; Titan watch&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758784285024.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319716i82C35938198C8543/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758784285024.png" alt="Shyam4U_0-1758784285024.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When creating a sales order for a Titan watch, if the requested quantity of 50 exceeds the available stock of 40, the system will prevent the transaction and display an error.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758784335793.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319717i0D9C69770EC165AB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758784335793.png" alt="Shyam4U_1-1758784335793.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;The error which is from the inventory entity by using the foreign entity concept we are propagating the error message of &lt;/SPAN&gt;&lt;SPAN class=""&gt;inventory in&lt;/SPAN&gt;&lt;SPAN class=""&gt; sales order entity.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758784368449.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319718i9251943C19615F88/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758784368449.png" alt="Shyam4U_2-1758784368449.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related Information:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;For more information on using RAP foreign entities, please refer to the SAP Help documentation on BC-ESI-RAP RESTful ABAP Programming Model. Additionally, there are many tutorials available online which provide step-by-step instructions on how to use RAP foreign entities in an ABAP program.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Thanks for &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.erplingo.com/sap-glossary/en/bc-esi-rap/rap-foreign-entity" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;What is RAP foreign entity in SAP BC-ESI-RAP? Definition &amp;amp; Tips&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441"/>
    <published>2025-09-29T09:05:47.440000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/enhancing-standard-bapis-when-and-how-to-do-it/ba-p/14228472</id>
    <title>Enhancing Standard BAPIs: When and How to Do It</title>
    <updated>2025-09-29T09:08:51.264000+02:00</updated>
    <author>
      <name>Shantalinga</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2248550</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Enhancing Standard BAPIs: When and How to Do It&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Business Application Programming Interfaces (&lt;STRONG&gt;BAPIs&lt;/STRONG&gt;) are one of the most powerful tools in SAP, designed to enable seamless integration between SAP and external systems. In most cases, the &lt;STRONG&gt;standard BAPIs&lt;/STRONG&gt; provided by SAP are sufficient to cover typical business scenarios.&lt;/P&gt;&lt;P&gt;However, real-world requirements often demand more. Maybe you need an extra field that isn’t delivered, or you have to add custom checks before the data is posted. That’s when &lt;STRONG&gt;enhancing a standard BAPI&lt;/STRONG&gt; becomes necessary.&lt;/P&gt;&lt;P&gt;In this blog, we’ll look at &lt;STRONG&gt;when&lt;/STRONG&gt; it makes sense to enhance a BAPI and &lt;STRONG&gt;how&lt;/STRONG&gt; you can do it safely without breaking SAP best practices.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;When Should You Enhance a Standard BAPI?&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Missing Fields&lt;/STRONG&gt;&lt;BR /&gt;Sometimes the delivered BAPI doesn’t expose all the fields you need. For example, a custom field in the material master might not be available.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Extra Validations&lt;/STRONG&gt;&lt;BR /&gt;You may need business-specific checks before the BAPI processes data.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Logic Before or After Execution&lt;/STRONG&gt;&lt;BR /&gt;You might want to execute additional steps either before calling the BAPI or right after it completes.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Integration with External Systems&lt;/STRONG&gt;&lt;BR /&gt;If you’re mapping SAP data with a third-party system, additional fields or transformations may be needed.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Performance Improvements&lt;/STRONG&gt;&lt;BR /&gt;In some cases, the standard BAPI processes more than you need. Enhancements can help you fine-tune the performance.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;How to Enhance a Standard BAPI&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP provides different ways to enhance BAPIs, depending on the extensibility options available. Let’s go through them one by one:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Using BADI Enhancements (Recommended)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Many standard BAPIs come with &lt;STRONG&gt;Business Add-Ins (BADI)&lt;/STRONG&gt; to make them extensible.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Check in &lt;STRONG&gt;SE18/SE19&lt;/STRONG&gt; if a BADI exists for the BAPI.&lt;/LI&gt;&lt;LI&gt;Implement the BADI and add your custom logic.&lt;/LI&gt;&lt;LI&gt;Activate and test.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shantalinga_0-1758866381921.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320103i78596E4A8F912B5C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shantalinga_0-1758866381921.png" alt="Shantalinga_0-1758866381921.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_ex_customer_add_data~check_all_data.
  IF s_kna1-kredit = '50000'.
    "Custom validation logic here
  ENDIF.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Enhancing BAPI Structures (Appending Fields)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;If you need extra fields, check if the BAPI’s structure allows &lt;STRONG&gt;append structures&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Extend the structure using &lt;STRONG&gt;SE11&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Populate the new fields via a user exit or BADI.&lt;/LI&gt;&lt;LI&gt;Test the enhanced BAPI thoroughly.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;User Exits in BAPI Processing&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Some BAPIs offer user exits where custom code can be added.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Identify the exit in &lt;STRONG&gt;SMOD&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Implement it using &lt;STRONG&gt;CMOD&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Add your business logic.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shantalinga_1-1758867075869.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320119i7A1E757890B55595/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shantalinga_1-1758867075869.png" alt="Shantalinga_1-1758867075869.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;INCLUDE MF02DFEX.
IF sy-tcode = 'XD01'.
  "CUSTOM LOGIC
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Wrapper Function Modules&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;If no BADI or exit is available, create a &lt;STRONG&gt;custom wrapper&lt;/STRONG&gt; around the standard BAPI.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Copy the BAPI into a custom function module (ZBAPI_...).&lt;/LI&gt;&lt;LI&gt;Insert your logic.&lt;/LI&gt;&lt;LI&gt;Use the wrapper instead of calling the standard BAPI directly.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Implicit Enhancements&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;When all else fails, use &lt;STRONG&gt;implicit enhancements&lt;/STRONG&gt; at predefined spots in the BAPI.&lt;/LI&gt;&lt;LI&gt;Steps:&lt;/LI&gt;&lt;OL&gt;&lt;LI&gt;Create an enhancement via &lt;STRONG&gt;SE19&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Insert your custom code.&lt;/LI&gt;&lt;LI&gt;Activate and test.&lt;/LI&gt;&lt;/OL&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Enhancing a standard BAPI is often the only way to meet specific business needs, but it must be done carefully. By sticking to SAP’s recommended approaches—such as &lt;STRONG&gt;BADIs, user exits, wrapper functions, and implicit enhancements&lt;/STRONG&gt;—you can deliver the required functionality without risking system stability or upgrade issues.&lt;/P&gt;&lt;P&gt;The key is to &lt;STRONG&gt;choose the right enhancement technique&lt;/STRONG&gt; based on your scenario, test extensively, and document everything. Done right, BAPI enhancements make your system more flexible while keeping it aligned with SAP best practices.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/enhancing-standard-bapis-when-and-how-to-do-it/ba-p/14228472"/>
    <published>2025-09-29T09:08:51.264000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-abap-sdk-for-ibm-watsonx-v1-4-0-released/ba-p/14230743</id>
    <title>SAP ABAP SDK for IBM watsonx v1.4.0 released</title>
    <updated>2025-09-29T16:50:19.279000+02:00</updated>
    <author>
      <name>christian_bartels</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/184450</uri>
    </author>
    <content>&lt;P&gt;On September 26, 2025, IBM has released version 1.4.0 of its ABAP® Software Development Kit (SDK) for IBM® watsonx™ services. The &lt;A href="https://www.ibm.com/products/watsonx-ai" target="_self" rel="nofollow noopener noreferrer"&gt;watsonx.ai&lt;/A&gt; service can be used to train, validate, tune, and deploy foundation and machine learning models. The &lt;A href="https://cloud.ibm.com/catalog/services/watsonxai-runtime" target="_self" rel="nofollow noopener noreferrer"&gt;watsonx.ai Runtime&lt;/A&gt; is used to build, run and manage generative AI and machine learning applications with built-in performance and scalabilityThe ABAP SDK provides a class library that can be downloaded to SAP systems using &lt;A href="https://abapgit.org/" target="_self" rel="nofollow noopener noreferrer"&gt;abapGit&lt;/A&gt; and comes in two flavors:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/IBM/abap-sdk-nwas-x" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP SDK for IBM watsonx, using SAP NetWeaver&lt;/A&gt; for the SAP Business Suite running on SAP NetWeaver 7.50 or above and for the SAP S/4HANA on-premises edition.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/IBM/abap-sdk-btp-x" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP SDK for IBM watsonx, using SAP BTP ABAP Environment&lt;/A&gt; for the SAP Business Technology Platform ABAP Environment.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Enhancements in this release include new watsonx.ai methods in the groups Prompt Sessions and Prompts. More information about the changes in version 1.4.0 can be found in the repositories in the migration document &lt;A href="https://github.com/IBM/abap-sdk-nwas-x/blob/main/MIGRATION-V1.4.0.md" target="_self" rel="nofollow noopener noreferrer"&gt;MIGRATION-V1.4.0.md&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Detailed information on how to setup and use the SDK can be found in the README.md files of the GitHub repositories. The README.md files also provide two comprehensive examples to show how the supported services can be used. An even more elaborated article about how use watsonx services with the ABAP SDK can be found in Joachim Rese's blog article &lt;A href="https://community.sap.com/t5/application-development-blog-posts/how-to-bring-generative-ai-to-your-abap-program-using-the-abap-sdk-for-ibm/ba-p/13694067" target="_self"&gt;How to Bring Generative AI to Your ABAP Program Using the ABAP SDK for IBM watsonx&lt;/A&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-abap-sdk-for-ibm-watsonx-v1-4-0-released/ba-p/14230743"/>
    <published>2025-09-29T16:50:19.279000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-general-blog-posts/smart-debugger/ba-p/14231014</id>
    <title>Smart Debugger</title>
    <updated>2025-09-29T23:51:26.297000+02:00</updated>
    <author>
      <name>yury_sichov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/200363</uri>
    </author>
    <content>&lt;P&gt;Hello everyone. I invented a new&lt;A href="https://github.com/ysichov/Smart-Debugger" target="_self" rel="nofollow noopener noreferrer"&gt; Abap debugger&lt;/A&gt; ) This is an &lt;A href="https://github.com/ysichov/Smart-Debugger/blob/master/src/z_smart_debugger_test.prog.abap" target="_self" rel="nofollow noopener noreferrer"&gt;ABAP Script&lt;/A&gt; which can be used like addon to the standard debugger.&lt;/P&gt;&lt;P&gt;The main feature is that&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;it can work as debugger time machine which store every variables changes on every steps and show it in convenient format. Usuful to analyse deep structures, several tables simultaneously and search changes in the past!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Instance variables, structures and deep structures are shown as&amp;nbsp; hierarchiсal trees so we can have a 'helicopter view' for all variables at any step! Double-click on any table variable or table inside a deep structure will show it in separate window! And we don't have no limitations for windows quantity. If you have a big display you can open more then 10 tables simultaneously and analyse it!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="deep.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321385i2DD6CDE8A9D9199E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="deep.png" alt="deep.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Also it can show &lt;A href="https://github.com/WegnerDan/abapMermaid" target="_self" rel="nofollow noopener noreferrer"&gt;mermaid&lt;/A&gt; diagram with calls execution or draw execution flow&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Stack calls" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321372i4CC82D2F14B0A223/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="ice.jfif" alt="Stack calls" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Stack calls&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After double-click on any variable it works as watchpoint and collects not only selected variables but dependents also (forms/methods/functions call). Button "Calculation Flow" will paint all steps in the code where variables were changed and paints Mermaid diagram for it.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The main profit for me is to getting calculation history quick. As I am an HR developer I tested salary calculations cases. In the classic debugger I can set a watchpoint. But in real program variables names are altered by calls. I name it outer and inners names. And in real debugging I should find manually all that altering to get the origin of all calculations. With Smart Debugger I get calculations history immediately because it can track all that names changes and can collect history path for selected variable by me.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="calc.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321376i361A8008B388948E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="calc.png" alt="calc.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/ysichov/Smart-Debugger/blob/master/Z_SDDE_mermaid" target="_self" rel="nofollow noopener noreferrer"&gt;Mermaid version is here&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;We can Set/Delete Session/External breakpoints and run standard debug buttons( F5. F6, F7, F8). Also we can get back to the past steps and see variables state at that moment.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;So set break-points in any abap code and run. After break-point is triggered, go to the last tab "script" and paste the script.&amp;nbsp;Choose radio button "Execute directly" and press "Start Script" button.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="start.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321386i676776CC08C8038A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="start.png" alt="start.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="http://zevolving.com/2012/01/iterator-design-pattern-to-access-linked-list/" target="_self" rel="nofollow noopener noreferrer"&gt;Iterators example&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iter.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/321438iC40BE2DC5803F2E1/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="iter.png" alt="iter.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Feel free to open any issue or Idea/requests for changes.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-general-blog-posts/smart-debugger/ba-p/14231014"/>
    <published>2025-09-29T23:51:26.297000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/basic-code-s-of-abap/ba-p/14231152</id>
    <title>Basic code's of ABAP</title>
    <updated>2025-09-30T06:38:10.002000+02:00</updated>
    <author>
      <name>RakeshZore</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1759317</uri>
    </author>
    <content>&lt;P&gt;This blog consists of Basic code's of ABAP which can help most of the Beginner to understand and use it with simple replacements.....&lt;/P&gt;&lt;P&gt;Content of the post.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Display of Data using&amp;nbsp;REUSE_ALV_GRID&lt;/LI&gt;&lt;LI&gt;Display of data using Class method and also screen validation error&lt;/LI&gt;&lt;LI&gt;Modify Table in runtime using&amp;nbsp;REUSE_ALV_GRID_DISPLAY.&lt;/LI&gt;&lt;LI&gt;Error handling using message class code.&lt;/LI&gt;&lt;LI&gt;Spool Generation code.&lt;/LI&gt;&lt;LI&gt;Selection Screen code for visibility of parameters according to requirements.&lt;/LI&gt;&lt;LI&gt;Excel upload using&amp;nbsp;TEXT_CONVERT_XLS_TO_SAP&lt;/LI&gt;&lt;LI&gt;Table Maintenance code for Create, display and update data without SM30 and excel upload of data to create data using FM 'ALSM_EXCEL_TO_INTERNAL_TABLE'&lt;/LI&gt;&lt;LI&gt;Send Mail with Excel and PDF attachments.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;BR /&gt;1. Display of Data using&amp;nbsp;REUSE_ALV_GRID&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT1.

TABLES : BSEG, MARA, MARD.

TYPE-POOLS : SLIS.

*INPUTS
PARAMETERS : R_ACCNO TYPE BSEG-BELNR,
R_FYEAR TYPE BSEG-GJAHR.

*DECLARATIONS OF NEEDED COMPONENTS
DATA : IT_BSEG TYPE STANDARD TABLE OF BSEG,
WA_BSEG TYPE BSEG,
IT_MARA TYPE STANDARD TABLE OF MARA,
WA_MARA TYPE MARA,
IT_MARD TYPE STANDARD TABLE OF MARD,
WA_MARD TYPE MARD.

*CREATING TABLE STRUCTURE FOR FINAL OUTPUT
TYPES : BEGIN OF TY_STRUC,

MATNR TYPE BSEG-MATNR,
BELNR TYPE BSEG-BELNR,
GJAHR TYPE BSEG-GJAHR,
ERNAM TYPE MARA-ERNAM,
AENAM TYPE MARA-AENAM,
LGORT TYPE MARD-LGORT,
END OF TY_STRUC.

DATA : IT_FINAL TYPE STANDARD TABLE OF TY_STRUC,
WA_FINAL TYPE TY_STRUC.

DATA : IT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
WA_FIELDCAT LIKE LINE OF IT_FIELDCAT.

*CONDITION FOR TAKING INPUTS AND ALSO ADDING DATA OF BSEG IN THE INTERNAL TABLE.
IF R_ACCNO IS NOT INITIAL AND R_FYEAR IS NOT INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BELNR = R_ACCNO AND GJAHR = R_FYEAR.

ELSEIF R_ACCNO IS NOT INITIAL AND R_FYEAR IS INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BELNR = R_ACCNO.

ELSEIF R_ACCNO IS INITIAL AND R_FYEAR IS NOT INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE GJAHR = R_FYEAR.

ELSEIF R_ACCNO IS INITIAL AND R_FYEAR IS INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG.

ENDIF.

*DELETING THE DUPLICATES WITH RESPECT TO MATNR
*DELETE ADJACENT DUPLICATES FROM IT_BSEG COMPARING MATNR.

*NOW ADDING CONTENT OF MARA AND MARD INTO THE INTERNAL TABLE RESPECTIVELY USING MATNR AS FOREIGN KEY
SELECT MATNR ERNAM AENAM FROM MARA INTO CORRESPONDING FIELDS OF TABLE IT_MARA FOR ALL ENTRIES IN IT_BSEG WHERE MATNR = IT_BSEG-MATNR.

SELECT MATNR LGORT FROM MARD INTO CORRESPONDING FIELDS OF TABLE IT_MARD FOR ALL ENTRIES IN IT_MARA WHERE MATNR = IT_MARA-MATNR.

*MERGING ALL THE DATA INTO FINAL INTERNAL TABLE
LOOP AT IT_BSEG INTO WA_BSEG.

READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = WA_BSEG-MATNR .

READ TABLE IT_MARD INTO WA_MARD WITH KEY MATNR = WA_MARA-MATNR.

WA_FINAL-MATNR = WA_MARA-MATNR.
WA_FINAL-BELNR = WA_BSEG-BELNR.
WA_FINAL-GJAHR = WA_BSEG-GJAHR.
WA_FINAL-ERNAM = WA_MARA-ERNAM.
WA_FINAL-AENAM = WA_MARA-AENAM.
WA_FINAL-LGORT = WA_MARD-LGORT.

APPEND WA_FINAL TO IT_FINAL.

ENDLOOP.

*DELETING THE DUPLICATES WITH RESPECT TO MATNR
DELETE ADJACENT DUPLICATES FROM IT_FINAL COMPARING MATNR.

WA_FIELDCAT-FIELDNAME = 'MATNR'.
WA_FIELDCAT-SELTEXT_M = 'MATERIAL NUMBER'.
WA_FIELDCAT-OUTPUTLEN = '18'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'BELNR'.
WA_FIELDCAT-SELTEXT_M = 'ACCOUNT DOCUMENT NUMBER'.
WA_FIELDCAT-OUTPUTLEN = '10'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'GJAHR'.
WA_FIELDCAT-SELTEXT_M = 'FISCAL YEAR'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'ERNAM'.
WA_FIELDCAT-SELTEXT_M = 'CREATED BY'.
WA_FIELDCAT-OUTPUTLEN = '12'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'AENAM'.
WA_FIELDCAT-SELTEXT_M = 'CHANGED BY'.
WA_FIELDCAT-OUTPUTLEN = '12'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'LGORT'.
WA_FIELDCAT-SELTEXT_M = 'STORAGE LOCATION'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.




CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
IT_FIELDCAT = IT_FIELDCAT
TABLES
T_OUTTAB = IT_FINAL
* EXCEPTIONS
* PROGRAM_ERROR = 1
* OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;2. Display of data using Class method and also screen validation error&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT2.

PARAMETERS : EMP_ID TYPE PA0000-PERNR.

DATA: WA_PA00 TYPE PA0000,
WA_PA2 TYPE PA0002.

AT SELECTION-SCREEN .

SELECT SINGLE * FROM PA0000 INTO WA_PA00 WHERE PERNR = EMP_ID.
SELECT SINGLE * FROM PA0002 INTO WA_PA2 WHERE PERNR = WA_PA00-PERNR.

IF WA_PA2-PERNR IS INITIAL.
MESSAGE 'EMPLOYEE NOT PRESENT' TYPE 'E'.

ENDIF.

CLASS EMP_MAIN DEFINITION.
PUBLIC SECTION.
METHODS : GET_DATA,
DISPLAY.

PRIVATE SECTION.
DATA: IT_PA02 TYPE STANDARD TABLE OF PA0002,
WA_PA02 TYPE PA0002.


TYPES: BEGIN OF TY_STRUC,
EMP_ID TYPE PA0002-PERNR,
LAST_NAME TYPE PA0002-NACHN,
FIRST_NAME TYPE PA0002-VORNA,
DOB TYPE PA0002-GBDAT,
GENDER TYPE ZGENDER,

END OF TY_STRUC.


DATA : IT_ANS TYPE STANDARD TABLE OF TY_STRUC,
WA_ANS TYPE TY_STRUC.

ENDCLASS.

CLASS EMP_MAIN IMPLEMENTATION.
METHOD GET_DATA.


SELECT PERNR NACHN VORNA GBDAT GESCH FROM PA0002 INTO CORRESPONDING FIELDS OF TABLE ME-&amp;gt;IT_PA02 WHERE PERNR = EMP_ID.

LOOP AT ME-&amp;gt;IT_PA02 INTO ME-&amp;gt;WA_PA02.
ME-&amp;gt;WA_ANS-EMP_ID = ME-&amp;gt;WA_PA02-PERNR.
ME-&amp;gt;WA_ANS-LAST_NAME = ME-&amp;gt;WA_PA02-NACHN.
ME-&amp;gt;WA_ANS-FIRST_NAME = ME-&amp;gt;WA_PA02-VORNA.
ME-&amp;gt;WA_ANS-DOB = ME-&amp;gt;WA_PA02-GBDAT.

IF ME-&amp;gt;WA_PA02-GESCH = 1.
ME-&amp;gt;WA_ANS-GENDER = 'M-YES'.
ELSE.
ME-&amp;gt;WA_ANS-GENDER = 'F-YES'.
ENDIF.

APPEND ME-&amp;gt;WA_ANS TO ME-&amp;gt;IT_ANS.

ENDLOOP.

ENDMETHOD.

METHOD DISPLAY.
DATA : LR_TABLE TYPE REF TO CL_SALV_TABLE.
CL_SALV_TABLE=&amp;gt;FACTORY( IMPORTING R_SALV_TABLE = LR_TABLE
CHANGING T_TABLE = ME-&amp;gt;IT_ANS ).
LR_TABLE-&amp;gt;DISPLAY( ).
ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.

DATA LR_MAIN TYPE REF TO EMP_MAIN.

CREATE OBJECT LR_MAIN.
LR_MAIN-&amp;gt;GET_DATA( ).

LR_MAIN-&amp;gt;DISPLAY( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;3. Modify Table in runtime using&amp;nbsp;REUSE_ALV_GRID_DISPLAY.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT3.

DATA WA_MS TYPE ZMATERIAL_SALES.

TYPE-POOLS : SLIS.

SELECT-OPTIONS: DATE FOR WA_MS-C_DATE.

DATA: IT_SO TYPE TABLE OF ZMATERIAL_SALES,
IT_CY TYPE TABLE OF ZMATERIAL_SALES,
WA_SO TYPE ZMATERIAL_SALES,
WA_CY TYPE ZMATERIAL_SALES.


DATA : IT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
WA_FIELDCAT LIKE LINE OF IT_FIELDCAT.

START-OF-SELECTION.

IF DATE IS NOT INITIAL.
PERFORM FETCH USING DATE[] CHANGING IT_SO.
ELSE.
SELECT * FROM ZMATERIAL_SALES INTO TABLE IT_SO.
ENDIF.

IT_CY = IT_SO.

PERFORM FIELD_CATALOG.



CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
I_CALLBACK_PROGRAM = SY-REPID
I_CALLBACK_USER_COMMAND = 'SAVE'
IT_FIELDCAT = IT_FIELDCAT
TABLES
T_OUTTAB = IT_SO
EXCEPTIONS
PROGRAM_ERROR = 1
OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.



FORM FETCH USING P_DATE LIKE DATE[]
CHANGING P_IT_SO LIKE IT_SO.
SELECT * FROM ZMATERIAL_SALES INTO TABLE P_IT_SO WHERE C_DATE IN P_DATE.

ENDFORM. " FETCH




FORM FIELD_CATALOG .

WA_FIELDCAT-COL_POS = 1.
WA_FIELDCAT-FIELDNAME = 'MATNR'.
WA_FIELDCAT-SELTEXT_M = 'Material no.'.
WA_FIELDCAT-OUTPUTLEN = '18'.
WA_FIELDCAT-KEY = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 2.
WA_FIELDCAT-FIELDNAME = 'VBELN'.
WA_FIELDCAT-SELTEXT_M = 'Sales Doc no.'.
WA_FIELDCAT-OUTPUTLEN = '10'.
WA_FIELDCAT-KEY = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 3.
WA_FIELDCAT-FIELDNAME = 'MAT_DESC'.
WA_FIELDCAT-SELTEXT_M = 'Material Discription'.
WA_FIELDCAT-OUTPUTLEN = '40'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 4.
WA_FIELDCAT-FIELDNAME = 'SAL_DESC'.
WA_FIELDCAT-SELTEXT_M = 'Sales DiscrIption'.
WA_FIELDCAT-OUTPUTLEN = '40'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 5.
WA_FIELDCAT-FIELDNAME = 'QUANT'.
WA_FIELDCAT-SELTEXT_M = 'Quantity'.
WA_FIELDCAT-OUTPUTLEN = '12'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 6.
WA_FIELDCAT-FIELDNAME = 'PRICE'.
WA_FIELDCAT-SELTEXT_M = 'Price'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 7.
WA_FIELDCAT-FIELDNAME = 'C_DATE'.
WA_FIELDCAT-SELTEXT_M = 'Date Of Creation'.
WA_FIELDCAT-OUTPUTLEN = '8'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

ENDFORM.


FORM SAVE USING RCOMM TYPE SY-UCOMM
SEL TYPE SLIS_SELFIELD.

CASE SY-UCOMM.
WHEN '&amp;amp;DATA_SAVE'.
LOOP AT IT_SO INTO WA_SO.
CLEAR WA_CY.
READ TABLE IT_CY INTO WA_CY INDEX SY-TABIX.

IF WA_SO NE WA_CY.
WA_CY-MAT_DESC = WA_SO-MAT_DESC.
WA_CY-SAL_DESC = WA_SO-SAL_DESC.
WA_CY-QUANT = WA_SO-QUANT.

MODIFY ZMATERIAL_SALES FROM WA_CY.

IF SY-SUBRC = 0.
MESSAGE 'RECORD HAS BEEN SAVED SUCCESSFULY' TYPE 'S'.
ENDIF.
ENDIF.

CLEAR WA_SO.
ENDLOOP.

ENDCASE.
ENDFORM.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4. Error handling using message class code.&lt;/P&gt;&lt;P&gt;Firstly create msg class using se91 Tcode and then we can use in our code&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT4.

TABLES: BSEG,MSEG.

PARAMETERS C_CODE TYPE BSEG-BUKRS.

TYPES: BEGIN OF TY_BM,
BUKRS TYPE BSEG-BUKRS,
GJAHR TYPE BSEG-GJAHR,
MATNR TYPE BSEG-MATNR,
BELNR TYPE BSEG-BELNR,
MBLNR TYPE MSEG-MBLNR,
ZEILE TYPE MSEG-ZEILE,
END OF TY_BM.

DATA: IT_BM TYPE TABLE OF TY_BM,
WA_BM TYPE TY_BM.

DATA: IT_MSEG TYPE STANDARD TABLE OF MSEG,
WA_MSEG TYPE MSEG.

DATA: IT_BSEG TYPE STANDARD TABLE OF BSEG,
WA_BSEG TYPE BSEG.

DATA OBJ TYPE REF TO ZCX_K_ERRORHANDLE.

AT SELECTION-SCREEN.
TRY.
IF C_CODE IS NOT INITIAL.
SELECT GJAHR MATNR BELNR BUKRS FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BUKRS = C_CODE.

IF IT_BSEG IS NOT INITIAL.
SELECT MBLNR ZEILE FROM MSEG INTO CORRESPONDING FIELDS OF TABLE IT_MSEG FOR ALL ENTRIES IN IT_BSEG WHERE MBLNR = IT_BSEG-BELNR.
ENDIF.

IF IT_MSEG IS INITIAL.
RAISE EXCEPTION TYPE ZCX_K_ERRORHANDLE
EXPORTING
TEXTID = ZCX_K_ERRORHANDLE=&amp;gt;ZCX_K_ERRORHANDLE.
ENDIF.
ELSE.
RAISE EXCEPTION TYPE ZCX_K_ERRORHANDLE
EXPORTING
TEXTID = ZCX_K_ERRORHANDLE=&amp;gt;INPUT_ERROR.
ENDIF.

CATCH ZCX_K_ERRORHANDLE INTO OBJ.

MESSAGE OBJ TYPE 'E'.

ENDTRY.



CLASS LCL_MAIN DEFINITION.
PUBLIC SECTION.
METHODS : DISPLAY.


ENDCLASS.

CLASS LCL_MAIN IMPLEMENTATION.

METHOD DISPLAY.
DATA : LR_TABLE TYPE REF TO CL_SALV_TABLE.
CL_SALV_TABLE=&amp;gt;FACTORY( IMPORTING R_SALV_TABLE = LR_TABLE
CHANGING T_TABLE = IT_BM ).
LR_TABLE-&amp;gt;DISPLAY( ).
ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.

LOOP AT IT_BSEG INTO WA_BSEG.
READ TABLE IT_MSEG INTO WA_MSEG WITH KEY MBLNR = WA_BSEG-BELNR.

WA_BM-MATNR = WA_BSEG-MATNR.
WA_BM-BUKRS = WA_BSEG-BUKRS.
WA_BM-GJAHR = WA_BSEG-GJAHR.
WA_BM-BELNR = WA_BSEG-BELNR.
WA_BM-MBLNR = WA_MSEG-MBLNR.
WA_BM-ZEILE = WA_MSEG-ZEILE.
APPEND WA_BM TO IT_BM.
CLEAR WA_BM.

ENDLOOP.

DATA LR_MAIN TYPE REF TO LCL_MAIN.

CREATE OBJECT LR_MAIN.

LR_MAIN-&amp;gt;DISPLAY( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;5. Spool Generation code.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT5.

DATA: IT_MS LIKE ZMATERIAL_SALES OCCURS 0 WITH HEADER LINE,
C_DATE LIKE ZMATERIAL_SALES-C_DATE.

DATA: IT_SP LIKE ZSPOOLTABLE OCCURS 0 WITH HEADER LINE.

DATA: GD_SPOOL_NR LIKE TSP01-RQIDENT.

START-OF-SELECTION.

SELECT C_DATE FROM ZMATERIAL_SALES INTO CORRESPONDING FIELDS OF TABLE IT_MS.

DELETE ADJACENT DUPLICATES FROM IT_MS COMPARING C_DATE.

LOOP AT IT_MS.

CLEAR: C_DATE.

C_DATE = IT_MS-C_DATE.

WAIT UP TO 1 SECONDS.


PERFORM SUBMIT_PROGRAM.
PERFORM GET_SPOOL_NUMBER.
PERFORM ADD_SPOOL_NUMBER.

ENDLOOP.



FORM SUBMIT_PROGRAM .

SUBMIT ZASSESSMENT3 WITH DATE = C_DATE
TO SAP-SPOOL
WITHOUT SPOOL DYNPRO
AND RETURN.


ENDFORM. " SUBMIT_PROGRAM



FORM GET_SPOOL_NUMBER .

CLEAR GD_SPOOL_NR.
SELECT SINGLE RQIDENT INTO GD_SPOOL_NR FROM TSP01
WHERE RQCRETIME = ( SELECT MAX( RQCRETIME ) FROM TSP01 WHERE RQCLIENT = SY-MANDT
AND RQOWNER = SY-UNAME ).




ENDFORM. " GET_SPOOL_NUMBER



FORM ADD_SPOOL_NUMBER .

IT_SP-C_DATE = C_DATE.
IT_SP-SPOOL_NO = GD_SPOOL_NR.

APPEND IT_SP.

MODIFY ZSPOOLTABLE FROM IT_SP.
COMMIT WORK.

ENDFORM. " ADD_SPOOL_NUMBER&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;6. Selection Screen code for visibility of parameters according to requirements.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT7.

INCLUDE ZSELECTION_SCREEN.


**&amp;amp;---------------------------------------------------------------------*
**&amp;amp; Include ZSELECTION_SCREEN
**&amp;amp;---------------------------------------------------------------------*
*DATA: BELNR TYPE BSEG-BELNR,
* GJAHR TYPE BSEG-GJAHR,
* BUKRS TYPE BSEG-BUKRS.
*
*SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
* SELECT-OPTIONS: ACC_NO FOR BELNR NO INTERVALS NO-EXTENSION,
* F_YEAR FOR GJAHR MODIF ID P1 NO INTERVALS NO-EXTENSION,
* C_CODE FOR BUKRS MODIF ID P2 NO INTERVALS NO-EXTENSION.
*
* SELECTION-SCREEN SKIP 1.
*
* SELECTION-SCREEN BEGIN OF LINE.
*
*
* PARAMETERS C1 RADIOBUTTON GROUP RAD1 USER-COMMAND R1 DEFAULT 'X'.
* SELECTION-SCREEN COMMENT 3(26) TEXT-021.
* SELECTION-SCREEN POSITION 30.
* PARAMETERS C2 RADIOBUTTON GROUP RAD1.
* SELECTION-SCREEN COMMENT 32(29) TEXT-022.
* SELECTION-SCREEN END OF LINE.
*
* SELECTION-SCREEN SKIP 1.
*
* SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
* PARAMETERS: V2 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* PARAMETERS: V3 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* PARAMETERS: V4 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* SELECTION-SCREEN END OF BLOCK B2.
*
*SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-003.
* PARAMETERS: V5 AS CHECKBOX MODIF ID VW1.
*
* SELECTION-SCREEN END OF BLOCK B3.
*
* SELECTION-SCREEN END OF BLOCK B1.




AT SELECTION-SCREEN OUTPUT.

IF C1 = 'X'.
SET CURSOR FIELD 'C2'.
LOOP AT SCREEN.
IF SCREEN-GROUP1 = 'VW1'.
SCREEN-ACTIVE = '0'.

MODIFY SCREEN.
ENDIF.


IF V4 = 'X' AND ( V3 = 'X' OR V2 = 'X') .

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
IF SCREEN-GROUP1 = 'P1'.
SCREEN-ACTIVE = '1'.
MODIFY SCREEN.
ENDIF.


ELSEIF V4 = 'X'.

IF SCREEN-GROUP1 = 'P1'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '1'.
MODIFY SCREEN.

ENDIF.
ELSE.

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
ENDIF.
ENDLOOP.

ENDIF.

IF C2 = 'X'.
SET CURSOR FIELD 'C1'.
LOOP AT SCREEN.
IF SCREEN-GROUP1 = 'VW'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.
ENDIF.

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.
ENDIF.

ENDLOOP.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;7. Excel upload using&amp;nbsp;TEXT_CONVERT_XLS_TO_SAP&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT10.

DATA: IT_TAB TYPE STANDARD TABLE OF ZASSESS10.

DATA: WA_TAB TYPE ZASSESS10.

DATA IT_TYPE(4096) type c occurs 0.

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS: P_FILE TYPE RLGRAP-FILENAME.

SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM GET_FILE.


START-OF-SELECTION.

PERFORM EXCEL_TO_IT_TAB.
PERFORM UPLOAD_DATA.

END-OF-SELECTION.

FORM GET_FILE .

CALL FUNCTION 'F4_FILENAME' "POP UP FOR FETCH
EXPORTING
PROGRAM_NAME = SYST-CPROG
DYNPRO_NUMBER = SYST-DYNNR
* FIELD_NAME = ' '
IMPORTING
FILE_NAME = P_FILE
.

ENDFORM. " GET_FILE




FORM EXCEL_TO_IT_TAB .



CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
EXPORTING
* I_FIELD_SEPERATOR =
I_LINE_HEADER = 'X'
I_TAB_RAW_DATA = IT_TYPE
I_FILENAME = P_FILE
TABLES
I_TAB_CONVERTED_DATA = IT_TAB
EXCEPTIONS
CONVERSION_FAILED = 1
OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.




ENDFORM. " EXCEL_TO_IT_TAB




FORM UPLOAD_DATA .

LOOP AT IT_TAB INTO WA_TAB.

MODIFY ZASSESS10 FROM WA_TAB.
COMMIT WORK.
ENDLOOP.

ENDFORM. " UPLOAD_data&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8. Table Maintenance code for Create, display and update data without SM30 and excel upload of data to create data using FM 'ALSM_EXCEL_TO_INTERNAL_TABLE'&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ztable_update.

TYPES : BEGIN OF ty_ztable,
sel TYPE char1.
INCLUDE STRUCTURE ztable.
TYPES : END OF ty_ztable.

DATA : gs_ztable TYPE ty_ztable,
gt_file_data TYPE TABLE OF ztable,
gob_table TYPE REF TO cl_salv_table,
gt_ztable1 TYPE TABLE OF ztable,
gt_ztable TYPE TABLE OF ty_ztable,
gs_zzpp_ztable TYPE ztable,
gv_mark TYPE char01,
gv_field1 TYPE ztable-field1,
gv_field2 TYPE ztable-field2,
gv_field3 TYPE ztable-field3,
gt_excel TYPE TABLE OF alsmex_tabline.

DATA: gs_excel TYPE ole2_object, " Excel object
gs_mapl TYPE ole2_object, " list of workbooks
gs_map TYPE ole2_object, " workbook
gs_zl TYPE ole2_object, " cell
gs_f TYPE ole2_object, " font
gs_column TYPE ole2_object. " Column

CONTROLS: t_tab TYPE TABLEVIEW USING SCREEN 9000.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-501.
PARAMETERS : p_rb1 RADIOBUTTON GROUP grp1 DEFAULT 'X' USER-COMMAND usr1 MODIF ID r1,
p_rb2 RADIOBUTTON GROUP grp1 MODIF ID r1,
p_rb3 RADIOBUTTON GROUP grp1 MODIF ID r1.


SELECTION-SCREEN BEGIN OF BLOCK t11 WITH FRAME TITLE TEXT-502.
PARAMETERS : p_file1 TYPE rlgrap-filename MODIF ID z1.
SELECTION-SCREEN: BEGIN OF LINE,
PUSHBUTTON 1(24) TEXT-105 USER-COMMAND form MODIF ID z1,
END OF LINE.
SELECTION-SCREEN END OF BLOCK t11.


SELECTION-SCREEN BEGIN OF BLOCK t12 WITH FRAME TITLE TEXT-503.
SELECT-OPTIONS :so_pc1 FOR gv_field1 NO-EXTENSION NO INTERVALS MODIF ID z2 ,
so_fpc1 FOR gv_field3 NO-EXTENSION NO INTERVALS MODIF ID z2 ,
so_cc1 FOR gv_field2 NO-EXTENSION NO INTERVALS MODIF ID z2 .
SELECTION-SCREEN END OF BLOCK t12.

SELECTION-SCREEN BEGIN OF BLOCK t13 WITH FRAME TITLE TEXT-504.
SELECT-OPTIONS : so_pc2 FOR gv_field1 NO-EXTENSION NO INTERVALS MODIF ID z3,
so_fpc2 FOR gv_field3 NO-EXTENSION NO INTERVALS MODIF ID z3,
so_cc2 FOR gv_field2 NO-EXTENSION NO INTERVALS MODIF ID z3.
SELECTION-SCREEN END OF BLOCK t13.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF SCREEN 500 AS WINDOW.
SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE TEXT-008 .

SELECTION-SCREEN BEGIN OF LINE.
* YES
PARAMETERS p_y RADIOBUTTON GROUP rad2 USER-COMMAND r1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 3(10) TEXT-027.
SELECTION-SCREEN POSITION 15.
* NO
PARAMETERS p_n RADIOBUTTON GROUP rad2.
SELECTION-SCREEN COMMENT 18(10) TEXT-028.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b3.
SELECTION-SCREEN END OF SCREEN 500.

AT SELECTION-SCREEN.
IF sy-ucomm EQ 'FORM'.
PERFORM download_format.
ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file1.
PERFORM f4_filename USING p_file1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_pc1-low.
PERFORM Param_F4_help_pc USING so_pc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_fpc1-low.
PERFORM Param_F4_help_fpc USING so_fpc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_cc1-low.
PERFORM Param_F4_help_cc USING so_cc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_pc2-low.
PERFORM Param_F4_help_pc USING so_pc2-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_fpc2-low.
PERFORM Param_F4_help_fpc USING so_fpc2-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_cc2-low.
PERFORM Param_F4_help_cc USING so_cc2-low.

AT SELECTION-SCREEN OUTPUT.
LOOP AT SCREEN.
IF screen-group1 = 'Z1'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 1
WHEN p_rb2 = 'X' THEN 0
WHEN p_rb3 = 'X' THEN 0 ).
ENDIF.
IF screen-group1 = 'Z2'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 0
WHEN p_rb2 = 'X' THEN 1
WHEN p_rb3 = 'X' THEN 0 ).
ENDIF.
IF screen-group1 = 'Z3'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 0
WHEN p_rb2 = 'X' THEN 0
WHEN p_rb3 = 'X' THEN 1 ).
ENDIF.

IF screen-group1 = 'V0' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V1' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V2' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V3' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C0' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C1' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C2' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C3' .
screen-active = 0.
ENDIF.
MODIFY SCREEN.
ENDLOOP.

START-OF-SELECTION.
IF p_rb1 = 'X'.
PERFORM Create_data.

ELSEIF p_rb2 = 'X'.
PERFORM Update_data.

ELSEIF p_rb3 = 'X'.
PERFORM Display_data.
ENDIF.

END-OF-SELECTION.

FORM Create_data .

DATA: ls_temp_data TYPE ztable,
lt_temp_tab TYPE TABLE OF ztable,
lv_cont TYPE char1.

IF p_file1 IS NOT INITIAL.
IF ( p_file1 CP '*xls' OR p_file1 CP '*xlsx' ).
TRY.
CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
EXPORTING
filename = p_file1
i_begin_col = 1
i_begin_row = 2
i_end_col = '30'
i_end_row = '999999'
TABLES
intern = gt_excel
EXCEPTIONS
inconsistent_parameters = 1
upload_ole = 2
OTHERS = 3.
IF sy-subrc &amp;lt;&amp;gt; 0.
MESSAGE 'Excel File Conversion Error' TYPE 'S' DISPLAY LIKE 'E'.
EXIT.
ENDIF.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

LOOP AT gt_excel ASSIGNING FIELD-SYMBOL(&amp;lt;lfs_excel&amp;gt;).
IF ls_temp_data-field1 IS NOT INITIAL
AND ls_temp_data-field3 IS NOT INITIAL
AND ls_temp_data-field2 IS NOT INITIAL
AND &amp;lt;lfs_excel&amp;gt;-col &amp;lt;&amp;gt; 1
AND line_exists( lt_temp_tab[ field1 = ls_temp_data-field1
field3 = ls_temp_data-field3
field2 = ls_temp_data-field2 ] ).
MESSAGE |Duplicate Entry found in Excel at Row number : | &amp;amp;&amp;amp; |{ &amp;lt;lfs_excel&amp;gt;-row + 1 }| TYPE 'S' DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
CASE &amp;lt;lfs_excel&amp;gt;-col.
WHEN 1.
CLEAR ls_temp_data.
ls_temp_data-field1 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field1.
WHEN 2.
ls_temp_data-field3 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field3.
WHEN 3.
ls_temp_data-field2 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field2.
ENDCASE.
AT END OF row.
ls_temp_data-client = sy-mandt.
APPEND ls_temp_data TO lt_temp_tab.
ENDAT.
ENDLOOP.
ENDIF.

IF lt_temp_tab IS NOT INITIAL.
DELETE FROM ztable.
IF sy-subrc = 0.
COMMIT WORK.
ELSE.
ROLLBACK WORK.
ENDIF.
INSERT ztable FROM TABLE lt_temp_tab .
IF sy-subrc = 0.
COMMIT WORK.
MESSAGE 'Data inserted successfully' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not inserted' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ELSE.
MESSAGE 'Entry already exists' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ENDIF.

ENDFORM.


FORM Update_data .

SELECT *
FROM ztable
INTO CORRESPONDING FIELDS OF TABLE @gt_ztable
WHERE field1 IN _pc1
AND field3 IN _fpc1
AND field2 IN _cc1.

IF gt_ztable IS NOT INITIAL.
CALL SCREEN 9000.
ELSE.
MESSAGE 'No Data Found' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ENDFORM.


FORM Display_data .

SELECT *
FROM ztable
INTO TABLE (lt_ztable)
WHERE field1 IN _pc2
AND field3 IN _fpc2
AND field2 IN _cc2.

IF lt_ztable IS NOT INITIAL.
TRY.
CALL METHOD cl_salv_table=&amp;gt;factory
IMPORTING
r_salv_table = gob_table
CHANGING
t_table = lt_ztable.
CATCH cx_salv_msg .
ENDTRY.
CALL METHOD gob_table-&amp;gt;display.
ELSE.
MESSAGE 'No data found' TYPE 'S' DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDFORM.


FORM download_format .

CREATE OBJECT gs_excel 'EXCEL.APPLICATION'.
SET PROPERTY OF gs_excel 'Visible' = 1.
* get list of workbooks, initially empty
CALL METHOD OF
gs_excel
'Workbooks' = gs_mapl.
PERFORM err_hdl.

* add a new workbook
CALL METHOD OF
gs_mapl
'Add' = gs_map.
PERFORM err_hdl.

* Output column headings to active Excel sheet
PERFORM fill_cell USING 1 1 1 'Field 1' .
PERFORM fill_cell USING 1 2 1 'Field 2' .
PERFORM fill_cell USING 1 3 1 'Field 3' .

CALL METHOD OF
gs_excel
'Columns' = gs_column.

CALL METHOD OF
gs_column
'Autofit'.

CALL METHOD OF
gs_excel
'Worksheets' = gs_mapl.
PERFORM err_hdl.

SET PROPERTY OF gs_map 'NAME' = 'COPY'.

FREE OBJECT: gs_excel,
gs_mapl,
gs_map,
gs_zl,
gs_f,
gs_column.


ENDFORM.



FORM f4_filename USING p_file.
TRY.
CALL FUNCTION 'F4_FILENAME'
EXPORTING
field_name = 'P_FILE '
IMPORTING
file_name = p_file.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

ENDFORM.

FORM Param_F4_help_pc USING
p_so_pc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field1
FROM ztable
INTO TABLE (lt_value).

TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field1'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_pc = ls_return-fieldval.
ENDIF.
ENDFORM.

FORM Param_F4_help_Fpc USING
p_so_Fpc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field3
FROM ztable
INTO TABLE (lt_value).
TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field3'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.
READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_fpc = ls_return-fieldval.
ENDIF.
ENDFORM.

FORM Param_F4_help_cc USING
p_so_cc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field2
FROM ztable
INTO TABLE (lt_value).
TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field2'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.
READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_cc = ls_return-fieldval.
ENDIF.
ENDFORM.


FORM err_hdl .
IF sy-subrc &amp;lt;&amp;gt; 0.
MESSAGE 'Worksheet not created' TYPE 'S' DISPLAY LIKE 'E'.
STOP.
ENDIF.
ENDFORM.


FORM fill_cell USING i TYPE any
j TYPE any
bold TYPE any
val TYPE any.
CALL METHOD OF
gs_excel
'Cells' = gs_zl
EXPORTING
#1 = i
#2 = j.

PERFORM err_hdl.
SET PROPERTY OF gs_zl 'Value' = val.
PERFORM err_hdl.
GET PROPERTY OF gs_zl 'Font' = gs_f.
PERFORM err_hdl.
SET PROPERTY OF gs_f 'Bold' = bold.
PERFORM err_hdl.

ENDFORM.


MODULE status_9000 OUTPUT.
SET PF-STATUS 'PF_STATUS_9000'.
SET TITLEBAR 'TITLE1'.
ENDMODULE.


MODULE user_command_9000 INPUT.
CASE sy-ucomm.
WHEN 'BACK'.
LEAVE TO SCREEN 0.
WHEN 'CANCEL' OR 'EXIT'.
LEAVE PROGRAM.
WHEN 'SAVE'.
MOVE-CORRESPONDING gt_ztable TO gt_ztable1.
LOOP AT gt_ztable1 ASSIGNING FIELD-SYMBOL(&amp;lt;gfs_zrm&amp;gt;).
&amp;lt;gfs_zrm&amp;gt;-client = sy-mandt.
ENDLOOP.
UPDATE ztable FROM TABLE gt_ztable1.
IF sy-subrc = 0.
COMMIT WORK.
MESSAGE 'Data updated successfully' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not updated ' TYPE 'S'.
ENDIF.
WHEN '%DEL'.
IF line_exists( gt_ztable[ sel = 'X' ] ).
CALL SELECTION-SCREEN 500 STARTING AT 5 5.
IF sy-subrc = 0.
IF p_y = 'X'.
gt_ztable1 = VALUE #( FOR gs_z IN gt_ztable
WHERE ( sel = 'X' )
( CORRESPONDING #( gs_z ) ) ).
IF gt_ztable1 IS NOT INITIAL.
DELETE ztable FROM TABLE gt_ztable1 .
IF sy-subrc = 0.
COMMIT WORK.
DELETE gt_ztable WHERE sel = 'X'.
MESSAGE 'Selected Data deleted' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not deleted' TYPE 'S'.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
ELSE.
MESSAGE 'Select Data' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.

WHEN '%SEL'. "Select all
gs_ztable-sel = 'X'.
MODIFY gt_ztable FROM gs_ztable TRANSPORTING sel WHERE sel &amp;lt;&amp;gt; 'X'.

WHEN '%DSE'. "Deselect ALl
gs_ztable-sel = ' '.
MODIFY gt_ztable FROM gs_ztable TRANSPORTING sel WHERE sel = 'X'.

ENDCASE.
ENDMODULE.


MODULE t_tab_change_tc_attr OUTPUT.
DESCRIBE TABLE gt_ztable LINES t_tab-lines.
ENDMODULE.

MODULE t_tab_modify INPUT.
MODIFY gt_ztable
FROM gs_ztable
INDEX t_tab-current_line.
ENDMODULE.
Flow Logic - Screen 9000

PROCESS BEFORE OUTPUT.
MODULE t_tab_change_tc_attr.

LOOP AT gt_ztable
INTO gs_ztable
WITH CONTROL t_tab
CURSOR t_tab-current_line.
ENDLOOP.


MODULE status_9000.
*
PROCESS AFTER INPUT.
LOOP AT gt_ztable.
CHAIN.
FIELD gs_ztable-sel.
FIELD gs_ztable-field1.
FIELD gs_ztable-field2.
FIELD gs_ztable-field3.
MODULE t_tab_modify ON CHAIN-REQUEST.
ENDCHAIN.
ENDLOOP.

MODULE user_command_9000.
 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9. Send Mail with Excel and PDF attachments.&lt;/P&gt;&lt;P&gt;data declarations...&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: BEGIN OF PDF_OUTPUT OCCURS 0.
          INCLUDE STRUCTURE TLINE.
  DATA: END OF PDF_OUTPUT.

  DATA : I_RECLIST  LIKE SOMLRECI1.
  DATA : I_OBJTXT   LIKE SOLISTI1,
         I_OBJPACK  LIKE SOPCKLSTI1,
         I_OBJBIN   LIKE SOLISTI1,
         WA_OBJHEAD LIKE SOLISTI1.

  DATA : V_LINES_TXT LIKE SY-TABIX,
         V_LINES_BIN LIKE SY-TABIX,
         WA_DOC_CHNG LIKE SODOCCHGI1.
  DATA : T_OBJECTDATA LIKE CLOBJDAT ,
         TAB_CLASS LIKE SCLASS .
  DATA : SEND_REQUEST TYPE REF TO CL_BCS.
  DATA : TEXT TYPE BCSY_TEXT.
  DATA : DOCUMENT TYPE REF TO CL_DOCUMENT_BCS.
  DATA : RECIPIENT TYPE REF TO IF_RECIPIENT_BCS.
  DATA : SENDER TYPE REF TO CL_SAPUSER_BCS.
  DATA : BCS_EXCEPTION TYPE REF TO CX_BCS.
  DATA : SENT_TO_ALL TYPE OS_BOOLEAN.
  DATA : MSTR_PRINT_PARMS LIKE PRI_PARAMS.
  DATA : SOLI_TAB TYPE SOLI_TAB.
  DATA : E_XSTRING TYPE XSTRING.
  DATA : G_XSTRING TYPE XSTRING.
  DATA : LT_SOLIX TYPE SOLIX_TAB.
  DATA : BINARY_CONTENT TYPE SOLIX_TAB.
  DATA : LV_SUBJECT(50) TYPE C.
  DATA :  LV_SUBJ_FILE   TYPE SO_OBJ_DES .
  DATA : LT_ATT_HEAD    TYPE SOLI_TAB.
  DATA : LV_FILENAME    TYPE STRING.
  DATA : LV_TEXT_LINE    TYPE SOLI.
  DATA : CONTENT TYPE STRING.
  DATA : VAL TYPE STRING.

  DATA : GD_SPOOL_NR LIKE TSP01-RQIDENT,
         GD_BYTECOUNT LIKE TST01-DSIZE.

  DATA : IT_CONTENTS TYPE STANDARD TABLE OF SOLISTI1,
         WA_CONTENTS TYPE SOLISTI1.

* EXCEL
  DATA : MT_FCAT        TYPE LVC_T_FCAT,
         MT_DATA        TYPE REF TO DATA,
         M_FLAVOUR      TYPE STRING,
         M_VERSION      TYPE STRING,
         MO_RESULT_DATA TYPE REF TO CL_SALV_EX_RESULT_DATA_TABLE,
         MO_COLUMNS     TYPE REF TO CL_SALV_COLUMNS_TABLE,
         MO_AGGREG      TYPE REF TO CL_SALV_AGGREGATIONS,
         MO_SALV_TABLE  TYPE REF TO CL_SALV_TABLE,
         M_FILE_TYPE    TYPE SALV_BS_CONSTANT.
  FIELD-SYMBOLS : &amp;lt;TAB&amp;gt; TYPE ANY TABLE.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I. Create Excel&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;GET REFERENCE OF IT_EXCEL INTO mt_data. "IT_EXCEL consists of data which need to in excel

*if we didn't pass fieldcatalog we need to create it
  ASSIGN mt_data-&amp;gt;* TO &amp;lt;tab&amp;gt;.
  TRY .
      cl_salv_table=&amp;gt;factory(
      EXPORTING
      list_display = abap_false
      IMPORTING
      r_salv_table = mo_salv_table
      CHANGING
      t_table      = &amp;lt;tab&amp;gt; ).
    CATCH cx_salv_msg.

  ENDTRY.

  "get colums &amp;amp; aggregation infor to create fieldcat
  mo_columns  = mo_salv_table-&amp;gt;get_columns( ).
  mo_aggreg   = mo_salv_table-&amp;gt;get_aggregations( ).
  mt_fcat     =  cl_salv_controller_metadata=&amp;gt;get_lvc_fieldcatalog(
    r_columns      = mo_columns
    r_aggregations = mo_aggreg ).

  IF cl_salv_bs_a_xml_base=&amp;gt;get_version( ) EQ
  if_salv_bs_xml=&amp;gt;version_25 OR
  cl_salv_bs_a_xml_base=&amp;gt;get_version( ) EQ
  if_salv_bs_xml=&amp;gt;version_26.



    mo_result_data = cl_salv_ex_util=&amp;gt;factory_result_data_table(
    r_data                      = mt_data
*        s_layout                    = is_layout
    t_fieldcatalog              = mt_fcat
*        t_sort                      = it_sort
*        t_filter                    = it_filt
    ).

    CASE cl_salv_bs_a_xml_base=&amp;gt;get_version( ).
      WHEN if_salv_bs_xml=&amp;gt;version_25.
        m_version = if_salv_bs_xml=&amp;gt;version_25.
      WHEN if_salv_bs_xml=&amp;gt;version_26.
        m_version = if_salv_bs_xml=&amp;gt;version_26.
    ENDCASE.

    m_file_type = if_salv_bs_xml=&amp;gt;C_TYPE_EXCEL_XML.

    m_flavour = if_salv_bs_c_tt=&amp;gt;c_tt_xml_flavour_export.


    "transformation of data to excel
    CALL METHOD cl_salv_bs_tt_util=&amp;gt;if_salv_bs_tt_util~transform
      EXPORTING
        xml_type      = m_file_type
        xml_version   = m_version
        r_result_data = mo_result_data
        xml_flavour   = m_flavour
        gui_type      = if_salv_bs_xml=&amp;gt;c_gui_type_gui
      IMPORTING
        xml           = g_xstring.
  ENDIF.


  CALL METHOD cl_bcs_convert=&amp;gt;xstring_to_solix
    EXPORTING
      iv_xstring = g_xstring
    RECEIVING
      et_solix   = binary_content.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;II. Create PDF&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*for fetching print parameters and then changing according to file format
  CALL FUNCTION 'GET_PRINT_PARAMETERS'
    EXPORTING
      NO_DIALOG      = 'X'
    IMPORTING
      OUT_PARAMETERS = MSTR_PRINT_PARMS.

  MSTR_PRINT_PARMS-PAART = 'X_65_230'.

*Submit ZProgram whose output should be the content need to be in PDF
*for creating spool
  SUBMIT ZPROGRAM  WITH C_CODE = C_CODE
                          WITH C_NAME = C_NAME
  TO SAP-SPOOL
   SPOOL PARAMETERS MSTR_PRINT_PARMS
   WITHOUT SPOOL DYNPRO
   AND RETURN.

  CLEAR GD_SPOOL_NR.

*fetching spool id
  SELECT SINGLE RQIDENT INTO GD_SPOOL_NR  FROM TSP01
        WHERE RQCRETIME = ( SELECT MAX( RQCRETIME ) FROM TSP01 WHERE RQCLIENT = SY-MANDT
      AND RQOWNER = SY-UNAME ).

*converting spool content into pdf
  CLEAR :GD_BYTECOUNT .
  CALL FUNCTION 'CONVERT_ABAPSPOOLJOB_2_PDF'
    EXPORTING
      SRC_SPOOLID              = GD_SPOOL_NR
      NO_DIALOG                = ' '
    IMPORTING
      PDF_BYTECOUNT            = GD_BYTECOUNT
    TABLES
      PDF                      = PDF_OUTPUT
    EXCEPTIONS
      ERR_NO_ABAP_SPOOLJOB     = 1
      ERR_NO_SPOOLJOB          = 2
      ERR_NO_PERMISSION        = 3
      ERR_CONV_NOT_POSSIBLE    = 4
      ERR_BAD_DESTDEVICE       = 5
      USER_CANCELLED           = 6
      ERR_SPOOLERROR           = 7
      ERR_TEMSEERROR           = 8
      ERR_BTCJOB_OPEN_FAILED   = 9
      ERR_BTCJOB_SUBMIT_FAILED = 10
      ERR_BTCJOB_CLOSE_FAILED  = 11
      OTHERS                   = 12.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* convert attachment
  CALL FUNCTION 'SX_TABLE_LINE_WIDTH_CHANGE'
    TABLES
      CONTENT_IN  = PDF_OUTPUT
      CONTENT_OUT = SOLI_TAB
    EXCEPTIONS
      OTHERS      = 4.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
    EXPORTING
      INPUT_LENGTH = GD_BYTECOUNT
    IMPORTING
      BUFFER       = E_XSTRING
    TABLES
      BINARY_TAB   = SOLI_TAB
    EXCEPTIONS
      OTHERS       = 2.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LT_SOLIX = CL_DOCUMENT_BCS=&amp;gt;XSTRING_TO_SOLIX( IP_XSTRING = E_XSTRING ).
"LT_SOLIX is the string format of pdf which is use in attachment of mail&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;III. Send Mail&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;Try.
* create persistent send request
      SEND_REQUEST = CL_BCS=&amp;gt;CREATE_PERSISTENT( ).

* create and set document
      CLEAR: TEXT, TEXT[], CONTENT, LV_SUBJECT.

* Email Subject
      CLEAR: LV_SUBJECT.

        LV_SUBJECT =  'Subject of the mail.'.

      CLEAR: LV_SUBJ_FILE.
        lV_SUBJ_FILE = 'File_name'

* Body
      CLEAR : IT_CONTENTS[].

  "email body
  WA_CONTENTS-LINE = 'Greetings,'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.

  WA_CONTENTS-LINE = 'This is the mail body'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.
  
  APPEND WA_CONTENTS TO IT_CONTENTS.
  WA_CONTENTS-LINE = 'Thanks'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.
  
      DOCUMENT = CL_DOCUMENT_BCS=&amp;gt;CREATE_DOCUMENT(
      I_TYPE = 'HTM'
      I_TEXT = IT_CONTENTS
      I_SUBJECT = LV_SUBJECT ).

* add document to send request
      CALL METHOD SEND_REQUEST-&amp;gt;SET_DOCUMENT( DOCUMENT ).

** add attachment for pdf
      TRY.
          CALL METHOD DOCUMENT-&amp;gt;ADD_ATTACHMENT
            EXPORTING
              I_ATTACHMENT_TYPE    = 'PDF'
              I_ATTACHMENT_SUBJECT = LV_SUBJ_FILE
              I_ATT_CONTENT_HEX    = LT_SOLIX.
        CATCH cx_document_bcs.
      ENDTRY.


* add attachment for excel

      TRY.
          CALL METHOD DOCUMENT-&amp;gt;ADD_ATTACHMENT(
            i_attachment_type = 'XLS'
            i_attachment_subject = LV_SUBJ_FILE
            i_att_content_hex = binary_content ).
        CATCH cx_document_bcs.
      ENDTRY.


      data : MAIL_TO  TYPE AD_SMTPADR.

    
* create recipient (e-mail address)

            CLEAR: MAIL_TO.
            MAIL_TO = 'abc@xyz.com'.

            RECIPIENT = CL_CAM_ADDRESS_BCS=&amp;gt;CREATE_INTERNET_ADDRESS(
            MAIL_TO ).


*   add recipient with its respective attributes to send request
            CALL METHOD SEND_REQUEST-&amp;gt;ADD_RECIPIENT
              EXPORTING
                I_RECIPIENT = RECIPIENT
                I_EXPRESS   = 'X'.
*            i_copy      = 'X'.

* If wants to add CC mail id
            CLEAR: MAIL_TO.
            MAIL_TO = 'cc@xyz.com'.


            RECIPIENT = CL_CAM_ADDRESS_BCS=&amp;gt;CREATE_INTERNET_ADDRESS(
            MAIL_TO ).


*   add recipient with its respective attributes to send request
            CALL METHOD SEND_REQUEST-&amp;gt;ADD_RECIPIENT
              EXPORTING
                I_RECIPIENT = RECIPIENT
*            I_EXPRESS   = 'X'.
                i_copy      = 'X'.
         

* send document
      CALL METHOD SEND_REQUEST-&amp;gt;SEND(
      EXPORTING
      I_WITH_ERROR_SCREEN = 'X'
      RECEIVING
      RESULT = SENT_TO_ALL ).

      COMMIT WORK.

      MESSAGE 'Mail Send Successfully' TYPE 'S'.

      DATA:   BCS_EXCEPTION TYPE REF TO CX_BCS.

    CATCH CX_BCS INTO BCS_EXCEPTION.
      MESSAGE 'Mail Not sent' TYPE 'E'.


  ENDTRY.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/basic-code-s-of-abap/ba-p/14231152"/>
    <published>2025-09-30T06:38:10.002000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-28/ba-p/14231467</id>
    <title>Customer &amp; Partner Roundtable for SAP BTP ABAP Environment #28</title>
    <updated>2025-09-30T11:14:17.098000+02:00</updated>
    <author>
      <name>iwona_hahn</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4326</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1860394371" id="toc-hId-1890871559"&gt;&lt;STRONG&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;The call for contributions for one of the upcoming roundtables is open!&amp;nbsp;&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;If you want to show a demo or share a use case scenario for SAP BTP ABAP Environment, send us an&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="mailto:sap_btp_abap_environment@sap.com" target="_blank" rel="noopener nofollow noreferrer"&gt;email&lt;/A&gt;&amp;nbsp;and we will get back to you.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1534798147" id="toc-hId-1565275335"&gt;Introduction&lt;/H2&gt;&lt;DIV&gt;&lt;SPAN class=""&gt;A&lt;/SPAN&gt;&lt;SPAN class=""&gt;s&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;A href="https://www.sap.com/products/technology-platform/abap/environment.html" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN class=""&gt;SAP&amp;nbsp;BTP&amp;nbsp;ABAP&amp;nbsp;environment (aka Steampunk)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/A&gt;and ABAP Cloud&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;became&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;more popular&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;inside and outside of SAP, there is a high demand for rolling out the latest product news and updates, asking questions, and showing demos.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;&lt;/SPAN&gt;&amp;nbsp;You can find the slides presented, recordings, and further references from the previous roundtables in this&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/iwonahahn/SAP-BTP-ABAP-Environment-Roundtable/tree/main" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub repository&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_0-1751374366410.jpeg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281320iF5290A011527C9B9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_0-1751374366410.jpeg" alt="iwona_hahn_0-1751374366410.jpeg" /&gt;&lt;/span&gt;&lt;H2 id="toc-hId-1338284642" id="toc-hId-1368761830"&gt;Meeting Information&lt;BR /&gt;&lt;BR /&gt;&lt;/H2&gt;&lt;STRONG&gt;When:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;October 30&lt;/SPAN&gt;&lt;/STRONG&gt;, 2:00 - 3:00 PM CEST&amp;nbsp; – &lt;A href="https://sap-se.zoom.us/meeting/register/BNTQg36rTgWstLMzArws0g" target="_blank" rel="noopener nofollow noreferrer"&gt;Zoom Meeting&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(&lt;STRONG&gt;please register&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in advance)&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Who:&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;All interested&amp;nbsp;&lt;STRONG&gt;customers, partners,&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;stakeholders&lt;/STRONG&gt;&amp;nbsp;are invited to join this roundtable&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BTP ABAP team&lt;/STRONG&gt;:&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4296" target="_blank"&gt;Frank Jentsch&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(Product Lead for SAP BTP ABAP&amp;nbsp;Environment)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4326" target="_self"&gt;&lt;SPAN class=""&gt;Iwona Hahn&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(Product Management)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Jan Ole Skirke (Development Expert)&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Preliminary Agenda:&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;Product update for SAP BTP ABAP Environment&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Downtime-optimized hotfix collection updates for SAP BTP ABAP Environment &lt;STRONG&gt;including demo&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Q&amp;amp;A&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;SPAN&gt;Looking forward to meeting you!&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;A href="https://sap-se.zoom.us/meeting/register/BNTQg36rTgWstLMzArws0g" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_1-1751374366424.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281321i39537B5D388BE6C4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_1-1751374366424.png" alt="iwona_hahn_1-1751374366424.png" /&gt;&lt;/span&gt;&lt;/A&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Check out our&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://pages.community.sap.com/topics/btp-abap-environment" target="_blank" rel="noopener noreferrer"&gt;SAP Business Technology ABAP Environment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;page in SAP Community&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;product&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;updates&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;upcoming events.&lt;/SPAN&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-28/ba-p/14231467"/>
    <published>2025-09-30T11:14:17.098000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-based-on-grouping-tax-number-is-mandatory/ba-p/14231728</id>
    <title>SAP MDG: Based on Grouping, Tax Number is Mandatory</title>
    <updated>2025-09-30T15:37:27.383000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note: This blog does not include execution screenshots.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in &lt;STRONG&gt;SAP Master Data Governance (MDG) to make the Tax Number field mandatory for specific Groupings. The logic is implemented using the enhancement framework via BADI: &lt;CODE&gt;USMD_RULE_SERVICE, specifically through the method CHECK_ENTITY.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite: A working knowledge of BADI &lt;CODE&gt;USMD_RULE_SERVICE and ABAP development is required to follow this implementation.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;!--   StartFragment    --&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Development Details&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Target Groupings: &lt;CODE&gt;ZSGP, ZSGC&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Class: &lt;CODE&gt;ZMDGS_MSG_CLASS&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Number: &lt;CODE&gt;001&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Type: &lt;CODE&gt;E&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Text: &lt;CODE&gt;Tax Number is Mandatory !!!&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BADI Method Implemented: &lt;CODE&gt;IF_EX_USMD_RULE_SERVICE~CHECK_ENTITY&amp;nbsp;&lt;/CODE&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;The validation logic is written directly in the method &lt;CODE&gt;CHECK_ENTITY&lt;/CODE&gt;&lt;P&gt;&lt;!--   EndFragment    --&gt;&lt;/P&gt;&lt;P&gt;This ensures that when the specified groupings are selected, the system enforces the presence of a Tax Number and raises a custom message if it's missing.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD if_ex_usmd_rule_service~check_entity.
    CALL METHOD io_model-&amp;gt;read_entity_data_all
      EXPORTING
        i_fieldname    = 'BP_HEADER'            
        if_active      = abap_false            
        i_crequest     = id_crequest            " Change Request
      IMPORTING
        et_data_entity = DATA(lt_data).        " Data for Entity Types
    .
    READ TABLE lt_data INTO DATA(ls_data) WITH KEY usmd_entity = 'BP_HEADER' usmd_entity_cont = ' ' struct = 'KATTR'.
    ASSIGN ls_data-r_t_data-&amp;gt;* TO FIELD-SYMBOL(&amp;lt;lt_data&amp;gt;).
    LOOP AT &amp;lt;lt_data&amp;gt; ASSIGNING FIELD-SYMBOL(&amp;lt;ls_data&amp;gt;).
      ASSIGN COMPONENT 'BU_GROUP' OF STRUCTURE &amp;lt;ls_data&amp;gt; TO FIELD-SYMBOL(&amp;lt;lv_group&amp;gt;).
      IF &amp;lt;lv_group&amp;gt; IS ASSIGNED AND
         &amp;lt;lv_group&amp;gt; EQ 'ZSGP' OR
         &amp;lt;lv_group&amp;gt; EQ 'ZSGC'.
        READ TABLE lt_data INTO ls_data WITH KEY usmd_entity = 'BP_HEADER' usmd_entity_cont = 'BP_TAXNUM' struct = 'KATTR'.
        IF sy-subrc &amp;lt;&amp;gt; 0.
          et_message = VALUE #( ( msgid = 'ZMDGS_MSG_CLASS' msgty = 'E' msgno = '001' ) ).
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-based-on-grouping-tax-number-is-mandatory/ba-p/14231728"/>
    <published>2025-09-30T15:37:27.383000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-no-special-characters-in-account-holder-field/ba-p/14232445</id>
    <title>SAP MDG: Validation - No Special Characters in Account Holder Field</title>
    <updated>2025-10-01T11:30:00.034000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;Hi&lt;STRONG&gt; SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01: This blog does not include execution screenshots.&lt;BR /&gt;Note 02: The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in SAP Master Data Governance (MDG) to restrict the use of special characters in the Account Holder field. The validation logic is implemented using the enhancement framework via BADI: &lt;STRONG&gt;&lt;CODE&gt;USMD_RULE_SERVICE, specifically through the method CHECK_ENTITY. This ensures data consistency and compliance with formatting standards during master data creation and change processes.&lt;/CODE&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisite: A working knowledge of BADI&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;USMD_RULE_SERVICE and ABAP development is required to follow this implementation.&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Development Details&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Message Class:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;ZMDGS_MSG_CLASS&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Number:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;002&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Type:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;E&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Message Text:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;The Account Holder field must not contain any special characters&lt;BR /&gt;&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BADI Method Implemented:&lt;SPAN&gt;&amp;nbsp;&lt;CODE&gt;IF_EX_USMD_RULE_SERVICE~CHECK_ENTITY&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;The validation logic is written directly in the method&amp;nbsp;CHECK_ENTITY&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;P&gt;This ensures that when the Account Holder field is entered, the system validates the content to ensure it does not contain any special characters, and raises a custom message if invalid characters are found&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; METHOD if_ex_usmd_rule_service~check_entity.
   DATA: lt_data        TYPE usmd_ts_data_entity,
         lt_bank_data   TYPE REF TO data,
         lt_msg         TYPE usmd_t_message,
         ls_msg         TYPE usmd_s_message,
         lv_fieldname   TYPE bu_koinh,
         lv_acc_holder TYPE char20.
   FIELD-SYMBOLS:
     &amp;lt;lt_bank&amp;gt;        TYPE SORTED TABLE,
     &amp;lt;ls_bank&amp;gt;        TYPE any,
     &amp;lt;lv_acc_holder&amp;gt; TYPE any.
   io_model-&amp;gt;get_changed_fields(
     IMPORTING	
       et_entity_fieldname =  DATA(lt_fieldname)               
   )
   .
   LOOP AT lt_fieldname INTO DATA(ls_fieldname).
     lv_fieldname = ls_fieldname-fieldname.
     IF lv_fieldname = 'KOINH'.
       lv_acc_holder = lv_fieldname.
     ENDIF.
   ENDLOOP.
   IF lv_acc_holder = 'KOINH'.
     io_model-&amp;gt;read_entity_data_all(
      EXPORTING
        i_fieldname      =       'BP_HEADER'           " Financial MDM: Field Name
        if_active        =         abap_false          " Financial MDM: General Indicator
    i_crequest       =            id_crequest          " Change Request
      IMPORTING
    et_message       =        lt_msg          " Messages
        et_data_entity   =      lt_data            " Data for Entity Types
    ).
     lt_bank_data = VALUE #( lt_data[ usmd_entity = 'BP_HEADER' usmd_entity_cont = 'BP_BKDTL' struct = 'KATTR' ]-r_t_data  OPTIONAL ).
     IF lt_bank_data IS NOT INITIAL.
       ASSIGN lt_bank_data-&amp;gt;* TO &amp;lt;lt_bank&amp;gt;.
       IF &amp;lt;lt_bank&amp;gt; IS ASSIGNED.
         LOOP AT &amp;lt;lt_bank&amp;gt; ASSIGNING &amp;lt;ls_bank&amp;gt;.
           ASSIGN COMPONENT 'KOINH' OF STRUCTURE &amp;lt;ls_bank&amp;gt; TO &amp;lt;lv_acc_holder&amp;gt;.
           IF &amp;lt;lv_acc_holder&amp;gt; IS ASSIGNED AND
              &amp;lt;lv_acc_holder&amp;gt; IS NOT INITIAL AND                        
             &amp;lt;lv_acc_holder&amp;gt; CA '~`!@#$%^&amp;amp;*()-_+={}[]|\:;"&amp;lt;,&amp;gt;.?/'.
             et_message = VALUE #( BASE et_message ( fieldname = 'KOINH' msgid = 'ZMDGS_MESSAGE_CLS' msgno = '002' msgty = 'E' ) ).
           ENDIF.
         ENDLOOP.
       ENDIF.
     ENDIF.
   ENDIF.
 ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-no-special-characters-in-account-holder-field/ba-p/14232445"/>
    <published>2025-10-01T11:30:00.034000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-cds-based-analytical-models-with-the-relation-explorer-analytical/ba-p/14229070</id>
    <title>Exploring CDS based Analytical Models with the Relation Explorer - analytical view/perspective</title>
    <updated>2025-10-01T16:39:40.313000+02:00</updated>
    <author>
      <name>martin_mayer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191669</uri>
    </author>
    <content>&lt;P&gt;Relation explorer &lt;STRONG&gt;analytical view / analytical perspective&lt;/STRONG&gt; makes it easy to get an&amp;nbsp;overview of the analytical model with very less clicks.&amp;nbsp;No need to open all the views to understands details.&lt;/P&gt;&lt;P&gt;We start small , looking to a branch of a star schema , &lt;STRONG&gt;dimension&lt;/STRONG&gt; Connection (&amp;nbsp;/DMO/ANA_I_Connection ) which is part of the flight data model.&amp;nbsp; After calling the relation explorer we see the Relation Explorer Tab in the below section of the screenshot.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1759323592595.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322013iB6966D0C878BC05F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="martin_mayer_1-1759323592595.png" alt="martin_mayer_1-1759323592595.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Relation Explorer tab shows:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;in the left pane the associations from the dimension to other CDS views &lt;U&gt;over all levels&lt;/U&gt; are&amp;nbsp;visualizes . It starts fully expanded!&lt;BR /&gt;next to the CDS view name we see the view type. E.g. /DMO/ANA_I_CARRIER is of type [Dimension]&lt;/LI&gt;&lt;LI&gt;in the right pane one can see all the elements of current view. As&amp;nbsp;/DMO/ANA_I_Connection is selected all elements of this dimension are displayed.&lt;UL&gt;&lt;LI&gt;One can select (single click) any other view e.g. /DMO/ANA_I_CARRIER and the right pane get updated with the elements of that view.&lt;/LI&gt;&lt;LI&gt;double clicking the view will directly open the view&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;the right pane displays all elements grouped by roles.&lt;UL&gt;&lt;LI&gt;In this example we have 2 keys and e.g. expanding AirlineID show label and additional details about association and InfoObject. In case of compounded parent we would have seen the Parent element.&lt;/LI&gt;&lt;LI&gt;double clicking AirlineID highlight the element in the source ( see line 21 )&lt;/LI&gt;&lt;LI&gt;[Text] gives a hint that AirlineID has text,&amp;nbsp;this is missing for ConnetionID -&amp;gt; no Text supported&lt;/LI&gt;&lt;LI&gt;Attributes list all dimension attributes. Last one, DistanceUnit is a Unit element.&lt;/LI&gt;&lt;LI&gt;the Unit group show all unit related elements.&lt;/LI&gt;&lt;LI&gt;other group are shown if relevant.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;One can also start the analytical Relation Explorer based on query or cube view.&lt;BR /&gt;In both cases the cube view is opened and visualizes the cube with all associations .&lt;/P&gt;&lt;P&gt;We change focus and look to the example of a &lt;STRONG&gt;query&lt;/STRONG&gt;&amp;nbsp;- starting relation explorer shows the cube definition including dimension Connection from above.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_0-1759325206609.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322016i9D9521200352EC39/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="martin_mayer_0-1759325206609.png" alt="martin_mayer_0-1759325206609.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;with one view&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;in the left pane we get all associations visualizes. View names are shown with the view types&lt;/LI&gt;&lt;LI&gt;in the right pane we can see all 13 dimensions of the cube and get if dimension support Text, have Attributes or Hierarchies&lt;UL&gt;&lt;LI&gt;from 1st screenshot we already know that Text, Attributes and Hierarchies are available for AirlineID&lt;/LI&gt;&lt;LI&gt;expanding ConnectionID show that it is compounded to AirlineID&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;we see all 5 measures with additional details like aggregation method and unit&lt;/LI&gt;&lt;LI&gt;with " Units (2) " we see the unit related dimensions. This section only list those dimension that are unit relevant.&amp;nbsp; Expanding the dimension like CurrencyCode lists all related measures.&amp;nbsp;&lt;BR /&gt;( Both dimension are also listed in dimension section. )&lt;/LI&gt;&lt;LI&gt;for time based dimension one can directly understand the base dimension and wherefrom it is derived without looking into the source ( see below snippet with FiscalYearMonth )&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_0-1759322874979.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322010i53240695CD5E5697/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="martin_mayer_0-1759322874979.png" alt="martin_mayer_0-1759322874979.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;How to start the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-development-tools-user-guide/relation-explorer" target="_self" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Relation Explorer&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1758891540834.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320499i4A0D737B505A0062/image-size/medium?v=v2&amp;amp;px=400" role="button" title="martin_mayer_1-1758891540834.png" alt="martin_mayer_1-1758891540834.png" /&gt;&lt;/span&gt;call relation explorer to see the view&lt;/P&gt;&lt;P&gt;right click somewhere in the CDS view&amp;nbsp;&lt;/P&gt;&lt;P&gt;(&amp;nbsp;in case of CDS view type cube, dimension or query the analytical view is the default view )&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;If the view is not shown, choose &lt;STRONG&gt;Configure Context&lt;/STRONG&gt; and activate it.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;one can switch any time to different perspective / context if needed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="martin_mayer_1-1759325661029.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322021i11B35C6E5358E291/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="martin_mayer_1-1759325661029.png" alt="martin_mayer_1-1759325661029.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Release Info:&lt;/STRONG&gt;&amp;nbsp; analytical view / analytical perspective started with&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;BW/4HANA 2023 FP 04&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;S/4HANA Public Cloud and Privat Cloud OP2023&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-cds-based-analytical-models-with-the-relation-explorer-analytical/ba-p/14229070"/>
    <published>2025-10-01T16:39:40.313000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-notes-mandatory/ba-p/14232849</id>
    <title>SAP MDG: Validation - Notes Mandatory</title>
    <updated>2025-10-01T17:58:56.527000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi&amp;nbsp;SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01: This blog does not include execution screenshots.&lt;BR /&gt;Note 02: The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;!--  StartFragment   --&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post outlines a custom development approach in SAP Master Data Governance (MDG) to enforce mandatory entry of &lt;EM&gt;Notes&lt;/EM&gt; during master data processes. The validation logic is implemented using the enhancement framework via:&lt;BR /&gt;&lt;STRONG&gt;BADI:&lt;CODE&gt;USMD_RULE_SERVICE&lt;/CODE&gt;&lt;/STRONG&gt;, specifically through the method&amp;nbsp;&lt;STRONG&gt;&lt;CODE&gt;CHECK_ENTITY&lt;/CODE&gt;&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This ensures that users provide the required notes, thereby improving data completeness, auditability, and compliance during master data creation and change activities.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA:
  lv_cr_number TYPE usmd_crequest,
  lv_crtype    TYPE usmd_crequest_type,
  lv_process   TYPE usmd_process.

DATA(lo_context) = cl_usmd_app_context=&amp;gt;get_context( ).

IF lo_context IS BOUND.
  CALL METHOD lo_context-&amp;gt;get_attributes
    IMPORTING
      ev_crequest_id   = lv_cr_number
      ev_crequest_type = lv_crtype
      ev_process       = lv_process.
ENDIF.

IF lv_crtype EQ 'ZSUCRTYPE'.
  DATA(lv_s_notes) = cl_usmd_conv_som_gov_api=&amp;gt;get_instance( )-&amp;gt;get_notes( ).
       IF lv_s_notes IS INITIAL.
          APPEND cl_usmd_message=&amp;gt;convert_text2message(
          EXPORTING
          iv_message_text = 'Please Maintain Notes, It''s Mandatory !!!'.
          iv_message_type = 'E' ) to et_message.
       ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;!--  EndFragment   --&gt;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-validation-notes-mandatory/ba-p/14232849"/>
    <published>2025-10-01T17:58:56.527000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/rap-using-custom-entity-with-load-multiple-data-using-pagination-and/ba-p/14233901</id>
    <title>RAP Using Custom Entity with load multiple data using Pagination and Preview using UI annotations</title>
    <updated>2025-10-03T06:01:53.175000+02:00</updated>
    <author>
      <name>RakeshZore</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1759317</uri>
    </author>
    <content>&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This blog covers RAP development using a custom entity, showcasing data with UI annotations, and surpassing the standard SAP data preview limit through the use of pagination.&lt;/P&gt;&lt;P&gt;Lets Start....&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create a custom entity with the fields that need to be displayed or sent to the frontend.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Custom entity for fetching data'
@ObjectModel.query.implementedBy: 'ABAP:ZCL_IMPLEMENT_EXT' //This is the class where the data is handle and processed
@UI:{ headerInfo:{  typeName: 'RAP Learn',
                             typeNamePlural: 'RAP Learn',
                             title: { label: 'RAP Learn',
                                       type: #STANDARD,
                                       value: 'component'
                                     },
                             description: { value: 'obj_desc' },
                                     typeImageUrl: 'sap-icon://activity-items' //Show Icon image on header of object layout
                           }
               }
@Search.searchable: true //for Searching the data from the output which is also need to implement in the implemented class above 
define root custom entity ZCE_MAIN
{
      .facet   : [{
                      id: 'ID1',
                      purpose: #STANDARD,
                      type: #IDENTIFICATION_REFERENCE,
                      label : 'Component detail',
                      position: 10
                    },
                    {
                id: 'FG1',
                purpose: #STANDARD,
                type: #FIELDGROUP_REFERENCE,
                label : 'Validity Date',
                targetQualifier: 'FG1',
                position: 10
              }]
               : {  selectionField: [{ position: 10 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                            entity : { name: 'ZIV_F4MATNR' , element: 'matnr'   } ,
                            additionalBinding: [{ localElement: 'werks', element: 'werks' },
                                                         {  localElement: 'stlan' , element: 'stlan' },
                                                         {  localElement: 'stlal' , element: 'stlal' }]}]
      @Consumption.filter.selectionType: #SINGLE
  key matnr       : matnr;
               : {  selectionField: [{ position: 20 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                      entity : { name: 'ZIV_F4WERKS', element: 'werks' }
                                                         }]
      @Consumption.filter.selectionType: #SINGLE
  key werks       : werks_d;
               : {  selectionField: [{ position: 30 }]}
      @Consumption.filter.mandatory: true
      @Consumption.valueHelpDefinition: [{
                entity : { name: 'ZIV_F4STLAN' , element: 'stlan' }
                                                   }]
      @Consumption.filter.selectionType: #SINGLE
  key stlan       : stlan;
               : {  selectionField: [{ position: 40 }]}
      @Consumption.filter.mandatory: true
      @Consumption.filter.selectionType: #SINGLE
  key stlal       : stlal;
               : { lineItem: [{ position: 10 }], identification: [{ position: 10 }]}
      @EndUserText.label: 'Level'
  key bom_level   : abap.dec( 2, 0 );
               : { lineItem: [{ position: 20 }], identification: [{ position: 20 }]}
      @EndUserText.label: 'Component'
      .defaultSearchElement: true
  key component   : idnrk;
               : {  selectionField: [{ position: 50 }]}
      @Consumption.filter.mandatory: true
      @Consumption.filter.selectionType: #SINGLE
      @EndUserText.label: 'Date'
      zdate       : abap.dats;
               : { lineItem: [{ position: 30, cssDefault: { width: '13rem' }  }], identification: [{ position: 30 }]}
      @EndUserText.label: 'Object Description'
      .defaultSearchElement: true
      obj_desc    : maktx;
               : { lineItem: [{ position: 35, cssDefault: { width: '8rem' } }], identification: [{ position: 35 }]}
      @EndUserText.label: 'Quantity'
      comp_qty    : kmpmg_bi;
               : { lineItem: [{ position: 45 }], identification: [{ position: 45 }]}
      @EndUserText.label: 'Unit'
      comp_unit   : kmpme;
               : { lineItem: [{ position: 55 }], fieldGroup: [{ position: 10 , qualifier: 'FG1', label: 'Valid From' }]}
      @EndUserText.label: 'Valid from'
      valid_from  : datuv_bi;
               : { lineItem: [{ position: 65 }], fieldGroup: [{ position: 11 , qualifier: 'FG1', label: 'Valid To' }]}
      @EndUserText.label: 'Valid to'
      valid_to    : datub_bi;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;While using the RAP framework, metadata extensions cannot be created for custom entities. Therefore, annotations must be directly included in the custom entity code itself for UI purposes.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2 : Create an implementation class for the custom entity mentioned above and name it&amp;nbsp;ZCL_IMPLEMENT_EXT&amp;nbsp;or use the custom name specified in the second line of the code.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_implement_ext DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC
  SHARED MEMORY ENABLED .

  PUBLIC SECTION.
    DATA : et_final TYPE TABLE OF zce_main.
    INTERFACES if_rap_query_provider .

  PROTECTED SECTION.
  PRIVATE SECTION.

ENDCLASS.



CLASS ZCL_IMPLEMENT_EXT IMPLEMENTATION.

  METHOD if_rap_query_provider~select.
    CASE io_request-&amp;gt;get_entity_id( ).
      WHEN 'ZCE_MAIN'.
        TRY.
            DATA(lv_skip) = io_request-&amp;gt;get_paging( )-&amp;gt;get_offset( ). "gets the skip part from URL which means number of data to be skipped and default is 0 but later on it gets add by 20... till last data not get fetched
            DATA(lv_top) = io_request-&amp;gt;get_paging( )-&amp;gt;get_page_size( ). "gets the top part from URL which means number of data required and default is 20
            DATA(lt_filter) = io_request-&amp;gt;get_filter( )-&amp;gt;get_as_ranges( ). "gets the input value which is either pass in our filters or when click on single data line item
           
          CATCH cx_rap_query_filter_no_range.
            "handle exception
        ENDTRY.

        IF lv_top &amp;lt; 0.
*********** Start Logic
"Put logic for single data fetch in which it will trigger when you are going for object page while clicking on single item from display table
"Take inputs from LT_filter table for sending that particular data click 
*********** End Logic
            IF io_request-&amp;gt;is_total_numb_of_rec_requested( ).
              io_response-&amp;gt;set_total_number_of_records( lines( et_final ) ).
            ENDIF.
            IF io_request-&amp;gt;is_data_requested(  ).
              io_response-&amp;gt;set_data( et_final ).
            ENDIF.
        ELSE.
*********** Start Logic
"Put logic for actual multiple data fetch in which it will trigger when you click go button or any sort of actions like search, sort, excel download....
"Take inputs from LT_filter table for required data fetch 
*********** End Logic
          ENDIF.
********** Searching Logic
        DATA(lv_search) = io_request-&amp;gt;get_search_expression( ). "gets the value from Search field in the UI
          IF lv_search IS NOT INITIAL.
            DATA lt_search LIKE et_final.

            lv_search = |*{ lv_search }*|.
            lt_search = VALUE #( BASE lt_search
                          FOR ls_f IN et_final
                          WHERE ( field1 CP lv_search OR  "Put required field to be search instead of field1,field2.....
                                  field2 CP lv_search  OR
                                  field3 cp lv_search OR
                                  field4 cp lv_search OR                                                                
                                                       ( ls_f ) ).
            et_final = lt_search.
          ENDIF.
***********End of Searching logic
***********Sorting logic
        DATA(lt_sort_elements) = io_request-&amp;gt;get_sort_elements( ). "gets the detail table of ascending and descending of field we wants to be sorted from UI
          IF lt_sort_elements IS NOT INITIAL.
            LOOP AT lt_sort_elements INTO DATA(ls_sort).
              IF ls_sort-descending &amp;lt;&amp;gt; 'X'.
                SORT et_final BY (ls_sort-element_name) ASCENDING.
              ELSE.
                SORT et_final BY (ls_sort-element_name) DESCENDING.
              ENDIF.
            ENDLOOP.
          ENDIF.
**********End of sorting logic
**********Paging- logic for loading more data wrt Standard set amount of data
          IF lv_top IS NOT INITIAL OR lv_skip IS NOT INITIAL.
            /iwbep/cl_mgw_data_util=&amp;gt;paging( EXPORTING is_paging = VALUE #( top  = lv_top
                                                                            skip = lv_skip )
                                             CHANGING  ct_data   = et_final ).
          ENDIF.
*********End of Pagination

          IF io_request-&amp;gt;is_total_numb_of_rec_requested( ).
            io_response-&amp;gt;set_total_number_of_records( lines( et_final ) ). "set number of initial data to display overall
          ENDIF.

          IF io_request-&amp;gt;is_data_requested(  ).
            io_response-&amp;gt;set_data( et_final ). "Set data into the entity
          ENDIF.

        ENDIF.
    ENDCASE.
  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;The aforementioned class plays a crucial role as it encapsulates the entire logic for data processing, including searching, sorting, and most importantly, setting data for our custom entity.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3 : Create Service Definition of the Custom entity&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To create a service definition, simply right-click the custom entity in the Project Explorer, click 'New Service Definition', fill in the required inputs, and your service definition will be created.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Service definition'
define service ZSD_MAIN {
  expose ZCE_MAIN;
  expose ZIV_F4MATNR; "This is for ValueHelp Definition, and it's okay not to expose it.
  expose ZIV_F4WERKS;
  expose ZIV_F4STLAN;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;Let's take a look at one of the interface views of the ValueHelpDefinition.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface view for ValueHelpDefinition - MATNR'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZIV_F4MATNR
  as select distinct from mast
    left outer join       makt on makt.matnr = mast.matnr
{
         : {  selectionField: [{ position: 10 }] , lineItem: [{ position: 10 }]}
      @EndUserText.label: 'Material No'
  key mast.matnr,
      @Consumption.filter.hidden: true
  key mast.werks,
      @Consumption.filter.hidden: true
  key mast.stlan,
      @Consumption.filter.hidden: true
  key mast.stlal,
      @Consumption.filter.hidden: true
         : {   lineItem: [{ position: 20 }]}
      @EndUserText.label: 'Material Desc'
      makt.maktx
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;Step 4 : Create a Service Binding for the aforementioned service definition.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To create a service binding, simply right-click the created service definition in the Project Explorer, click 'New Service Binding', fill in the required inputs, and your service binding will be created. While creating the Service Binding, I selected OData V2 - UI. Then, activate and publish the service. To view the UI output, you can use the Preview option in Eclipse to see the output as shown in the image below.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-10-02 211818.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322447iD800178661F5E9F5/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-10-02 211818.png" alt="Screenshot 2025-10-02 211818.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In conclusion, using RAP with custom entities and pagination facilitates efficient data handling. With UI annotations, you can easily preview and refine the user interface. We hope this guide has been helpful. Stay tuned for more tips!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Note: This program is created for a remote system. For cloud environments, you can use a service consumption model or access data through a remote system API in the implementation class.&lt;/EM&gt;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/rap-using-custom-entity-with-load-multiple-data-using-pagination-and/ba-p/14233901"/>
    <published>2025-10-03T06:01:53.175000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696</id>
    <title>Collective Search Help Using Abstract Entity in RAP</title>
    <updated>2025-10-03T11:51:37.840000+02:00</updated>
    <author>
      <name>sanjay22</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1535416</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Collective Value Help with Abstract Entity in SAP RAP&lt;/SPAN&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can define a Collective Search Help&amp;nbsp;that combines multiple elementary &lt;/SPAN&gt;&lt;SPAN class=""&gt;search&lt;/SPAN&gt;&lt;SPAN class=""&gt; helps. This allows users to choose between different search paths and fetch values from various sources in a single dialog. The same concept is available in SAP Fiori through a Collective Value Help&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;It is implemented using an Abstract &lt;/SPAN&gt;&lt;SPAN class=""&gt;Entity that&lt;/SPAN&gt;&lt;SPAN class=""&gt; aggregates multiple elementary value helps and defines potential field mappings&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;An Abstract Entity does not hold data. Instead, it acts as a container for the Collective Search Help. This means it only groups together multiple elementary value helps and defines how they are mapped, without storing any business data itself.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The Collective Value Help shall be annotated with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.collectiveValueHelp.for.element&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; pointing to the field for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The referenced field must be assigned at least one elementary value help using the annotation &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;@Consumption.valueHelpDefinition.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;This setup ensures that your Collective Value Help aggregates multiple search options seamlessly for end-users.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Only specific keywords are allowed in a collective value help:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity.name&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Entity. Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding local Element&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;additional Binding. Element qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Qualifier&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create a&amp;nbsp;Abstract Entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abstract entity'
@ObjectModel.supportedCapabilities: [ #COLLECTIVE_VALUE_HELP ]
@ObjectModel.collectiveValueHelp.for.element: 'Country'
define abstract entity ZSM_ABSTRACT_CDS_ENTITY

{
  @Consumption.valueHelpDefinition: [
  {
       entity: { name: 'I_Country' },
       label: 'Search by Country'
  },
   {
      entity: {
      name: 'I_RegionVH',
      element: 'Country'
  },
  additionalBinding: [{ localElement: 'Region', element: 'Region' }],
  label   : 'Search by Region',
  qualifier: 'Regionsearch'
   }
   ]
  Country : land1;
  Region  : regio;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758879930864.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320249i89C882018112B8B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758879930864.png" alt="sanjay22_0-1758879930864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;@ObjectModel.CollectiveValueHelp.for.element &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;→&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Specifies the field (Country) for which the collective value help is defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;The Abstract Entity (&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;zsm_abstract_cds_entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;) &amp;nbsp;acts as a container, not holding data itself. acts as a Consumption value Help Definition search paths Defines multiple Search by Country (default value help) (alternative path with additional Search by Region binding to Region.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;@&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Consumption.valueHelpDefintion &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;→ Defines multiple search paths :&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Country( default Value Help )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search by Region( Alternate path with additional binding to Region )&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create an Interface View&lt;/SPAN&gt;&lt;SPAN class=""&gt; on Database Table&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880109210.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320250i35C6CA50B680760A/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880109210.png" alt="sanjay22_0-1758880109210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Assign a Value Help for the Country field inside a &lt;/SPAN&gt;&lt;SPAN class=""&gt;Metadata Extension&lt;/SPAN&gt;&lt;SPAN class=""&gt; CDS.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880183958.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320251iCD87357B0371C953/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880183958.png" alt="sanjay22_1-1758880183958.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Here Country field uses Collective search &lt;/SPAN&gt;&lt;SPAN class=""&gt;help( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_I_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL) &lt;/SPAN&gt;&lt;SPAN class=""&gt;with&lt;/SPAN&gt;&lt;SPAN class=""&gt; binding to &lt;/SPAN&gt;&lt;SPAN class=""&gt;Region&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the above Interface View.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880250069.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320252i495BFA8BE3403846/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880250069.png" alt="sanjay22_2-1758880250069.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Projection View for the Above Interface view&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1758880409200.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320255iBBBDF9FB40C44CFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1758880409200.png" alt="sanjay22_0-1758880409200.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Behavior Definition for the Interface View&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_1-1758880499246.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320256i0DAD0BA5C278B5F3/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1758880499246.png" alt="sanjay22_1-1758880499246.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Service Binding &lt;/SPAN&gt;&lt;SPAN class=""&gt;( OData&lt;/SPAN&gt;&lt;SPAN class=""&gt; – V&lt;/SPAN&gt;&lt;SPAN class=""&gt;4 )&lt;/SPAN&gt;&lt;SPAN class=""&gt; to expose the Entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;( ZSM&lt;/SPAN&gt;&lt;SPAN class=""&gt;_C_&lt;/SPAN&gt;&lt;SPAN class=""&gt;TRAVEL )&lt;/SPAN&gt; &lt;SPAN class=""&gt;to the front end.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1758880554639.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320257i45126292733C4314/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1758880554639.png" alt="sanjay22_2-1758880554639.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;F4 for Country Field – Search by Country&lt;/SPAN&gt;&lt;SPAN class=""&gt;, Search by region two value help screen.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_3-1758880593273.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320258i131D140173B03D26/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_3-1758880593273.png" alt="sanjay22_3-1758880593273.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-cloud-blog-posts/collective-search-help-using-abstract-entity-in-rap/ba-p/14228696"/>
    <published>2025-10-03T11:51:37.840000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-excel-upload-through-custom-action-popup-no-ui5-extension-no/ba-p/14234872</id>
    <title>ABAP RAP : Excel upload through custom action popup ( No UI5 Extension , No Object Page workaround )</title>
    <updated>2025-10-05T00:52:51.623000+02:00</updated>
    <author>
      <name>Ramjee_korada</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/10276</uri>
    </author>
    <content>&lt;P&gt;A frequent business requirement involves enabling mass changes to business objects via&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Excel uploads&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;executed through a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;custom action popup&lt;/STRONG&gt;. Historically, achieving this functionality has necessitated various workarounds, often involving&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI5 extensions&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;third-party solutions&lt;/STRONG&gt;, or&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Object Page manipulations&lt;/STRONG&gt;, all of which present specific implementation challenges.&lt;/P&gt;&lt;P&gt;The existing workaround approaches present several drawbacks:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Custom UI Extensions:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Require specialized&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI5 development expertise&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Third-Party Solutions:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Introduce risks related to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;licensing compliance&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and potential&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;security vulnerabilities&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Object Page Manipulations:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Involve complex, multi-step processes, such as creating a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;dummy object page&lt;/STRONG&gt;, facilitating file upload, temporarily&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;storing the file data in a table field&lt;/STRONG&gt;, and requiring a final user action (a button press) to initiate processing. This temporary data storage is often&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;unnecessary&lt;/STRONG&gt;, complicating the data model.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;However, SAP has recently introduced&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ABAP / CAP annotations&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that offer a cloud-ready solution, potentially&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;eliminating approximately 95% of the development effort&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;typically associated with integrating an Excel upload into the backend. This innovation allows developers to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;prioritize implementing core business logic&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;over developing reusable technical artifacts.&lt;/P&gt;&lt;P&gt;I will now detail the implementation steps.&lt;/P&gt;&lt;P&gt;A business requirement to manage &lt;STRONG&gt;mass processing listings for a library&lt;/STRONG&gt; was selected to demonstrate this use case. The implementation requires several steps, with steps 3 through 6 being the &lt;STRONG&gt;special or additional configurations&lt;/STRONG&gt; needed, while all others are considered routine.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_0-1759618459647.png" style="width: 691px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322875i27F4B6363B99B5FA/image-dimensions/691x376/is-moderation-mode/true?v=v2" width="691" height="376" role="button" title="Ramjee_korada_0-1759618459647.png" alt="Ramjee_korada_0-1759618459647.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1890964802"&gt;Implementation Steps&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;A database table for the &lt;STRONG&gt;listing entity&lt;/STRONG&gt; is created. This involves fields such as &lt;CODE&gt;Id&lt;/CODE&gt;, &lt;CODE&gt;Title&lt;/CODE&gt;, &lt;CODE&gt;Type&lt;/CODE&gt;, and &lt;CODE&gt;Author&lt;/CODE&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Library Listings'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zrk_lib_listings {

  key client            : abap.clnt not null;
  key listing_uuid      : sysuuid_x16 not null;
  id                    : abap.numc(10);
  title                 : abap.char(40);
  type                  : abap.char(5);
  author                : abap.char(40);
  publisher_studio      : abap.char(40);
  isbn_ean              : abap.char(40);
  language_code         : abap.lang;
  publication_year      : abap.numc(4);
  description           : abap.char(40);
  totalcopies           : abap.int2;
  available_copies      : abap.int2;
  location_shelf_id     : abap.char(40);
  lending_duration_days : abap.int2;
  status                : abap.char(40);
  cover_image_url       : abap.char(100);
  local_created_by      : abp_creation_user;
  local_created_at      : abp_creation_tstmpl;
  local_last_changed_by : abp_locinst_lastchange_user;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
  last_changed_at       : abp_lastchange_tstmpl;

}​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;2.&amp;nbsp;A &lt;STRONG&gt;RAP Business Object (BO)&lt;/STRONG&gt;&lt;SPAN&gt; is generated, followed by the requisite &lt;/SPAN&gt;&lt;STRONG&gt;UI artifacts&lt;/STRONG&gt;&lt;SPAN&gt;. The specific RAP BO scenario (Managed, Unmanaged, Draft, or Non-Draft) is noted as not influencing the core Excel upload use case. The &lt;/SPAN&gt;&lt;STRONG&gt;RAP Generator is used&lt;/STRONG&gt;&lt;SPAN&gt;&lt;SPAN&gt; to simplify the demonstration.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_0-1759617725687.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322874iBDE9FF5181449404/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Ramjee_korada_0-1759617725687.png" alt="Ramjee_korada_0-1759617725687.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3. A &lt;STRONG&gt;root&amp;nbsp;abstract entity&lt;/STRONG&gt; is created for the file to be uploaded. (This entity is highly reusable and can be applied across different RAP BOs).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abs. Entity For Attachment'
define root abstract entity ZRK_D_FILE_STREAM
{
  @Semantics.largeObject.mimeType: 'MimeType'
  @Semantics.largeObject.fileName: 'FileName'
  @Semantics.largeObject.contentDispositionPreference: #INLINE
  @EndUserText.label: 'Select Excel file'
  StreamProperty : abap.rawstring(0);
  
  .hidden: true
  MimeType : abap.char(128);
  
  .hidden: true
  FileName : abap.char(128);   
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4. The &lt;STRONG&gt;abstract behavior definition&lt;/STRONG&gt; for the file entity is implemented.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;abstract;
strict(2);
with hierarchy;
define behavior for ZRK_D_FILE_STREAM {
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;5. A second &lt;STRONG&gt;abstract entity is created&lt;/STRONG&gt; to serve as an action parameter. This entity includes an association to the file abstract entity (from Step 3).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Action Param for Uploading Excel'
define root abstract entity ZRK_D_UPLOAD_EXCEL
{
// Dummy is a dummy field
@UI.hidden: true
dummy : abap_boolean;
     _StreamProperties : association [1] to ZRK_D_FILE_STREAM on 1 = 1;
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;6. The &lt;STRONG&gt;abstract behavior definition&lt;/STRONG&gt; for the action parameter is implemented, including the association to the earlier entity.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;abstract;
strict ( 2 );
with hierarchy;
define behavior for ZRK_D_UPLOAD_EXCEL //alias &amp;lt;alias_name&amp;gt;
{
association _StreamProperties with hierarchy;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7. An &lt;STRONG&gt;action is defined&lt;/STRONG&gt; on the RAP BO Behavior definition, with the parameter specified in Step 5.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  static action ExcelUpload deep parameter ZRK_D_UPLOAD_EXCEL ;&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class ZRK_BP_R_LIB_LISTINGS unique;
strict ( 2 );
with draft;
extensible;
define behavior for ZRK_R_LIB_LISTINGS alias Listings
persistent table ZRK_LIB_LISTINGS
extensible
draft table ZRK_LIB_LSTNGS_D
etag master LocalLastChangedAt
lock master total etag LastChangedAt
authorization master( global )
{
  field ( readonly )
   ListingUUID,
   LocalCreatedBy,
   LocalCreatedAt,
   LocalLastChangedBy,
   LocalLastChangedAt,
   LastChangedAt;

  field ( numbering : managed )
   ListingUUID;


  create;
  update;
  delete;

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare;

  static action ExcelUpload deep parameter ZRK_D_UPLOAD_EXCEL ;

  mapping for ZRK_LIB_LISTINGS corresponding extensible
  {
    ListingUUID = listing_uuid;
    ID = id;
    Title = title;
    Type = type;
    Author = author;
    PublisherStudio = publisher_studio;
    IsbnEan = isbn_ean;
    LanguageCode = language_code;
    PublicationYear = publication_year;
    Description = description;
    Totalcopies = totalcopies;
    AvailableCopies = available_copies;
    LocationShelfID = location_shelf_id;
    LendingDurationDays = lending_duration_days;
    Status = status;
    CoverImageUrl = cover_image_url;
    LocalCreatedBy = local_created_by;
    LocalCreatedAt = local_created_at;
    LocalLastChangedBy = local_last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
    LastChangedAt = last_changed_at;
  }

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8. The &lt;STRONG&gt;business logic is implemented&lt;/STRONG&gt; to read the Excel content. A released API, XCO_CP_XLSX&amp;nbsp;&lt;FONT color="#000000"&gt;,&lt;/FONT&gt; is used for this demonstration.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; METHOD ExcelUpload.
    TYPES : BEGIN OF ty_sheet_data,
              id                  TYPE zrk_r_lib_listings-id,
              title               TYPE zrk_r_lib_listings-title,
              type                TYPE zrk_r_lib_listings-Type,
              author              TYPE zrk_r_lib_listings-author,
              PublisherStudio     TYPE zrk_r_lib_listings-PublisherStudio,
              IsbnEan             TYPE zrk_r_lib_listings-IsbnEan,
              LanguageCode        TYPE zrk_r_lib_listings-LanguageCode,
              PublicationYear     TYPE zrk_r_lib_listings-PublicationYear,
              description         TYPE zrk_r_lib_listings-Description,
              Totalcopies         TYPE zrk_r_lib_listings-Totalcopies,
              AvailableCopies     TYPE zrk_r_lib_listings-AvailableCopies,
              LocationShelfID     TYPE zrk_r_lib_listings-LocationShelfID,
              LendingDurationDays TYPE zrk_r_lib_listings-LendingDurationDays,
              status              TYPE zrk_r_lib_listings-Status,
            END OF ty_sheet_data.

    DATA lv_file_content   TYPE xstring.
    DATA lt_sheet_data     TYPE STANDARD TABLE OF ty_sheet_data.
    DATA lt_listing_create TYPE TABLE FOR CREATE zrk_r_lib_listings.

    lv_file_content = VALUE #( keys[ 1 ]-%param-_streamproperties-StreamProperty OPTIONAL ).

    " Error handling in case file content is initial

    DATA(lo_document) = xco_cp_xlsx=&amp;gt;document-&amp;gt;for_file_content( lv_file_content )-&amp;gt;read_access( ).

    DATA(lo_worksheet) = lo_document-&amp;gt;get_workbook( )-&amp;gt;worksheet-&amp;gt;at_position( 1 ).

    DATA(o_sel_pattern) = xco_cp_xlsx_selection=&amp;gt;pattern_builder-&amp;gt;simple_from_to(
      )-&amp;gt;from_column( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_alphabetic_value( 'A' )  " Start reading from Column A
      )-&amp;gt;to_column( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_alphabetic_value( 'N' )   " End reading at Column N
      )-&amp;gt;from_row( xco_cp_xlsx=&amp;gt;coordinate-&amp;gt;for_numeric_value( 2 )    " *** Start reading from ROW 2 to skip the header ***
      )-&amp;gt;get_pattern( ).

    lo_worksheet-&amp;gt;select( o_sel_pattern
                                     )-&amp;gt;row_stream(
                                     )-&amp;gt;operation-&amp;gt;write_to( REF #( lt_sheet_data )
                                     )-&amp;gt;set_value_transformation(
                                         xco_cp_xlsx_read_access=&amp;gt;value_transformation-&amp;gt;string_value
                                     )-&amp;gt;execute( ).

    lt_listing_create = CORRESPONDING #( lt_sheet_data ).

    MODIFY ENTITIES OF zrk_r_lib_listings IN LOCAL MODE
           ENTITY Listings
           CREATE AUTO FILL CID FIELDS ( Id Title Type author PublisherStudio IsbnEan LanguageCode PublicationYear description Totalcopies AvailableCopies LocationShelfID LendingDurationDays status )
           WITH lt_listing_create
           " TODO: variable is assigned but never used (ABAP cleaner)
           MAPPED DATA(lt_mapped)
           " TODO: variable is assigned but never used (ABAP cleaner)
           REPORTED DATA(lt_reported)
           " TODO: variable is assigned but never used (ABAP cleaner)
           FAILED DATA(lt_failed).

    " Communicate the messages to UI - not in scope of this demo
    IF lt_failed IS INITIAL.
      APPEND VALUE #( %msg = new_message_with_text( severity = if_abap_behv_message=&amp;gt;severity-success
                                                    text     = 'Listings have been uploaded - please refresh the list!!' ) )
             TO reported-listings.
    ENDIF.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9. The action is utilized on the &lt;STRONG&gt;projection behavior&lt;/STRONG&gt; and subsequently exposed in the &lt;STRONG&gt;metadata extension&lt;/STRONG&gt;.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  use action ExcelUpload;&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection implementation in class ZRK_BP_C_LIB_LISTINGS unique;
strict ( 2 );
extensible;
use draft;
use side effects;
define behavior for ZRK_C_LIB_LISTINGS alias Listings
extensible
use etag
{
  use create;
  use update;
  use delete;

  use action Edit;
  use action Activate;
  use action Discard;
  use action Resume;
  use action Prepare;

  use action ExcelUpload;

}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;.lineItem: [{ type:#FOR_ACTION , dataAction: 'ExcelUpload' , label: 'Upload Excel' }]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;10. The &lt;STRONG&gt;service binding is published&lt;/STRONG&gt;, and the application is then ready for execution.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_2-1759616768674.png" style="width: 739px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322868iF1985AA5BDD03A2A/image-dimensions/739x181/is-moderation-mode/true?v=v2" width="739" height="181" role="button" title="Ramjee_korada_2-1759616768674.png" alt="Ramjee_korada_2-1759616768674.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_3-1759616871331.png" style="width: 721px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322869i040F7DA1CC5515C5/image-dimensions/721x392/is-moderation-mode/true?v=v2" width="721" height="392" role="button" title="Ramjee_korada_3-1759616871331.png" alt="Ramjee_korada_3-1759616871331.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_4-1759616921974.png" style="width: 720px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322870i5364BBC5623F81B7/image-dimensions/720x117/is-moderation-mode/true?v=v2" width="720" height="117" role="button" title="Ramjee_korada_4-1759616921974.png" alt="Ramjee_korada_4-1759616921974.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_5-1759617464764.png" style="width: 743px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322872i185A7C14C9E33C7E/image-dimensions/743x390/is-moderation-mode/true?v=v2" width="743" height="390" role="button" title="Ramjee_korada_5-1759617464764.png" alt="Ramjee_korada_5-1759617464764.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ramjee_korada_6-1759617503382.png" style="width: 736px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322873iF922947957F6C08B/image-dimensions/736x407/is-moderation-mode/true?v=v2" width="736" height="407" role="button" title="Ramjee_korada_6-1759617503382.png" alt="Ramjee_korada_6-1759617503382.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1694451297"&gt;Note:&lt;/H3&gt;&lt;P&gt;This feature is currently &lt;STRONG&gt;functional on the BTP ABAP Environment&lt;/STRONG&gt;. However, an issue appears to exist with metadata generation on &lt;STRONG&gt;S/4HANA 2023 On-Premise&lt;/STRONG&gt; deployments, even though the objects are syntactically correct. It is anticipated that this constraint will be addressed in the &lt;STRONG&gt;S/4HANA 2025 release&lt;/STRONG&gt;, making the full feature set available on the S/4HANA On-Premise version following a brief waiting period.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-rap-excel-upload-through-custom-action-popup-no-ui5-extension-no/ba-p/14234872"/>
    <published>2025-10-05T00:52:51.623000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/reusing-data-nodes-to-display-a-table-more-than-once-in-adobe-forms/ba-p/14234246</id>
    <title>Reusing Data Nodes to Display a Table More Than Once in Adobe Forms</title>
    <updated>2025-10-06T06:40:17.153000+02:00</updated>
    <author>
      <name>Shubham162</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1624114</uri>
    </author>
    <content>&lt;P&gt;Sometimes the developers come across a situation where they need to use the same data node more than once in the SAP adobe form layout. This seems to be simple but just merely copy pasting the same table in the layout won't print the data again because the data node can be consumed only once i.e. it can have only 1:1 relation with the table. But displaying the data again on the layout can be achieved with the help of scripting language(in my case I prefer Javascript).&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Assumption:-&amp;nbsp;&lt;/STRONG&gt;You have already created the Adobe Form and implemented the relevant ABAP logic to fetch data into an internal table for display in the layout output.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1866087211" id="toc-hId-1890958947"&gt;&lt;STRONG&gt;Scenario&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;For simplicity, let’s select a small dataset from the &lt;STRONG&gt;MARA&lt;/STRONG&gt; table and display it in the Adobe Form layout.&lt;/P&gt;&lt;P&gt;The following steps were followed to create this example:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;A structure and a global internal table were defined to hold the data.&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_1-1759481641757.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322539iEA595966D4CAF5B6/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_1-1759481641757.png" alt="Shubham162_1-1759481641757.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_3-1759481683406.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322541iF0A6663AC6B96525/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_3-1759481683406.png" alt="Shubham162_3-1759481683406.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;A simple &lt;CODE&gt;SELECT&lt;/CODE&gt; query was written to fetch data from MARA into the internal table.&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_4-1759481751257.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322542i6046088BBF2BFF80/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_4-1759481751257.png" alt="Shubham162_4-1759481751257.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;The internal table was then bound to a &lt;STRONG&gt;data node&lt;/STRONG&gt; in the layout to print the records.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_6-1759481807472.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322544iFDC9049673D263C0/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_6-1759481807472.png" alt="Shubham162_6-1759481807472.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Now, the data node has been used in the layout to print the records. The internal table has been put on the design view page in order to see the output.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_7-1759481976789.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322545i622588AADAC041EC/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_7-1759481976789.png" alt="Shubham162_7-1759481976789.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Let's generate the pdf and see the output. We can see that the pdf is generated and it is printing all the 20 records.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_8-1759482082657.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322547i6AD75DF4F4BF392A/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_8-1759482082657.png" alt="Shubham162_8-1759482082657.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1694445442"&gt;Challenge&lt;/H3&gt;&lt;P&gt;Now, let’s assume we need to print only &lt;STRONG&gt;MATNR, MBRSH, and MEINS&lt;/STRONG&gt; as a second table.&lt;/P&gt;&lt;P&gt;To achieve this, we created another table (say, &lt;STRONG&gt;GT_MARA_1&lt;/STRONG&gt;) in the layout and bound it to the same data node as GT_MARA, but restricted the fields.&lt;/P&gt;&lt;P&gt;However, when we generated the PDF, the second table &lt;STRONG&gt;did not print any data&lt;/STRONG&gt;, even though the correct binding was done.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_9-1759482526279.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322552iE447CA389F2C5048/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_9-1759482526279.png" alt="Shubham162_9-1759482526279.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_10-1759482811635.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322553i615E89F0C6C22582/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_10-1759482811635.png" alt="Shubham162_10-1759482811635.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1497931937"&gt;Solution&lt;/H3&gt;&lt;P&gt;Reusing the same data node requires a slightly different approach. Below are the steps to make it work:&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;Step 1:-&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;Remove all the bindings from the second table (&lt;STRONG&gt;GT_MARA_1&lt;/STRONG&gt;).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_11-1759485448217.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322574i5A36755CE81C52C2/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_11-1759485448217.png" alt="Shubham162_11-1759485448217.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_12-1759485474016.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322575i0F8E4A9FA6A67C6D/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_12-1759485474016.png" alt="Shubham162_12-1759485474016.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_13-1759485516353.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322577iFD08B4EAB59721EC/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_13-1759485516353.png" alt="Shubham162_13-1759485516353.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2:-&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Wrap &lt;STRONG&gt;GT_MARA_1&lt;/STRONG&gt; inside a repeating &lt;STRONG&gt;subform&lt;/STRONG&gt; and mark it as &lt;EM&gt;Repeat Subform for Each Data Item&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_14-1759485621991.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322580iBFAA109C6F71A368/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_14-1759485621991.png" alt="Shubham162_14-1759485621991.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3:-&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create an instance of the subform (say &lt;STRONG&gt;Sub1&lt;/STRONG&gt;) for each record of GT_MARA.&lt;/P&gt;&lt;P&gt;To do this:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Wrap &lt;STRONG&gt;Sub1&lt;/STRONG&gt; inside another subform called &lt;STRONG&gt;ParentSubform&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Write a JavaScript snippet in the &lt;STRONG&gt;Calculate&lt;/STRONG&gt; event of ParentSubform to dynamically create instances.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Ensure that &lt;EM&gt;Repeat Subform for Each Data Item&lt;/EM&gt; is &lt;STRONG&gt;unchecked&lt;/STRONG&gt; for ParentSubform.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_20-1759486429473.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322594i6783D1902FDC58C9/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_20-1759486429473.png" alt="Shubham162_20-1759486429473.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4:-&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Write JavaScript at the &lt;STRONG&gt;field level&lt;/STRONG&gt; to fetch values from GT_MARA for each index.&lt;BR /&gt;For example, for fields MATNR, MBRSH, and MEINS, write JS code that accesses the data from GT_MARA row by row.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_16-1759486116496.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322587iA58201D1F2876FF4/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_16-1759486116496.png" alt="Shubham162_16-1759486116496.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_17-1759486172683.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322588i0B969619BAB44016/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_17-1759486172683.png" alt="Shubham162_17-1759486172683.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_19-1759486217403.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322590iB92BA4CF097B8514/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_19-1759486217403.png" alt="Shubham162_19-1759486217403.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Step 5:-&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;Run the PDF.&lt;BR /&gt;You’ll notice that the output is correct, but the &lt;STRONG&gt;header row of GT_MARA_1 is repeated for every record&lt;/STRONG&gt;.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_21-1759487110019.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322597iEDA0D09DF77CBD6A/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_21-1759487110019.png" alt="Shubham162_21-1759487110019.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6:-&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Suppress the repeated header using a small JavaScript snippet in the &lt;STRONG&gt;Calculate&lt;/STRONG&gt; event of the header.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_22-1759487290052.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322598i37A7799248756F55/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_22-1759487290052.png" alt="Shubham162_22-1759487290052.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7:-&lt;BR /&gt;&lt;/STRONG&gt;Generate the PDF again.&lt;BR /&gt;Now the second table prints correctly with a single header and the expected data.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shubham162_23-1759487544881.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/322601i8E1C4DBC1FFC7846/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Shubham162_23-1759487544881.png" alt="Shubham162_23-1759487544881.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Explanation of the Javascript&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Field-level code (example: MATNR):&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;var oFields = xfa.resolveNodes("GT_MARA.DATA[*].MATNR");&amp;nbsp; &amp;nbsp; &lt;FONT color="#000000"&gt;"-&amp;gt; Access to the MATNR field of GT_MARA table&lt;/FONT&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;var currIndex = this.parent.parent.parent.index;&amp;nbsp; &amp;nbsp;&lt;FONT color="#000000"&gt;"-&amp;gt; Get the current index of the repeating subform Sub1.&lt;/FONT&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;this.rawValue = oFields.item(currIndex).rawValue;&amp;nbsp; &lt;FONT color="#000000"&gt;"-&amp;gt; Get the actual value of MATNR in GT_MARA for the current index&lt;/FONT&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;ParentSubform (to create instances of Sub1):&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;var oRecords = xfa.resolveNodes("GT_MARA.DATA[*]").length; &lt;FONT color="#000000"&gt;"-&amp;gt; Get the total number of records in GT_MARA&lt;/FONT&gt;&amp;nbsp;&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;for ( var i = 0; i&amp;lt;=oRecords; i++ ){&amp;nbsp; &amp;nbsp; &lt;FONT color="#000000"&gt;" -&amp;gt; Iteration till the number of records of GT_MARA&lt;/FONT&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;if ( i &amp;gt; 0 ) {&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;this._Sub1.addInstance(1);&amp;nbsp; &amp;nbsp; &lt;FONT color="#000000"&gt;" Create a new instance of subform Sub1 for each iteration&lt;/FONT&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;}&lt;/EM&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;}&lt;/EM&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT color="#000000"&gt;&lt;EM&gt;Header suppression (in GT_MARA_1 header):&lt;/EM&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#FF0000"&gt;&lt;EM&gt;if ( this.parent.parent.index != '0' ){&lt;BR /&gt;this.presence = "hidden";&lt;BR /&gt;}&lt;BR /&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1301418432"&gt;Final Result&lt;/H3&gt;&lt;P&gt;The second table (GT_MARA_1) is successfully printed using the same data node, without duplicated headers.&lt;/P&gt;&lt;H3 id="toc-hId-1104904927"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;Reusing the same data node in multiple tables within an Adobe Form is not straightforward. However, with subforms and some JavaScript logic, we can achieve the desired result.&lt;/P&gt;&lt;P&gt;If you have other suggestions or alternative solutions to reuse the data node in Adobe Forms, feel free to share!&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;Thanks,&lt;BR /&gt;Shubham&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/reusing-data-nodes-to-display-a-table-more-than-once-in-adobe-forms/ba-p/14234246"/>
    <published>2025-10-06T06:40:17.153000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-accessing-change-request-data-by-business-activity-amp-change/ba-p/14235529</id>
    <title>SAP MDG : Accessing Change Request Data by Business Activity &amp; Change Request Type</title>
    <updated>2025-10-06T10:49:48.157000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi&amp;nbsp;SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01: &lt;/STRONG&gt;This blog does not include execution screenshots.&lt;STRONG&gt;&lt;BR /&gt;Note 02: &lt;/STRONG&gt;The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;STRONG&gt;&lt;BR /&gt;Note 03:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;There are several ways; this blog is written about one of them.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Create one custom class, with 02 methods:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;ZCL_MDGS_ASSISTIVE&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;GET_INSTANCE_GOV_API&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_MDGS_ASSISTIVE=&amp;gt;GET_INSTANCE_GOV_API
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] IV_MODEL                       TYPE        USMD_MODEL
* | [&amp;lt;---] EV_INSTANCE_EXISTS             TYPE        ABAP_BOOL
* | [&amp;lt;---] EO_GOV_API                     TYPE REF TO CL_USMD_GOV_API
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_instance_gov_api.
    DATA: lo_gov_api   TYPE REF TO if_usmd_gov_api,
          lo_cx_root   TYPE REF TO cx_root,
          lv_exception TYPE        string.
    IF cl_usmd_gov_api=&amp;gt;check_instance_exists( iv_model_name = iv_model ) EQ abap_false.
      ev_instance_exists = abap_false.
      TRY.
          cl_usmd_gov_api=&amp;gt;get_instance(
            EXPORTING
              iv_model_name = iv_model
            RECEIVING
              ro_gov_api    = lo_gov_api
          ).
        CATCH cx_usmd_gov_api INTO lo_cx_root.
          lv_exception = lo_cx_root-&amp;gt;get_text( ).
      ENDTRY.
      IF lv_exception IS INITIAL AND
         lo_gov_api   IS BOUND.
        eo_gov_api ?= lo_gov_api.
      ENDIF.
    ELSE.
      ev_instance_exists = abap_true.
      TRY.
          cl_usmd_gov_api=&amp;gt;get_instance(
            EXPORTING
              iv_model_name = iv_model
            RECEIVING
              ro_gov_api    = lo_gov_api
          ).
        CATCH cx_usmd_gov_api INTO lo_cx_root.
          lv_exception = lo_cx_root-&amp;gt;get_text( ).
      ENDTRY.
      IF lv_exception IS INITIAL AND
         lo_gov_api   IS BOUND.
        eo_gov_api ?= lo_gov_api.
      ENDIF.
    ENDIF.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;GET_CR_DATA&amp;nbsp;&lt;BR /&gt;(***Note: above method making use in this method)&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_MDGS_ASSISTIVE=&amp;gt;GET_CR_DATA
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] IV_CR_ID                       TYPE        USMD_CREQUEST
* | [&amp;lt;--&amp;gt;] CS_CR_ATTRIBUTES               TYPE        USMD_S_CREQUEST(optional)
* | [&amp;lt;--&amp;gt;] CV_MODEL                       TYPE        USMD_MODEL(optional)
* | [&amp;lt;--&amp;gt;] CV_CR_TYPE_PROCESS             TYPE        USMD_PROCESS(optional)
* | [&amp;lt;-()] RT_CR_DATA                     TYPE        USMD_TS_ENTITY_DATA_ALL
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
    METHOD get_cr_data.
    DATA: lo_gov_api     TYPE REF TO  cl_usmd_gov_api,
          lt_cr_data     TYPE         usmd_ts_entity_data_all,
          lv_model       TYPE         usmd_model,
          lv_inst_exists TYPE         abap_bool.
    " Determine the  model from CR ID to get the instance of
    " Goverance API.
    CHECK IV_CR_ID IS NOT INITIAL.
    IF NOT cv_model IS INITIAL.
      lv_model = cv_model.
    ELSE.
      cl_usmd_crequest_util=&amp;gt;get_model_by_cr(
        EXPORTING
          i_crequest = iv_cr_id
        IMPORTING
          e_model    = cv_model
      ).
    ENDIF.
    " Get the instance of the governance API
    IF NOT cv_model IS INITIAL.
      ZCL_MDGS_ASSISTIVE=&amp;gt;get_instance_gov_api(
        EXPORTING
          iv_model           = cv_model
        IMPORTING
          ev_instance_exists = lv_inst_exists
          eo_gov_api         = lo_gov_api
      ).
      " Read the data of the CR data using the Governance API
      IF lo_gov_api IS BOUND.
        lo_gov_api-&amp;gt;if_usmd_gov_api_cr_data~get_crequest_data(
          EXPORTING
            iv_crequest_id          = iv_cr_id
          IMPORTING
            et_entity_data_inactive = rt_cr_data
        ).
        " CR Header Data
        cs_cr_attributes = lo_gov_api-&amp;gt;if_usmd_gov_api_cr_data~get_crequest_attributes( iv_crequest_id = iv_cr_id  ).
        " CR Business activity or Business Process ID
        SELECT SINGLE usmd_process
                 FROM usmd1601
                 INTO _cr_type_process
                WHERE usmd_creq_type = _cr_attributes-usmd_creq_type.
      ENDIF.
    ENDIF.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now, Making use of ZCL_MDGS_ASSISTIVE in system method caller implementation (if_usmd_ssw_syst_method_caller~call_system_method)&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: 
ls_crequest     TYPE usmd_s_crequest,
lv_model        TYPE usmd_model,
lv_cr_process   TYPE usmd_process,
lt_cr_data      TYPE usmd_ts_entity_data_all,
lt_supp_data  TYPE REF TO data.

FIELD-SYMBOLS:
&amp;lt;lt_supp_data&amp;gt; TYPE SORTED TABLE,
&amp;lt;ls_supp_data&amp;gt; TYPE any,
&amp;lt;lv_fno&amp;gt; TYPE any.

CALL METHOD zcl_mdgs_assistive=&amp;gt;get_cr_data
      EXPORTING
        iv_cr_id           = iv_cr_number
      CHANGING
        cs_cr_attributes   = ls_crequest
        cv_model           = lv_model
        cv_cr_type_process = lv_cr_process
      RECEIVING
        rt_cr_data         = lt_cr_data.

IF ls_crequest-usmd_creq_type = 'ZMDGS01',
 IF lv_cr_process = 'SUP1'.
  lt_supp_data = VALUE #( lt_cr_data[ usmd_entity = 'BP_HEADER' usmd_entity_cont = 'BP_CENTRL' struct = 'KATTR' ]-r_data  OPTIONAL ). 
   IF lt_supp_data IS BOUND .
    ASSIGN lt_supp_data-&amp;gt;* TO &amp;lt;lt_supp_data&amp;gt;.
     IF &amp;lt;lt_supp_data&amp;gt; IS ASSIGNED.
      LOOP AT &amp;lt;lt_supp_data&amp;gt; ASSIGNING &amp;lt;ls_supp_data&amp;gt;.
       ASSIGN COMPONENT 'NAME_ORG1' OF STRUCTURE &amp;lt;ls_supp_data&amp;gt; TO &amp;lt;lv_fno&amp;gt;.
        IF &amp;lt;lv_fno&amp;gt; IS ASSIGNED AND &amp;lt;lv_fno&amp;gt; IS NOT INITIAL.
         .
         . "Requirement Logic etc...
         .
        ENDIF.
       ENDLOOP.
     ENDIF.
    ENDIF.
   ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" class="lia-product-mention" data-product="799-1"&gt;SAP S/4HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-accessing-change-request-data-by-business-activity-amp-change/ba-p/14235529"/>
    <published>2025-10-06T10:49:48.157000+02:00</published>
  </entry>
</feed>
