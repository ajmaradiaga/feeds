<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-Development-blog-posts.xml</id>
  <title>SAP Community - ABAP Development</title>
  <updated>2025-08-01T11:00:03.752604+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP Development/pd-p/833755570260738661924709785639136" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP Development blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/navigating-the-labyrinth-choosing-the-right-persistent-data-storage-for/ba-p/14133660</id>
    <title>Navigating the Labyrinth: Choosing the Right Persistent Data Storage for Your Custom Development</title>
    <updated>2025-07-01T09:57:50.815000+02:00</updated>
    <author>
      <name>vaibhav4</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/394709</uri>
    </author>
    <content>&lt;P&gt;Hello All,&lt;/P&gt;&lt;P&gt;During a recent implementation project, I encountered a familiar yet significant dilemma: determining the right approach for &lt;STRONG&gt;persistent data storage in a custom RICEF development&lt;/STRONG&gt;. The functional team specifically requested something as intuitive and user-friendly as &lt;STRONG&gt;SM30&lt;/STRONG&gt; for data maintenance—a scenario many of us in the SAP ecosystem can relate to.&lt;/P&gt;&lt;P&gt;While the need for a custom configuration table was clear, the abundance of options in S/4HANA—across both on-premise and cloud environments—made the decision more complex than expected. Add to that the challenge of balancing legacy ECC practices with modern S/4HANA architecture, and the decision-making process becomes even more nuanced.&lt;/P&gt;&lt;P&gt;In this blog, I’ll walk through our real-world scenario, the solutions we considered, and the reasoning behind the final choice. The goal is to offer a concise yet practical guide to help others facing similar decisions in their S/4HANA journey.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Understanding the Landscape: On-Premise vs. Cloud&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Before we dive into the specifics, it's crucial to understand that the choice of approach is heavily influenced by your SAP S/4HANA deployment model: on-premise or cloud. The"clean core" strategy, which emphasizes upgrade stability and limiting direct modifications to the core system, significantly shapes the available options, especially in the public cloud. What might be a viable solution on-premise could be entirely unsupported or not recommended in the cloud.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Let's break down the options by deployment model.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;S/4HANA On-Premise: A Blend of Tradition and Modernity&lt;/STRONG&gt;&lt;/FONT&gt;&lt;BR /&gt;In an S/4HANA on-premise environment, you have the flexibility to leverage both traditional ABAP development paradigms and newer, cloud-aligned approaches. This often leads to the dilemma that we faced: which path to take?&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;1. The Classical ABAP Approach: The Tried and True (with a Caveat)&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Classical ABAP Approach.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280030i668F9CA9EFD79072/image-size/large?v=v2&amp;amp;px=999" role="button" title="Classical ABAP Approach.png" alt="Classical ABAP Approach.png" /&gt;&lt;/span&gt;&lt;BR /&gt;This is perhaps the most familiar territory for many seasoned ABAP developers. It involves creating custom tables directly in the ABAP Dictionary (transaction SE11) and then generating a maintenance dialog using the Table Maintenance Generator (TMG) viaSE11 or SE54. End-users can then maintain data using the ubiquitous transaction SM30. You can even create custom transaction codes (SE93) for direct access, enhancing user experience and security. TMG also offers "events" where you can embed custom ABAP logic for validations, defaulting values, and other business requirements.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Features:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Full Control:&amp;nbsp;&lt;/STRONG&gt;You get granular control over table design, field properties, and database attributes. This is ideal for highly complex data models or scenarios requiring specific performance optimizations at the database level.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Familiarity:&amp;nbsp;&lt;/STRONG&gt;SM30 is a standard and widely known transaction, making it familiar to many SAP users for data maintenance.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Logic:&amp;nbsp;&lt;/STRONG&gt;TMG events provide hooks for embedding custom ABAP logic, allowing for robust validations and business rules.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;When to Use:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;When maximum control and flexibility over table design and implementation are paramount.&lt;/LI&gt;&lt;LI&gt;For highly complex data models or specific performance optimizations that can only be achieved at the ABAP Dictionary level.&lt;/LI&gt;&lt;LI&gt;When existing SAP GUI-based processes are acceptable or preferred by the end-users, or when the development effort for a Fiori UI is not justified for the specific use case.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;2. The Custom TVARVC Table Approach: Simple Configurations, Simple Maintenance&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Custom TVARVC Table Approach.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280031i4AB90CA95F7C3C93/image-size/large?v=v2&amp;amp;px=999" role="button" title="Custom TVARVC Table Approach.png" alt="Custom TVARVC Table Approach.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This approach involves creating a custom table (typically starting with 'Z' or 'Y') that mimics the structure of the standard TVARVC table. This custom table is then used to store application-specific parameters or simple configuration values. Maintenance is usually performed via Custom SAP GUI report/ transactions similar to STVARV or SM30.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Features:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Simple Configuration:&amp;nbsp;&lt;/STRONG&gt;Ideal for storing key-value pairs or simple ranges, such as company codes, plant-specific parameters, threshold values, or lists for custom logic. It's excellent for preventing hardcoding of values in ABAP programs, userexits, and reports.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Reusable Framework:&lt;/STRONG&gt; A single custom TVARVC-style table and its supporting maintenance report can be designed as a reusable framework, enabling consistent configuration handling across multiple custom developments.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;When to Use:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;For simple configuration parameters that control custom ABAP developments.&lt;/LI&gt;&lt;LI&gt;When a quick and straightforward solution with minimal initial development for table structure and maintenance UI is needed.&lt;/LI&gt;&lt;LI&gt;When end-users are comfortable with SAP GUI for configuration maintenance.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;3. Custom Business Objects (CBOs): The Modern On-Premise Approach&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Custom Business Objects.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280032iDFD36D26B8B249FA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Custom Business Objects.png" alt="Custom Business Objects.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Custom Business Objects (CBOs) represent a modern and increasingly recommended method for defining custom data structures and behaviors in S/4HANA on-premise. They are managed via the "Custom Business Objects" Fiori app. A significant advantage of CBOs is the automatic generation of a Fiori-based UI for data maintenance, eliminating the need for manual UI development for basic CRUD operations. Each CBO is backed by a system-provisioned database table and inherently exposes an OData service for seamless integration with Fiori applications and other systems. This is essentially a low-code approach to custom tables with integrated Fiori maintenance.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Features:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Automatic Fiori UI:&lt;/STRONG&gt;&amp;nbsp;The system automatically generates a Fiori-based UI for data maintenance, providing a modern user experience with minimal development effort.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;OData Service Exposure:&lt;/STRONG&gt;&amp;nbsp;CBOs automatically expose an OData service, simplifying integration with other Fiori apps, SAP systems, and external applications.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Key User Extensibility:&lt;/STRONG&gt;&amp;nbsp;CBOs empower key users to define and manage their owndata structures through a Fiori interface, reducing reliance on traditional ABAP developers for simple requirements.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Associations and Logic:&lt;/STRONG&gt;&amp;nbsp;Supports associations with other business objects for intricate data models and allows for custom logic (validations, determinations) via cloud BAdIs.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;When to Use:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;When the primary requirement is a user-friendly, modern Fiori interface for custom table maintenance.&lt;/LI&gt;&lt;LI&gt;For rapid development and deployment of maintenance UIs with minimal coding.&lt;/LI&gt;&lt;LI&gt;Well-suited for moderately complex data structures.&lt;/LI&gt;&lt;LI&gt;When you want to empower key users with extensibility capabilities.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;4. Fiori Elements with ABAP RESTful Application Programming Model(RAP): The Future of On-Premise Development&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Fiori Elements.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280033iD3F230F083B478F8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Fiori Elements.png" alt="Fiori Elements.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This is a powerful and increasingly recommended approach for building Fiori applications, including those for custom table maintenance, in S/4HANA on-premise.RAP provides a standardized way to build OData services for transactional and analytical applications. Fiori Elements then automatically generate UIs based on these OData services and CDS views, significantly accelerating development.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Features:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Model-Driven UI:&amp;nbsp;&lt;/STRONG&gt;Fiori Elements generate UIs automatically from CDS views andOData services, drastically reducing manual UI coding.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;RAP for Backend Logic:&lt;/STRONG&gt;&amp;nbsp;RAP handles the transactional and analytical logic,including CRUD operations for custom tables, ensuring a robust and scalablebackend.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Integrated Development:&lt;/STRONG&gt;&amp;nbsp;Development is done in ADT (ABAP Development Toolsin Eclipse), providing a modern development experience.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;When to Use:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;When building new Fiori applications for custom table maintenance in S/4HANA on-premise.&lt;/LI&gt;&lt;LI&gt;For scenarios requiring a robust, scalable, and performant solution that aligns with SAP's strategic direction.&lt;/LI&gt;&lt;LI&gt;When you want to leverage the benefits of automated UI generation and a consistent Fiori user experience.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;5. Freestyle SAPUI5 Applications: Ultimate UI Customization&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Freestyle SAPUI5.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280034i387E4328A4B16ABD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Freestyle SAPUI5.png" alt="Freestyle SAPUI5.png" /&gt;&lt;/span&gt;&lt;BR /&gt;For scenarios requiring highly customized user interfaces or complex interactions not easily achievable with Fiori Elements or CBOs, developers can build freestyle SAPUI5applications. These applications consume OData services (often built using classical ABAP or RAP) that expose the custom table data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Features:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Full UI Control:&lt;/STRONG&gt;&amp;nbsp;Developers have complete control over the UI layout, controls, and behavior, allowing for unique branding, complex data entry forms, or highly interactive dashboards.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Flexibility:&lt;/STRONG&gt;&amp;nbsp;Allows for highly specific UI/UX requirements that go beyond standard Fiori Elements templates.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Data Binding:&lt;/STRONG&gt;&amp;nbsp;Connects to backend data via OData services, which can be built using classical ABAP (SEGW) or RAP.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;When to Use:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;When your UI/UX requirements are extremely unique, complex, or cannot be met by standard Fiori Elements or CBO-generated UIs.&lt;/LI&gt;&lt;LI&gt;For highly interactive applications that require a bespoke user experience.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;On-Premise Summary: Choosing the Right Persistent Storage Method&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="171px"&gt;&lt;STRONG&gt;Approach&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="133px"&gt;&lt;STRONG&gt;UI Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="110px"&gt;&lt;STRONG&gt;Who Builds&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="103px"&gt;&lt;STRONG&gt;&amp;nbsp;Coding Required&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;STRONG&gt;Clean Core Alignment&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="270px"&gt;&lt;STRONG&gt;Best Use Case&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="171px"&gt;Classical ABAP (SM30)&lt;/TD&gt;&lt;TD width="133px"&gt;SAP GUI (SM30)&lt;/TD&gt;&lt;TD width="110px"&gt;Developers&lt;/TD&gt;&lt;TD width="103px"&gt;Medium&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;span class="lia-unicode-emoji" title=":cross_mark:"&gt;❌&lt;/span&gt;Low&lt;/TD&gt;&lt;TD width="270px"&gt;Legacy compatibility, complex tables, TMG event handling&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="171px"&gt;Custom TVARVC Table&lt;/TD&gt;&lt;TD width="133px"&gt;SAP GUI (STVARV/SM30)&lt;/TD&gt;&lt;TD width="110px"&gt;Developers&lt;/TD&gt;&lt;TD width="103px"&gt;Low&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;span class="lia-unicode-emoji" title=":cross_mark:"&gt;❌&lt;/span&gt;Low&lt;/TD&gt;&lt;TD width="270px"&gt;Simple config parameters, fast implementation&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="171px"&gt;Custom Business Objects (CBOs)&lt;/TD&gt;&lt;TD width="133px"&gt;Fiori (Auto-generated)&lt;/TD&gt;&lt;TD width="110px"&gt;Key Users / Devs&lt;/TD&gt;&lt;TD width="103px"&gt;Low to Medium&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;High&lt;/TD&gt;&lt;TD width="270px"&gt;Rapid deployment of Fiori-based maintenance apps&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="171px"&gt;RAP + Fiori Elements&lt;/TD&gt;&lt;TD width="133px"&gt;Fiori (Auto-generated)&lt;/TD&gt;&lt;TD width="110px"&gt;Developers&lt;/TD&gt;&lt;TD width="103px"&gt;Medium to High&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;High&lt;/TD&gt;&lt;TD width="270px"&gt;Modern architecture, scalable, maintainable development&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="171px"&gt;Freestyle SAPUI5 App&lt;/TD&gt;&lt;TD width="133px"&gt;Fiori (Custom UI)&lt;/TD&gt;&lt;TD width="110px"&gt;Developers&lt;/TD&gt;&lt;TD width="103px"&gt;High&lt;/TD&gt;&lt;TD width="158px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;High&amp;nbsp;&lt;/TD&gt;&lt;TD width="270px"&gt;Highly customized UI/UX, complex workflows or dashboards&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;S/4HANA Cloud: The "Clean Core" Paradigm&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="s4 hana cloud.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280035i854D6F9F7B161B3D/image-size/large?v=v2&amp;amp;px=999" role="button" title="s4 hana cloud.png" alt="s4 hana cloud.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;In SAP S/4HANA Cloud (Public Edition), custom development follows strict &lt;STRONG&gt;“clean core”&lt;/STRONG&gt; principles—minimizing direct system modifications to ensure upgrade stability. Traditional ABAP methods like SM30 or TVARVC-based tables are not applicable due to the absence of SAP GUI and limited backend extensibility.&lt;/P&gt;&lt;P&gt;Instead, SAP provides modern, cloud-compliant extensibility options:&lt;/P&gt;&lt;H4 id="toc-hId-1991386624"&gt;1. &lt;STRONG&gt;Custom Business Objects (CBOs): Key User-Friendly and Fiori-Ready&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;CBOs are the recommended way to handle custom data needs in the cloud. Created via the &lt;EM&gt;"Custom Business Objects"&lt;/EM&gt; Fiori app, they support:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Auto-generated Fiori UI&lt;/STRONG&gt; for maintenance (CRUD)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Automatic OData exposure&lt;/STRONG&gt; for integration&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;No-code/low-code development&lt;/STRONG&gt; suited for business users&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Upgrade-safe&lt;/STRONG&gt; by design&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Use When:&lt;/STRONG&gt; You need a quick, compliant way to store and maintain custom data with minimal developer effort.&lt;/P&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-1794873119"&gt;2. &lt;STRONG&gt;ABAP Cloud (Embedded Steampunk) + RAP: For Pro Developers&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;For advanced scenarios, ABAP Cloud (via Embedded Steampunk) allows professional developers to build applications using &lt;STRONG&gt;RAP&lt;/STRONG&gt; within ADT. These apps:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Use &lt;STRONG&gt;whitelisted APIs&lt;/STRONG&gt; and &lt;STRONG&gt;restricted ABAP syntax&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Expose &lt;STRONG&gt;OData services&lt;/STRONG&gt; for consumption in Fiori Elements&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Are &lt;STRONG&gt;fully aligned with clean core&lt;/STRONG&gt; standards&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Use When:&lt;/STRONG&gt; You need full control over backend logic or have complex business scenarios beyond what key user tools offer.&lt;/P&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-1598359614"&gt;3. &lt;STRONG&gt;Custom SAPUI5 on BTP: For Bespoke UI Requirements&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;For highly customized or interactive UIs, build SAPUI5 apps on &lt;STRONG&gt;SAP BTP&lt;/STRONG&gt;, consuming OData services from RAP or CBOs.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Use When:&lt;/STRONG&gt; Standard Fiori templates don’t meet your UX needs and you want to keep extensions &lt;STRONG&gt;side-by-side&lt;/STRONG&gt; (not inside the core).&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1272763390"&gt;Summary&lt;/H3&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="154px"&gt;&lt;STRONG&gt;Approach&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="96px"&gt;&lt;STRONG&gt;UI Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="93px"&gt;&lt;STRONG&gt;Who Builds&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="128px"&gt;&lt;STRONG&gt;Coding Required&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="192px"&gt;&lt;STRONG&gt;Clean Core Compliance&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="282px"&gt;&lt;STRONG&gt;Use Case&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="154px"&gt;CBO&lt;/TD&gt;&lt;TD width="96px"&gt;Auto Fiori UI&lt;/TD&gt;&lt;TD width="93px"&gt;Key Users&lt;/TD&gt;&lt;TD width="128px"&gt;No/Low&lt;/TD&gt;&lt;TD width="192px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;High&lt;/TD&gt;&lt;TD width="282px"&gt;Simple to moderate custom data needs&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="154px"&gt;RAP + Fiori Elements&lt;/TD&gt;&lt;TD width="96px"&gt;Auto Fiori UI&lt;/TD&gt;&lt;TD width="93px"&gt;Developers&lt;/TD&gt;&lt;TD width="128px"&gt;Yes&lt;/TD&gt;&lt;TD width="192px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;High&lt;/TD&gt;&lt;TD width="282px"&gt;Complex business logic, developer-led&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="154px"&gt;SAPUI5 on BTP&lt;/TD&gt;&lt;TD width="96px"&gt;Custom UI&lt;/TD&gt;&lt;TD width="93px"&gt;Developers&lt;/TD&gt;&lt;TD width="128px"&gt;Yes&lt;/TD&gt;&lt;TD width="192px"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;Very High (Side-by-side)&lt;/TD&gt;&lt;TD width="282px"&gt;Bespoke UX or standalone apps&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Making the Right Choice: A Decision Framework&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Choosing the right approach for persistent data storage in your custom RICEF development is a critical decision that impacts development effort, user experience,integration capabilities, performance, security, transportability, and long-term maintainability. To simplify this, consider the following decision framework:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;1. Deployment Model First:&lt;/STRONG&gt;&amp;nbsp;Are you on S/4HANA On-Premise or S/4HANA Cloud(Public Edition)? This is the most crucial differentiator. Cloud environments are far more restrictive due to the "clean core" strategy.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2. User Experience Requirement:&lt;/STRONG&gt;&amp;nbsp;Do your users require a traditional SAP GUI experience (less common now), a modern Fiori app experience, or a highly customized, bespoke UI?&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3. Data Model Complexity:&amp;nbsp;&lt;/STRONG&gt;Is your custom data simple (key-value pairs), moderately complex (multiple fields, simple associations), or highly complex (intricate relationships, specific performance needs)?&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;4. Development Effort &amp;amp; Skills:&lt;/STRONG&gt;&amp;nbsp;What are your team's existing skills (classical ABAP,RAP, SAPUI5, BTP) and what is the available development budget and timeline?&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;5. "Clean Core" Adherence:&lt;/STRONG&gt;&amp;nbsp;How strictly do you need to adhere to the "clean core"principles for future upgrades and cloud readiness?&lt;/P&gt;&lt;P&gt;Here's a simplified table to guide your decision:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;Feature/Consideration&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;Classical ABAP(On-Premise)&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;Custom TVARVC (On-Premise)&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;CBOs (On-Premise &amp;amp;Cloud)&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;RAP/Fiori Elements(On-Premise &amp;amp;Cloud)&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;&lt;STRONG&gt;FreestyleUI5 (On-Premise &amp;amp;Cloud)&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Deployment&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;On-Premise&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;On-Premise&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;On-Premise &amp;amp;Cloud&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;On-Premise &amp;amp;Cloud&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;On-Premise &amp;amp;Cloud&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;UI Type&lt;BR /&gt;SAP&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;SAP GUI(SM30)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;SAP GUI(STVARV/SM30)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Fiori(Auto-generated)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Fiori(Auto-generated)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Fiori(Custom)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Data Complexity&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Low&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Medium&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Dev Effort&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Medium&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Low&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Medium&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Medium&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;High&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;"Clean Core"Alignment&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Low&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Low&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;High(especially via BTP)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Key User Extensibility&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;No(Developer)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;No(Developer)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;OData Exposure&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Manual(SEGW)&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Automatic&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Automatic&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Consumes OData&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Best For&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Legacy, complex DB needs&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Simple config&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Rapid Fiori apps&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Robust Fiori apps,complex logic&lt;/TD&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Unique UI/UX needs&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Final Thoughts&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;The world of SAP S/4HANA is constantly evolving, and so too are the best practices for custom development. The days of a one-size-fits-all approach are long gone. As ABAP developers and consultants, it's our responsibility to guide our functional colleagues and project teams towards the most appropriate and future-proof solutions.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;My recent experience reminded me that while the technical options are abundant, the real challenge lies in understanding the business requirement, the system landscape,and the long-term implications of each choice. By carefully considering the factors outlined above, you can navigate this labyrinth with confidence, ensuring your custom RICEF developments are not only functional but also scalable, maintainable, and aligned with SAP's strategic direction.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;Happy coding, and may your custom tables always be clean and performant!&lt;/FONT&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/navigating-the-labyrinth-choosing-the-right-persistent-data-storage-for/ba-p/14133660"/>
    <published>2025-07-01T09:57:50.815000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/rap-transactional-app-performance-considerations-for-singleton-pattern-in/ba-p/14140680</id>
    <title>RAP Transactional app: performance considerations for singleton pattern in draft enabled RAP BO</title>
    <updated>2025-07-01T11:50:32.505000+02:00</updated>
    <author>
      <name>patrick_winkler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/729521</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1604972677"&gt;Introduction&lt;/H1&gt;&lt;P&gt;When developing a transactional app, you can use the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/developing-transactional-apps-with-multi-inline-edit-capabilities" target="_blank" rel="noopener noreferrer"&gt;singleton pattern for a draft enabled RAP BO&lt;/A&gt; to enable editing / inline create on the actual root entity.&lt;/P&gt;&lt;P&gt;In this blog, you will learn how the singleton pattern impacts performance and other advantages and disadvantages of this pattern in the context of Fiori elements.&lt;/P&gt;&lt;P&gt;This blog is relevant for&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition/pd-p/08e2a51b-1ce5-4367-8b33-4ae7e8b702e0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Private+Edition/pd-p/5c26062a-9855-4f39-8205-272938b6882f" target="_blank"&gt;SAP S/4HANA Cloud Private Edition&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+BTP+ABAP+environment/pd-p/73555000100800001164" target="_blank"&gt;SAP BTP ABAP environment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Further reading:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/tag/business%20configuration%20maintenance%20object/tg-p/board-id/technology-blog-sap" target="_blank"&gt;Related blog posts&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Learn how you can use&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://learning.sap.com/products/business-technology-platform/development/abap?url_id=text-sapcommunity-prdteng-ABAP" target="_blank" rel="noopener noreferrer"&gt;ABAP technology&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;to develop innovative applications and business solutions across SAP’s portfolio on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://learning.sap.com/products/business-technology-platform/development/abap" target="_blank" rel="noopener noreferrer"&gt;SAP Learning Site&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1408459172"&gt;Example BO&lt;/H1&gt;&lt;P&gt;Our data model consists of a table T1 and a corresponding text table T1_TXT.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Tab1'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #C
@AbapCatalog.dataMaintenance : #ALLOWED
define table T1 {
  key client            : abap.clnt not null;
  key k1                : zpw_d1 not null;
  f1                    : abap.char(20);
  f2                    : abap.char(20);
  f3                    : abap.char(20);
  f4                    : abap.char(20);
  f5                    : abap.char(20);
  f6                    : abap.char(20);
  f7                    : abap.char(20);
  f8                    : abap.char(20);
  last_changed_at       : abp_lastchange_tstmpl;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Tab1 Text'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #C
@AbapCatalog.dataMaintenance : #ALLOWED
define table T1_TXT {
  key client            : abap.clnt not null;
  key langu             : abap.lang not null;
  @AbapCatalog.foreignKey.keyType : #TEXT_KEY
  @AbapCatalog.foreignKey.screenCheck : false
  key k1                : zpw_d1 not null
    with foreign key T1
      where client = T1_TXT.client
        and k1 = T1_TXT.k1;
  description           : abap.char(30);
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Therefore, the draft-enabled RAP BO with singleton pattern consists of the singleton root entity type, T1 entity type, and T1_TXT entity type, each with a draft table.&lt;/P&gt;&lt;H1 id="toc-hId-1211945667"&gt;Singleton draft&lt;/H1&gt;&lt;P&gt;When the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/runtime-edit-action" target="_blank" rel="noopener noreferrer"&gt;Edit action&lt;/A&gt; is performed on a root entity, a corresponding draft entity including all subentities is created. In the singleton pattern, this basically means that a draft entity is created for all entities of the RAP BO.&lt;BR /&gt;Typically, the Edit action is performed when the user clicks the Edit button in the Fiori elements app. You can also use the following ABAP EML statement:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;MODIFY ENTITY zi_t1_s
  EXECUTE edit
  FROM VALUE #( ( %cid = |CID1|  singletonid = 1 ) ).
COMMIT ENTITIES.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;For our example BO, the Edit action therefore consists of three SQL statements in the form of INSERT INTO &amp;lt;draft table&amp;gt; SELECT FROM &amp;lt;entity type cds view&amp;gt;. No data is passed to the ABAP application server, only one statement per entity type, regardless of the number of entities.&lt;/P&gt;&lt;P&gt;The following measurement was performed in an ABAP Platform performance test system with respect to the above SQL statements as total:&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="25%"&gt;#Rows T1&lt;/TD&gt;&lt;TD width="25%"&gt;#Rows T1_TXT&lt;/TD&gt;&lt;TD width="25%"&gt;HANA CPU time [ms]&lt;/TD&gt;&lt;TD width="25%"&gt;HANA max memory consumption [mb]&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;10&lt;/TD&gt;&lt;TD width="25%"&gt;40&lt;/TD&gt;&lt;TD width="25%"&gt;7&lt;/TD&gt;&lt;TD width="25%"&gt;1&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;100&lt;/TD&gt;&lt;TD width="25%"&gt;400&lt;/TD&gt;&lt;TD width="25%"&gt;75&lt;/TD&gt;&lt;TD width="25%"&gt;3&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;1000&lt;/TD&gt;&lt;TD width="25%"&gt;4000&lt;/TD&gt;&lt;TD width="25%"&gt;135&lt;/TD&gt;&lt;TD width="25%"&gt;6&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;10000&lt;/TD&gt;&lt;TD width="25%"&gt;40000&lt;/TD&gt;&lt;TD width="25%"&gt;810&lt;/TD&gt;&lt;TD width="25%"&gt;45&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;100000&lt;/TD&gt;&lt;TD width="25%"&gt;400000&lt;/TD&gt;&lt;TD width="25%"&gt;7600&lt;/TD&gt;&lt;TD width="25%"&gt;437&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;This table shows the performance impact of the singleton pattern compared to a RAP BO without a singleton pattern. It is linear, so you can extrapolate for a higher number of lines.&lt;/P&gt;&lt;P&gt;If you use ABAP EML to modify entities, you do not need to create a draft entity, so this penalty does not necessarily apply to ABAP EML statements.&lt;/P&gt;&lt;P data-unlink="true"&gt;The runtime behavior when changing a draft entity or in the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/runtime-prepare-action" target="_blank" rel="noopener noreferrer"&gt;action prepare&lt;/A&gt;&amp;nbsp;is not affected by the singleton pattern.&lt;/P&gt;&lt;P&gt;During the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/draft-action-activate-optimized" target="_blank" rel="noopener noreferrer"&gt;activation action&lt;/A&gt;, the draft entities are discarded using a DELETE statement:&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="25%" height="57px"&gt;#Rows T1&lt;/TD&gt;&lt;TD width="25%" height="57px"&gt;#Rows T1_TXT&lt;/TD&gt;&lt;TD width="25%" height="57px"&gt;HANA CPU time [ms]&lt;/TD&gt;&lt;TD width="25%" height="57px"&gt;HANA max memory consumption [mb]&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%" height="30px"&gt;10&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;40&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;7&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;1&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%" height="30px"&gt;100&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;400&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;7&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;2&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%" height="30px"&gt;1000&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;4000&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;27&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;4&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%" height="30px"&gt;10000&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;40000&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;155&lt;/TD&gt;&lt;TD width="25%" height="30px"&gt;10&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD height="30px"&gt;100000&lt;/TD&gt;&lt;TD height="30px"&gt;400000&lt;/TD&gt;&lt;TD height="30px"&gt;430&lt;/TD&gt;&lt;TD height="30px"&gt;43&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;So you can add this to the performance impact.&lt;/P&gt;&lt;P&gt;Logically, these numbers depend on the table and CDS view design as well as the system. But the basic statement remains.&lt;/P&gt;&lt;P&gt;If the user changes more than about 10% of the entities in the interaction phase, the singleton pattern is more performant because draft entities do not always have to be created.&lt;/P&gt;&lt;H1 id="toc-hId-1015432162"&gt;Singleton in Fiori Elements&lt;/H1&gt;&lt;P&gt;Using a singleton RAP BO pattern in Fiori elements has the following characteristics:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Multi-line edit/inline creation for the actual root entity&lt;/LI&gt;&lt;LI&gt;The app can temporarily store global information in the singleton draft entity&lt;/LI&gt;&lt;LI&gt;All entities of the RAP BO are locked for a user&lt;/LI&gt;&lt;LI&gt;You cannot use selection fields as the &lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/4bd7590569c74c61a0124c6e370030f6.html" target="_blank" rel="noopener nofollow noreferrer"&gt;filter bar&lt;/A&gt; is only available in the list report. Alternatively, you can add &lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/adding-search-capabilities" target="_blank" rel="noopener noreferrer"&gt;search capabilities&lt;/A&gt; to the entity. A search field is then available&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;See &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-a-fiori-elements-app-for-a-rap-bo-with-transport-selection/ba-p/13562792" target="_blank"&gt;link&lt;/A&gt; on how to create a Fiori Elements app for a RAP BO with singleton pattern.&lt;/P&gt;&lt;H1 id="toc-hId-818918657"&gt;Custom Business Configurations&lt;/H1&gt;&lt;P&gt;When you create business configurations app using the ABAP RAP programming model, you use the&amp;nbsp;&lt;A href="https://help.sap.com/docs/sap-btp-abap-environment/abap-environment/creating-business-configuration-apps-with-abap-restful-application-programming-model-and-custom-business-configurations-app" target="_blank" rel="noopener noreferrer"&gt;Custom Business Configurations&lt;/A&gt; app and the &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/generating-business-configuration-maintenance-object-with-generate-abap-repository-objects-wizard" target="_blank" rel="noopener noreferrer"&gt;business configuration maintenance object ADT wizard&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;The RAP BO that this wizard generates always uses the singleton pattern for the following reasons:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;For configuration tables, you want to have a spreadsheet like user experience&lt;/LI&gt;&lt;LI&gt;The customizing transport request can be selected once for all entities and stored in the singleton draft entity&lt;/LI&gt;&lt;LI&gt;Locking the entire configuration for only one user is beneficial. You do not want multiple users to work on the same configuration table in parallel&lt;/LI&gt;&lt;LI&gt;The performance penalty for the singleton pattern is acceptable because&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;Configuration tables rarely have more than 1000 rows, let alone more than 10000 rows&lt;/LI&gt;&lt;LI&gt;Most of the configuration takes place in the intended system/client, not in the production client&lt;/LI&gt;&lt;LI&gt;The frequency of configuration changes is low&lt;/LI&gt;&lt;LI&gt;There is no performance impact when using ABAP EML or the &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/upload-business-configuration?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;Upload Business Configurations&lt;/A&gt; app&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The Custom Business Configurations app also supports RAP BO without singleton pattern:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create the RAP BO / Service binding without using the business configuration maintenance object ADT wizard&lt;/LI&gt;&lt;LI&gt;Add the relevant transport related functionality to the RAP BO&lt;/LI&gt;&lt;LI&gt;Create the business configuration maintenance object (SMBC) manually. Leave the option "Skip root entity list report" unchecked&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-622405152"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;Do not use the singleton pattern if the RAP BO handles more than 50000 entities and the app is used frequently.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-transactional-app-performance-considerations-for-singleton-pattern-in/ba-p/14140680"/>
    <published>2025-07-01T11:50:32.505000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-25/ba-p/14141705</id>
    <title>Customer &amp; Partner Roundtable for SAP BTP ABAP Environment #25</title>
    <updated>2025-07-01T15:05:16.176000+02:00</updated>
    <author>
      <name>iwona_hahn</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/4326</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1860394371" id="toc-hId-1863168624"&gt;&lt;STRONG&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉&lt;/span&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp;The call for contributions for one of the upcoming roundtables is open!&amp;nbsp;&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;If you want to show a demo or share a use case scenario for SAP BTP ABAP Environment send us an&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="mailto:sap_btp_abap_environment@sap.com" target="_blank" rel="noopener nofollow noreferrer"&gt;email&lt;/A&gt;&amp;nbsp;and we will get back to you.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1534798147" id="toc-hId-1537572400"&gt;Introduction&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&lt;SPAN class=""&gt;A&lt;/SPAN&gt;&lt;SPAN class=""&gt;s&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;A href="https://www.sap.com/products/technology-platform/abap/environment.html" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN class=""&gt;SAP&amp;nbsp;BTP&amp;nbsp;ABAP&amp;nbsp;environment (aka Steampunk)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/A&gt;and ABAP Cloud&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;became&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;more popular&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;inside and outside of SAP, there is a high demand for rolling out the latest product news and updates, asking questions, and showing demos.&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;SPAN class="lia-unicode-emoji"&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp;You can find the slides presented, recordings, and further references from the previous roundtables in this&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/iwonahahn/SAP-BTP-ABAP-Environment-Roundtable/tree/main" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub repository&lt;/A&gt;.&lt;BR /&gt;&lt;BR /&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_0-1751374366410.jpeg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281320iF5290A011527C9B9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_0-1751374366410.jpeg" alt="iwona_hahn_0-1751374366410.jpeg" /&gt;&lt;/span&gt;&lt;H2 id="toc-hId-1338284642" id="toc-hId-1341058895"&gt;Meeting Information&lt;BR /&gt;&lt;BR /&gt;&lt;/H2&gt;&lt;STRONG&gt;When:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;July 31&lt;/SPAN&gt;&lt;/STRONG&gt;, 10:00 - 11:00 AM CEST&amp;nbsp; –&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://sap-se.zoom.us/meeting/register/YSluZpM6RzSFPhnydLjP8g" target="_blank" rel="nofollow noopener noreferrer"&gt;Zoom Meeting&lt;/A&gt;&amp;nbsp;(&lt;STRONG&gt;please register&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in advance)&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Who:&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;All interested&amp;nbsp;&lt;STRONG&gt;customers, partners,&lt;/STRONG&gt;&amp;nbsp;and&amp;nbsp;&lt;STRONG&gt;stakeholders&lt;/STRONG&gt;&amp;nbsp;are invited to join this roundtable&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;BTP ABAP team&lt;/STRONG&gt;:&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4296" target="_blank"&gt;Frank Jentsch&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(Product Lead for SAP BTP ABAP&amp;nbsp;Environment)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/4326" target="_self"&gt;&lt;SPAN class=""&gt;Iwona Hahn&lt;/SPAN&gt;&lt;/A&gt;&amp;nbsp;&lt;SPAN class=""&gt;(BTP ABAP Product Management)&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Partner&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.blue-zone.io/en/" target="_blank" rel="noopener nofollow noreferrer"&gt;blue-zone GmbH&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;:&amp;nbsp;&lt;/SPAN&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Andreas Klose&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;(Director Software Development)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Christof Unterste (Solution Architect)&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;&lt;BR /&gt;Preliminary Agenda:&lt;/STRONG&gt;&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;Product update for SAP BTP ABAP Environment&lt;/LI&gt;&lt;LI&gt;Partner live demo:&amp;nbsp;&lt;SPAN class=""&gt;&lt;A href="https://www.blue-zone.io/en/products/edi-zone/" target="_blank" rel="noopener nofollow noreferrer"&gt;EDI-ZONE&lt;/A&gt; (EDI &amp;amp; eInvoicing Solution) - managed SaaS solution on SAP BTP ABAP Environment:&amp;nbsp; subaccount handling, customer onboarding etc.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Q&amp;amp;A&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;SPAN&gt;Looking forward to meeting you!&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;A href="https://sap-se.zoom.us/meeting/register/YSluZpM6RzSFPhnydLjP8g" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="iwona_hahn_1-1751374366424.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281321i39537B5D388BE6C4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="iwona_hahn_1-1751374366424.png" alt="iwona_hahn_1-1751374366424.png" /&gt;&lt;/span&gt;&lt;/A&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Check out our&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://pages.community.sap.com/topics/btp-abap-environment" target="_blank" rel="noopener noreferrer"&gt;SAP Business Technology ABAP Environment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;page in SAP Community&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;product&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;updates&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;upcoming events.&lt;/SPAN&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/customer-amp-partner-roundtable-for-sap-btp-abap-environment-25/ba-p/14141705"/>
    <published>2025-07-01T15:05:16.176000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/side-effects-in-rap-explained-with-determination-example/ba-p/14140206</id>
    <title>Side Effects in RAP Explained with Determination  Example</title>
    <updated>2025-07-02T10:28:03.987000+02:00</updated>
    <author>
      <name>Pradeep555</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451114</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;In the world of SAP RAP (RESTful Application Programming), Determinations and Side Effects play a crucial role in delivering responsive and intelligent user experiences. While determinations are used to implement logic that reacts to changes in data during specific RAP phases (such as &lt;/SPAN&gt;&lt;SPAN&gt;on modify&lt;/SPAN&gt;&lt;SPAN&gt; or &lt;/SPAN&gt;&lt;SPAN&gt;on save)&lt;/SPAN&gt;&lt;SPAN&gt;, side effects ensure that related fields or entities stay consistent and updated on the UI without additional user actions.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In his blog, I will demonstrate a practical scenario where determinations are used to dynamically calculate&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;values based on user input, and side effects are configured to immediately reflect these changes on the UI. This not only improves the data integrity but also enhances usability in Fiori applications. By the end of this post, you will have a clearer understanding of how to leverage determinations and side effects together effectively within a RAP-based application.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;DETERMINATION :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Actions modifies the existing BO instance where as Determination modifies the existing BO instances based on some&amp;nbsp; trigger condition&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;We can see that Actions also triggers based on the conditions but cannot modify the BO instances , we can be able to throw the error messages.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Pre requisites :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;During modification we change/modify&amp;nbsp; some fields / requirements&amp;nbsp; and we can compute the values of&amp;nbsp; particular fields&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Determination can be called during&amp;nbsp; Transactional phase/Save sequence where as validations always called during the save sequence&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Once a determination&amp;nbsp; has been triggered , it must run independently from other determinations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;During determination result must change if we execute detrmination several time under same condition&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Scenario :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here the determination calculateTotalPrice which is defined for all the three entities&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;(Travel, booking and booking supplements) handles the&amp;nbsp; calculation of total&amp;nbsp; price of one travel.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Based on the booking Fee total price must be calculated for the travel&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;SIDE-EFFECTS:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The SAP Fiori UI does not necessarily trigger a reload of all&amp;nbsp; related BO after every User input , as it simply does not know anything &lt;/SPAN&gt;&lt;SPAN&gt;about data changes&amp;nbsp; on the tables&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Side effects are&amp;nbsp; used to reload data, permissions or messages based on data changes in UI scenarios with draft enabled BO’s&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Side effects reloads the screen but it does not reload entire screen&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;It changes some of the field values or will enable/ disable some of the fied values&amp;nbsp;&amp;nbsp;&amp;nbsp; Or status of the data in transactional buffer --&amp;gt; based on these same things should appear in the front end&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;We need to define side effects in Behaviour definition&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Side effects will only reload the fields in front end&amp;nbsp; ,nothing will happen in backend&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The data which is available in the backend it will reload in the front end whihc is not currently displaying properly&lt;/SPAN&gt; &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Side effects have two parts :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Triggering condition : specifies when you should reload ( can be actions / validations)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Target : which fields should get&amp;nbsp; reloaded ( value of a field / multiple fields / reload entire entity )&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Important points:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Determinations calculates the total&amp;nbsp; price and updates it into the transcational buffer&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;But in the front end screen older values will be there .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Requirement :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Whenever I change the booking fee and booking supplement data and flight price&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The total&amp;nbsp; price should be updated not only in transactional buffer but also in the front end automatically&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;And whenever we are updating booking fee the reload of total price should happen&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Based on the trigger condition --&amp;gt; it should reload the values / fields&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here the source --&amp;gt; Booking fee&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Target --&amp;gt; totalprice&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Syntax:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Side effects { filed MyField affects Target }&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { $self affects Targets ; }&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { action MyAction affects Tragets ;}&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { determine action MyDetermineAction&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Executed on sources&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Affects Tagets } .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the target we can specify :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;$self : The current RAP BO is reloaded&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Entity _MyAssoc&amp;nbsp; : the specified associated entity&amp;nbsp; _MyAssoc is reloaded when the side effect is triggered&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Message&amp;nbsp; : all the messages in the response parameter reported are reloaded when the side effects is triggered&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;We can&amp;nbsp; also als provide multiple targets&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Side effects { field MyField affects Field1 , Field2 , action Action1 ,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Action Action 2 [..] }&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;RESTRICTIONS :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Static actions&amp;nbsp; defined using the addition static must&amp;nbsp; not be used as a side effect trigger , nor as a side effect target&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;In case of the trigger entity property $sefl , the target cannot be a field of the current entity $self itself ,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;However fields&amp;nbsp; from the associated entity can be defined using path&amp;nbsp; expressions&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Side Effect In BDL:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Side effects can be specified exactly once for each RAP BO entity in the entity&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Behaviour definition&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Multiple side effects can&amp;nbsp; be summarized with curly brackets , separated by a semicolon (; ) , if required.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The syntax ‘use side effects’ is specified in the behaviour definition header and all&amp;nbsp; side effects from all&amp;nbsp; RAP BO entities of the underlying RAP BO are reused&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;1.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create &lt;/SPAN&gt;&lt;SPAN class=""&gt;db&lt;/SPAN&gt;&lt;SPAN class=""&gt; table for travel&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'travel table' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #RESTRICTED 
define table zpd_dt_travel {
 
key client : abap.clnt not null; 
key travel_id : /dmo/travel_id not null; 
agency_id : /dmo/agency_id; 
customer_id : /dmo/customer_id; 
begin_date : /dmo/begin_date; 
end_date : /dmo/end_date; 
@Semantics.amount.currencyCode : 'zpd_dt_travel.currency_code' 
booking_fee : /dmo/booking_fee; 
@Semantics.amount.currencyCode : 'zpd_dt_travel.currency_code' 
total_price : /dmo/total_price; 
currency_code : /dmo/currency_code; 
description : /dmo/description; 
overall_status : /dmo/overall_status; 
created_by : abp_creation_user; 
created_at : abp_creation_tstmpl; 
last_changed_by : abp_locinst_lastchange_user; 
last_changed_at : abp_locinst_lastchange_tstmpl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;2.&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create &lt;/SPAN&gt;&lt;SPAN class=""&gt;db&lt;/SPAN&gt;&lt;SPAN class=""&gt; table for Booking&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'tbale for booking details' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #RESTRICTED 
define table zpd_dt_booking { 

key client : abap.clnt not null; 
@AbapCatalog.foreignKey.label : 'Travel' 
@AbapCatalog.foreignKey.screenCheck : false 
key travel_id : /dmo/travel_id not null 
with foreign key [0..*,1] zpd_dt_travel 
where travel_id = zpd_dt_booking.travel_id; 
key booking_id : /dmo/booking_id not null; 
booking_date : /dmo/booking_date; 
customer_id : /dmo/customer_id; 
carrier_id : /dmo/carrier_id; 
connection_id : /dmo/connection_id; 
flight_date : /dmo/flight_date; 
@Semantics.amount.currencyCode : 'zpd_dt_booking.currency_code' 
flight_price : /dmo/flight_price; 
currency_code : /dmo/currency_code; 
booking_status : /dmo/booking_status; 
last_changed_at : abp_locinst_lastchange_tstmpl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;3.Crete a db table for Booking suppliment&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'booking supplimnet' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #RESTRICTED 
define table zpd_dt_bsupplmnt { 

key client : abap.clnt not null; 
@AbapCatalog.foreignKey.label : 'Travel' 
@AbapCatalog.foreignKey.screenCheck : false 
key travel_id : /dmo/travel_id not null 
with foreign key [0..*,1] zpd_dt_travel 
where travel_id = zpd_dt_bsupplmnt.travel_id; 
@AbapCatalog.foreignKey.label : 'Booking' 
@AbapCatalog.foreignKey.screenCheck : false 
key booking_id : /dmo/booking_id not null 
with foreign key [0..*,1] zpd_dt_booking 
where travel_id = zpd_dt_bsupplmnt.travel_id 
and booking_id = zpd_dt_bsupplmnt.booking_id; 
key booking_supplement_id : /dmo/booking_supplement_id not null; 
supplement_id : /dmo/supplement_id; 
@Semantics.amount.currencyCode : 'zpd_dt_bsupplmnt.currency_code' 
price : /dmo/supplement_price; 
currency_code : /dmo/currency_code; 
last_changed_at : abp_locinst_lastchange_tstmpl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;4.Create a root view entity for travel&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;AbapCatalog.viewEnhancementCategory: [#NONE] 
@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'root view for travel' 
@Metadata.ignorePropagatedAnnotations: true 
@ObjectModel.usageType:{ 
serviceQuality: #X, 
sizeCategory: #S, 
dataClass: #MIXED 

} 

define root view entity zi_travel_detail as select from zpd_dt_travel 
composition [0..*] of ZI_BOOKING_DETAIL as _booking 
association [0..1] to /DMO/I_Agency as _agency on $projection.AgencyId = _agency.AgencyID  
association [0..1] to /DMO/I_Customer as _customer on $projection.CustomerId = _customer.CustomerID 
association [1..1] to I_Currency as _currency on $projection.CurrencyCode = _currency.Currency 
association [1..1] to /DMO/I_Overall_Status_VH as _status on $projection.OverallStatus = _status.OverallStatus 

{ 

key travel_id as TravelId, 
agency_id as AgencyId, 
customer_id as CustomerId, 
begin_date as BeginDate, 
end_date as EndDate, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
booking_fee as BookingFee, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
total_price as TotalPrice, 
currency_code as CurrencyCode, 
description as Description, 
overall_status as OverallStatus, 
@Semantics.user.createdBy: true 
created_by as CreatedBy, 
@Semantics.systemDateTime.createdAt: true 
created_at as CreatedAt, 
@Semantics.user.localInstanceLastChangedBy: true 
last_changed_by as LastChangedBy, 
@Semantics.systemDateTime.localInstanceLastChangedAt: true 
last_changed_at as LastChangedAt, 
_agency, 
_customer, 
_currency, 
_status, 
_booking 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;5.Create interface view&amp;nbsp; for booking&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'root view for booking' 
@Metadata.ignorePropagatedAnnotations: true 
@ObjectModel.usageType:{ 
serviceQuality: #X, 
sizeCategory: #S, 
dataClass: #MIXED 

} 

define view entity ZI_BOOKING_DETAIL as select from zpd_dt_booking association to parent zi_travel_detail as _travel 
on $projection.TravelId = _travel.TravelId 
composition [0..*] of zi_booking_supp as _bookingsuppl  
association [1..1] to /DMO/I_Carrier as _carrier on $projection.CarrierId = _carrier.AirlineID 
association [1..1] to /DMO/I_Customer as _customer on $projection.CustomerId = _customer.CustomerID  
association [1..1] to /DMO/I_Connection as _connection on $projection.CarrierId = _connection.AirlineID 
and $projection.ConnectionId = _connection.ConnectionID 
association[1..1] to /DMO/I_Booking_Status_VH as _booking_status on $projection.BookingStatus = _booking_status.BookingStatus  

{  

key travel_id as TravelId, 
key booking_id as BookingId, 
booking_date as BookingDate, 
customer_id as CustomerId, 
carrier_id as CarrierId, 
connection_id as ConnectionId, 
flight_date as FlightDate, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
flight_price as FlightPrice, 
currency_code as CurrencyCode, 
booking_status as BookingStatus, 
@Semantics.systemDateTime.localInstanceLastChangedAt: true 
last_changed_at as LastChangedAt, 
_carrier, 
_customer,
_connection,
_booking_status, 
_travel, 
_bookingsuppl 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;6.Create Interface view for Booking suppliment&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE] 
@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'root view for booking suppliment' 
@Metadata.ignorePropagatedAnnotations: true 
@ObjectModel.usageType:{ 
serviceQuality: #X, 
sizeCategory: #S, 
dataClass: #MIXED 
} 

define view entity zi_booking_supp as select from zpd_dt_bsupplmnt 
association to parent ZI_BOOKING_DETAIL as _booking on $projection.TravelId = _booking.TravelId 
and $projection.BookingId = _booking.BookingId 
association[1..1] to zi_travel_detail as _travel on $projection.TravelId = _travel.TravelId 
association [1..1] to /DMO/I_Supplement as _suppliment on $projection.SupplementId = _suppliment.SupplementID 
association[1..*] to /DMO/I_SupplementText as _supplimentText on $projection.SupplementId = _supplimentText.SupplementID  

{ 

key travel_id as TravelId,  
key booking_id as BookingId, 
key booking_supplement_id as BookingSupplementId, 
supplement_id as SupplementId, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
price as Price, 
currency_code as CurrencyCode, 
@Semantics.systemDateTime.localInstanceLastChangedAt: true 
last_changed_at as LastChangedAt, 
_travel, 
_supplimentText, 
_suppliment, 
_booking 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7.&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define projection for travel root entity&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'consumption view for travel' 
@Metadata.ignorePropagatedAnnotations: true 
@Metadata.allowExtensions: true 
define root view entity zc_travel_det provider contract transactional_query 
as projection on zi_travel_detail 

{ 

key TravelId, 
@ObjectModel.text.element: [ 'AgencyName' ] 
AgencyId, 
_Agency.Name as AgencyName, 
@ObjectModel.text.element: [ 'CustomerName' ] 
CustomerId, 
_Customer.LastName as CustomerName, 
BeginDate, 
EndDate, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
BookingFee, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
TotalPrice, 
CurrencyCode, 
Description, 
@ObjectModel.text.element: [ 'OverallStatusText' ] 
OverallStatus, 
_Status._Text.Text as OverallStatusText : localized, 
CreatedBy, 
CreatedAt, 
LastChangedBy, 
LastChangedAt, 
/* Associations */ 
_Agency, 
_booking : redirected to composition child zc_booking_det, 
_Currency, 
_Customer, 
_Status 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;8.&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define projection for booking&amp;nbsp; entity&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'consumption view for booking' 
@Metadata.ignorePropagatedAnnotations: true 
@Metadata.allowExtensions: true 
define view entity zc_booking_det  
as projection on ZI_BOOKING_DETAIL 
{ 

key TravelId, 
key BookingId, 
BookingDate, 
@ObjectModel.text.element: [ 'CustomerName' ] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Customer', 
element: 'CustomerID' 

} }] 

CustomerId, 
_customer.LastName as CustomerName, 
@ObjectModel.text.element: [ 'CarrierName' ] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Carrier', 
element: 'AirlineId' 

} }] 

CarrierId, 
_carrier.Name as CarrierName, 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Flight', 
element: 'Connection Id' 

}  

}] 
ConnectionId,  
FlightDate, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
FlightPrice, 
CurrencyCode, 
@ObjectModel.text.element: [ 'BookingStatusText' ] 
_booking_status._Text.Text as BookingStatusText : localized, 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Booking_Status_VH', 
element: 'Booking_Status' 

} }] 
BookingStatus, 
LastChangedAt, 
/* Associations */ 
_bookingsuppl : redirected to composition child zc_booking_supp, 
_booking_status, 
_carrier, 
_connection, 
_customer, 
_travel : redirected to parent zc_travel_det 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9.&lt;SPAN&gt;&lt;SPAN class=""&gt;Define projection for booking&amp;nbsp; suppliment&amp;nbsp; entity&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'consumption view for booking suppliment' 
@Metadata.ignorePropagatedAnnotations: true 
@Metadata.allowExtensions: true 
define view entity zc_booking_supp  
as projection on zi_booking_supp 

{ 

key TravelId, 
key BookingId, 
key BookingSupplementId, 
@ObjectModel.text.element: [ 'SupplemenDesc' ] 
SupplementId, 
_SupplementText.Description as SupplemenDesc : localized, 
@Semantics.amount.currencyCode: 'CurrencyCode' 
Price, 
CurrencyCode, 
LastChangedAt, 
/* Associations */ 
_Travel : redirected to zc_travel_det,
_Booking : redirected to parent zc_booking_det, 
_Supplement, 
_SupplementText 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;10.provide metada extension for projected views&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE 

@Search.searchable: true 
@UI.headerInfo: { 
typeName: 'Travel', 
typeNamePlural: 'Travels', 

title: { 
type: #STANDARD, 
label: 'Travel', 
value: 'TravelId' 

} 

} 
annotate view zc_travel_det 
with  

{ 

@UI.facet: [{ 
id: 'Travel', 
purpose: #STANDARD, 
position: 10 , 
label: 'Travel', 
type: #IDENTIFICATION_REFERENCE 

}, 

{ 

id: 'Booking', 
purpose: #STANDARD, 
position: 20 , 
label: 'Booking', 
type: #LINEITEM_REFERENCE, 
targetElement: '_booking' 

} 

] 

@UI.lineItem: [{ position: 10 }, { type:#FOR_ACTION, dataAction: 'CopyTravel', label: 'Copy Travel' } 
,{ type:#FOR_ACTION, dataAction: 'AcceptTravel', label: 'AcceptTravel' } 
,{ position: 30 },{ type:#FOR_ACTION, dataAction: 'RejectTravel', label: 'RejectTravel' }] 
@UI.identification: [{ position: 10 }] 
@Search.defaultSearchElement: true 
TravelId; 
@UI: { lineItem: [{ position: 40 }], 
selectionField: [{ position: 40 }], 
identification: [{ position: 40 }] 

} 

@Search.defaultSearchElement: true 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Agency', 
element: 'AgencyID' 

} }] 

AgencyId; 
// AgencyName; 
@UI: { lineItem: [{ position: 50 }], 
selectionField: [{ position: 50 }], 
identification: [{ position: 50 }] 
} 
@Search.defaultSearchElement: true 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Customer', 
element: 'CustomerID' 

} }] 
CustomerId; 
// CustomerName; 
@UI.lineItem: [{ position: 60 }] 
@UI.identification: [{ position: 60 }] 
BeginDate; 
@UI.lineItem: [{ position: 70 }] 
@UI.identification: [{ position: 70 }] 
EndDate; 
@UI.identification: [{ position: 75 }] 
BookingFee; 
@UI.lineItem: [{ position: 80 }] 
@UI.identification: [{ position: 80 }] 
TotalPrice; 
@Consumption.valueHelpDefinition: [{ entity: { 
name: 'I_Currency', 
element: 'Currency' 
} }] 

CurrencyCode; 
@UI.identification: [{ position: 85 }] 
Description; 
@UI: { lineItem: [{ position: 90 }],
selectionField: [{ position: 60 }], 
identification: [{ position: 90 }],
textArrangement: #TEXT_ONLY 
} 
@Search.defaultSearchElement: true 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Overall_Status_VH', 
element: 'OverallStatus' 
} }] 

OverallStatus; 
// OverallStatusText;
// .hidden: true 
// LastChangedAt; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;11. metadata extension for booking entity&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE 

@Search.searchable: true 
@UI.headerInfo: { 
typeName: 'Booking',
typeNamePlural: 'Bookings', 

title: { 
type: #STANDARD, 
label: 'Booking', 
value: 'BookingId' 

} 

} 

annotate view zc_booking_det 

with  

{ 

@UI.facet: [{ 
id: 'Booking', 
purpose: #STANDARD,
position: 10 , 
label: 'Booking', 
type: #IDENTIFICATION_REFERENCE 

}, 

{ 

id: 'BookingSuppl', 
purpose: #STANDARD, 
position: 20 ,  
label: 'Booking Suppliments', 
type: #LINEITEM_REFERENCE, 
targetElement: '_bookingsuppl' 

} 

] 

// .defaultSearchElement: true 
// TravelId; 

@UI.lineItem: [{ position: 10 }] 
@UI.identification: [{ position: 10 }] 
@Search.defaultSearchElement: true 
BookingId; 
@UI.lineItem: [{ position: 20 }] 
@UI.identification: [{ position: 20 }] 

BookingDate; 
@UI.lineItem: [{ position: 30 }] 
@UI.identification: [{ position: 30 }] 
@Search.defaultSearchElement: true 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Customer',
element: 'CustomerID' 

} }] 

CustomerId; 
@UI.lineItem: [{ position: 40 }] 
@UI.identification: [{ position: 40 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Carrier', 
element: 'AirlineID' 

} }] 

CarrierId; 
@UI.lineItem: [{ position: 50 }] 
@UI.identification: [{ position: 50 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Flight', 
element: 'ConnectionId' 

}, 

additionalBinding: [{ element: 'ConnectionId' ,  
localElement: 'ConnectionID'}, 
{ element: 'AirlineID' ,  
localElement: 'CarrierId'},  
{ element: 'CurrencyCode' ,  
localElement: 'CurrencyCode'}, 
{ element: 'Price' ,  
localElement: 'FlightPrice'} ] 

}]  

ConnectionId; 
@UI.lineItem: [{ position: 60 }] 
@UI.identification: [{ position: 60 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Flight', 
element: 'FlightDate' 

}, 

additionalBinding: [{ element: 'FlightDate' ,  
localElement: 'FlightDate'}, 
{ element: 'AirlineID' ,  
localElement: 'CarrierId'},  
{ element: 'CurrencyCode' ,  

localElement: 'CurrencyCode'}, 
{ element: 'Price' ,  
localElement: 'FlightPrice'} ] 

}]  

FlightDate; 
@UI.lineItem: [{ position: 70 }] 
@UI.identification: [{ position: 70 }] 
FlightPrice; 
// @Consumption.valueHelpDefinition: [{ entity: { 
// name: 'I_Currency', 
// element: 'Currency' 

// } }] 

// CurrencyCode; 
@UI.lineItem: [{ position: 80 }]
@UI.identification: [{ position: 80 }] 
@UI.textArrangement: #TEXT_ONLY 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Booking_Status_VH', 
element: 'BookingStatus' 

} }] 

BookingStatus; 
// LastChangedAt; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;12. Metadata extension for booking entity&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE 

@Search.searchable: true 
@UI.headerInfo: { 
typeName: 'Booking', 
typeNamePlural: 'Bookings', 
title: { 
type: #STANDARD, 
label: 'Booking', 
value: 'BookingId' 

} 

} 
annotate view zc_booking_det 
with  

{ 

@UI.facet: [{ 
id: 'Booking', 
purpose: #STANDARD, 
position: 10 , 
label: 'Booking', 
type: #IDENTIFICATION_REFERENCE 

}, 

{ 

id: 'BookingSuppl', 
purpose: #STANDARD, 
position: 20 ,  
label: 'Booking Suppliments', 
type: #LINEITEM_REFERENCE, 
targetElement: '_bookingsuppl' 

} 

] 
// .defaultSearchElement: true 
// TravelId; 

@UI.lineItem: [{ position: 10 }] 
@UI.identification: [{ position: 10 }] 
@Search.defaultSearchElement: true 
BookingId; 
@UI.lineItem: [{ position: 20 }] 
@UI.identification: [{ position: 20 }] 
BookingDate; 
@UI.lineItem: [{ position: 30 }] 
@UI.identification: [{ position: 30 }] 
@Search.defaultSearchElement: true 
@Consumption.valueHelpDefinition: [{ entity: {
name: '/DMO/I_Customer', 
element: 'CustomerID' 

} }] 

CustomerId; 
@UI.lineItem: [{ position: 40 }] 
@UI.identification: [{ position: 40 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Carrier', 
element: 'AirlineID' 

} }] 

CarrierId; 
@UI.lineItem: [{ position: 50 }] 
@UI.identification: [{ position: 50 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Flight', 
element: 'ConnectionId' 

}, 
additionalBinding: [{ element: 'ConnectionId' ,  
localElement: 'ConnectionID'}, 

{ element: 'AirlineID' ,  
localElement: 'CarrierId'},  
{ element: 'CurrencyCode' ,  
localElement: 'CurrencyCode'}, 
{ element: 'Price' , 
localElement: 'FlightPrice'} ] 

}]  
ConnectionId; 
@UI.lineItem: [{ position: 60 }] 
@UI.identification: [{ position: 60 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Flight', 
element: 'FlightDate' 

}, 

additionalBinding: [{ element: 'FlightDate' ,  
localElement: 'FlightDate'}, 
{ element: 'AirlineID' ,  
localElement: 'CarrierId'},  
{ element: 'CurrencyCode' ,  
localElement: 'CurrencyCode'}, 
{ element: 'Price' ,  
localElement: 'FlightPrice'} ] 

}]  
FlightDate; 
@UI.lineItem: [{ position: 70 }] 
@UI.identification: [{ position: 70 }] 

FlightPrice; 
// @Consumption.valueHelpDefinition: [{ entity: { 
// name: 'I_Currency', 
// element: 'Currency' 
// } }] 

// CurrencyCode; 
@UI.lineItem: [{ position: 80 }] 
@UI.identification: [{ position: 80 }] 
@UI.textArrangement: #TEXT_ONLY 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_Booking_Status_VH', 
element: 'BookingStatus' 

} }] 
BookingStatus; 
// LastChangedAt; 


} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;13.&amp;nbsp;Metadata extension for booking&amp;nbsp; suppliment entity&lt;/P&gt;&lt;PRE&gt;@Metadata.layer: #CORE 

@Search.searchable: true 
@UI.headerInfo: { 
typeName: 'BookingSuppl', 
typeNamePlural: 'BookingSuppls', 
title: { 
type: #STANDARD, 
label: 'Booking Suppliments', 
value: 'BookingSupplementId' 

} 
} 

annotate view zc_booking_supp 
with  
{ 
@UI.facet: [{ 
id: 'BookingSuppl', 
purpose: #STANDARD, 
position: 10 ,
label: 'Booking Suppliments', 
type: #IDENTIFICATION_REFERENCE 
} 
] 
// @Search.defaultSearchElement: true 
// TravelId; 
@Search.defaultSearchElement: true 
BookingId; 
@UI.lineItem: [{ position: 10 }] 
@UI.identification: [{ position: 10 }] 
BookingSupplementId; 
@UI.lineItem: [{ position: 20 }] 
@UI.identification: [{ position: 20 }] 
@Consumption.valueHelpDefinition: [{ entity: { 
name: '/DMO/I_SUPPLEMENT', 
element: 'SupplementID' 
}, 

additionalBinding: [{ element: 'SupplementID' , 
localElement: 'SupplementId'}, 
{ element: 'Price' , 
localElement: 'Price'}, 
{ element: 'CurrencyCode' , 
localElement: 'CurrencyCode'} 

] 

}] 
SupplementId; 
@UI.lineItem: [{ position: 30 }] 
@UI.identification: [{ position: 30 }] 

Price; 
// @Consumption.valueHelpDefinition: [{ entity: { 
// name: 'I_Currency', 
// element: 'Currency' 
// } }] 
// CurrencyCode; 
// @UI.hidden: true 
// LastChangedAt; 

} &lt;/PRE&gt;&lt;P&gt;14.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create&lt;/SPAN&gt;&lt;SPAN class=""&gt; behaviour definition travel root entity&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed; 

strict ( 2 ); 
define behavior for zi_travel_detail //alias &amp;lt;alias_name&amp;gt; 
implementation in class zcl_bp_travel_maa unique 
persistent table zpd_dt_travel 
lock master 
authorization master ( global ) 
etag master LastChangedAt 
early numbering 

{ 

field ( readonly ) TravelId; 
action AcceptTravel result [1] $self; 
action RejectTravel result [1] $self; 

factory action CopyTravel [1]; 
internal action RecalcTotalPrice; 
determination CalcTotalPrice on modify { create; field BookingFee, CurrencyCode; } 

// authorization ( global ), 
create; 
update; 
delete; 
// field ( readonly ) TravelId; 
association _booking { create; } 
mapping for zpd_dt_travel 
{ 

TravelId = travel_id; 
AgencyId = agency_id; 
CustomerId = customer_id; 
BeginDate = begin_date; 
EndDate = end_date; 
BookingFee = booking_fee; 
TotalPrice = total_price; 
CurrencyCode = currency_code; 
Description = description; 
OverallStatus = overall_status; 
CreatedBy = created_by; 
CreatedAt = created_at; 
LastChangedBy = last_changed_by; 
LastChangedAt = last_changed_at; 

} 
} 
define behavior for ZI_BOOKING_DETAIL //alias &amp;lt;alias_name&amp;gt; 
implementation in class zcl_bp_booking_ma unique 
persistent table zpd_dt_booking 
lock dependent by _Travel 
//authorization dependent by _travel 
authorization master ( global ) 
etag master LastChangedAt 
early numbering 
{ 
update; 
delete; 
field ( readonly ) TravelId, BookingId;

determination CalcTotalPrice on modify { create; field FlightPrice, CurrencyCode; } 
association _travel; 
association _bookingsuppl { create; } 
mapping for zpd_dt_booking 

{ 
TravelId = travel_id; 
BookingId = booking_id; 
BookingDate = booking_date; 
CustomerId = customer_id; 
CarrierId = carrier_id; 
ConnectionId = connection_id; 
FlightDate = flight_date; 
FlightPrice = flight_price; 

CurrencyCode = currency_code; 
BookingStatus = booking_status; 
LastChangedAt = last_changed_at; 

} 

} 
define behavior for zi_booking_supp //alias &amp;lt;alias_name&amp;gt; 
implementation in class zcl_bp_booking_ma unique 
persistent table zpd_dt_bsupplmnt 
lock dependent by _Travel 
//authorization dependent by _Travel 
authorization master ( global ) 
etag master LastChangedAt 
early numbering 

{ 
update; 
delete; 
field ( readonly ) TravelId, BookingId, BookingSupplementId; 
determination CalcTotalPrice on modify { create; field Price, CurrencyCode; } 
association _Travel; 
association _Booking; 
mapping for zpd_dt_bsupplmnt 
{ 

SupplementId = supplement_id; 
TravelId = travel_id; 
BookingId = booking_id; 
BookingSupplementId = booking_supplement_id; 
Price = price; 
CurrencyCode = currency_code; 
LastChangedAt = last_changed_at; 

} 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;15.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define &lt;/SPAN&gt;&lt;SPAN class=""&gt;behavior definition&lt;/SPAN&gt;&lt;SPAN class=""&gt; for projection root entity&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection; 

strict ( 2 );
define behavior for zc_travel_det //alias &amp;lt;alias_name&amp;gt; 

{ 
use create; 
use update; 
use delete; 

use action AcceptTravel; 
use action RejectTravel; 
use action CopyTravel; 
use association _booking { create; } 

} 
define behavior for zc_booking_det //alias &amp;lt;alias_name&amp;gt; 

{ 

use update; 
use delete; 
use association _travel; 
use association _bookingsuppl { create; } 

} 

define behavior for zc_booking_supp //alias &amp;lt;alias_name&amp;gt; 
{ 

use update; 
use delete; 

use association _Travel; 
use association _Booking; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;16. Create Service Definition&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'service def for travel' 
define service Zsr_travel_det { 

expose zc_travel_det; 
expose zc_booking_det; 
expose zc_booking_supp;
expose /DMO/I_Supplement_StdVH as Supplement; 
expose /DMO/I_SupplementCategory_VH as SupplementCategory; 
expose /DMO/I_Customer_StdVH as Passenger; 
expose /DMO/I_Agency_StdVH as TravelAgency; 
expose /DMO/I_Carrier_StdVH as Airline; 
expose /DMO/I_Connection_StdVH as FlightConnection; 
expose /DMO/I_Flight_StdVH as Flight; 
expose /DMO/I_Airport_StdVH as Airport; 
expose /DMO/I_Overall_Status_VH as OverallStatus; 
expose /DMO/I_Booking_Status_VH as BookingStatus; 
expose I_CurrencyStdVH as Currency; 
expose I_CountryVH as Country; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;17.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create service binding&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_0-1751354700486.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281015iFEA8DEFC3496780A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_0-1751354700486.png" alt="Pradeep555_0-1751354700486.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;18. Implement the class&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lhc_zi_travel_detail DEFINITION INHERITING FROM cl_abap_behavior_handler. 

PRIVATE SECTION. 

METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION 
IMPORTING REQUEST requested_authorizations FOR zi_travel_detail RESULT result. 
METHODS accepttravel FOR MODIFY 
IMPORTING keys FOR ACTION zi_travel_detail~accepttravel RESULT result. 
METHODS copytravel FOR MODIFY 
IMPORTING keys FOR ACTION zi_travel_detail~copytravel. 
METHODS recalctotalprice FOR MODIFY 
IMPORTING keys FOR ACTION zi_travel_detail~recalctotalprice. 
METHODS rejecttravel FOR MODIFY 
IMPORTING keys FOR ACTION zi_travel_detail~rejecttravel RESULT result. 
METHODS calctotalprice FOR DETERMINE ON MODIFY 
IMPORTING keys FOR zi_travel_detail~calctotalprice. 
METHODS earlynumbering_cba_booking FOR NUMBERING 
IMPORTING entities FOR CREATE zi_travel_detail\_booking. 
METHODS earlynumbering_create FOR NUMBERING 
IMPORTING entities FOR CREATE zi_travel_detail. 

ENDCLASS. 

CLASS lhc_zi_travel_detail IMPLEMENTATION. 
METHOD get_global_authorizations. 
ENDMETHOD. 

METHOD earlynumbering_create. 
DATA(lt_entities) = entities. 
DELETE lt_entities WHERE TravelId IS NOT INITIAL . 
TRY. 
cl_numberrange_runtime=&amp;gt;number_get( 

EXPORTING 
nr_range_nr = '01' 
object = '/DMO/TRV_M' 
quantity = CONV #( lines( lt_entities ) ) 
IMPORTING 
number = DATA(lv_latest_num) 
returncode = DATA(lv_code) 
returned_quantity = DATA(lv_qty) 

). 
CATCH cx_nr_object_not_found. 
CATCH cx_number_ranges INTO DATA(lo_error). 

LOOP AT lt_entities INTO DATA(ls_entities). 
APPEND VALUE #( %cid = ls_entities-%cid 
%key = ls_entities-%key ) 
TO failed-zi_travel_detail. 
APPEND VALUE #( %cid = ls_entities-%cid 
%key = ls_entities-%key 
%msg = lo_error ) 
TO reported-zi_travel_detail. 
ENDLOOP. 
EXIT. 
ENDTRY.. 

ASSERT lv_qty = lines( lt_entities ). 
DATA(lv_curr_num) = lv_latest_num - lv_qty. 
LOOP AT lt_entities INTO ls_entities. 
lv_curr_num = lv_curr_num + 1. 
APPEND VALUE #( %cid = ls_entities-%cid 
TravelId = lv_curr_num ) 
TO mapped-zi_travel_detail. 
ENDLOOP. 
ENDMETHOD. 

METHOD earlynumbering_cba_Booking. 

DATA : lv_max_booking TYPE /dmo/booking_id. 
READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail BY \_booking 
FROM CORRESPONDING #( entities ) 
LINK DATA(lt_link_data). 
LOOP AT entities ASSIGNING FIELD-SYMBOL(&amp;lt;ls_group_entity&amp;gt;) 
GROUP BY &amp;lt;ls_group_entity&amp;gt;-TravelId. 

lv_max_booking = REDUCE #( INIT lv_max = CONV /dmo/booking_id( '0' ) 
FOR ls_link IN lt_link_data USING KEY entity 
WHERE ( source-TravelId = &amp;lt;ls_group_entity&amp;gt;-TravelId ) 
NEXT lv_max = COND /dmo/booking_id( WHEN lv_max &amp;lt; ls_link-target-BookingId 
THEN ls_link-target-BookingId 
ELSE lv_max ) ). 

lv_max_booking = REDUCE #( INIT lv_max = lv_max_booking 
FOR ls_entity IN entities USING KEY entity 
WHERE ( TravelId = &amp;lt;ls_group_entity&amp;gt;-TravelId ) 
FOR ls_booking IN ls_entity-%target 
NEXT lv_max = COND /dmo/booking_id( WHEN lv_max &amp;lt; ls_booking-BookingId 
THEN ls_booking-BookingId 
ELSE lv_max ) ). 
LOOP AT entities ASSIGNING FIELD-SYMBOL(&amp;lt;ls_entities&amp;gt;) 
USING KEY entity 
WHERE TravelId = &amp;lt;ls_group_entity&amp;gt;-TravelId. 

LOOP AT &amp;lt;ls_entities&amp;gt;-%target ASSIGNING FIELD-SYMBOL(&amp;lt;ls_booking&amp;gt;). 
IF &amp;lt;ls_booking&amp;gt;-BookingId IS INITIAL. 
lv_max_booking += 10. 
APPEND CORRESPONDING #( &amp;lt;ls_booking&amp;gt; ) TO mapped-zi_booking_detail ASSIGNING FIELD-SYMBOL(&amp;lt;ls_new_map_book&amp;gt;). 
&amp;lt;ls_new_map_book&amp;gt;-BookingId = lv_max_booking. 

ENDIF. 
ENDLOOP. 
ENDLOOP. 

ENDLOOP. 
ENDMETHOD. 

METHOD AcceptTravel. 
MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 

UPDATE FIELDS ( OverallStatus ) 
WITH VALUE #( FOR ls_keys IN keys ( %tky = ls_keys-%tky 
OverallStatus = 'A') ). 
READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
ALL FIELDS WITH CORRESPONDING #( keys ) 
RESULT DATA(lt_result). 
result = VALUE #( FOR ls_result IN lt_result ( %tky = ls_result-%tky 
%param = ls_result ) ). 

ENDMETHOD. 
METHOD CopyTravel. 
ENDMETHOD. 

 

METHOD RecalcTotalPrice.

TYPES : BEGIN OF ty_total, 
price TYPE /dmo/total_price, 
curr TYPE /dmo/currency_code, 
END OF ty_total. 

DATA : lt_total TYPE TABLE OF ty_total, 
lv_conv_price TYPE ty_total-price. 

READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
FIELDS ( BookingFee CurrencyCode ) 
WITH CORRESPONDING #( keys ) 
RESULT DATA(lt_travel). 
DELETE lt_travel WHERE CurrencyCode IS INITIAL. 

READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail BY \_booking 
FIELDS ( FlightPrice CurrencyCode ) 
WITH CORRESPONDING #( lt_travel ) 
RESULT DATA(lt_ba_booking) . 

READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_booking_detail BY \_bookingsuppl 
FIELDS ( Price CurrencyCode ) 
WITH CORRESPONDING #( lt_ba_booking ) 
RESULT DATA(lt_ba_bookingsupp) . 
LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(&amp;lt;ls_travel&amp;gt;). 
lt_total = VALUE #( ( price = &amp;lt;ls_travel&amp;gt;-BookingFee curr = &amp;lt;ls_travel&amp;gt;-CurrencyCode ) ). 

LOOP AT lt_ba_booking ASSIGNING FIELD-SYMBOL(&amp;lt;ls_booking&amp;gt;) 
USING KEY entity 
WHERE TravelId = &amp;lt;ls_travel&amp;gt;-TravelId 
AND CurrencyCode IS NOT INITIAL.

APPEND VALUE #( price = &amp;lt;ls_booking&amp;gt;-FlightPrice curr = &amp;lt;ls_booking&amp;gt;-CurrencyCode ) 
TO lt_total. 

LOOP AT lt_ba_bookingsupp ASSIGNING FIELD-SYMBOL(&amp;lt;ls_bookingsupp&amp;gt;) 
USING KEY entity 
WHERE TravelId = &amp;lt;ls_booking&amp;gt;-TravelId 

AND BookingId = &amp;lt;ls_booking&amp;gt;-BookingId 
AND CurrencyCode IS NOT INITIAL. 
APPEND VALUE #( price = &amp;lt;ls_bookingsupp&amp;gt;-Price curr = &amp;lt;ls_bookingsupp&amp;gt;-CurrencyCode ) 

TO lt_total. 
ENDLOOP. 
ENDLOOP. 

LOOP AT lt_total ASSIGNING FIELD-SYMBOL(&amp;lt;ls_total&amp;gt;). 
IF &amp;lt;ls_total&amp;gt;-curr = &amp;lt;ls_travel&amp;gt;-CurrencyCode . 
lv_conv_price = &amp;lt;ls_total&amp;gt;-price . 
ELSE. 

/dmo/cl_flight_amdp=&amp;gt;convert_currency( 

EXPORTING 
iv_amount = &amp;lt;ls_total&amp;gt;-price 
iv_currency_code_source = &amp;lt;ls_total&amp;gt;-curr 
iv_currency_code_target = &amp;lt;ls_travel&amp;gt;-CurrencyCode 
iv_exchange_rate_date = cl_abap_context_info=&amp;gt;get_system_date( ) 
IMPORTING 
ev_amount = lv_conv_price 

). 

ENDIF. 
&amp;lt;ls_travel&amp;gt;-TotalPrice = &amp;lt;ls_travel&amp;gt;-TotalPrice + lv_conv_price. 
ENDLOOP.

MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
UPDATE FIELDS ( TotalPrice ) 
WITH CORRESPONDING #( lt_travel ). 
ENDLOOP. 

ENDMETHOD. 
METHOD RejectTravel. 

MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 

ENTITY zi_travel_detail 
UPDATE FIELDS ( OverallStatus ) 
WITH VALUE #( FOR ls_keys IN keys ( %tky = ls_keys-%tky 
OverallStatus = 'X') ) 
REPORTED DATA(lt_travel). 

READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
ALL FIELDS WITH CORRESPONDING #( keys ) 
RESULT DATA(lt_result). 
result = VALUE #( FOR ls_result IN lt_result ( %tky = ls_result-%tky 
%param = ls_result ) ). 
ENDMETHOD. 

METHOD CalcTotalPrice. 

MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
EXECUTE RecalcTotalPrice 
FROM CORRESPONDING #( keys ). 
ENDMETHOD. 

ENDCLASS. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;18.&amp;nbsp;&lt;SPAN&gt;Here we are calculating the total&amp;nbsp; price , whenever somebody changes the total&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Price and currency manually this determination&amp;nbsp; should call on transactional phase(on modify)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD CalcTotalPrice. 

MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
EXECUTE RecalcTotalPrice 
FROM CORRESPONDING #( keys ). 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;19.&amp;nbsp;&amp;nbsp;&lt;SPAN&gt;will call RecacTotalPrice for each determination&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;All the travel id which we modify&amp;nbsp; will trigger when we are calculating total price&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;RecacTotalPrice--&amp;gt; will be called . We need to write the logic to modify&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Our BO instance based on travel ID And it will read and updae the price&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Here the action will take care of the process – when we change the price&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;( based on determination ) action will be called&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And as soon as price filed changes, determination happens&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;And we need to read the travel entity with fields booking fee and currency code&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;And we need to provide travel IDs which is present in keys&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Result is taken in LT_TRAVEL&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Same thing we need to do it for boking and booking suppliment&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD RecalcTotalPrice. 

TYPES : BEGIN OF ty_total, 
price TYPE /dmo/total_price, 
curr TYPE /dmo/currency_code, 
END OF ty_total. 

DATA : lt_total TYPE TABLE OF ty_total, 
lv_conv_price TYPE ty_total-price. 

READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
FIELDS ( BookingFee CurrencyCode ) 
WITH CORRESPONDING #( keys ) 
RESULT DATA(lt_travel). 

DELETE lt_travel WHERE CurrencyCode IS INITIAL. 
READ ENTITIES OF zi_travel_detail IN LOCAL MODE 

ENTITY zi_travel_detail BY \_booking 
FIELDS ( FlightPrice CurrencyCode ) 
WITH CORRESPONDING #( lt_travel ) 
RESULT DATA(lt_ba_booking) . 
READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_booking_detail BY \_bookingsuppl 
FIELDS ( Price CurrencyCode ) 
WITH CORRESPONDING #( lt_ba_booking ) 

RESULT DATA(lt_ba_bookingsupp) . 

LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(&amp;lt;ls_travel&amp;gt;). 
lt_total = VALUE #( ( price = &amp;lt;ls_travel&amp;gt;-BookingFee curr = &amp;lt;ls_travel&amp;gt;-CurrencyCode ) ). 

LOOP AT lt_ba_booking ASSIGNING FIELD-SYMBOL(&amp;lt;ls_booking&amp;gt;) 
USING KEY entity 
WHERE TravelId = &amp;lt;ls_travel&amp;gt;-TravelId 
AND CurrencyCode IS NOT INITIAL. 
APPEND VALUE #( price = &amp;lt;ls_booking&amp;gt;-FlightPrice curr = &amp;lt;ls_booking&amp;gt;-CurrencyCode ) 
TO lt_total. 
LOOP AT lt_ba_bookingsupp ASSIGNING FIELD-SYMBOL(&amp;lt;ls_bookingsupp&amp;gt;) 
USING KEY entity 

WHERE TravelId = &amp;lt;ls_booking&amp;gt;-TravelId 
AND BookingId = &amp;lt;ls_booking&amp;gt;-BookingId 
AND CurrencyCode IS NOT INITIAL. 

APPEND VALUE #( price = &amp;lt;ls_bookingsupp&amp;gt;-Price curr = &amp;lt;ls_bookingsupp&amp;gt;-CurrencyCode ) 
TO lt_total. 

ENDLOOP. 
ENDLOOP. 


LOOP AT lt_total ASSIGNING FIELD-SYMBOL(&amp;lt;ls_total&amp;gt;). 

IF &amp;lt;ls_total&amp;gt;-curr = &amp;lt;ls_travel&amp;gt;-CurrencyCode . 
lv_conv_price = &amp;lt;ls_total&amp;gt;-price . 
ELSE. 

/dmo/cl_flight_amdp=&amp;gt;convert_currency( 
EXPORTING 
iv_amount = &amp;lt;ls_total&amp;gt;-price 
iv_currency_code_source = &amp;lt;ls_total&amp;gt;-curr 
iv_currency_code_target = &amp;lt;ls_travel&amp;gt;-CurrencyCode 
iv_exchange_rate_date = cl_abap_context_info=&amp;gt;get_system_date( ) 
IMPORTING 
ev_amount = lv_conv_price 

). 
 
ENDIF. 

&amp;lt;ls_travel&amp;gt;-TotalPrice = &amp;lt;ls_travel&amp;gt;-TotalPrice + lv_conv_price. 

ENDLOOP. 

MODIFY ENTITIES OF zi_travel_detail in LOCAL MODE 
ENTITY zi_travel_detail 
UPDATE FIELDS ( TotalPrice ) 
WITH CORRESPONDING #( lt_travel ). 
ENDLOOP. 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;20.&amp;nbsp;&amp;nbsp;&lt;SPAN class=""&gt;Class for booking&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; suppliment&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lhc_zi_booking_supp DEFINITION INHERITING FROM cl_abap_behavior_handler. 

PRIVATE SECTION. 

METHODS CalcTotalPrice FOR DETERMINE ON MODIFY 
IMPORTING keys FOR zi_booking_supp~CalcTotalPrice. 
METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION 
IMPORTING REQUEST requested_authorizations FOR zi_booking_supp RESULT result. 
ENDCLASS. 

CLASS lhc_zi_booking_supp IMPLEMENTATION. 
METHOD CalcTotalPrice. 

ENDMETHOD. 
METHOD get_global_authorizations. 
ENDMETHOD. 

ENDCLASS. 
 
CLASS lhc_zi_booking_detail DEFINITION INHERITING FROM cl_abap_behavior_handler. 

PRIVATE SECTION. 
METHODS earlynumbering_cba_Bookingsupp FOR NUMBERING 

IMPORTING entities FOR CREATE zi_booking_detail\_Bookingsuppl. 
METHODS CalcTotalPrice FOR DETERMINE ON MODIFY 
IMPORTING keys FOR zi_booking_detail~CalcTotalPrice. 

METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION 
IMPORTING REQUEST requested_authorizations FOR zi_booking_detail RESULT result. 

ENDCLASS. 


CLASS lhc_zi_booking_detail IMPLEMENTATION. 

METHOD earlynumbering_cba_Bookingsupp. 
DATA: max_booking_suppl_id TYPE /dmo/booking_supplement_id . 
READ ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_booking_detail BY \_Bookingsuppl 
FROM CORRESPONDING #( entities ) 
LINK DATA(booking_supplements). 

" Loop over all unique tky (TravelID + BookingID) 
LOOP AT entities ASSIGNING FIELD-SYMBOL(&amp;lt;booking_group&amp;gt;) GROUP BY &amp;lt;booking_group&amp;gt;-%tky. 

" Get highest bookingsupplement_id from bookings belonging to booking 
max_booking_suppl_id = REDUCE #( INIT max = CONV /dmo/booking_supplement_id( '0' ) 

FOR booksuppl IN booking_supplements USING KEY entity 
WHERE ( source-TravelId = &amp;lt;booking_group&amp;gt;-TravelId 
AND source-BookingId = &amp;lt;booking_group&amp;gt;-BookingId ) 
NEXT max = COND /dmo/booking_supplement_id( WHEN booksuppl-target-BookingSupplementId &amp;gt; max 
THEN booksuppl-target-BookingSupplementId 
ELSE max ) 

). 
" Get highest assigned bookingsupplement_id from incoming entities 

max_booking_suppl_id = REDUCE #( INIT max = max_booking_suppl_id 
FOR entity IN entities USING KEY entity 
WHERE ( TravelId = &amp;lt;booking_group&amp;gt;-TravelId 
AND BookingId = &amp;lt;booking_group&amp;gt;-BookingId ) 
FOR target IN entity-%target 
NEXT max = COND /dmo/booking_supplement_id( WHEN target-BookingSupplementId &amp;gt; max 
THEN target-BookingSupplementId 
ELSE max ) 

). 
" Loop over all entries in entities with the same TravelID and BookingID
LOOP AT entities ASSIGNING FIELD-SYMBOL(&amp;lt;booking&amp;gt;) USING KEY entity WHERE TravelId = &amp;lt;booking_group&amp;gt;-TravelId 
AND BookingId = &amp;lt;booking_group&amp;gt;-BookingId. 

" Assign new booking_supplement-ids 
LOOP AT &amp;lt;booking&amp;gt;-%target ASSIGNING FIELD-SYMBOL(&amp;lt;booksuppl_wo_numbers&amp;gt;). 
APPEND CORRESPONDING #( &amp;lt;booksuppl_wo_numbers&amp;gt; ) TO mapped-zi_booking_supp ASSIGNING FIELD-SYMBOL(&amp;lt;mapped_booksuppl&amp;gt;). 
IF &amp;lt;booksuppl_wo_numbers&amp;gt;-BookingSupplementId IS INITIAL. 
max_booking_suppl_id += 1 . 
&amp;lt;mapped_booksuppl&amp;gt;-BookingSupplementId = max_booking_suppl_id . 
ENDIF. 
ENDLOOP. 
ENDLOOP. 
ENDLOOP.
ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;21.&amp;nbsp;&lt;SPAN&gt;Based on the booking fee&amp;nbsp; we need to calculate the total price&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;So we need to write the logic in calcTotal price&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;method&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD CalcTotalPrice. 

DATA : it_travel TYPE STANDARD TABLE OF zpd_dt_travel WITH UNIQUE HASHED KEY key COMPONENTS travel_id. 
it_travel = CORRESPONDING #( keys DISCARDING DUPLICATES MAPPING travel_id = TravelId ). 

MODIFY ENTITIES OF zi_travel_detail IN LOCAL MODE 
ENTITY zi_travel_detail 
EXECUTE RecalcTotalPrice 
FROM CORRESPONDING #( it_travel ). 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;22. OUTPUT&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_1-1751356413745.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281056i9F607E3B71E7BBD6/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_1-1751356413745.png" alt="Pradeep555_1-1751356413745.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;23.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Edit--&amp;gt; changing booking fee from 140 USD to 240&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;USD&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_3-1751356464751.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281061i80F49161DD120248/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_3-1751356464751.png" alt="Pradeep555_3-1751356464751.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_4-1751356486334.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281062iBFFF53176F80B0A8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_4-1751356486334.png" alt="Pradeep555_4-1751356486334.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;24.&amp;nbsp; &amp;nbsp;&lt;SPAN&gt;Click on save&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&amp;lt; after saving , the total price is still the same ---&amp;gt; not updated at the screen level&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_5-1751356553915.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281066iE1EEC86B86A98E04/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_5-1751356553915.png" alt="Pradeep555_5-1751356553915.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;25.&amp;nbsp;&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When we refresh the page—the total price gets updated&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_6-1751356589520.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281067iB2E6360B32F2DBFB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_6-1751356589520.png" alt="Pradeep555_6-1751356589520.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;26.&amp;nbsp; N&lt;SPAN&gt;ow we need to use the side effects to make the data refreshed on save at screen level&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;, So n&lt;/SPAN&gt;&lt;SPAN&gt;ow it should not only be updated in the transactional buffer – it should&amp;nbsp; also be updated in the front end&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_7-1751356689309.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281068iF69F21F2160CCEBB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_7-1751356689309.png" alt="Pradeep555_7-1751356689309.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;27.&amp;nbsp;&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Change the booking fee 258 USD&amp;nbsp; and click on save&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_8-1751356741975.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281069i705DAB1959677231/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_8-1751356741975.png" alt="Pradeep555_8-1751356741975.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;28.&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;As soon as you click on save&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pradeep555_9-1751356776648.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281070i48252591EEDCAC73/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pradeep555_9-1751356776648.png" alt="Pradeep555_9-1751356776648.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thanks and regards&amp;nbsp;&lt;/P&gt;&lt;P&gt;-PRADEEP ISHWAR DEVADIGA&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/side-effects-in-rap-explained-with-determination-example/ba-p/14140206"/>
    <published>2025-07-02T10:28:03.987000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/you-won-t-believe-where-zllm-s-documentation-lives-and-how-it-got-there/ba-p/14142558</id>
    <title>You Won't Believe Where ZLLM's Documentation Lives (And How It Got There)</title>
    <updated>2025-07-02T12:45:53.530000+02:00</updated>
    <author>
      <name>Alice_V</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/609259</uri>
    </author>
    <content>&lt;P class=""&gt;&lt;STRONG&gt;How I Made AI Write Its Own Documentation... In SAP's Standard Format&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;Spoiler: The AI is already documenting itself in production*.&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281751i486F7C73DE5E4FF9/image-size/large?v=v2&amp;amp;px=999" role="button" title="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" alt="ChatGPT Image Jul 2, 2025, 12_07_15 PM.png" /&gt;&lt;/span&gt;&lt;/EM&gt;&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;Hello again! &lt;span class="lia-unicode-emoji" title=":waving_hand:"&gt;👋&lt;/span&gt; It's Alice, and I have a confession: I absolutely &lt;STRONG&gt;love&lt;/STRONG&gt; writing documentation.&lt;/P&gt;&lt;P class=""&gt;But I hate writing it &lt;STRONG&gt;BY HAND&lt;/STRONG&gt;. Especially in SAP's bizarre ITF format - that cryptic markup language designed back when the closest thing to modern markup was SGML, and HTML didn't even exist yet!&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;(Fun fact: ITF format was actually designed for SAPscript in the early 1980s as part of SAP R/2 - when "markup language" meant something completely different! &lt;/EM&gt;&lt;STRONG&gt;^_^&lt;/STRONG&gt;&lt;EM&gt;)&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;But here's the thing - ZLLM has &lt;STRONG&gt;incredible&lt;/STRONG&gt; documentation. Comprehensive, detailed, and perfectly formatted. And it lives exactly where every SAP developer &lt;STRONG&gt;NOT&lt;/STRONG&gt; expects it: behind the standard &lt;STRONG&gt;"Show Documentation"&lt;/STRONG&gt; button &lt;span class="lia-unicode-emoji" title=":grinning_face_with_big_eyes:"&gt;😃&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Alice_V_0-1751454104363.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281748i6712CECE39FC9FA7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Alice_V_0-1751454104363.png" alt="Alice_V_0-1751454104363.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="ember4460" id="toc-hId-1863196651"&gt;Plot Twist:&lt;/H3&gt;&lt;P class=""&gt;I didn't write a single line of that documentation manually.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM documented itself.&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4463" id="toc-hId-1666683146"&gt;The Documentation That Writes Itself&lt;/H3&gt;&lt;P class=""&gt;Click on any ZLLM class in SE80 or ADT. Hit &lt;STRONG&gt;CTRL+SHIFT+F2&lt;/STRONG&gt; (Show Documentation).&lt;/P&gt;&lt;P class=""&gt;What you'll see isn't your typical sparse ABAP documentation. It's rich, detailed, with examples, architecture diagrams, and usage patterns. All perfectly formatted in SAP's native documentation system.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Here's what makes this magical:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;The documentation exists in &lt;STRONG&gt;standard SAP format&lt;/STRONG&gt; (ITF), appears in &lt;STRONG&gt;standard SAP locations&lt;/STRONG&gt;, but was generated by &lt;STRONG&gt;modern AI&lt;/STRONG&gt; and written in &lt;STRONG&gt;human-readable Markdown&lt;/STRONG&gt; first.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember4468" id="toc-hId-1341086922"&gt;How I Built The Documentation Factory&lt;/H2&gt;&lt;H3 id="ember4469" id="toc-hId-1273656136"&gt;Step 1: The Analysis Phase&lt;/H3&gt;&lt;PRE&gt;" ZLLM analyzes the codebase
DATA(lo_analyzer) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
  iv_usr = 'Analyze this ABAP class and extract:'
           '- Purpose and responsibility'
           '- Public methods and parameters' 
           '- Usage patterns and examples'
           '- Integration points: {T}'
  io_llm = lo_llm
).&lt;/PRE&gt;&lt;H3 id="ember4470" id="toc-hId-1077142631"&gt;Step 2: The Generation Phase&lt;/H3&gt;&lt;PRE&gt;" Generate comprehensive Markdown documentation
DATA(lo_generator) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
  iv_usr = 'Create technical documentation in Markdown format:'
           '- Overview section with clear purpose'
           '- Method documentation with examples'
           '- Code samples showing real usage'
           '- Integration notes and best practices'
           'Based on analysis: {T}'
  io_llm = lo_llm
).&lt;/PRE&gt;&lt;H3 id="ember4471" id="toc-hId-880629126"&gt;Step 3: The Integration Magic&lt;/H3&gt;&lt;PRE&gt;" Chain it all together
DATA(lo_doc_flow) = zcl_llm_00_flow_lazy=&amp;gt;new( VALUE #(
  ( lo_analyzer )
  ( lo_generator )
) ).

" Generate docs for entire framework
DATA(lr_result) = lo_doc_flow-&amp;gt;exec( REF #( class_metadata ) ).&lt;/PRE&gt;&lt;P class=""&gt;&lt;EM&gt;For the Markdown → ITF conversion and integration with SAP's documentation system, I used another one of my frameworks: &lt;/EM&gt;&lt;STRONG&gt;&lt;EM&gt;XRAY&lt;/EM&gt;&lt;/STRONG&gt;&lt;EM&gt;. But that's a story for another article... &lt;/EM&gt;&lt;STRONG&gt;^_^&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4473" id="toc-hId-684115621"&gt;The Real Magic: Production-Ready Documentation&lt;/H3&gt;&lt;P class=""&gt;This isn't a toy example. This is &lt;STRONG&gt;live, production documentation&lt;/STRONG&gt; that:&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Appears in standard SAP tools&lt;/STRONG&gt; (SE80, ADT, SE11)&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Follows SAP documentation conventions&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Updates automatically&lt;/STRONG&gt;when code changes&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Includes real examples&lt;/STRONG&gt;and usage patterns&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;&lt;STRONG&gt;Maintains technical accuracy&lt;/STRONG&gt; through AI analysis&lt;/P&gt;&lt;H3 id="ember4480" id="toc-hId-487602116"&gt;### Before vs After:&lt;/H3&gt;&lt;P class=""&gt;&lt;STRONG&gt;Traditional SAP Documentation:&lt;/STRONG&gt;&lt;/P&gt;&lt;PRE&gt;* It is a class.&lt;/PRE&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM-Generated Documentation:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Alice_V_1-1751452613795.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281732i7CDDAF2B7649AF1E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Alice_V_1-1751452613795.png" alt="Alice_V_1-1751452613795.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;HR /&gt;&lt;H2 id="ember4485" id="toc-hId-162005892"&gt;Why This Changes a Lot&lt;/H2&gt;&lt;H3 id="ember4486" id="toc-hId-94575106"&gt;For SAP Developers:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;No more "TODO: Add documentation" comments&lt;/LI&gt;&lt;LI&gt;Comprehensive docs appear automatically in familiar places&lt;/LI&gt;&lt;LI&gt;Examples and usage patterns generated from actual code&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;For Enterprise Teams:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Documentation stays current with code changes&lt;/LI&gt;&lt;LI&gt;Consistent format across entire codebase&lt;/LI&gt;&lt;LI&gt;Onboarding new developers becomes trivial&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;For AI Adoption:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Demonstrates practical AI value in daily development&lt;/LI&gt;&lt;LI&gt;Shows integration with existing enterprise tools&lt;/LI&gt;&lt;LI&gt;Proves AI can enhance rather than replace existing workflows&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember4492" id="toc-hId--177169768"&gt;The Recursive Beauty&lt;/H3&gt;&lt;P class=""&gt;Here's the beautiful irony: &lt;STRONG&gt;ZLLM used itself to document itself.&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;The framework that makes enterprise AI integration effortless also made documenting itself effortless. It's AI all the way down.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4495" id="toc-hId--373683273"&gt;How You Can Build This&lt;/H3&gt;&lt;P class=""&gt;Want to auto-document your own ABAP code? Here's the starter pattern:&lt;/P&gt;&lt;PRE&gt;METHOD auto_document_class.
  " 1. Extract class metadata
  DATA(lo_metadata) = extract_class_info( iv_class_name ).
  
  " 2. Generate documentation
  DATA(lo_doc_step) = zcl_llm_00_step_lazy=&amp;gt;new_from_string(
    iv_usr = 'Create comprehensive documentation for this ABAP class: {T}'
    io_llm = lo_llm
  ).
  
  " 3. Chain and execute
  DATA(lo_flow) = zcl_llm_00_flow_lazy=&amp;gt;new( VALUE #(
    ( lo_doc_step )
  ) ).
  
  DATA(lv_markdown_doc) = lo_flow-&amp;gt;start( REF #( lo_metadata ) )-&amp;gt;to_string( ).
  
ENDMETHOD.&lt;/PRE&gt;&lt;HR /&gt;&lt;H2 id="ember4497" id="toc-hId--276793771"&gt;The Bigger Picture&lt;/H2&gt;&lt;P class=""&gt;This isn't just about documentation. It's about &lt;STRONG&gt;AI that enhances existing enterprise workflows&lt;/STRONG&gt; instead of disrupting them.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Traditional AI Integration:&lt;/STRONG&gt; "We need new tools, new processes, new training..."&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;ZLLM Approach:&lt;/STRONG&gt; "Your existing tools just got smarter."&lt;/P&gt;&lt;P class=""&gt;The documentation appears exactly where SAP developers (not?) expect it. No new interfaces to learn. No new processes to adopt. Just better, more comprehensive information in familiar places.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember4503" id="toc-hId--473307276"&gt;What's Next?&lt;/H2&gt;&lt;P class=""&gt;This is just one example of ZLLM eating its own dog food. Other production uses:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Code Analysis&lt;/STRONG&gt;- Analyzing patterns across the entire ABAP stack&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Performance Monitoring&lt;/STRONG&gt;- Generating insights from system metrics&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Test Generation&lt;/STRONG&gt;- Creating unit tests from business requirements&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Migration Planning&lt;/STRONG&gt; - Analyzing code dependencies for S/4HANA migration&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember4509" id="toc-hId--963223788"&gt;Ready to Document Your Code Automatically?&lt;/H3&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":star:"&gt;⭐&lt;/span&gt;&lt;STRONG&gt;Explore ZLLM: -&amp;gt; github/oisee/zllm&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Comment below:&lt;/STRONG&gt;What part of your ABAP development would you want AI to handle?&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":counterclockwise_arrows_button:"&gt;🔄&lt;/span&gt;&lt;STRONG&gt;Share&lt;/STRONG&gt; if you think your SAP team needs this&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Try it yourself:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;1. Install ZLLM in your development system&lt;/P&gt;&lt;P class=""&gt;2. Run the documentation generator on your classes&lt;/P&gt;&lt;P class=""&gt;3. Watch as comprehensive docs appear in standard SAP locations&lt;/P&gt;&lt;P class=""&gt;4. Never write manual documentation again&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;About Alice Vinogradova:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Senior Software Engineer with 20+ years in ABAP/SAP. I specialize in making enterprise AI practical, starting with solving our own problems first. If the AI can't document itself, how can it document your business processes?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;P.S.&lt;/STRONG&gt; Yes, this article was edited by ZLLM too. And the Markdown → ITF conversion? That's handled by my &lt;STRONG&gt;XRAY&lt;/STRONG&gt; framework - another story of making SAP development less painful. It's recursive intelligence all the way down.&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;*production &lt;/STRONG&gt;for development - is development.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Tags:&lt;/STRONG&gt; #SAP #ABAP #AI #Documentation #TechLeadership #Automation&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;"The ideal documentation is one that doesn't need to be written because it writes itself."&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/you-won-t-believe-where-zllm-s-documentation-lives-and-how-it-got-there/ba-p/14142558"/>
    <published>2025-07-02T12:45:53.530000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-using-snro/ba-p/14142454</id>
    <title>ABAP Cloud - Number ranges ( Using SNRO )</title>
    <updated>2025-07-02T13:44:45.577000+02:00</updated>
    <author>
      <name>sanjay22</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1535416</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;ABAP Cloud - Number ranges&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;How can you use number ranges in ABAP Cloud and does this actually still make sense? In this article we will look at some of the background information.&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Number range objects and number ranges have long been a standard feature across various SAP specialist modules. But what’s the current approach in ABAP Cloud? Do we still need these objects? In this article, we’ll explore the new concepts introduced in ABAP Cloud and how you can effectively work with them.&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Introduction&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In traditional on-premise systems, the SNRO transaction was your go-to tool for creating and managing number ranges. However, with ABAP Cloud, the landscape has changed transactions like SNRO are no longer available, and maintaining intervals directly is no longer an option. Instead, SAP now offers a set of &lt;STRONG&gt;&lt;SPAN&gt;ABAP APIs&lt;SPAN&gt; along with a&lt;STRONG&gt;&lt;SPAN&gt; dedicated Fiori app&lt;SPAN&gt; to handle number range management. In this post, we’ll take a closer look at these new tools and how you can use them effectively in the cloud environment.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Why do we actually need number ranges and consecutive numbers in the system? Data is stored in databases and records in relational databases usually require a unique key. To assign numbers automatically, we could always look at the database and calculate the current ID plus 1 to get a new unique key. However, since we are not alone on the system and several booking processes can run at the same time, this would not guarantee that we would always receive a unique number. Number range objects therefore manage the individual number range statuses and always give us a unique number via a function and take care of the increase.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;ABAP Cloud&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When developing with ABAP Cloud, we rely on the ABAP RESTful Programming Model, or RAP for short, which very often uses GUIDs to manage the keys. The GUIDs are generated randomly and we don't have to worry about managing the key. Furthermore, we can change any field in the data record in the workflow if we want to. If we need a readable or unique key in our data record, we can also use a semantic key, which we can also declare as unique, but we have to carry out the check ourselves.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, with this method we cannot prove any sequence or gaps in the data. Therefore, in certain technical scenarios it still makes sense to use number ranges to create a semantic key.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Creation&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can easily create the number range object using the ABAP Development Tools. In the following steps we create a domain and then the appropriate object.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Domain&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In order to create a number range, we first need a domain that determines the data type. To do this, we create a domain using the context menu; a new domain on our system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1751447849631.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281697i14125F098676E677/image-size/medium?v=v2&amp;amp;px=400" role="button" title="sanjay22_0-1751447849631.png" alt="sanjay22_0-1751447849631.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;We then give the domain a type that &lt;SPAN class=""&gt;determines&lt;SPAN class=""&gt; the number and options of the generated numbers.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Number Range Object (ADT)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can now create a number range object. Here we have to make sure that the name is not too long, as the field currently only has 10 characters.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_2-1751447688733.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281696i13E2231896BE3102/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_2-1751447688733.png" alt="sanjay22_2-1751447688733.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="sanjay22_1-1751447649935.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281695iB0D437613087A38C/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_1-1751447649935.png" alt="sanjay22_1-1751447649935.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Created the &lt;/SPAN&gt;&lt;SPAN class=""&gt;ABAP class in &lt;/SPAN&gt;&lt;SPAN class=""&gt;RAP application using ADT &lt;/SPAN&gt;&lt;SPAN class=""&gt;to check SNRO number range object&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_rap_snro_number_range DEFINITION 

PUBLIC 

FINAL 

CREATE PUBLIC . 

 

PUBLIC SECTION. 

INTERFACES if_oo_adt_classrun. 

 

PROTECTED SECTION. 

PRIVATE SECTION. 

ENDCLASS. 

 

 

 

CLASS zcl_rap_snro_number_range IMPLEMENTATION. 

METHOD if_oo_adt_classrun~main. 

TRY. 

zcl_sm_helper_class=&amp;gt;get_snro_id( EXPORTING iv_range_nr = '01' 

iv_object = 'ZSM_USERID' 

IMPORTING ev_num = DATA(lv_num) ). 

CATCH cx_number_ranges INTO DATA(lx_obj). 

out-&amp;gt;write( lx_obj-&amp;gt;get_text( ) ). 

ENDTRY. 

out-&amp;gt;write( |EI{ lv_num+12(8) }| ). 

ENDMETHOD. 

 

ENDCLASS. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Next&lt;/SPAN&gt;&lt;SPAN class=""&gt; we have &lt;/SPAN&gt;&lt;SPAN class=""&gt;an&lt;/SPAN&gt;&lt;SPAN class=""&gt; helper class --&amp;gt;&amp;gt; &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;ZCL_SM_HELPER_CLASS&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_sm_helper_class DEFINITION 

PUBLIC 

FINAL 

CREATE PUBLIC. 

 

PUBLIC SECTION. 

CLASS-METHODS get_snro_id IMPORTING iv_range_nr TYPE zsm_NRNR 

iv_object TYPE zsm_NROBJ 

EXPORTING ev_num TYPE zsm_num 

RAISING cx_number_ranges. 

 

PROTECTED SECTION. 

PRIVATE SECTION. 

ENDCLASS. 

 

CLASS zcl_sm_helper_class IMPLEMENTATION. 

METHOD get_snro_id. 

TRY. 

cl_numberrange_intervals=&amp;gt;read( EXPORTING nr_range_nr1 = iv_range_nr 

* nr_range_nr2 = 

object = iv_object 

* subobject = 

IMPORTING interval = DATA(ls_interval) ). 

CATCH cx_nr_object_not_found INTO DATA(lx_obj1). " TODO: variable is assigned but never used (ABAP cleaner) 

 

CATCH cx_nr_subobject INTO DATA(lx_obj2). " TODO: variable is assigned but never used (ABAP cleaner) 

 

CATCH cx_number_ranges INTO DATA(lx_obj3). " TODO: variable is assigned but never used (ABAP cleaner) 

 

ENDTRY. 

 

IF ls_interval IS INITIAL. 

 

TRY. 

 

cl_numberrange_intervals=&amp;gt;create( 

interval = VALUE #( ( nrrangenr = '01' fromnumber = '00000001' tonumber = '99999999' ) ) 

object = iv_object ). 

* subobject = 

* option = 

* IMPORTING 

* error = 

* error_inf = 

* error_iv = 

* warning = 

CATCH cx_nr_object_not_found INTO DATA(lx_obj4). " TODO: variable is assigned but never used (ABAP cleaner) 

 

CATCH cx_number_ranges INTO DATA(lx_obj5). " TODO: variable is assigned but never used (ABAP cleaner) 

 

ENDTRY. 

ENDIF. 

TRY. 

 

cl_numberrange_runtime=&amp;gt;number_get( EXPORTING 

* ignore_buffer = 

nr_range_nr = iv_range_nr 

object = iv_object 

* quantity = 

* subobject = 

* toyear = 

IMPORTING number = ev_num 

* returncode = 

* returned_quantity = 

). 

 

CATCH cx_number_ranges INTO DATA(lx_obj). 

RAISE EXCEPTION lx_obj. 

ENDTRY. 

ENDMETHOD. 

 

ENDCLASS. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;OUTPUT: We are getting serial numbers from SNRO in the expected format.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="sanjay22_0-1751448334269.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281704iEE1BEBD964AEE0BF/image-size/large?v=v2&amp;amp;px=999" role="button" title="sanjay22_0-1751448334269.png" alt="sanjay22_0-1751448334269.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-using-snro/ba-p/14142454"/>
    <published>2025-07-02T13:44:45.577000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/bdc-batch-data-communication-using-session-method-and-call-transaction/ba-p/14141453</id>
    <title>BDC Batch Data Communication using Session Method  And Call Transaction  Method</title>
    <updated>2025-07-02T14:14:43.654000+02:00</updated>
    <author>
      <name>manijangiti</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2174619</uri>
    </author>
    <content>&lt;P&gt;This Blog provides an overview of BDC (Batch Data Communication) using the Session Method. BDC is a classic data migration technique in SAP. The Session Method is suitable for large volumes of data and allows better error handling&lt;BR /&gt;&lt;BR /&gt;For Recording the Transaction T code: &lt;STRONG&gt;SHDB&lt;BR /&gt;&lt;/STRONG&gt;Batch Input Sessions&lt;STRONG&gt;:&amp;nbsp; SM35&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;1.Session Method&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZBDC_SESSIONMETHOD_MA.

"Type declaration for customer structure
TYPES: BEGIN OF ty_customer,
         kunnr TYPE kunnr,         " Customer Number
         name1 TYPE name1_gp,      " Name
         ort01 TYPE ort01,         " City
       END OF ty_customer.

"Internal tables and variables
DATA: it_customer TYPE TABLE OF ty_customer,  " Internal table to hold customer data
      wa_customer TYPE ty_customer,           " Work area
      it_bdcdata  TYPE TABLE OF bdcdata,      " BDC table
      wa_bdcdata  TYPE bdcdata,               " BDC work area
      v_file      TYPE string.                " File path variable

DATA: p_pp TYPE string.                       " Temporary file path variable

"BDC session name (used in SM35)
DATA: lv_group TYPE apqi-groupid VALUE 'ZCUS_UPLOAD'.

"Selection screen to get file path input
PARAMETERS: p_file TYPE rlgrap-filename OBLIGATORY.

"AT SELECTION SCREEN: F4 help to choose file
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING file_name = p_file.

"START OF SELECTION
START-OF-SELECTION.

"Move user-selected file to internal variable
p_pp = p_file.

"Upload flat file with customer data
CALL FUNCTION 'GUI_UPLOAD'
  EXPORTING
    filename            = p_pp
    filetype            = 'ASC'
    has_field_separator = '|'        " Pipe delimiter
  TABLES
    data_tab = it_customer.

"Check if file has data
IF it_customer IS INITIAL.
  WRITE: / 'No data found in file.'.
  EXIT.
ENDIF.

"Open BDC session
CALL FUNCTION 'BDC_OPEN_GROUP'
  EXPORTING
    client   = sy-mandt
    group    = lv_group
    user     = sy-uname
    keep     = 'X'            " Keep session after execution
    holddate = sy-datum.      " Process date

"Loop through uploaded customer data
LOOP AT it_customer INTO wa_customer.

  CLEAR it_bdcdata.

  "First screen entries
  PERFORM bdc_dynpro      USING 'ZBDC_SCREEN' '1000'.
  PERFORM bdc_field       USING 'BDC_CURSOR' 'P_ORT01'.
  PERFORM bdc_field       USING 'BDC_OKCODE' '=ONLI'.
  PERFORM bdc_field       USING 'P_KUNNR'    wa_customer-kunnr.
  PERFORM bdc_field       USING 'P_NAME'     wa_customer-name1.
  PERFORM bdc_field       USING 'P_ORT01'    wa_customer-ort01.

  "Exit screen to return
  PERFORM bdc_dynpro      USING 'ZBDC_SCREEN' '1000'.
  PERFORM bdc_field       USING 'BDC_OKCODE' '/EE'.
  PERFORM bdc_field       USING 'BDC_CURSOR' 'P_KUNNR'.

  "Insert transaction step into the BDC session
  CALL FUNCTION 'BDC_INSERT'
    EXPORTING tcode = 'ZBDC_CUS'
    TABLES   dynprotab = it_bdcdata.

ENDLOOP.

"Close the BDC session
CALL FUNCTION 'BDC_CLOSE_GROUP'.

"Success message
WRITE: / 'BDC Session created successfully. Use SM35 to process it.'.

"-----------------------------------------
" Subroutine to add dynpro screen
"-----------------------------------------
FORM bdc_dynpro USING program screen.
  CLEAR wa_bdcdata.
  wa_bdcdata-program  = program.
  wa_bdcdata-dynpro   = screen.
  wa_bdcdata-dynbegin = 'X'.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.

"-----------------------------------------
" Subroutine to add field values
"-----------------------------------------
FORM bdc_field USING fnam fval.
  CLEAR wa_bdcdata.
  wa_bdcdata-fnam = fnam.
  wa_bdcdata-fval = fval.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.&lt;/code&gt;&lt;/pre&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manijangiti_1-1751363036602.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281199i79E6CB4545D21325/image-size/medium?v=v2&amp;amp;px=400" role="button" title="manijangiti_1-1751363036602.png" alt="manijangiti_1-1751363036602.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After execute&amp;nbsp; go to Sm35&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;2.Call Transaction Method&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZBDC_CALLTRAN_CUSTOMER.

"--- Structure Definition ---
TYPES: BEGIN OF ty_customer,
         kunnr TYPE kunnr,         " Customer Number
         name1 TYPE name1_gp,      " Name
         ort01 TYPE ort01,         " City
       END OF ty_customer.

"--- Data Declarations ---
DATA: p_file_s    TYPE string,              " To hold the selected file path
      it_customer TYPE TABLE OF ty_customer, " Internal table for uploaded data
      wa_customer TYPE ty_customer,          " Work area for one record
      it_bdcdata  TYPE TABLE OF bdcdata,     " BDC data table
      wa_bdcdata  TYPE bdcdata.              " BDC line

"--- File Input Parameter ---
PARAMETERS: p_file TYPE IBIPPARMS-PATH OBLIGATORY.

"--- F4 Help for File Selection ---
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_file.

"--- Main Program Execution ---
START-OF-SELECTION.

  " Assign selected file to variable
  p_file_s = p_file.

  " Upload the customer data from text file
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename            = p_file_s
      filetype            = 'ASC'
      has_field_separator = '|'              " Data separated by '|'
    TABLES
      data_tab            = it_customer
    EXCEPTIONS
      OTHERS              = 1.

  " Loop over each uploaded customer record
  LOOP AT it_customer INTO wa_customer.

    " Clear previous BDC data
    CLEAR it_bdcdata[].

    " Build BDC data for screen input
    PERFORM bdc_dynpro USING 'ZBDC_SCREEN' '1000'.
    PERFORM bdc_field  USING 'BDC_CURSOR' 'P_ORT01'.
    PERFORM bdc_field  USING 'BDC_OKCODE' '=ONLI'.        " Press Enter
    PERFORM bdc_field  USING 'P_KUNNR'    wa_customer-KUNNR.
    PERFORM bdc_field  USING 'P_NAME'     wa_customer-NAME1.
    PERFORM bdc_field  USING 'P_ORT01'    wa_customer-ORT01.

    " Optionally simulate pressing Exit or Back
    PERFORM bdc_dynpro USING 'ZBDC_SCREEN' '1000'.
    PERFORM bdc_field  USING 'BDC_OKCODE' '/EE'.           " Exit
    PERFORM bdc_field  USING 'BDC_CURSOR' 'P_KUNNR'.

    " Call transaction with built BDC data in background mode
    CALL TRANSACTION 'ZBDC_CUS' USING it_bdcdata
      MODE 'N'          " 'N' - Background, 'A' - Foreground, 'E' - Errors only
      UPDATE 'S'.       " Synchronous update

  ENDLOOP.

"--- Subroutine to declare dynpro screen ---
FORM bdc_dynpro USING program screen.
  CLEAR wa_bdcdata.
  wa_bdcdata-program  = program.
  wa_bdcdata-dynpro   = screen.
  wa_bdcdata-dynbegin = 'X'.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.

"--- Subroutine to assign value to a field ---
FORM bdc_field USING fnam fval.
  CLEAR wa_bdcdata.
  wa_bdcdata-fnam = fnam.
  wa_bdcdata-fval = fval.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;3. Difference Between CALL TRANSACTION and SESSION METHOD&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Aspect&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;CALL TRANSACTION&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;SESSION METHOD&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Execution&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Immediate&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Deferred via SM35&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Error Handling&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Manual/Error log&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;SM35 Session log&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Performance&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Faster, suitable for small data&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Better for large volumes&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Mode&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Foreground/Background/No Display&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Processes in background&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Data Volume&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Limited&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;Handles large volumes efficiently&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/bdc-batch-data-communication-using-session-method-and-call-transaction/ba-p/14141453"/>
    <published>2025-07-02T14:14:43.654000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/recap-sql-selection-patterns-in-sap-hana-database-presented-at-sap-inside/ba-p/14135601</id>
    <title>Recap: SQL selection patterns in SAP HANA database, presented at SAP Inside Track Wroclaw 2025</title>
    <updated>2025-07-03T10:23:24.088000+02:00</updated>
    <author>
      <name>Bogdan7</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/171709</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;A couple of words about me:&lt;/SPAN&gt;&lt;/STRONG&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;My name is Bogdan Brzozowski and I’m Managing Software Architect working for Capgemini Poland within&lt;/SPAN&gt;&amp;nbsp;more than 14 years. My current position encompasses the following responsibilities:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Establishing architecture&lt;/STRONG&gt; (ERD, UML) for ABAP based custom solutions to be implemented for our customers by our developers.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Reverse engineering&lt;/STRONG&gt; of the legacy ABAP solutions belonging to our customers to take the full responsibility for their further development and maintenance.&lt;/LI&gt;
&lt;LI&gt;Conducting &lt;STRONG&gt;internal trainings&lt;/STRONG&gt; for our technical consultants to improve their technical skills.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Presentations for external audience&lt;/STRONG&gt; to make our company visible as top provider of SAP technology-based solutions.&lt;/LI&gt;
&lt;LI&gt;&lt;STRONG&gt;Custom code conversion guidelines&lt;/STRONG&gt; – I am responsible for creation and keeping this document up to date.&lt;/LI&gt;
&lt;LI&gt;Spreading knowledge about &lt;STRONG&gt;internal Capgemini data migration tools&lt;/STRONG&gt; like Syniti or Concert Tool.&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="bb.JPG" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282032i3DE7E9FB2A986A09/image-size/large?v=v2&amp;amp;px=999" role="button" title="bb.JPG" alt="bb.JPG" /&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;A couple of sentences about the event:&lt;/SPAN&gt;&lt;/STRONG&gt; &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;SAP Inside Track was held again in Wroclaw this year. That time we met on rainy Saturday day (7-JUNE-2025) in the premises of WBS Merito University - well known private university that was event co-organizer (together with Capgemini). We welcomed attendees from 9 countries, who were participating in the sessions conducted in English by 18 presenters. Most of the presentations were running in parallel split between 2 rooms.&amp;nbsp; Predominant topics shared with the audience were related to the use of genAI in the context of SAP technologies. But there were also few sessions focusing on modern aspects of ABAP programming, like the subject presented in this blog :-).&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="baner_SIT_2025.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282033iD3B4B7DE6B9AD9FC/image-size/large?v=v2&amp;amp;px=999" role="button" title="baner_SIT_2025.png" alt="baner_SIT_2025.png" /&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;My Session:&lt;/SPAN&gt;&lt;/STRONG&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;This year I had the opportunity to do a session called “ SQL selection patterns in CDS views examples”. Good practices are worth following and this is why design patterns like singleton, factory, prototype and many others became popular within object-oriented programming languages. The same may partially apply to data retrieval from any relational database. I noticed that there are typical&amp;nbsp;techniques of data selection, that are useful in different projects for the customers from various branches: pharma, retail, automotive, utility supply to name few of them. In this blog I will share those selection patterns using syntax from ABAP Advanced Open SQL, ABAP CDS view entities and SQL script. HANA database is compliant with standard SQL ANSI 2016, so the examples presented in this blog may be useful to retrieve the data from other relational databases, which are compliant with SQL standard.. Below I would like to share main highlights, insights and key takeaways from my presentation.&lt;/SPAN&gt; &amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="inside.JPG" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/281004i71E43FB345D7BED8/image-size/large?v=v2&amp;amp;px=999" role="button" title="inside.JPG" alt="inside.JPG" /&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;Entity Relationship Diagram of the data model used for the code presented later on this blog.&lt;/P&gt;
&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ERD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279412i69CB84939E3C4E22/image-size/large?v=v2&amp;amp;px=999" role="button" title="ERD.png" alt="ERD.png" /&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;Sales Order header is kept in VBAK table, while its items in VBAP. Additionally all the changes within Sales Order data are recorded in so called Change Documents with 2 main tables: CDHDR as the change header and CDPOS that stores old and new value of a given field. ERD diagram above uses well known crow's foot notation - see more details &lt;A href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model#Crow's_foot_notation" target="_self" rel="nofollow noopener noreferrer"&gt;here.&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Main highlights and key takeaways :&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt; &lt;/STRONG&gt; &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt; I have presented 2 selection patterns for the &lt;STRONG&gt;performance&lt;/STRONG&gt; improvement:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN&gt;exclusion&lt;/SPAN&gt;&lt;/LI&gt;
&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;case vs union all&lt;/SPAN&gt;&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;...plus 2 &lt;STRONG&gt;functional&lt;/STRONG&gt; patterns:&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN&gt;predecessor and successor&lt;/SPAN&gt;&lt;/LI&gt;
&lt;LI&gt;&lt;SPAN&gt;data source determination during runtime.&lt;/SPAN&gt;&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Performance pattern: Exclusion&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Let's take a look at ERD diagram again. Imagine the requirement to select all Sales Orders items (VBAP table), that do not refer to any material from MARA or they refer to materials of HAWA type only. (MARA-MTART = 'HAWA'). Additionally we are interested in Sales Orders of TA type only (VBAK-AUART = 'TA').&lt;/P&gt;
&lt;P&gt;The very first idea is the use of subquery embedded inside NOT EXISTS operator:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT
  vbak~vbeln,
  vbap~posnr,
  vbap~matnr,
  vbap~netwr,
  vbap~waerk
  FROM vbak
  INNER JOIN vbap
  ON vbap~vbeln = vbak~vbeln
  WHERE vbak~auart = @cv_sd_order_type_ta
  AND NOT EXISTS (
    SELECT @abap_true FROM mara AS subq
      WHERE subq~matnr = vbap~matnr
        AND subq~lvorm = @abap_false
        AND subq~mtart = @cv_material_type_hawa
  )
  ORDER BY vbak~vbeln, vbap~posnr
  INTO CORRESPONDING FIELDS OF TABLE @me-&amp;gt;mt_so_head_item[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;But subquery has 2 major disadvantages: it consumes a lot of database server resources (which is valid for any database provider: SAP, Oracle, MS, IBM, etc.) and it cannot be used in ABAP CDS view (valid for SAP HANA database only).&lt;/P&gt;
&lt;P&gt;The alternative offering much faster data retrieval is LEFT OUTER JOIN:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT
  vbak~vbeln,
  vbap~posnr,
  vbap~matnr,
  vbap~netwr,
  vbap~waerk,
  mara~mtart,
  mara~xchpf
  FROM vbak
  INNER JOIN vbap
  ON vbap~vbeln = vbak~vbeln
  LEFT OUTER JOIN mara
  ON  mara~matnr = vbap~matnr
  AND mara~lvorm = @ABAP_false "NOT in WHERE if OUTER join is expected
  WHERE vbak~auart = @CV_sd_order_type_ta
  AND (    mara~matnr IS NULL
        OR mara~mtart &amp;lt;&amp;gt; @CV_material_type_hawa
      )
   ORDER BY vbak~vbeln, vbap~posnr
  INTO CORRESPONDING FIELDS OF TABLE @ME-&amp;gt;mt_so_head_item[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;ATTENTION: any additional conditions against the data source from the left side of the outer join must be specified within ON operator, not as a part of WHERE clause. Otherwise you will transform your OUTER join (unintentionally) into the INNER join! You may get caught into this trap using&amp;nbsp;&lt;STRONG&gt;Advanced&lt;/STRONG&gt; Open SQL (with @ prefix when you refer to the variables declared in ABAP and residing on application server).&amp;nbsp; Old Open SQL flavor for ABAP programming on ECC system (predecessor of S/4HANA) did not allow such implicit (and most likely unwanted) conversion of OUTER join into the INNER one.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Association is not part of SQL standard, but it may be perceived like lazy outer join. This 'laziness' means that as long as ABAP app does not require the columns from the data source on the left side of the outer join, the database system does not perform outer join operation at all, saving some processing time and its resources. This is why we can use the similar technique to obtain data with our exclusion condition from the CDS view that uses association:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT
  SalesOrder AS vbeln,
  so~\_Item-SalesOrderItem AS posnr,
  so~\_Item-Product AS matnr,
  so~\_Item-NetAmount AS netwr,
  so~\_Item-TransactionCurrency AS waerk,
  so~\_Item\_Product-ProductType AS mtart,
  so~\_Item\_Product-IsBatchManagementRequired AS xchpf
  FROM R_SalesOrderTP AS so
  WHERE so~SalesOrderType = @cv_sd_order_type_ta
  AND so~\_Item-SalesOrderItem IS NOT NULL
  AND ( so~\_Item\_Product-ProductType IS NULL
        OR (     so~\_Item\_Product-ProductType &amp;lt;&amp;gt; @cv_material_type_hawa
             AND so~\_Item\_Product-IsMarkedForDeletion = @abap_false
           )
      )
  ORDER BY vbeln, posnr
  INTO TABLE @me-&amp;gt;mt_so_head_item[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;&lt;STRONG&gt;Performance pattern: Case vs Union all&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Imagine the following projection list using CASE operator:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT
  SalesDocument AS vbeln,
  so~\_ItemBasic-SalesDocumentItem AS posnr,
  so~\_ItemBasic-Material AS matnr,
  so~\_ItemBasic-NetAmount AS netwr,
  so~\_ItemBasic-TransactionCurrency AS waerk,
  so~\_ItemBasic\_Material-MaterialType AS mtart,
  so~\_ItemBasic\_Material-IsBatchManagementRequired AS xchpf,
  CASE
    WHEN so~\_ItemBasic\_Material-IsBatchManagementRequired IS NULL
      THEN 'Batch Managment is IRRELEVANT'
    WHEN so~\_ItemBasic\_Material-IsBatchManagementRequired = @abap_true
      THEN 'Batch Managment IS required'
    ELSE 'Batch Managment is NOT required'
  END AS IsBatchMgmtReq
  FROM I_SalesDocumentBasic AS so
  WHERE so~SalesDocumentType = @cv_sd_order_type_ta
  AND so~\_ItemBasic-SalesDocumentItem IS NOT NULL
  AND (   so~\_ItemBasic\_Material-MaterialType &amp;lt;&amp;gt; @cv_material_type_hawa
       OR so~\_ItemBasic\_Material-MaterialType IS NULL
      )
  ORDER BY vbeln, posnr
  INTO TABLE @me-&amp;gt;mt_so_descriptive[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;It may be time consuming to execute, as it runs as a single thread on HANA database server. The alternative is to split such single SELECT statement into as many SELECT statements as many CASE conditions are used. All these SELECT statements will be combined with UNION ALL operator, like in the code below:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT
  SalesDocument AS vbeln,
  so~\_ItemBasic-SalesDocumentItem AS posnr,
  so~\_ItemBasic-Material AS matnr,
  so~\_ItemBasic-NetAmount AS netwr,
  so~\_ItemBasic-TransactionCurrency AS waerk,
  so~\_ItemBasic\_Material-MaterialType AS mtart,
  so~\_ItemBasic\_Material-IsBatchManagementRequired AS xchpf,
  'Batch Managment is IRRELEVANT' AS IsBatchMgmtReq
  FROM I_SalesDocumentBasic AS so
  WHERE so~SalesDocumentType = @cv_sd_order_type_ta
  AND so~\_ItemBasic-SalesDocumentItem IS NOT NULL
  AND (    so~\_ItemBasic\_Material-MaterialType &amp;lt;&amp;gt; @cv_material_type_hawa
        OR so~\_ItemBasic\_Material-MaterialType IS NULL
      )
  AND so~\_ItemBasic\_Material-IsBatchManagementRequired IS NULL
UNION ALL
SELECT
  SalesDocument AS vbeln,
  so~\_ItemBasic-SalesDocumentItem AS posnr,
  so~\_ItemBasic-Material AS matnr,
  so~\_ItemBasic-NetAmount AS netwr,
  so~\_ItemBasic-TransactionCurrency AS waerk,
  so~\_ItemBasic\_Material-MaterialType AS mtart,
  so~\_ItemBasic\_Material-IsBatchManagementRequired AS xchpf,
  'Batch Managment IS required' AS IsBatchMgmtReq
  FROM I_SalesDocumentBasic AS so
  WHERE so~SalesDocumentType = @cv_sd_order_type_ta
  AND so~\_ItemBasic-SalesDocumentItem IS NOT NULL
  AND (    so~\_ItemBasic\_Material-MaterialType &amp;lt;&amp;gt; @cv_material_type_hawa
        OR so~\_ItemBasic\_Material-MaterialType IS NULL
      )
  AND so~\_ItemBasic\_Material-IsBatchManagementRequired = @abap_true
UNION ALL
SELECT
  SalesDocument AS vbeln,
  so~\_ItemBasic-SalesDocumentItem AS posnr,
  so~\_ItemBasic-Material AS matnr,
  so~\_ItemBasic-NetAmount AS netwr,
  so~\_ItemBasic-TransactionCurrency AS waerk,
  so~\_ItemBasic\_Material-MaterialType AS mtart,
  so~\_ItemBasic\_Material-IsBatchManagementRequired AS xchpf,
  'Batch Managment is NOT required' AS IsBatchMgmtReq
  FROM I_SalesDocumentBasic AS so
  WHERE so~SalesDocumentType = @cv_sd_order_type_ta
  AND so~\_ItemBasic-SalesDocumentItem IS NOT NULL
  AND (    so~\_ItemBasic\_Material-MaterialType &amp;lt;&amp;gt; @cv_material_type_hawa
        OR so~\_ItemBasic\_Material-MaterialType IS NULL
      )
  AND so~\_ItemBasic\_Material-IsBatchManagementRequired = @abap_false
  ORDER BY vbeln, posnr
INTO TABLE @me-&amp;gt;mt_so_descriptive[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;Each of 3 SELECT commands above contains respective conditions from the CASE operator used on the projection list of the single SELECT instruction. Such approach allows database system execute 3 separate threads in parallel and then combine their results via UNION ALL.&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;ATTENTION: do not use UNION without ALL keyword, because the advantage of parallel processing may be overshadowed with additional effort to eliminate duplicates from the result set (mt_so_descriptive[] internal table in our example).&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Functional pattern: predecessor and successor&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Imagine the situation in which we need to provide old and new values of the given table field in chronological order. 2 main tables of Change Documents (CDHDR - header and CDPOS - position) store such information. Our goal is to retrieve the pairs of the values for a given field - the old value before the change (predecessor) and the new value saved as the result of the change (successor). Subquery seems to be inevitable option to achieve this functionality, so SQL script implemented in ABAP Managed Database Procedure (AMDP) global class is the way to go. But first let's prepare CDS view that joins CDHDR and CDPOS before programming in SQL script:&lt;/P&gt;
&lt;pre class="lia-code-sample language-sql"&gt;&lt;code&gt;define view entity Z_I_CD
with parameters
  iv_objclass : cdobjectcl,
  iv_tabname : tabname,
  iv_fldname : fieldname
as select from cdhdr as hdr
inner join cdpos as pos
on  pos.objectid = hdr.objectid
and pos.changenr = hdr.changenr
{
  key hdr.objectid,
  key hdr.changenr,
  key pos.tabkey,
  key pos.chngind,
  hdr.username,
  concat(hdr.udate, hdr.utime) as changed_on,
  pos.unit_old,
  pos.unit_new,
  pos.cuky_old,
  pos.cuky_new,
  pos.value_old,
  pos.value_new
}
where hdr.objectclas = $parameters.iv_objclass
and pos.tabname = $parameters.iv_tabname
and pos.fname = $parameters.iv_fldname&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;Another good practice used in the implementation above is the use of CDS view parameters: iv_objclass, iv_tabname and iv_fldname as we need to track the changes for the specific table field only. Concatenation of the date and time indicating when exactly the change occurred is crucial to build appropriate subquery in SQL script - see the field CHANGED_ON:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_amdp_sel_pattern DEFINITION
  PUBLIC FINAL CREATE PUBLIC .

PUBLIC SECTION.
  INTERFACES : if_amdp_marker_hdb.

  CLASS-METHODS:
    read_cd_pair FOR TABLE FUNCTION z_f_cd_pair,
    read_toax FOR TABLE FUNCTION z_f_toax.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_amdp_sel_pattern IMPLEMENTATION.
  METHOD read_cd_pair
    BY DATABASE FUNCTION
    FOR HDB LANGUAGE SQLSCRIPT
    OPTIONS READ-ONLY
    USING z_i_cd.
    lt_result =
    select
      cd.mandt,
      cd.objectid,
      cd.tabkey,
      cd.changenr,
      cd.chngind,
      cd.username,
      cd.changed_on,
      cd.unit_old,
      cd.unit_new,
      cd.cuky_old,
      cd.cuky_new,
      cd.value_old,
      cd.value_new,
      pred.username as pred_username,
      pred.changed_on as pred_changed_on,
      pred.unit_old as pred_unit_old,
      pred.unit_new as pred_unit_new,
      pred.cuky_old as pred_cuky_old,
      pred.cuky_new as pred_cuky_new,
      pred.value_old as pred_value_old,
      pred.value_new pred_value_new
      from z_i_cd(
        iv_objclass =&amp;gt; :iv_objclass,
        iv_tabname =&amp;gt; :iv_tabname,
        iv_fldname =&amp;gt; :iv_fldname ) as cd
      left outer join z_i_cd(
        iv_objclass =&amp;gt; :iv_objclass,
        iv_tabname =&amp;gt; :iv_tabname,
        iv_fldname =&amp;gt; :iv_fldname ) as pred
      on pred.mandt = cd.mandt
      and pred.objectid = cd.objectid
      and pred.tabkey = cd.tabkey
      and pred.changed_on = (
        select MAX( cdlast.changed_on )
          from z_i_cd(
            iv_objclass =&amp;gt; :iv_objclass,
            iv_tabname =&amp;gt; :iv_tabname,
            iv_fldname =&amp;gt; :iv_fldname ) as cdlast
          where cdlast.objectid = cd.objectid
          and cdlast.tabkey = cd.tabkey
          and cdlast.changed_on &amp;lt; cd.changed_on );
    RETURN :lt_result;
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;Optional predecessor (see alias PRED for Z_I_CD in &lt;STRONG&gt;outer&lt;/STRONG&gt; join above) must have&amp;nbsp; the greatest available value of the field CHANGED_ON but still lower than CHANGED_ON in successor entry (alias CD). Code available in github.com contains testing console class&amp;nbsp; ZCL_SEL_PATTERN_TEST_CONSOLE that retrieves the pair of predecessor and successor with regard to the changes in VBAP-MATNR field (material of the Sales Order position).&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Functional pattern: dynamic data source determination in CDS view&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Dynamic data source determination &lt;STRONG&gt;in ABAP&lt;/STRONG&gt; is a trivial task to implement:&lt;/P&gt;
&lt;DIV&gt;
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;/DIV&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA lt_toa01 TYPE STANDARD TABLE OF toa01.
DATA(lv_table_name) = 'TOA01'.

SELECT * FROM (lv_table_name) INTO TABLE @lt_toa01[].&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;Archive link tables like TOA01, TOA02, TOA03, etc. share identical structure, but based on the configuration each of these tables stores the links for the documents of different SAP objects. Implementing a similar solution in CDS view is not such straightforward topic. It is possible only via table function:&amp;nbsp;&lt;/P&gt;
&lt;pre class="lia-code-sample language-sql"&gt;&lt;code&gt;@EndUserText.label: 'Any TOA0x table'
define table function Z_F_TOAX
with parameters 
  iv_table_name : tabname16
returns {
  mandt : abap.clnt;
  sap_object : saeanwdid;
  object_id : saeobjid;
  archiv_id : saearchivi;
  arc_doc_id : saeardoid;
  ar_object : saeobjart;
  ar_date : saeabadate;
  del_date : saedeldate;
  reserve : saereserve;
}
implemented by method zcl_amdp_sel_pattern=&amp;gt;read_toax;&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;...and AMDP class:&lt;/P&gt;
&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD read_toax
  BY DATABASE FUNCTION
  FOR HDB LANGUAGE SQLSCRIPT
  OPTIONS READ-ONLY
  USING toa01.

  DECLARE lv_query STRING;
  DECLARE lt_result TABLE LIKE toa01;

  lv_query = 'SELECT * FROM ' || :iv_table_name;

  EXECUTE IMMEDIATE lv_query INTO lt_result;

  RETURN :lt_result;
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;
&lt;P&gt;As we can see the whole trick is the use of EXECUTE IMMEDIATE command that SQL script offers. The source of data selection is delivered into AMDP method as input parameter iv_table_name.&lt;/P&gt;
&lt;P&gt; &amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Recommended resources for your readers to continue with your learning journey:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt; &lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Working code presented in this blog can be downloaded from here:&lt;/P&gt;
&lt;P&gt;&lt;A href="https://github.com/brbogdan/SQL-selection-patterns-in-S4" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/brbogdan/SQL-selection-patterns-in-S4&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related community &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/all-sap-managed-tags/ct-p/managed-tags" target="_blank"&gt;&lt;STRONG&gt;managed tags&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt; you should subscribe to remain informed about this topic:&lt;/STRONG&gt;&lt;/SPAN&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=""&gt;&lt;A title="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" target="_blank"&gt;&lt;SPAN&gt;ABAP Development&lt;/SPAN&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P class=""&gt;&lt;A title="https://community.sap.com/t5/c-khhcw49343/SQL/pd-p/122888716930844301706258287775555" href="https://community.sap.com/t5/c-khhcw49343/SQL/pd-p/122888716930844301706258287775555" target="_blank"&gt;&lt;SPAN&gt;SQL&lt;/SPAN&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;  &lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related community blog posts:&lt;/SPAN&gt;&lt;/STRONG&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=""&gt;&lt;A title="https://community.sap.com/t5/technology-blog-posts-by-members/cds-views-vs-traditional-abap-logic-performance/ba-p/14125726" href="https://community.sap.com/t5/technology-blog-posts-by-members/cds-views-vs-traditional-abap-logic-performance/ba-p/14125726" target="_blank"&gt;CDS Views Vs Traditional ABAP Logic Performance&lt;/A&gt;&lt;/P&gt;
&lt;P class=""&gt;&lt;SPAN&gt;&lt;A title="https://community.sap.com/t5/technology-blog-posts-by-members/sql-scripts-in-sap-hana/ba-p/13738376" href="https://community.sap.com/t5/technology-blog-posts-by-members/sql-scripts-in-sap-hana/ba-p/13738376" target="_blank"&gt;SQL Scripts in SAP HANA&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt; &lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;How was the event for you?:&lt;/SPAN&gt;&lt;/STRONG&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt; My session&amp;nbsp; has gathered around 40 participants, who were acting interactively despite being a bit exhausted after big portion of the preceding sessions and rainy weather :-).&amp;nbsp; I hope that some of them will have a chance to implement the patterns I shared on their commercial projects for their real customers.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;I have also benefited from this event taking part in some very impressive sessions:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Level up your CAP skills by learning how to use the cds REPL presented by DJ Adams&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/53"&gt;@qmacro&lt;/a&gt;&amp;nbsp;&lt;/LI&gt;
&lt;LI&gt;AI agents collaboration for SAP business processes using Google A2A protocol by Igor Narodowy&amp;nbsp;&lt;/LI&gt;
&lt;LI&gt;Why is it becoming increasingly difficult to keep up with SAP? by Paweł Pawlak&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/136635"&gt;@PawelPawlak&lt;/a&gt;&lt;/LI&gt;
&lt;LI&gt;AI agents and SAP. What's the buzz? by Vitaliy Rudnytskiy&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/183"&gt;@Vitaliy-R&lt;/a&gt;&amp;nbsp;&lt;/LI&gt;
&lt;LI&gt;3D modeling in UI5 by Nico Schoenteich&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/898"&gt;@nicoschoenteich&lt;/a&gt;&amp;nbsp;&lt;/LI&gt;
&lt;LI&gt;SAPdalf Crafts AI agents by Łukasz Skorwider&lt;/LI&gt;
&lt;LI&gt;SAP migrations and GenAI: pioneering the path forward by Tomasz Wilk&lt;/LI&gt;
&lt;/UL&gt;
&lt;P&gt;Many thanks to these speakers from me!    &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt; &lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Now let’s hear from you:&lt;/SPAN&gt;&lt;/STRONG&gt;   &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;Before ending the blog post I want to share that one of the things I enjoyed the most in SAP Inside Track Wroclaw 2025. It was meeting new people and old colleagues I haven't seen for a while . Who said this kind of fun needs to end in SAP Inside Track?:) Please introduce yourself in the comment’s section and share what you do in the world of SAP?&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/recap-sql-selection-patterns-in-sap-hana-database-presented-at-sap-inside/ba-p/14135601"/>
    <published>2025-07-03T10:23:24.088000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/splitstorm-a-generic-splitter-configuration-tool/ba-p/14143875</id>
    <title>Splitstorm - A Generic Splitter Configuration Tool</title>
    <updated>2025-07-03T17:51:47.033000+02:00</updated>
    <author>
      <name>EnnoWulff</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/7046</uri>
    </author>
    <content>&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1734146665"&gt;Extracting and Restoring Splitter Container Configurations in SAP GUI with ABAP&lt;/H2&gt;&lt;P&gt;When working with complex SAP GUI applications, it's common to use CL_GUI_SPLITTER_CONTAINER to structure screens. These splitter configurations often evolve over time and differ between users, environments, or sSAPGUI-settings.&lt;/P&gt;&lt;P&gt;This article presents a simple but effective way to extract and later restore the current configuration of SAP splitter containers using a small local ABAP utility that I call &lt;STRONG&gt;SplitStorm&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;The core idea is not product-related. It's about treating layout configurations as &lt;STRONG&gt;data&lt;/STRONG&gt; that can be stored and restored. While SAP provides APIs to define and modify split containers, it lacks built-in support for introspection and persistence of these layout states.&lt;/P&gt;&lt;H3 id="toc-hId-1666715879"&gt;Problem Statement&lt;/H3&gt;&lt;P&gt;There are a few typical situations where this becomes relevant:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Users have different SAPGUI settings (theme, fonts or fontsize) which results in different output and hidden information.&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Different users have different interest on different areas. One user needs to have a bigger view on the global ALV-Grid, another colleague wants to see more of the detail view.&lt;/LI&gt;&lt;LI&gt;Different screen resolutions result in unused screen areas, e.g. when the ratio is set to 30% for the left object tree, what fits great on FullHD but is to much for higher resolutions or wide screens&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1470202374"&gt;Approach&lt;/H3&gt;&lt;P&gt;Using recursive traversal and some clever techniques, it’s possible to extract the layout structure and size ratios of a splitter hierarchy. The data is stored in a simple, format that can later be used to reconstruct the exact same configuration.&lt;/P&gt;&lt;P&gt;The main features include:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Reading the layout hierarchy of nested CL_GUI_SPLITTER_CONTAINER instances&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Capturing the orientation, pane sizes, and nesting relationships&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Rebuilding the structure with the same layout at a later time&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1273688869"&gt;How does it work?&lt;/H3&gt;&lt;P&gt;The method ANALYZE_AND_SAVE analyzes the container hierarchy of the given main container. To retrieve the number of rows and columns of a splitter, I simply try to get all containers in a 20x20-Grid. If I do not get a valid container for row 3 and column 4 then I know that there are max 2 rows or max 3 columns.&lt;/P&gt;&lt;P&gt;The height and width for each pane will be read and stored in a simple matrix information&lt;/P&gt;&lt;P&gt;Data will be saved in the Index-Table INDX where data in any format can be stored easily. A better way would be to transform the data to JSON or serialize in a data object and store it in an own table. But for my purposes I think that INDX is okay.&lt;/P&gt;&lt;P&gt;Restoring the data reads the path to the current container and sets height and width.&amp;nbsp;&lt;/P&gt;&lt;P&gt;It's easy to build the standard layout and the restore the configuration from saved data.&lt;/P&gt;&lt;H3 id="toc-hId-1077175364"&gt;The Code&lt;/H3&gt;&lt;P&gt;The actual complete source code is available at github: &lt;A href="https://github.com/tricktresor/splitstorm" target="_self" rel="nofollow noopener noreferrer"&gt;Splitstorm&lt;/A&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1009744578"&gt;Demo report&lt;/H4&gt;&lt;P&gt;The Demo report builds a sample configuration using splitter containers without any controls in it.&lt;/P&gt;&lt;P&gt;You can save the current configuration, load or delete an existing layout.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT zt9r_splitstorm_demo01.

SELECTION-SCREEN PUSHBUTTON /1(20) TEXT-sav USER-COMMAND zsave.
SELECTION-SCREEN PUSHBUTTON /1(20) TEXT-lod USER-COMMAND zload.
SELECTION-SCREEN PUSHBUTTON /1(20) TEXT-del USER-COMMAND zdelete.

INITIALIZATION.

  DATA(docker) = NEW cl_gui_docking_container( ratio = 90 side = cl_gui_docking_container=&amp;gt;dock_at_bottom ).

  DATA(sca)   = NEW cl_gui_splitter_container( parent = docker rows = 2 columns = 2 ).
  DATA(sca1)  = NEW cl_gui_splitter_container( parent = sca-&amp;gt;get_container( row = 1 column = 1 ) rows = 1 columns = 2 ).
  DATA(sca2)  = NEW cl_gui_splitter_container( parent = sca-&amp;gt;get_container( row = 2 column = 1 ) rows = 2 columns = 1 ).
  DATA(scb1)  = NEW cl_gui_splitter_container( parent = sca2-&amp;gt;get_container( row = 1 column = 1 ) rows = 1 columns = 2 ).
  DATA(scb2)  = NEW cl_gui_splitter_container( parent = sca2-&amp;gt;get_container( row = 2 column = 1 ) rows = 2 columns = 1 ).


AT SELECTION-SCREEN.

  DATA(info) = NEW zt9r_splitstorm( sy-cprog ).

  CASE sy-ucomm.
    WHEN 'ZSAVE'.
      info-&amp;gt;analyze_and_save( docker ).
    WHEN 'ZLOAD'.
      info-&amp;gt;load_and_restore( docker ).
    WHEN 'ZDELETE'.
      info-&amp;gt;delete( ).
  ENDCASE.&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-813231073"&gt;Main class&lt;/H4&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zt9r_splitstorm DEFINITION PUBLIC.
  PUBLIC SECTION.
    TYPES: BEGIN OF ty_splitter_info,
             path          TYPE string,
             rows          TYPE i,
             columns       TYPE i,
             row_heights   TYPE STANDARD TABLE OF i WITH DEFAULT KEY,
             column_widths TYPE STANDARD TABLE OF i WITH DEFAULT KEY,
           END OF ty_splitter_info.

    TYPES ty_splitter_info_tab TYPE STANDARD TABLE OF ty_splitter_info WITH DEFAULT KEY.

    METHODS delete.

    METHODS load_and_restore
      IMPORTING
        i_container TYPE REF TO cl_gui_container.

    METHODS analyze_and_save
      IMPORTING
        i_container TYPE REF TO cl_gui_container.

    METHODS constructor
      IMPORTING
        repid TYPE clike.

  PRIVATE SECTION.
    METHODS save.
    METHODS load.

    CONSTANTS mc_root TYPE string VALUE `ROOT`.

    METHODS analyze_recursive
      IMPORTING
        i_container   TYPE REF TO cl_gui_control
        i_path        TYPE string
      RETURNING
        VALUE(result) TYPE abap_bool.

    METHODS get_row_count
      IMPORTING
        i_splitter    TYPE REF TO cl_gui_splitter_container
      RETURNING
        VALUE(result) TYPE i.

    METHODS get_column_count
      IMPORTING
        i_splitter    TYPE REF TO cl_gui_splitter_container
      RETURNING
        VALUE(result) TYPE i.

    METHODS restore_recursive
      IMPORTING
        i_container TYPE REF TO cl_gui_control
        i_path      TYPE string.

    METHODS get_splitter_row_height
      IMPORTING
        io_splitter   TYPE REF TO cl_gui_splitter_container
      RETURNING
        VALUE(r_size) TYPE i.

    METHODS get_splitter_col_width
      IMPORTING
        io_splitter   TYPE REF TO cl_gui_splitter_container
      RETURNING
        VALUE(r_size) TYPE i.

    METHODS analyze
      IMPORTING
        i_container   TYPE REF TO cl_gui_container
      RETURNING
        VALUE(result) TYPE ty_splitter_info_tab.

    METHODS restore_sizes
      IMPORTING
        i_container TYPE REF TO cl_gui_container.

    METHODS get_id
      RETURNING
        VALUE(r_id) TYPE char20.

    DATA size_info TYPE ty_splitter_info_tab.
    DATA repid     TYPE c LENGTH 40.
ENDCLASS.



CLASS ZT9R_SPLITSTORM IMPLEMENTATION.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;ANALYZE
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTAINER
* | [&amp;lt;-()] RESULT                         TYPE        TY_SPLITTER_INFO_TAB
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD analyze.
    LOOP AT i_container-&amp;gt;children INTO DATA(child).
      analyze_recursive( i_container = child
                         i_path      = mc_root ).
    ENDLOOP.

    result = size_info.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Public Method ZT9R_SPLITSTORM-&amp;gt;ANALYZE_AND_SAVE
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTAINER
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD analyze_and_save.
    analyze( i_container = i_container ).
    save( ).
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;ANALYZE_RECURSIVE
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTROL
* | [---&amp;gt;] I_PATH                         TYPE        STRING
* | [&amp;lt;-()] RESULT                         TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD analyze_recursive.
    TRY.
        DATA(lo_splitter) = CAST cl_gui_splitter_container( i_container ).
        result = abap_true.
      CATCH cx_sy_move_cast_error.
        result = abap_false.
        RETURN.
    ENDTRY.

    DATA(lv_rows)    = get_row_count( lo_splitter ).
    DATA(lv_columns) = get_column_count( lo_splitter ).

    DATA lt_row_heights TYPE STANDARD TABLE OF i WITH DEFAULT KEY.
    DATA lt_col_widths  TYPE STANDARD TABLE OF i WITH DEFAULT KEY.

    DO lv_rows TIMES.
      APPEND get_splitter_row_height( lo_splitter ) TO lt_row_heights.
    ENDDO.

    DO lv_columns TIMES.
      APPEND get_splitter_col_width( lo_splitter ) TO lt_col_widths.
    ENDDO.

    APPEND VALUE ty_splitter_info( path          = i_path
                                   rows          = lv_rows
                                   columns       = lv_columns
                                   row_heights   = lt_row_heights
                                   column_widths = lt_col_widths )
           TO size_info.

    DATA(index_row) = 0.
    DATA(index_col) = 0.
    DO lv_rows TIMES.
      index_col = 0.
      index_row = index_row + 1.
      DO lv_columns TIMES.
        index_col = index_col + 1.
        DATA(lo_container) = lo_splitter-&amp;gt;get_container( row    = index_row
                                                         column = index_col ).
        LOOP AT lo_container-&amp;gt;children INTO DATA(lo_child).
          IF NOT analyze_recursive(
                     i_container = lo_child
                     i_path      = |{ i_path }[{ index_row },{ index_col }]| ).
            EXIT. " from do
          ENDIF.
        ENDLOOP.
      ENDDO.
    ENDDO.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Public Method ZT9R_SPLITSTORM-&amp;gt;CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] REPID                          TYPE        CLIKE
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD constructor.
    me-&amp;gt;repid = repid.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Public Method ZT9R_SPLITSTORM-&amp;gt;DELETE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD delete.
    DATA(id) = get_id( ).
    DELETE FROM DATABASE indx(z1) ID id.
    IF sy-subrc = 0 AND size_info IS NOT INITIAL.
      MESSAGE 'Splitter configuration deleted' TYPE 'S'.
    ENDIF.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;GET_COLUMN_COUNT
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_SPLITTER                     TYPE REF TO CL_GUI_SPLITTER_CONTAINER
* | [&amp;lt;-()] RESULT                         TYPE        I
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_column_count.
    result = 0.
    DO 20 TIMES.
      DATA(container) = i_splitter-&amp;gt;get_container( row    = 1
                                                   column = sy-index ).
      IF container IS INITIAL.
        RETURN.
      ELSE.
        result = result + 1.
      ENDIF.
    ENDDO.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;GET_ID
* +-------------------------------------------------------------------------------------------------+
* | [&amp;lt;-()] R_ID                           TYPE        CHAR20
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_id.
    r_id = |SPLITTER-{ repid }-{ sy-uname }|.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;GET_ROW_COUNT
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_SPLITTER                     TYPE REF TO CL_GUI_SPLITTER_CONTAINER
* | [&amp;lt;-()] RESULT                         TYPE        I
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_row_count.
    result = 0.
    DO 20 TIMES.
      DATA(container) = i_splitter-&amp;gt;get_container( row    = sy-index
                                                   column = 1 ).
      IF container IS INITIAL.
        RETURN.
      ELSE.
        result = result + 1.
      ENDIF.

    ENDDO.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;GET_SPLITTER_COL_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] IO_SPLITTER                    TYPE REF TO CL_GUI_SPLITTER_CONTAINER
* | [&amp;lt;-()] R_SIZE                         TYPE        I
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_splitter_col_width.
    io_splitter-&amp;gt;get_column_width( EXPORTING
                                     id     = sy-index
                                   IMPORTING
                                     result = r_size  ).
    cl_gui_cfw=&amp;gt;flush( ).
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;GET_SPLITTER_ROW_HEIGHT
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] IO_SPLITTER                    TYPE REF TO CL_GUI_SPLITTER_CONTAINER
* | [&amp;lt;-()] R_SIZE                         TYPE        I
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD get_splitter_row_height.
    io_splitter-&amp;gt;get_row_height( EXPORTING
                                   id     = sy-index
                                 IMPORTING
                                   result = r_size  ).
    cl_gui_cfw=&amp;gt;flush( ).
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;LOAD
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD load.
    DATA(id) = get_id( ).
    IMPORT splitter_info TO size_info FROM DATABASE indx(z1) ID id.
    IF sy-subrc = 0 AND size_info IS NOT INITIAL.
      MESSAGE 'Splitter configuration loaded' TYPE 'S'.
    ENDIF.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Public Method ZT9R_SPLITSTORM-&amp;gt;LOAD_AND_RESTORE
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTAINER
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD load_and_restore.
    load( ).
    restore_sizes( i_container = i_container ).
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;RESTORE_RECURSIVE
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTROL
* | [---&amp;gt;] I_PATH                         TYPE        STRING
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD restore_recursive.
    TRY.
        DATA(splitter) = CAST cl_gui_splitter_container( i_container ) ##NO_TEXT.
      CATCH cx_sy_move_cast_error.
        RETURN.
    ENDTRY.

    READ TABLE size_info INTO DATA(info) WITH KEY path = i_path.
    IF sy-subrc &amp;lt;&amp;gt; 0 OR splitter IS INITIAL.
      RETURN.
    ENDIF.

    DATA(idx) = 1.

    LOOP AT info-row_heights INTO DATA(lv_r).
      splitter-&amp;gt;set_row_height( id = idx height = lv_r ).
      idx = idx + 1.
    ENDLOOP.

    idx = 1.
    LOOP AT info-column_widths INTO DATA(lv_c).
      splitter-&amp;gt;set_column_width( id = idx width = lv_c ).
      idx = idx + 1.
    ENDLOOP.

    " Rekursiv weiter
    DATA(index_row) = 0.
    DATA(index_col) = 0.
    DO info-rows TIMES.
      index_col = 0.
      index_row = index_row + 1.
      DO info-columns TIMES.
        index_col = index_col + 1.
        DATA(lo_container) = splitter-&amp;gt;get_container( row    = index_row
                                                      column = index_col ).
        DATA(lv_subpath) = |{ i_path }[{ index_row },{ index_col }]|.
        LOOP AT lo_container-&amp;gt;children INTO DATA(lo_child).
          restore_recursive( i_container = lo_child
                             i_path      = lv_subpath ).
        ENDLOOP.
      ENDDO.
    ENDDO.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;RESTORE_SIZES
* +-------------------------------------------------------------------------------------------------+
* | [---&amp;gt;] I_CONTAINER                    TYPE REF TO CL_GUI_CONTAINER
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD restore_sizes.
    IF size_info IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT i_container-&amp;gt;children INTO DATA(child).
      restore_recursive( i_container = child
                         i_path      = mc_root ).
    ENDLOOP.
  ENDMETHOD.


* &amp;lt;SIGNATURE&amp;gt;---------------------------------------------------------------------------------------+
* | Instance Private Method ZT9R_SPLITSTORM-&amp;gt;SAVE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------&amp;lt;/SIGNATURE&amp;gt;
  METHOD save.
    IF size_info IS INITIAL.
      RETURN.
    ENDIF.

    DATA(id) = get_id( ).
    EXPORT splitter_info FROM size_info TO DATABASE indx(z1) ID id.
    MESSAGE 'Splitter configuration saved' TYPE 'S'.
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/splitstorm-a-generic-splitter-configuration-tool/ba-p/14143875"/>
    <published>2025-07-03T17:51:47.033000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/replace-all-occurrences-in-multiple-fields-of-an-internal-table/ba-p/14137810</id>
    <title>Replace All Occurrences in Multiple Fields of an Internal Table</title>
    <updated>2025-07-04T18:13:43.456000+02:00</updated>
    <author>
      <name>manijangiti</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2174619</uri>
    </author>
    <content>&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/U&gt;This blog provides a smart way to clean special characters like @, #, !, and , from internal table data.&lt;BR /&gt;It helps when exporting data to CSV files, especially for AL11 directory usage.&lt;BR /&gt;Instead of writing code for each field, we clean all fields in one loop using field symbols.&lt;BR /&gt;RTTI (Runtime Type Info) is used to make it dynamic for any table.&lt;BR /&gt;This makes your exported data neat, clean, and ready for use.&lt;BR /&gt;&lt;U&gt;&lt;STRONG&gt;&lt;BR /&gt;Before Replacing&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2a8f888a-14ee-47a0-8ca4-938a766ae396.jpg" style="width: 800px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279339i76864E73FEF115C7/image-size/large?v=v2&amp;amp;px=999" role="button" title="2a8f888a-14ee-47a0-8ca4-938a766ae396.jpg" alt="2a8f888a-14ee-47a0-8ca4-938a766ae396.jpg" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Code :&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZREPLACE_INTERNAL_TABLE.

"Define structure TY_DATA for sample person data
TYPES: BEGIN OF TY_DATA,
         NAME     TYPE STRING,
         CITY     TYPE STRING,
         EMAIL    TYPE STRING,
         ADDRESS  TYPE STRING,
         COMMENTS TYPE STRING,
       END OF TY_DATA.

"Internal table and work area to hold the data
DATA: LT_DATA TYPE TABLE OF TY_DATA,
      LS_DATA TYPE TY_DATA.

"Reference for SALV display
DATA: LT_FACTORTY  TYPE REF TO CL_SALV_TABLE.

"Sample data containing unwanted characters: @, #, !, ,
LT_DATA = VALUE #(
  ( name = 'Mani@ Yadav!' city = 'Hydera#bad' email = 'mani@yadav@example.com' address = 'Road No, 1, Banjara Hills' comments = 'Good@ Person!' )
  ( name = 'Anil Kumar' city = 'Mum#bai' email = 'anil.kumar@exa!mple.com' address = 'Apt@ 123, Green Society' comments = 'Very# Good, Employee' )
  ( name = 'Ravi Teja!' city = 'Hyder@abad' email = 'ravi.teja#@example.com' address = 'Street 45, Jubilee@ Hills' comments = 'Nice, and Reliable!' )
  ( name = 'Sushil Kumar' city = 'Chen@nai' email = 'sushil@kumar@example.com' address = 'Block 7, Ap@artment 3' comments = 'Great, Wo!rker' )
  ( name = 'Kavita@ Lal' city = 'Pune, City' email = 'kavita.lal#@example.com' address = 'MG Road@, Sector 2!' comments = 'Smart and@ Intellig!ent' )
  ( name = 'Arjun Mehta' city = 'Kolkata' email = 'arjun!mehta@example.com' address = 'Sector 9@, Block B' comments = 'Honest@ and Helpful!' )
  ( name = 'Deepa Agarwal#' city = 'Jai!pur' email = 'deepa@agarwal@example.com' address = 'Colony 5@, Lane 3' comments = 'Re#liable Friend!' )
  ( name = 'Vikrant Singh' city = 'Goa! Beach@' email = 'vikrant@singh#@example.com' address = 'Villa 22, P@alolem' comments = 'Social@ Worker#' )
  ( name = 'Neha Sharma' city = 'Ind@ore# MP!' email = 'neha@sharma@example.com' address = 'Home@ 98, New Town!' comments = 'Quick@ L!ear#ner' )
  ( name = 'Priya! Verma' city = 'De@lhi' email = 'priya.verma@example.com' address = 'Flat 12B, Lotus En@clave!' comments = 'Team, Play#er!' )
).

"Characters we want to remove from all fields
DATA: LT_UNWANTED TYPE STANDARD TABLE OF STRING WITH EMPTY KEY,
      LV_CHAR     TYPE STRING.

APPEND '@' TO LT_UNWANTED.
APPEND '#' TO LT_UNWANTED.
APPEND '!' TO LT_UNWANTED.
APPEND ',' TO LT_UNWANTED.

FIELD-SYMBOLS: &amp;lt;FS_DATA&amp;gt;  TYPE ANY,
               &amp;lt;FS_FIELD&amp;gt; TYPE ANY.

"Loop through each row in the internal table
LOOP AT LT_DATA ASSIGNING &amp;lt;FS_DATA&amp;gt;.

  "Get runtime structure description using RTTI
  DATA(LO_TABLE_DESCR) = CAST CL_ABAP_TABLEDESCR( CL_ABAP_TYPEDESCR=&amp;gt;DESCRIBE_BY_DATA( LT_DATA ) ).
  DATA(LO_LINE_DESCR)  = CAST CL_ABAP_STRUCTDESCR( LO_TABLE_DESCR-&amp;gt;GET_TABLE_LINE_TYPE( ) ).
  DATA(LT_COMPONENTS)  = LO_LINE_DESCR-&amp;gt;COMPONENTS.

  "Loop through each field in the structure
  LOOP AT LT_COMPONENTS INTO DATA(LS_COMPONENT).
    ASSIGN COMPONENT LS_COMPONENT-NAME OF STRUCTURE &amp;lt;FS_DATA&amp;gt; TO &amp;lt;FS_FIELD&amp;gt;.

    "Replace all unwanted characters with space
    IF SY-SUBRC = 0 AND &amp;lt;FS_FIELD&amp;gt; IS ASSIGNED.
      LOOP AT LT_UNWANTED INTO LV_CHAR.
        REPLACE ALL OCCURRENCES OF LV_CHAR IN &amp;lt;FS_FIELD&amp;gt; WITH ' '.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
ENDLOOP.

"Display the cleaned internal table using SALV Grid
CALL METHOD CL_SALV_TABLE=&amp;gt;FACTORY
  IMPORTING
    R_SALV_TABLE = LT_FACTORTY
  CHANGING
    T_TABLE      = LT_DATA.

LT_FACTORTY-&amp;gt;DISPLAY( ).

"Debugger breakpoint for inspection (optional)
BREAK-POINT.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&lt;U&gt;&lt;EM&gt;&lt;STRONG&gt;Final Output after Replacing&lt;/STRONG&gt;&lt;/EM&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ce85d46a-cb8e-4e6e-8755-ad6b2181d0b7.jpg" style="width: 800px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279341iD103B87DA4BC43CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="ce85d46a-cb8e-4e6e-8755-ad6b2181d0b7.jpg" alt="ce85d46a-cb8e-4e6e-8755-ad6b2181d0b7.jpg" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/replace-all-occurrences-in-multiple-fields-of-an-internal-table/ba-p/14137810"/>
    <published>2025-07-04T18:13:43.456000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/factory-alv-with-header-logo-and-footer-in-abap/ba-p/14145038</id>
    <title>FACTORY ALV with Header , Logo and Footer in ABAP</title>
    <updated>2025-07-05T11:39:33.748000+02:00</updated>
    <author>
      <name>vinodkumarreddyappannagari</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2174225</uri>
    </author>
    <content>&lt;P&gt;I’m excited to share my very first blog post on SAP ABAP programming! In this post, you'll learn how to create an &lt;STRONG&gt;ALV&lt;/STRONG&gt; report using the &lt;STRONG&gt;Factory Method&lt;/STRONG&gt;, complete with a custom header, logo, and footer to enhance your report’s appearance and professionalism.&lt;/P&gt;&lt;P&gt;1. Create Logo&amp;nbsp;&lt;/P&gt;&lt;P&gt;step1 : Go to &lt;STRONG&gt;OAER&lt;/STRONG&gt;&amp;nbsp; T code .&lt;/P&gt;&lt;P&gt;step2 :&amp;nbsp;&lt;SPAN&gt;Enter the following fields for your logo.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vinodkumarreddyappannagari_2-1751700892463.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282961iEEB213D2ED2C2DD8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vinodkumarreddyappannagari_2-1751700892463.png" alt="vinodkumarreddyappannagari_2-1751700892463.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Step 3: Click on Execute.&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Step 4: Below screen will displayed, double click on Standard Doc Types.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vinodkumarreddyappannagari_3-1751700948601.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282963i889F288020A41685/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vinodkumarreddyappannagari_3-1751700948601.png" alt="vinodkumarreddyappannagari_3-1751700948601.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Step 5: Double Click on a screen and select the picture from your files you want make logo.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZVA_HEADER_LOGO_FACTORY.
* Declare table reference
TABLES: ZVA_VENDOR_TA.
* Declare data references
DATA: LT_TABLE TYPE REF TO CL_SALV_TABLE, " Reference to ALV table object
      LV_TEXT  TYPE STRING.               " Text string for header

* Selection screen for Vendor Numbers
SELECT-OPTIONS: S_VENO FOR ZVA_VENDOR_TA-VENDERNO.

START-OF-SELECTION.

  * Select data from custom vendor table based on selection
  SELECT VENDERNO, NAME, CITY, POSTALCODE, EMAIL, ACCOUNTGROUP, PROCESSORGROUP, POSTINGBLOCK
    INTO TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(LT_VENDOR)
    FROM ZVA_VENDOR_TA
    WHERE VENDERNO IN @S_VENO.

  * Proceed only if records are found
  IF LT_VENDOR IS NOT INITIAL.

    * Create the SALV (ALV) object using factory method
    CL_SALV_TABLE=&amp;gt;FACTORY(
      IMPORTING
        R_SALV_TABLE = LT_TABLE
      CHANGING
        T_TABLE      = LT_VENDOR
    ).

    * Create layout grids and logo objects for header and footer customization
    DATA(LT_LAYOUT)  = NEW CL_SALV_FORM_LAYOUT_GRID( ).
    DATA(LT_LAYOUT1) = NEW CL_SALV_FORM_LAYOUT_GRID( ).
    DATA(LT_LOGO)    = NEW CL_SALV_FORM_LAYOUT_LOGO( ).

    * Set the header title
    LV_TEXT = 'VINOD KUMAR REDDY'.
    LT_LAYOUT-&amp;gt;CREATE_HEADER_INFORMATION(
      EXPORTING
        ROW     = 3
        COLUMN  = 1
        TEXT    = LV_TEXT
    ).

    * Add user name label and text
    LT_LAYOUT-&amp;gt;CREATE_LABEL(
      EXPORTING
        ROW     = 5
        COLUMN  = 1
        TEXT    = 'User Name' ).

    LT_LAYOUT-&amp;gt;CREATE_TEXT(
      EXPORTING
        ROW     = 5
        COLUMN  = 2
        TEXT    = 'VINOD APPANNAGARI' ).

    * Add date label and current date value
    LT_LAYOUT-&amp;gt;CREATE_LABEL(
      EXPORTING
        ROW     = 3
        COLUMN  = 1
        TEXT    = 'Date' ).

    LT_LAYOUT-&amp;gt;CREATE_TEXT(
      EXPORTING
        ROW     = 3
        COLUMN  = 2
        TEXT    = SY-DATUM ).

    * Add time label and current system time
    LT_LAYOUT-&amp;gt;CREATE_LABEL(
      EXPORTING
        ROW     = 4
        COLUMN  = 1
        TEXT    = 'Time' ).

    LT_LAYOUT-&amp;gt;CREATE_TEXT(
      EXPORTING
        ROW     = 4
        COLUMN  = 2
        TEXT    = SY-UZEIT ).

    * Add footer layout - number of records found
    LT_LAYOUT1-&amp;gt;CREATE_LABEL(
      EXPORTING
        ROW     = 2
        COLUMN  = 1
        TEXT    = 'Number of records found' ).

    DATA: LV_COUNT TYPE INT4.
    DESCRIBE TABLE LT_VENDOR LINES LV_COUNT.

    LT_LAYOUT1-&amp;gt;CREATE_TEXT(
      EXPORTING
        ROW     = 2
        COLUMN  = 2
        TEXT    = LV_COUNT
        TOOLTIP = LV_COUNT ).

    * Set SAP logo on the right of the header
    LT_LOGO-&amp;gt;SET_RIGHT_LOGO( 'SAPLOGO1' ).
    * Set header and footer content
    LT_LOGO-&amp;gt;SET_LEFT_CONTENT( LT_LAYOUT ).
    LT_TABLE-&amp;gt;SET_TOP_OF_LIST( VALUE = LT_LOGO ).
    LT_TABLE-&amp;gt;SET_END_OF_LIST( VALUE = LT_LAYOUT1 ).
    * Display the ALV table
    LT_TABLE-&amp;gt;DISPLAY( ).
  ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Output:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="cfc5871a-34dc-41eb-80e5-53adde9181b4.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/282954iE3A4C02EEF1754EF/image-size/large?v=v2&amp;amp;px=999" role="button" title="cfc5871a-34dc-41eb-80e5-53adde9181b4.png" alt="cfc5871a-34dc-41eb-80e5-53adde9181b4.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" class="lia-product-mention" data-product="314-1"&gt;ABAP Development&lt;/a&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/factory-alv-with-header-logo-and-footer-in-abap/ba-p/14145038"/>
    <published>2025-07-05T11:39:33.748000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-rap-events-custom-logic-without-badis-or-user-exits/ba-p/14146769</id>
    <title>🚀 SAP RAP Events: Custom Logic Without BAdIs or User Exits</title>
    <updated>2025-07-08T08:49:47.512000+02:00</updated>
    <author>
      <name>SimTshaba</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1693481</uri>
    </author>
    <content>&lt;P&gt;As SAP S/4HANA continues to evolve with &lt;STRONG&gt;clean core&lt;/STRONG&gt; principles, the &lt;STRONG&gt;ABAP RESTful Application Programming Model (RAP)&lt;/STRONG&gt; is taking center stage. One of the most &lt;STRONG&gt;underused but powerful features&lt;/STRONG&gt; of RAP is its &lt;STRONG&gt;event-based architecture&lt;/STRONG&gt;, which allows you to plug in custom logic in a clean and upgrade-safe way.&lt;/P&gt;&lt;P&gt;Today, I want to share how you can &lt;STRONG&gt;listen to standard RAP events and trigger your own custom events&lt;/STRONG&gt; — &lt;STRONG&gt;no BAdIs or user exits needed!&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1734235050"&gt;🧠 The Concept: RAP Event Listeners&lt;/H2&gt;&lt;P&gt;In classic SAP ABAP, you’d typically write enhancements using:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":wrench:"&gt;🔧&lt;/span&gt; BAdIs&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":counterclockwise_arrows_button:"&gt;🔄&lt;/span&gt; User exits&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt; Implicit enhancements&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;But in RAP, you can &lt;STRONG&gt;react to standard business behavior via events&lt;/STRONG&gt;. That means you can write your own &lt;STRONG&gt;custom logic&lt;/STRONG&gt; that responds when something happens in a &lt;STRONG&gt;standard RAP BO (Business Object)&lt;/STRONG&gt; — like a purchase order being approved — by &lt;STRONG&gt;listening to its published events&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This is &lt;STRONG&gt;cleaner, future-proof, and doesn't modify the standard codebase.&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1537721545"&gt;&lt;span class="lia-unicode-emoji" title=":direct_hit:"&gt;🎯&lt;/span&gt; Real Use Case&lt;/H2&gt;&lt;P&gt;Let’s say SAP’s standard BO for PurchaseOrder publishes an event when a PO is &lt;STRONG&gt;approved&lt;/STRONG&gt;. You want to send a custom email, update another Z table, or trigger integration — &lt;EM&gt;only&lt;/EM&gt; when that event happens.&lt;/P&gt;&lt;H3 id="toc-hId-1470290759"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; In RAP, you can do this like so:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Step 1: The standard RAP object publishes the approval event (&lt;STRONG&gt;&lt;U&gt;R_PurchaseOrderTP&lt;/U&gt;&lt;/STRONG&gt;)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Step 2: Your &lt;STRONG&gt;custom RAP behavior definition&lt;/STRONG&gt; listens for that event.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Step 3: You trigger a &lt;STRONG&gt;custom implementation&lt;/STRONG&gt;, e.g., a mail sender class or integration call.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;No BAdI. No user exit. No modifications.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-1144694535"&gt;&lt;span class="lia-unicode-emoji" title=":framed_picture:"&gt;🖼&lt;/span&gt;️ Illustration: RAP Event Flow&lt;/H2&gt;&lt;H3 id="toc-hId-1077263749"&gt;&lt;STRONG&gt;Figure 1: Listening to Standard RAP Events in a Custom BO&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ChatGPT Image Jul 8, 2025, 08_40_11 AM.png" style="width: 666px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283797i66EB5A340CAD1889/image-size/large?v=v2&amp;amp;px=999" role="button" title="ChatGPT Image Jul 8, 2025, 08_40_11 AM.png" alt="ChatGPT Image Jul 8, 2025, 08_40_11 AM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":hammer_and_wrench:"&gt;🛠&lt;/span&gt;️ How to Implement&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;Here’s a simplified code sketch of how this works:&lt;/P&gt;&lt;H3 id="toc-hId-880750244"&gt;1. &lt;STRONG&gt;Listen to Standard Event in Custom BO&lt;/STRONG&gt;&lt;/H3&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;P&gt;&lt;SPAN&gt;CLASS&lt;/SPAN&gt; &lt;SPAN&gt;zcl_po_ext&lt;/SPAN&gt;&lt;SPAN&gt; DEFINITION&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;PUBLIC ABSTRACT FINAL&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;FOR EVENTS OF &lt;/SPAN&gt;&lt;SPAN&gt;R_PurchaseOrderTP&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;PUBLIC SECTION.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;PROTECTED SECTION.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;PRIVATE SECTION.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;ENDCLASS&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-684236739"&gt;2. &lt;STRONG&gt;Handle the Event in Your Class&lt;/STRONG&gt;&lt;/H3&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;P&gt;&lt;SPAN&gt;CLASS&lt;/SPAN&gt; &lt;SPAN&gt;lhe_po_ext&lt;/SPAN&gt;&lt;SPAN&gt; DEFINITION INHERITING FROM &lt;/SPAN&gt;&lt;SPAN&gt;cl_abap_behavior_event_handler&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;PRIVATE SECTION.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;METHODS &lt;/SPAN&gt;&lt;SPAN&gt;on_approved&lt;/SPAN&gt;&lt;SPAN&gt; FOR ENTITY EVENT&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;approved&lt;/SPAN&gt;&lt;SPAN&gt; FOR &lt;/SPAN&gt;&lt;SPAN&gt;purchaseorder&lt;/SPAN&gt;&lt;SPAN&gt;~&lt;/SPAN&gt;&lt;SPAN&gt;approved&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;ENDCLASS.&lt;/SPAN&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId-487723234"&gt;&lt;SPAN&gt;You’re done — and you didn’t need to touch a single line of standard code!&lt;/SPAN&gt;&lt;/H3&gt;&lt;HR /&gt;&lt;H2 id="toc-hId-162127010"&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt; Why This Matters&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":locked:"&gt;🔒&lt;/span&gt; &lt;STRONG&gt;Clean Core Compliant&lt;/STRONG&gt; – Stay upgrade-safe.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":high_voltage:"&gt;⚡&lt;/span&gt; &lt;STRONG&gt;No Enhancements or BAdIs Needed&lt;/STRONG&gt; – Simpler architecture.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;🧱 &lt;STRONG&gt;Composable&lt;/STRONG&gt; – Build logic modularly using RAP principles.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":repeat_button:"&gt;🔁&lt;/span&gt; &lt;STRONG&gt;Reusability&lt;/STRONG&gt; – Listen to multiple events, reuse handlers across objects.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H2 id="toc-hId--34386495"&gt;&lt;span class="lia-unicode-emoji" title=":megaphone:"&gt;📣&lt;/span&gt; Final Thoughts&lt;/H2&gt;&lt;P&gt;The RAP event mechanism offers a &lt;STRONG&gt;paradigm shift&lt;/STRONG&gt; in how we build custom logic in SAP. It allows us to be &lt;STRONG&gt;event-driven&lt;/STRONG&gt;, &lt;STRONG&gt;clean&lt;/STRONG&gt;, and &lt;STRONG&gt;compliant with SAP's future direction&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;If you’re developing on S/4HANA or looking to modernize your ABAP stack — &lt;STRONG&gt;RAP events are your secret weapon&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":eyes:"&gt;👀&lt;/span&gt; Have you tried this approach in your projects? I’d love to hear your experience. Let’s connect and share ideas!&lt;/P&gt;&lt;HR /&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":link:"&gt;🔗&lt;/span&gt; #SAPRAP #CleanCore #S4HANA #ABAP #SAPDevelopers #NoMoreBADIs #EventDrivenArchitecture&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-rap-events-custom-logic-without-badis-or-user-exits/ba-p/14146769"/>
    <published>2025-07-08T08:49:47.512000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/human-capital-management-blog-posts-by-members/modernizing-sap-hr-fin-integration-in-public-institutions-scalable-employee/ba-p/14145537</id>
    <title>Modernizing SAP HR-FIN Integration in Public Institutions: Scalable Employee-Vendor Migration in S/4</title>
    <updated>2025-07-10T14:36:23.943000+02:00</updated>
    <author>
      <name>abap_Sap</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1866490</uri>
    </author>
    <content>&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Background &amp;amp; Objective&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;In SAP ECC, the Employee Vendor master is a key component for enabling travel reimbursements. Typically created via transaction &lt;STRONG&gt;PRAA&lt;/STRONG&gt;, these vendor records must be transformed into &lt;STRONG&gt;Business Partners (BPs)&lt;/STRONG&gt; prior to any S/4HANA upgrade using the &lt;STRONG&gt;Software Update Manager (SUM)&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This transformation is not just a technical necessity; it is a critical process for ensuring &lt;STRONG&gt;financial and operational continuity&lt;/STRONG&gt; post-migration. The challenge is magnified in public sector environments where &lt;STRONG&gt;Concurrent Employment&lt;/STRONG&gt; is common and not fully supported by SAP’s standard programs.&lt;/P&gt;&lt;P&gt;The goal of this initiative was to:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Ensure &lt;STRONG&gt;accurate and compliant migration&lt;/STRONG&gt; of Employee Vendors to Employee BPs&lt;/LI&gt;&lt;LI&gt;Eliminate &lt;STRONG&gt;duplicate vendor records&lt;/STRONG&gt; stemming from concurrent employment&lt;/LI&gt;&lt;LI&gt;Design a &lt;STRONG&gt;replicable, scalable, and SAP-aligned model&lt;/STRONG&gt; that can benefit other public institutions across the U.S.&lt;/LI&gt;&lt;/UL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Mandatory Enhancements in SAP ECC&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;A critical consideration in the ECC-to-S/4HANA migration is the assignment of the correct &lt;STRONG&gt;Business Partner category&lt;/STRONG&gt;. Employee vendors must be migrated with &lt;STRONG&gt;Category 1 (Person)&lt;/STRONG&gt;. Initially, Employee BPs were incorrectly created with &lt;STRONG&gt;Category 2 (Organization)&lt;/STRONG&gt;. To resolve this, we implemented &lt;STRONG&gt;SAP Note 3362655&lt;/STRONG&gt; – &lt;EM&gt;"Mapping of the Business Partner Category as Person during Employee Vendor Migration"&lt;/EM&gt;, ensuring that the correct category was consistently applied.&lt;/P&gt;&lt;P&gt;With &lt;STRONG&gt;SAP S/4HANA 2021&lt;/STRONG&gt;, a new Business Partner synchronization model is available via &lt;STRONG&gt;Business Function /SHCM/EE_BP_1/&lt;/STRONG&gt;. In this model:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;One BP with the &lt;STRONG&gt;Employee&lt;/STRONG&gt; role represents the central person (CP)&lt;/LI&gt;&lt;LI&gt;One or more BPs with the &lt;STRONG&gt;Employment&lt;/STRONG&gt; role represent individual contracts (PERNRs)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;We utilized program &lt;STRONG&gt;/SHCM/R_EMPL_HANDLE_BPROLES&lt;/STRONG&gt; to assign vendor roles to Employment BPs. However, in environments with &lt;STRONG&gt;Concurrent Employment&lt;/STRONG&gt;, this standard logic assigns vendor roles to &lt;STRONG&gt;all assignments&lt;/STRONG&gt;, including secondary ones—creating duplicate vendors and risking payment errors.&lt;/P&gt;&lt;P&gt;To address this, we enhanced the program to &lt;STRONG&gt;exclude Employment BPs for secondary assignments&lt;/STRONG&gt; from vendor role mapping. This ensures that only the &lt;STRONG&gt;main assignment&lt;/STRONG&gt; is eligible for travel payments and vendor role assignment.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_0-1751834681751.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283254i38CD0003752790D2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_0-1751834681751.png" alt="abap_Sap_0-1751834681751.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Migration of Employee Vendors in ECC&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The &lt;STRONG&gt;MDS_LOAD_COCKPIT&lt;/STRONG&gt; transaction was used to migrate employee vendors (ZEMPL) into Employee Business Partners. The same number range was maintained for both the Employee Vendor and the corresponding BP to ensure traceability and consistency.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_1-1751834681756.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283253iE3D38978D7C55B26/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_1-1751834681756.png" alt="abap_Sap_1-1751834681756.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Configurations after SAP S/4HANA migration and before releasing the system to users: &lt;/STRONG&gt;&amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;a. Business Function Activation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Per SAP recommendation, business function /SHCM/EE_BP_1 is activated in S/4HANA to support the New Business partner Model.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_2-1751834681759.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283252i66529A869681049B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_2-1751834681759.png" alt="abap_Sap_2-1751834681759.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Characteristics of the new employee business partner model&lt;/STRONG&gt;&lt;BR /&gt;• One business partner per central person with role Employee is created&lt;BR /&gt;• Separate business partners are created for every employment (every secondary assignment)&lt;BR /&gt;• Employment BP can have vendor or other roles assigned based on business requirement&lt;/P&gt;&lt;P&gt;b. Below config has been performed in the development system and then migrated along the landscape to production:&lt;/P&gt;&lt;P&gt;Table T77SO:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_3-1751834681761.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283255i458740B17E4EF56E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_3-1751834681761.png" alt="abap_Sap_3-1751834681761.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_4-1751834681762.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283256i9B96D4BCE71F64C9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_4-1751834681762.png" alt="abap_Sap_4-1751834681762.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_5-1751834681763.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283257iC6CD2B3B0C866DC9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_5-1751834681763.png" alt="abap_Sap_5-1751834681763.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_6-1751834681764.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283259i746EA459C8D26DAB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_6-1751834681764.png" alt="abap_Sap_6-1751834681764.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_7-1751834681765.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283260i786E94E5B45EA500/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_7-1751834681765.png" alt="abap_Sap_7-1751834681765.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;For HRALX-ESUBG=AB, we need to maintain the number range. Please see below section&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;c. Define Number Ranges&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-Cross-Application Components-&amp;gt;SAP Business Partner-&amp;gt;Business Partner-&amp;gt;Number Ranges and Groupings.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;d. Define Groupings and Assign Number Ranges&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-Cross-Application Components-&amp;gt;SAP Business Partner-&amp;gt;Business Partner-&amp;gt; Define Groupings and Assign Number Ranges.&lt;/P&gt;&lt;P&gt;Maintained AB number range:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_8-1751834681766.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283258i1329BEA2E0EA3A82/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_8-1751834681766.png" alt="abap_Sap_8-1751834681766.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;e. Create Number Ranges for Vendor Accounts&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-&amp;gt;Financial Accounting-&amp;gt;Accounts Receivable and Accounts Payable-&amp;gt;Supplier Accounts-&amp;gt;Master Data-&amp;gt;Preparations for Creating Supplier Master Data-&amp;gt; Create Number Ranges for Vendor Accounts&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;f. Assign Number Ranges to Vendor Account Groups&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-&amp;gt;Financial Accounting-&amp;gt;Accounts Receivable and Accounts Payable-&amp;gt;Supplier Accounts-&amp;gt;Master Data-&amp;gt;Preparations for Creating Supplier Master Data-&amp;gt; Assign Number Ranges to Vendor Account Groups&lt;/P&gt;&lt;P&gt;Assign AB Number range to ZEMPL account group&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;g. Define Number Assignment for Direction BP to Vendor&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG Path- Cross-Application Components -&amp;gt; Master Data Synchronization -&amp;gt; Customer/Vendor Integration -&amp;gt; Business Partner Settings -&amp;gt; Settings for Vendor Integration -&amp;gt; Field Assignment for Vendor Integration -&amp;gt; Assign Keys -&amp;gt; Define Number Assignment for Direction BP to Vendor&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;h. Define Number Assignment for Direction Vendor to BP&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG Path- Cross-Application Components -&amp;gt; Master Data Synchronization -&amp;gt; Customer/Vendor Integration -&amp;gt; Business Partner Settings -&amp;gt; Settings for Vendor Integration -&amp;gt; Field Assignment for Vendor Integration -&amp;gt; Assign Keys -&amp;gt; Define Number Assignment for Direction Vendor to BP&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;i. Define Address Types&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Cross-Application Components-&amp;gt;SAP Business Partner-&amp;gt;Business Partner-&amp;gt;Basic Settings-&amp;gt;Address Determination-&amp;gt;Define Address Types&lt;/P&gt;&lt;P&gt;Maintain HCM001 &amp;amp; HCM003&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;HCM001 Employee Private Address&lt;/LI&gt;&lt;LI&gt;HCM003 Address of Main Employment&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_9-1751834681766.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283261iB6B131C8ACFB1AAF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_9-1751834681766.png" alt="abap_Sap_9-1751834681766.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;j. Define Identification Types&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Cross-Application Components-&amp;gt;SAP Business Partner-&amp;gt;Business Partner-&amp;gt;Basic Settings -&amp;gt;Identification Numbers-&amp;gt;Define Identification Types&lt;/P&gt;&lt;P&gt;Maintain HCM001, HCM032 and HCM033&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;HCM032 Personnel Number (Main Employment)&lt;/LI&gt;&lt;LI&gt;HCM033 Personnel Number (Employment)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_10-1751834681767.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283262iCFF68D8438752E82/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_10-1751834681767.png" alt="abap_Sap_10-1751834681767.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;k. Define BP Roles&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-&amp;gt;Cross-Application Components -&amp;gt;SAP Business Partner -&amp;gt;Business Partner -&amp;gt;Basic Settings -&amp;gt;Define BP Roles.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="abap_Sap_11-1751834681770.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283263i8517D3BEFC5D24F5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="abap_Sap_11-1751834681770.png" alt="abap_Sap_11-1751834681770.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;l. Define Reconciliation Accounts for Employees in Role FI Supplier&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;IMG-&amp;gt;Integration with Other SAP Components-&amp;gt;Integration with SAP Success Factors (Employee Central)-&amp;gt; Define Reconciliation Accounts for Employees in Role FI Supplier.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;m. PTRV_VENDOR_SYNC&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Launch SM30 and enter table PTRV_VENDOR_SYNC, also create a reference vendor in the development client and later this needs to be maintained in each client.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Initial HR Sync in SAP S/4HANA&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;This report /SHCM/RH_SYNC_BUPA_EMPL_SINGLE must be executed before releasing the system to the users. This report is executed for all active and inactive employees:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;For pernrs with single employment- This report will create two BPs, one BP with employee role and another BP with employment role.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;For pernrs with multiple employment- This report will create one BP with employee role and one or more employment role (for each secondary assignment, an employment BP will be created)&lt;STRONG&gt;. &lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp;Post S/4HANA Employee Sync Jobs&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;After SAP S/4HANA GO-Live, report /SHCM/RH_SYNC_BUPA_FROM_EMPL must be scheduled in background. This report must run daily in production.&lt;/P&gt;&lt;P&gt;Note: when a new employee record is created, immediately system creates an employee BP and employment BP if the effective date = systems date. If the effective date is in future, this job /SHCM/RH_SYNC_BUPA_FROM_EMPL creates employee BP and employment BP based on effective date. Hence, it is essential to run this job daily.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;/SHCM/R_EMPL_HDLE_BPRLES_DELTA-Vendor Role Job&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;This job adds a vendor role-FLVN00 to an employment BP. This report reads the data from table-/SHCM/D_RLE_SYNC. This report should run in production on daily basis.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Important Note&lt;/STRONG&gt;: Program /SHCM/R_EMPL_HANDLE_BPROLES also adds vendor role to selected Pernrs with employment BP. This program has a selection screen to enter the Pernr. This program can be executed on an exceptional basis. We have modified this program to skip the vendor role addition for secondary assignments (as mentioned earlier).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;8. Enhancements in /SHCM/R_EMPL_HDLE_BPRLES_DELTA&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enhancement #1&lt;/STRONG&gt;: If the report is mistakenly executed without a variant, this report can add vendor role to all employment BPs, hence an enhancement is added to run this job with Last sync date. An error message will be displayed to the users if this report is executed without Last sync date.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enhancement#2&lt;/STRONG&gt;: Since this report adds a vendor role to secondary assignment, an enhancement is needed to prevent the vendor role creation for secondary assignment. If a pernr in the table -/SHCM/D_RLE_SYNC is a secondary assignment, the enhancement will skip that pernr and vendor role will not be added.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enhancement #3&lt;/STRONG&gt;: An enhancement is done to modify the payment method and house bank information in employee vendor based on HR payment method and Bank information.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Employee Business Partner Overview Report&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The report /SHCM/R_EE_BP_RELATION_OVW (&lt;STRONG&gt;T.code-/SHCM/EE_BP_RLTN&lt;/STRONG&gt;) provides a relationship between User, employee BP, employment BP and vendor #. This report can be executed with Pernr or Business Partner # or User ID.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Troubleshooting Tips: &lt;/STRONG&gt;&lt;OL&gt;&lt;LI&gt;Table BUT000- this table provides creation and modifications date and time stamp for employee BP and employment BP.&lt;/LI&gt;&lt;LI&gt;SLG1 log to check all BP creation errors&lt;/LI&gt;&lt;/OL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This document demonstrates a complete, end-to-end strategy for employee vendor migration during SAP S/4HANA implementation. Through custom enhancements and targeted configuration, we aligned the migration with SAP best practices while addressing unique institutional needs such as Concurrent Employment.&lt;/P&gt;&lt;P&gt;The solution is scalable and applicable to other &lt;STRONG&gt;U.S.-based public institutions&lt;/STRONG&gt;—ensuring reliable vendor synchronization, accurate travel payments, and reduced duplication in a highly regulated environment.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/human-capital-management-blog-posts-by-members/modernizing-sap-hr-fin-integration-in-public-institutions-scalable-employee/ba-p/14145537"/>
    <published>2025-07-10T14:36:23.943000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-prompt-templates-in-abap-ai-sdk-via-islm-scenario/ba-p/14150585</id>
    <title>How to use Prompt Templates in ABAP AI SDK via ISLM Scenario</title>
    <updated>2025-07-11T19:14:00.568000+02:00</updated>
    <author>
      <name>shahbhat</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/141164</uri>
    </author>
    <content>&lt;P&gt;Here it is:&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_down:"&gt;👇&lt;/span&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;Add Prompt Templates in the Intelligent Scenario Model artefact in Eclipse(ADT). If you need to pass an argument to the prompt, you can define the parameters using the following format '{&lt;STRONG&gt;ISLM_&lt;/STRONG&gt;&amp;lt;name of the variable&amp;gt;}', where '&lt;STRONG&gt;ISLM_&lt;/STRONG&gt;' is the prefix as shown in the second screenshot below.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="shahbhat_2-1752252411026.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285567i09065AF4EAE59B8B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="shahbhat_2-1752252411026.png" alt="shahbhat_2-1752252411026.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="shahbhat_0-1752253845265.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285631i5E4050B7139C0BB0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="shahbhat_0-1752253845265.png" alt="shahbhat_0-1752253845265.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;Use the ABAP AI SDK classes to access prompt templates from the ISLM Scenario.&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD generate_description.
    TRY.
        FINAL(api) = cl_aic_islm_compl_api_factory=&amp;gt;get( )-&amp;gt;create_instance( islm_scenario = 'Z_ISLM_SCEN_SB1' ).
      CATCH cx_aic_api_factory INTO DATA(lx_api).
        rv_description = ''.
    ENDTRY.

    TRY.
        FINAL(prompt_template_instance) = cl_aic_islm_prompt_tpl_factory=&amp;gt;get( )-&amp;gt;create_instance(
                                                                               islm_scenario = 'Z_ISLM_SCEN_SB1'
                                                                               template_id   = 'CITY_DESC' ).
        FINAL(prompt_template_instance2) = cl_aic_islm_prompt_tpl_factory=&amp;gt;get( )-&amp;gt;create_instance(
        islm_scenario = 'Z_ISLM_SCEN_SB1'
        template_id   = 'SYS_ROLE' ).

      CATCH cx_aic_api_factory INTO DATA(lx_api1).
        rv_description = ''.
    ENDTRY.

    IF ( prompt_template_instance IS BOUND ).

      TRY.
          FINAL(prompt) = prompt_template_instance-&amp;gt;get_prompt( parameters = VALUE #( ( name  = 'ISLM_city'
                                                                                value = iv_city ) ) ).
          FINAL(sys_role_prompt) = prompt_template_instance2-&amp;gt;get_prompt( ).
        CATCH cx_aic_prompt_template INTO DATA(lx_prompt_templ).
          "handle exception
      ENDTRY.

    ENDIF.

    IF ( api IS BOUND ).
      TRY.
          DATA(messages) = api-&amp;gt;create_message_container( ).
          messages-&amp;gt;set_system_role( sys_role_prompt ).
          messages-&amp;gt;add_user_message( prompt ).
          rv_description = api-&amp;gt;execute_for_messages( messages )-&amp;gt;get_completion( ).
        CATCH cx_aic_completion_api INTO DATA(lx_completion).
          rv_description = ''.
      ENDTRY.
    ENDIF.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-prompt-templates-in-abap-ai-sdk-via-islm-scenario/ba-p/14150585"/>
    <published>2025-07-11T19:14:00.568000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/yaai-amp-yaai-ui-open-source-ai-tools-for-abap-developers/ba-p/14145639</id>
    <title>yaai &amp; yaai_ui – Open-Source AI Tools for ABAP Developers</title>
    <updated>2025-07-13T13:14:42.960000+02:00</updated>
    <author>
      <name>ChristianSilva</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/608785</uri>
    </author>
    <content>&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Open-Source AI Tools for ABAP Developers&lt;/STRONG&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;SPAN&gt;&lt;BR /&gt;A few months ago, I embarked on a journey to learn about and explore large language models. After spending some time coding in Python and experimenting with Ollama, LangChain, LangGraph, and many other tools in the Python ecosystem, I decided to challenge myself to do similar things in ABAP, the programming language I've been working with for nearly two decades.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;SPAN&gt;Well, I'm still on this journey, and to be honest, as crazy as it might sound, I'm having a lot of fun&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":nerd_face:"&gt;🤓&lt;/span&gt;&lt;/SPAN&gt;&lt;SPAN&gt;. I've lost count of how many times I've found myself laughing, hardly believing what I was seeing while testing features like function calling and retrieval-augmented generation. Honestly, developing AI-powered applications in ABAP is something that never crossed my mind. For someone who started with ABAP version 4.6C, it's quite mind-blowing.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;I think the tools I've been developing over the last few months might be of interest to other ABAP developers who want to dive into the rabbit hole of large language models and all the things they are capable of. The possibilities are endless.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;BR /&gt;So, it's time to share this with the ABAP community. I hope to see many of you having fun using AI right within ABAP, bringing new ideas, and hopefully contributing to these projects. &lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Introducing yaai&amp;nbsp;&amp;amp; yaai_ui&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;I'm happy to share &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;yaai - ABAP AI tools&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and its companion project, &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;yaai_ui - ABAP AI User Interface&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;with the ABAP community! These two open-source repositories are designed to equip ABAP developers to easily integrate Artificial Intelligence, specifically Large Language Models (LLMs), directly into their SAP systems using &lt;/SPAN&gt;&lt;SPAN&gt;only ABAP code&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;The goal of yaai and yaai_ui is to enable ABAP developers to learn and explore Artificial Intelligence capabilities within their familiar environment—at no cost. The only potential cost is for paid AI APIs (such as OpenAI), if you choose to use them. You can get started right away using free APIs like Google Gemini, or by running your own self-hosted LLMs with Ollama.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Introducing yaai - ABAP AI tools: &lt;/STRONG&gt;&lt;EM&gt;Your Backend AI Engine for ABAP&lt;/EM&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;A href="https://github.com/christianjianelli/yaai" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;https://github.com/christianjianelli/yaai&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;repository provides a set of tools focused on backend AI integration for ABAP environments. It's built to facilitate powerful AI capabilities that you can leverage directly within your SAP applications.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;Key Features of ABAP AI tools include:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Multi-Provider LLM API Support&lt;/STRONG&gt;&lt;SPAN&gt;: This is a core strength, offering flexibility in choosing your LLM provider and deployment model. Currently supported APIs include &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;OpenAI&lt;/STRONG&gt; (cloud-based)&lt;/SPAN&gt;&lt;SPAN&gt;, &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Ollama&lt;/STRONG&gt; (local/self-hosted)&lt;/SPAN&gt;&lt;SPAN&gt;, and &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Google Gemini&lt;/STRONG&gt; (cloud-based)&lt;/SPAN&gt;&lt;SPAN&gt;. The tools are also compatible with APIs from other providers, such as &lt;STRONG&gt;Nvidia&lt;/STRONG&gt;, that implement &lt;U&gt;OpenAI API standards&lt;/U&gt;, possibly with minor adjustments.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Conversation Management&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;: The tools allow you to maintain and manage multi-turn conversations, providing full access to conversation history for advanced chat scenarios directly within your ABAP applications.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Tool/Function Calling&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Integrate your existing &lt;/SPAN&gt;&lt;SPAN&gt;ABAP business logic with LLMs&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;using function/tool calling. This enables AI models to directly trigger ABAP methods, opening up new possibilities for intelligent automation and process enhancement.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Retrieval-Augmented Generation (RAG)&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Enhance the accuracy and relevance of LLM outputs by incorporating your &lt;/SPAN&gt;&lt;SPAN&gt;enterprise data&lt;/SPAN&gt;&lt;SPAN&gt;. This allows you to build applications that provide more context-aware and specific answers by pulling information from your SAP system.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;&lt;SPAN&gt;These features collectively can help you to learn how to build &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;intelligent ABAP applications&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;that leverage the latest advancements in AI.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Meet yaai_ui - ABAP AI User Interface: &lt;/STRONG&gt;&lt;EM&gt;Bringing AI to the User's Fingertips&lt;/EM&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Complementing the backend tools, the &lt;/SPAN&gt;&lt;A href="https://github.com/christianjianelli/yaai_ui" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;https://github.com/christianjianelli/yaai_ui&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;repository provides ready-to-use user interface components to interact with LLMs directly from your SAP system. This project simplifies the creation of engaging AI-powered frontends in ABAP.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;The ABAP AI User Interface includes:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Chat Interface&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Enable conversational AI interactions directly within your SAP system, allowing users to engage with LLMs in a familiar chat window.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="abap_ai_ui_chat_anim" style="width: 800px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283324i14D099A806925A2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="abap_ai_ui_chat_anim" alt="abap_ai_ui_chat_anim" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Code Assistant&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: Access &lt;/SPAN&gt;&lt;SPAN&gt;AI-powered code suggestions and assistance for ABAP development&lt;/SPAN&gt;&lt;SPAN&gt;, potentially boosting developer productivity and code quality.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="yaai_ui_code_assist_using_1" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283327i8D0EEF56B4BF8D65/image-dimensions/600x396?v=v2" width="600" height="396" role="button" title="yaai_ui_code_assist_using_1" alt="yaai_ui_code_assist_using_1" /&gt;&lt;/span&gt;&lt;P&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="yaai_ui_code_assist_using_2" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283328i5B67CD743BBA4873/image-dimensions/600x363?v=v2" width="600" height="363" role="button" title="yaai_ui_code_assist_using_2" alt="yaai_ui_code_assist_using_2" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="yaai_ui_code_assist_using_3" style="width: 599px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283329i98A6EE23B2ACA3F2/image-dimensions/599x363?v=v2" width="599" height="363" role="button" title="yaai_ui_code_assist_using_3" alt="yaai_ui_code_assist_using_3" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Getting Started is Simple!&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;Both repositories can be easily installed into your SAP system using &lt;/SPAN&gt;&lt;A href="https://abapgit.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;abapGit&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;Prerequisites for installation include:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;An SAP system running &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;ABAP&lt;/STRONG&gt; version &lt;STRONG&gt;7.52 or higher&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;abapGit&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;installed and configured in your ABAP system&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Appropriate &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;developer authorizations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;in your ABAP system&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;STRONG&gt;Important Note&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: To use the ABAP AI User Interface, the &lt;/SPAN&gt;&lt;SPAN&gt;ABAP AI Tools (&lt;/SPAN&gt;&lt;SPAN&gt;yaai&lt;/SPAN&gt;&lt;SPAN&gt;) &lt;U&gt;must be installed first&lt;/U&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;in your SAP system. Detailed installation steps are provided in each repository's documentation.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;You can find quickstart guides in the documentation to help you run your first simple LLM application or chat application.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Explore, Experiment, and Contribute!&lt;/STRONG&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;These tools are currently &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;experimental&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and released under the &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;MIT License&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;. This means they are provided "as is" and you use them at your own risk. However, this also means they are open for community collaboration!&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;I encourage you to:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Explore&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;the repositories on GitHub:&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;yaai - ABAP AI tools&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;: &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://github.com/christianjianelli/yaai" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/christianjianelli/yaai&lt;/A&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;yaai_ui - ABAP AI User Interface&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;: &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://github.com/christianjianelli/yaai_ui" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/christianjianelli/yaai_ui&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Experiment&lt;SPAN&gt;&amp;nbsp;with the examples and integrate them into your own ABAP projects.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Provide &lt;/SPAN&gt;&lt;SPAN&gt;feedback&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and &lt;/SPAN&gt;&lt;SPAN&gt;contribute&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;to the evolving project.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;DIV&gt;&lt;SPAN&gt;Start building your intelligent ABAP applications today! &lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;FONT size="2"&gt;&lt;EM&gt;This text was written with the help of Artificial Intelligence.&lt;BR /&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/yaai-amp-yaai-ui-open-source-ai-tools-for-abap-developers/ba-p/14145639"/>
    <published>2025-07-13T13:14:42.960000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/include-released-successor-objects-from-quot-cloudification-repo-quot-in/ba-p/14136908</id>
    <title>Include released successor objects from "cloudification repo" in your ABAP custom code migration</title>
    <updated>2025-07-17T15:35:03.728000+02:00</updated>
    <author>
      <name>lutzi3</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/168005</uri>
    </author>
    <content>&lt;P&gt;Many SAP customers are currently in the phase of migrating their SAP ERP systems to S/4HANA. For those who choose a brownfield or bluefield approach the old ERP system is converted and the customers extensions and own applications (Z* objects) become part of the new system.&lt;/P&gt;&lt;P&gt;Then, the process of Custom Code Adaptation kicks in where the ERP functionality is analyzed and corrected in a way that the objects run again in S/4HANA. See &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/get-started-with-the-abap-custom-code-migration-process/bc-p/14049622" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/get-started-with-the-abap-custom-code-migration-process/bc-p/14049622&lt;/A&gt; or &lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/sap-s-4hana-system-conversion-custom-code-adaptation-process/ba-p/13337309" target="_blank"&gt;https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/sap-s-4hana-system-conversion-custom-code-adaptation-process/ba-p/13337309&lt;/A&gt; for more details.&lt;/P&gt;&lt;P&gt;The custom code correction process can be time consuming and challenging depending on the size and complexity of the original ERP system. A big part of the custom code objects will be touched. The basis for the checks and corrections is the ABAP Test Cockpit (ATC) with the check variant for S/4HANA (e.g. S4HANA_READINESS_2023).&lt;/P&gt;&lt;P&gt;In case the customer wants to move functionality to SAP BTP ABAP or the S/4HANA (public) Cloud versions it is not sufficient to make the old ERP code just S/4HANA ready. The cloud versions have a heavily restricted set of the ABAP language (so called &lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenabap_versions.htm" target="_blank" rel="noopener noreferrer"&gt;language version 5&lt;/A&gt;&amp;nbsp;) and furthermore access to SAP standard objects is allowed to (relatively few) released objects only. For instance, you must not use the MARA table to read materials but the I_PRODUCT CDS. This information is stored in the so called cloudification repository (&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/how-to-check-your-custom-code-for-abap-cloud/ba-p/13567124" target="_blank"&gt;https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/how-to-check-your-custom-code-for-abap-cloud/ba-p/13567124&lt;/A&gt; ) which is regularly updated. (See &lt;A href="https://github.com/SAP/abap-atc-cr-cv-s4hc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/abap-atc-cr-cv-s4hc&lt;/A&gt; for the Raw data).&lt;/P&gt;&lt;P&gt;It contains as well successor information for some of the old ERP objects in particular for the data base tables which makes it particularly interesting for the custom code migration process. See note &lt;A href="https://launchpad.support.sap.com/#/notes/3284711" target="_blank" rel="noopener noreferrer"&gt;https://launchpad.support.sap.com/#/notes/3284711&lt;/A&gt; for installation of the according ATC check / check "Usage of Released APIs (Cloudification Repository)" &amp;nbsp;in releases before 2023 FP 3.&lt;/P&gt;&lt;P&gt;The idea is now to use the &lt;STRONG&gt;officially released successors for the objects which need to be corrected&lt;/STRONG&gt; anyway during the migration ERP -&amp;gt; S/4HANA.&lt;/P&gt;&lt;P&gt;A (simple) example: When accessing table SKA1 corrections could be necessary because of the new account type attributes e.g. GLACCOUNT_TYPE in S/4; secondary cost elements are saved now as well. This is found by the S4HANA_READINESS_2023. The same access is found by the "Usage of Released APIs (Cloudification Repository)" check as well:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_1-1750868218556.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278795iABEA7BB84A2CEA10/image-size/large?v=v2&amp;amp;px=999" role="button" title="lutzi3_1-1750868218556.png" alt="lutzi3_1-1750868218556.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The solution to solve both issues is to check if secondary cost elements are concerned and to follow the recommendation in the finding. In the correction the successor object (DDLS I_GLACCOUNTINCHARTOFACCOUNTS) should be used directly:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_2-1750868251695.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278796iC26AC3CAF29D6544/image-size/large?v=v2&amp;amp;px=999" role="button" title="lutzi3_2-1750868251695.png" alt="lutzi3_2-1750868251695.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This combination approach makes a part of the own developments "cloud ready" and "S/4HANA ready" at the same time without a big additional effort. And anyway, it is better for upgrade stability to use officially released objects!&lt;/P&gt;&lt;P&gt;Here are 3 possible approaches to achieve this:&lt;/P&gt;&lt;H2 id="toc-hId-1733313264"&gt;Approach 1: Out of the box: Combined Check&lt;/H2&gt;&lt;P&gt;Create a Z ATC Check variant and select the checks from S4HANA_READINESS* and the check "Usage of Released APIs (Cloudification Repository)" . The easiest would be to copy S4HANA_READINESS* and then to select in the maintenance of the check variants (via transaction /nSCI):&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_0-1750869196948.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278802i1DD4B336CBE0FBB5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lutzi3_0-1750869196948.png" alt="lutzi3_0-1750869196948.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Once you run the check you will see the result as in this example:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_1-1750869196955.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278801iD2CC420733DC8702/image-size/large?v=v2&amp;amp;px=999" role="button" title="lutzi3_1-1750869196955.png" alt="lutzi3_1-1750869196955.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The findings from the combined check contain already all needed information but there are two shortcomings: the list contains many irrelevant entries; not all check categories (only when the successor is defined) nor all findings are relevant in the context of S/4HANA custom code adoption (e.g. Successor I_COUNTRY for T005 table doesn’t solve a Custom Code Migration issue).&lt;/P&gt;&lt;H2 id="toc-hId-1536799759"&gt;Approach 2: Add information from Cloudification Repo manually&lt;/H2&gt;&lt;P&gt;Instead of a combined check variant the successor information could be added via Excel / VLOOKUP (SVERWEIS in German) as well using these steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Run the standard ATC check for Custom Code Analysis (e.g. S4HANA_READINESS_2023)&lt;/LI&gt;&lt;LI&gt;Download the detailed list from ATC to Excel (include in any case the field reference object / Referenzobjekt)&lt;/LI&gt;&lt;LI&gt;Download the cloudification repo from here &lt;A href="https://github.com/SAP/abap-atc-cr-cv-s4hc/blob/main/src/objectReleaseInfoLatest.csv" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/abap-atc-cr-cv-s4hc/blob/main/src/objectReleaseInfoLatest.csv&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Open the data in Excel and copy the sheet to your original excel in a new tab&lt;/LI&gt;&lt;LI&gt;Add a new column to the first tab from ATC data and combine the data via VLOOKUP: find a possible successor objects in the released objects for the reference objects&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;A possible result could look like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_0-1750917331297.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278960i007475D15532D91F/image-size/large?v=v2&amp;amp;px=999" role="button" title="lutzi3_0-1750917331297.png" alt="lutzi3_0-1750917331297.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I added an example excel for convenience reasons to Github here:&amp;nbsp;&lt;A href="https://github.com/Lutzi3/cloud_mig_atc/blob/main/ATC_S4HANA_CLOUDIF_REPO_EXAMPLE.xlsx" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/Lutzi3/cloud_mig_atc/blob/main/ATC_S4HANA_CLOUDIF_REPO_EXAMPLE.xlsx&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Then, when processing the ATC findings, the successor objects from Excel can be used directly in the corrections.&lt;/P&gt;&lt;H2 id="toc-hId-1340286254"&gt;Approach 3: Using a custom enhancement to the SAP ATC S/4HANA: Released objects as additional information&lt;/H2&gt;&lt;P&gt;In order to avoid the manual Excel steps and to have a lean combined list of the relevant findings only there is also the possibility to enhance the "additional information" section via an implicit enhancement or via another copy of the standard check classes in the S/4HANA Custom Code area. If you decide for the enhancement you can use the methode GET_DETAIL_FROM_DATA_BUFFER &amp;nbsp;from the central utility class CL_CI_S4H_COMMON and add the successor object information there.&lt;/P&gt;&lt;P&gt;The result is that if there is the successor object available it will be put to the Additional Information Section of the findings as shows the following &amp;nbsp;example:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lutzi3_0-1751026443405.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279803i0A0D2003AFA8C10C/image-size/large?v=v2&amp;amp;px=999" role="button" title="lutzi3_0-1751026443405.png" alt="lutzi3_0-1751026443405.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;There is an example version on Github for this as well:&amp;nbsp;&lt;A href="https://github.com/Lutzi3/cloud_mig_atc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/Lutzi3/cloud_mig_atc&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now the existing ATC S4HANA readiness check is enhanced by the new released object information such as that you can directly correct the old ERP object reference and replace it by the latest officially released SAP cloud ready object!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/include-released-successor-objects-from-quot-cloudification-repo-quot-in/ba-p/14136908"/>
    <published>2025-07-17T15:35:03.728000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/exposing-sap-s4-onprem-data-to-external-system-odata-service-btp/ba-p/14151915</id>
    <title>Exposing SAP S4 Onprem data to external System || Odata Service || BTP || Destination-Connectivity</title>
    <updated>2025-07-24T09:09:11.979000+02:00</updated>
    <author>
      <name>Ace_D</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1501366</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1735011379"&gt;&lt;STRONG&gt;Prerequisites from BTP Side&lt;/STRONG&gt;&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;SAP BTP Account&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Access to SAP Business Technology Platform (BTP) with appropriate entitlements.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SAP Cloud Connector Setup&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;SAP Cloud Connector installed and configured to connect your on-premise S/4HANA system to SAP BTP.&lt;/LI&gt;&lt;LI&gt;Destination configured in BTP cockpit pointing to your on-premise system.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Connectivity Service and Destination Service&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;SAP BTP Connectivity service and destination service instance on the BTP account.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Cloud Foundry Environment&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Cloud Foundry space set up in your BTP subaccount to deploy the application.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Use Case:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets take a simple use case for creating a RAP service on S4, which is a wrapper API call on the reprocess IDOC function module.&lt;/P&gt;&lt;P&gt;For this we will create a RAP service on the S4 box, than activate the service with the &lt;STRONG&gt;/IWFND/MAINT_SERVICE&amp;nbsp;&lt;/STRONG&gt;and activate the &lt;STRONG&gt;ICF Node as well.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Note: In this blog we will not go through the steps of setting cloud connector and destination on the BTP account. We will assume that destination with cloud connector setup is already available on the BTP.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create and activate the RAP service on the S4 Box.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;We will create a unmanaged rap scenario with custom entity and than we will create a service definition and top of service definition we will create service binding.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_0-1752479114889.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286063i6147300A58FD94EB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_0-1752479114889.png" alt="Ace_D_0-1752479114889.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Lets create the class for the query implementation.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_1-1752479219667.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286066i8FE4DD17F2125A3B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_1-1752479219667.png" alt="Ace_D_1-1752479219667.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_3-1752479284513.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286068i7DF33D859E64B0B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_3-1752479284513.png" alt="Ace_D_3-1752479284513.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_4-1752479314425.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286069i1ADC607EAFF20853/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_4-1752479314425.png" alt="Ace_D_4-1752479314425.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;We are calling the FM to reprocess the idoc and checking the relevant table to get the latest reprocessed idoc status for the same.&lt;/P&gt;&lt;P&gt;Now we will create a service definition and service binding for the custom entity created.&lt;/P&gt;&lt;P&gt;Service Definition&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_8-1752479854976.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286073i72B0728E2CDB8D9C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_8-1752479854976.png" alt="Ace_D_8-1752479854976.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And overall project will look something like this.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_5-1752479511558.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286070iB8D8CB8704C75416/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_5-1752479511558.png" alt="Ace_D_5-1752479511558.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here i have created two types of service bindings v2 and v4 but we will be using only v2 for this.&lt;/P&gt;&lt;P&gt;So overall we created below 4 artifacts.&lt;/P&gt;&lt;P&gt;1. Custom entity&lt;/P&gt;&lt;P&gt;2. Class&lt;/P&gt;&lt;P&gt;3. Service definition&lt;/P&gt;&lt;P&gt;4. Service binding&lt;/P&gt;&lt;P&gt;Now to test the service we will publish the service first and than call the generated url&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_7-1752479816432.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286072iDC562CE467DBAAA5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_7-1752479816432.png" alt="Ace_D_7-1752479816432.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;if you see the image, i have published the service and after publish we also got the custom entity that we have created, click on the &lt;STRONG&gt;service url&lt;/STRONG&gt; and it will open in browser asking for authentication of S4 user id and password.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_9-1752480025822.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286074iD29880ABB4A5E44A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_9-1752480025822.png" alt="Ace_D_9-1752480025822.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the authentication is successful you should be able to see this.&lt;/P&gt;&lt;P&gt;Now lets open the SAP GUI so that i can show you the ICF node activation, which is generally taken care by basis team.&lt;/P&gt;&lt;P&gt;Open the Tcode:&amp;nbsp;&lt;STRONG&gt;/IWFND/MAINT_SERVICE&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_10-1752480290098.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286075i2C11D72626448B10/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_10-1752480290098.png" alt="Ace_D_10-1752480290098.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here you can find your activated service binding and make sure all components of the service looks as it is in the image.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Assuming cloud connector and destination is setup on BTP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With this we completed the S4 box setup, now its ready to communicate with other external systems.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Creating the Destination service and Connectivity service on the BTP Account.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Login in to BTP account and lets create 2 service instances with service keys.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_11-1752483153170.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286097iDCC3A3321CE1ECB0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_11-1752483153170.png" alt="Ace_D_11-1752483153170.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;1.&amp;nbsp;&lt;STRONG&gt;Destination service&lt;/STRONG&gt;, this will help us to get the destination details, Destination service gets all the registered destinations on the BTP, from which we can filter out the destination that is up for our S4 onprem box.&lt;/P&gt;&lt;P&gt;Destination service will give us all the relevant things like user id passwd, location and etc. for that destination.&lt;/P&gt;&lt;P&gt;Service key for the destination service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_12-1752483270245.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286098iBE180D64FD0F615E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_12-1752483270245.png" alt="Ace_D_12-1752483270245.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_13-1752483330309.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286099i127A1F287FB75995/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_13-1752483330309.png" alt="Ace_D_13-1752483330309.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. &lt;STRONG&gt;Connectivity Service,&amp;nbsp;&lt;/STRONG&gt;Since we are trying to get the data out of onprem system we will have to use connectivity service from btp, which will provide us proxies, this proxies will be use to call the onprem odata url.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_14-1752483491742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286106i3806395799EEF5CB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_14-1752483491742.png" alt="Ace_D_14-1752483491742.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_15-1752483598535.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286107iCD11D07C5A492C3E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_15-1752483598535.png" alt="Ace_D_15-1752483598535.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;It is important to paste here the service keys for better understanding since we will be using many things from the service key into our application&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Lets create a python application to call the onprem service.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Important things to consider here.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;By using destination and connectivity service we cannot test the application on local system, we will have to deploy our app on CF to test the same.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We will use the flask requests and certain other libraries for the python programming&lt;/P&gt;&lt;P&gt;file: .env file to store all the secrets this secrets are from the service keys only.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_2-1752492372749.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286202iF6300349E7896528/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_2-1752492372749.png" alt="Ace_D_2-1752492372749.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;File: Requirements.txt&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_0-1752492015085.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286200i27F53BD3C09B09AE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_0-1752492015085.png" alt="Ace_D_0-1752492015085.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;File: Runtime.txt&lt;/P&gt;&lt;P&gt;python-3.11.*&lt;/P&gt;&lt;P&gt;file: manifest.yaml&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_1-1752492157202.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286201iA56CB734CFA3967C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_1-1752492157202.png" alt="Ace_D_1-1752492157202.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;file:idocapis.py (should be same as mentioned in Manifest.yml file&lt;/P&gt;&lt;P&gt;Load all the required libraries.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_3-1752492555784.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286203iEB454EAAAAA7E66C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_3-1752492555784.png" alt="Ace_D_3-1752492555784.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;define the function to get the token&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_4-1752493129840.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286204i152BA582C8BA1F8B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_4-1752493129840.png" alt="Ace_D_4-1752493129840.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to get the list of all destinations on the BTP&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_5-1752493241781.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286205iA640B84C01B00E5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_5-1752493241781.png" alt="Ace_D_5-1752493241781.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define the function to construct the URL for the odata call&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_6-1752493319173.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286206i83806D03EC8AE6C7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_6-1752493319173.png" alt="Ace_D_6-1752493319173.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to get token for the connectivity service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_7-1752493411094.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286213i4C439E0B0047EB4E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_7-1752493411094.png" alt="Ace_D_7-1752493411094.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Define function to call the odata service with connectivity things&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_8-1752493551879.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286242iDE3AED9EE0D95C35/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_8-1752493551879.png" alt="Ace_D_8-1752493551879.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_9-1752493573946.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286243i670226B5E2674B07/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_9-1752493573946.png" alt="Ace_D_9-1752493573946.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now lets define the final route in flask to call this service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_13-1752494450583.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286281i0C7C7F657EECF5CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_13-1752494450583.png" alt="Ace_D_13-1752494450583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;One thing to note here the&amp;nbsp;&lt;STRONG&gt;RESOURCE variable will depend on the destination url of the onprem that is setup on BTP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_11-1752494105816.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286279i7A1D0EA83E29C50A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_11-1752494105816.png" alt="Ace_D_11-1752494105816.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_12-1752494133009.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286280iBAC4EB399CB3AEFD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_12-1752494133009.png" alt="Ace_D_12-1752494133009.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;STEP 4: Deployment&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets deploy the app on the CF by pushing the app to the cloud foundry from the BAS&lt;/P&gt;&lt;P&gt;Use command &lt;STRONG&gt;cf push&lt;/STRONG&gt; after successful authentication for your cloud foundry space.&lt;/P&gt;&lt;P&gt;After the deployment on the cloud we can get the url that is generated on the cloud.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_14-1752495094785.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286283iF188D4ACAB2AC66A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_14-1752495094785.png" alt="Ace_D_14-1752495094785.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Testing the application:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Lets create a small python program to call this API in local now to test it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ace_D_15-1752495325813.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286284iA1C1678704489B7A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Ace_D_15-1752495325813.png" alt="Ace_D_15-1752495325813.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You should get response coming from your S4 onPrem system.&lt;/P&gt;&lt;P&gt;Thanks for staying till the end!!!&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/exposing-sap-s4-onprem-data-to-external-system-odata-service-btp/ba-p/14151915"/>
    <published>2025-07-24T09:09:11.979000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/a-step-by-step-guide-to-implementing-an-excel-upload-button-in-a-fiori-app/ba-p/14156420</id>
    <title>A Step-by-Step Guide to Implementing an Excel Upload Button in a Fiori App using RAP</title>
    <updated>2025-07-24T09:18:19.224000+02:00</updated>
    <author>
      <name>KPShekhar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1617455</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1735155555"&gt;&lt;STRONG&gt;Live Demo&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;Here is a short video demonstrating the final Excel upload functionality in action.&lt;/P&gt;&lt;P class=""&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FcFcxJPgTAa8%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DcFcxJPgTAa8&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FcFcxJPgTAa8%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="400" height="225" scrolling="no" title="Excel Upload Button in SAP RAP Fiori Application Demo Run" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For this demonstration, I've built a simple RAP application with a V4 UI. The application features an "Employee" table with three fields. The base of the application was created using the RAP generator, and I've also included early numbering logic for the&amp;nbsp;&lt;/SPAN&gt;Employee ID.&lt;/P&gt;&lt;H2 id="toc-hId-1538642050"&gt;&lt;STRONG&gt;Step 1: Create a Fiori Project&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;To begin, create a new SAP Fiori project using the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;List Report&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;template. This will serve as the foundation for our application.&lt;/P&gt;&lt;H2 id="toc-hId-1342128545"&gt;&lt;STRONG&gt;Step 2: Add a Custom Button&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;With the project set up, the next step is to add a custom button. You can do this by using the open guided development feature. From there, choose the option to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Add a Custom Action to a Page Using Extensions&lt;/STRONG&gt;. Follow the prompts in the guide to insert the necessary code snippets for the "Excel Upload" button.&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-07-18 at 12.33.43 PM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288514i7A9DB78C413A5FF8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-18 at 12.33.43 PM.png" alt="Screenshot 2025-07-18 at 12.33.43 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-07-18 at 12.36.47 PM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288515i92DDB5C0BBCE2331/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-18 at 12.36.47 PM.png" alt="Screenshot 2025-07-18 at 12.36.47 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;or&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1145615040"&gt;&lt;STRONG&gt;Step 2: Configure the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;manifest.json&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;File&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;manifest.json&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;file is the application descriptor, defining its structure, data sources, and routing. To add the "Excel Upload" button, you need to modify this file to define a custom action and extend the standard List Report controller with our custom logic&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;You can either use the "Add a Custom Action to a Page Using Extensions" option in the guided development tool or update the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;manifest.json&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;file directly with the following configuration&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Pay close attention to the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;controlConfiguration&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;extends&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;sections, which are key to enabling this functionality.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "_version": "1.53.0",
  "sap.app": {
    "id": "uploadempexcel",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:lrop",
      "version": "1.18.2",
      "toolsId": "f8a70d19-c3d7-40bf-9b4b-03ba34f86143"
    },
    "dataSources": {
      "mainService": {
        "uri": "/sap/opu/odata4/sap/zui_upload_emp_o4/srvd/sap/zui_upload_emp_o4/0001/",
        "type": "OData",
        "settings": {
          "annotations": ["annotation"],
          "localUri": "localService/mainService/metadata.xml",
          "odataVersion": "4.0"
        }
      }
    }
  },
  "sap.ui5": {
    "flexEnabled": true,
    "dependencies": {
      "minUI5Version": "1.114.9",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.fe.templates": {}
      }
    },
    "routing": {
      "routes": [
        {
          "pattern": ":?query:",
          "name": "ZC_UPLOAD_EMPList",
          "target": "ZC_UPLOAD_EMPList"
        }
      ],
      "targets": {
        "ZC_UPLOAD_EMPList": {
          "type": "Component",
          "id": "ZC_UPLOAD_EMPList",
          "name": "sap.fe.templates.ListReport",
          "options": {
            "settings": {
              "contextPath": "/ZC_UPLOAD_EMP",
              "controlConfiguration": {
                "@com.sap.vocabularies.UI.v1.LineItem": {
                  "actions": {
                    "uploadExcelController.controller": {
                      "press": ".extension.uploadempexcel.ext.controller.uploadExcelController.uploadExcel",
                      "visible": true,
                      "enabled": true,
                      "requiresSelection": false,
                      "text": "Upload Excel"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "extends": {
      "extensions": {
        "sap.ui.controllerExtensions": {
          "sap.fe.templates.ListReport.ListReportController": {
            "controllerName": "uploadempexcel.ext.controller.uploadExcelController"
          }
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-949101535"&gt;&lt;STRONG&gt;Step 3: Create a Fragment for the Pop-up Screen&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;You'll need to create a fragment in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;ext&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;folder. This fragment will define the pop-up screen that appears when a user clicks the "Excel Upload" button.&lt;/P&gt;&lt;P class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-07-18 at 12.43.56 PM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288516i792D93DDC3EE4AF3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-18 at 12.43.56 PM.png" alt="Screenshot 2025-07-18 at 12.43.56 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;core:FragmentDefinition xmlns="sap.m" xmlns:core="sap.ui.core" xmlns:upload="sap.m.upload"&amp;gt;
    &amp;lt;Dialog id="uploadDialogSet" title="Excel Upload"&amp;gt;
        &amp;lt;content&amp;gt;
            &amp;lt;upload:UploadSet
                id="uploadSet"
                maxFileNameLength="200"
                fileTypes="xlsx, xls"
                afterItemAdded=".onAfterItemAdded"
                afterItemRemoved=".onAfterItemRemoved"
                uploadEnabled="true"
                /&amp;gt;
        &amp;lt;/content&amp;gt;
        &amp;lt;!-- CORRECTED: Changed from &amp;lt;buttons&amp;gt; to &amp;lt;beginButton&amp;gt; and &amp;lt;endButton&amp;gt; --&amp;gt;
        &amp;lt;beginButton&amp;gt;
            &amp;lt;Button id="idUploadB" text="Upload" press=".onUploadPress" type="Emphasized" enabled="false"/&amp;gt;
        &amp;lt;/beginButton&amp;gt;
        &amp;lt;endButton&amp;gt;
            &amp;lt;Button id="idCancelB" text="Cancel" press=".onCloseDialog" /&amp;gt;
        &amp;lt;/endButton&amp;gt;
    &amp;lt;/Dialog&amp;gt;
&amp;lt;/core:FragmentDefinition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-752588030"&gt;&lt;STRONG&gt;Step 4: Implement the Controller Logic&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;The main logic for handling the file upload is contained within the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;uploadExcelController.controller.js&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;file. You can adapt the code below for your own application. Make sure to adjust the file name and payload column names to fit your specific needs.&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;sap.ui.define(
  [
    "sap/ui/core/mvc/ControllerExtension",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "xlsx",
  ],
  function (ControllerExtension, MessageToast, Fragment, XLSX) {
    "use-strict";

    return ControllerExtension.extend(
      "uploadempexcel.ext.controller.uploadExcelController",
      {
        _pDialog: null,
        _file: null,

        uploadExcel: function () {
          if (!this._pDialog) {
            this._pDialog = Fragment.load({
              id: this.base.getView().getId(),
              name: "uploadempexcel.ext.fragment.uploadExcelFragment",
              controller: this,
            }).then(
              function (oDialog) {
                this.base.getView().addDependent(oDialog);
                return oDialog;
              }.bind(this)
            );
          }

          this._pDialog.then(
            function (oDialog) {
              oDialog.open();
              oDialog.getContent()[0].removeAllItems();
              this._file = null;
              var oUploadButton = oDialog.getBeginButton();
              if (oUploadButton) {
                oUploadButton.setEnabled(false);
              }
            }.bind(this)
          );
        },

        onCloseDialog: function () {
          this._pDialog.then(function (oDialog) {
            oDialog.close();
          });
        },

        onAfterItemAdded: function (oEvent) {
          this._file = oEvent.getParameter("item").getFileObject();
          if (this._file) {
            MessageToast.show(
              "File '" + this._file.name + "' is ready for upload."
            );
          }
          this._pDialog.then(
            function (oDialog) {
              var oUploadButton = oDialog.getBeginButton();
              if (oUploadButton) {
                oUploadButton.setEnabled(!!this._file);
              }
            }.bind(this)
          );
        },

        onAfterItemRemoved: function (oEvent) {
          this._file = null;
          this._pDialog.then(function (oDialog) {
            var oUploadButton = oDialog.getBeginButton();
            if (oUploadButton) {
              oUploadButton.setEnabled(false);
            }
          });
          MessageToast.show("File removed.");
        },

        onUploadPress: function () {
          if (!this._file) {
            MessageToast.show("Please select a file first.");
            return;
          }

          var oReader = new FileReader();
          oReader.onload = function (e) {
            try {
              var data = e.target.result;
              var workbook = XLSX.read(data, { type: "buffer" });
              var sheetName = workbook.SheetNames[0];
              var excelData = XLSX.utils.sheet_to_row_object_array(
                workbook.Sheets[sheetName]
              );

              if (excelData.length &amp;gt; 0) {
                this._callOdataService(excelData);
              } else {
                MessageToast.show("No data found in the Excel file.");
              }
            } catch (error) {
              MessageToast.show("Error reading Excel file: " + error.message);
            }
          }.bind(this);

          oReader.readAsArrayBuffer(this._file);
        },

        _callOdataService: function (excelData) {
          try {
            // --- START: FINAL CORRECTED CODE ---
            // Get the main OData V4 model from the view.
            var oModel = this.base.getView().getModel();

            // Create a ListBinding directly for the entity set of the List Report.
            // The path MUST match the 'contextPath' in your manifest.json for the List Report target.
            var oListBinding = oModel.bindList("/ZC_UPLOAD_EMP");
            // --- END: FINAL CORRECTED CODE ---

            if (!oListBinding) {
              // This error is now highly unlikely to occur.
              throw new Error(
                "Could not create a ListBinding for the path /ZC_UPLOAD_EMP."
              );
            }

            excelData.forEach(function (rowData) {
              // IMPORTANT: Make sure your Excel column headers match exactly
              var oPayload = {
                //EmpID: rowData.EmployeeID.toString(), auto generated by Early Numbering in RAP Application
                Empname: rowData.EmployeeName.toString(),
                Contact: rowData.Contact.toString(),
              };
              // The create operation is performed on the ListBinding instance.
              oListBinding.create(oPayload);
            });

            MessageToast.show("Uploading " + excelData.length + " records...");

            // The model holds the batch queue, so we submit the changes on the model.
            oModel
              .submitBatch("$auto")
              .then(
                function () {
                  MessageToast.show("Data uploaded successfully.");
                  this.base.getExtensionAPI().refresh(); // Refresh the table to show new data
                  this.onCloseDialog();
                }.bind(this)
              )
              .catch(function (oError) {
                MessageToast.show("Error during upload: " + oError.message);
              });
          } catch (error) {
            MessageToast.show("Error processing data: " + error.message);
          }
        },
      }
    );
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-556074525"&gt;&lt;STRONG&gt;Dependencies&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;Before you can run the application, you'll need to install the necessary dependencies. You can do this by running the following commands in your terminal.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i ui5-tooling-modules
npm i xlsx&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;&lt;SPAN&gt;We also need to update your&amp;nbsp;&lt;/SPAN&gt;ui5.yaml&lt;SPAN&gt;&amp;nbsp;file by adding the following custom tasks.&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;builder:
customTasks:
- name: ui5-tooling-modules-task
afterTask: replaceVersion
- name: ui5-tooling-modules-middleware
afterMiddleware: compression&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-359561020"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;By following these steps, you can add a fully functional Excel upload feature to your SAP Fiori application. This enhancement provides a more convenient way for users to handle bulk data uploads, ultimately improving the user experience. I have also prepared a demo Excel file with sample data that you can use for testing purposes.&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/a-step-by-step-guide-to-implementing-an-excel-upload-button-in-a-fiori-app/ba-p/14156420"/>
    <published>2025-07-24T09:18:19.224000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-custom-generic-class-for-developments/ba-p/14161559</id>
    <title>SAP MDG: Custom Generic Class for developments</title>
    <updated>2025-07-25T11:30:00.026000+02:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;HI SCN Folks,&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;:&lt;BR /&gt;01. There are several ways to implement it, and the blog that's written is one of the ways.&lt;BR /&gt;02. There are no screenshots attached related to SAP Logon &amp;amp; SAP MDG UI Screens.&lt;BR /&gt;03. In this blog, example which i taken the development of one of the Enhancement UIBB &amp;amp; a Method is GET_DATA.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Faced Problem&lt;/U&gt;:&lt;BR /&gt;&lt;/STRONG&gt;Every time i used to call the below program for different placeholders &amp;amp; for different requirements. In short, making use of the same code again &amp;amp; again.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;ZSU_MDG_CL_ENH_CUS_UIBB&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA :
  lv_cr_number TYPE usmd_crequest,
  lv_crtype    TYPE usmd_crequest_type,
  lv_process   TYPE usmd_process.

DATA(lo_context) = cl_usmd_app_context=&amp;gt;get_context( ).

IF lo_context IS BOUND.
  CALL METHOD lo_context-&amp;gt;get_attributes
    IMPORTING
      ev_crequest_id   = lv_cr_number
      ev_crequest_type = lv_crtype
      ev_process       = lv_process.
ENDIF.

IF lv_crtype EQ 'ZSUCRTYPE'.

      "Requirement Logic

ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;How to reduce this reusability? Please follow the below process&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;01. Create one custom class.&lt;BR /&gt;&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ZSU_MDG_CL_GENERIC (Class)&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;02. Create one Static Method (Level), Public (Visibility) &amp;amp; Exporting Parameters.&lt;BR /&gt;&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; GET_CR_RELATED&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  class-methods GET_CR_RELATED
    exporting
      !EO_MODEL type ref to IF_USMD_MODEL_EXT
      !EV_PARENT_PROCESS type USMD_PROCESS
      !EV_PROCESS type USMD_PROCESS
      !EV_WI_ID type SWW_WIID
      !EV_CREQUEST_ID type USMD_CREQUEST
      !EV_CREQUEST_TYPE type USMD_CREQUEST_TYPE
      !EV_CREQUEST_STEP type USMD_CREQUEST_APPSTEP
      !EV_CREQUEST_INDEX type USMD_CREQUEST_WFINDEX
      !EV_EDITION type USMD_EDITION
      !EV_OTC type USMD_OTC .&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;BR /&gt;03. Now enter the below code in the method (Source Code).&lt;/STRONG&gt;&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  method GET_CR_RELATED.

      DATA:
      lo_app_ctxt  TYPE REF TO  if_usmd_app_context.


    lo_app_ctxt = cl_usmd_app_context=&amp;gt;get_context( ).

    IF lo_app_ctxt IS BOUND.

      lo_app_ctxt-&amp;gt;get_attributes(
       IMPORTING
         eo_model          =  eo_model
         ev_process        =  ev_process
         ev_wi_id          =  ev_wi_id
         ev_crequest_id    =  ev_crequest_id
         ev_crequest_type  =  ev_crequest_type
         ev_crequest_step  =  ev_crequest_step
         ev_crequest_index =  ev_crequest_index
         ev_otc            =  ev_otc
     ).
    ENDIF.

  endmethod.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Done with part of this class (ZSU_MDG_CL_GENERIC).&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now It's time to use it in any development placeholder; in this blog, implementing it in (ZSU_MDG_CL_ENH_CUS_UIBB).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  DATA: lv_creq_type TYPE usmd_crequest_type,
          lv_wf_step   TYPE usmd_crequest_appstep.


    CALL METHOD ZSU_MDG_CL_GENERIC=&amp;gt;get_cr_related
      IMPORTING
        ev_crequest_type = lv_creq_type  " Type of Change Request
        ev_crequest_step = lv_wf_step.

IF lv_crtype EQ 'ZSUCRTYPE'.
       IF lv_wf_step = '00'.

      "Requirement Logic

ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" class="lia-product-mention" data-product="697-1"&gt;SAP Master Data Governance&lt;/a&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;EM&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt; &amp;nbsp;&lt;/EM&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-custom-generic-class-for-developments/ba-p/14161559"/>
    <published>2025-07-25T11:30:00.026000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-remote-sap-hana-cloud-data-from-s-4hana-public-cloud-using-cds/ba-p/14166087</id>
    <title>Accessing Remote SAP HANA Cloud Data from S/4HANA Public Cloud using CDS External Entity</title>
    <updated>2025-07-30T04:58:51.636000+02:00</updated>
    <author>
      <name>veroni</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1592841</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1736075425"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;Before starting, make sure you have:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;SAP S/4HANA Public Cloud system&lt;/STRONG&gt; with developer access&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;SAP HANA Cloud instance&lt;/STRONG&gt; on BTP with:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;SQL Endpoint enabled&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Allow All Access or trusted IP configuration&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Technical user in HANA Cloud with necessary privileges (e.g., CREATE REMOTE SOURCE, schema access)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;ABAP Development Tools (ADT) in Eclipse&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1539561920"&gt;High-Level Concept And Reference&lt;/H2&gt;&lt;P&gt;Blog reference :&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-cds-release-news-2408-external-entities/ba-p/13784415" target="_blank"&gt;ABAP CDS Release News 2408 – External Entities - SAP Community&lt;/A&gt;&lt;BR /&gt;Help portal reference:&amp;nbsp;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-data-models/cds-external-entities?locale=en-US" target="_blank" rel="noopener noreferrer"&gt;External Entities | SAP Help Portal&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;the workflow and artifacts for establishing an outbound SQL access with CDS external entities:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_0-1753803716253.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293555iF2BC67DE32676676/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_0-1753803716253.png" alt="veroni_0-1753803716253.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;CDS External Entity&lt;/STRONG&gt;: Design-time ABAP artifact mapping to an external database object&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The following types of external entities are available:&lt;/SPAN&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Dynamic external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; The logical external schema is bound to the external entity at runtime, when the entity is accessed with ABAP SQL&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;SELECT, using a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;PROVIDED BY&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;clause. Dynamic external entities can be accessed by ABAP SQL only. They cannot be used as a data source for other CDS entities.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Static external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; The logical external schema is specified in the data definition of the external entity. Static external entities can be used as a data source in ABAP SQL, as a data source in other CDS entities, and in ABAP Managed Database Procedures (AMDP).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Writable external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; By default, external entities are read-only. An external entity can be defined as writable using the optional addition&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;writable. Writable external entities allow modifying data on external database systems using the ABAP SQL operations&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;INSERT,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;UPDATE,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;MODIFY, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;DELETE.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Logical External Schema&lt;/STRONG&gt;: Links external entity to outbound communication&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Communication Arrangement&lt;/STRONG&gt;: Defines connection to HANA Cloud via Outbound SQL Access&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1343048415"&gt;Implementation Steps&lt;/H2&gt;&lt;H3 id="toc-hId-1275617629"&gt;For Developer in&amp;nbsp; ABAP environment&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create CDS External Entity&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;In this scenario ,we use &lt;STRONG&gt;Writable external entity&amp;nbsp;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;Core Data Services-Data Definition&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'External Entity'
define writable external entity (ENTITY NAME) external name (HANA DATABASE TABLE NAME)
{
  key ID       : abap.char(36) external name ID;
      TEST     : abap.int1     external name TEST;

}
with federated data provided at runtime
​&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Logical External Schema&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Core Data Services - Logical External Schemas&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_1-1753804456433.png" style="width: 732px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293561i123E50C720EB1140/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_1-1753804456433.png" alt="veroni_1-1753804456433.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Communication scenario with outbound service&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Cloud Communication Management-Communication Scenarios-outbound service&lt;BR /&gt;&amp;nbsp;Create Outbound Service Referring to&amp;nbsp; a Logical External Schemas&amp;nbsp; &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_2-1753804924331.png" style="width: 632px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293565i024EE3FFE2C746B0/image-dimensions/632x170?v=v2" width="632" height="170" role="button" title="veroni_2-1753804924331.png" alt="veroni_2-1753804924331.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&amp;nbsp;Add outbound service to&amp;nbsp;Communication scenario&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Cloud Communication Management-Communication Scenarios&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_3-1753805096502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293566i200A9233FB768296/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_3-1753805096502.png" alt="veroni_3-1753805096502.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;ABAP SQL statement&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;(SQL test should be used after communication configuration in SAP Fiori application)&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;   SELECT * FROM （cds external entity)
      PROVIDED BY (logical external schema)
      INTO TABLE @FINAL(lt_federated_data)
      UP TO 10 ROWS.&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1079104124"&gt;For SAP Fiori Application&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Create Communication System&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Host: SQL Endpoint of HANA Cloud&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Port: 443&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Authentication: Technical User (HANA DB user)&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Create Communication Arrangement&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Outbound Service: Outbound SQL Access&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Adapter: HANA (ODBC)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Adapter Configuration: &lt;STRONG&gt;this parameter is important ,or&amp;nbsp; you will get ping fail message.&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;ServerNode=&amp;lt;hana_sql_endpoint&amp;gt;:port&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Assign Outbound User (same as HANA DB user)&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Check Outbound Service Connection&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;UL&gt;&lt;LI&gt;success message:&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_5-1753805829527.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293579i5758C85E24A41DB1/image-size/medium?v=v2&amp;amp;px=400" role="button" title="veroni_5-1753805829527.png" alt="veroni_5-1753805829527.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Test SQL in ABAP Environment (see for developer part)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Using CDS External Entities with Outbound SQL Access provides a clean and ABAP-native way to query external SAP HANA Cloud data from S/4HANA Public Cloud.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-remote-sap-hana-cloud-data-from-s-4hana-public-cloud-using-cds/ba-p/14166087"/>
    <published>2025-07-30T04:58:51.636000+02:00</published>
  </entry>
</feed>
