<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-Development-blog-posts.xml</id>
  <title>SAP Community - ABAP Development</title>
  <updated>2025-10-31T09:00:19.232007+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP Development/pd-p/833755570260738661924709785639136" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP Development blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/dynamically-making-a-field-read-only-in-sap-rap/ba-p/14225542</id>
    <title>Dynamically Making a Field Read-Only in SAP RAP</title>
    <updated>2025-10-14T11:19:32.771000+02:00</updated>
    <author>
      <name>Faizan_khan1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451076</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Introduction&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Making a field read-only or non-editable dependent on the value of another field is a frequent requirement. This blog post will explain how to use the RAP model to accomplish this.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The scenario we'll cover is making the &lt;/SPAN&gt;&lt;SPAN&gt;VBTYP&lt;/SPAN&gt;&lt;SPAN&gt; field read-only based on the value of the &lt;/SPAN&gt;&lt;SPAN&gt;AUART&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp; field.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Setting Up the RAP Application&lt;/STRONG&gt;&amp;nbsp;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Before implementing the dynamic behavior, we need a basic RAP application structure.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Database Table&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Data base Table for sales order'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zdemo_dt_so {
  key vbeln : vbeln_va not null;
  erdat     : erdat;
  ernam     : ernam;
  vbtyp     : vbtypl;
  auart     : auart;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp; 2 . &lt;STRONG&gt;Interface View&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface view for sales order'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define root view entity ZDEMO_I_SO as select from zdemo_dt_so
{
    key vbeln as Vbeln,
    erdat as Erdat,
    ernam as Ernam,
    vbtyp as Vbtyp,
    auart as Auart
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;3 .&amp;nbsp;&lt;STRONG&gt;&lt;SPAN&gt;Projection View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Projection view for Sales order'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@Metadata.allowExtensions: true
define root view entity ZDEMO_P_SO as projection on ZDEMO_I_SO
{
    key Vbeln,
    Erdat,
    Ernam,
    Vbtyp,
    Auart
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp; 4 .&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Behavior Definition&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_demo_i_so unique;
strict ( 2 );
define behavior for ZDEMO_I_SO //alias &amp;lt;alias_name&amp;gt;
persistent table zdemo_dt_so
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
{
field (features : instance ) Vbtyp ;
validation vbtyp_valid on save { field Auart , Vbtyp ; }
  create;
  update;
  delete;
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection;
strict ( 2 );
define behavior for ZDEMO_P_SO //alias &amp;lt;alias_name&amp;gt;
{
  use create;
  use update;
  use delete;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;STRONG&gt; 5 .Service Definition and Binding&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Service def SO'
define service ZDEMO_P_SO {
  expose ZDEMO_P_SO;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_1-1758626719811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318831i36BA6EF83B11D5D0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_1-1758626719811.png" alt="Faizan_khan1_1-1758626719811.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Once you click on preview you can see the application and create a record&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_2-1758626761985.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318832i87B00A509503C3FA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_2-1758626761985.png" alt="Faizan_khan1_2-1758626761985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_3-1758626769228.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318833iC5D4AF65B649F8AF/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_3-1758626769228.png" alt="Faizan_khan1_3-1758626769228.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Implementing Dynamic Feature Control&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Our goal is to make the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;,&lt;/SPAN&gt;&lt;SPAN&gt;VBTYP&lt;/SPAN&gt;&lt;SPAN&gt; field read-only if the &lt;/SPAN&gt;&lt;SPAN&gt;AUART&lt;/SPAN&gt;&lt;SPAN&gt; field has a specific value, like 'KA'.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For Achieving this scenario first we need to Define a Dynamic feature control for the field 'VBTYP'&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_0-1758626860646.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318837i82B7069BF5FA3D0E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_0-1758626860646.png" alt="Faizan_khan1_0-1758626860646.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The logic for making the field read-only&amp;nbsp; presents in the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;get_instance_features&lt;/SPAN&gt;&lt;SPAN&gt; method of your behavior implementation class. This method is automatically created&amp;nbsp; by the RAP framework. Here's the code you'll need to write:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; METHOD get_instance_features.

  READ ENTITIES OF ZDEMO_I_SO IN LOCAL MODE
   ENTITY zdemo_i_so FIELDS ( Vbeln  Auart )
   WITH CORRESPONDING #( keys )
   RESULT data(lt_result).
        LOOP AT lt_result INTO data(ls_result).
        if ls_result-Auart = 'KA'.
        result = VALUE #(
        (
        %tky = ls_result-%tky
        %features-%field-Vbtyp = if_abap_behv=&amp;gt;fc-f-read_only
        ) ).
        ELSE.
        result = VALUE #(
        (
        %tky = ls_result-%tky
        %features-%field-Vbtyp = if_abap_behv=&amp;gt;fc-f-unrestricted
        ) ).
        ENDIF.
        ENDLOOP.

  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;After implementing the logic, activate your behavior implementation class. Now, when you refresh your&amp;nbsp; application, the changes will be applied&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_0-1758627133505.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318841i9C3E65A60324E488/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_0-1758627133505.png" alt="Faizan_khan1_0-1758627133505.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In your application, you can create a few records with different&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;AUART&lt;/SPAN&gt;&lt;SPAN&gt; values, such as 'KA' and 'OR'. When you try to edit the record where&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;AUART&lt;/SPAN&gt;&lt;SPAN&gt; is 'KA', you will notice that the &lt;/SPAN&gt;&lt;SPAN&gt;VBTYP&lt;/SPAN&gt;&lt;SPAN&gt; field is grayed out and you are unable to change its value. However, if you edit a record where&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_1-1758627174853.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318842iD3CAFC6AD77B3851/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_1-1758627174853.png" alt="Faizan_khan1_1-1758627174853.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;AUART&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; is 'OR', the &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;VBTYP&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; field will remain editable, allowing you to change its value freely.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Faizan_khan1_0-1758627257369.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318867i9986E801A5B8F789/image-size/large?v=v2&amp;amp;px=999" role="button" title="Faizan_khan1_0-1758627257369.png" alt="Faizan_khan1_0-1758627257369.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;This &lt;/SPAN&gt;&lt;SPAN class=""&gt;demonstrates&lt;/SPAN&gt;&lt;SPAN class=""&gt; how the field's behavior is dynamically controlled.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Conclusion&amp;nbsp; :&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;The blog post effectively demonstrates how to &lt;/SPAN&gt;&lt;SPAN class=""&gt;dynamically make a field read-only&lt;/SPAN&gt;&lt;SPAN class=""&gt; within the &lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP RAP.&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN class=""&gt;The core method involves using&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;dynamic feature control&lt;/SPAN&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/dynamically-making-a-field-read-only-in-sap-rap/ba-p/14225542"/>
    <published>2025-10-14T11:19:32.771000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/rap-event-consume-sap-standard-event-and-trigger-custom-rap-event/ba-p/14241235</id>
    <title>RAP Event: consume SAP standard event and trigger custom RAP event</title>
    <updated>2025-10-14T18:00:00.028000+02:00</updated>
    <author>
      <name>hironobu_nakayama</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/781777</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1633627625"&gt;1. Introduction&lt;/H1&gt;&lt;P&gt;Event-driven architecture (EDA) is an integrated model that detects critical business "events" and responds to them in real time. As modern businesses seek real-time operations and flexible, responsive systems, EDA has become an essential technology.&lt;BR /&gt;Many standard RAP events are provided for the implementation of the event-driven architecture in SAP S/4HANA, but the standard event payload may not meet business requirements and require customization. In particular, there is a use case where SAP standard events are extended with Derived Events for the purpose of filtering by event data and payload completion of standard events.&lt;BR /&gt;Derived Event is available in S/4HANA Cloud, private edition &amp;amp; S/4HANA 2023 / S/4HANA Cloud, public edition Introduced in the 2308 release, this feature allows you to define new events with custom payloads based on existing SAP standard events. This allows you to reuse standard event implementations while creating events with additional fields and filtering criteria that you need for your business.&lt;BR /&gt;SAP Community Blog: &lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/derived-events-how-to-trigger-custom-event-from-an-sap-standard-event/ba-p/13955193" target="_blank"&gt;Derived Events- How to Trigger Custom Event from an SAP Standard Event&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;On the other hand, a Derived Event requires that the SAP Standard object to be extended meets the following conditions:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The business object containing the referring event must be extensible.&lt;/LI&gt;&lt;LI&gt;The referenced event must be published on the C0 and C1 released RAP BO interfaces&lt;/LI&gt;&lt;LI&gt;The CDS view entity used as the data source for the Derived Event payload must have been released in C1&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Therefore, some objects do not support extensibility with Derived Events in SAP Standard RAP BO. In this case, there may be cases where the requirements that should be solved by Derived Events cannot be realized.&lt;BR /&gt;So, in this blog, we will introduce a workaround approach that enables payload expansion with custom RAP BO for SAP standard events that cannot be extended with Derived Events.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1437114120"&gt;2. Workaround Solutions&lt;/H1&gt;&lt;P&gt;If Derived Events are not available, a workaround approach that combines Local Event Consumption with custom RAP events can be an effective approach. This approach involves consuming SAP standard events locally (custom ABAP classes) and using them as triggers to raise custom RAP events. By setting the payload of a custom event to meet your business requirements, you can use event filters.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_1-1760225484634.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326000i65E19ECBA8BC68CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_1-1760225484634.png" alt="hironobu_nakayama_1-1760225484634.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1240600615"&gt;3. Implementation Sample&lt;/H1&gt;&lt;P&gt;In this blog, we will use a non-extensible r_purchaseordertp as the target object to extend the event payload for data changes in a PO document. SAP standard events have a payload of only the purchase order document number, whereas custom events have a purchase order document number and purchase order type as the payload. For more information on Event Binding and channel configuration with Event Mesh, please visit the SAP Community Blog: &lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-rap-business-events-in-sap-s-4hana-on-premise-2022/ba-p/13553312" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-rap-business-events-in-sap-s-4hana-on-premise-2022/ba-p/13553312&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;. Please note that the RAP BO in the implementation sample in this blog does not implement CRUD or save processing other than events.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1302252548"&gt;(1) Local Consumer (Custom ABAP Class for Local Event Consumption)&lt;/H3&gt;&lt;H5 id="toc-hId-1363904481"&gt;Global class: zcl_event_consump&lt;/H5&gt;&lt;P&gt;In the Global class, the definition FOR EVENTS OF r_purchaseordertp sets the standard events to be consumed.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_event_consump DEFINITION
  PUBLIC
  ABSTRACT
  FINAL
  FOR EVENTS OF r_purchaseordertp.

  PUBLIC SECTION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_event_consump IMPLEMENTATION.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H5 id="toc-hId-1167390976"&gt;Local class: zcl_event_consump&lt;/H5&gt;&lt;P&gt;The Local class performs additional data retrieval based on the data from the standard event payload consumed to trigger a custom RAP event.&lt;BR /&gt;It is important to note that triggering events is only possible in the RAP framework with a Save Sequence, so you must explicitly change it to Save Sequence by cl_abap_tx=&amp;gt;save( ).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS lcl_event_consump DEFINITION INHERITING FROM cl_abap_behavior_event_handler.
  PRIVATE SECTION.
    METHODS:
      consume_changed FOR ENTITY EVENT changed_instances FOR purchaseorder~changed.
ENDCLASS.

CLASS lcl_event_consump IMPLEMENTATION.

  METHOD consume_changed.
    cl_abap_tx=&amp;gt;save(  ).

    DATA lv_potype TYPE mm_purchaseordertype.

    CHECK changed_instances IS NOT INITIAL.

    LOOP AT changed_instances INTO DATA(changed_instance).

      SELECT SINGLE purchaseordertype
      FROM c_purchaseordertp
      INTO _potype
      WHERE purchaseorder = @changed_instance-purchaseorder.

      DATA(et_events) = VALUE zbp_i_purchseorder_test=&amp;gt;tt_events(
        (
        purchaseorder = changed_instance-purchaseorder
        purchaseordertype = lv_potype
        )
      ).

      zbp_i_purchseorder_event=&amp;gt;raise_po_changed_event( it_events = et_events ).

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-712712033"&gt;(2) Custom RAP BO (Custom Event)&lt;/H3&gt;&lt;H5 id="toc-hId-774363966"&gt;CDS View: &lt;SPAN&gt;ZI_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;In the CDS View, I define only the purchase order.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Consume purchase order event'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
  serviceQuality: #X,
  sizeCategory: #S,
  dataClass: #MIXED
}
define root view entity ZI_purchseorder_event as select from I_PurchaseOrder
{
  key PurchaseOrder
}&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-577850461"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId-381336956"&gt;Behavior Definition: &lt;SPAN&gt;ZI_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;Custom RAP BO for event triggers does not define the create/update/delete function.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed with unmanaged save implementation in class zbp_i_purchseorder_event unique;
strict ( 2 );

define behavior for ZI_purchseorder_event //alias &amp;lt;alias_name&amp;gt;
//persistent table ekko
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
{
  //  create;
  //  update;
  //  delete;
  event purchaseorder_changed parameter ZAB_PO_changed_event;

  field ( readonly ) PurchaseOrder;
}&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--735379370"&gt;Behavior Implementation (Global class) : &lt;SPAN&gt;zbp_i_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;In the Global class, I define a method for triggering events.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zbp_i_purchseorder_event DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zi_purchseorder_event.

  TYPES tt_events TYPE TABLE FOR EVENT zi_purchseorder_event~purchaseorder_changed.

  PUBLIC SECTION.
        CLASS-METHODS raise_po_changed_event
            IMPORTING it_events TYPE tt_events.

ENDCLASS.

CLASS zbp_i_purchseorder_event IMPLEMENTATION.
METHOD raise_po_changed_event.
  lcl_event_handler=&amp;gt;on_po_changed_event( it_events ).
endmethod.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--931892875"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId--1128406380"&gt;Behavior Implementation (Local class) : &lt;SPAN&gt;lhc_zi_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;The Local class does not implement save processing, etc., but only implements methods for triggering events.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lhc_zi_purchseorder_event DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zi_purchseorder_event RESULT result.

ENDCLASS.

CLASS lhc_zi_purchseorder_event IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

ENDCLASS.

CLASS lsc_zi_purchseorder_event DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.

ENDCLASS.

CLASS lsc_zi_purchseorder_event IMPLEMENTATION.

  METHOD save_modified.
  ENDMETHOD.

  METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_event_handler DEFINITION FRIENDS zbp_i_purchseorder_event.
  PUBLIC SECTION.
    CLASS-METHODS on_po_changed_event IMPORTING it_events TYPE zbp_i_purchseorder_event=&amp;gt;tt_events.
ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.
   METHOD on_po_changed_event.

    RAISE ENTITY EVENT ZI_purchseorder_event~purchaseorder_changed FROM it_events.

   ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--1324919885"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId--1521433390"&gt;Abstract Entity: &lt;SPAN&gt;ZAB_PO_changed_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;Abstract entity adds a purchase order document type. This results in the payload of the custom RAP event being the purchase order document number and the purchase order document type.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abastract entity for po changed event'
define abstract entity ZAB_PO_changed_event
  //  with parameters parameter_name : parameter_type
{
  PurchaseOrderType : mm_purchaseordertype;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--544334867"&gt;4. Implementation Results&lt;/H1&gt;&lt;P&gt;Modify and save an existing purchase order document from the Manage Purchase Orders (F0842A) app.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_0-1760229645619.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326001iA137C622300D0D19/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_0-1760229645619.png" alt="hironobu_nakayama_0-1760229645619.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can receive custom events triggered from S/4HANA in SAP Event Mesh.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_1-1760229707438.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326002i776A835D573B8867/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_1-1760229707438.png" alt="hironobu_nakayama_1-1760229707438.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--740848372"&gt;5. Summary&lt;/H1&gt;&lt;P&gt;When it is not possible to scale with Derived Events in implementing an event-driven architecture, a workaround approach that combines Local Event Consumption with custom RAP events is an effective approach.&lt;BR /&gt;This approach enables custom payloads and filtering capabilities based on business requirements, providing event consumers with the data they need to optimize cross-system integration.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--937361877"&gt;References&lt;/H1&gt;&lt;P&gt;SAP Learning：&lt;SPAN&gt;&lt;A href="https://learning.sap.com/learning-journeys/discovering-event-driven-integration-with-sap-integration-suite-advanced-event-mesh/explaining-event-driven-architecture_d02a51bb-1ce4-4c2d-a25d-8b9c9198ffd2" target="_blank" rel="noopener noreferrer"&gt;Explaining Event-Driven Architecture&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;SAP Help: &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-btp-guidance-framework/integration-architecture-guide/event-driven-architecture?amp;state=PRODUCTION&amp;amp;amp;version=Cloud" target="_blank" rel="noopener noreferrer"&gt;Event-driven Architecture&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;SAP Community Blog: &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-2-creating-custom-business/ba-p/13914171" target="_blank"&gt;RAP Business Events with Advanced Event Mesh [2]: Creating custom business events&lt;/A&gt;&lt;BR /&gt;SAP Community Blog: &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-5-consuming-a-local-business/ba-p/13915138" target="_blank"&gt;RAP Business Events with Advanced Event Mesh [5]: Consuming a local business event&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-event-consume-sap-standard-event-and-trigger-custom-rap-event/ba-p/14241235"/>
    <published>2025-10-14T18:00:00.028000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/how-to-create-trigger-and-test-rap-based-event-via-event-mesh/ba-p/14244440</id>
    <title>How to create , trigger and test RAP based event via Event Mesh</title>
    <updated>2025-10-15T09:39:13.246000+02:00</updated>
    <author>
      <name>vimal</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/3165</uri>
    </author>
    <content>&lt;P&gt;Hello,&lt;/P&gt;&lt;P&gt;This blog is an attempt to show steps to &lt;STRONG&gt;create RAP based events and how to trigger events via ABAP in Event Mesh&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;This blog is written on S/4 HANA 2023 private cloud . Also it assumes that you know the basics of RAP ABAP.&lt;/P&gt;&lt;P&gt;Let's start !&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a Root Entity:&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_1-1760512693489.png" style="width: 263px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327742i1138D611360E8599/image-dimensions/263x195?v=v2" width="263" height="195" role="button" title="vimal_1-1760512693489.png" alt="vimal_1-1760512693489.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. Create behaviour definition of above root entity. Raise an event as shown below , Parameter is optional if you just want to trigger an event&amp;nbsp; you can do so but if you have to send some value to CPI alongwith event ,you will raise it with Parameter and will pass the parameter. Here we want to send timestamp , so we have created similar parameter.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_2-1760512778949.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327743i1919153BF987F945/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_2-1760512778949.png" alt="vimal_2-1760512778949.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3.&amp;nbsp;Once we have passed the parameter , we will create an abstract entity for same parameter(with same name of entity). Though the name is hidden below but it has to be same as parameter name.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_3-1760512832461.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327745i12796F0151BA3147/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_3-1760512832461.png" alt="vimal_3-1760512832461.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4.&amp;nbsp;Once you are done with above , you will also create your class in Behaviour definition and in tab “Global Class” , we will declare static method as well(Declaration and Implementation). The lhc_i_hubtr_out mentioned below is local handler class and it’s method “Trigger event” we will create in next step.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_4-1760512937654.png" style="width: 308px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327747i98DC8F1E241A010C/image-dimensions/308x258?v=v2" width="308" height="258" role="button" title="vimal_4-1760512937654.png" alt="vimal_4-1760512937654.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5.&amp;nbsp;Now , we will go to “Local types” tab as shown below and will create our “trigger_event” method as shown below to call RAISE ENTITY and call the event which we created in 2nd step along with Parameter. Activate behavior definition , Root and abstract entities once done.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_5-1760513003830.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327748iAABD60A2E5FB01B7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_5-1760513003830.png" alt="vimal_5-1760513003830.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;6.&amp;nbsp;Now, we will call method in ABAP . The method created in “global class” section will be called and in turn it will call “trigger_event”. We cannot do RAISE ENTITY EVENT from ABAP because it can only be called from Behaviour definition, So that is why we created a global method and then calling that global method in ABAP .&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_6-1760513196719.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327754i94D765879E3E1B21/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_6-1760513196719.png" alt="vimal_6-1760513196719.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After calling this method, Don’t forget to write “&lt;STRONG&gt;COMMIT &amp;nbsp;WORK&lt;/STRONG&gt;” , otherwise your event will not be registered.&lt;/P&gt;&lt;P&gt;7.&amp;nbsp;We will also create an event binding as shown below. You can provide any Namespace, Object type and Operation. But you need to choose your root entity and event name which you created in earlier steps by clicking on Add button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_7-1760513289707.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327755iEE97E84EBE4FE890/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_7-1760513289707.png" alt="vimal_7-1760513289707.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;8.&amp;nbsp;Once done with above steps, last step is to configure the namespace as shown below in tcode /n/IWXBE/CONFIG. Select the channel and click on “Outbound Bindings”.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_8-1760513324289.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327757iCB61726C665A6109/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_8-1760513324289.png" alt="vimal_8-1760513324289.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Click on below highlighted “Create” button&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_9-1760513343292.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327758i7A2431761CE418FB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_9-1760513343292.png" alt="vimal_9-1760513343292.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After this a popup of Topic will be populated, in f4 select the event binding created in 7th Step as shown below&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_10-1760513360808.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327759iEC6A377E7A24071B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_10-1760513360808.png" alt="vimal_10-1760513360808.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once you add it , it will be added to outbound channel. This channel will be visible to CPI and then see it in their queue , how many records have come via this channel.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_11-1760513379909.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327760i4C856B88D54D0D5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_11-1760513379909.png" alt="vimal_11-1760513379909.png" /&gt;&lt;/span&gt;&lt;BR /&gt;9. Now as soon as you trigger this event(By running your ABAP report), you can check via t-code /n/IWXBE/EVENT_MONITOR that whether those events are triggered or not. There are 2 tabs – Inbound &amp;amp; Outbound and we can check as per our event raised. Below is the screenshot of our event raised.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_12-1760513423864.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327761iCBA2F5C39CCD5FB8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_12-1760513423864.png" alt="vimal_12-1760513423864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Click on AEM_BROKER and below is the screenshot showing 2 records triggered.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_13-1760513438735.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327762iA0182F67FFC6A7EC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vimal_13-1760513438735.png" alt="vimal_13-1760513438735.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you click on link on Topic , you will get to see the payload which is going to CPI as shown below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vimal_0-1760710392182.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/329248iDA25A1E05FF7B26E/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="vimal_0-1760710392182.png" alt="vimal_0-1760710392182.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P data-unlink="true"&gt;This is the end of this blog and if there are any questions or something missing, please comment on the blog.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thanks,&lt;/P&gt;&lt;P&gt;Vimal&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/how-to-create-trigger-and-test-rap-based-event-via-event-mesh/ba-p/14244440"/>
    <published>2025-10-15T09:39:13.246000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/f4-search-help-not-working-in-application-jobs-fiori-app-in-s4-hana-2023/ba-p/14244453</id>
    <title>F4 Search help not working in Application Jobs fiori app in S4/HANA 2023</title>
    <updated>2025-10-15T09:51:59.199000+02:00</updated>
    <author>
      <name>vimal</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/3165</uri>
    </author>
    <content>&lt;P&gt;If you are in S/4 HANA 2023 and working with &lt;STRONG&gt;Application jobs&lt;/STRONG&gt; fiori app and trying to put F4 search help to parameters but it's not working then make sure below notes are implemented in your system:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3564773 - Application Jobs: Value help does not working&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3558502 &amp;nbsp; Application Jobs: missing functionality for class based job catalogs in transaction SAPJ&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thanks,&lt;/P&gt;&lt;P&gt;Vimal&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/f4-search-help-not-working-in-application-jobs-fiori-app-in-s4-hana-2023/ba-p/14244453"/>
    <published>2025-10-15T09:51:59.199000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cell-color-and-highlight-in-fiori-list-report-using-cds-views/ba-p/14243157</id>
    <title>Cell Color and Highlight In Fiori  list Report using CDS Views.</title>
    <updated>2025-10-16T09:50:02.390000+02:00</updated>
    <author>
      <name>Nayanakumar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1490076</uri>
    </author>
    <content>&lt;P&gt;A Purchase Order (PO) List Report to monitor the status of deliveries. It is critical that immediately identify which POs are:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Overdue: The delivery date is in the past, and the status is still "Open." (Highlight: Red/Negative)&lt;/LI&gt;&lt;LI&gt;Due Soon: The delivery date is within the next 7 days. (Highlight: Orange/Critical)&lt;/LI&gt;&lt;LI&gt;On Track: The PO is open but not due soon. (Highlight: Green/Positive)&lt;/LI&gt;&lt;LI&gt;Completed/Cancelled: PO is closed. (Highlight: Grey/Neutral)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In this scenario, a calculated field is used to assign a Criticality Code to each record, which the Fiori UI consumes to apply the correct color-coding.&lt;/P&gt;&lt;P&gt;The solution involves two main steps:&lt;/P&gt;&lt;P&gt;Backend (CDS View): Define a transient field that calculates the numeric criticality code based on business logic (e.g., date difference, status).&lt;/P&gt;&lt;P&gt;Frontend (Metadata Extension/MDE): Use the Criticality annotation to link the field you want to color (e.g., DeliveryStatusText) to the calculated criticality code field.&lt;/P&gt;&lt;P&gt;Interface View.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'INTERFACE VIEW PO'
@Metadata.ignorePropagatedAnnotations: true
define root view entity ZNP_I_PO1 as select from znp_dt_po1
{
  key po_id as PoID,
  po_desc as PoDesc,
  status_text as StatusText,
  delivery_date as DeliveryDate,
  vendor_id as VendorID,
  @Semantics.amount.currencyCode: 'Currency'
  total_amount as TotalAmount,
  @Consumption.valueHelpDefinition: [ {
    entity.name: 'I_CurrencyStdVH', 
    entity.element: 'Currency', 
    useForValidation: true
  } ]
  currency as Currency,
    case 
 when znp_dt_po1.status_text = 'Open' and znp_dt_po1.delivery_date &amp;lt;  $session.system_date then 1   // Overdue 
 when znp_dt_po1.status_text = 'Open' 
 and znp_dt_po1.delivery_date &amp;lt;= dats_add_days($session.system_date,
 7 ,'UNCHANGED') then 2   // Due Soon 
when znp_dt_po1.status_text = 'Open' then 3   // On Track 
 else 0 // Closed 
end as DeliveryCriticality, 
case 
when status_text = 'Open' and delivery_date &amp;lt; $session.system_date then 'Overdue'
 when status_text = 'Open' and delivery_date &amp;lt;= dats_add_days($session.system_date,7 ,'UNCHANGED')  then 'Due Soon'
when status_text = 'Open' then 'On Track'
 else 'Closed'
end as DeliveryCriticalityText,
  
  @Semantics.user.createdBy: true
  created_by as CreatedBy,
  @Semantics.systemDateTime.createdAt: true
  created_at as CreatedAt,
  @Semantics.user.localInstanceLastChangedBy: true
  last_changed_by as LastChangedBy,
  @Semantics.systemDateTime.localInstanceLastChangedAt: true
  last_changed_at as LastChangedAt
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Updating the status based on the Delivery date.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_0-1760427791787.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327093i1DBDBE668C06D2F5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_0-1760427791787.png" alt="Nayanakumar_0-1760427791787.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Metadata Extension.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
annotate entity ZNP_C_PO1
    with 
{
     @EndUserText.label: 'PoID'
  .facet: [ {
    label: 'General Information', 
    id: 'GeneralInfo', 
    purpose: #STANDARD, 
    position: 10 , 
    type: #IDENTIFICATION_REFERENCE
  } ]
  .identification: [ {
    position: 10 , 
    label: 'PoID'
  } ]
  .lineItem: [ {
    position: 10 , 
    label: 'PoID'
  } ,{ type :  #FOR_ACTION , dataAction: 'copy_po' , label : 'Copy PO' }]
  .selectionField: [ {
    position: 10 
  } ]
  PoID;
  
  @EndUserText.label: 'PoDesc'
  .identification: [ {
    position: 20 , 
    label: 'PoDesc'
  } ]
  .lineItem: [ {
    position: 20 , 
    label: 'PoDesc'
  } ]
  .selectionField: [ {
    position: 20 
  } ]
  PoDesc;
  
  @EndUserText.label: 'StatusText'
  .identification: [ {
    position: 30 , 
    label: 'StatusText'
  } ]
  .lineItem: [ {
    position: 30 , 
    label: 'StatusText'
  } ,{ type: #FOR_ACTION , dataAction: 'set_delivered' , label: 'Set Delivered'}]
  .selectionField: [ {
    position: 30 
  } ]
  StatusText;
  
  @EndUserText.label: 'DeliveryDate'
  .identification: [ {
    position: 40 , 
    label: 'DeliveryDate'
  } ]
  .lineItem: [ {
    position: 40 , 
    label: 'DeliveryDate'
  } ]
  .selectionField: [ {
    position: 40 
  } ]
  DeliveryDate;
  
  @EndUserText.label: 'VendorID'
  .identification: [ {
    position: 50 , 
    label: 'VendorID'
  } ]
  .lineItem: [ {
    position: 50 , 
    label: 'VendorID'
  } ]
  .selectionField: [ {
    position: 50 
  } ]
  VendorID;
  
  @EndUserText.label: 'TotalAmount'
  .identification: [ {
    position: 60 , 
    label: 'TotalAmount'
  } ]
  .lineItem: [ {
    position: 60 , 
    label: 'TotalAmount'
  } ]
  .selectionField: [ {
    position: 60 
  } ]
  TotalAmount;
 
  .lineItem: [
  {
    position: 65,
    label: 'Delivery Status',
    criticality: 'DeliveryCriticality',   // use numeric field for color
    importance: #HIGH
  }
]
DeliveryCriticalityText;

  .identification: [ {
    position: 70 
  } ]
  .lineItem: [ {
    position: 70 
  } ]
  .selectionField: [ {
    position: 70 
  } ]
  CreatedBy;
  
  .identification: [ {
    position: 80 
  } ]
  .lineItem: [ {
    position: 80 
  } ]
  .selectionField: [ {
    position: 80 
  } ]
  CreatedAt;
  
  .identification: [ {
    position: 90 
  } ]
  .lineItem: [ {
    position: 90 
  } ]
  .selectionField: [ {
    position: 90 
  } ]
  LastChangedBy;
  
  .identification: [ {
    position: 100 
  } ]
  .lineItem: [ {
    position: 100 
  } ]
  .selectionField: [ {
    position: 100 
  } ]
  LastChangedAt;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;add the Criticality Field in the annotation For Delivery Criticality text.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_1-1760427886941.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327095i84FABACDE40FF4B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_1-1760427886941.png" alt="Nayanakumar_1-1760427886941.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Output.&lt;/P&gt;&lt;P&gt;1.When the status is open and Delivery date is not due soon .&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_2-1760427940717.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327096i9736099A3BD5F275/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_2-1760427940717.png" alt="Nayanakumar_2-1760427940717.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.When the Status is open and Delivery date is&amp;nbsp; within the next 7 days.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_3-1760427987583.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327097iC4391F28EAC1DBAD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_3-1760427987583.png" alt="Nayanakumar_3-1760427987583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3.When Status is open and Delivery date is in past.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_4-1760428032818.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327098iDC84C4D103E28FCD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_4-1760428032818.png" alt="Nayanakumar_4-1760428032818.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4.When the Order is delivered.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Nayanakumar_5-1760428065191.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/327099i467C95F10B29BCD9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nayanakumar_5-1760428065191.png" alt="Nayanakumar_5-1760428065191.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Conclusion:&lt;/P&gt;&lt;P&gt;This scenario helps to quickly assess the delivery status of purchase orders using color-coded criticality indicators. Overdue, due soon, on-track, and completed POs are visually highlighted, allowing faster identification of issues. It improves visibility, reduces manual tracking, and supports proactive decision-making in the procurement process.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cell-color-and-highlight-in-fiori-list-report-using-cds-views/ba-p/14243157"/>
    <published>2025-10-16T09:50:02.390000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/custom-business-configurations-f4579-controlling-the-visibility-of-bc/ba-p/14247015</id>
    <title>Custom Business Configurations (F4579): Controlling the visibility of BC Objects using authorization</title>
    <updated>2025-10-17T13:28:18.345000+02:00</updated>
    <author>
      <name>patrick_winkler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/729521</uri>
    </author>
    <content>&lt;H1 id="toc-hId-887480474" id="toc-hId-1633804387"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/custom-business-configurations-app" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN class=""&gt;Custom Business Configurations&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;(CUBCO) app serves as an entry point to the&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" title="https://help.sap.com/docs/sap-btp-abap-environment/abap-environment/business-configuration-maintenance-object?version=Cloud" href="https://help.sap.com/docs/sap-btp-abap-environment/abap-environment/business-configuration-maintenance-object?version=Cloud" target="_blank" rel="noopener noreferrer"&gt;Business Configuration Maintenance Object&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;provided by custom applications or partners.&lt;BR /&gt;Depending on the respective role the user should only be able to edit certain business configurations.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;This blog is relevant for&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition/pd-p/08e2a51b-1ce5-4367-8b33-4ae7e8b702e0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Private+Edition/pd-p/5c26062a-9855-4f39-8205-272938b6882f" target="_blank"&gt;SAP S/4HANA Cloud Private Edition&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+BTP+ABAP+environment/pd-p/73555000100800001164" target="_blank"&gt;SAP BTP ABAP environment&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Further reading:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/tag/business%20configuration%20maintenance%20object/tg-p/board-id/technology-blog-sap" target="_blank"&gt;Related blog posts&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Learn how you can use&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://learning.sap.com/products/business-technology-platform/development/abap?url_id=text-sapcommunity-prdteng-ABAP" target="_blank" rel="noopener noreferrer"&gt;ABAP technology&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;to develop innovative applications and business solutions across SAP’s portfolio on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://learning.sap.com/products/business-technology-platform/development/abap" target="_blank" rel="noopener noreferrer"&gt;SAP Learning Site&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1437290882"&gt;Basic Concept&lt;/H1&gt;&lt;P&gt;An OData V4 service is assigned to each business configuration object (SMBC). The corresponding service binding is based on a RAP BO.&lt;BR /&gt;The list of available business configuration objects in the CUBCO app is restricted to those where the user has the start authorization for the service binding (authorization object S_START,&amp;nbsp; see access control object I_SMBC_CONFIGURATION_TP).&amp;nbsp; The application-specific authorizations are not checked until an SMBC object has been selected. That is, authorization control implemented in the RAP BO. Normally, the authorization object S_TABU_NAM is used, but you can also &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-implement-additional-authorization-objects-for-the-rap-bo-of-a/ba-p/13710852" target="_blank"&gt;use any other authorization object&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Therefore, you can create business roles in which only a subset of all business configuration objects can be used.&lt;/P&gt;&lt;H1 id="toc-hId-1240777377"&gt;SAP BTP ABAP environment, SAP S/4HANA Cloud Public Edition&lt;/H1&gt;&lt;P&gt;IAM apps are the smallest building block for creating business roles. For a business configuration object, you &lt;A href="https://developers.sap.com/tutorials/abap-environment-authorization-control.html" target="_blank" rel="noopener noreferrer"&gt;assign&lt;/A&gt; the OData service binding and the application relevant authorization objects to it. You then create a business catalog to collect IAM apps and finally assign business catalogs to business roles.&lt;/P&gt;&lt;P&gt;Example:&lt;BR /&gt;You have four SMBC objects A, B, C, D in the system and a different OData service binding for each SMBC object. The authorization object S_TABU_NAM is used in all RAP BOs. You create four IAM apps A, B, C, D, each containing the OData service of a different SMBC object and the authorization object S_TABU_NAM. You create a business catalog BC1 that contains the IAM apps A, B, and a business catalog BC2 that contains the IAM apps B, C, D.&lt;/P&gt;&lt;P&gt;You assign a business role containing the business catalog BC1 to a user. This user can work with the SMBC objects A, B. The user cannot see or edit the SMBC objects C and D.&lt;BR /&gt;You assign a business role containing the business catalog BC2 to a user. This user can work with the SMBC objects B, C, D. The user cannot see or work with the SMBC object A.&lt;/P&gt;&lt;H1 id="toc-hId-1044263872"&gt;SAP S/4HANA Private Cloud Edition&lt;/H1&gt;&lt;P&gt;IAM apps are not available. You &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/b5670aaaa2364a29935f40b16499972d/61159c4dc45b45619b46b4620615c357.html?version=202510.000#provide-authorizations-for-a-business-configuration" target="_blank" rel="noopener noreferrer"&gt;add the application relevant authorization&lt;/A&gt; objects to the authorization default of the OData service assigned to the SMBC object. In the PFCG role you then add the authorization default.&lt;/P&gt;&lt;P&gt;Example:&lt;BR /&gt;You have four SMBC objects A, B, C, D in the system&amp;nbsp;and a different OData service binding for each SMBC object. You assign a PFCG role containing the authorization default for the OData services of SMBC objects A, B to a user. This user can work with the SMBC objects A, B. The user cannot see or edit the SMBC objects C and D.&lt;/P&gt;&lt;P&gt;Note that roles that contain the Custom Business Configurations Fiori app do not automatically derive the required authorization for the SMBC objects. You need to add the authorization default of the OData service manually.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/custom-business-configurations-f4579-controlling-the-visibility-of-bc/ba-p/14247015"/>
    <published>2025-10-17T13:28:18.345000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/fiori-elements-list-report%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89/ba-p/14240934</id>
    <title>Fiori Elements List Reportでのファイルアップロード</title>
    <updated>2025-10-17T18:00:00.031000+02:00</updated>
    <author>
      <name>hironobu_nakayama</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/781777</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1633604560"&gt;1. はじめに&lt;/H1&gt;&lt;P&gt;このブログでは、SAP Fiori ElementsのList Reportで、各行（アイテム）に対して“添付ファイル“のような項目を持たせ、行単位でファイルのアップロード・参照・削除の実現方法を紹介します。&lt;BR /&gt;List Reportのデータソースは、ABAP RESTful Application Programming Model（RAP）フレームワークを使用して開発したOData V4サービスを対象とし、RAP開発においてファイルアップロードを実現するために必要な実装についての内容となっています。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1437091055"&gt;2. ファイルアップロード実装のポイント&lt;/H1&gt;&lt;P&gt;ファイルアップロード実装においては、①ファイル格納に必要なテーブル項目の定義、および、②ファイルオブジェクト格納用項目とファイルタイプ格納用項目への適切なアノテーション付与の2点が必要となります。&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;ファイル格納に必要なテーブル項目の定義&lt;P&gt;カスタムテーブルに以下の3つの項目を設定します（項目名は、サンプルです。）&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;ファイルオブジェクト格納用項目（ファイルサイズを指定しない場合、abap.rawstring(0)とする）&lt;UL&gt;&lt;LI&gt;例：attachment: abap.rawstring(0);&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;ファイル名格納用項目&lt;UL&gt;&lt;LI&gt;例：filename: abap.char(128);&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;ファイルタイプ格納用項目&lt;UL&gt;&lt;LI&gt;例：mimetype: abap.char(128);&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;CDS Viewでのファイルオブジェクト格納用項目とファイルタイプ格納用項目への適切なアノテーション付与&lt;UL&gt;&lt;LI&gt;ファイルオブジェクト格納用項目&lt;UL&gt;&lt;LI&gt;例：&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Semantics.largeObject : {
mimeType: 'Mimetype',
fileName: 'Filename',
contentDispositionPreference: #INLINE
}​&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;ファイルタイプ格納用項目&lt;UL&gt;&lt;LI&gt;@Semantics.mimeType: true&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1240577550"&gt;3. 実装例&lt;/H1&gt;&lt;P&gt;本ブログでは、RAP開発の簡略化のため、RAP Generatorを使用します。RAP Generatorは、カスタムテーブルからCDS ViewやBehavior Definition等のRAP オブジェクト群をウィザードによる設定のみで生成可能なツールです。RAP Generator を利用して RAP オブジェクトを生成する場合、ドラフト機能を持つ更新処理（Managed Runtime）に対応したサービスが生成されます。そのため、テーブル定義にドラフト機能や更新処理に利用するための必須項目を定義している必要があります。RAP Generatorについては、以下のSAP Helpをご確認ください。&lt;/P&gt;&lt;P&gt;SAP Help: &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/generating-rap-business-service-with-generate-abap-repository-objects-wizard" target="_blank" rel="noopener noreferrer"&gt;Generating a RAP Business Service with the Generate ABAP Repository Objects Wizards&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;以下の実装手順は、&lt;SPAN&gt;SAP Help: &lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-rap/example-rap-business-service-generation" target="_blank" rel="noopener noreferrer"&gt;Example: OData UI Service Generation Based on a Database Table&lt;/A&gt;のサンプルをベースとした実装例となります。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1302229483"&gt;1. RAP Generatorによるオブジェクトを格納するためのパッケージを作成します。&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_0-1760157013761.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325823iFF67EF8A7D119B10/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_0-1760157013761.png" alt="hironobu_nakayama_0-1760157013761.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1105715978"&gt;2. １で作成したパッケージ内にカスタムテーブルを作成します。&lt;/H3&gt;&lt;P&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_1-1760157057491.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325824i82D4DF7B553C56CD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_1-1760157057491.png" alt="hironobu_nakayama_1-1760157057491.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_2-1760157071905.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325825i0DDC00E4250B93BB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_2-1760157071905.png" alt="hironobu_nakayama_2-1760157071905.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Custom Table for file upload test'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zpt_file_upload {

  key client            : abap.clnt not null;
  key customer_id       : /dmo/customer_id not null;
  first_name            : /dmo/first_name;
  last_name             : /dmo/last_name;
  title                 : /dmo/title;
  street                : /dmo/street;
  postal_code           : /dmo/postal_code;
  city                  : /dmo/city;
  country_code          : land1;
  phone_number          : /dmo/phone_number;
  email_address         : /dmo/email_address;
  attachment            : abap.rawstring(0);
  filename              : abap.char(128);
  mimetype              : abap.char(128);
  local_created_by      : abp_creation_user;
  local_created_at      : abp_creation_tstmpl;
  local_last_changed_by : abp_locinst_lastchange_user;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
  last_changed_at       : abp_lastchange_tstmpl;

}​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-909202473"&gt;3. RAP Generatorを実行し、ウィザードに沿って設定します。&lt;/H3&gt;&lt;P&gt;対象のカスタムテーブルを右クリック→”Generate ABAP Repository Objects…” で実行&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_3-1760157422206.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325826iC928155A8BCFAE9E/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_3-1760157422206.png" alt="hironobu_nakayama_3-1760157422206.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;サービスタイプの選択&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_4-1760157441952.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325827iF0BB085AA624F8A4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_4-1760157441952.png" alt="hironobu_nakayama_4-1760157441952.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;生成オブジェクト格納用パッケージの選択&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_5-1760157464387.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325828iCA1BEBBB2C283DDC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_5-1760157464387.png" alt="hironobu_nakayama_5-1760157464387.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;生成されるオブジェクトを確認し、必要に応じて名称変更やエイリアス名を設定&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_6-1760157482071.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325829i0F2526AA45703F9D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_6-1760157482071.png" alt="hironobu_nakayama_6-1760157482071.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_7-1760157495656.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325830i9C6952F5528E2BD6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_7-1760157495656.png" alt="hironobu_nakayama_7-1760157495656.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-712688968"&gt;4. 生成されたデータモデル（CDS View）へファイルアップロードのためのアノテーションを追加し、有効化します。&lt;/H3&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: '##GENERATED ZPT_FILE_UPLOAD'
define root view entity ZR_PT_FILE_UPLOAD
  as select from zpt_file_upload
{
  key customer_id           as CustomerID,
      first_name            as FirstName,
      last_name             as LastName,
      title                 as Title,
      street                as Street,
      postal_code           as PostalCode,
      city                  as City,
      country_code          as CountryCode,
      phone_number          as PhoneNumber,
      email_address         as EmailAddress,
      @Semantics.largeObject : {
            mimeType: 'Mimetype',
            fileName: 'Filename',
            contentDispositionPreference: #INLINE
          }
      attachment            as Attachment,
      filename              as Filename,
      @Semantics.mimeType: true
      mimetype              as Mimetype,
      @Semantics.user.createdBy: true
      local_created_by      as LocalCreatedBy,
      @Semantics.systemDateTime.createdAt: true
      local_created_at      as LocalCreatedAt,
      @Semantics.user.localInstanceLastChangedBy: true
      local_last_changed_by as LocalLastChangedBy,
      @Semantics.systemDateTime.localInstanceLastChangedAt: true
      local_last_changed_at as LocalLastChangedAt,
      @Semantics.systemDateTime.lastChangedAt: true
      last_changed_at       as LastChangedAt

}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-516175463"&gt;5. サービスバインディングを公開します。&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_8-1760157523686.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325831i4F5DCB4410845F5A/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_8-1760157523686.png" alt="hironobu_nakayama_8-1760157523686.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-319661958"&gt;6. エンティティを選択して、プレビューします。&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_9-1760157563744.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325832iC927D9BEF8566E34/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_9-1760157563744.png" alt="hironobu_nakayama_9-1760157563744.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-123148453"&gt;7. “Create”ボタンからデータの登録およびファイルのアップロードを実行します。&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_10-1760157593131.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325833i2D10826CA744794B/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_10-1760157593131.png" alt="hironobu_nakayama_10-1760157593131.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_11-1760157628831.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325834iCBF6028E63ADA10C/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_11-1760157628831.png" alt="hironobu_nakayama_11-1760157628831.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_12-1760157647311.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325835iC7286B9648C140C7/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_12-1760157647311.png" alt="hironobu_nakayama_12-1760157647311.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_13-1760157663896.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325836i33B8FE451D47FCBE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="hironobu_nakayama_13-1760157663896.png" alt="hironobu_nakayama_13-1760157663896.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_14-1760157681275.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325837i22D13F546974AC37/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_14-1760157681275.png" alt="hironobu_nakayama_14-1760157681275.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_15-1760157702526.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325838iBABEDFAC843FB59D/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_15-1760157702526.png" alt="hironobu_nakayama_15-1760157702526.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_16-1760157721073.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/325839i9A80962EABEC37F9/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_16-1760157721073.png" alt="hironobu_nakayama_16-1760157721073.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-438209593"&gt;4. まとめ&lt;/H1&gt;&lt;P&gt;上記の実装により、ABAP RESTful Application Programming Model（RAP）を用いたOData V4サービスを利用し、SAP Fiori ElementsのList Reportで各行（アイテム）ごとに“添付ファイル”項目を持たせ、行単位でファイルのアップロード・参照・削除を実現することが可能です。是非ご活用下さい。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-241696088"&gt;参考情報&lt;/H1&gt;&lt;P&gt;SAPUI5 Document: &lt;A href="https://sapui5.hana.ondemand.com/#/topic/b236d32d48b74304887b3dd5163548c1" target="_blank" rel="noopener nofollow noreferrer"&gt;Enabling Stream Support&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/fiori-elements-list-report%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89/ba-p/14240934"/>
    <published>2025-10-17T18:00:00.031000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/abap-code-to-transport-many-packages-in-one-transport-request/ba-p/14247391</id>
    <title>ABAP code to transport many packages in one transport request</title>
    <updated>2025-10-18T09:00:00.037000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;I have created this program in a system with ABAP 7.58 to transport the objects from many packages + include objects from additional transport requests.&lt;/P&gt;&lt;P&gt;For one or few packages, it's best to transport manually via official SE80 &amp;gt; Select package &amp;gt; Context menu "Write transport request".&lt;/P&gt;&lt;P&gt;It was developed quick &amp;amp; dirty.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;It's not using any official API, so use it at your own risk.&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The only screen:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1760711732980.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/329270iA4E55B5CDA598777/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1760711732980.png" alt="Sandra_Rossi_3-1760711732980.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;For information, this program relies on the code triggered via SE80 for one package:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1760708594427.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/329240i34B30BA9B326FC2A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1760708594427.png" alt="Sandra_Rossi_0-1760708594427.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Happy transport!&lt;/P&gt;&lt;P&gt;Sandra&lt;/P&gt;&lt;P&gt;Here is the code. I have indicated from which subroutines I have copied the code.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT z_transport_many_packages.

DATA gv_devclass TYPE tadir-devclass.
DATA gv_trkorr   TYPE e070-trkorr.

SELECTION-SCREEN BEGIN OF BLOCK source WITH FRAME TITLE text_001.
  SELECT-OPTIONS s_devcla FOR gv_devclass.
  SELECT-OPTIONS s_trkorr FOR gv_trkorr.
SELECTION-SCREEN END OF BLOCK source.

SELECTION-SCREEN BEGIN OF BLOCK target WITH FRAME TITLE text_002.
  PARAMETERS p_trkorr TYPE trkorr.
SELECTION-SCREEN END OF BLOCK target.

INITIALIZATION.
  text_001 = 'Source'(001).
  text_002 = 'Target'(002).
  %_S_DEVCLA_%_APP_%-TEXT = 'Packages to transport'(003).
  %_S_TRKORR_%_APP_%-TEXT = 'TRs to include in transport'(004).
  %_P_TRKORR_%_APP_%-TEXT = 'Target Transport Request'(005).

START-OF-SELECTION.
  IF s_devcla IS NOT INITIAL.
    SELECT devclass
      FROM tdevc
      WHERE devclass IN @s_devcla
      INTO TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(gt_tdevc).
  ENDIF.

  IF s_trkorr IS NOT INITIAL.
    SELECT trkorr
      FROM e070
      WHERE trkorr IN @s_trkorr
      INTO TABLE &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1407137"&gt;@DATA&lt;/a&gt;(gt_e070).
  ENDIF.

  LOOP AT gt_tdevc REFERENCE INTO DATA(ls_tdevc).

    " Code from subroutine TRANSPORT_DEVCLASS_OBJECTS of program SAPLSEAP
    " (called by subroutine TRANSPORT_OBJECT_PART_2 of program SAPLSEAP,
    "  itself called by subroutine TRANSPORT_OBJECT_PART_1 of program SAPLSEAP)
    DATA(l_tadir_objs) = VALUE scts_tadir( ).
    CALL FUNCTION 'TRINT_SELECT_OBJECTS'
      EXPORTING  iv_devclass              = ls_tdevc-&amp;gt;devclass
                 iv_only_existing_objects = abap_false
                 iv_via_selscreen         = abap_false
      IMPORTING
                 et_objects_tadir         = l_tadir_objs
      EXCEPTIONS cancelled_by_user        = 1
                 invalid_input            = 2
                 OTHERS                   = 3.
    IF sy-subrc &amp;lt;&amp;gt; 0.
      MESSAGE 'Error in TRINT_SELECT_OBJECTS' TYPE 'S' DISPLAY LIKE 'E'.
      STOP.
    ENDIF.
    DATA l_e071_obj TYPE trwbo_s_e071.
    DATA l_ddlname  TYPE ddlname.
    DATA l_objects  TYPE trwbo_t_e071.
    LOOP AT l_tadir_objs ASSIGNING FIELD-SYMBOL(&amp;lt;l_tadir_obj&amp;gt;) WHERE object &amp;lt;&amp;gt; 'STOB'.
      IF &amp;lt;l_tadir_obj&amp;gt;-object = 'VIEW'.
        CLEAR l_ddlname.
        PERFORM get_ddl_source USING    &amp;lt;l_tadir_obj&amp;gt;-obj_name
                               CHANGING l_ddlname.
        IF l_ddlname IS NOT INITIAL.
          CONTINUE.
        ENDIF.
      ENDIF.

      l_e071_obj-pgmid    = &amp;lt;l_tadir_obj&amp;gt;-pgmid.
      l_e071_obj-object   = &amp;lt;l_tadir_obj&amp;gt;-object.
      l_e071_obj-obj_name = &amp;lt;l_tadir_obj&amp;gt;-obj_name.
      APPEND l_e071_obj TO l_objects.
    ENDLOOP.
  ENDLOOP.

  " Code from TRANSPORT_OBJECT_PART_1
  IF l_objects IS NOT INITIAL.
    DATA l_suppress_dialog TYPE trparflag VALUE space.
    DATA l_es_request      TYPE trwbo_request_header.

    IF p_trkorr IS NOT INITIAL.
      l_suppress_dialog = 'X'.
    ENDIF.
    CALL FUNCTION 'TR_REQUEST_CHOICE'
      EXPORTING
                 iv_suppress_dialog   = l_suppress_dialog
                 it_e071              = l_objects
                 iv_request           = p_trkorr
      IMPORTING
                 es_request           = l_es_request
      EXCEPTIONS
                 invalid_request      = 1
                 invalid_request_type = 2
                 user_not_owner       = 3
                 no_objects_appended  = 4
                 enqueue_error        = 5
                 cancelled_by_user    = 6
                 recursive_call       = 7
                 OTHERS               = 8.
    IF sy-subrc = 0.
      p_trkorr = l_es_request-trkorr.
      IF l_suppress_dialog IS NOT INITIAL.
        MESSAGE s033(to) WITH l_es_request-trkorr.
      ENDIF.
    ELSE.
      IF p_trkorr IS NOT INITIAL.
        " do it again with dialog enabled:
        CALL FUNCTION 'TR_REQUEST_CHOICE'
          EXPORTING
                     it_e071              = l_objects
                     iv_request           = p_trkorr
          IMPORTING
                     es_request           = l_es_request
          EXCEPTIONS
                     invalid_request      = 1
                     invalid_request_type = 2
                     user_not_owner       = 3
                     no_objects_appended  = 4
                     enqueue_error        = 5
                     cancelled_by_user    = 6
                     recursive_call       = 7
                     OTHERS               = 8.
      ENDIF.
      IF sy-subrc = 0.
        p_trkorr = l_es_request-trkorr.
        MESSAGE s033(to) WITH l_es_request-trkorr.
      ELSE.
        MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        STOP.
      ENDIF.
    ENDIF.
  ELSE.
    MESSAGE s604(eu).
  ENDIF.

  " Subroutine COPY_OBJECT_LIST of program SAPLSTRH
  LOOP AT gt_e070 REFERENCE INTO DATA(ls_e070).
    CALL FUNCTION 'TR_COPY_COMM'
      EXPORTING  wi_dialog                = 'X'
                 wi_trkorr_from           = ls_e070-&amp;gt;trkorr
                 wi_trkorr_to             = p_trkorr
                 wi_without_documentation = abap_false
      EXCEPTIONS OTHERS                   = 1.
    IF sy-subrc &amp;lt;&amp;gt; 0.
      MESSAGE 'Error in TR_COPY_COMM' TYPE 'S' DISPLAY LIKE 'E'.
      STOP.
    ENDIF.
  ENDLOOP.

  COMMIT WORK.

FORM get_ddl_source USING    p_viewname TYPE csequence
                    CHANGING p_ddlname  TYPE ddlname.

  DATA handler TYPE REF TO if_dd_ddl_handler.

  TRY.
      handler = cl_dd_ddl_handler_factory=&amp;gt;create( ).
      p_ddlname = handler-&amp;gt;get_ddl_name_4_dd_artefact( CONV ddobjname( p_viewname ) ).
    CATCH cx_dd_ddl_exception ##NO_HANDLER.
  ENDTRY.
ENDFORM.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/abap-code-to-transport-many-packages-in-one-transport-request/ba-p/14247391"/>
    <published>2025-10-18T09:00:00.037000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/rap%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88-sap%E6%A8%99%E6%BA%96%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E6%B6%88%E8%B2%BB%E3%81%A8%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0rap%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC/ba-p/14241240</id>
    <title>RAPイベント：SAP標準イベントの消費とカスタムRAPイベントのトリガー</title>
    <updated>2025-10-18T18:00:00.033000+02:00</updated>
    <author>
      <name>hironobu_nakayama</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/781777</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1633627651"&gt;1. はじめに&lt;/H1&gt;&lt;P&gt;イベント駆動アーキテクチャ（&lt;SPAN&gt;EDA&lt;/SPAN&gt;）は、ビジネスにおける重要な“イベント”を検出し、リアルタイムで対応する統合モデルです。現代の企業がリアルタイム運用と柔軟で応答性の高いシステムを求める中で、&lt;SPAN&gt;EDA&lt;/SPAN&gt;は不可欠な技術となっています。&lt;BR /&gt;SAP S/4HANAにおけるイベント駆動アーキテクチャの実装において、標準&lt;SPAN&gt;RAP&lt;/SPAN&gt;イベントが多数提供されていますが、標準イベントのペイロードでは、業務要件に対応できず、カスタマイズが必要となる場合があります。特に、イベントデータによるフィルタリングや標準イベントのペイロード補完を目的として、&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準イベントを&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;により拡張するユースケースがございます。&lt;BR /&gt;Derived Eventは、&lt;SPAN&gt;S/4HANA Cloud, private edition &amp;amp; S/4HANA 2023 / S/4HANA Cloud, public edition 2308&lt;/SPAN&gt;リリースで導入された機能で、既存の&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準イベントをベースに、カスタムペイロードを持つ新しいイベントを定義できる機能です。これにより、標準イベントの実装を再利用しながら、業務に必要な追加フィールドやフィルタリング条件を適用したイベントを作成することが可能になります。&lt;BR /&gt;SAP Community Blog: &lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/derived-events-how-to-trigger-custom-event-from-an-sap-standard-event/ba-p/13955193" target="_blank"&gt;Derived Events- How to Trigger Custom Event from an SAP Standard Event&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;一方、&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;は、拡張対象の&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準オブジェクトが以下の条件を満たしている必要があります。&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;参照元イベントを含むビジネスオブジェクトが拡張可能&lt;SPAN&gt;(extensible)&lt;/SPAN&gt;であること&lt;/LI&gt;&lt;LI&gt;参照されるイベントが&lt;SPAN&gt;C0&lt;/SPAN&gt;および&lt;SPAN&gt;C1&lt;/SPAN&gt;リリースされた&lt;SPAN&gt;RAP BO&lt;/SPAN&gt;インターフェースで公開されている必要があること&lt;/LI&gt;&lt;LI&gt;Derived Eventのペイロードのデータソースとして使用される&lt;SPAN&gt;CDS&lt;/SPAN&gt;ビューエンティティが&lt;SPAN&gt;C1&lt;/SPAN&gt;リリースされている必要があること&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;そのため、&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準&lt;SPAN&gt;RAP BO&lt;/SPAN&gt;では、&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;による拡張に対応していないオブジェクトも存在します。この場合、本来であれば&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;で解決できるはずの要件が実現できないケースが発生します。&lt;BR /&gt;そこで本ブログでは、&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;による拡張が不可能な&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準イベントに対して、カスタム&lt;SPAN&gt;RAP BO&lt;/SPAN&gt;によるペイロードの拡張を実現するワークアラウンドアプローチについて紹介します。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1437114146"&gt;2. ワークアラウンドソリューション&lt;/H1&gt;&lt;P&gt;Derived Eventが使用できない場合、&lt;SPAN&gt;Local Event Consumption&lt;/SPAN&gt;とカスタム&lt;SPAN&gt;RAP&lt;/SPAN&gt;イベントを組み合わせたワークアラウンドアプローチが有効な手段となります。このアプローチは、&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準イベントをローカル（カスタム&lt;SPAN&gt;ABAP&lt;/SPAN&gt;クラス）で消費し、それをトリガーとしてカスタム&lt;SPAN&gt;RAP&lt;/SPAN&gt;イベントを発生させる手法です。カスタムイベントのペイロードを業務要件に合わせたペイロードとすることで、イベントフィルタの利用等が可能となります。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_1-1760225484634.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326000i65E19ECBA8BC68CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_1-1760225484634.png" alt="hironobu_nakayama_1-1760225484634.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1240600641"&gt;3. 実装サンプル&lt;/H1&gt;&lt;P&gt;本ブログでは、拡張不可な&lt;SPAN&gt;r_purchaseordertp&lt;/SPAN&gt;を対象オブジェクトとし、購買発注伝票のデータ変更に対するイベントペイロードの拡張を実現します。&lt;SPAN&gt;SAP&lt;/SPAN&gt;標準イベントでは、購買発注伝票番号のみのペイロードあるのに対し、カスタムイベントでは、購買発注伝票番号と購買発注伝票タイプをペイロードとします。Event Bindingおよび&lt;SPAN&gt;Event Mesh&lt;/SPAN&gt;とのチャンネル設定等は、&lt;SPAN&gt;SAP Community Blog: &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-rap-business-events-in-sap-s-4hana-on-premise-2022/ba-p/13553312" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-rap-business-events-in-sap-s-4hana-on-premise-2022/ba-p/13553312&lt;/A&gt; &lt;/SPAN&gt;をご確認ください。本ブログの実装サンプルでの&lt;SPAN&gt;RAP BO&lt;/SPAN&gt;では、イベント以外の&lt;SPAN&gt;CRUD&lt;/SPAN&gt;や保存等の処理は、実装していない点にご注意ください。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1302252574"&gt;(1) Local Consumer (ローカルイベントハンドリングのためのカスタムABAPクラス)&lt;/H3&gt;&lt;H5 id="toc-hId-1363904507"&gt;グローバルクラス: zcl_event_consump&lt;/H5&gt;&lt;P&gt;グローバルクラスでは、&lt;SPAN&gt;FOR EVENTS OF r_purchaseordertp&lt;/SPAN&gt;の定義により、消費する標準イベントを設定します。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_event_consump DEFINITION
  PUBLIC
  ABSTRACT
  FINAL
  FOR EVENTS OF r_purchaseordertp.

  PUBLIC SECTION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_event_consump IMPLEMENTATION.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H5 id="toc-hId-1167391002"&gt;ローカルクラス: zcl_event_consump&lt;/H5&gt;&lt;P&gt;ローカルクラスでは、消費した標準イベントのペイロードのデータをもとに追加のデータ取得を行い、カスタム&lt;SPAN&gt;RAP&lt;/SPAN&gt;イベントをトリガーします。イベントのトリガーは、&lt;SPAN&gt;RAP&lt;/SPAN&gt;フレームワークにおいて、&lt;SPAN&gt;Save Sequence&lt;/SPAN&gt;でのみ可能なため、&lt;SPAN&gt;cl_abap_tx=&amp;gt;save(&amp;nbsp; ). &lt;/SPAN&gt;により、明示的に&lt;SPAN&gt;Save Sequence&lt;/SPAN&gt;に変更する必要がある点に注意が必要です。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS lcl_event_consump DEFINITION INHERITING FROM cl_abap_behavior_event_handler.
  PRIVATE SECTION.
    METHODS:
      consume_changed FOR ENTITY EVENT changed_instances FOR purchaseorder~changed.
ENDCLASS.

CLASS lcl_event_consump IMPLEMENTATION.

  METHOD consume_changed.
    cl_abap_tx=&amp;gt;save(  ).

    DATA lv_potype TYPE mm_purchaseordertype.

    CHECK changed_instances IS NOT INITIAL.

    LOOP AT changed_instances INTO DATA(changed_instance).

      SELECT SINGLE purchaseordertype
      FROM c_purchaseordertp
      INTO _potype
      WHERE purchaseorder = @changed_instance-purchaseorder.

      DATA(et_events) = VALUE zbp_i_purchseorder_test=&amp;gt;tt_events(
        (
        purchaseorder = changed_instance-purchaseorder
        purchaseordertype = lv_potype
        )
      ).

      zbp_i_purchseorder_event=&amp;gt;raise_po_changed_event( it_events = et_events ).

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-712712059"&gt;(2) Custom RAP BO (Custom Event)&lt;/H3&gt;&lt;H5 id="toc-hId-774363992"&gt;CDS View: &lt;SPAN&gt;ZI_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;CDS Viewでは、購買発注伝票番号のみ定義しています。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Consume purchase order event'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
  serviceQuality: #X,
  sizeCategory: #S,
  dataClass: #MIXED
}
define root view entity ZI_purchseorder_event as select from I_PurchaseOrder
{
  key PurchaseOrder
}&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-577850487"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId-381336982"&gt;Behavior Definition: &lt;SPAN&gt;ZI_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;イベントトリガのためのカスタム&lt;SPAN&gt;RAP&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;BO&lt;/SPAN&gt;では、&lt;SPAN&gt;create / update / delete &lt;/SPAN&gt;機能を定義していません。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed with unmanaged save implementation in class zbp_i_purchseorder_event unique;
strict ( 2 );

define behavior for ZI_purchseorder_event //alias &amp;lt;alias_name&amp;gt;
//persistent table ekko
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
{
  //  create;
  //  update;
  //  delete;
  event purchaseorder_changed parameter ZAB_PO_changed_event;

  field ( readonly ) PurchaseOrder;
}&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--735379344"&gt;Behavior Implementation (Global class) : &lt;SPAN&gt;zbp_i_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;グローバルクラスでは、イベントトリガー用のメソッドを定義します。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zbp_i_purchseorder_event DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zi_purchseorder_event.

  TYPES tt_events TYPE TABLE FOR EVENT zi_purchseorder_event~purchaseorder_changed.

  PUBLIC SECTION.
        CLASS-METHODS raise_po_changed_event
            IMPORTING it_events TYPE tt_events.

ENDCLASS.

CLASS zbp_i_purchseorder_event IMPLEMENTATION.
METHOD raise_po_changed_event.
  lcl_event_handler=&amp;gt;on_po_changed_event( it_events ).
endmethod.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--931892849"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId--1128406354"&gt;Behavior Implementation (Local class) : &lt;SPAN&gt;lhc_zi_purchseorder_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;ローカルクラスでは、保存処理等は実装せず、イベントトリガー用のメソッドのみ実装しています。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lhc_zi_purchseorder_event DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zi_purchseorder_event RESULT result.

ENDCLASS.

CLASS lhc_zi_purchseorder_event IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

ENDCLASS.

CLASS lsc_zi_purchseorder_event DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.

ENDCLASS.

CLASS lsc_zi_purchseorder_event IMPLEMENTATION.

  METHOD save_modified.
  ENDMETHOD.

  METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_event_handler DEFINITION FRIENDS zbp_i_purchseorder_event.
  PUBLIC SECTION.
    CLASS-METHODS on_po_changed_event IMPORTING it_events TYPE zbp_i_purchseorder_event=&amp;gt;tt_events.
ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.
   METHOD on_po_changed_event.

    RAISE ENTITY EVENT ZI_purchseorder_event~purchaseorder_changed FROM it_events.

   ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId--1324919859"&gt;&amp;nbsp;&lt;/H5&gt;&lt;H5 id="toc-hId--1521433364"&gt;Abstract Entity: &lt;SPAN&gt;ZAB_PO_changed_event&lt;/SPAN&gt;&lt;/H5&gt;&lt;P&gt;Abstract entityにより、購買発注伝票タイプを追加しています。これにより、カスタムRAPイベントのペイロードは、購買発注伝票番号と購買発注伝票タイプとなります。&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Abastract entity for po changed event'
define abstract entity ZAB_PO_changed_event
  //  with parameters parameter_name : parameter_type
{
  PurchaseOrderType : mm_purchaseordertype;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--544334841"&gt;4. 実装結果&lt;/H1&gt;&lt;P&gt;Manage Purchase Orders (F0842A) アプリから既存の購買発注伝票を変更して、保存します。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_0-1760229645619.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326001iA137C622300D0D19/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_0-1760229645619.png" alt="hironobu_nakayama_0-1760229645619.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;SAP Event Meshで&lt;SPAN&gt;S/4HANA&lt;/SPAN&gt;からトリガされたカスタムイベントを受け取ることができます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="hironobu_nakayama_1-1760229707438.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326002i776A835D573B8867/image-size/large?v=v2&amp;amp;px=999" role="button" title="hironobu_nakayama_1-1760229707438.png" alt="hironobu_nakayama_1-1760229707438.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--740848346"&gt;5. まとめ&lt;/H1&gt;&lt;P&gt;イベント駆動アーキテクチャの実現において、&lt;SPAN&gt;Derived Event&lt;/SPAN&gt;による拡張が不可能な場合、&lt;SPAN&gt;Local Event Consumption&lt;/SPAN&gt;とカスタム&lt;SPAN&gt;RAP&lt;/SPAN&gt;イベントを組み合わせたワークアラウンドアプローチが有効な手段となります。&lt;BR /&gt;こちらのアプローチにより、業務要件に応じたカスタムペイロードとフィルタリング機能を実現することで、必要なデータをイベントコンシューマに提供し、システム間連携の最適化を図ることが可能です。&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--937361851"&gt;参考情報&lt;/H1&gt;&lt;P&gt;SAP Learning：&lt;SPAN&gt;&lt;A href="https://learning.sap.com/learning-journeys/discovering-event-driven-integration-with-sap-integration-suite-advanced-event-mesh/explaining-event-driven-architecture_d02a51bb-1ce4-4c2d-a25d-8b9c9198ffd2" target="_blank" rel="noopener noreferrer"&gt;Explaining Event-Driven Architecture&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;SAP Help: &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/sap-btp-guidance-framework/integration-architecture-guide/event-driven-architecture?amp;state=PRODUCTION&amp;amp;amp;version=Cloud" target="_blank" rel="noopener noreferrer"&gt;Event-driven Architecture&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;SAP Community Blog: &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-2-creating-custom-business/ba-p/13914171" target="_blank"&gt;RAP Business Events with Advanced Event Mesh [2]: Creating custom business events&lt;/A&gt;&lt;BR /&gt;SAP Community Blog: &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap-business-events-with-advanced-event-mesh-5-consuming-a-local-business/ba-p/13915138" target="_blank"&gt;RAP Business Events with Advanced Event Mesh [5]: Consuming a local business event&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/rap%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88-sap%E6%A8%99%E6%BA%96%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E6%B6%88%E8%B2%BB%E3%81%A8%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0rap%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC/ba-p/14241240"/>
    <published>2025-10-18T18:00:00.033000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/download-smart-form-as-pdf-using-rap-action-in-on-premises/ba-p/14244826</id>
    <title>Download Smart form as PDF using RAP action in On-premises</title>
    <updated>2025-10-22T07:43:37.130000+02:00</updated>
    <author>
      <name>chandana9269</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1470141</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Introduction:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog I need to demonstrate the process of enabling a smart form PDF download within a RAP application using a custom action button in an on-premises setup.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This is a common requirement for generating and downloading documents like invoices, Purchase orders etc., from a Fiori elements app.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;In classic ABAP, generating and downloading files was often done using methods like GUI_DOWNLOAD, but this approach is not compatible with RAP.&amp;nbsp;&lt;BR /&gt;In RAP, the recommended way to implement download functionality is by using streams, combined with additional logic to handle the pdf generation and delivery to the front-end.&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp;Step 1 :&amp;nbsp; Create Database Tables &amp;nbsp;&lt;BR /&gt;&lt;/STRONG&gt;First we will be creating a database table to store the sales header(ZCH_DT_SALES_HED) and sales item (ZCH_DT_SALES_IT)data.&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'sales header table'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zch_dt_sales_hed 
{
  key sid         : abap.char(10) not null;
  created_on      : abap.dats;
  document_type   : abap.char(4);
  customer        : abap.char(10);
  attachment      : abap.rawstring(0);
  mimetype        : abap.char(128);
  filename        : abap.char(128);
  last_changed_at : abp_lastchange_tstmpl;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Item table&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'sales item table'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zch_dt_sales_it 
{
  key sid       : abap.char(10) not null;
  key sdoc_item : abap.numc(6) not null;
  material_no   : abap.char(40);
  @Semantics.quantity.unitOfMeasure : 'zch_dt_sales_it.unit'
  quantity      : abap.quan(15,3);
  unit          : abap.unit(3);
  @Semantics.amount.currencyCode : 'zch_dt_sales_it.currency'
  net_value     : abap.curr(15,2);
  currency      : abap.cuky;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step &lt;/SPAN&gt;&lt;SPAN class=""&gt;2 :&lt;/SPAN&gt;&lt;SPAN class=""&gt; Define Interface view on top of Sales Header and item tables&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'base view for sales header'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define root view entity zch_i_saleshed
  as select from zch_dt_sales_hed
  composition [0..*] of zch_i_salesit as _sitem
{
  key sid             as Sid,
      created_on      as CreatedOn,
      document_type   as DocumentType,
      customer        as Customer,
      @Semantics.largeObject : { fileName: 'filename' , mimeType: 'Mimetype' , 
      contentDispositionPreference: #ATTACHMENT}
      attachment      as Attachment,
      @Semantics.mimeType: true
      mimetype        as Mimetype,
      filename        as Filename,
      last_changed_at as LastChangedAt,
      _sitem
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'base view for sales item'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity zch_i_salesit as select from zch_dt_sales_it
association to parent zch_i_saleshed as _sheader on $projection.Sid = _sheader.Sid
{
    key sid as Sid,
    key sdoc_item as SdocItem,
    material_no as MaterialNo,
    @Semantics.quantity.unitOfMeasure : 'Unit'
    quantity as Quantity,
    unit as Unit,
    @Semantics.amount.currencyCode : 'Currency'
    net_value as NetValue,
    currency as Currency,
    _sheader
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step &lt;/SPAN&gt;&lt;SPAN class=""&gt;3 :&lt;/SPAN&gt;&lt;SPAN class=""&gt; Define Consumption view on top of &lt;/SPAN&gt;&lt;SPAN class=""&gt;header and item &lt;/SPAN&gt;&lt;SPAN class=""&gt;interface views&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'projection view for sales header'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
define root view entity zch_c_saleshed
  provider contract transactional_query
  as projection on zch_i_saleshed
{
  key Sid,
      CreatedOn,
      DocumentType,
      Customer,
      @Semantics.largeObject : { fileName: 'filename' , mimeType: 'Mimetype' , 
      contentDispositionPreference: #ATTACHMENT}
      Attachment,
      @Semantics.mimeType: true
      Mimetype,
      Filename,
      LastChangedAt,
      /* Associations */
      _sitem : redirected to composition child zch_c_salesit
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'projection view for sales item'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
define view entity zch_c_salesit 
as  projection on  zch_i_salesit
{
    key Sid,
    key SdocItem,
    MaterialNo,
    @Semantics.quantity.unitOfMeasure : 'unit'
    Quantity,
    Unit,
    @Semantics.amount.currencyCode: 'Currency'
    NetValue,
    Currency,
    /* Associations */
    _sheader : redirected to parent zch_c_saleshed
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step &lt;/SPAN&gt;&lt;SPAN class=""&gt;4 :&lt;/SPAN&gt;&lt;SPAN class=""&gt; Define &lt;/SPAN&gt;&lt;SPAN class=""&gt;Metadata Extension for Header and item data&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer:#CORE
annotate entity zch_c_saleshed
    with 
{
     .facet: [
    {
      id:       'SalesDocHeader',
      purpose:  #STANDARD,
      position: 10,
      label:    'Header',
      type:     #IDENTIFICATION_REFERENCE
    },
    {
      id:            'SalesDocItem',
      purpose:       #STANDARD,
      type:          #LINEITEM_REFERENCE,
      label:         'Items',
      position:      20,
      targetElement: '_sitem'
    }
  ]
     : { lineItem: [{position: 10 , label: 'Salesorder Id' }],
    identification: [{ position: 10 ,label :'Salesorder Id' },
    { type: #FOR_ACTION, position:10 ,dataAction: 'download', label: 'Download Invoice' }] } 
    Sid;
     : { lineItem: [{position: 20 , label: 'Created on' }], 
    identification: [{ position: 20 ,label :'Created on' }] } 
    CreatedOn;
     : { lineItem: [{position: 30 , label: 'Document type' }], 
    identification: [{ position: 30 ,label :'Document type' }] } 
    DocumentType;
     : { lineItem: [{position: 40 , label: 'Customer id' }], 
    identification: [{ position: 40 ,label :'Customer id' }] } 
    Customer;
    .identification: [
    { position: 60, label: 'Attachment'   }
    ]
    Attachment;
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
annotate entity zch_c_salesit
    with 
{
    .facet: [
    {
      id:       'SalesDocItem',
      purpose:  #STANDARD,
      position: 10,
      label:    'Header',
      type:     #IDENTIFICATION_REFERENCE
    }]
@UI : { lineItem: [{position: 10 , label: 'Salesorder Id' }], 
     identification: [{ position: 10 , label :'Salesorder Id' }] } 
    Sid;
     : { lineItem: [{position: 20 , label: 'Sales Document Item' }], 
identification: [{ position: 20 ,label :'Sales Document Item' }] } 
    SdocItem;
     : { lineItem: [{position: 30 , label: 'Material no' }], 
identification: [{ position: 30 ,label :'Material no' }] } 
    MaterialNo;
     : { lineItem: [{position: 40 , label: 'Quantity' }], 
identification: [{ position: 40 ,label :'Quantity' }] } 
    Quantity;
     : { lineItem: [{position: 50 , label: 'Unit' }], 
identification: [{ position: 50 ,label :'Unit' }] } 
    Unit;
     : { lineItem: [{position: 60 , label: 'Net value' }], 
identification: [{ position: 60 ,label :'Net value' }] } 
    NetValue;
     : { lineItem: [{position: 70 , label: 'Currency' }], 
identification: [{ position: 70 ,label :'Currency' }] } 
    Currency;    
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step 5: Define &lt;/SPAN&gt;&lt;SPAN class=""&gt;Behavior Definitions&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;W&lt;/SPAN&gt;&lt;SPAN class=""&gt;e&lt;/SPAN&gt;&lt;SPAN class=""&gt; nee&lt;/SPAN&gt;&lt;SPAN class=""&gt;d to define the behavior &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition &lt;/SPAN&gt;&lt;SPAN class=""&gt;for &lt;/SPAN&gt;&lt;SPAN class=""&gt;sales order &lt;/SPAN&gt;&lt;SPAN class=""&gt;header&lt;/SPAN&gt;&lt;SPAN class=""&gt; and &lt;/SPAN&gt;&lt;SPAN class=""&gt;item&lt;/SPAN&gt;&lt;SPAN class=""&gt;. &lt;/SPAN&gt;&lt;SPAN class=""&gt;This includes setting up &lt;/SPAN&gt;&lt;SPAN class=""&gt;the managed implementation, defining standard CRUD &lt;/SPAN&gt;&lt;SPAN class=""&gt;operations, defining early numbering for header and item&lt;/SPAN&gt; &lt;SPAN class=""&gt;key&lt;/SPAN&gt;&lt;SPAN class=""&gt;s&lt;/SPAN&gt; &lt;SPAN class=""&gt;and defining the Download action&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;*Here Download action button returns the abstract entity instead of sales order &lt;/SPAN&gt;&lt;SPAN class=""&gt;itself. This&lt;/SPAN&gt;&lt;SPAN class=""&gt; abstract entity is used only &lt;/SPAN&gt;&lt;SPAN class=""&gt;for transferring the file back to the UI.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_ch_i_saleshed unique;
strict ( 2 );

define behavior for zch_i_saleshed //alias salesheader
persistent table zch_dt_sales_hed
lock master
authorization master ( instance )
//etag master &amp;lt;field_name&amp;gt;
early numbering
{
  create;
  update;
  delete;
  action download result [1]  zch_download_file;
  side effects { action download affects $self ;}
  association _sitem { create; }
  field ( readonly ) Sid,Attachment, Mimetype, Filename;

  mapping for zch_dt_sales_hed
  {
    Sid = sid;
    CreatedOn = created_on;
    DocumentType = document_type;
    Customer = customer;
    Filename = filename;
    Mimetype = mimetype;
    Attachment = attachment;
    LastChangedAt = last_changed_at;
  }
}

define behavior for zch_i_salesit //alias salesitem
persistent table zch_dt_sales_it
lock dependent by _sheader
authorization dependent by _sheader
//etag master &amp;lt;field_name&amp;gt;
early numbering
{
  update;
  delete;
  field ( readonly ) sid,SdocItem ;
  association _sheader;

  mapping for zch_dt_sales_it
  {
    Sid = sid;
    SdocItem = sdoc_item;
    MaterialNo = material_no;
    Quantity = quantity;
    Unit = unit;
    NetValue = net_value;
    Currency = currency;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Abstract Entity :&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'abstract entity for file download'
define root abstract entity Zch_Download_File
{
  @Semantics.largeObject : { fileName: 'filename' , mimeType: 'Mimetype' , 
  contentDispositionPreference: #ATTACHMENT }
  attachment      : abap.rawstring(0);
  @Semantics.mimeType: true
  mimetype        : abap.char(128);
  filename        : abap.char(128);
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define behavior definition on top of projection view&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;projection;
strict ( 2 );

define behavior for zch_c_saleshed //alias &amp;lt;alias_name&amp;gt;
{
  use create;
  use update;
  use delete;

  use action download ;
  use association _sitem { create; }
}

define behavior for zch_c_salesit //alias &amp;lt;alias_name&amp;gt;
{
  use update;
  use delete;

  use association _sheader;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Step 6: &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt;mplement the &lt;/SPAN&gt;&lt;SPAN class=""&gt;Be&lt;/SPAN&gt;&lt;SPAN class=""&gt;havior handler class &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In this step we will be implementing the behavior handler for our sales order &lt;/SPAN&gt;&lt;SPAN class=""&gt;RAP BO.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;This class takes care of early numbering as well as the download action which generates and s&lt;/SPAN&gt;&lt;SPAN class=""&gt;treams the invoice pdf back to UI.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lhc_zch_i_saleshed DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zch_i_saleshed RESULT result.
    METHODS download FOR MODIFY
      IMPORTING keys FOR ACTION zch_i_saleshed~download RESULT result.
    METHODS earlynumbering_cba_sitem FOR NUMBERING
      IMPORTING entities FOR CREATE zch_i_saleshed\_sitem.
    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE zch_i_saleshed.

ENDCLASS.

CLASS lhc_zch_i_saleshed IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD earlynumbering_create.
    select max( sid ) from zch_dt_sales_hed
    into (lv_max_id).
    data(lv_num) = CONV numc08( lv_max_id ).
    if lv_num is initial.
        lv_max_id = 'SO00000001'.
    else.
        lv_num += 1.
        lv_max_id = |SO{ lv_num }|.
    ENDIF.

data(ls_entity) = entities[ 1 ].
APPEND VALUE #( %cid = ls_entity-%cid
                sid = lv_max_id ) to mapped-zch_i_saleshed.
  ENDMETHOD.

  METHOD earlynumbering_cba_Sitem.
              data lv_number(6) type n.

  select max( sdoc_item ) from zch_dt_sales_it
  into (lv_max_id).
  if sy-subrc = 0.
    lv_number = lv_max_id + 1.
  else.
    lv_number = 1.
  ENDIF.
  loop at entities into data(ls_entities).
    loop at ls_entities-%target ASSIGNING FIELD-SYMBOL(&amp;lt;fs_target&amp;gt;).
   APPEND CORRESPONDING #( &amp;lt;fS_target&amp;gt; ) to mapped-zch_i_salesit ASSIGNING FIELD-SYMBOL(&amp;lt;ls_item&amp;gt;).
   &amp;lt;ls_item&amp;gt;-SdocItem = lv_number.
   ENDLOOP.
  ENDLOOP.
  ENDMETHOD.

  METHOD download.
   data: lt_salesi type ZCH_T_SALESI.

  loop at keys into data(ls_keys).
   READ ENTITIES OF zch_i_saleshed IN LOCAL MODE
      ENTITY zch_i_saleshed
        ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(lt_sales_header).

   data(ls_salesh) = CORRESPONDING zch_i_saleshed( lt_sales_header[ 1 ] ).

   READ ENTITIES OF zch_i_saleshed IN LOCAL MODE
      ENTITY zch_i_saleshed by \_sitem
       ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(lt_sales_item).

   LOOP AT lt_sales_item INTO DATA(ls_item).
      APPEND CORRESPONDING zch_i_salesit( ls_item ) TO lt_salesi.
    ENDLOOP.

   DATA(lv_pdf_xstring) = NEW ZCL_CH_HELPER_CLS( )-&amp;gt;generate_form(
                                                   is_sales_header = ls_salesh
                                                   it_sales_items  = lt_salesi ).

APPEND VALUE #(
      %tky              = ls_keys-%tky
      %param-attachment = lv_pdf_xstring
      %param-mimetype   = 'application/pdf'
      %param-filename   = |Invoice_{ ls_salesh-sid }.pdf|
    ) TO result.

  ENDLOOP.
  
  MODIFY ENTITY IN LOCAL MODE zch_i_saleshed
   UPDATE FIELDS  (  Attachment Mimetype Filename )
   WITH value #( (  %key = ls_keys-%key
                    Attachment = lv_pdf_xstring
                    Filename = |Invoice_{ ls_salesh-sid }.pdf|
                    Mimetype = 'application/pdf' ) )
                    REPORTED reported
                    FAILED failed.
 ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;The following helper&lt;/SPAN&gt; &lt;SPAN class=""&gt;class&lt;/SPAN&gt; &lt;SPAN class=""&gt;generates the&lt;/SPAN&gt; &lt;SPAN class=""&gt;Smart form &lt;/SPAN&gt;&lt;SPAN class=""&gt;output &lt;/SPAN&gt;&lt;SPAN class=""&gt;as&lt;/SPAN&gt;&lt;SPAN class=""&gt; an&lt;/SPAN&gt; &lt;SPAN class=""&gt;X&lt;/SPAN&gt;&lt;SPAN class=""&gt;STRING .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_ch_helper_cls DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPES: ty_sales_items_tt TYPE STANDARD TABLE OF zch_i_salesit.

    METHODS generate_form
      IMPORTING
        is_sales_header TYPE zch_i_saleshed
        it_sales_items  TYPE ty_sales_items_tt
      RETURNING
        VALUE(rv_pdf)   TYPE xstring.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.


CLASS zcl_ch_helper_cls IMPLEMENTATION.
  METHOD generate_form.

    data : lv_fm_name type RS38L_FNAM,
       lv_ctr_par type ssfctrlop,
       lv_output_options type SSFCOMPOP,
       lv_job_output type SSFCRESCL,
       Gt_pdf_lines type table of tline,
       lv_size type i,
       lv_pdf_xstring type xstring.


CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
  EXPORTING
    formname                 = 'ZCH_INVOICE'
*   VARIANT                  = ' '
*   DIRECT_CALL              = ' '
 IMPORTING
   FM_NAME                  =  lv_fm_name
 EXCEPTIONS
   NO_FORM                  = 1
   NO_FUNCTION_MODULE       = 2
   OTHERS                   = 3
          .

lv_ctr_par-no_dialog = 'X'.
lv_ctr_par-preview = 'X'.
lv_ctr_par-getotf = 'X'.
lv_output_options-TDDEST = 'LP01'.

CALL FUNCTION lv_fm_name
  EXPORTING
   CONTROL_PARAMETERS         = lv_ctr_par
   OUTPUT_OPTIONS             = lv_output_options
   USER_SETTINGS              = ''
    im_sales                   = is_sales_header-Sid
 IMPORTING
   JOB_OUTPUT_INFO            = lv_job_output
 EXCEPTIONS
   FORMATTING_ERROR           = 1
   INTERNAL_ERROR             = 2
   SEND_ERROR                 = 3
   USER_CANCELED              = 4
   OTHERS                     = 5
          .

CALL FUNCTION 'CONVERT_OTF'
 EXPORTING
   FORMAT                      = 'PDF'
 IMPORTING
    bin_filesize          = lv_size
    bin_file              = lv_pdf_xstring
  TABLES
    otf                         = lv_job_output-otfdata
    lines                       = Gt_pdf_lines
 EXCEPTIONS
   ERR_MAX_LINEWIDTH           = 1
   ERR_FORMAT                  = 2

   ERR_CONV_NOT_POSSIBLE       = 3
   ERR_BAD_OTF                 = 4
   OTHERS                      = 5.
          
 rv_pdf = lv_pdf_xstring.

  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define Service definition&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Service definition for sales header' 

define service Zch_srv_saleshed { 

expose zch_c_saleshed; 

expose zch_c_salesit; 

} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Define Service &lt;/SPAN&gt;&lt;SPAN class=""&gt;binding&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt; and&lt;/SPAN&gt;&lt;SPAN class=""&gt; preview the application&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_0-1760687945765.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328880i6F009A4D9C91932C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_0-1760687945765.png" alt="chandana9269_0-1760687945765.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create Sales Header data&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_1-1760688020461.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328881i46F0EDB66AD5B776/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_1-1760688020461.png" alt="chandana9269_1-1760688020461.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Cr&lt;/SPAN&gt;&lt;SPAN class=""&gt;e&lt;/SPAN&gt;&lt;SPAN class=""&gt;ate item data&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_2-1760688059366.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328883i3F157670405C85CD/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_2-1760688059366.png" alt="chandana9269_2-1760688059366.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Click on the Download invoice button and refresh&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_3-1760688089159.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328884i930843A5CF426181/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_3-1760688089159.png" alt="chandana9269_3-1760688089159.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Now Click on Open &lt;/SPAN&gt;&lt;SPAN class=""&gt;file ,the&lt;/SPAN&gt;&lt;SPAN class=""&gt; form will be downloaded&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_4-1760688126961.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328885iF31635F0E2B884F4/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_4-1760688126961.png" alt="chandana9269_4-1760688126961.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chandana9269_5-1760688144980.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/328886iED3E9E4EA4389C97/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="chandana9269_5-1760688144980.png" alt="chandana9269_5-1760688144980.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion :&amp;nbsp;&lt;BR /&gt;&lt;/STRONG&gt;This approach enables seamless Smart Form PDF generation and download within RAP, combining classic ABAP capabilities with modern Fiori user experience in an on-premise setup.&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/download-smart-form-as-pdf-using-rap-action-in-on-premises/ba-p/14244826"/>
    <published>2025-10-22T07:43:37.130000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/writable-entity-in-cds/ba-p/14249189</id>
    <title>Writable Entity in CDS</title>
    <updated>2025-10-22T07:56:59.929000+02:00</updated>
    <author>
      <name>kalmesh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1490139</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Introduction to writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;CDS provides a powerful way to define and consume data models.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Traditionally, CDS views were read-only, used primarily for data retrieval.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;However, with the evolution of SAP's ABAP platform, Writable CDS Entities were introduced to enable direct data manipulation (Update, modify).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Types of Writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp; &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;1.Writable CDS View Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; - Wrap DDIC tables for direct writing access.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp; 2.Writable External Entities &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;- Enable write access to eternal database.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we are going to focus on CDS Writable Entities. I will walk you through the concept step-by-step, using a practical example to demonstrate how it works and what operations—such as&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt; INSERT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;UPDATE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;—we can perform using a writable entity. Let's dive into the example.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create a Table&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_0-1761035674723.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330139i0E91AC394DB0288C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_0-1761035674723.png" alt="kalmesh_0-1761035674723.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Next, we will create a writable CDS entity on top of the database table &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZTRL_T_AIRPORT, &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Using the writable CDS entity, we can perform &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;update &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;operations directly, and we can also &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;insert&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; new records by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; statement. We will explore how to implement these operations in the upcoming steps.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_1-1761035762682.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330140i8F18A3F4D2C62746/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_1-1761035762682.png" alt="kalmesh_1-1761035762682.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In the next step, we will create a class to perform all the required operations. We will use standard interface methods to execute these operations and display the output in the console for better visibility and testing.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_2-1761035834570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330141i6A6F1BD2A833069C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_2-1761035834570.png" alt="kalmesh_2-1761035834570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Let’s&lt;/SPAN&gt;&lt;SPAN class=""&gt; insert some data into the database table. Since we cannot perform insert operation directly through a writable CDS entity, I will &lt;/SPAN&gt;&lt;SPAN class=""&gt;proceed&lt;/SPAN&gt;&lt;SPAN class=""&gt; with inserting data into the underlying database &lt;/SPAN&gt;&lt;SPAN class=""&gt;table.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_3-1761035898193.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330142i477E22022DB56E99/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_3-1761035898193.png" alt="kalmesh_3-1761035898193.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Fetch &lt;/SPAN&gt;&lt;SPAN class=""&gt;the data from the database table to verify whether the records were successfully inserted, as performed in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;p&lt;/SPAN&gt;&lt;SPAN class=""&gt;revious&lt;/SPAN&gt; &lt;SPAN class=""&gt;step.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_4-1761035941906.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330143i0ADEFA20BA444649/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_4-1761035941906.png" alt="kalmesh_4-1761035941906.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;UPDATE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now, let’s perform an update operation using the writable CDS entity (&lt;STRONG&gt;ZTRL&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;STRONG&gt;_I_WRENT_DEMO&lt;/STRONG&gt;)&lt;SPAN&gt;. In this example, we will update the name field to demonstrate how data can be modified through the entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_5-1761036054229.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330145i4019B9CCE92DA46E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_5-1761036054229.png" alt="kalmesh_5-1761036054229.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;INSERT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We will insert a new record by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; statement, which allows us to perform insert operations through the writable CDS entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_6-1761036103280.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330146iF60E2A1020E11868/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_6-1761036103280.png" alt="kalmesh_6-1761036103280.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;DELETE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Direct delete operations are not supported through writable CDS entities. If attempted, the system will raise an error, as shown below.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_7-1761036149147.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330147i142A233FDCF4405F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_7-1761036149147.png" alt="kalmesh_7-1761036149147.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_8-1761036170936.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330148i289A85701DAF27DC/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_8-1761036170936.png" alt="kalmesh_8-1761036170936.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; offer a powerful and flexible way to interact with database tables in SAP. Through these entities, we can perform &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;update operations &lt;/SPAN&gt;&lt;/STRONG&gt;and&lt;SPAN&gt;&amp;nbsp;even &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;insert new records&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; using the &lt;/SPAN&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;SPAN&gt; statement.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Keep experimenting, keep learning—and happy coding! &lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/writable-entity-in-cds/ba-p/14249189"/>
    <published>2025-10-22T07:56:59.929000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816</id>
    <title>Alternative to "SELECT-OPTIONS s_time FOR type_t_variable" to avoid buggy "= 00:00:00"</title>
    <updated>2025-10-23T15:30:34.807000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;&lt;ul =""&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1892722289"&gt;Problem&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1696208784"&gt;Workaround&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:45px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1628777998"&gt;Function module CONVERSION_EXIT_ZTIME_INPUT&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:45px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1432264493"&gt;Function module CONVERSION_EXIT_ZTIME_OUTPUT&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:45px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1235750988"&gt;DDIC domain&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:45px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-1039237483"&gt;DDIC data element&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:45px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-842723978"&gt;Program with SELECT-OPTIONS&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816#toc-hId-517127754"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1892722289"&gt;Problem&lt;/H3&gt;&lt;P&gt;There is a problem with this code:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT zdemo.
SELECT-OPTIONS s_time FOR sy-uzeit.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If the user enters an interval:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1761225158502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331607iDBC9122A2512CFF2/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1761225158502.png" alt="Sandra_Rossi_0-1761225158502.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;then clears it:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_1-1761225158545.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331605i6F56FE78002E4F39/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_1-1761225158545.png" alt="Sandra_Rossi_1-1761225158545.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;then press Enter:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_0-1761282000915.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331801iD0A8E3289FF6D2DA/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_0-1761282000915.png" alt="Sandra_Rossi_0-1761282000915.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_3-1761225158503.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331608i7485A581E80CD969/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_3-1761225158503.png" alt="Sandra_Rossi_3-1761225158503.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;it becomes = 00:00:00&lt;/P&gt;&lt;P&gt;which means that only times equal to midnight will be selected.&lt;/P&gt;&lt;P&gt;For all other data types, clearing a SELECT-OPTIONS field means select everything.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I would expect to have S_TIME[] empty (it means select any time).&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1696208784"&gt;Workaround&lt;/H3&gt;&lt;P&gt;Here is a workaround:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a conversion exit ZTIME (two function modules named CONVERSION_EXIT_ZTIME_INPUT and OUTPUT)&lt;/LI&gt;&lt;LI&gt;Create a ZTIME DDIC domain of type TIMS (internal length 6, ABAP type T), output length 8, conversion exit ZTIME&lt;/LI&gt;&lt;LI&gt;Create a ZTIME DDIC data element based on the Z DDIC domain&lt;/LI&gt;&lt;LI&gt;In your program, use DATA ztime_variable TYPE ztime and SELECT-OPTIONS s_time FOR ztime_variable.&lt;/LI&gt;&lt;LI&gt;That's it, there's no more "= 00:00:00" drawback, the whole behavior remains identical to a type T field without ZTIME conversion exit.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The ABAP code below works with ABAP 7.40. If needed, you may convert easily the code to an older ABAP version.&lt;/P&gt;&lt;H4 id="toc-hId-1628777998"&gt;Function module CONVERSION_EXIT_ZTIME_INPUT&lt;/H4&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;FUNCTION conversion_exit_ztime_input
  IMPORTING
    VALUE(input) TYPE any ##ADT_PARAMETER_UNTYPED
  EXPORTING
    VALUE(output) TYPE any ##ADT_PARAMETER_UNTYPED.

  DATA(ls_table_field) = VALUE tabfield(
      tabname   = 'SY'
      fieldname = 'UZEIT' ).
  CALL FUNCTION 'RS_CONV_EX_2_IN'
    EXPORTING
      input_external               = input
      table_field                  = ls_table_field
    IMPORTING
      output_internal              = output
    EXCEPTIONS
      input_not_numerical          = 1
      too_many_decimals            = 2
      more_than_one_sign           = 3
      ill_thousand_separator_dist  = 4
      too_many_digits              = 5
      sign_for_unsigned            = 6
      too_large                    = 7
      too_small                    = 8
      invalid_date_format          = 9
      invalid_date                 = 10
      invalid_time_format          = 11
      invalid_time                 = 12
      invalid_hex_digit            = 13
      unexpected_error             = 14
      invalid_fieldname            = 15
      field_and_descr_incompatible = 16
      input_too_long               = 17
      no_decimals                  = 18
      invalid_float                = 19
      conversion_exit_error        = 20
      OTHERS                       = 21.
  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE E054(00). " Check time format
  ENDIF.
ENDFUNCTION.&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1432264493"&gt;Function module CONVERSION_EXIT_ZTIME_OUTPUT&lt;/H4&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;FUNCTION conversion_exit_ztime_output
  IMPORTING
    VALUE(input) TYPE any ##ADT_PARAMETER_UNTYPED
  EXPORTING
    VALUE(output) TYPE any ##ADT_PARAMETER_UNTYPED.

  TRY.
      DATA(time) = EXACT t( input ).
      output = |{ time TIME = USER }|.
    CATCH cx_root ##CATCH_ALL.
      output = input.
  ENDTRY.
ENDFUNCTION.&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1235750988"&gt;DDIC domain&lt;/H4&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_6-1761225975167.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331630i4A713E71820BFD5D/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_6-1761225975167.png" alt="Sandra_Rossi_6-1761225975167.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1039237483"&gt;DDIC data element&lt;/H4&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_7-1761226102039.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331633iAF34CCBFD6986DD6/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_7-1761226102039.png" alt="Sandra_Rossi_7-1761226102039.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-842723978"&gt;Program with SELECT-OPTIONS&lt;/H4&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT zdemo.
DATA ztime_variable TYPE ztime.
SELECT-OPTIONS s_time FOR ztime_variable.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;After entering an interval then clearing it, there's no more "= 00:00:00", S_TIME is empty:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_4-1761225658541.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331617i5B1D73D0AEEC9A47/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_4-1761225658541.png" alt="Sandra_Rossi_4-1761225658541.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Sandra_Rossi_5-1761225754578.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/331624iD9B93E2432657772/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Sandra_Rossi_5-1761225754578.png" alt="Sandra_Rossi_5-1761225754578.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-517127754"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;You have learnt how to avoid the standard "= 00:00:00" drawback, the whole behavior remains identical to a type T field:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a conversion exit ZTIME (two function modules named CONVERSION_EXIT_ZTIME_INPUT and OUTPUT)&lt;/LI&gt;&lt;LI&gt;Create a ZTIME DDIC domain of type TIMS (internal length 6, ABAP type T), output length 8, conversion exit ZTIME&lt;/LI&gt;&lt;LI&gt;Create a ZTIME DDIC data element based on the ZTIME DDIC domain&lt;/LI&gt;&lt;LI&gt;In your program, use DATA ztime_variable TYPE ztime and SELECT-OPTIONS s_time FOR ztime_variable.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;NB: if you remove the conversion exit from the domain ZTIME, the "buggy" behavior comes back, so the "bug" is with any field of type time without conversion exit.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/alternative-to-quot-select-options-s-time-for-type-t-variable-quot-to-avoid/ba-p/14251816"/>
    <published>2025-10-23T15:30:34.807000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/salvador-blog-posts/integra%C3%A7%C3%B5es-com-apis-via-sproxy-no-cen%C3%A1rio-abap-pi-um-guia-pr%C3%A1tico-para/ba-p/14252975</id>
    <title>Integrações com APIs via SPROXY no Cenário ABAP/PI: Um Guia Prático para Desenvolvedores SAP</title>
    <updated>2025-10-24T22:00:58.518000+02:00</updated>
    <author>
      <name>Leandro_FariasdeVasconcellos</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2165573</uri>
    </author>
    <content>&lt;P&gt;Olá, galera da comunidade SAP da Bahia! Como curador dessa comunidade vibrante aqui no Nordeste, eu sempre fico animado em compartilhar conhecimentos que facilitam o dia a dia de vocês. Hoje, vou falar sobre um tema que é pão com manteiga para quem trabalha com integrações em ambientes SAP: as integrações com APIs usando a transação SPROXY, especialmente no contexto ABAP/PI. Já fiz algumas em projetos para conectar sistemas legados com serviços externos, e acho que pode ajudar muita gente por aí.&lt;/P&gt;&lt;P&gt;Vou explicar passo a passo, de forma descomplicada, como se estivéssemos batendo um papo no café da firma (quem me conhece sabe que não gosto de café, mas serve o papo rsrs). No final, convido vocês a comentarem suas experiências – quem sabe não rola um meetup virtual sobre isso?&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1892753226"&gt;O que é SPROXY e por que usá-lo em ABAP/PI?&lt;/H3&gt;&lt;P&gt;SPROXY é uma transação SAP que permite gerar proxies ABAP a partir de definições de serviços web, como WSDLs ou APIs RESTful. No cenário de Process Integration (PI), que evoluiu para o SAP Process Orchestration (PO), ela é essencial para criar interfaces que consumam ou exponham APIs de forma segura e eficiente.&lt;/P&gt;&lt;P&gt;Imagine que você precisa integrar o seu ERP SAP com uma API externa, tipo um serviço de pagamento ou um CRM nuvem. Em vez de codar tudo do zero, o SPROXY gera classes ABAP prontas para uso, lidando com autenticações, mapeamentos e erros. É uma mão na roda para evitar bugs e acelerar o desenvolvimento.&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="img1.jpeg" style="width: 358px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/332201iFDF771BD03F83FB3/image-dimensions/358x537/is-moderation-mode/true?v=v2" width="358" height="537" role="button" title="img1.jpeg" alt="img1.jpeg" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1696239721"&gt;Passo a Passo: Configurando uma Integração via SPROXY&lt;/H3&gt;&lt;P&gt;Vamos ao que interessa – o hands-on. Assumindo que você tem acesso a um ambiente ABAP/PI, siga esses passos. Eu testei isso em projetos reais, e sempre funciona bem com um pouco de paciência.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Acessar a Transação SPROXY&lt;/STRONG&gt;: Entre no SAP GUI e digite SPROXY na barra de comandos. Isso abre o Proxy Generation Tool. Selecione "Create Proxy" e informe a URL do WSDL da API que você quer integrar. (Dica: certifique-se de que o WSDL está acessível via HTTPS para evitar problemas de segurança.)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Gerar o Proxy ABAP&lt;/STRONG&gt;: O sistema analisa o WSDL e gera classes ABAP automaticamente. Você vai ver opções para namespaces, pacotes de desenvolvimento e tipos de proxy (consumer ou provider). Escolha "Consumer Proxy" se for consumir a API. Aqui, o PI entra em jogo: configure o adapter no Integration Directory para mapear os campos.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Implementar a Lógica no ABAP&lt;/STRONG&gt;: Na SE38, SE80 ou Eclipse, acesse a classe gerada. Crie um método para chamar o proxy, passando parâmetros como autenticação (básica ou OAuth).&amp;nbsp; Exemplo de código simples:&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="img2.png" style="width: 407px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/332202iCF9F9C2BF7D179C3/image-dimensions/407x153/is-moderation-mode/true?v=v2" width="407" height="153" role="button" title="img2.png" alt="img2.png" /&gt;&lt;/span&gt;&lt;BR /&gt;Teste com o debugger para ver se os dados fluem corretamente.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Configurar no PI/PO&lt;/STRONG&gt;: No Integration Builder, crie um cenário com o proxy como sender/receiver. Use adapters como SOAP ou HTTP para conectar à API. Monitore via PIMON para logs e erros.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Testes e Troubleshooting&lt;/STRONG&gt;: Sempre teste com ferramentas como Postman antes de implementar. Problemas comuns? Certificados inválidos ou timeouts – verifique o SOAMANAGER para configurações de endpoint.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="img3.png" style="width: 737px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/332215i4EBC9706A52BB12C/image-dimensions/737x352/is-moderation-mode/true?v=v2" width="737" height="352" role="button" title="img3.png" alt="img3.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;Onde tem a &lt;STRONG&gt;Interface de Serviço&lt;/STRONG&gt;, vai aparecer duas &lt;STRONG&gt;Inboud&lt;/STRONG&gt; e &lt;STRONG&gt;Outboud&lt;/STRONG&gt; (clique com o botão direito do mouse na qual deseja criar o proxy), após isso, é só ativar que o SAP vai gerar todos os objetos.&lt;/P&gt;&lt;H3 id="toc-hId-1499726216"&gt;Vantagens e Desafios no Mundo Real&lt;/H3&gt;&lt;P&gt;Nas implantações que fiz aqui na Bahia, com empresas locais de varejo e manufatura, o SPROXY salvou horas de desenvolvimento. Vantagens: integração nativa com ABAP, suporte a transações assíncronas e escalabilidade via PI. Mas desafios existem – como lidar com APIs REST puras (o SPROXY é mais SOAP-oriented, então use adapters para converter).&lt;/P&gt;&lt;P&gt;Se você está migrando para nuvem, fique de olho: isso é base para entender evoluções como o SAP BTP e Integration Suite, que modernizam tudo com low-code. (Falando nisso, em um próximo post, vou correlacionar isso com as novas integrações no BTP – fiquem ligados!)&lt;/P&gt;&lt;H3 id="toc-hId-1303212711"&gt;Conclusão e Chamada para Ação&lt;/H3&gt;&lt;P&gt;Integrações via SPROXY em ABAP/PI são robustas e essenciais para quem ainda lida com on-premise, mas preparam o terreno para o futuro híbrido. O que vocês acham? Já usaram SPROXY em projetos? Compartilhem nos comentários, e vamos trocar figurinhas na comunidade SAP da Bahia. Se precisar de mais detalhes, me mandem DM!&lt;BR /&gt;&lt;BR /&gt;Segue abaixo um passo a passo simples:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Imagem do WhatsApp de 2025-10-24 à(s) 16.53.42_9d4e1157.jpg" style="width: 298px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/332224i1BDCD12A6335E56D/image-dimensions/298x447/is-moderation-mode/true?v=v2" width="298" height="447" role="button" title="Imagem do WhatsApp de 2025-10-24 à(s) 16.53.42_9d4e1157.jpg" alt="Imagem do WhatsApp de 2025-10-24 à(s) 16.53.42_9d4e1157.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;#SAP #ABAP #PI #Integrações #APIs #SPROXY #ComunidadeSAPBahia&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/salvador-blog-posts/integra%C3%A7%C3%B5es-com-apis-via-sproxy-no-cen%C3%A1rio-abap-pi-um-guia-pr%C3%A1tico-para/ba-p/14252975"/>
    <published>2025-10-24T22:00:58.518000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/enhancing-sap-business-events-with-custom-payload-fields-using-rap/ba-p/14241341</id>
    <title>Enhancing SAP Business Events with Custom Payload Fields using RAP</title>
    <updated>2025-10-27T08:35:20.866000+01:00</updated>
    <author>
      <name>BramhaniG</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/566391</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;When working with SAP Event Mesh and business partner events, you might encounter scenarios where the default event payload contains only basic information, such as the Business Partner ID.&lt;/P&gt;&lt;P&gt;Below topic is configured in /N/IWXBE/OUTBOUND_CFG&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_1-1760254056281.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326022iBFA356AB4B9C44B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_1-1760254056281.png" alt="BramhaniG_1-1760254056281.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Create BP&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_0-1760253917495.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326015i5A44ADDC45F50527/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_0-1760253917495.png" alt="BramhaniG_0-1760253917495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Check /IWXBE/EVENT_MONITOR&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_2-1760254097272.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326025iB1986833367E13CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_2-1760254097272.png" alt="BramhaniG_2-1760254097272.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You see only Business partner ID in the payload.&lt;/P&gt;&lt;P&gt;However, business requirements often demand additional contextual data like first name and last name to be included in the event payload. This blog post demonstrates how to enrich SAP business partner events with custom fields using derived events.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;The Challenge&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;By default, when a Business Partner is created or modified in SAP S/4HANA, the outbound event payload typically contains only the Business Partner number. While this is sufficient for basic integrations, many real-world scenarios require additional information to avoid unnecessary callback requests to the source system.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Solution Overview&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We can leverage SAP's event binding mechanism and receiver function modules to create derived events that include custom fields in the payload. This approach allows us to:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Enhance event payloads with additional business data&lt;/LI&gt;&lt;LI&gt;Reduce the need for subsequent API calls&lt;/LI&gt;&lt;LI&gt;Improve integration performance and efficiency&lt;/LI&gt;&lt;LI&gt;Maintain clean separation between standard and custom logic&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Implementation Steps&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Create Abstract entity&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;define abstract entity Z_ABSTRACT_ENTITY_BP
{
  businesspartner : abap.char(10);
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create root view entity with the field which you want to add in the payload.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Add fields to standard Business Event Payload'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define root view entity Z_CUSTOM_PAYLOAD_BP
  as select from but000
{
  key name_first,
  key name_last
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create behavior definition and behavior implementation class as shown below.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_custom_payload_bp unique;
strict ( 2 );

define behavior for Z_CUSTOM_PAYLOAD_BP //alias &amp;lt;alias_name&amp;gt;
persistent table but000
lock master
authorization master ( instance )
{
  event bpchanged parameter Z_ABSTRACT_ENTITY_BP;
  event bpcreated parameter Z_ABSTRACT_ENTITY_BP;
}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zbp_custom_payload_bp DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF z_custom_payload_bp.
  TYPES: tt_events_change        TYPE TABLE FOR EVENT z_custom_payload_bp~bpchanged,
         tt_events_create TYPE TABLE FOR EVENT z_custom_payload_bp~bpcreated.
  PUBLIC SECTION.
    CLASS-METHODS:raise_bp_changed
      IMPORTING it_events TYPE tt_events_change,
      raise_bp_created IMPORTING it_events TYPE tt_events_create.
ENDCLASS.

CLASS zbp_custom_payload_bp IMPLEMENTATION.
  METHOD raise_bp_changed.
    lcl_event_handler=&amp;gt;on_bp_changed( it_events ).
  ENDMETHOD.
  METHOD raise_bp_created.
    lcl_event_handler=&amp;gt;on_bp_created( it_events ).
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In local types of Behavior implementation class,&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lcl_event_handler DEFINITION FRIENDS zbp_addr_changed.

  PUBLIC SECTION.
    CLASS-METHODS: on_bp_changed IMPORTING it_events TYPE zbp_custom_payload_bp=&amp;gt;tt_events_change,
      on_bp_created IMPORTING it_events TYPE zbp_custom_payload_bp=&amp;gt;tt_events_create.

ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.

  METHOD on_bp_changed.
    RAISE ENTITY EVENT z_custom_payload_bp~bpchanged FROM it_events.
  ENDMETHOD.

  METHOD on_bp_created.
    RAISE ENTITY EVENT z_custom_payload_bp~bpcreated FROM it_events.

  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Create Custom Event Definition&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_3-1760254301651.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326026iF9FEA474CF04A430/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_3-1760254301651.png" alt="BramhaniG_3-1760254301651.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Configure custom event in the outbound bindings&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_10-1760254708777.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326039iE6B5124C1243787C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_10-1760254708777.png" alt="BramhaniG_10-1760254708777.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Create receiver function module&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;This will intercept the standard Business Partner event and raise the derived event with enhanced payload:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_11-1760254756623.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326041i8D6E69B5409F50CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_11-1760254756623.png" alt="BramhaniG_11-1760254756623.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;FUNCTION ztest_bp_receiver_fm.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(EVENT) LIKE  SWETYPECOU-EVENT
*"     VALUE(RECTYPE) LIKE  SWETYPECOU-RECTYPE
*"     VALUE(OBJTYPE) LIKE  SWETYPECOU-OBJTYPE
*"     VALUE(OBJKEY) LIKE  SWEINSTCOU-OBJKEY
*"  EXPORTING
*"     VALUE(REC_ID) LIKE  SWELOG-RECID
*"  TABLES
*"      EVENT_CONTAINER STRUCTURE  SWCONT
*"  EXCEPTIONS
*"      READ_FAILED
*"      CREATE_FAILED
*"----------------------------------------------------------------------
  SELECT SINGLE name_first,name_last FROM but000 WHERE partner = @objkey INTO (ls_bp).
  IF sy-subrc IS INITIAL.
    zbp_custom_payload_bp=&amp;gt;raise_bp_changed( it_events = VALUE #( (
                                                         name_first = ls_bp-name_first
                                                         name_last = ls_bp-name_last
                                                         %param = VALUE #( businesspartner = objkey )
                                                         ) ) ).

  ENDIF.

ENDFUNCTION.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 7:&lt;/STRONG&gt;&lt;STRONG&gt; Register Event Linkage&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Link the standard Business Partner event to your receiver function module using transaction SWE2:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Execute transaction&amp;nbsp;SWE2&lt;/LI&gt;&lt;LI&gt;Create a new entry with:&lt;UL&gt;&lt;LI&gt;Object Type: Business Partner object type (e.g.,&amp;nbsp;BUS1006)&lt;/LI&gt;&lt;LI&gt;Event: The standard event (e.g.,&amp;nbsp;CHANGED)&lt;/LI&gt;&lt;LI&gt;Receiver Type: Function Module&lt;/LI&gt;&lt;LI&gt;Receiver Function Module:&amp;nbsp;ZTEST_BP_RECEIVER_FM&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Save the configuration&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_13-1760254963757.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326050i3922F88A75380D5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_13-1760254963757.png" alt="BramhaniG_13-1760254963757.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_15-1760254977419.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326052iA541027DBD716E9C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_15-1760254977419.png" alt="BramhaniG_15-1760254977419.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Test the Implementation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now it's time to verify that everything works as expected:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Modify an existing Business Partner (change any field)&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_16-1760255007835.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326054iF2B9C5CBC9FCE24E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_16-1760255007835.png" alt="BramhaniG_16-1760255007835.png" /&gt;&lt;/span&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;2. Navigate to&amp;nbsp;/N/IWXBE/EVENT_MONITOR&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Locate your derived event in the event list&lt;/LI&gt;&lt;LI&gt;Examine the payload&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BramhaniG_17-1760255046319.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/326055iE8F0E8CC05C4353B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="BramhaniG_17-1760255046319.png" alt="BramhaniG_17-1760255046319.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You should now see an enriched payload containing:&lt;/P&gt;&lt;P&gt;json&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; {

 "name_first": "Derived events",

 "name_last": "Demo",

 "businesspartner": "0001000260"

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Important Note for BP Creation Events:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;If you want to trigger the derived event at the time of Business Partner creation, you need to add an additional entry in SWE2 for the &lt;CODE&gt;CREATED&lt;/CODE&gt; event. You have two options:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Option 1: Same Payload for Both Events&amp;nbsp;&lt;/STRONG&gt;If the payload structure is identical for both creation and modification events, you can use the same receiver function module for both events:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create an entry in SWE2 for event &lt;CODE&gt;CREATED&lt;/CODE&gt; pointing to &lt;CODE&gt;ZTEST_BP_RECEIVER_FM&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;Create an entry in SWE2 for event &lt;CODE&gt;CHANGED&lt;/CODE&gt; pointing to &lt;CODE&gt;ZTEST_BP_RECEIVER_FM&lt;/CODE&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Option 2: Different Payloads&lt;/STRONG&gt;If you require different payload structures for creation and modification events, perform the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create a separate receiver function module (e.g., &lt;CODE&gt;ZTEST_BP_RECEIVER_CREATE_FM&lt;/CODE&gt;) for the creation event&lt;/LI&gt;&lt;LI&gt;Implement the custom logic for the creation payload&lt;/LI&gt;&lt;LI&gt;Add a separate entry in SWE2 for event &lt;CODE&gt;CREATED&lt;/CODE&gt; pointing to the new function module&lt;/LI&gt;&lt;LI&gt;Keep the existing entry for &lt;CODE&gt;CHANGED&lt;/CODE&gt; event pointing to &lt;CODE&gt;ZTEST_BP_RECEIVER_FM&lt;/CODE&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best Practices&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Always handle database read errors gracefully&lt;/LI&gt;&lt;LI&gt;Consider performance implications when querying large datasets&lt;/LI&gt;&lt;LI&gt;Document your custom events clearly for API consumers&lt;/LI&gt;&lt;LI&gt;Use meaningful naming conventions for custom events and function modules&lt;/LI&gt;&lt;LI&gt;Test thoroughly in development before deploying to production&lt;/LI&gt;&lt;LI&gt;Monitor event processing to ensure reliability&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Derived events provide a powerful mechanism to enhance standard SAP events with custom business data. By following the steps outlined in this blog post, you can significantly improve the value of your event-driven integrations without modifying standard SAP objects.&lt;/P&gt;&lt;P&gt;This approach maintains clean separation between standard and custom code while providing the flexibility needed for real-world integration scenarios. Whether you're building microservices, integrating with external systems, or creating event-driven architectures, enriched event payloads will help you build more efficient and maintainable solutions.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Additional Resources&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/step-by-step-process-to-publish-standard-business-events-from-s-4-hana-to/ba-p/13650346" target="_self"&gt;Steps to publish business events&lt;/A&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;P&gt;&lt;I&gt;Have you implemented derived events in your SAP landscape? Share your experiences and questions in the comments below!&lt;/I&gt;&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/Event-driven+architecture/pd-p/06cc42a5-95e4-463d-bbc7-1defec8b2d3f" class="lia-product-mention" data-product="1274-1"&gt;Event-driven architecture&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Event+Mesh/pd-p/73554900100800000765" class="lia-product-mention" data-product="594-1"&gt;SAP Event Mesh&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/enhancing-sap-business-events-with-custom-payload-fields-using-rap/ba-p/14241341"/>
    <published>2025-10-27T08:35:20.866000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-assign-roles-automatically-according-to-cr-type/ba-p/14254207</id>
    <title>SAP MDG: Assign Roles Automatically According to CR Type</title>
    <updated>2025-10-27T12:09:32.639000+01:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi&amp;nbsp;SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;This blog does not include execution screenshots.&lt;STRONG&gt;&lt;BR /&gt;Note 02:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;STRONG&gt;&lt;BR /&gt;Note 03:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;There are several ways; this blog is written about one of them.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Create one custom class &amp;amp; redefine the standard class (&lt;STRONG&gt;CL_MDG_BS_ECC_HANDLER&lt;/STRONG&gt;)&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Method Responsible:&amp;nbsp;&lt;/STRONG&gt;IF_MDG_BS_BP_ACCESS_HANDLER~DERIVE_DATA&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    DATA : lv_crtype      TYPE usmd_crequest_type,
           lt_bp_role     TYPE TABLE OF /mdgbp/_s_bp_pp_bp_role,
           ls_bp_role     TYPE  /mdgbp/_s_bp_pp_bp_role.

    CONSTANTS lc_crtype TYPE string VALUE 'CRTYPE'.

    DATA(obj_param) = cl_FPM_factory=&amp;gt;get_instance( )-&amp;gt;mo_app_parameter.

    CALL METHOD obj_param-&amp;gt;get_value
      EXPORTING
        iv_key   = lc_crtype
      IMPORTING
        ev_value = lv_crtype.

    READ TABLE gt_bproot_task ASSIGNING FIELD-SYMBOL(&amp;lt;ls_bproot_task&amp;gt;) INDEX 1.

    IF &amp;lt;ls_bproot_task&amp;gt; IS ASSIGNED.
      ls_bp_role-bp_header = &amp;lt;ls_bproot_task&amp;gt;-bp_id.

      CASE lv_crtype.
        WHEN 'ZMDGS01'.
          ls_bp_role-bp_rol_id ='FLVN01'.
          ls_bp_role-rol_vfrom = sy-datum.
          ls_bp_role-rol_vto = '99991231'.
          APPEND ls_bp_role TO lt_bp_role.
          ls_bp_role-bp_rol_id ='FLVN00'.
          ls_bp_role-rol_vfrom = sy-datum.
          ls_bp_role-rol_vto = '99991231'.
          APPEND ls_bp_role TO lt_bp_role.
        WHEN 'ZMDGS02'.
          ls_bp_role-bp_rol_id ='FLVN01'.
          ls_bp_role-rol_vfrom = sy-datum.
          ls_bp_role-rol_vto = '99991231'.
          APPEND ls_bp_role TO lt_bp_role.
      ENDCASE.

    ENDIF.

    io_write_data-&amp;gt;write_data(
      i_entity     = 'BP_ROLE'
      it_data      = lt_bp_role ).

    me-&amp;gt;if_mdg_bs_bp_access_handler~buffer_derived_data(
      io_model        =  io_model
      iv_entity       =  'BP_ROLE'
      it_data_ins     =  lt_bp_role
    ).
    .&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" target="_blank"&gt;SAP S/4HANA&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" target="_blank"&gt;SAP Master Data Governance&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" target="_blank"&gt;ABAP Development&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-assign-roles-automatically-according-to-cr-type/ba-p/14254207"/>
    <published>2025-10-27T12:09:32.639000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/joinville-blog-posts/guia-de-assinatura-pkcs7-no-abap-bradesco-e-etc/ba-p/14254541</id>
    <title>Guia de assinatura PKCS7 no ABAP (bradesco e etc)</title>
    <updated>2025-10-27T19:37:55.460000+01:00</updated>
    <author>
      <name>lucasabap</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2066736</uri>
    </author>
    <content>&lt;P&gt;Olá comunidade de Joinville, me chamo Lucas B, sou &lt;STRONG&gt;ABAP&lt;/STRONG&gt; e também sou um dos curadores da comunidade de &lt;STRONG&gt;JLLE&lt;/STRONG&gt;, hoje vou partilhar o passo a passo de como trazer a tecnologia de assinatura digital utilizando o padrão &lt;STRONG&gt;PKCS#7&lt;/STRONG&gt; com o algoritmo de assinatura com &lt;STRONG&gt;SHA256&lt;/STRONG&gt; pra dentro do nosso &lt;STRONG&gt;ABAP&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Essa tecnologia era, e ainda é bastante utilizada pelos bancos para garantir a segurança por meio de certificados. Hoje em dia, a maioria já migrou para o &lt;STRONG&gt;mTLS&lt;/STRONG&gt;; um desses casos é o &lt;STRONG&gt;Bradesco&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Alguns podem achar impossível, mas com &lt;STRONG&gt;ABAP&lt;/STRONG&gt; tudo é possível &lt;span class="lia-unicode-emoji" title=":grinning_face_with_sweat:"&gt;😅&lt;/span&gt; (basta ter tempo e paciência suficiente)...&lt;/P&gt;&lt;P&gt;Contextualizando um pouco do problema, há 2 anos atrás estávamos portando as &lt;STRONG&gt;APIs&lt;/STRONG&gt; do &lt;STRONG&gt;Bradesco&lt;/STRONG&gt; pra dentro do &lt;STRONG&gt;SAP&lt;/STRONG&gt;, previamente utilizávamos um &lt;STRONG&gt;proxy&lt;/STRONG&gt; em &lt;STRONG&gt;Python&lt;/STRONG&gt; pra realizar essas comunicações via API que acabava sendo a única opção viável, pois ate então não tínhamos conhecimento de como realizar a criptografia com &lt;STRONG&gt;PKCS#7&lt;/STRONG&gt; dentro do &lt;STRONG&gt;SAP&lt;/STRONG&gt;, na época que fui atrás ainda tinha 1 aninho de &lt;STRONG&gt;ABAP&lt;/STRONG&gt;, passei um bom tempo até acertar &lt;span class="lia-unicode-emoji" title=":grinning_squinting_face:"&gt;😆&lt;/span&gt;. Hoje em dia o &lt;STRONG&gt;Bradesco&lt;/STRONG&gt; atualizou a infraestrutura das &lt;STRONG&gt;APIs&lt;/STRONG&gt; dele e utiliza o padrão de mercado, dito isso, não vamos conseguir replicar 100% a chamada na API, mas vamos conseguir gerar o que precisaria se fosse o caso.&lt;BR /&gt;Hoje em dia ainda existem bancos que utilizam essa tecnologia &lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;.&lt;/P&gt;&lt;P&gt;Agora vamos por a mão na massa, requerimentos:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Certificado A1 &lt;STRONG&gt;.pse&lt;/STRONG&gt; instalado em uma pastinha na &lt;STRONG&gt;STRUST&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;Client ID / Client Key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Ao ver o manual, o processo segue primeiramente gerando o payload do body de autenticação, enviando os campos:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;AUD&lt;/STRONG&gt;: Endpoint que vamos chamar.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SUB&lt;/STRONG&gt;: Client ID / Client Key&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;IAT&lt;/STRONG&gt;: Timestamp de quando o token for criado&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;EXP&lt;/STRONG&gt;: Timestamp de quando o token for expirar&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;JTI&lt;/STRONG&gt;: Timestamp atual em MS&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;VER&lt;/STRONG&gt;: Versão da API (no caso preenchíamos fixo 1.1 pro Bradesco).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;(geramos o payload em cima de uma estrutura, utilizando a classe de &lt;STRONG&gt;JSON&lt;/STRONG&gt; standard do &lt;STRONG&gt;ABAP&lt;/STRONG&gt;)&lt;/P&gt;&lt;P&gt;Os headers enviávamos fixo o seguinte:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{"alg":"RS256","typ":"JWT"}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Dito isso, temos o payload e os headers, os dois em variáveis de string codificados em &lt;STRONG&gt;JSON&lt;/STRONG&gt;, o manual instruí a gente a codificar ambos em &lt;STRONG&gt;Base64&lt;/STRONG&gt; e depois concatenar o conteúdo, no final vamos ter uma string com o seguinte:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{headers_base64}.{payload_base64}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Podemos codificar as strings para &lt;STRONG&gt;Base64&lt;/STRONG&gt; utilizando o método &lt;STRONG&gt;&lt;U&gt;ENCODE_BASE64&lt;/U&gt;&lt;/STRONG&gt; da classe &lt;STRONG&gt;&lt;U&gt;CL_HTTP_UTILITY&lt;/U&gt;&lt;/STRONG&gt;, só temos que ter um pouco de cuidado que ele acaba codificando para &lt;STRONG&gt;Base64&lt;/STRONG&gt; o conteúdo vazio restante da memória alocada para aquela string, podemos contornar isso fazendo um replace de &lt;STRONG&gt;&lt;U&gt;==&lt;/U&gt; &lt;/STRONG&gt;na string por vazio, assim removendo o "&lt;EM&gt;restinho&lt;/EM&gt;" que fica do &lt;STRONG&gt;Base64&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Agora que vem a parte legal, tendo o nosso &lt;STRONG&gt;&lt;U&gt;{headers_base64}.{payload_base64}&lt;/U&gt;&lt;/STRONG&gt; em uma variável, podemos partir para assinatura com o certificado, e isso vamos tornar possível com a nossa querida função &lt;STRONG&gt;&lt;U&gt;SSF_KRN_SIGN&lt;/U&gt;&lt;/STRONG&gt;, que fica junto com as funções do &lt;STRONG&gt;SSF&lt;/STRONG&gt; muito utilizadas no mundinho de certificados da SAP. Antes de mostrar o passo a passo, vamos entender os parâmetros da função:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; importing:
	SSFTOOLKIT - pra ser sincero, acredito que seja meio que a biblioteca que 
				vai usar por debaixo dos panos para realizar a criptografia,
				enviamos fixo SAPSECULIB	
	STR_FORMAT - aqui indicamos qual tipo de PKCS vamos utilizar, por mais que
				vamos utilizar PKCS#7 por algum motivo a funcao representa tal
				tecnologia como 'PKCS1-V1.5'
	B_INC_CERTS - se vamos incluir o certificado dentro da assinatura, nao sei
				dizer o que exatamente faz debaixo dos panos, mas eh necessario 
	B_DETACHED - assinatura digital sem a carga pra assinar, no nosso caso
				vamos enviar ''
	B_INENC - nao sei exatamente o que faz pra ser sincero, descricao do campo diz
			"Code input data or not?", enviamos vazio
	IO_SPEC - deixamos o padrao da funcao 'T', para utilizar as tabelas internas
			enviando como F ele retorna o nosso conteudo desejado via arquivo
	OSTR_INPUT_DATA_L - aqui passamos o tamanho do nosso payload a ser assinado
						lembrando que aqui vamos passar um SOLIX, logo podemos
						pegar o tamanho direto na funcao que converte pra SOLIX
	STR_HASHALG - algoritmo de hash, vamos enviar SHA256, utilizado pelo banco
exporting:
	OSTR_SIGNED_DATA_L - tamanho da assinatura, nao utilizamos
	CRC - codigo de retorno, podemos tratar mas no meu caso os erros possiveis
		sao tratados anteriormente
tables:
	OSTR_INPUT_DATA - payload de input (em solix) que vamos assinar
	SIGNER - dados de quem vai assinar, inclui o certificado que vamos utilizar
	OSTR_SIGNED_DATA - a preciosa assinatura em binario&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Dito isso, vamos a construção dos parâmetros que não&amp;nbsp;é fixo, começaremos pela tabela &lt;STRONG&gt;&lt;U&gt;SIGNER&lt;/U&gt;&lt;/STRONG&gt;, essa tabela contem os seguintes campos:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;U&gt;ID&lt;/U&gt;&lt;/STRONG&gt;, preencheremos com o sujeito do certificado.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;U&gt;PROFILE&lt;/U&gt;&lt;/STRONG&gt;, iremos preencher com o nome do arquivo do &lt;STRONG&gt;PSE&lt;/STRONG&gt;, caso seja um &lt;STRONG&gt;SSL Client&lt;/STRONG&gt; ira seguir o seguinte padrão: &lt;STRONG&gt;&lt;U&gt;SAPSSL{codigo_da_pasta}.pse&lt;/U&gt;&lt;/STRONG&gt;, podemos utilizar outros tipos sem ser o &lt;STRONG&gt;SSL Client&lt;/STRONG&gt;, mas tenha em mente que o padrão de nome de arquivo varia de um pra outro.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;U&gt;PASSWORD&lt;/U&gt;&lt;/STRONG&gt;, a senha do &lt;STRONG&gt;PSE&lt;/STRONG&gt;. (necessário passar a senha porque nesse tipo de assinatura trabalhamos diretamente com a chave privada, ao utilizar o &lt;STRONG&gt;mTLS&lt;/STRONG&gt; do cliente &lt;STRONG&gt;HTTP&lt;/STRONG&gt; padrão do &lt;STRONG&gt;SAP&lt;/STRONG&gt; por exemplo, só passamos o &lt;STRONG&gt;ID&lt;/STRONG&gt; da &lt;STRONG&gt;STRUST&lt;/STRONG&gt; e o&amp;nbsp;&lt;STRONG&gt;SAP&lt;/STRONG&gt;&amp;nbsp;já resolve tudo na camada de rede).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Para conseguir o sujeito do certificado dinamicamente podemos utilizar novamente as funções do pacote &lt;STRONG&gt;SSF&lt;/STRONG&gt;, utilizando primeiramente a função &lt;U&gt;&lt;STRONG&gt;SSFC_GET_OWNCERTIFICATE&lt;/STRONG&gt; &lt;/U&gt;para obter o certificado completo em binário e depois &lt;U&gt;&lt;STRONG&gt;SSFC_PARSE_CERTIFICATE&lt;/STRONG&gt;&lt;/U&gt; para decifrar o sujeito do certificado. (tenha em mente que aqui também precisamos do nome de arquivo e senha).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;call function 'SSFC_GET_OWNCERTIFICATE'
	exporting PROFILE = IV_PSE
			  PROFILEPW = IV_PSEPWD
	importing CERTIFICATE = LV_RAW_CERTIFICATE
	exceptions  SSF_KRN_ERROR = 1
				SSF_KRN_NOMEMORY = 2
				SSF_KRN_NOSSFLIB = 3
				SSF_KRN_INVALID_PAR = 4
				SSF_KRN_NOCERTIFICATE = 5
				others = 6.
				
call function 'SSFC_PARSE_CERTIFICATE'
	exporting CERTIFICATE = LV_RAW_CERTIFICATE
	importing SUBJECT = RV_SUBJECT
	exceptions  SSF_KRN_ERROR = 1
				SSF_KRN_NOMEMORY = 2
				SSF_KRN_NOSSFLIB = 3
				SSF_KRN_INVALID_PAR = 4
				others = 5.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Dito isso, temos a tabela de &lt;STRONG&gt;&lt;U&gt;SIGNER&lt;/U&gt;&lt;/STRONG&gt; pronta, agora iremos partir pro preenchimento da &lt;U&gt;&lt;STRONG&gt;OSTR_INPUT_DATA&lt;/STRONG&gt;&lt;/U&gt; e a variável de input &lt;U&gt;&lt;STRONG&gt;OSTR_INPUT_DATA_L&lt;/STRONG&gt;&lt;/U&gt;, no meu caso utilizei o método &lt;U&gt;&lt;STRONG&gt;STRING_TO_SOLIX&lt;/STRONG&gt;&lt;/U&gt; da classe &lt;U&gt;&lt;STRONG&gt;CL_BCS_CONVERT&lt;/STRONG&gt;&lt;/U&gt;, tenha em mente que esse método talvez não esteja presente em versões mais antigas, caso seja o seu caso, um work-around seria so copiar o método de um ambiente mais atualizado...&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CL_BCS_CONVERT=&amp;gt;STRING_TO_SOLIX( exporting IV_STRING = IV_TOSIGN
								 importing EV_SIZE = LV_BINSIZE
										   ET_SOLIX = LT_TOSIGN_BIN ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Nesse caso, &lt;U&gt;&lt;STRONG&gt;IV_TO_SIGN&lt;/STRONG&gt;&lt;/U&gt; representa nossa variável com o &lt;U&gt;&lt;STRONG&gt;{headers_base64}.{payload_base64}&lt;/STRONG&gt;&lt;/U&gt;, &lt;U&gt;&lt;STRONG&gt;LV_BIN_SIZE&lt;/STRONG&gt;&lt;/U&gt; vamos passar no parâmetro &lt;U&gt;&lt;STRONG&gt;OSTR_INPUT_DATA_L&lt;/STRONG&gt;&lt;/U&gt;, e &lt;U&gt;&lt;STRONG&gt;LT_TOSIGN_BIN&lt;/STRONG&gt;&lt;/U&gt; vai ser o parâmetro &lt;U&gt;&lt;STRONG&gt;OSTR_INPUT_DATA&lt;/STRONG&gt;&lt;/U&gt;. Tendo isso, temos tudo o que precisa para realizar a assinatura, sendo assim chamamos a função.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;call function 'SSF_KRN_SIGN'
  exporting  SSFTOOLKIT                   = 'SAPSECULIB'
             STR_FORMAT                   = 'PKCS1-V1.5'
             B_INC_CERTS                  = 'X'
             B_DETACHED                   = ''
             B_INENC                      = ''
             OSTR_INPUT_DATA_L            = IV_FILESIZE
             STR_HASHALG                  = 'SHA256'
  importing  OSTR_SIGNED_DATA_L           = LV_SIGNED_DATA_L
             CRC                          = LV_SIG_CRC
  tables     OSTR_INPUT_DATA              = LT_SIG_OSTR_INPUT_DATA
             SIGNER                       = LT_SIG_SIGNER
             OSTR_SIGNED_DATA             = LT_SIGNED_BIN
  exceptions others                       = 11&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;A função ira retornar o conteúdo assinado em binário (&lt;STRONG&gt;SOLIX&lt;/STRONG&gt;), podemos converter ela para uma&amp;nbsp;&lt;STRONG&gt;XSTRING&amp;nbsp;&lt;/STRONG&gt;e depois para string utilizando os métodos da classe &lt;U&gt;&lt;STRONG&gt;CL_BCS_CONVERT&lt;/STRONG&gt;&lt;/U&gt;. De acordo com o manual do Bradesco, tendo a assinatura em binário em mãos, devemos criptografar em&amp;nbsp;&lt;STRONG&gt;Base64&lt;/STRONG&gt;assim utilizando os métodos anteriores que utilizamos no começo do processo, &lt;U&gt;&lt;STRONG&gt;ENCODE_BASE64&amp;nbsp;&lt;/STRONG&gt;&lt;/U&gt;da classe &lt;U&gt;&lt;STRONG&gt;CL_HTTP_UTILITY&lt;/STRONG&gt;&lt;/U&gt;.&lt;/P&gt;&lt;P&gt;Tendo a variável de conteúdo para assinar mais a variável com a assinatura, juntamos as duas concatenadas separadas por um &lt;U&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/U&gt;, essa vai ser nossa variável de payload. Devemos novamente aplicar um filtro na codificação &lt;STRONG&gt;Base64&amp;nbsp;&lt;/STRONG&gt;para remover os "&lt;EM&gt;restinhos&lt;/EM&gt;" da string, exemplo:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;concatenate LV_TOSIGN LV_SIGNED into LV_PAYLOAD separated by '.'.

replace all occurences of 'AAAAA' in LV_PAYLOAD with ''.
replace all occurences of '==' in LV_PAYLOAD with ''.
replace all occurences of 'A=' in LV_PAYLOAD with ''.
replace all occurences of '+' in LV_PAYLOAD with '-'.
replace all occurences of '/' in LV_PAYLOAD with '_'.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;E depois de tanto esforço, temos o nosso conteúdo de payload pronto para ser enviado para a &lt;STRONG&gt;API&lt;/STRONG&gt;, esse processo era utilizado para cada requisição na &lt;STRONG&gt;API&lt;/STRONG&gt; do &lt;STRONG&gt;Bradesco&lt;/STRONG&gt;, nesse caso mostrei como faz para a autenticação, mas segue com as mesmas ferramentas para as demais requisições.&lt;/P&gt;&lt;P&gt;Caso tenha uma dúvida só deixar um comentário, vejo vocês no SIT JLLE &lt;span class="lia-unicode-emoji" title=":grinning_face_with_smiling_eyes:"&gt;😄&lt;/span&gt;&amp;nbsp;&lt;BR /&gt;&lt;A href="https://community.sap.com/t5/joinville-events/sap-inside-track-joinville-2026/ev-p/14239688" target="_self"&gt;SIT Joinville 2026&lt;/A&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/joinville-blog-posts/guia-de-assinatura-pkcs7-no-abap-bradesco-e-etc/ba-p/14254541"/>
    <published>2025-10-27T19:37:55.460000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/generate-jwt-json-web-token-with-rsa-sha256-in-sap-abap-for-secure-api/ba-p/14253125</id>
    <title>Generate JWT (JSON Web Token) with RSA SHA256 in SAP ABAP for Secure API Integrations</title>
    <updated>2025-10-28T11:56:58.381000+01:00</updated>
    <author>
      <name>HimanshuJoshii</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2224660</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1763692455"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;In modern API integrations, security is critical. JWT (JSON Web Token) with RSA SHA256 is widely used for secure authentication. While most implementations rely on SAP CPI, this blog demonstrates how to generate JWT directly in SAP ABAP for secure banking integrations.&lt;/P&gt;&lt;H4 id="toc-hId-1825344388"&gt;Why JWT + RSA SHA256?&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Token-based authentication for APIs.&lt;/LI&gt;&lt;LI&gt;Asymmetric encryption ensures high security.&lt;/LI&gt;&lt;LI&gt;Ideal for banking and sensitive data exchange.&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1499748164"&gt;What is JWT?&lt;/H3&gt;&lt;P&gt;JWT stands for json web token, used for securely transmitting information between parties as a JSON object.&lt;/P&gt;&lt;P&gt;It consists of three parts:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Header → Specifies algorithm and token type&lt;/LI&gt;&lt;LI&gt;Payload → Contains claims (data like issuer, audience, expiration)&lt;/LI&gt;&lt;LI&gt;Signature → Verifies integrity and authenticity&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1303234659"&gt;What is RSA SHA256?&lt;/H3&gt;&lt;P&gt;RSA SHA256 is a cryptographic algorithm that combines:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;RSA&lt;/STRONG&gt; → Asymmetric encryption using a public/private key pair&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SHA256&lt;/STRONG&gt; → Secure hashing algorithm for creating a unique message digest&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Together, they ensure that the JWT signature is &lt;STRONG&gt;tamper-proof&lt;/STRONG&gt; and can only be verified by the corresponding public key.&lt;/P&gt;&lt;H3 id="toc-hId-1106721154"&gt;&lt;STRONG&gt;Challenges in SAP ABAP&lt;/STRONG&gt;&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;No Standard JWT Library in ABAP&lt;/LI&gt;&lt;LI&gt;RSA SHA256 Signing&lt;/LI&gt;&lt;LI&gt;Key Management&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-910207649"&gt;Step-by-Step Implementation&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Step 1:&amp;nbsp;Generate RSA Key Pair and Import into STRUST&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Use &lt;STRONG&gt;OpenSSL&lt;/STRONG&gt; or similar tool to generate a public/private key pair.&lt;/LI&gt;&lt;LI&gt;Import the private key into a custom PSE (e.g., &lt;CODE&gt;JWT_PK&lt;/CODE&gt;) in &lt;STRONG&gt;STRUST&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Upload required certificates (root, intermediate, signed).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create JWT Header and Payload in ABAP&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;JWT consists of Header, Payload and Signature.&lt;BR /&gt;&lt;!--     StartFragment      --&gt;&lt;/LI&gt;&lt;LI&gt;Header&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;{
"alg":"RS256",
"typ":"JWT"
}&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;Payload&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;{
     "iss":        "Test-Bank",
     "jti":        "b98f361e",
     "aud":        "Banking",
     "iat":        lv_iat,
     "exp":        lv_exp,
     "sub":        "Act",
     "payload":    {
                      "clientReferenceId": "Test"
                      }
                      }​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;Step 3: Base64URL Encode Header and Payload&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Use &lt;CODE&gt;/UI2/CL_JSON&lt;/CODE&gt; for JSON serialization.&lt;/LI&gt;&lt;LI&gt;Use &lt;CODE&gt;CL_HTTP_UTILITY=&amp;gt;ENCODE_BASE64&lt;/CODE&gt; for encoding, then replace &lt;CODE&gt;+&lt;/CODE&gt; and &lt;CODE&gt;/&lt;/CODE&gt; with &lt;CODE&gt;-&lt;/CODE&gt; and &lt;CODE&gt;_&lt;/CODE&gt; for Base64URL.&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  CALL FUNCTION 'SCMS_BASE64_ENCODE_STR'
    EXPORTING
      input  = lv_header_x
    IMPORTING
      output = lv_header_b64.

  CALL FUNCTION 'SCMS_BASE64_ENCODE_STR'
    EXPORTING
      input  = lv_payload_x
    IMPORTING
      output = lv_payload_b64.

  REPLACE ALL OCCURRENCES OF '+' IN lv_header_b64 WITH '-'.
  REPLACE ALL OCCURRENCES OF '/' IN lv_header_b64 WITH '_'.
  REPLACE ALL OCCURRENCES OF '=' IN lv_header_b64 WITH ''.

  REPLACE ALL OCCURRENCES OF '+' IN lv_payload_b64 WITH '-'.
  REPLACE ALL OCCURRENCES OF '/' IN lv_payload_b64 WITH '_'.
  REPLACE ALL OCCURRENCES OF '=' IN lv_payload_b64 WITH ''.

  lv_jwt_input = |{ lv_header_b64 }.{ lv_payload_b64 }|.​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Sign Using RSA SHA256&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Since ABAP does not have a direct JWT signing method, we use SAP Secure Store and Forward (SSF) Kernel function module &lt;CODE&gt;SSFW_KRN_SIGN&lt;/CODE&gt; with the private key stored in STRUST.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*--------------------------------------------------------------------*
* Fetch PSE details
*--------------------------------------------------------------------*
SELECT SINGLE * 
  FROM ssf_pse_h INTO (ls_ssf_pse)
  WHERE filename EQ 'SAPJWT_PK100.pse'.  "PSE filename stored in strust

ls_signer-id      = ls_ssf_pse-id.
ls_signer-profile = ls_ssf_pse-filename.
APPEND ls_signer TO lt_signer.

*--------------------------------------------------------------------*
* Sign header.payload using RSA SHA256
*--------------------------------------------------------------------*
CALL FUNCTION 'SSFW_KRN_SIGN'
  EXPORTING
    str_format       = 'PKCS1-V1.5'
    str_hashalg      = 'SHA256'
    str_chainfmt     = 'X509v3'
    ostr_input_data  = lv_jwt_input_x
  IMPORTING
    ostr_signed_data = lv_signature_x
    str_signer_name  = lv_signer_name
    ostr_chain_data  = lv_chain_data
    crc              = lv_crc
  TABLES
    signer           = lt_signer
  EXCEPTIONS
    OTHERS           = 1.

IF sy-subrc &amp;lt;&amp;gt; 0.
  WRITE: / 'Error signing JWT.'.
  EXIT.
ENDIF.

*--------------------------------------------------------------------*
* Base64URL encode the signature
*--------------------------------------------------------------------*
CALL FUNCTION 'SCMS_BASE64_ENCODE_STR'
  EXPORTING
    input  = lv_signature_x
  IMPORTING
    output = lv_signature_b64.

REPLACE ALL OCCURRENCES OF '+' IN lv_signature_b64 WITH '-'.
REPLACE ALL OCCURRENCES OF '/' IN lv_signature_b64 WITH '_'.
REPLACE ALL OCCURRENCES OF '=' IN lv_signature_b64 WITH ''.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Combine Header.Payload.Signature&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Final JWT format:&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;Base64URL(header) + '.' + Base64URL(payload) + '.' + Base64URL(signature)&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-713694144"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;Generating JWT with RSA SHA256 in SAP ABAP is not straightforward because ABAP lacks native JWT libraries. However, by leveraging STRUST for key management and the &lt;CODE&gt;SSFW_KRN_SIGN&lt;/CODE&gt; function for RSA signing, you can implement secure API authentication directly in SAP. This approach is ideal for banking and other high-security integrations, ensuring data integrity and compliance without relying on external tools.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/generate-jwt-json-web-token-with-rsa-sha256-in-sap-abap-for-secure-api/ba-p/14253125"/>
    <published>2025-10-28T11:56:58.381000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/outbound-integration-from-sap-btp-abap-to-sap-s-4hana-cloud-via-service/ba-p/14255149</id>
    <title>Outbound Integration from SAP BTP, ABAP to SAP S/4HANA Cloud via Service Consumption Model</title>
    <updated>2025-10-28T13:17:53.803000+01:00</updated>
    <author>
      <name>Pramathesh_t_s</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1455465</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;This blog post will describe the Service Consumption Model for OData. I will describe its benefits, provide a description of the model, take a look at the OData Client Proxy at runtime and also dive into the ABAP cross trace integration as well.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;If you want to receive or send data to an OData V2 or V4 service within SAP BTP, ABAP Environment or SAP S/4HANA ABAP Environment, you can use the "Service Consumption Model" for OData. As of release 2311, it is possible to&amp;nbsp;consume Complex Types, Complex Collection, Action (bound) and Functions (bound).&amp;nbsp;Of course, the consumption of Entity Types and Entity Sets is also possible.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Use case&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;If you have an SAP BTP, ABAP Environment or SAP S/4HANA Cloud, ABAP Environment system you can use the Service Consumption Model for OData. From here you can connect to a Cloud or an on-premises system.&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_0-1761650653791.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333359iE20CBBCBB983B936/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Pramathesh_t_s_0-1761650653791.png" alt="Pramathesh_t_s_0-1761650653791.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In my scenario I am consuming the &lt;EM&gt;API - API_WAREHOUSE_ORDER_TASK_2&lt;/EM&gt; from another Cloud system. A call to the Entity Set&amp;nbsp;&lt;EM&gt;Warehouse Task&lt;/EM&gt;&amp;nbsp;returns the following data:&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_0-1761650980033.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333361i9FE0B730525AE6E9/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_0-1761650980033.png" alt="Pramathesh_t_s_0-1761650980033.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Service Consumption Model for OData&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Select&amp;nbsp;&lt;EM&gt;File&lt;/EM&gt;&amp;nbsp;--&amp;gt;&amp;nbsp;&amp;nbsp;&lt;EM&gt;New&lt;/EM&gt;&amp;nbsp;--&amp;gt;&amp;nbsp;&lt;EM&gt;Service Consumption Model&lt;/EM&gt;&amp;nbsp;and choose&amp;nbsp;&lt;EM&gt;OData&lt;/EM&gt;&amp;nbsp;as&amp;nbsp;&lt;EM&gt;Consumption mode&lt;/EM&gt;&amp;nbsp;in ADT.&lt;/P&gt;&lt;P&gt;The consumption system requires a representation of the remote service. This knowledge is used to create the URL, write and read the JSON form the HTTP requests and responses. Therefore, the wizard needs the EDMX file (a service metadata document that describes the data model exposed by the service as an HTTP endpoint). OData uses EDMX as the format for this description of the remote service. You can get this by adding&amp;nbsp;&lt;EM&gt;$metadata&lt;/EM&gt;&amp;nbsp;to the end of the service document, in my case it is the following URL -&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;GET /sap/opu/odata4/sap/api_warehouse_order_task_2/srvd_a2x/sap/warehouseorder/0001/$metadata&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Save this file locally to use it in the below shown wizard. In addition, chose the appropriate class name. This class is the model representation and will contain all the types.&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_1-1761651074160.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333362i4E220282FA77C500/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_1-1761651074160.png" alt="Pramathesh_t_s_1-1761651074160.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Finally, we get the Service Consumption model for OData. Create an outbound service object using wizard, which models the outbound call that will be implemented. The outbound service will be part of a custom communication scenario.&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_2-1761651128515.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333363i2D6DC05E2B6D119C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_2-1761651128515.png" alt="Pramathesh_t_s_2-1761651128515.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Create a communication scenario and assign the outbound service to it. This will be the basis for the outbound communication arrangement, which will be configured by an administrator at a later point. Keep in mind that the developer defines which authentication methods are supported, while the administrator decides which authentication method is ultimately used at runtime.&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_3-1761651467132.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333364i2B0D21F02F7C5AD2/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_3-1761651467132.png" alt="Pramathesh_t_s_3-1761651467132.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Consuming an Odata Service via&amp;nbsp;Service Consumption Model&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;You can use the generated code snippet of the SRVC in and ABAP class, pass the name of the communication scenario and if required, the name of the communication system and the outbound service to CREATE_BY_COMM_ARRANGEMENT&amp;nbsp;method, and perform the service call.&lt;/P&gt;&lt;P&gt;The following code is generated by the SRVC for the create operation of the OData service Warehouse Task.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_4-1761651617495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333371i8D265D6053BE92E8/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_4-1761651617495.png" alt="Pramathesh_t_s_4-1761651617495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Support for Actions and Functions&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To call an OData action or function, the necessary structures and tables for the parameters are generated in the Service Consumption Model. With the 2311 release, however, the ADT (ABAP Development Tools) integration for OData V4 actions is still missing.&lt;/P&gt;&lt;P&gt;Consequently, I cannot yet select a bound action, an action import, a bound function, or a function import and directly generate the code snippet using the ADT tool. Despite this missing feature, the required parameter structure is available, and I can use it at runtime to call the operation.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":hammer_and_wrench:"&gt;🛠&lt;/span&gt;️ Code Example: CancelWarehouseTask Action&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Let's look at how to perform the CancelWarehouseTask action. Before implementing this using the Service Consumption Model, we'll verify the steps using the SAP Gateway Client.&lt;/P&gt;&lt;P&gt;For any standard SAP API, you should always consult the SAP API Business Hub to determine the correct syntax, required URL, and mandatory parameters for any action or function. The sample link confirms that the following details are required to execute this action:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Key Parameters:&lt;/STRONG&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Warehouse Number (EWMWarehouse)&lt;/LI&gt;&lt;LI&gt;Warehouse Task Number (WarehouseTask)&lt;/LI&gt;&lt;LI&gt;Warehouse Task Item Number (WarehouseTaskItem)&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Concurrency Control: The ETag value is also required for conditional updates/actions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The full API request URL for the action is:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;POST /sap/opu/odata4/sap/api_warehouse_order_task_2/srvd_a2x/sap/warehouseorder/0001/WarehouseTask(EWMWarehouse='{EWMWarehouse}',WarehouseTask='{WarehouseTask}',WarehouseTaskItem='{WarehouseTaskItem}')/SAP__self.CancelWarehouseTask?sap-client=&amp;lt;client&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":gear:"&gt;⚙️&lt;/span&gt; Steps to Prepare the Details using SAP Gateway Client&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To successfully execute the action, you first need to retrieve the current ETag and key parameters for the warehouse task.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Perform a GET Call to Retrieve the Task Details and ETag.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Execute a GET request to the WarehouseTask entity set using the relevant warehouse and order numbers to retrieve the task details.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;/sap/opu/odata4/sap/api_warehouse_order_task_2/srvd_a2x/sap/warehouseorder/0001/WarehouseOrder(EWMWarehouse='0880',WarehouseOrder='9748')/_WarehouseTask&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The response payload will contain the Warehouse Number, Warehouse Task Number, Warehouse Task Item, and the &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1599241"&gt;@odata&lt;/a&gt;.etag property for the required task.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_5-1761652886181.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333391i08D1764058C2AAB8/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_5-1761652886181.png" alt="Pramathesh_t_s_5-1761652886181.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2. Perform the POST Call for the Action.&lt;/P&gt;&lt;P&gt;Perform a POST request for the CancelWarehouseTask action using the details (parameters) obtained in the previous step. Crucially, you must also include the ETag value in the If-Match HTTP header.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;Post /sap/opu/odata4/sap/api_warehouse_order_task_2/srvd_a2x/sap/warehouseorder/0001/WarehouseTask(EWMWarehouse='{EWMWarehouse}',WarehouseTask='{WarehouseTask}',WarehouseTaskItem='{WarehouseTaskItem}')/SAP__self.CancelWarehouseTask&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Required Header - If-Match: W/"&amp;lt;ETag_Value_From_Step_1&amp;gt;"&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_6-1761653556921.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333394iDA3D6A690FB64A59/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_6-1761653556921.png" alt="Pramathesh_t_s_6-1761653556921.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":laptop_computer:"&gt;💻&lt;/span&gt; 1. Retrieving ETag and Key Parameters via Service Consumption Model&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The first step is to read the entity to obtain its current ETag and key properties, which are required for the subsequent action call.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;TRY.
    " -----------------------------------------------------------
    " 1. Create HTTP Client and Client Proxy
    " -----------------------------------------------------------
    " Create HTTP destination using Communication Arrangement details
    DATA(lo_destination) = cl_http_destination_provider=&amp;gt;create_by_comm_arrangement(
        comm_scenario  = lv_commscetask
        comm_system_id = lv_commsystem
        service_id     = lv_serviceid_task ).

    lo_http_client  = cl_web_http_client_manager=&amp;gt;create_by_http_destination( lo_destination ).
    
    " Create the OData V4 client proxy
    lo_client_proxy = /iwbep/cl_cp_factory_remote=&amp;gt;create_v4_remote_proxy(
        EXPORTING
            is_proxy_model_key       = VALUE #( repository_id       = lv_repid
                                                  proxy_model_id      = lv_proxymodelid
                                                  proxy_model_version = lv_proxymodlever )
            io_http_client             = lo_http_client
            iv_relative_service_root   = lv_servicerootwh ).

    ASSERT lo_http_client IS BOUND.
    
    " -----------------------------------------------------------
    " 2. Navigate to the Resource and Read Data (GET)
    " -----------------------------------------------------------
    " Create a request for the read operation on the WAREHOUSE_TASK entity set
    lo_request = lo_client_proxy-&amp;gt;create_resource_for_entity_set( 'WAREHOUSE_TASK' )-&amp;gt;create_request_for_read( ).
    
    " Apply filter condition for the Warehouse Task
    lo_filter_factory = lo_request-&amp;gt;create_filter_factory( ).
    CLEAR lt_range_warehousetask.
    
    " Populate range table (assuming &amp;lt;ls_keys&amp;gt; holds the task number)
    lt_range_warehousetask =  VALUE #( ( sign  = 'I' option = 'EQ' low    = &amp;lt;ls_keys&amp;gt;-warehousetask ) ).
    
    " Create filter node by range on the WAREHOUSE_TASK property
    lo_filter_node_1 = lo_filter_factory-&amp;gt;create_by_range( iv_property_path = 'WAREHOUSE_TASK'
                                                          it_range         = lt_range_warehousetask ).
                                                          
    lo_request-&amp;gt;set_filter( lo_filter_node_1 ).
    
    " -----------------------------------------------------------
    " 3. Execute Request and Process Response
    " -----------------------------------------------------------
    lo_response = lo_request-&amp;gt;execute( ).
    
    " Retrieve the business data (ETag is implicitly available in the internal structure)
    lo_response-&amp;gt;get_business_data( IMPORTING et_business_data = lt_business_data ).

CATCH cx_root INTO DATA(lo_err).
    DATA(lv_text) = lo_err-&amp;gt;get_text( ).
    
    " Error handling and logging (omitted for brevity, based on your original code)
    APPEND VALUE #( warehousetask = &amp;lt;ls_keys&amp;gt;-warehousetask
                    %msg          = new_message( ... v2       = lv_text )
                  ) TO reported-zn5_dl_c_createmon_task.
    APPEND VALUE #( warehousetask = &amp;lt;ls_keys&amp;gt;-warehousetask ) TO failed-zn5_dl_c_createmon_task.
    lv_flag = abap_true.
ENDTRY.

" -----------------------------------------------------------
" 4. Extract ETag from Read Results
" -----------------------------------------------------------
" Assuming you are looping through tasks, the loop structure is missing, but extracting the ETag is done here:
READ TABLE lt_business_data ASSIGNING FIELD-SYMBOL(&amp;lt;ls_business_data&amp;gt;) WITH KEY warehouse_task = ls_task-warehousetask.

IF sy-subrc = 0.
    " The etag field is automatically mapped in the generated structure
    ls_task-etag = &amp;lt;ls_business_data&amp;gt;-etag.
ENDIF.

IF lv_flag = abap_false.
    APPEND ls_task TO lt_task.
    CLEAR ls_task.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt; 2. Performing the CancelWarehouseTask Action&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;As previously noted, as of the 2311 release, the ADT integration for generating code snippets for OData V4 actions is still pending. Therefore, we must implement the action call manually.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Key Implementation Details:&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Bound Action Method&lt;/STRONG&gt;: The method that triggers the bound action in the Service Consumption Model is typically named bound_action('ACTION_NAME') on the resource object. Here, the action name must be passed as a string literal: 'CANCEL_WAREHOUSE_TASK'.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramathesh_t_s_7-1761653664347.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/333395i8E713F1F8DED25B7/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Pramathesh_t_s_7-1761653664347.png" alt="Pramathesh_t_s_7-1761653664347.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2.&amp;nbsp;&lt;STRONG&gt;Concurrency Control:&lt;/STRONG&gt; Since CancelWarehouseTask is a state-changing operation, it requires the ETag for optimistic locking. This is set using the set_if_match( etag_value ) method on the request object.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;TRY.
    " -----------------------------------------------------------
    " 1. Create HTTP Client and Client Proxy (using a different variable set, e.g., lo_client_proxy1)
    " -----------------------------------------------------------
    DATA(lo_destination1) = cl_http_destination_provider=&amp;gt;create_by_comm_arrangement(
        comm_scenario  = lv_commscetask
        comm_system_id = lv_commsystem
        service_id     = lv_serviceid_task ).

    lo_http_client1  = cl_web_http_client_manager=&amp;gt;create_by_http_destination( lo_destination1 ).
    
    lo_client_proxy1 = /iwbep/cl_cp_factory_remote=&amp;gt;create_v4_remote_proxy(
        EXPORTING
            is_proxy_model_key       = VALUE #( repository_id       = lv_repid
                                                  proxy_model_id      = lv_proxymodelid
                                                  proxy_model_version = lv_proxymodlever )
            io_http_client             = lo_http_client1
            iv_relative_service_root   = lv_servicerootwh ).
            
    ASSERT lo_http_client1 IS BOUND.

    " -----------------------------------------------------------
    " 2. Navigate to Entity and Bind Action
    " -----------------------------------------------------------
    " Construct the key for the specific WAREHOUSE_TASK entity
    DATA(ls_entity_key1) = VALUE #(
        ewmwarehouse        = lv_ewmwarehouse
        warehouse_task      = &amp;lt;ls_task&amp;gt;-warehousetask
        warehouse_task_item = '0' " Assuming the item is '0' for the action context
    ).
    
    " Navigate to the specific entity instance using its key
    DATA(lo_entity1) = lo_client_proxy1-&amp;gt;create_resource_for_entity_set( 'WAREHOUSE_TASK'
    )-&amp;gt;navigate_with_key( ls_entity_key1 ).
    
    " Bind the CANCEL_WAREHOUSE_TASK action to the entity resource
    DATA(lo_resource1) = lo_entity1-&amp;gt;bind_action( 'CANCEL_WAREHOUSE_TASK' ).
    
    " -----------------------------------------------------------
    " 3. Create Request, Set ETag, and Execute
    " -----------------------------------------------------------
    DATA(lo_request1) = lo_resource1-&amp;gt;create_request( ).
    
    " Set the ETag (If-Match header) using the ETag retrieved in step 1
    lo_request1-&amp;gt;set_if_match( &amp;lt;ls_task&amp;gt;-etag ).
    
    " Execute the action (POST request)
    DATA(lo_response1) = lo_request1-&amp;gt;execute( ).
    
    " Action successful, continue with status handling...

CATCH cx_root INTO DATA(lo_obj).
    DATA(lv_text) = lo_obj-&amp;gt;get_text( ).

    " Error handling and logging (omitted for brevity, based on your original code)
    APPEND VALUE #( warehousetask = &amp;lt;ls_task&amp;gt;-warehousetask
                    %msg          = new_message( ... v2       = lv_text )
                  ) TO reported-zn5_dl_c_createmon_task.
    APPEND VALUE #( warehousetask = &amp;lt;ls_task&amp;gt;-warehousetask ) TO failed-zn5_dl_c_createmon_task.
    lv_flag = abap_true.
ENDTRY.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion: Seamless Outbound Integration with OData Service Consumption Model&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This post demonstrated a complete, robust approach to Outbound Integration from the SAP BTP, ABAP Environment (or S/4HANA Cloud, ABAP Environment) to an external OData API, specifically the API_WAREHOUSE_ORDER_TASK_2 in a cloud-to-cloud scenario.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/outbound-integration-from-sap-btp-abap-to-sap-s-4hana-cloud-via-service/ba-p/14255149"/>
    <published>2025-10-28T13:17:53.803000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-locking-supplier-general-data-when-data-already-exists/ba-p/14256370</id>
    <title>SAP MDG: Locking Supplier General Data When Data Already exists</title>
    <updated>2025-10-29T15:36:02.091000+01:00</updated>
    <author>
      <name>sandeep_suggu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/11644</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Hi&amp;nbsp;SCN Folks,&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Hope you guys are doing great&lt;SPAN&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note 01:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;This blog does not include execution screenshots.&lt;STRONG&gt;&lt;BR /&gt;Note 02:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;The entire code was developed and validated in the SANDBOX system, with results meeting expectations.&lt;STRONG&gt;&lt;BR /&gt;Note 03:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;There are several ways to implement; this blog is written about one of them.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Create one custom class &amp;amp; redefine the standard class (&lt;STRONG&gt;CL_MDG_BS_ECC_HANDLER&lt;/STRONG&gt;)&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method Responsible:&amp;nbsp;&lt;/STRONG&gt;IF_MDG_BS_BP_ACCESS_HANDLER~GET_ENTITY_PROPERTIES.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: lv_crequest_type TYPE usmd_crequest_type,
      lv_cr_number     TYPE usmd_crequest,
      lo_app_context   TYPE REF TO if_usmd_app_context.

DATA: lo_data      TYPE REF TO data,
      lt_data      TYPE usmd_ts_data_entity,
      lt_msg       TYPE usmd_t_message,
      ls_msg       TYPE usmd_s_message,
      lt_erp_v     TYPE REF TO data.

FIELD-SYMBOLS:
      &amp;lt;lt_erpv&amp;gt; TYPE SORTED TABLE,
      &amp;lt;ls_erpv&amp;gt; TYPE any,
      &amp;lt;lv_erpv&amp;gt; TYPE any.

CALL METHOD cl_usmd_app_context=&amp;gt;get_context
  RECEIVING
    eo_context = lo_app_context.

IF lo_app_context IS BOUND.

  CALL METHOD lo_app_context-&amp;gt;get_attributes
    IMPORTING
      ev_crequest_id   = lv_cr_number
      ev_crequest_type = lv_crequest_type
      ev_process       = lv_process.

  lv_crequest_type = iv_crequest_type.

  CALL METHOD super-&amp;gt;if_mdg_bs_bp_access_handler~get_entity_properties
    EXPORTING
      iv_entity         = iv_entity
      is_key            = is_key
      io_model          = io_model
      iv_crequest_type  = iv_crequest_type
      iv_crequest_step  = iv_crequest_step
      iv_crequest_index = iv_crequest_index
    CHANGING
      cf_read_only      = cf_read_only.

  IF iv_crequest_type EQ 'ZMDGS03'.
    io_model-&amp;gt;read_entity_data_all(
      EXPORTING
        i_fieldname      = 'BP_HEADER'
        if_active        = abap_false
        i_crequest       = lv_cr_number
      IMPORTING
        et_message       = lt_msg
        et_data_entity   = lt_data
    ).

    lt_erp_v = VALUE #(
      lt_data[ usmd_entity      = 'BP_HEADER'
               usmd_entity_cont = 'BP_VENGEN'
               struct           = 'KATTR' ]-r_t_data OPTIONAL ).

    IF lt_erp_v IS NOT INITIAL.
      IF iv_entity EQ 'BP_VENGEN'.
        cf_read_only = 'X'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA/pd-p/73554900100800000266" target="_blank"&gt;SAP S/4HANA&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Master+Data+Governance/pd-p/67837800100800004488" target="_blank"&gt;SAP Master Data Governance&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/ABAP+Development/pd-p/833755570260738661924709785639136" target="_blank"&gt;ABAP Development&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thank You,&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sandeep Suggu.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/11644" target="_blank"&gt;SAP Community Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://profile.sap.com/u/sandeep_suggu" target="_blank" rel="noopener noreferrer"&gt;SAP Profile&lt;/A&gt;&amp;nbsp;|&amp;nbsp;&lt;A href="https://in.linkedin.com/in/suggu-sandeep" target="_blank" rel="noopener nofollow noreferrer"&gt;LinkedIn&lt;/A&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-mdg-locking-supplier-general-data-when-data-already-exists/ba-p/14256370"/>
    <published>2025-10-29T15:36:02.091000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/test-double-to-simulate-abap-quot-datasets-quot-write-message-sy-uzeit-etc/ba-p/14254012</id>
    <title>Test Double to simulate ABAP "Datasets", WRITE, MESSAGE, sy-uzeit, etc.</title>
    <updated>2025-10-30T09:21:29.631000+01:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;&lt;ul =""&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/test-double-to-simulate-abap-quot-datasets-quot-write-message-sy-uzeit-etc/ba-p/14254012#toc-hId-1892803970"&gt;Example how to use ZCL_ABAP&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/test-double-to-simulate-abap-quot-datasets-quot-write-message-sy-uzeit-etc/ba-p/14254012#toc-hId-1696290465"&gt;List of supported ABAP keywords&lt;/a&gt;&lt;/li&gt;&lt;li style="list-style-type:disc; margin-left:30px; margin-bottom:1px;"&gt;&lt;a href="https://community.sap.com/t5/abap-blog-posts/test-double-to-simulate-abap-quot-datasets-quot-write-message-sy-uzeit-etc/ba-p/14254012#toc-hId-1499776960"&gt;List of supported system variables&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/P&gt;&lt;P&gt;When writing ABAP Unit, it may be needed to mock ABAP keywords like OPEN DATASET, TRANSFER, MESSAGE, WRITE or system variables like SY-UZEIT, SY-UNAME.&lt;/P&gt;&lt;P&gt;As far as I know, still in the latest ABAP version 7.58, there are no test doubles proposed for them.&lt;/P&gt;&lt;P&gt;I published the code in GitHub with MIT License:&amp;nbsp;&lt;A href="https://github.com/sandraros/abapDouble" target="_blank" rel="noopener nofollow noreferrer"&gt;sandraros/abapDouble: Wrapper and test doubler of ABAP Language elements OPEN DATASET, WRITE...&lt;/A&gt;&lt;/P&gt;&lt;P&gt;The main class is &lt;CODE&gt;ZCL_ABAP&lt;/CODE&gt;.&lt;/P&gt;&lt;P&gt;It handles few ABAP statements and doesn't handle the many possibilities of each proposed ABAP statement but you may easily adapt it.&lt;/P&gt;&lt;P&gt;This article is (of course) for private Cloud and on-premises&amp;nbsp;ABAP systems.&lt;/P&gt;&lt;H3 id="toc-hId-1892803970"&gt;Example how to use ZCL_ABAP&lt;/H3&gt;&lt;P&gt;If you had this code:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA(file_path) = '/tmp/test'.
OPEN DATASET file_path FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
DATA(text) = |Hello world, now is { sy-uzeit TIME = USER }|.
TRANSFER text TO file_path.
CLOSE DATASET file_path.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Convert it to this code:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA(abap) = zcl_abap=&amp;gt;get_singleton( ).
DATA(file_path) = '/tmp/test'.
abap-&amp;gt;open_dataset( iv_file_path = file_path
                    iv_for       = abap-&amp;gt;cs_open_dataset-for-output
                    iv_in_mode   = abap-&amp;gt;cs_open_dataset-in_mode-text
                    iv_encoding  = abap-&amp;gt;cs_open_dataset-encoding-utf_8 ).
abap-&amp;gt;transfer( iv_data      = |Hello world, now is { abap-&amp;gt;get_sy_uzeit( ) TIME = USER }|
                iv_file_path = file_path ).
abap-&amp;gt;close_dataset( iv_file_path = file_path ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Test it this way:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD first_test. " declared FOR TESTING
  " GIVEN now is 152800 (fake)
  DATA(abap) = ztd_abap=&amp;gt;get_singleton( ).
  abap-&amp;gt;set_sy_uzeit( '152800' ).

  " WHEN code under test is called
  call_cut( ).

  " THEN the file contains this data with fake 152800
  cl_abap_unit_assert=&amp;gt;assert_equals( act = abap-&amp;gt;get_dataset( '/tmp/test' )-content
                                      exp = VALUE string_table( ( |Hello world, now is 15:28:00| ) ) ).
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1696290465"&gt;List of supported ABAP keywords&lt;/H3&gt;&lt;P&gt;As of October 30th (the repository may evolve in GitHub in the future):&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;CODE&gt;CLOSE DATASET&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;DELETE DATASET&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;MESSAGE&lt;/CODE&gt;&lt;UL&gt;&lt;LI&gt;Limited to text, message type, display like. It also gives the possibility to re-send the current system message (variables&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;SY-MSGNO&lt;/CODE&gt;, etc.)&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;OPEN DATASET&lt;/CODE&gt;&lt;UL&gt;&lt;LI&gt;Limited to text mode, encodings default and UTF-8&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;TRANSFER&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;WRITE&lt;/CODE&gt;&lt;UL&gt;&lt;LI&gt;Limited to character-like text and to these options&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;/&lt;/CODE&gt;: (write on a new line), not&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;/&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(write on the current line), colors, position in the current line.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;WRITE TO&lt;/CODE&gt;&lt;UL&gt;&lt;LI&gt;Limited to character-like text.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1499776960"&gt;List of supported system variables&lt;/H3&gt;&lt;P&gt;As of October 30th (the repository may evolve in GitHub in the future):&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;CODE&gt;SY-DATUM&lt;/CODE&gt;&lt;UL&gt;&lt;LI&gt;Use ZCL_ABAP=&amp;gt;GET_SINGLETON( )-&amp;gt;GET_SY_DATUM( )&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-LINSZ&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-REPID&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-SLSET&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-TITLE&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-UNAME&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;SY-UZEIT&lt;/CODE&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Sandra&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/test-double-to-simulate-abap-quot-datasets-quot-write-message-sy-uzeit-etc/ba-p/14254012"/>
    <published>2025-10-30T09:21:29.631000+01:00</published>
  </entry>
</feed>
