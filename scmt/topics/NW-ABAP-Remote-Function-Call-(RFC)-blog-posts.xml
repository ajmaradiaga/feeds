<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/NW-ABAP-Remote-Function-Call-(RFC)-blog-posts.xml</id>
  <title>SAP Community - NW ABAP Remote Function Call (RFC)</title>
  <updated>2025-10-27T12:11:17.606075+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/NW ABAP Remote Function Call (RFC)/pd-p/100394580653750417561290171292438" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>NW ABAP Remote Function Call (RFC) blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/parallel-processing-on-oabap-using-classes-and-methods/ba-p/13557161</id>
    <title>Parallel Processing On OABAP - Using Classes and Methods</title>
    <updated>2023-04-27T18:03:43+02:00</updated>
    <author>
      <name>Shruthisampath</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/128334</uri>
    </author>
    <content>&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Parallel processing is implemented in ABAP reports and programs, not in the background processing system itself. That means that jobs are only processed in parallel if the report that runs in a job step is programmed for parallel processing. Such reports can also process in parallel if they are started interactively.&lt;BR /&gt;
&lt;BR /&gt;
Parallel processing in OAbap is using class and methods in report level program.&lt;BR /&gt;
&lt;BR /&gt;
Parallel Processing is implemented with a special variant of Asynchronous RFC. It’s important that you use only the correct variant for you own parallel processing applications. The &lt;STRONG&gt;“CALL FUNCTION STARTING NEW TASK DESTINATION IN GROUP”&lt;/STRONG&gt; keywords.&lt;BR /&gt;
&lt;BR /&gt;
when a huge number of records needs to be processed and it takes a lot of time to produce the output, this parallel processing technique can be applied to achieve run time improvement. So, this Parallel processing is an asynchronous call to the Function Module in parallel sessions/ different session/ multiple sessions&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
T-Codes:&lt;BR /&gt;
&lt;BR /&gt;
RZ12 - To Check the Server Group.&lt;BR /&gt;
&lt;BR /&gt;
SM66 - To Check all the Work Processers.&lt;BR /&gt;
&lt;BR /&gt;
SM51 - To Check the Application Server.&lt;BR /&gt;
&lt;BR /&gt;
SM21 - System log in case of any failures.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
""""" parallel processing """"""""&lt;BR /&gt;
&lt;BR /&gt;
&lt;!--StartFragment --&gt;&lt;SPAN class="L0S52"&gt;REPORT&amp;nbsp;&lt;/SPAN&gt;ZPARALLEL_PROCESSING_OABAP&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;DATA&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&lt;/SPAN&gt;chk1&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
chk2&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
ret11 &lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TABLE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;Of&amp;nbsp;&lt;/SPAN&gt;bapisdstat&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
ret22 &lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TABLE &lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;OF&amp;nbsp;&lt;/SPAN&gt;bapisdstat&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
ret &lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;bapisdstat&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CLASS&amp;nbsp;&lt;/SPAN&gt;lcl_demo&amp;nbsp;&lt;SPAN class="L0S52"&gt;DEFINITION&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;PUBLIC&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;SECTION&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CLASS-METHODS&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CALL &lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;IMPORTING&amp;nbsp;&lt;/SPAN&gt;sdoc1&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;bapivbeln&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;vbeln&lt;BR /&gt;
sdoc2 &lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;bapivbeln&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;vbeln&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
handle1&amp;nbsp;&lt;SPAN class="L0S52"&gt;IMPORTING&amp;nbsp;&lt;/SPAN&gt;p_task&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;clike&lt;SPAN class="L0S55"&gt;,&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"must&amp;nbsp;have&amp;nbsp;a&amp;nbsp;importing&amp;nbsp;para-of&amp;nbsp;type&amp;nbsp;clike&lt;/SPAN&gt;&lt;BR /&gt;
handle2&amp;nbsp;&lt;SPAN class="L0S52"&gt;IMPORTING&amp;nbsp;&lt;/SPAN&gt;p_task&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;clike&lt;SPAN class="L0S55"&gt;.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"must&amp;nbsp;have&amp;nbsp;a&amp;nbsp;importing&amp;nbsp;para-of&amp;nbsp;type&amp;nbsp;clike&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDCLASS&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"LCL_DEMO DEFINITION&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S31"&gt;*———————————————————————-*&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S31"&gt;*       CLASS LCL_DEMO IMPLEMENTATION&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S31"&gt;*———————————————————————-*&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CLASS&amp;nbsp;&lt;/SPAN&gt;lcl_demo&amp;nbsp;&lt;SPAN class="L0S52"&gt;IMPLEMENTATION&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;METHOD&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;call&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CALL&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;FUNCTION&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'BAPI_SALESORDER_GETSTATUS'&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;STARTING&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;NEW&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TASK&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'FUNC1'&lt;/SPAN&gt;&lt;BR /&gt;
DESTINATION&lt;SPAN class="L0S33"&gt;'NONE'&lt;/SPAN&gt;&lt;BR /&gt;
CALLING&amp;nbsp;handle1&amp;nbsp;&lt;SPAN class="L0S52"&gt;ON&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;END&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;OF&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TASK&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;EXPORTING&lt;/SPAN&gt;&lt;BR /&gt;
salesdocument&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;sdoc1&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CALL&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;FUNCTION&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'BAPI_SALESORDER_GETSTATUS'&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;STARTING&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;NEW&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TASK&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'FUNC2'&lt;/SPAN&gt;&lt;BR /&gt;
DESTINATION&amp;nbsp;&lt;SPAN class="L0S33"&gt;'NONE'&lt;/SPAN&gt;&lt;BR /&gt;
CALLING&amp;nbsp;handle2&amp;nbsp;&lt;SPAN class="L0S52"&gt;ON&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;END&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;OF&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TASK&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;EXPORTING&lt;/SPAN&gt;&lt;BR /&gt;
salesdocument&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;sdoc2&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;WAIT&amp;nbsp;&lt;/SPAN&gt;UNTIL&amp;nbsp;chk1&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;abap_true&amp;nbsp;&lt;SPAN class="L0S52"&gt;AND&amp;nbsp;&lt;/SPAN&gt;chk2&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;abap_true&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;WRITE&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&lt;/SPAN&gt;/&lt;SPAN class="L0S33"&gt;'SUCCESS'&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDMETHOD&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"call method&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;METHOD&amp;nbsp;&lt;/SPAN&gt;handle1&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;DATA&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&amp;nbsp;&lt;/SPAN&gt;ret1&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TABLE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;OF&amp;nbsp;&lt;/SPAN&gt;bapisdstat&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;RECEIVE&amp;nbsp;&lt;/SPAN&gt;RESULTS&amp;nbsp;&lt;SPAN class="L0S52"&gt;FROM&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;FUNCTION&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'BAPI_SALESORDER_GETSTATUS'&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;TABLES&lt;/SPAN&gt;&lt;BR /&gt;
statusinfo&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;ret1&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
ret11&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;ret1&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
chk1&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;abap_true&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDMETHOD&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"HANDLE1&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;METHOD&amp;nbsp;&lt;/SPAN&gt;handle2&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;DATA&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&amp;nbsp;&lt;/SPAN&gt;ret2&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;TABLE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;OF&amp;nbsp;&lt;/SPAN&gt;bapisdstat&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;RECEIVE&amp;nbsp;&lt;/SPAN&gt;RESULTS&amp;nbsp;&lt;SPAN class="L0S52"&gt;FROM&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;FUNCTION&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S33"&gt;'BAPI_SALESORDER_GETSTATUS'&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;TABLES&lt;/SPAN&gt;&lt;BR /&gt;
statusinfo&amp;nbsp;&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;ret2&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
ret22&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;ret2&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
chk1&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;abap_true&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDMETHOD&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"HANDLE2&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDCLASS&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S31"&gt;"LCL_DEMO&amp;nbsp;&amp;nbsp;IMPLEMENTATION&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;START-OF-SELECTION&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;PARAMETERS&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&amp;nbsp;&lt;/SPAN&gt;p_sdoc1&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;bapivbeln&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;vbeln&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;&lt;BR /&gt;
p_sdoc2&amp;nbsp;&lt;SPAN class="L0S52"&gt;TYPE&amp;nbsp;&lt;/SPAN&gt;bapivbeln&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;vbeln&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CALL&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;METHOD&amp;nbsp;&lt;/SPAN&gt;lcl_demo&lt;SPAN class="L0S70"&gt;=&amp;gt;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;call&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;EXPORTING&lt;/SPAN&gt;&lt;BR /&gt;
sdoc1&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;p_sdoc1&lt;BR /&gt;
sdoc2&amp;nbsp;&lt;SPAN class="L0S55"&gt;=&amp;nbsp;&lt;/SPAN&gt;p_sdoc2&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;LOOP&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;AT&amp;nbsp;&lt;/SPAN&gt;ret11&amp;nbsp;&lt;SPAN class="L0S52"&gt;INTO&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;write&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&amp;nbsp;&lt;/SPAN&gt;/&amp;nbsp;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;doc_number&amp;nbsp;&lt;SPAN class="L0S55"&gt;,&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;material&lt;SPAN class="L0S55"&gt;,&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;creation_date&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDLOOP&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;CLEAR&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;LOOP&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class="L0S52"&gt;AT&amp;nbsp;&lt;/SPAN&gt;ret22&amp;nbsp;&lt;SPAN class="L0S52"&gt;INTO&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;write&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;:&lt;/SPAN&gt;/&amp;nbsp;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;doc_number&lt;SPAN class="L0S55"&gt;,&lt;/SPAN&gt;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;material&lt;SPAN class="L0S55"&gt;,&amp;nbsp;&lt;/SPAN&gt;ret&lt;SPAN class="L0S70"&gt;-&lt;/SPAN&gt;creation_date&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;SPAN class="L0S52"&gt;ENDLOOP&lt;/SPAN&gt;&lt;SPAN class="L0S55"&gt;.&lt;/SPAN&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;PROGRAM:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;text-align: center"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/SC1.png" /&gt;&lt;STRONG&gt;Image 1&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Defining a Class&lt;/STRONG&gt; : When you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, what an object of the class will consist of, and what operations can be performed on such an object.&lt;BR /&gt;
&lt;BR /&gt;
That is, it defines the abstract characteristics of an object, such as attributes, fields, and properties.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Implementation&lt;/STRONG&gt; : Implementation of a class contains the implementation of all its methods. In ABAP Objects, the structure of a class contains components such as attributes, methods, events, types, and constants.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px;text-align: center"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/SC2.png" /&gt;&lt;STRONG&gt;Image 2&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;UL class="ul"&gt;&lt;BR /&gt;
 	&lt;LI class="li"&gt;&lt;BR /&gt;
&lt;P class="p"&gt;ABAP keyword&lt;STRONG&gt;&lt;SPAN style="color: #000000"&gt; CALL FUNCTION&lt;/SPAN&gt;&lt;/STRONG&gt; &amp;lt;function&amp;gt; &lt;STRONG&gt;STARTING NEW TASK&lt;/STRONG&gt; &amp;lt;taskname&amp;gt; with the &lt;STRONG&gt;DESTINATION IN GROUP &lt;/STRONG&gt;argument.&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI class="li"&gt;&lt;BR /&gt;
&lt;P class="p"&gt;Use this keyword to have the SAP system execute the function module call in parallel. Typically, you'll place this keyword in a loop in which you divide up the data that is to be processed into work packets. You can pass the data that is to be processed in the form of an internal table (EXPORT, TABLE arguments). The keyword implements parallel processing by dispatching asynchronous RFC calls to the servers that are available in the RFC server group specified for the processing.&lt;/P&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;STRONG&gt;&lt;SPAN class="ph emphasis emphasis"&gt;Waiting for job completion:&lt;/SPAN&gt;&lt;/STRONG&gt;&amp;nbsp; As Line No 37 : indicates wait until with abap boolean .&lt;BR /&gt;
&lt;BR /&gt;
As part of your task management, your job must wait until all of the parallel processing tasks have been completed.&lt;BR /&gt;
&lt;BR /&gt;
To do this, the program uses the &lt;STRONG&gt;WAIT UNTIL&lt;/STRONG&gt; keyword to wait until the number of completed parallel processing tasks is equal to the number of tasks that were created.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/SC3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;Image 3&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Methods&lt;/STRONG&gt; : The definition of a method is declared in the class declaration and implemented in the implementation part of a class.&lt;BR /&gt;
&lt;BR /&gt;
The&lt;STRONG&gt; METHOD&lt;/STRONG&gt; and &lt;STRONG&gt;ENDMETHOD&lt;/STRONG&gt; statements are used to define the implementation part of a method.&lt;BR /&gt;
&lt;P class="p"&gt;&lt;STRONG&gt;ABAP &lt;/STRONG&gt;keyword &lt;STRONG&gt;RECEIVE:&lt;/STRONG&gt;&amp;nbsp; Required if you wish to receive the results of the processing of an asynchronous RFC.&lt;/P&gt;&lt;BR /&gt;
&lt;P class="p"&gt;&lt;STRONG&gt; RECEIVE&lt;/STRONG&gt; retrieves &lt;STRONG&gt;IMPORT&lt;/STRONG&gt; and &lt;STRONG&gt;TABLE&lt;/STRONG&gt; parameters as well as messages and return codes.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/SC4.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;STRONG&gt;Image 4&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
Image 4 : as its business implemented , declaring the parameter .CALL the method with respective parameter&lt;BR /&gt;
&lt;BR /&gt;
Use LOOP and ENDLOOP &amp;nbsp;&lt;B&gt;executes the statement block between LOOP and ENDLOOP once for each read row&lt;/B&gt;. The output response result determines how and to where the row contents are read. The table key with which the loop is executed can be determined in cond.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;OUTPUT:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/sc5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/04/SC6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Parallel processing is a method in computing of running two or more processors (CPUs)&amp;nbsp;&lt;B&gt;to handle separate parts of an overall task&lt;/B&gt;. Breaking up different parts of a task among multiple processors will help reduce the amount of time to run a program using class and methods, which helps in performance.&lt;BR /&gt;
&lt;BR /&gt;
Time consumption in OAbap is less compared to normal Abap reports.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
I hope Abapers will understand Parallel Processing with Classes and Methods.&lt;BR /&gt;
&lt;BR /&gt;
Please provide your feedback and your thoughts into comment section below.&lt;BR /&gt;
&lt;BR /&gt;
Do you have any Q&amp;amp;A please reach to &lt;A href="https://answers.sap.com/index.html" target="_blank" rel="noopener noreferrer"&gt;https://answers.sap.com/index.html&amp;nbsp;&lt;/A&gt;and post your&lt;BR /&gt;
&lt;BR /&gt;
questions.&lt;BR /&gt;
&lt;BR /&gt;
follow the ABAP Development environment Topic page&amp;nbsp; &lt;A href="https://community.sap.com/topics/abap" target="_blank"&gt;https://community.sap.com/topics/abap &lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
and for reading further blog post visit &lt;A href="https://blogs.sap.com" target="_blank" rel="noopener noreferrer"&gt;https://blogs.sap.com&amp;nbsp; &lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Regards,&lt;BR /&gt;
&lt;BR /&gt;
Shruthi S.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/parallel-processing-on-oabap-using-classes-and-methods/ba-p/13557161"/>
    <published>2023-04-27T18:03:43+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and/ba-p/13561150</id>
    <title>Principal propagation in a multi-cloud solution between Microsoft Azure and SAP, Part VII: Invoke RFCs and BAPIs with Kerberos delegation from Microsoft Power Platform</title>
    <updated>2023-06-19T13:52:16+02:00</updated>
    <author>
      <name>MartinRaepple</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/171519</uri>
    </author>
    <content>&lt;TABLE bgcolor="#e7f5ff"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;BR /&gt;
&lt;BR /&gt;
This blog post is the &lt;I&gt;seventh &lt;/I&gt;part of a tutorial series. For a better understanding of the concepts and technologies, it is highly recommended that you read &lt;A href="https://blogs.sap.com/2021/04/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-iv-sso-with-a-power-virtual-agent-chatbot-and-on-premises-data-gateway/" target="_blank" rel="noopener noreferrer"&gt;part IV&lt;/A&gt; first, and then come back here again. &lt;A href="https://blogs.sap.com/2021/04/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-iv-sso-with-a-power-virtual-agent-chatbot-and-on-premises-data-gateway/" target="_blank" rel="noopener noreferrer"&gt;Part IV&lt;/A&gt; introduces the &lt;A href="https://learn.microsoft.com/en-us/power-platform/" target="_blank" rel="nofollow noopener noreferrer"&gt;Microsoft Power Platform&lt;/A&gt; with some of its key components that you will use in this part of the tutorial series as well, such as the &lt;A href="https://learn.microsoft.com/en-us/data-integration/gateway/service-gateway-onprem-indepth" target="_blank" rel="nofollow noopener noreferrer"&gt;On-Premises Data Gateway (OPDG)&lt;/A&gt;, &lt;A href="https://docs.microsoft.com/en-us/power-automate/" target="_blank" rel="nofollow noopener noreferrer"&gt;Power Automate&lt;/A&gt;, and &lt;A href="https://flow.microsoft.com/en-us/connectors/" target="_blank" rel="nofollow noopener noreferrer"&gt;Connectors&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Since there is no "one-size-fits-all" approach for integration scenarios between Microsoft's and SAP's platforms using principal propagation, this series starts with &lt;A href="https://blogs.sap.com/2020/07/17/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp/" target="_blank" rel="noopener noreferrer"&gt;part I&lt;/A&gt; explaining the technology standards for principal propagation in the context of calling a simple Web Service on SAP Business Technology Platform (BTP) on behalf of the authenticated user (or &lt;EM&gt;principal&lt;/EM&gt;) from Azure Active Directory (Azure AD). Parts &lt;A href="https://blogs.sap.com/2020/10/01/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp-part-ii" target="_blank" rel="noopener noreferrer"&gt;II&lt;/A&gt;, &lt;A href="https://blogs.sap.com/2021/02/24/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp-part-iii-teams-sso-process-integration-core-data-services/" target="_blank" rel="noopener noreferrer"&gt;III&lt;/A&gt;, &lt;A href="https://blogs.sap.com/2021/04/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-iv-sso-with-a-power-virtual-agent-chatbot-and-on-premises-data-gateway" target="_blank" rel="noopener noreferrer"&gt;IV&lt;/A&gt; and &lt;A href="https://blogs.sap.com/2022/02/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-v-production-readiness-with-unified-api-and-infrastructure-management/" target="_blank" rel="noopener noreferrer"&gt;V&lt;/A&gt; extend this scenario step by step by adding on-premise connectivity, Microsoft Teams integration, and API management to it. I do recommend reading these parts as well to get an understanding of the different scenarios and recommended options to implement them. &lt;A href="https://blogs.sap.com/2022/11/02/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-vi-calling-the-microsoft-graph-on-behalf-of-the-sap-authenticated-user/" target="_blank" rel="noopener noreferrer"&gt;Part VI&lt;/A&gt; looks at the reverse direction for propagating the principal from SAP Cloud Identity Services to Azure in the context of calling the Microsoft Graph API from an BTP application.&lt;BR /&gt;
&lt;BR /&gt;
This part takes in in-depth look at principal propagation for an application built with the &lt;A href="https://learn.microsoft.com/en-us/power-platform/?WT.mc_id=webupdates_GEP_Powerplatformlearn-web-wwl" target="_blank" rel="nofollow noopener noreferrer"&gt;Microsoft Power Platform&lt;/A&gt; making a &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/4888068ad9134076e10000000a42189d.html" target="_blank" rel="noopener noreferrer"&gt;Remote Function Call (RFC)&lt;/A&gt; to an SAP system on-premise using a &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/166400f6be7b46e8adc6b90fd20f3516/485f9ba265c907dce10000000a42189d.html" target="_blank" rel="noopener noreferrer"&gt;Business Application Programming Interface (BAPI)&lt;/A&gt; to search a product catalogue. Check out &lt;A href="https://www.saponazurepodcast.de/episode142/" target="_blank" rel="nofollow noopener noreferrer"&gt;episode 142&lt;/A&gt; of the &lt;A href="https://www.saponazurepodcast.de" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP on Azure video podcast series&lt;/A&gt;&amp;nbsp;for a live demo of this scenario.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
All variants for principal propagation in this blog series used HTTP secured by &lt;A href="https://datatracker.ietf.org/doc/html/rfc5246" target="_blank" rel="nofollow noopener noreferrer"&gt;Transport Layer Security (TLS)&lt;/A&gt; as the application layer protocol for calling a Web service on BTP (see &lt;A href="https://blogs.sap.com/2020/07/17/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp/" target="_blank" rel="noopener noreferrer"&gt;part I&lt;/A&gt;), an OData service on SAP NetWeaver Gateway (see parts &lt;A href="https://blogs.sap.com/2020/10/01/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp-part-ii" target="_blank" rel="noopener noreferrer"&gt;II&lt;/A&gt;, &lt;A href="https://blogs.sap.com/2021/02/24/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-cloud-platform-scp-part-iii-teams-sso-process-integration-core-data-services/" target="_blank" rel="noopener noreferrer"&gt;III&lt;/A&gt;, &lt;A href="https://blogs.sap.com/2021/04/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-iv-sso-with-a-power-virtual-agent-chatbot-and-on-premises-data-gateway" target="_blank" rel="noopener noreferrer"&gt;IV&lt;/A&gt; and &lt;A href="https://blogs.sap.com/2022/02/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-v-production-readiness-with-unified-api-and-infrastructure-management/" target="_blank" rel="noopener noreferrer"&gt;V&lt;/A&gt;), or the Graph API (see &lt;A href="https://blogs.sap.com/2022/11/02/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-vi-calling-the-microsoft-graph-on-behalf-of-the-sap-authenticated-user/" target="_blank" rel="noopener noreferrer"&gt;part VI&lt;/A&gt;) to call Microsoft 365 services. The &lt;A href="https://datatracker.ietf.org/doc/html/rfc6749" target="_blank" rel="nofollow noopener noreferrer"&gt;OAuth 2.0 Authorization Framework&lt;/A&gt; is the de-facto security standard for restricting access to the data exposed by these &lt;A href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="nofollow noopener noreferrer"&gt;RESTful services&lt;/A&gt;. To enable principal propagation, additional standards such as the &lt;A href="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf" target="_blank" rel="nofollow noopener noreferrer"&gt;Security Assertion Markup Language (SAML) 2.0&lt;/A&gt; and &lt;A href="https://openid.net/specs/openid-connect-core-1_0.html" target="_blank" rel="nofollow noopener noreferrer"&gt;OpenID Connect (OIDC) 1.0&lt;/A&gt; are required for a secure and interoperable transfer of the security context and identity information of the authenticated user (or &lt;EM&gt;principal&lt;/EM&gt;) across system- and network boundaries. Please refer to the other parts of this blog series for a detailled explanation how OAuth, SAML and OpenID can be combined for secure principal propagation.&lt;BR /&gt;
&lt;BR /&gt;
For &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/4888068ad9134076e10000000a42189d.html" target="_blank" rel="noopener noreferrer"&gt;RFCs&lt;/A&gt; and &lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/166400f6be7b46e8adc6b90fd20f3516/485f9ba265c907dce10000000a42189d.html" target="_blank" rel="noopener noreferrer"&gt;BAPIs&lt;/A&gt;, none of the beforementioned protocols can be used to secure the communication and propagate the principal between an external client and the SAP Application Server (AS) ABAP. For these services, &lt;A href="https://help.sap.com/doc/PRODUCTION/saphelp_nw74/7.4.16/en-us/e6/56f466e99a11d1a5b00000e835363f/frameset.htm" target="_blank" rel="noopener noreferrer"&gt;Secure Network Communications (SNC)&lt;/A&gt; can be applied to secure RFCs. SNC uses the standardized Generic Security Service Application Program Interface (&lt;A href="https://datatracker.ietf.org/doc/html/rfc2743" target="_blank" rel="nofollow noopener noreferrer"&gt;GSS-API&lt;/A&gt;) for integrating with a cryptographic library for encrypting the data traffic on the network level and supporting single sign-on (SSO) to an SAP system using X.509 client certificates or the &lt;A href="https://www.ietf.org/rfc/rfc4120.txt" target="_blank" rel="nofollow noopener noreferrer"&gt;Kerberos protocol&lt;/A&gt; as specified in &lt;A href="https://www.ietf.org/rfc/rfc4120.txt" target="_blank" rel="nofollow noopener noreferrer"&gt;RFC 4120&lt;/A&gt;.&lt;BR /&gt;
&lt;H2 id="toc-hId-962940254"&gt;Principal Propagation with Kerberos Delegation&lt;/H2&gt;&lt;BR /&gt;
The Kerberos protocol, named after the three-headed guard dog of Hades from the Greek mythology, requires a trusted authority, the Key Distribution Center (KDC), to facilitate SSO between the client and a "kerberized" service or resource on a server. The protocol not only defines these three entities, but also three phases of their message exchange as illustrated in figure 1:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/figure1-4.jpg" height="330" width="400" /&gt;&lt;/P&gt;&lt;BR /&gt;
Figure 1: &lt;EM&gt;The Kerberos protocol&lt;/EM&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;Authentication Service (AS) exchange: &lt;/B&gt;The client requests a ticket-granting ticket (&lt;CODE&gt;TGT&lt;/CODE&gt;) with an authentication service request (&lt;CODE&gt;AS_REQ&lt;/CODE&gt;) message (1) from the Authentication Service (AS) of the KDC. The user authenticates at the AS by encrypting this message with her secret key K&lt;SUB&gt;C &lt;/SUB&gt;that is created by hashing the user's password stored in the KDC's account directory. Upon successfull decryption, the KDC constructs the TGT for the user and returns it to the client with a &lt;CODE&gt;AS_REP&lt;/CODE&gt; (2) message. The TGT is encrypted with the KDC's secret key K&lt;SUB&gt;K&lt;/SUB&gt; and is a special type of Kerberos ticket that can only be used by the client to obtain other tickets from the KDC.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;Ticket-Granting Service (TGS) exchange: &lt;/B&gt;To establish an authenticated communication session with the service, the client uses the TGT (instead of the long-term secret key K&lt;SUB&gt;C&lt;/SUB&gt;&amp;nbsp;from the user's hashed password) and requests a service ticket (ST) from the KDC's Ticket Granting Service (TGS) with a ticket-granting service request (&lt;CODE&gt;TGS_REQ&lt;/CODE&gt;) message (3). The service for which the ST is requested for is identified by its &lt;EM&gt;Service Principal Name (SPN)&lt;/EM&gt;. SPNs uniquely identify an instance of a service and are registered on a user or computer account in the KDCs account directory by setting the &lt;CODE&gt;servicePrincipalName&lt;/CODE&gt; attribute of the object. The KDC returns the ST for the service encrypted with the service key K&lt;SUB&gt;S&lt;/SUB&gt; to the client with a ticket-granting service response (&lt;CODE&gt;TGS_REP&lt;/CODE&gt;) message (4).&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;B&gt;Client/Server Authentication (AP) exchange: &lt;/B&gt;The client sends the ST to the service with an application server request (&lt;CODE&gt;AP_REQ&lt;/CODE&gt;) message requesting access to the service (5). The server can validate the ticket by decrypting it with its service key K&lt;SUB&gt;S&lt;/SUB&gt; where it finds the user's unique name (cname). Optionally, the client might request that the server verify its own identity by sending back a application server response (&lt;CODE&gt;AP_REP&lt;/CODE&gt;) message (6).&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
For propagating the authenticated user from the service to another service, the Kerberos protocol provides the &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94" target="_blank" rel="nofollow noopener noreferrer"&gt;Service for User (S4U) extensions&lt;/A&gt;. These extensions allow a service to obtain a Kerberos service ticket for a different service on-behalf-of a user that &lt;EM&gt;has not&lt;/EM&gt; authenticated to the KDC. S4U includes the &lt;EM&gt;S4U2self&lt;/EM&gt; and &lt;EM&gt;S4U2proxy&lt;/EM&gt; extensions:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/02636893-7a1f-4357-af9a-b672e3e3de13" target="_blank" rel="nofollow noopener noreferrer"&gt;Service-for-User-to-Self&lt;/A&gt; (&lt;EM&gt;S4U2self&lt;/EM&gt;) extension is intended to be used by a service to obtain a ticket &lt;EM&gt;for itself&lt;/EM&gt; on-behalf-of a user who has authenticated in some other way than by using Kerberos to the service. With S4U2self&lt;EM&gt;,&lt;/EM&gt; the service gets a ticket just as if the user had used Kerberos.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/bde93b0e-f3c9-4ddf-9f44-e1453be7af5a" target="_blank" rel="nofollow noopener noreferrer"&gt;Service-for-User-to-Proxy&lt;/A&gt; (&lt;EM&gt;S4U2proxy&lt;/EM&gt;) extension allows a service to&lt;BR /&gt;
call another service, acting on-behalf-of the user. The first service uses a Kerberos service ticket as if the user had obtained the service ticket for it and sends the ticket to a second service directly. Configuration at the KDC's TGS can be used to limit the scope of the S4U2proxy extension, also known as &lt;EM style="font-size: 1rem"&gt;constrained&lt;/EM&gt;&lt;SPAN style="font-size: 1rem"&gt; delegation. The second service is typically a proxy performing some work for the first service, and the proxy requires to do that work under the authorization context of the user. &lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Figure 2 shows the two S4U Kerberos extensions (steps 10 to 13) in the context of the complete end-to-end message flow for the scenario in this blog post:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/scenario_overview-3.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Figure 2: &lt;EM&gt;System landscape and message flow&lt;/EM&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Jack Davis as the application test user in this tutorial logs on to the domain-joined Windows workstation on the corporate network. This results in a Kerberos TGT issued by the local Active Directory Domain Service (AD DS) acting as the KDC (see figure 1, steps 1 &amp;amp; 2). The same applies to services in the corporate domain, such as the OPDG, that also obtains a TGT from AD DS.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The user launches the "SAP Product Search" Power Platform app in a web browser. The app consists of two components (see figure 3): A &lt;A href="https://learn.microsoft.com/en-us/power-apps/" target="_blank" rel="nofollow noopener noreferrer"&gt;canvas app&lt;/A&gt; providing the user interface to search for the price of a product in the Enterprise Procurement Model (EPM) demo application of the SAP system in the corporate network. The business logic to connect to SAP, transforming the BAPI response data, and error handling, is implemented in a &lt;A href="https://learn.microsoft.com/en-us/power-automate/" target="_blank" rel="nofollow noopener noreferrer"&gt;Power Automate flow&lt;/A&gt;. The flow uses the &lt;A href="https://learn.microsoft.com/en-us/connectors/saperp/" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP ERP Connector&lt;/A&gt;'s prebuilt &lt;EM&gt;&lt;A href="https://learn.microsoft.com/en-us/connectors/saperp/#call-sap-function-(v2)" target="_blank" rel="nofollow noopener noreferrer"&gt;Call SAP function (V2)&lt;/A&gt;&lt;/EM&gt; action to invoke the &lt;CODE&gt;BAPI_EPM_PRODUCT_GET_DETAIL&lt;/CODE&gt; &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/166400f6be7b46e8adc6b90fd20f3516/485f9ba265c907dce10000000a42189d.html" target="_blank" rel="noopener noreferrer"&gt;Business Application Programming Interface (BAPI)&lt;/A&gt; of the EPM demo application.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/figure2-1-1.jpg" height="241" width="470" /&gt;Figure 3: &lt;EM&gt;Application components&amp;nbsp;&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;For &lt;A href="https://learn.microsoft.com/en-us/power-platform/admin/security/authenticate-services" target="_blank" rel="nofollow noopener noreferrer"&gt;authentication to Power Platform&lt;/A&gt;, the app requires an OpenID Connect (ID) token for authentication and an OAuth access token for authorization, and redirects the user to the app's Azure AD tenant authorization endpoint to trigger authentication with the &lt;A href="https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow" target="_blank" rel="nofollow noopener noreferrer"&gt;OAuth 2.0 authorization code flow&lt;/A&gt;. For a complete SSO experience, the setup in this scenario synchronizes the user accounts from the corporate Active Directory Domain Services (AD DS) to the Azure AD tenant with &lt;A href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/connect/whatis-azure-ad-connect" target="_blank" rel="nofollow noopener noreferrer"&gt;Azure AD Connect&lt;/A&gt; and &lt;EM&gt;Password Hash Synchronization&lt;/EM&gt; (PHS) enabled. With PHS, hashes of the user passwords in AD DS are synchronized by Azure AD Connect to Azure AD so that the users can login with the same password on-premises and in the cloud. This feature can be combined with &lt;A href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/connect/how-to-connect-sso-how-it-works" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;EM&gt;Seamless SSO&lt;/EM&gt;&lt;/A&gt; in Azure AD Connect to automatically sign-in users when they are on their corporate devices connected to the corporate network. The following steps 4 to 6 explain this process in more detail.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Azure AD challenges the browser to provide a Kerberos ticket for the user by sending an &lt;CODE&gt;HTTP 401 Unauthorized&lt;/CODE&gt; response.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The browser requests the Kerberos ticket from AD DS for the computer account representing Azure AD in AD DS.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The browser forwards the encrypted Kerberos ticket to Azure AD which can decrypt it using the shared key for the account.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Upon successful SSO to the cloud, the Azure AD tenant generates an OAuth 2.0 authorization code for the user and sends it to the SAP Product Search app by redirecting the user's web browser.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The app redeems the authorization code for an OAuth access token and OpenID Connect (ID) token by sending the authorization code to the Azure AD tenant's token endpoint.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;When the user enters a product ID and clicks the search button, the app triggers the flow which in turn uses the SAP ERP connector to call the SAP system's BAPI via the OPDG on the corporate network. The flow passes the product ID to the BAPI's input parameters and sends the user's ID token in the call to the SAP ERP Connector.&amp;nbsp;The ID token must successfully pass the validations of its &lt;A href="https://learn.microsoft.com/en-us/azure/active-directory/develop/id-token-claims-reference#payload-claims" target="_blank" rel="nofollow noopener noreferrer"&gt;claims&lt;/A&gt;, such as the intended recipient (&lt;CODE&gt;aud&lt;/CODE&gt;ience), the trusted &lt;CODE&gt;iss&lt;/CODE&gt;uer who constructed the token (Azure AD tenant), and the validity of the &lt;CODE&gt;exp&lt;/CODE&gt;iration of the token, before the User Principal Name (UPN) is extracted from it and send to the OPDG.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;OPDG uses the Kerberos &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/02636893-7a1f-4357-af9a-b672e3e3de13" target="_blank" rel="nofollow noopener noreferrer"&gt;S4U2self&lt;/A&gt; extension to retrieve a &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/4a624fb5-a078-4d30-8ad1-e9ab71e0bc47#gt_4c6cd79b-120d-4ee1-ab24-d1b000e0b3ca" target="_blank" rel="nofollow noopener noreferrer"&gt;forwardable&lt;/A&gt; service ticket for itself on behalf of the Azure AD-authenticated user. To do so, OPDG has to run under a service user account (e.g. CORP\GatewaySvc) within the AD domain, uniquely identified by its SPN (e.g. &lt;EM&gt;gateway/WIN-OPDG&lt;/EM&gt;). OPDG needs to map the UPN from the Azure AD-authenticated user to a different UPN of the user in the on-premise AD, using an unused Active Directory attribute such as &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; in this scenario. This lab setup requires user mapping because the user's UPN suffix in Azure AD (e.g. jdavis@&lt;EM&gt;bestruncorp.onmicrosoft.com&lt;/EM&gt;) is different from her suffix in the corporate AD (e.g. jdavis@&lt;EM&gt;corp.bestrun.com&lt;/EM&gt;). As specified by the &lt;A style="font-size: 1rem" href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/02636893-7a1f-4357-af9a-b672e3e3de13" target="_blank" rel="nofollow noopener noreferrer"&gt;S4U2self&lt;/A&gt; extension,&amp;nbsp;OPDG creates the &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/aceb70de-40f0-4409-87fa-df00ca145f5a" target="_blank" rel="nofollow noopener noreferrer"&gt;PA_FOR_USER&lt;/A&gt; data structure with the mapped user name and sends it with a &lt;CODE&gt;TGS_REQ&lt;/CODE&gt; message to AD DS.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AD DS uses OPDG's identity from its &lt;CODE&gt;TGT&lt;/CODE&gt; sent with the &lt;CODE&gt;TGS_REQ&lt;/CODE&gt; message to create the OPDG service ticket and returns the service ticket for the user in the &lt;CODE&gt;TGS_REP&lt;/CODE&gt; message.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The SAP system is configured for SNC and Kerberos-based SSO (e.g. for SAP GUI), which requires registration of an SPN for the SAP system's service account in AD DS following the format "SAP/&amp;lt;SID&amp;gt;", e.g. SAP/A4H. OPDG is now attempting to obtain a service ticket for the SAP system on-behalf-of the user with the &lt;A href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/bde93b0e-f3c9-4ddf-9f44-e1453be7af5a" target="_blank" rel="nofollow noopener noreferrer"&gt;S4U2proxy&lt;/A&gt; Kerberos extension. OPDG sends the &lt;CODE&gt;TGS_REQ&lt;/CODE&gt; message with the user's service ticket for OPDG obtained in the previous step as an &lt;CODE&gt;additional-ticket&lt;/CODE&gt; in the request.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AD DS&amp;nbsp;makes sure the &lt;CODE&gt;forwardable&lt;/CODE&gt; flag is set in the OPDG's service ticket found in the&amp;nbsp; &lt;CODE&gt;additional-ticket&lt;/CODE&gt; and uses its local policy to determine if OPDG is allowed to obtain a service ticket on behalf of a user to the SAP system. If these conditions are met, the TGS crafts the &lt;CODE&gt;TGS_REP&lt;/CODE&gt; message to return the user's service ticket to the SAP. This response contains the &lt;CODE&gt;cname&lt;/CODE&gt; field identifying the user's UPN in AD DS that was taken from the &lt;CODE&gt;additional-ticket&lt;/CODE&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;OPDG utilizes the locally installed &lt;A href="https://support.sap.com/en/product/connectors/msnet.html" data-linktype="external" target="_blank" rel="noopener noreferrer"&gt;SAP Connector for Microsoft .NET 3.1 (NCo 3.1)&lt;/A&gt; and SAP Cryptographic Library to make a secure, SNC-protected synchronous RFC call to the BAPI, authenticated with the Kerberos ticket from the previous step for the SAP system obtained on-behalf-of the Azure AD-authenticated user from AD DS. The SAP system can single sign-on the user with the Kerberos ticket by mapping its &lt;CODE&gt;cname&lt;/CODE&gt; to the user's SNC name (e.g. p:CN=JDAVIS@CORP.BESTRUN.COM).&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;If all authorization checks for the propagated user are successfull (such as the permission to call the BAPI), the response from the BAPI is sent back by the SAP ERP Connector to the flow, checked for any errors, and parsed for the price of the product which is returned to the app.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-895509468"&gt;Prerequisites and lab setup&lt;/H3&gt;&lt;BR /&gt;
The following list of prerequisites must be met to successfully complete the exercises of part VII:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;A Power Platform environment. You can reuse the environment from &lt;A href="https://blogs.sap.com/2021/04/13/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and-sap-business-technology-platform-btp-part-iv-sso-with-a-power-virtual-agent-chatbot-and-on-premises-data-gateway/" target="_blank" rel="noopener noreferrer"&gt;part IV&lt;/A&gt;, or (if you started your journey here) can get a new one with a &lt;A href="https://powerapps.microsoft.com/en-us/" target="_blank" rel="nofollow noopener noreferrer"&gt;free Power Apps trial account&lt;/A&gt; or &lt;A href="https://developer.microsoft.com/en-us/microsoft-365/dev-program" target="_blank" rel="nofollow noopener noreferrer"&gt;Microsoft 365 Developer license&lt;/A&gt; and by following &lt;A href="https://learn.microsoft.com/en-us/power-platform/admin/create-environment#create-an-environment-without-a-database" target="_blank" rel="nofollow noopener noreferrer"&gt;these instructions&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Administrative access to an Active Directory domain and on-premises systems for simulating the corporate network in your lab environment. You can create the required systems in your lab environment as Hyper-V VMs and configure them according to the table below:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%;height: 319px" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 25.1282%;height: 14px"&gt;&lt;STRONG&gt;System&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.2109%;height: 14px"&gt;&lt;STRONG&gt;Operating system &amp;amp; software&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 25.1282%;height: 14px"&gt;Active Directory Domain Controller (AD DC)&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.2109%;height: 14px"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Windows Server 2019&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Active Directory Domain Services (AD DS role). Installing the AD DS role and promoting a Windows Server to a domain controller is documented &lt;A href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/install-a-new-windows-server-2012-active-directory-forest--level-200-" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;. The domain name used in this tutorial is &lt;EM&gt;corp.bestrun.com (NetBIOS: CORP), &lt;/EM&gt;but you can also choose any other name.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://go.microsoft.com/fwlink/?LinkId=615771" target="_blank" rel="nofollow noopener noreferrer"&gt;Azure AD Connect&lt;/A&gt;, version 2.1.20.0, following &lt;A href="https://learn.microsoft.com/en-us/azure/active-directory/hybrid/connect/how-to-connect-install-express" target="_blank" rel="nofollow noopener noreferrer"&gt;these installation instructions&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 140px"&gt;&lt;BR /&gt;
&lt;TD style="width: 25.1282%;height: 140px"&gt;On-Premises Data Gateway (OPDG) Server&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.2109%;height: 140px"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Windows Server 2019, domain-joined&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.microsoft.com/en-us/download/details.aspx?id=53127" target="_blank" rel="nofollow noopener noreferrer"&gt;On-Premises Data Gateway&lt;/A&gt;, minimum &lt;EM&gt;version 3000.178.9 (June 2023) or newer&lt;/EM&gt;. Installation instructions and how to register the OPDG in your Power Platform environment can be found &lt;A href="https://learn.microsoft.com/en-us/data-integration/gateway/service-gateway-install" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://support.sap.com/en/product/connectors/msnet.html" data-linktype="external" target="_blank" rel="noopener noreferrer"&gt;SAP Connector for Microsoft .NET 3.1 (NCo 3.1)&lt;/A&gt;. Select &lt;EM&gt;NCo 3.1 compiled with .NET Framework 4.6.2 - SAP Connector for Microsoft .NET 3.1.&amp;lt;n&amp;gt;.&amp;lt;n&amp;gt; for Windows 64 bit (x64) &lt;/EM&gt;for download.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Cryptographic Library (&lt;CODE&gt;sapcrypto.dll&lt;/CODE&gt;) 64 bit, version 8.5.25 (or newer).&amp;nbsp;Download the latest version of the SAP Cryptographic Library from the &lt;A href="https://support.sap.com/en/my-support/software-downloads.html" target="_blank" rel="noopener noreferrer"&gt;SAP Support Portal's Software Download&lt;/A&gt; (S-User required). Search for "&lt;KBD class="ph userinput"&gt;CommonCryptoLib"&lt;/KBD&gt;&amp;nbsp;in the&amp;nbsp;&lt;SPAN class="ph uicontrol"&gt;Support Packages and Patches&lt;/SPAN&gt; area.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Optional tools for troubleshooting:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://www.wireshark.org/download.html" target="_blank" rel="nofollow noopener noreferrer"&gt;Wireshark&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 70px"&gt;&lt;BR /&gt;
&lt;TD style="width: 25.1282%;height: 70px"&gt;Workstation&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.2109%;height: 70px"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Windows 10 Pro, domain-joined&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP GUI 7.70&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Secure Login Client 3.0&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 25.1282%"&gt;SAP System&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.2109%"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP Application Server ABAP&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: The SAP system &lt;EM&gt;is not required&lt;/EM&gt; to be domain-joined and &lt;EM&gt;not to have&lt;/EM&gt; line-of-sight to the AD DC. Therefore you can run it also in the cloud. If you don't have a system available for testing, the &lt;A href="https://cal.sap.com/" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Appliance Library (CAL)&lt;/A&gt; provides a simple way to deploy a test and development system for evaluation purposes on Azure. Use the &lt;A href="https://cal.sap.com/catalog#/applianceTemplates/5a830213-f0cb-423e-ab5f-f7736e57f5a1" target="_blank" rel="noopener noreferrer"&gt;SAP ABAP Platform 1909, Developer Edition&lt;/A&gt; appliance template which fulfills all requirements for this tutorial by installing an SAP Application Server ABAP 7.54 SP2.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
Table 1: &lt;EM&gt;Lab setup&lt;/EM&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Administrative access to an Azure AD tenant (which is included in the &lt;A href="https://developer.microsoft.com/en-us/microsoft-365/dev-program" target="_blank" rel="nofollow noopener noreferrer"&gt;Microsoft 365 Developer license&lt;/A&gt;). The domain name of the tenant used in this tutorial is &lt;EM&gt;bestruncorp.onmicrosoft.com, &lt;/EM&gt;but you can also choose any other name.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Checkout branch &lt;CODE&gt;part7&lt;/CODE&gt; of the blog series &lt;A href="https://github.com/raepple/azure-scp-principal-propagation/tree/part7" target="_blank" rel="nofollow noopener noreferrer"&gt;GitHub repository&lt;/A&gt; with a Git client of your choice and the following commands:&lt;BR /&gt;
&lt;PRE class="language-php"&gt;&lt;CODE&gt;git clone &lt;A href="https://github.com/raepple/azure-scp-principal-propagation.git" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/raepple/azure-scp-principal-propagation.git&lt;/A&gt;&lt;BR /&gt;
cd azure-scp-principal-propagation&lt;BR /&gt;
git checkout part7&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
The following exercises require switching between different roles. The table below lists those user roles and corresponding accounts used in the configuration steps of the scenario:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 30.8%;height: 14px"&gt;&lt;STRONG&gt;Role&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 69.2%;height: 14px"&gt;&lt;STRONG&gt;User accounts&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 30.8%;height: 14px"&gt;Administrator&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 69.2%;height: 14px"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP login: SAPADMIN&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AD login: CORP\Administrator&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Azure AD login: admin@bestruncorp.onmicrosoft.com&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP operating system login: &amp;lt;SID&amp;gt;adm&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 30.8%"&gt;Developer&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 69.2%"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP login: DEVUSER&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AD login: CORP\devuser&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Azure AD / Power Platform login: devuser@bestruncorp.onmicrosoft.com&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 30.8%;height: 14px"&gt;Application test user&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 69.2%;height: 14px"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;SAP login: JDAVIS&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;AD login: CORP\jdavis&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Azure AD login: jdavis@bestruncorp.onmicrosoft.com&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
You will start the exercises to setup the end-to-end scenario illustrated in figure 2 by configuring the service account and SPN in the corporate Active Directory for the SAP system and setup the SAP system for SNC to test single sign-on with the SAP GUI. You can skip the following section if your SAP system is already configured for Kerberos-based SSO.&lt;BR /&gt;
&lt;H3 id="toc-hId-698995963"&gt;Configure SAP for Kerberos-based SSO with Active Directory&lt;/H3&gt;&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;1&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
As a domain administrator, launch the&amp;nbsp;&lt;STRONG&gt;Active Directory Users and Computers&lt;/STRONG&gt; Microsoft Management Console (MMC) snap-in on the Domain Controller host.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on &lt;STRONG&gt;Users&lt;/STRONG&gt; in your domain to open the context menu and select &lt;STRONG&gt;New → User &lt;/STRONG&gt;to create the new service account for the SAP system.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 134px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 134px"&gt;2&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 134px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter &lt;STRONG&gt;Kerberos&amp;lt;SID&amp;gt;&lt;/STRONG&gt; as the &lt;STRONG&gt;First name&lt;/STRONG&gt;, &lt;STRONG&gt;Full name&lt;/STRONG&gt; and &lt;STRONG&gt;User login name&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Replace &amp;lt;SID&amp;gt; with the ID of your SAP system (e.g. "A4H").&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 134px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-2-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 134px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 134px"&gt;3&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 134px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the password for the new service user account. Select &lt;STRONG&gt;User cannot change password&lt;/STRONG&gt; and &lt;STRONG&gt;Password never expires&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 134px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-3-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 133px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 133px"&gt;4&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 133px"&gt;Click &lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 133px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-4-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 147px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 147px"&gt;5&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 147px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Start the &lt;STRONG&gt;ADSI Editor&lt;/STRONG&gt; (&lt;STRONG&gt;adsiedit.msc&lt;/STRONG&gt;) to maintain the Service Principal Name (SPN) of the new service account.&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;CN=Users&lt;/STRONG&gt; from your domain's default naming context, and right-click on the &lt;STRONG&gt;CN=Kerberos&amp;lt;SID&amp;gt;&lt;/STRONG&gt; user object.&lt;BR /&gt;
&lt;BR /&gt;
From the context menu, select &lt;STRONG&gt;Properties&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Alternatively to steps 5 to 8, you can also use the command line as an Administrator and enter the following command:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;setspn –A SAP/&amp;lt;SID&amp;gt; &amp;lt;domain&amp;gt;\Kerberos&amp;lt;SID&amp;gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Replace &amp;lt;domain&amp;gt; with the NetBIOS name of your domain (e.g. "CORP"), and &amp;lt;SID&amp;gt; with the ID of your SAP system (e.g. "A4H").&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 147px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-5-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 165px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 165px"&gt;6&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 165px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;servicePrincipalName&lt;/STRONG&gt; from the list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Edit&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 165px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-6-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 68px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 68px"&gt;7&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 68px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the &lt;STRONG&gt;Service Principal Name (SPN)&lt;/STRONG&gt; for the SAP service account in the format "SAP/&amp;lt;SID&amp;gt;". Replace &amp;lt;SID&amp;gt; with the ID of your SAP system (e.g. "A4H").&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 68px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-7-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 176px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 176px"&gt;8&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 176px"&gt;Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 176px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-8-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;9&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Go back to the &lt;STRONG&gt;Active Directory Users and Computers&lt;/STRONG&gt; MMC snap-in and select the new SAP service account Kerberos&amp;lt;SID&amp;gt; from the &lt;STRONG&gt;Users&lt;/STRONG&gt; list.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on it and select &lt;STRONG&gt;Properties&lt;/STRONG&gt; from the context menu.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-8-1-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;10&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;Account&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Under &lt;STRONG&gt;Account options&lt;/STRONG&gt;, activate the checkbox for &lt;STRONG&gt;This account supports Kerberos AES 256 bit encryption&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-8-1-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 80px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 80px"&gt;11&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 80px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Login&lt;/STRONG&gt; to the domain on the workstation host with your application test user (e.g. CORP\jdavis).&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 80px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-8-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 98px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 98px"&gt;12&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 98px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Start SAP GUI and login as the SAP administrator.&lt;BR /&gt;
&lt;BR /&gt;
Run transaction &lt;STRONG&gt;SNCWIZARD &lt;/STRONG&gt;to start the SNC Configuration wizard.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 98px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-9-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 115px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 115px"&gt;13&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 115px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
If you see the error message&lt;BR /&gt;
&lt;BR /&gt;
"DEFAULT profile in the DB and in the file system are different"&lt;BR /&gt;
&lt;BR /&gt;
then run transaction &lt;STRONG&gt;RZ10 &lt;/STRONG&gt;first, and select &lt;STRONG&gt;Utilities → Import Profiles → Of active servers&lt;/STRONG&gt;, and return to the SNCWIZARD.&lt;BR /&gt;
&lt;BR /&gt;
On the &lt;STRONG&gt;Start&lt;/STRONG&gt; page of the SNC Configuration wizard, click &lt;STRONG&gt;Continue&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 115px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-10-2-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 118px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 118px"&gt;14&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 118px"&gt;Accept the default value for system's SNC Identity and click &lt;STRONG&gt;Continue&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 118px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-11-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 117px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 117px"&gt;15&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 117px"&gt;Click &lt;STRONG&gt;Continue&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 117px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-12-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 119px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 119px"&gt;16&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 119px"&gt;Click &lt;STRONG&gt;Close&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 119px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-13-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 67px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 67px"&gt;17&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 67px"&gt;&lt;STRONG&gt;Log off&lt;/STRONG&gt; from the SAP system to restart the application server.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 67px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-14.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 48px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 48px"&gt;18&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 48px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
As SAP system user &amp;lt;SID&amp;gt;adm, use the commands&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;sapcontrol -nr &amp;lt;instance_number&amp;gt; -function Stop&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
and&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;sapcontrol -nr &amp;lt;instance_number&amp;gt; -function Start&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
to restart the application server.&lt;BR /&gt;
&lt;BR /&gt;
Replace &amp;lt;instance_number&amp;gt; with the number of your application service instance, e.g. "00".&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 48px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/1-15-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 71px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 71px"&gt;19&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 71px"&gt;After the restart of the application server, log on to SAP GUI and run transaction &lt;STRONG&gt;SNCWIZARD&lt;/STRONG&gt; again.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 71px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-16.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 120px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 120px"&gt;20&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 120px"&gt;On the &lt;STRONG&gt;Start&lt;/STRONG&gt; screen, click &lt;STRONG&gt;Continue&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 120px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-17-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 99px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 99px"&gt;21&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 99px"&gt;Click &lt;STRONG&gt;Continue&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 99px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-18-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 30px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 30px"&gt;22&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 30px"&gt;In the &lt;STRONG&gt;SPNEGO Configuration&lt;/STRONG&gt;, click &lt;STRONG&gt;Display/Change&lt;/STRONG&gt; to switch into edit mode.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 30px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-19-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;23&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Add &lt;/STRONG&gt;to configure a new Kerberos User Principal.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-21.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;24&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the following values:&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;User Principal Name&lt;/STRONG&gt;: Kerberos&amp;lt;SID&amp;gt;@&amp;lt;full-qualified name of your Active Directory Domain in uppercase letters, e.g. "CORP.BESTRUN.COM"&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Password&lt;/STRONG&gt;: &amp;lt;The password you specified in step 3&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Confirm Password&lt;/STRONG&gt;: &amp;lt;The password you specified in step 3&amp;gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-22.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;25&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Exit&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt; to store the updated SPNEGO Configuration.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-23-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;26&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Skip&lt;/STRONG&gt; on the X.509 Credentials wizard step.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-24-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;27&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Complete&lt;/STRONG&gt; to finalize the wizard.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-25-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;28&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Open the SAP Secure Login Client and right-click on the &lt;STRONG&gt;Kerberos Token&lt;/STRONG&gt; from the &lt;STRONG&gt;Profiles&lt;/STRONG&gt; list.&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;Copy SNC name to clipboard&lt;/STRONG&gt;&amp;nbsp;from the context menu.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-26-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;29&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Go back to SAP GUI and run transaction &lt;STRONG&gt;SU01 &lt;/STRONG&gt;to maintain the application user's SNC mapping.&lt;BR /&gt;
&lt;BR /&gt;
Enter the application test user's ID (e.g. &lt;STRONG&gt;JDAVIS&lt;/STRONG&gt;) in the &lt;STRONG&gt;User&lt;/STRONG&gt; field and click &lt;STRONG&gt;Change&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-27-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;30&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the tab &lt;STRONG&gt;SNC&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Maintain the user's &lt;STRONG&gt;SNC name&lt;/STRONG&gt; by pasting the value you copied in step 28 from the clipboard (e.g. &lt;STRONG&gt;p:CN=JDAVIS@CORP.BESTRUN.COM&lt;/STRONG&gt;).&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-30.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;31&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Repeat the last two steps for maintaining the SNC mapping for the developer's user account.&lt;BR /&gt;
&lt;BR /&gt;
Enter the developer user's ID (e.g. &lt;STRONG&gt;DEVUSER&lt;/STRONG&gt;) in the &lt;STRONG&gt;User&lt;/STRONG&gt; field and click &lt;STRONG&gt;Change&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-29-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;32&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the tab &lt;STRONG&gt;SNC&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Maintain the developer user's &lt;STRONG&gt;SNC name&lt;/STRONG&gt; (e.g. &lt;STRONG&gt;p:CN=DEVUSER@CORP.BESTRUN.COM&lt;/STRONG&gt;).&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-29-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;33&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;STRONG&gt;Log off&lt;/STRONG&gt; as the administrator from SAP GUI.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-30-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 18px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 18px"&gt;34&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 18px"&gt;&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the SAP system connection and select &lt;STRONG&gt;Properties...&lt;/STRONG&gt; from the menu.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 18px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-30-1-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;35&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;Network&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Activate the checkbox &lt;STRONG&gt;Activate Secure Network Communication&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
In the &lt;STRONG&gt;SNC Name&lt;/STRONG&gt; field, enter the SAP system's SNC Identity from step 12.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-31.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;36&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the system's connection and select &lt;STRONG&gt;SNC Logon with Single Sign-On&lt;/STRONG&gt; to test the new SNC setup.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-32-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 128px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 128px"&gt;37&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 128px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
You should be single signed-on as user JDAVIS to the SAP system.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Log off&lt;/STRONG&gt; (or select &lt;STRONG&gt;System → Log off&lt;/STRONG&gt; from the menu) to log out as user JDAVIS.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 128px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-33.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-502482458"&gt;Configure OPDG for Kerberos Constrained Delegation&lt;/H3&gt;&lt;BR /&gt;
By default, OPDG runs as the machine-local service account &lt;EM&gt;NT Service\PBIEgwService&lt;/EM&gt;. To use Kerberos Constrained Delegation with the protocol's S4U extensions, OPDG has to run under a service account in the domain.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;38&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
On the Domain Controller host, go back to the &lt;STRONG&gt;Active Directory Users and Computers&lt;/STRONG&gt; Microsoft Management Console (MMC) snap-in.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on &lt;STRONG&gt;Users&lt;/STRONG&gt; in your domain and select &lt;STRONG&gt;New → User &lt;/STRONG&gt;from the context menu.&lt;BR /&gt;
&lt;BR /&gt;
Enter "GatewaySvc&lt;EM&gt;"&lt;/EM&gt; as the &lt;STRONG&gt;First name&lt;/STRONG&gt;, &lt;STRONG&gt;Full name&lt;/STRONG&gt; and &lt;STRONG&gt;User login name&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 134px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 134px"&gt;39&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 134px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the password for the OPDG domain service account. Select &lt;STRONG&gt;User cannot change password&lt;/STRONG&gt; and &lt;STRONG&gt;Password never expires&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 134px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-3-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 135px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 135px"&gt;40&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 135px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 135px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-3-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 155px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 155px"&gt;41&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 155px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
As the domain administrator, run the following command to create an SPN for the new service account which is required to configure the Kerberos delegation in the next step:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;setspn –S gateway/&amp;lt;OPDG hostname&amp;gt; &amp;lt;domain&amp;gt;\GatewaySvc&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Replace &amp;lt;OPDG hostname&amp;gt; with the hostname of your OPDG system. You can find out the name by entering the command &lt;CODE&gt;hostname&lt;/CODE&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 155px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-12-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 132px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 132px"&gt;42&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 132px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the new service account and select &lt;STRONG&gt;Properties&lt;/STRONG&gt; from the context menu.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 132px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-4-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 168px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 168px"&gt;43&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 168px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Switch to the &lt;STRONG&gt;Delegation&lt;/STRONG&gt; tab.&lt;/P&gt;&lt;BR /&gt;
Select &lt;STRONG&gt;Trust this user for delegation to specified services only&lt;/STRONG&gt; and &lt;STRONG&gt;Use any authentication protocol&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 168px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-5-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;44&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;Users or Computers&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-6-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;45&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Enter "Kerberos&amp;lt;SID&amp;gt;" in the object names field. Replace &amp;lt;SID&amp;gt; with your SAP system's ID, e.g. "A4H".&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;Check Names &lt;/STRONG&gt;to resolve it to the full existent name.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-7-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;46&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;The list of allowed services now contains the value from the SPN (Service Type / Computer) of the SAP system. The new OPDG service account can request a service ticket only for the SAP system on-behalf-of the propagated user with the Kerberos S4U2proxy protocol extension.&lt;/P&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Select All&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-8-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;47&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-9-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 199px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 199px"&gt;48&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 199px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;OK.&lt;/STRONG&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 199px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-10-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 98px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 98px"&gt;49&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 98px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;The OPDG service account must be granted to local policies on the OPDG host.&lt;/P&gt;&lt;BR /&gt;
Perform this configuration with the &lt;STRONG&gt;Local Group Policy Editor&lt;/STRONG&gt; by running &lt;STRONG&gt;gpedit.msc&lt;/STRONG&gt; from an Administrator command prompt.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 98px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-11-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 142px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 142px"&gt;50&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 142px"&gt;Go to&amp;nbsp;&lt;STRONG&gt;Local Computer Policy&lt;/STRONG&gt; →&amp;nbsp;&lt;STRONG&gt;Computer Configuration&lt;/STRONG&gt; →&amp;nbsp;&lt;STRONG&gt;Windows Settings&lt;/STRONG&gt; →&amp;nbsp;&lt;STRONG&gt;Security Settings&lt;/STRONG&gt; →&amp;nbsp;&lt;STRONG&gt;Local Policies&lt;/STRONG&gt; →&amp;nbsp;&lt;STRONG&gt;User Rights Assignment&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Grant the OPDG domain service account (e.g. "CORP\GatewaySvc") the local policy &lt;STRONG&gt;Act as part of the operating system&lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;by double-clicking on it.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;Add User or Group&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 142px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-13-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 168px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 168px"&gt;51&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 168px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the name of your OPDG's domain service account (e.g. "GatewaySvc") and click &lt;STRONG&gt;Check Names&lt;/STRONG&gt; to resolve it to the full existent name.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
The service account's domain name (e.g. "CORP\GatewaySvc") is now added to the policy's user list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK &lt;/STRONG&gt;to apply the new configuration.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 168px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-14-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;52&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Repeat the same step for the &lt;STRONG&gt;Impersonate a client after authentication &lt;/STRONG&gt;policy by double-clicking on it.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Add User or Group&lt;/STRONG&gt; and resolve the OPDG's service account to the full existent name with &lt;STRONG&gt;Check Names&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-15-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;53&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;The service account's name (e.g. "CORP\GatewaySvc") is now added to the policy's user list.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Close&lt;/STRONG&gt; the Local Group Policy Editor.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-16-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;54&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Start the &lt;STRONG&gt;OPDG app &lt;/STRONG&gt;from the desktop link on the gateway host, or by running &lt;CODE&gt;C:\Program Files\On-premises data gateway\EnterpriseGatewayConfigurator.exe&lt;/CODE&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Sign in&lt;/STRONG&gt; to login as the Power Platform System administrator user who registered the OPDG in the environment.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-17-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;55&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Select &lt;STRONG&gt;Service Settings&lt;/STRONG&gt; from the configurator's menu.&lt;/P&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Change account&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-18.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 98px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 98px"&gt;56&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 98px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Click &lt;STRONG&gt;Apply and Restart&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 98px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-19.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 142px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 142px"&gt;57&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 142px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Enter your OPDG's service account name (e.g. "CORP\GatewaySvc") and password from step 34.&lt;/P&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Configure&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 142px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-20.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 132px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 132px"&gt;58&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 132px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Provide your Power Platform System administrator sign-in account, by clicking on &lt;STRONG&gt;Sign in&lt;/STRONG&gt;.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 132px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-21-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 143px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 143px"&gt;59&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 143px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Choose &lt;STRONG&gt;Migrate, restore or takeover an existing gateway &lt;/STRONG&gt;to restore your gateway registration.&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 143px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-22.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 140px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 140px"&gt;60&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 140px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Select your gateway cluster and instance from the drop-down boxes and provide the recovery key you've chosen during the initial registration.&lt;/P&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Configure&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 140px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-23.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 76px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 76px"&gt;61&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 76px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;After the restoration is complete, your OPDG service instance uses the domain service account (e.g. "CORP\GatewaySvc").&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 76px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-24.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;62&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Add the OPDG service account to the &lt;STRONG&gt;Windows Authorization and Access Group&lt;/STRONG&gt;. This is requried because the user accounts that the gateway will impersonate are in Azure AD and thus not in the same domain as the OPDG service account.&lt;/P&gt;&lt;BR /&gt;
On the Domain Controller host, go back to the &lt;STRONG&gt;Active Directory Users and Computers&lt;/STRONG&gt; Microsoft Management Console (MMC) snap-in.&lt;BR /&gt;
&lt;BR /&gt;
Select the &lt;STRONG&gt;Builtin&lt;/STRONG&gt; folder for your domain and &lt;STRONG&gt;double-click&lt;/STRONG&gt; on the &lt;STRONG&gt;Windows Authorization and Access Group &lt;/STRONG&gt;security group.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-30-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;63&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;Members&lt;/STRONG&gt; tab of the security group.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-31-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;64&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the name of your OPDG's domain service account (e.g. "GatewaySvc") and click &lt;STRONG&gt;Check Names&lt;/STRONG&gt; to resolve it to the full existent SPN.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-31-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;65&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
The OPDG service account is now added to the policy's user list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK &lt;/STRONG&gt;to apply the new configuration.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-32-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-305968953"&gt;Install and configure the SAP Cryptographic Library&lt;/H3&gt;&lt;BR /&gt;
For SNC communication between the OPDG and the SAP system, the SAP Cryptographic Library must be installed on the gateway host along with SAP &lt;A href="https://support.sap.com/en/product/connectors/msnet.html" data-linktype="external" target="_blank" rel="noopener noreferrer"&gt;NCo 3.1&lt;/A&gt;.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;66&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 140px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Download the latest version of the &lt;EM&gt;SAP Cryptographic Library&lt;/EM&gt; from the &lt;A href="https://support.sap.com/en/my-support/software-downloads.html" target="_blank" rel="noopener noreferrer"&gt;SAP Support Portal's Software Download&lt;/A&gt; (S-User required), and copy the library file (&lt;CODE&gt;sapcrypto.dll&lt;/CODE&gt;) to the OPDG's installation directory on the gateway host (&lt;CODE&gt;C:\Program Files\On-premises data gateway&lt;/CODE&gt;).&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the &lt;CODE&gt;sapcrypto.dll&lt;/CODE&gt; file and select &lt;STRONG&gt;Properties&lt;/STRONG&gt; from the context menu.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 140px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-26.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 193px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;67&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 193px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Switch to the &lt;STRONG&gt;Details&lt;/STRONG&gt; tab to check the version of the library. It should be 8.5.25 or newer.&lt;/P&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 193px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-27.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 98px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;68&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 98px"&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Create a new text file &lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt; in the same directory (&lt;CODE&gt;C:\Program Files\On-premises data gateway&lt;/CODE&gt;) with the following content:&lt;/P&gt;&lt;BR /&gt;
&lt;CODE&gt;ccl/snc/enable_kerberos_in_client_role = 1&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Save&lt;/STRONG&gt; the file.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 98px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-28.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;69&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Grant &lt;EM&gt;read&lt;/EM&gt;&amp;nbsp;and&amp;nbsp;&lt;EM&gt;execute&lt;/EM&gt; permissions to both the &lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt;&amp;nbsp;and&amp;nbsp;&lt;CODE&gt;sapcrypto.dll&lt;/CODE&gt; files to the gateway service user account and the AD user(s) that the service user impersonates.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the files and select &lt;STRONG&gt;Properties&lt;/STRONG&gt; from the context menu. Switch to the &lt;STRONG&gt;Security&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Check that the groups &lt;STRONG&gt;Domain Users&lt;/STRONG&gt; and &lt;STRONG&gt;Authenticated Users&lt;/STRONG&gt; are in the list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-29-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;70&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Create a&amp;nbsp;&lt;CODE&gt;CCL_PROFILE&lt;/CODE&gt; system environment variable and set its value to the path of the&lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt;configuration file.&lt;BR /&gt;
&lt;BR /&gt;
On the gateway host, launch the &lt;STRONG&gt;Control Panel&lt;/STRONG&gt; and navigate to &lt;STRONG&gt;System and Security → System&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Advanced system settings&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/3-4-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;71&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Click &lt;STRONG&gt;Environment Variables&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/2-34.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;72&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Under &lt;STRONG&gt;System variables&lt;/STRONG&gt;, click &lt;STRONG&gt;New&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/3-6-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;73&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter &lt;CODE&gt;CCL_PROFILE&lt;/CODE&gt; as the &lt;STRONG&gt;variable name&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
For the &lt;STRONG&gt;variable value&lt;/STRONG&gt;, enter the full path to your &lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt; file, e.g. &lt;CODE&gt;C:\Program Files\On-premises data gateway\sapcrypto.ini&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/3-7-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;74&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/3-8-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-109455448"&gt;Configure User Mappings in Active Directory&lt;/H3&gt;&lt;BR /&gt;
To enable Kerberos-based principal propagation for a user in this scenario, a mapping from the user's full username (User Principal Name, UPN) in Azure AD to the user's local name in AD is required. For this purpose we will use the unused attribute&lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; of the local AD user to store the Azure AD UPN. Any other unused Active Directory attribute can be used as well.&lt;BR /&gt;
&lt;BR /&gt;
For the application test user &lt;EM&gt;Jack Davis&lt;/EM&gt; in this scenario, you will set the &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; attribute of the local AD domain user account &lt;CODE&gt;jdavis@corp.bestrun.com&lt;/CODE&gt; to the user's Azure AD UPN &lt;CODE&gt;jdavis@bestruncorp.onmicrosoft.com&lt;/CODE&gt; for linking his two accounts. The same applies to the application development user &lt;EM&gt;devuser&lt;/EM&gt;, who requires a mapping from &lt;CODE&gt;devuser@corp.bestrun.com&lt;/CODE&gt; to &lt;CODE&gt;devuser@bestruncorp.onmicrosoft.com&lt;/CODE&gt;.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;75&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;On the gateway host, &lt;STRONG&gt;open&lt;/STRONG&gt; the file &lt;CODE&gt;Microsoft.PowerBI.DataMovement.Pipeline.GatewayCore.dll.config&lt;/CODE&gt; in the OPDG installation folder (&lt;CODE&gt;C:\Program Files\On-premises data gateway&lt;/CODE&gt;) in an editor.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-1-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;76&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Search for the setting &lt;CODE&gt;ADUserNameReplacementProperty&lt;/CODE&gt; and set its value to&amp;nbsp;&lt;CODE&gt;SAMAccountName&lt;/CODE&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-2-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;77&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Search for the setting &lt;CODE&gt;ADUserNameLookupProperty&lt;/CODE&gt; and set it to the value &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Save&lt;/STRONG&gt; the changes in the file.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-3-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 84px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 84px"&gt;78&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 84px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Restart now&lt;/STRONG&gt; from the OPDG's configurator &lt;STRONG&gt;Service Settings&lt;/STRONG&gt; tab to apply the changes.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-4-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 84px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 84px"&gt;79&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 84px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
On the Domain Controller host, click&amp;nbsp;&lt;STRONG&gt;Start, &lt;/STRONG&gt;and select &lt;STRONG&gt;Windows Administrative Tools →&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;ADSI Edit &lt;/STRONG&gt;from the menu.&lt;BR /&gt;
&lt;BR /&gt;
In the ADSI Editor, navigate in the left-side object tree to &lt;STRONG&gt;CN=Users&lt;/STRONG&gt; under the domain's Default naming context.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Right-click&lt;/STRONG&gt; on the test user's object (e.g. &lt;STRONG&gt;CN=Jack Davis&lt;/STRONG&gt;) and select &lt;STRONG&gt;Properties&lt;/STRONG&gt; from the context menu.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 84px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-5-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;80&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Select the attribute &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; from the list and click &lt;STRONG&gt;Edit&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-6-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;81&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter the test user's Azure AD UPN (e.g. &lt;STRONG&gt;jdavis@&amp;lt;domainname&amp;gt;.onmicrosoft.com&lt;/STRONG&gt;) in the Value field.&lt;BR /&gt;
&lt;BR /&gt;
Replace &lt;EM&gt;&amp;lt;domainname&amp;gt;&lt;/EM&gt; with your Azure AD tenant's domain name, e.g. &lt;EM&gt;bestruncorp&lt;/EM&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-7-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;82&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Repeat steps 79 to 81 for the developer user object (e.g. &lt;STRONG&gt;CN=Developer User&lt;/STRONG&gt;) and map it to the user's Azure AD UPN (e.g. &lt;STRONG&gt;devuser@&amp;lt;domainname&amp;gt;.onmicrosoft.com&lt;/STRONG&gt;).via the &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; attribute.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt; and &lt;STRONG&gt;close&lt;/STRONG&gt; the ADSI Editor.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/4-8-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--87058057"&gt;Configure SAP User Authorizations&lt;/H3&gt;&lt;BR /&gt;
Next, the SAP system is configured for the application test user and power platform developer who need a different set of authorizations. The developer needs a set of authorizations used by the SAP ERP Connector for looking up the RFCs offered by the system during development of the Power Automate flow and at runtime. In addition, the application test user role requires the authorization to call the &lt;CODE&gt;BAPI_EPM_PRODUCT_GET_DETAILS&lt;/CODE&gt; BAPI to search the product catalog with the Power App.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;83&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Go back to SAP GUI and log in as the administrator user.&lt;BR /&gt;
&lt;BR /&gt;
Start transaction &lt;STRONG&gt;PFCG&lt;/STRONG&gt; to define a new role for the application users in this scenario.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 58px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 58px"&gt;84&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 58px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter &lt;CODE&gt;PRODUCT_SEARCH_BAPI&lt;/CODE&gt; in the &lt;STRONG&gt;Role&lt;/STRONG&gt; field.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Single Role&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 58px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-2-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 57px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 57px"&gt;85&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 57px"&gt;Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 57px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-3-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 130px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 130px"&gt;86&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 130px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;Authorization&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Click the &lt;STRONG&gt;pencil&lt;/STRONG&gt; button to edit the new role's authorization data.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 130px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-4-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 102px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 102px"&gt;87&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 102px"&gt;Click &lt;STRONG&gt;Do not select templates&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 102px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-5-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;88&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;Click &lt;STRONG&gt;Manually&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-6-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 142px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 142px"&gt;89&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 142px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter &lt;CODE&gt;S_RFC&lt;/CODE&gt; for the &lt;STRONG&gt;Authorization Object&lt;/STRONG&gt; in the first row.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 142px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-7-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 56px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 56px"&gt;90&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 56px"&gt;Click the &lt;STRONG&gt;pencil&lt;/STRONG&gt; button to edit the authorization checks for field RFC_NAME.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 56px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-8-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 133px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 133px"&gt;91&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 133px"&gt;Enter the following values in the &lt;STRONG&gt;Value Intrvl&lt;/STRONG&gt; table's &lt;STRONG&gt;'From'&lt;/STRONG&gt; column:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI style="list-style-type: none"&gt;&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;BAPI_EPM_PRODUCT_GET_DETAILS&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFCPING&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFC_FUNCTION_SEARCH&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFC_METADATA_GET&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 133px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/5-8-1-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 64px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 64px"&gt;92&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 64px"&gt;Click the &lt;STRONG&gt;pencil&lt;/STRONG&gt; button to edit the authorization checks for field Activity (ACTVT).&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 64px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-10-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 236px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 236px"&gt;93&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 236px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;Execute&lt;/STRONG&gt; from the list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 236px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-11-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;94&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click the &lt;STRONG&gt;pencil&lt;/STRONG&gt; button to edit the authorization checks for field RFC_TYPE.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-12-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;95&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;FUNC&lt;/STRONG&gt; (Function Module) from the list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-13-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 63px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 63px"&gt;96&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 63px"&gt;Click &lt;STRONG&gt;Save &lt;/STRONG&gt;to save the application user role.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 63px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-14-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 57px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 57px"&gt;97&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 57px"&gt;Click &lt;STRONG&gt;Generate&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 57px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-15-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 75px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 75px"&gt;98&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 75px"&gt;Click &lt;STRONG&gt;Exit&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 75px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-16-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;99&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;User&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Enter your &lt;STRONG&gt;application test&lt;/STRONG&gt; &lt;STRONG&gt;user's ID&lt;/STRONG&gt; (e.g. JDAVIS) in the first row of the &lt;STRONG&gt;User Assignment&lt;/STRONG&gt; table.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-17-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;100&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;User Comparison.&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-18-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;101&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Full Comparison&lt;/STRONG&gt;, then &lt;STRONG&gt;Close&lt;/STRONG&gt; the dialog window.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-19-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 35px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 35px"&gt;102&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 35px"&gt;Click &lt;STRONG&gt;Exit&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 35px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-20-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 84px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 84px"&gt;103&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 84px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Next, create the role for the application developer.&lt;BR /&gt;
&lt;BR /&gt;
Enter &lt;CODE&gt;PRODUCT_SEARCH_DEVELOPER&lt;/CODE&gt; in the &lt;STRONG&gt;Role&lt;/STRONG&gt; field.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Single Role&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 84px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-21.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 241px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 241px"&gt;104&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 241px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Repeat&lt;/STRONG&gt; steps &lt;STRONG&gt;85&lt;/STRONG&gt; to &lt;STRONG&gt;90&lt;/STRONG&gt; for the new role.&lt;BR /&gt;
&lt;BR /&gt;
Enter the following values in the &lt;STRONG&gt;Value Intrvl&lt;/STRONG&gt; table's &lt;STRONG&gt;'From'&lt;/STRONG&gt; column:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;DD_LANGU_TO_ISOLA&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFCPING&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFC_FUNCTION_SEARCH&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;CODE&gt;RFC_METADATA_GET&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Continue by &lt;STRONG&gt;repeating&lt;/STRONG&gt; steps &lt;STRONG&gt;92&lt;/STRONG&gt;&amp;nbsp;to &lt;STRONG&gt;98&lt;/STRONG&gt;&amp;nbsp;for the application developer role.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 241px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-22.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 112px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 112px"&gt;105&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 112px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Switch to the &lt;STRONG&gt;User&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
Enter your &lt;STRONG&gt;application test&lt;/STRONG&gt; &lt;STRONG&gt;user's ID&lt;/STRONG&gt; (e.g. DEVUSER) in the first row of the &lt;STRONG&gt;User Assignment&lt;/STRONG&gt; table.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 112px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-23.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;106&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;User Comparison.&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-24.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;107&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Full Comparison&lt;/STRONG&gt;, then &lt;STRONG&gt;Close&lt;/STRONG&gt; the dialog window.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-19-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;108&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Exit&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/5-25-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--283571562"&gt;Setup the Power Platform canvas app and flow&lt;/H3&gt;&lt;BR /&gt;
All on-premise components (SAP system, OPDG, and AD) are now configured properly for Kerberos-based principal propagation of the Azure AD-authenticated user in the Power Platform canvas app which triggers the Power Automate flow to call the SAP system.&lt;BR /&gt;
&lt;BR /&gt;
In this step, you will import the application components as a solution in your Power Platform environment and configure them according to your test lab setup. If you want to deploy to a new environment for this scenario, go to &lt;A href="https://admin.powerplatform.microsoft.com/environments" target="_blank" rel="nofollow noopener noreferrer"&gt;Power Platform admin center&lt;/A&gt; and create it.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;109&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Login&lt;/STRONG&gt; to Power Apps Studio at &lt;A href="https://make.powerapps.com" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;&lt;A href="https://make" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://make&lt;/A&gt; powerapps.com with your Power Platform developer user.&lt;BR /&gt;
&lt;BR /&gt;
From the top &lt;STRONG&gt;menu&lt;/STRONG&gt;, select the &lt;A href="https://learn.microsoft.com/en-us/power-platform/admin/environments-overview" target="_blank" rel="nofollow noopener noreferrer"&gt;environment&lt;/A&gt; to deploy the scenario components.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-1-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;110&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;Click &lt;STRONG&gt;Import solution&lt;/STRONG&gt; from the top menu bar.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-2-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 47px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 47px"&gt;111&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 47px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Browse&lt;/STRONG&gt; and select the file &lt;CODE&gt;SAPProductSearchSolution.zip&lt;/CODE&gt; from the &lt;A href="https://github.com/raepple/azure-scp-principal-propagation/tree/part7" target="_blank" rel="nofollow noopener noreferrer"&gt;Git repository's&lt;/A&gt; &lt;CODE&gt;/ProductSearchApp&lt;/CODE&gt; folder.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 47px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-3-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 108px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 108px"&gt;112&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 108px"&gt;Click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 108px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-5-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 66px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 66px"&gt;113&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 66px"&gt;Open the &lt;STRONG&gt;drop-down&lt;/STRONG&gt; box and select &lt;STRONG&gt;New connection&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 66px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-6-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;114&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the SAP ERP Connection dialog, select &lt;STRONG&gt;Azure AD integrated &lt;/STRONG&gt;as the &lt;STRONG&gt;Authentication Type&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
In the &lt;STRONG&gt;Choose a gateway&lt;/STRONG&gt; drop-down box, select your OPDG instance for this scenario.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Create&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-7.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 84px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 84px"&gt;115&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 84px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
The new connection requires authentication to your Azure AD tenant.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Fix connection&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 84px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-8-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 133px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 133px"&gt;116&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 133px"&gt;&lt;STRONG&gt;Sign-in&lt;/STRONG&gt; to your Azure AD tenant with your development user's account that you configured the SNC mapping in step 32 and AD mapping in step 82, and assigned the &lt;CODE&gt;PRODUCT_SEARCH_DEVELOPER&lt;/CODE&gt; role in step 105.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 133px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-9.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 57px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 57px"&gt;117&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 57px"&gt;Upon successful sign-in, &lt;STRONG&gt;switch back&lt;/STRONG&gt; to the previous browser tab.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 57px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-10-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;118&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Click &lt;STRONG&gt;Refresh&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-11.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 102px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 102px"&gt;119&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 102px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
The new connection is now selected by the import solution wizard.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Import&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 102px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-12.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;120&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Wait for the completion of the import as indicated by the green banner.&lt;BR /&gt;
&lt;BR /&gt;
Then &lt;STRONG&gt;select&lt;/STRONG&gt; the imported &lt;STRONG&gt;SAP Product Search&lt;/STRONG&gt; S&lt;STRONG&gt;olution&lt;/STRONG&gt; from the list.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-13-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 89px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 89px"&gt;121&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 89px"&gt;From the solution components, &lt;STRONG&gt;select&lt;/STRONG&gt; the &lt;STRONG&gt;SAPERPSettings&lt;/STRONG&gt; environment variable. This variable is used by the SAP ERP connector action in the Power Automate flow to configure the SAP system connection parameters. It is in JSON format.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 89px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-14-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 153px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 153px"&gt;122&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 153px"&gt;Click &lt;STRONG&gt;New value&lt;/STRONG&gt; to overwrite the default value.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 153px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-15.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 87px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 87px"&gt;123&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 87px"&gt;Enter the &lt;STRONG&gt;SAPERPSettings&lt;/STRONG&gt; environment variable's new value according to your lab setup and the example below. You can use the default value as a template in a text editor.&lt;BR /&gt;
&lt;PRE class="language-perl"&gt;&lt;CODE&gt;{&lt;BR /&gt;
  "AppServerHost": "&amp;lt;SAP system IP address or hostname, &lt;BR /&gt;
    e.g. 23.123.153.183&amp;gt;",&lt;BR /&gt;
  "Client": "&amp;lt;your client ID, e.g. 001&amp;gt;",&lt;BR /&gt;
  "SystemNumber": "&amp;lt;your system numner, e.g. 00",&lt;BR /&gt;
  "LogonType": "ApplicationServer",&lt;BR /&gt;
  "SncLibraryPath": "C:\\Program Files\\&lt;BR /&gt;
    On-premises data gateway\\sapcrypto.dll",&lt;BR /&gt;
  "SncPartnerName": "&amp;lt;SAP system's SNC name, &lt;BR /&gt;
    e.g. 'p:CN=A4H'&amp;gt;",&lt;BR /&gt;
  "SncQOP": "Default",&lt;BR /&gt;
  "SncSso": "On",&lt;BR /&gt;
  "SystemID": "&amp;lt;SAP system's ID, e.g. A4H&amp;gt;",&lt;BR /&gt;
  "UseSnc": "true"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Click &lt;STRONG&gt;Save&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 87px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-16-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 83px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 83px"&gt;124&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 83px"&gt;Select the &lt;STRONG&gt;SAP Product Search&lt;/STRONG&gt; canvas app from the solution.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 83px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-17.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 117px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 117px"&gt;125&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 117px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
The Power Apps Studio opens the SAP Product Search canvas app in edit mode.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Allow&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 117px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-14-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 126px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 126px"&gt;126&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 126px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;Power Automate&lt;/STRONG&gt; from the left-side navigation menu to list the flows used by the canvas app.&lt;BR /&gt;
&lt;BR /&gt;
From the list, &lt;STRONG&gt;select&lt;/STRONG&gt; the &lt;STRONG&gt;ellipsis ('…')&lt;/STRONG&gt; next to the &lt;STRONG&gt;GetProductDetailsFromSAP&lt;/STRONG&gt; flow.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Refresh&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 126px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-19.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 81px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 81px"&gt;127&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 81px"&gt;Click &lt;B&gt;Publish&lt;/B&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 81px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-20.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 83px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 83px"&gt;128&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 83px"&gt;Click &lt;STRONG&gt;Publish this version&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 83px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-21-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;129&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
You need to provide your application test user(s) access to the app.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Share&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-15-1-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;130&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter your application test user's name (e.g. "Jack Davis") in the &lt;STRONG&gt;search field.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click on the &lt;STRONG&gt;user account&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;&lt;/EM&gt;: Instead of configuring single users, you can also type "Everyone" in the &lt;STRONG&gt;search filed&lt;/STRONG&gt; and share the app with "Everyone in &amp;lt;tenant org&amp;gt;".&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-16.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;131&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Deactivate&lt;/STRONG&gt; the checkbox &lt;STRONG&gt;Send an email invitation to the user&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Share&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-17-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;132&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;STRONG&gt;Close&lt;/STRONG&gt; the &lt;STRONG&gt;Share&lt;/STRONG&gt; dialog box.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-18-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;133&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;Click the &lt;STRONG&gt;Copy link to clipboard&lt;/STRONG&gt; icon next to the app's &lt;STRONG&gt;Web link&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-19-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 42px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 42px"&gt;134&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 42px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Since the SAP Product Search app uses the SAP ERP Connector which is &lt;EM&gt;Premium tier&lt;/EM&gt; connector, the application test user requires a Power App license to use this app.&lt;BR /&gt;
&lt;BR /&gt;
In a new browser tab, open the &lt;STRONG&gt;Microsoft 365 admin center&lt;/STRONG&gt; at &lt;A href="https://admin.microsoft.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://admin.microsoft.com/&lt;/A&gt; and login as your Power Platform administrator.&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;Billing → Licenses&lt;/STRONG&gt; from the left-side navigation menu.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Microsoft Power App Plan 2 Trial&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 42px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-20-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 133px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 133px"&gt;135&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 133px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Assign licenses.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the search box, enter your application test user's name and select the user's account from the list.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Assign&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
You can now &lt;STRONG&gt;log out&lt;/STRONG&gt; from the Microsoft 365 admin center.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 133px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/6-21-scaled.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;136&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Similar to the canvas app, it is also required to set the user's permission to access the OPDG instance.&lt;BR /&gt;
&lt;BR /&gt;
Go to the &lt;STRONG&gt;Power Platform admin center&lt;/STRONG&gt; at &lt;A href="https://admin.powerplatform.microsoft.com" target="_blank" rel="nofollow noopener noreferrer"&gt;https://admin.powerplatform.microsoft.com&lt;/A&gt;&amp;nbsp;and login as your Power Platform admin user.&lt;BR /&gt;
&lt;BR /&gt;
Select &lt;STRONG&gt;Data (Preview)&lt;/STRONG&gt; from the left-side navigation menu and switch to the &lt;STRONG&gt;On-premises data gateway&lt;/STRONG&gt; tab.&lt;BR /&gt;
&lt;BR /&gt;
For the OPDG instance in your scenario, &lt;STRONG&gt;select&lt;/STRONG&gt; the &lt;STRONG&gt;ellipsis ('…')&lt;/STRONG&gt;. From the context menu, select &lt;STRONG&gt;Manage users&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-27.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;137&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the &lt;STRONG&gt;search field&lt;/STRONG&gt;, start entering your application test user's name.&lt;BR /&gt;
&lt;BR /&gt;
Select the user's&lt;STRONG&gt; account&lt;/STRONG&gt; from the list to &lt;STRONG&gt;add it&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-28.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;138&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Click &lt;STRONG&gt;Share&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-29.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--480085067"&gt;Testing the scenario&lt;/H3&gt;&lt;BR /&gt;
All required components are configured for testing the scenario in the following steps.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;139&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Login&lt;/STRONG&gt; to the domain on the workstation host with your application test user (e.g. CORP\jdavis).&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/05/1-8-1-1.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%"&gt;140&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%"&gt;Open a &lt;STRONG&gt;web browser&lt;/STRONG&gt; and &lt;STRONG&gt;paste&lt;/STRONG&gt; the URL copied in step 133 into the address field.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;141&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;Since you have synchronized your AD users with Azure AD Connect, you are &lt;STRONG&gt;single signed-on&lt;/STRONG&gt; with the application test user to your Azure AD tenant and the app is loaded.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-3.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 99px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 99px"&gt;142&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 99px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
The SAP ERP connector requires a connection on-behalf-of the authenticated user.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Allow&lt;/STRONG&gt; to give consent to the requested permission to use this connection.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 99px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-5.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 139px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 139px"&gt;143&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 139px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter a &lt;STRONG&gt;product ID&lt;/STRONG&gt; form the catalog in the entry field, e.g. AR-FB-1000.&lt;BR /&gt;
&lt;BR /&gt;
Click &lt;STRONG&gt;Search&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 139px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-4.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 105px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 105px"&gt;144&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 105px"&gt;The app triggers the flow which calls the SAP system on-behalf-of the Azure AD-authenticated user. The SAP ERP connector obtains a Kerberos ticket from Active Directory for the user found in the &lt;CODE&gt;msDS-cloudExtensionAttribute1&lt;/CODE&gt; attribute. Upon receiving the Kerberos ticket with the BAPI call, the SAP system is able to map the AD user via the SNC mapping to a local user in the system, for whom it checks the proper authorizations to invoke the BAPI. Finally, the response with the product details is returned to the Power Automate flow, which parses the response and sends the price information back to the canvas app.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 105px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-6.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;STRONG&gt;Congratulations&lt;/STRONG&gt;! You've successfully completed the scenario. The following sections provide additional information about optional settings to improve the end user's experience, configure for load balancing, and some troubleshooting tips.&lt;BR /&gt;
&lt;H3 id="toc-hId--676598572"&gt;Bypass the user consent&lt;/H3&gt;&lt;BR /&gt;
In step 142, the user has been asked to confirm the requested permissions of the SAP ERP Connector. In most enterprise scenarios, this user consent is usually not required, and can be bypassed with the following Powershell commands for Power apps administration:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;&lt;STRONG&gt;Step&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;STRONG&gt;Screenshot&lt;/STRONG&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 32px"&gt;145&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Start&lt;/STRONG&gt; a Windows Powershell as an administrator.&lt;BR /&gt;
&lt;BR /&gt;
Import the necessary modules using the following commands:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Install-Module -Name Microsoft.PowerApps.Administration.PowerShell&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Install-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Confirm&lt;/STRONG&gt; the questions with "Y".&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-1-1.jpg" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-2.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;146&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Provide your Power Platform administrator credentials using the following command:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Add-PowerAppsAccount&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-3.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;147&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;The command &lt;STRONG&gt;opens the prompt&lt;/STRONG&gt; to collect your Power Platform administrator credentials.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-4.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 14px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 14px"&gt;148&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 14px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Run the Power Apps cmdlet&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Get-AdminPowerAppEnvironment&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
and copy the value for your scenario's &lt;STRONG&gt;EnvironmentName&lt;/STRONG&gt; to a temporary textfile.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 14px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-5.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 28px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 28px"&gt;149&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 28px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Run the Power Apps cmdlet&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Get-AdminPowerApp -EnvironmentName &amp;lt;value from step 148&amp;gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
with the value obtained in the previous step.&lt;BR /&gt;
&lt;BR /&gt;
Copy the value for your app's &lt;STRONG&gt;AppName&lt;/STRONG&gt; to the temporary textfile.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 28px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-6.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 64px"&gt;&lt;BR /&gt;
&lt;TD style="width: 8.83053%;height: 64px"&gt;150&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 67.6953%;height: 64px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
With the two values for &lt;STRONG&gt;EnvironmentName&lt;/STRONG&gt; and &lt;STRONG&gt;AppName&lt;/STRONG&gt; run the command:&lt;BR /&gt;
&lt;BR /&gt;
&lt;CODE&gt;Set-AdminPowerAppApisToBypassConsent -EnvironmentName &amp;lt;value from step 148&amp;gt; -AppName &amp;lt;value from step 149&amp;gt;&lt;/CODE&gt;&lt;BR /&gt;
&lt;BR /&gt;
This command changes the &lt;CODE&gt;bypassConsent&lt;/CODE&gt; flag of the SAP Product Search app to &lt;STRONG&gt;true&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 23.4741%;height: 64px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-7.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--948343446"&gt;Configure Load Balancing via SAP Message Server&lt;/H3&gt;&lt;BR /&gt;
In step 123, the connection parameters are configured for a specific application server instance. While this setup is appropriate for development and testing purposes, it may not be the preferred choice in a production environment. There the SAP landscape usually runs an SAP Message Server which load-balances the RFC calls to multiple application servers.&lt;BR /&gt;
&lt;BR /&gt;
If you want to setup the scenario for load balancing via SAP Message Server, change the &lt;STRONG&gt;SAPERPSettings&lt;/STRONG&gt; environment variable according to the following template:&lt;BR /&gt;
&lt;PRE class="language-perl"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "MessageServerHost": "&amp;lt;SAP Message Server address or hostname, e.g. 23.123.153.183&amp;gt;",&lt;BR /&gt;
    "Client": "&amp;lt;your client ID, e.g. 001&amp;gt;",&lt;BR /&gt;
    "LogonType": "Group",&lt;BR /&gt;
    "MessageServerService": "&amp;lt;The service name or port number that the Message Server is listening under for load balancing requests, e.g. 3601&amp;gt;",&lt;BR /&gt;
    "SncLibraryPath": "C:\\Program Files\\On-premises data gateway\\sapcrypto.dll",&lt;BR /&gt;
    "SncPartnerName": "&amp;lt;SAP system's SNC name, e.g. 'p:CN=A4H'&amp;gt;",&lt;BR /&gt;
    "SncQOP": "Default",&lt;BR /&gt;
    "SncSso": "On",&lt;BR /&gt;
    "SystemID": "&amp;lt;SAP system's ID, e.g. A4H&amp;gt;",&lt;BR /&gt;
    "UseSnc": "true"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Here is an example of a valid connection string using SAP Message Server. You can use transaction &lt;CODE&gt;SMMS&lt;/CODE&gt; (Message Service Monitor) to find the correct value for parameter &lt;CODE&gt;MessageServerService&lt;/CODE&gt;:&lt;BR /&gt;
&lt;PRE class="language-perl"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "MessageServerHost": "20.123.153.183",&lt;BR /&gt;
    "Client": "001",&lt;BR /&gt;
    "LogonType": "Group",&lt;BR /&gt;
    "MessageServerService": "3601",&lt;BR /&gt;
    "SncLibraryPath": "C:\\Program Files\\On-premises data gateway\\sapcrypto.dll",&lt;BR /&gt;
    "SncPartnerName": "p:CN=A4H",&lt;BR /&gt;
    "SncQOP": "Default",&lt;BR /&gt;
    "SncSso": "On",&lt;BR /&gt;
    "SystemID": "A4H",&lt;BR /&gt;
    "UseSnc": "true"&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--1144856951"&gt;Troubleshooting&lt;/H3&gt;&lt;BR /&gt;
In complex integration scenarios across various system-, network- and technology-boundaries, troubleshooting usually starts with gathering information about &lt;EM&gt;what&lt;/EM&gt; the issue is and &lt;EM&gt;where&lt;/EM&gt; it occurs. Therefore the techniques in this last section start with troubleshooting the scenario from the user's perspective and then explain how to obtain detailed error traces from the system components along the end-to-end communication path.&lt;BR /&gt;
&lt;H4 id="toc-hId--1634773463"&gt;Debugging with the Power Platform tools&lt;/H4&gt;&lt;BR /&gt;
To starting debugging the application scenario, &lt;STRONG&gt;login&lt;/STRONG&gt; to &lt;A href="https://make.powerautomate.com" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;/A&gt;&lt;A href="https://make" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://make&lt;/A&gt; powerautomate.com with your Power Platform developer user. Select &lt;STRONG&gt;My flows&lt;/STRONG&gt; from the left-side navigation menu and click on the &lt;STRONG&gt;Run button&lt;/STRONG&gt; of the &lt;STRONG&gt;GetProductDetailsFromSAP&lt;/STRONG&gt; flow. You can enter a &lt;STRONG&gt;product ID&lt;/STRONG&gt; to search for in the entry field and click &lt;STRONG&gt;Run flow&lt;/STRONG&gt; to start a new instance of the flow (figure 4):&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/11-1-scaled.jpg" height="271" width="541" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Figure 4: &lt;EM&gt;Manually triggering the flow in the scenario&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
In the confirmation dialog box (figure 5), click the &lt;STRONG&gt;Flow Runs Page&lt;/STRONG&gt; link. This page shows the run history of the &lt;STRONG&gt;GetProductDetailsFromSAP&lt;/STRONG&gt; flow. Click on the fist item in the list to see the results from the last run. As shown in the following screenshot, the 3rd step Call &lt;STRONG&gt;SAP function (V2) - BAPI EPM PRODUCT GET DETAIL&lt;/STRONG&gt; failed with a &lt;EM&gt;BadGateway&lt;/EM&gt; error. By clicking on &lt;STRONG&gt;Show raw outputs&lt;/STRONG&gt; you can view more details about the underlying issue. The user who started the instance (in this case the Power Platform developer user) obviously didn't have the required permissions in the SAP system to call the BAPI according to the exception message:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/12-2-scaled.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Figure 5: &lt;EM&gt;Monitor flow run&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Lower-level issues such as Kerberos- or user-mapping-related problems are usually reported back to the flow as an &lt;STRONG&gt;InternalServerError &lt;/STRONG&gt;by the SAP ERP Connector. In this case you should take a closer look at the available error traces in the different log files.&lt;BR /&gt;
&lt;H4 id="toc-hId--1831286968"&gt;SNC and Kerberos troubleshooting&lt;/H4&gt;&lt;BR /&gt;
A good starting point for troubleshooting SNC and Kerberos is the &lt;A href="https://gad5158842f.us2.hana.ondemand.com/dtp/viewer/#/tree/1764/actions/22794" target="_blank" rel="nofollow noopener noreferrer"&gt;Guided Answers wizard for SNC Kerberos Configuration for SAP GUI troubleshooting.&lt;/A&gt; In addition, the following (non-complete) list of SAP Notes also provides resolutions for common SNC-related problems:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/1635019" target="_blank" rel="noopener noreferrer"&gt;1635019: No user exists with SNC name - canonical name not resolved&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/1696905" target="_blank" rel="noopener noreferrer"&gt;1696905: SNC name configuration to support Kerberos and Certificates&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/1848999" target="_blank" rel="noopener noreferrer"&gt;1848999: Central Note for CommonCryptoLib 8 (SAPCRYPTOLIB)&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/1878155" target="_blank" rel="noopener noreferrer"&gt;1878155: SNC Error Code A2210231: Kerberos ticket not yet valid&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/2265085" target="_blank" rel="noopener noreferrer"&gt;2265085: Unable to load GSS-API DLL sapcrypto.dll&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/2384027" target="_blank" rel="noopener noreferrer"&gt;2384027: Error A2210233:Kerberos ticket contains wrong service name target&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/2446327" target="_blank" rel="noopener noreferrer"&gt;2446327: SNC Error Code A221021D Server refuses offered key exchange algorithm&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;A href="https://me.sap.com/notes/2497505" target="_blank" rel="noopener noreferrer"&gt;2497505: SNC Error Code A2200210 Peer certificate verification failed - Kerberos configuration&lt;/A&gt;&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Turning on SNC traces for SAP NCo and the SAP system can further help with the root cause analysis:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;On the SAP system, login as the operating system administrator, and change to the directory where the SAP Cryptographic Library is loaded from, e.g &lt;CODE&gt;/usr/sap/&amp;lt;SID&amp;gt;/&amp;lt;INST&amp;gt;/exe&lt;/CODE&gt;, and create a new text file named &lt;CODE&gt;sectrace.ini&lt;/CODE&gt; with the following content:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;LEVEL=4&lt;BR /&gt;
DIRECTORY=&amp;lt;new-or-empty-subfolder&amp;gt;​&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;CODE&gt;DIRECTORY&lt;/CODE&gt; must be set to a valid folder name for the respective platform. It must be the subfolder of an existing one, and should be placed in a local drive. If &lt;CODE&gt;DIRECTORY&lt;/CODE&gt; doesn't exist it will be created. As an example, &lt;CODE&gt;DIRECTORY&lt;/CODE&gt; can be set on a Linux system to &lt;EM&gt;&lt;CODE&gt;/usr/sap/&amp;lt;SID&amp;gt;/&amp;lt;INST&amp;gt;/sectrace&lt;/CODE&gt;.&lt;BR /&gt;
&lt;/EM&gt;The following screenshot shows the traces generated in file &lt;CODE&gt;sec-disp+work-&amp;lt;nnnnnn&amp;gt;.trc&lt;/CODE&gt; by the SAP GUI login of the application test user in step 37:&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/4-8.jpg" /&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;To enable SNC tracing on the OPDG, open the &lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt; (see step 68) and add the following two lines to it:&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;ccl/trace/level=4&lt;BR /&gt;
ccl/trace/directory=C:\snctrc​&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Generated trace files can be found in the directory specified by the &lt;CODE&gt;ccl/trace/directory&lt;/CODE&gt; profile parameter.&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
As the size of the generated trace files may grow quickly and tracing also reduces the performance of the systems, it is recommended to remove &lt;CODE&gt;sectrace.ini&lt;/CODE&gt; and/or the &lt;A href="https://me.sap.com/notes/2338952" target="_blank" rel="noopener noreferrer"&gt;configuration profile parameters&lt;/A&gt; from &lt;CODE&gt;sapcrypto.ini&lt;/CODE&gt; once the troubleshooting activities are completed.&lt;BR /&gt;
&lt;BR /&gt;
An in-depth analysis of the Kerberos message exchange between OPDG and SAP is possible with &lt;A href="https://www.wireshark.org/download.html" target="_blank" rel="nofollow noopener noreferrer"&gt;Wireshark&lt;/A&gt;, a tool for capturing and analyzing network traffic. Install the tool on the OPDG host and follow the steps below to capture the Kerberos taffic of steps 10 to 14 from figure 2:&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%" border="1"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 66%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Launch &lt;STRONG&gt;Wireshark&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Select the network interface(s), e.g. &lt;STRONG&gt;Ethernet&lt;/STRONG&gt;, to capture traffic for, and click on &lt;STRONG&gt;Start capturing packets&lt;/STRONG&gt;.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 34%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/6-24.jpg" height="129" width="199" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 66%"&gt;&lt;STRONG&gt;Run&lt;/STRONG&gt; the application scenario (steps 139 to 144)&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 34%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/7-8.jpg" height="134" width="174" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 66%"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Enter "&lt;STRONG&gt;kerberos&lt;/STRONG&gt;" in the &lt;STRONG&gt;display filter&lt;/STRONG&gt; field and press &lt;STRONG&gt;Enter&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;BR /&gt;
In the captured messages filtered for the Kerberos protocol, look for any error messages.&lt;BR /&gt;
&lt;BR /&gt;
The screenshot shows the &lt;CODE&gt;TGS_REQ&lt;/CODE&gt; message (figure 2, step 12) with the user's service ticket for OPDG obtained in the previous step as an &lt;CODE&gt;additional-ticket&lt;/CODE&gt; in the request.&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 34%"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/8-9.jpg" height="129" width="178" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--2027800473"&gt;Collecting the logs from OPDG&lt;/H4&gt;&lt;BR /&gt;
Launch the OPDG app (see step 54) and sign-in as the Power Platform administrator. Select&amp;nbsp;&lt;STRONG&gt;Diagnostics&lt;/STRONG&gt; and click &lt;STRONG&gt;Export logs&lt;/STRONG&gt; as shown in figure 6:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/9-1.jpg" height="174" width="284" /&gt;&lt;/P&gt;&lt;BR /&gt;
Figure 6: &lt;EM&gt;Exporting OPDG logs&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Unzip the file that is saved to the &lt;CODE&gt;ODGLogs&lt;/CODE&gt; folder on your Windows desktop. Look for the most recent &lt;CODE&gt;GatewayErrors*&lt;/CODE&gt; file in the archive. The following screenshot shows the log file with an error message that the SAP Cryptographic Library could not be found in the OPDG installation directory:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/10-1.jpg" height="300" width="332" /&gt;&lt;/P&gt;&lt;BR /&gt;
Figure 7: &lt;EM&gt;OPDG log excerpt&lt;/EM&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-2070653318"&gt;Other common issues&lt;/H4&gt;&lt;BR /&gt;
Finally, table 2 contains a non-complete list of common error message in the scenario and suggests possible ways to resolve them.&lt;BR /&gt;
&lt;TABLE style="border-collapse: collapse;width: 100%"&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR style="height: 32px"&gt;&lt;BR /&gt;
&lt;TD style="width: 47.2675%;height: 32px"&gt;If you see this ...&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 53.0869%;height: 32px"&gt;... try this:&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 32px" valign="top"&gt;&lt;BR /&gt;
&lt;TD style="width: 47.2675%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
When signing on to the Power app, the error message PowerPINotAuthorizedException is shown:&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/1-6.jpg" /&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 53.0869%;height: 32px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
Go to Power Platform admin center at &lt;A href="https://admin.powerplatform.microsoft.com" target="_blank" rel="nofollow noopener noreferrer"&gt;https://admin.powerplatform.microsoft.com&lt;/A&gt; and login as your Power Platform admin user.&lt;BR /&gt;
&lt;BR /&gt;
Select Data (Preview) from the left-side navigation menu and switch to the On-premises data gateway tab.&lt;BR /&gt;
&lt;BR /&gt;
For the OPDG instance in your scenario, select the ellipsis ('…'). From the context menu, select Manage users.&lt;BR /&gt;
&lt;BR /&gt;
Check if the user you signed-on to the app is in the list of users assigned to the Connection Creator role of the gateway and that the SAP ERP Connection type is activated.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/2-4.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR style="height: 475px"&gt;&lt;BR /&gt;
&lt;TD style="width: 47.2675%;height: 475px"&gt;When executing the search, a &lt;STRONG&gt;No RFC authorization&lt;/STRONG&gt; error message is shown:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/3-3.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 53.0869%;height: 475px"&gt;&lt;BR /&gt;
&lt;BR /&gt;
An error in the app indicating an RFC authorization issue can be fixed by checking the correct role design (steps 83ff) and the assignment to the user (step 99).&lt;BR /&gt;
&lt;BR /&gt;
To troubleshoot authorization problems of the propagated principal in the backend start a system trace as the SAP admin with transaction &lt;STRONG&gt;ST01&lt;/STRONG&gt; as shown in the screenshot below. Select &lt;STRONG&gt;Authorization checks&lt;/STRONG&gt; from the Trace Components and click &lt;STRONG&gt;Trace on&lt;/STRONG&gt;.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/13.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Re-run the scenario and click &lt;STRONG&gt;Trace off&lt;/STRONG&gt;, then &lt;STRONG&gt;Anaysis&lt;/STRONG&gt;. On the next screen, enter "*" for the user name and click &lt;STRONG&gt;Start Reporting (F8)&lt;/STRONG&gt;:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/14-2-scaled.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
The orange-colored lines in the report show failed authorization checks due to missing permissions of the user in the system.&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD style="width: 47.2675%"&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;STRONG&gt;GatewayTimeout&lt;/STRONG&gt; caused by&amp;nbsp;&lt;STRONG&gt;SAP system connection timeout&lt;/STRONG&gt; with the message "&lt;STRONG&gt;partner '&amp;lt;IP address of SAP system&amp;gt;:48&amp;lt;instance number&amp;gt;' not reached&lt;/STRONG&gt;"&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/15-1.jpg" /&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;TD style="width: 53.0869%"&gt;Make sure that &lt;STRONG&gt;port 48&amp;lt;instance number&amp;gt;&lt;/STRONG&gt; (e.g. 4800) on the SAP system can be reached from the OPDG. In case you deployed a &lt;A href="https://cal.sap.com/" target="_blank" rel="noopener noreferrer"&gt;CAL instance&lt;/A&gt; on Azure, check the &lt;STRONG&gt;Network security group&lt;/STRONG&gt; (NSG) settings on the &lt;EM&gt;subnet&lt;/EM&gt; and &lt;EM&gt;network interface&lt;/EM&gt; level for corresponding rules to allow network traffic over this port as shown in the following screenshot:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/06/16-3-scaled.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;&lt;BR /&gt;
Table 2: &lt;EM&gt;Common error message and their possible resolution&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and/ba-p/13561150"/>
    <published>2023-06-19T13:52:16+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/from-zero-to-hero-security-coverage-with-microsoft-sentinel-for-your/ba-p/13553737</id>
    <title>From zero to hero security coverage with Microsoft Sentinel for your critical SAP security signals – Part 4</title>
    <updated>2023-07-06T10:42:19+02:00</updated>
    <author>
      <name>Martin-Pankraz</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/143781</uri>
    </author>
    <content>&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;span class="lia-unicode-emoji" title=":backhand_index_pointing_right:"&gt;👉🏿&lt;/span&gt;back to &lt;A href="https://blogs.sap.com/2023/05/22/from-zero-to-hero-security-coverage-with-microsoft-sentinel-for-your-critical-sap-security-signals-blog-series/" target="_blank" rel="noopener noreferrer"&gt;blog series&lt;/A&gt; or to GitHub &lt;A href="https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/SAP/Playbooks" target="_blank" rel="noopener nofollow noreferrer"&gt;repos&lt;/A&gt; with ready-to-run playbooks.&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;SPAN&gt;Dear community,&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;There are various problematic attack vectors for SAP backends, but only a few are as severe as losing access to the SAP audit log from your security tooling. In &lt;A href="https://blogs.sap.com/2023/05/23/from-zero-to-hero-security-coverage-with-microsoft-sentinel-for-your-critical-sap-security-signals-part-3/" target="_blank" rel="noopener noreferrer"&gt;part 3&lt;/A&gt; we discussed malicious deactivation of the SAP audit log. Now, what if the SAP RFC user to collect the audit log info gets locked, deleted, or disabled in any other way too?&lt;BR /&gt;&lt;BR /&gt;At that point you are &lt;STRONG&gt;fully blind&lt;/STRONG&gt; and might &lt;STRONG&gt;not even get the audit-log deactivation message anymore&lt;/STRONG&gt; if the attacker is fast.&lt;BR /&gt;&lt;BR /&gt;Today you will see an automated response flow to &lt;STRONG&gt;deal with that situation&lt;/STRONG&gt;. But wait!&lt;BR /&gt;&lt;BR /&gt;How about regular SAP or Sentinel Collector VM maintenance? How do we &lt;STRONG&gt;distinguish between normal operations and actual attacks?&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;Stay tuned – &lt;A href="https://learn.microsoft.com/azure/sap/center-sap-solutions/overview" target="_blank" rel="noopener nofollow noreferrer"&gt;Azure Center for SAP solutions&lt;/A&gt; (ACSS) comes to the rescue&lt;span class="lia-unicode-emoji" title=":dog:"&gt;🐕&lt;/span&gt;‍🦺&lt;span class="lia-unicode-emoji" title=":rescue_workers_helmet:"&gt;⛑&lt;/span&gt;️ to wade through the false positives and emphasize the impactful true positives.&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/collector-attack-overview.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;Fig.1 Overview remediation workflow for the Sentinel Collector attack scenario powered by ACSS&lt;/P&gt;&lt;H1 id="toc-hId-832999307"&gt;Cyber-attacks require the quickest possible reaction&lt;/H1&gt;&lt;P&gt;The &lt;A href="https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/SAP/Playbooks/SAPCollectorRemediate-STD" target="_blank" rel="noopener nofollow noreferrer"&gt;provided playbook&lt;/A&gt; posts an &lt;A href="https://adaptivecards.io/" target="_blank" rel="noopener nofollow noreferrer"&gt;adaptive card&lt;/A&gt; to Microsoft Teams with a color-coded message &lt;STRONG&gt;scoring the likelihood of an attack&lt;/STRONG&gt; based on the signals coming from &lt;A href="https://learn.microsoft.com/azure/sentinel/sap/sap-solution-log-reference" target="_blank" rel="noopener nofollow noreferrer"&gt;the Sentinel Collector for SAP&lt;/A&gt;, and the SAP system state. The Azure Center for SAP Solutions provides a set of managed APIs to query such info in a scalable and secure way.&lt;BR /&gt;&lt;BR /&gt;The playbook is wired to listen to the pre-built Sentinel alert “&lt;A href="https://learn.microsoft.com/en-us/azure/sentinel/monitor-sap-system-health#use-an-alert-rule-template" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP - Data collection health check&lt;/A&gt;”. But you may customize yourself to whatever scenario you need.&lt;BR /&gt;&lt;BR /&gt;In the scenario depicted in fig.1 the Sentinel Collector for SAP is healthy while SAP is running fine too.&lt;BR /&gt;&lt;BR /&gt;That causes the playbook to &lt;STRONG&gt;raise the attack likelihood&lt;/STRONG&gt; based on the alert “RFC LOGON FAILURE” to medium. After all there is still a little chance that someone unintentionally performed a breaking user setup change. Up to you to configure this as “high” or “&lt;STRONG&gt;OMG run for your lives&lt;/STRONG&gt;” based on how likely you think that is in your landscape.&lt;BR /&gt;&lt;BR /&gt;See &lt;A href="https://learn.microsoft.com/azure/sap/center-sap-solutions/quickstart-register-system-cli" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt; how to &lt;STRONG&gt;register your SAP system with ACSS&lt;/STRONG&gt; and be ready for upcoming out of the box integrations.&lt;/P&gt;&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;In case the &lt;STRONG&gt;Collector or SAP would have been down&lt;/STRONG&gt;, the &lt;STRONG&gt;likelihood of attack&lt;/STRONG&gt; gets set to &lt;STRONG&gt;low&lt;/STRONG&gt; with the suggestion to double check and investigate further through Sentinel, since this likely a planned maintenance or an outage.&lt;BR /&gt;&lt;BR /&gt;See &lt;A href="https://www.youtube.com/watch?v=IO1cNyAJcYI&amp;amp;t=1510s" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt; how to &lt;STRONG&gt;communicate SAP maintenance via Microsoft Teams&lt;/STRONG&gt; in an interactive way. &lt;A href="https://youtu.be/IO1cNyAJcYI?t=1667" target="_blank" rel="noopener nofollow noreferrer"&gt;Integration with the SharePoint list&lt;/A&gt; using the SID known to Sentinel enables you to enhance the presented flow further.&lt;BR /&gt;&lt;BR /&gt;What else would you like to see here? Reach out or let me know in the comments.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/collector-attack-card.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;Fig.2 Screenshot of adaptive card with Sentinel’s SAP incident in Microsoft Teams&lt;/P&gt;&lt;P&gt;As per the inferred info from the various sources, the playbook suggests a couple of options to remediate the situation. This is customizable according to your needs.&lt;/P&gt;&lt;H2 id="toc-hId-765568521"&gt;Let the community know what additional remediation paths you would like to see here. Happy to dive deeper.&lt;/H2&gt;&lt;P&gt;The simplest option addresses the possible process glitch on the Collector VM. Hit the corresponding button (see lower section on above screenshot) to trigger an automatic restart of the VM.&lt;/P&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/collector-attack-vm-restart.png" border="0" width="342" height="393" /&gt;&lt;/P&gt;&lt;P&gt;Fig.3 Screenshot of Sentinel Collector VM restart logic&lt;BR /&gt;&lt;BR /&gt;This suggested remediations (see fig.2) are a natural fit for the upcoming &lt;A href="https://www.microsoft.com/security/business/ai-machine-learning/microsoft-security-copilot" target="_blank" rel="noopener nofollow noreferrer"&gt;Microsoft Security Copilot&lt;/A&gt;. Will get into details once it gets more widely available.&lt;/P&gt;&lt;H2 id="toc-hId-569055016"&gt;The true power lies in the correlation of multiple signals&amp;nbsp; in addition to the ACSS metadata leading to the event of the SAP Collector being "blinded"&lt;/H2&gt;&lt;P&gt;&lt;IMG src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/collector-attack-correlation.png" border="0" /&gt;&lt;/P&gt;&lt;P&gt;Fig.4 Screenshot from Sentinel security video series about multi-staged attacks to SAP&lt;/P&gt;&lt;P&gt;In the above scenario you can see a sequence of alerts painting the &lt;STRONG&gt;larger picture of the attack&lt;/STRONG&gt; from RDP activity to login attempts in various places leading to a successful data download from SAP sending the file to an unknown IP address. In addition to that &lt;A href="https://learn.microsoft.com/defender/threat-intelligence/what-is-microsoft-defender-threat-intelligence-defender-ti" target="_blank" rel="noopener nofollow noreferrer"&gt;Microsoft Defender&lt;/A&gt; already compiled &lt;STRONG&gt;which attacker group was responsible&lt;/STRONG&gt; based on the attack footprint, techniques and tools used.&lt;BR /&gt;&lt;BR /&gt;See the full video &lt;A href="https://www.youtube.com/watch?v=JcPleCK5AJE&amp;amp;t=652s" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;&lt;H1 id="toc-hId-243458792"&gt;Additional automation scenarios&lt;/H1&gt;&lt;P&gt;Another popular RFC attack vector (&lt;A href="https://wiki.scn.sap.com/wiki/display/Security/Note+3089413+-+Capture-replay+vulnerability+in+SAP+NetWeaver+AS+for+ABAP+and+ABAP+Platform" target="_blank" rel="noopener noreferrer"&gt;Capture-Replay vulnerability&lt;/A&gt; in NetWeaver AS for ABAP; SAP security Note &lt;A href="https://me.sap.com/notes/3089413/E" target="_blank" rel="noopener noreferrer"&gt;3089413&lt;/A&gt;) can be addressed like &lt;A href="https://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-capture-replay-vulnerabilities-amp-exploits-with-the/ba-p/3727644" target="_blank" rel="noopener nofollow noreferrer"&gt;this&lt;/A&gt;. How about blocking the user corresponding to that new SAP system connection? Have a look at &lt;A href="https://blogs.sap.com/2023/05/22/from-zero-to-hero-security-coverage-with-microsoft-sentinel-for-your-critical-sap-security-signals-youre-gonna-hear-me-soar-part-1/" target="_blank" rel="noopener noreferrer"&gt;part 1&lt;/A&gt; of the series.&lt;BR /&gt;&lt;BR /&gt;Last weeks publication in the &lt;A href="https://www.heise.de/news/SAP-Authentifizierungs-Konzept-mit-Maengeln-9203990.html" target="_blank" rel="noopener nofollow noreferrer"&gt;German SAP security tech press&lt;/A&gt; re-inforces the need to deal with RFC vulnerabilites. Would you like to get the recommended security setting change for the function module "&lt;SPAN class=""&gt;RFC_TRUSTED_SYSTEM_SECURITY&lt;/SPAN&gt;" to be performed automatically from such a workflow? Or would you consider that too high a risk because it could be used to attack from a different angle?&lt;BR /&gt;&lt;BR /&gt;Part 4 concludes the first wave of my blog series.&lt;BR /&gt;&lt;BR /&gt;Looking to you now to request additional scenarios and share your own as &lt;A href="https://github.com/Azure/Azure-Sentinel" target="_blank" rel="noopener nofollow noreferrer"&gt;Pull Requests&lt;/A&gt; on GitHub.&lt;/P&gt;&lt;H1 id="toc-hId-46945287"&gt;Final words&lt;/H1&gt;&lt;P&gt;That’s a wrap &lt;span class="lia-unicode-emoji" title=":burrito:"&gt;🌯&lt;/span&gt;today you saw another SAP security automation scenario in action. We &lt;A href="https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/SAP/Playbooks/SAPCollectorRemediate-STD" target="_blank" rel="noopener nofollow noreferrer"&gt;deployed a playbook&lt;/A&gt; that &lt;STRONG&gt;scores potential attacks to the audit log ingestion pipeline of Microsoft Sentinel&lt;/STRONG&gt;. The required signals to determine the severity of the alert are fed by &lt;A href="https://learn.microsoft.com/azure/sap/center-sap-solutions/overview" target="_blank" rel="noopener nofollow noreferrer"&gt;Azure Center for SAP solutions&lt;/A&gt; to get reliable information about the operational state of SAP.&lt;BR /&gt;&lt;BR /&gt;In case all involved systems are up and running while only audit log ingestion is impacted, there is a considerable chance for an ongoing attack. The playbook offers&lt;STRONG&gt; pre-configured actions to act immediately directly from Microsoft Teams&lt;/STRONG&gt;.&lt;BR /&gt;&lt;BR /&gt;That &lt;STRONG&gt;brings down the time to action&lt;/STRONG&gt; while avoiding to “shoot” from the hip with security incidents when SAP is just down for maintenance. Whooza, whoooza Sentinel. Nothing to worry about 🧘🏻 ☮&lt;BR /&gt;&lt;BR /&gt;This integration pattern overall is &lt;STRONG&gt;applicable to any SAP API&lt;/STRONG&gt;. Got another SAP threat at your hands that needs automatic remediation? Let me know in the comments or reach out directly.&lt;BR /&gt;&lt;BR /&gt;Cheers&lt;BR /&gt;Martin&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/from-zero-to-hero-security-coverage-with-microsoft-sentinel-for-your/ba-p/13553737"/>
    <published>2023-07-06T10:42:19+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/call-node-js-or-python-functions-from-abap/ba-p/13572286</id>
    <title>Call Node.js or Python Functions from ABAP</title>
    <updated>2023-08-25T16:45:09+02:00</updated>
    <author>
      <name>Srdjan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/174007</uri>
    </author>
    <content>Node.js rich ecosystem offers plenty of functions and utilities. Using &lt;A href="https://github.com/SAP/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;node-rfc&lt;/A&gt; server bindings, these assets can be consumed from ABAP, just like standard ABAP functions. SAP Open Source &lt;A href="https://github.com/SAP/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;node-rfc&lt;/A&gt; connector and &lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;SAP NW RFC SDK Library&lt;/A&gt; make it possible.&lt;BR /&gt;
&lt;BR /&gt;
For more info check the &lt;A href="https://github.com/SAP/node-rfc/blob/main/doc/usage.md" target="_blank" rel="nofollow noopener noreferrer"&gt;node-rfc server documentation&lt;/A&gt; and server examples. Example given here is for Node.js platform and it works the same way with Python, using &lt;A href="http://sap.github.io/PyRFC/server.html" target="_blank" rel="nofollow noopener noreferrer"&gt;PyRFC&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
Background RFC protocol is currently supported for Python and work in progress for Node.js.&lt;BR /&gt;
&lt;BR /&gt;
Node.js server source code: &lt;A class="Link--primary" href="https://github.com/SAP/node-rfc/blob/main/examples/server-test-blog.mjs" aria-describedby="item-type-10" target="_blank" rel="nofollow noopener noreferrer"&gt;server-test-blog.mjs&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
ABAP client source code: &lt;A class="Link--primary" href="https://github.com/SAP/node-rfc/blob/main/examples/zserver_stfc_struct.abap" aria-describedby="item-type-32" target="_blank" rel="nofollow noopener noreferrer"&gt;zserver_stfc_struct.abap&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-963894626"&gt;How it works?&lt;/H2&gt;&lt;BR /&gt;
ABAP program can call an ABAP function in Node.js system, over SAP RFC protocol, just like when that function would be in ABAP system. The node-rfc server will route the ABAP RFC call to JavaScript function, registered for serving that ABAP function calls. ABAP function call parameters are automatically transformed to JavaScript and registered JavaScriot function is invoked. After JavaScript function is completed, result is&amp;nbsp; automatically transformed to ABAP format and send back to ABAP client. All standard ABAP RFC call parameters can be used, like ABAP variable (JavaScript variable), ABAP structure (JavaScript "plain" object) or ABAP table (JavaScript array of "plain" objects).&lt;BR /&gt;
&lt;BR /&gt;
Rather then manually defining ABAP interface the node-rfc server function, the node-rfc can re-use the signature of already existing ABAP function, or empty ABAP function can be created, just to define ABAP function interface for node-rfc server function..&lt;BR /&gt;
&lt;BR /&gt;
Let try it in real systems, a notebook with Node.js supported LTS release and any new or old ABAP system.&lt;BR /&gt;
&lt;H2 id="toc-hId-767381121"&gt;ABAP function module signature for Node.js function&lt;/H2&gt;&lt;BR /&gt;
Let use the interface of ABAP function STFC_STRUCTURE, to call JavaScript function which we will create. The STFC_STRUCTURE expects one input structure, IMPORTSTRUCT and returns one variable, the RESPTEXT string and one structure, ECHOSTRUCT. There is also a table parameter RFCTABLE:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;FUNCTION STFC_STRUCTURE.&lt;BR /&gt;
*"----------------------------------------------------------------------&lt;BR /&gt;
*"*"Lokale Schnittstelle:&lt;BR /&gt;
*"       IMPORTING&lt;BR /&gt;
*"             VALUE(IMPORTSTRUCT) LIKE  RFCTEST STRUCTURE  RFCTEST&lt;BR /&gt;
*"       EXPORTING&lt;BR /&gt;
*"             VALUE(ECHOSTRUCT) LIKE  RFCTEST STRUCTURE  RFCTEST&lt;BR /&gt;
*"             VALUE(RESPTEXT) LIKE  SY-LISEL&lt;BR /&gt;
*"       TABLES&lt;BR /&gt;
*"              RFCTABLE STRUCTURE  RFCTEST&lt;BR /&gt;
*"----------------------------------------------------------------------&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Here is our Node.js function, to be called from ABAP using these parameters:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;function my_stfc_structure(request_context, abap_input) {&lt;BR /&gt;
  // inspect request context&lt;BR /&gt;
  const attributes = request_context["connection_attributes"];&lt;BR /&gt;
  console.log(&lt;BR /&gt;
    "[js] my_stfc_structure context:",&lt;BR /&gt;
    attributes["sysId"], attributes["client"], attributes["user"], attributes["progName"]);&lt;BR /&gt;
  console.log("[js] my_stfc_structure input:", abap_input.IMPORTSTRUCT);&lt;BR /&gt;
  &lt;BR /&gt;
  // prepare response for ABAP client&lt;BR /&gt;
  const echostruct = abap_input.IMPORTSTRUCT;&lt;BR /&gt;
  echostruct.RFCINT1 = 2 * echostruct.RFCINT1;&lt;BR /&gt;
  echostruct.RFCINT2 = 3 * echostruct.RFCINT2;&lt;BR /&gt;
  echostruct.RFCINT4 = 4 * echostruct.RFCINT4;&lt;BR /&gt;
  const abap_output = {&lt;BR /&gt;
    ECHOSTRUCT: echostruct,&lt;BR /&gt;
    RESPTEXT: `~~~ Node server here ~~~`,&lt;BR /&gt;
  };&lt;BR /&gt;
  console.log("[js] my_stfc_structure response:", abap_output);&lt;BR /&gt;
  &lt;BR /&gt;
  // return response data&lt;BR /&gt;
  return abap_output;&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Here is Node.js function call from ABAP client, from ABAP test report:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;call function 'STFC_STRUCTURE' destination 'NWRFC_SERVER_OS'&lt;BR /&gt;
  exporting&lt;BR /&gt;
    importstruct          = ls_struct&lt;BR /&gt;
  importing&lt;BR /&gt;
    echostruct            = ls_struct&lt;BR /&gt;
    resptext              = lv_resp&lt;BR /&gt;
  tables&lt;BR /&gt;
    rfctable              = lt_table&lt;BR /&gt;
  exceptions&lt;BR /&gt;
    communication_failure = 1 message lv_error_message&lt;BR /&gt;
    system_failure        = 2 message lv_error_message.&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
To make this ABAP function call into Node.js work just like standard ABAP function call, following steps shall be done, covered in follow-up sections in detail&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP system: Configure RFC destination for node-rfc server&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Node.js system: Configure node-rfc server connections to ABAP system&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Node.js system: Create Node.js function to be called from ABAP and launch the server&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;ABAP system: Call Node.js function&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-570867616"&gt;Configure RFC destination for node-rfc server&lt;/H2&gt;&lt;BR /&gt;
Using transaction SM59 create RFC destination of type TCP/IP connection ("T"), like for example&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/sm59-nwrfc_server_os.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;RFC destination configuration - technical settings&lt;/P&gt;&lt;BR /&gt;
If bgRFC protocol shall be supported by node-rfc server, configure the basXML serializer option here:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/sm59-bgRFC.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;RFC destinatin configuration - bgRFC support&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-374354111"&gt;Configure node-rfc server connections for ABAP system&lt;/H2&gt;&lt;BR /&gt;
node-rfc server requires two RFC destinations for ABAP system, configured in sapnwrfc.ini file in Node.js system.&lt;BR /&gt;
&lt;BR /&gt;
The first destination, "MME", is RFC client destination, the node-rfc can use to call ABAP functions. This client connection is used by node-rfc server to obtain ABAP STFC_STRUCTURE function definition, so that node-rfc server can automatically transform ABAP STFC_STRUCTURE call data to JavaScript and vice versa.&lt;BR /&gt;
&lt;BR /&gt;
The second destination, "MME_GATEWAY", is RFC server destination, open after server is launched and used for listening on ABAP client requests.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;sapnwrfc.ini&lt;/STRONG&gt;&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;DEST=MME&lt;BR /&gt;
USER=demo&lt;BR /&gt;
PASSWD=welcome&lt;BR /&gt;
ASHOST=system51&lt;BR /&gt;
SYSNR=00&lt;BR /&gt;
CLIENT=620&lt;BR /&gt;
LANG=EN&lt;BR /&gt;
TRACE=0&lt;BR /&gt;
&lt;BR /&gt;
DEST=MME_GATEWAY&lt;BR /&gt;
GWSERV=sapgw00&lt;BR /&gt;
GWHOST=coevi51&lt;BR /&gt;
PROGRAM_ID=RFCSERVER&lt;BR /&gt;
REG_COUNT=1&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-306923325"&gt;Start node-rfc server&lt;/H3&gt;&lt;BR /&gt;
After &lt;A href="https://github.com/SAP/node-rfc/blob/main/README.md#requirements" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP NW RFC SDK binaries&lt;/A&gt; are downloaded and installed on your Node.js system, you can create empty folder and install node-rfc&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;mkdir server&lt;BR /&gt;
cd server&lt;BR /&gt;
npm init -y&lt;BR /&gt;
npm install node-rfc&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now the first server test can be done, to verify ABAP system connections. Create &lt;STRONG&gt;sapnwrfc.ini&lt;/STRONG&gt; file in project root directory and create test script, like:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;import {RfcLoggingLevel, Server} from "node-rfc";&lt;BR /&gt;
&lt;BR /&gt;
// Create server instance, initially inactive&lt;BR /&gt;
const server = new Server({&lt;BR /&gt;
  serverConnection: { dest: "MME_GATEWAY" },&lt;BR /&gt;
  clientConnection: { dest: "MME" },&lt;BR /&gt;
  // Server options are optional&lt;BR /&gt;
  serverOptions: {&lt;BR /&gt;
    logLevel: RfcLoggingLevel.error,&lt;BR /&gt;
    // authHandler: authHandler,&lt;BR /&gt;
  },&lt;BR /&gt;
});&lt;BR /&gt;
&lt;BR /&gt;
(async () =&amp;gt; {&lt;BR /&gt;
  try {&lt;BR /&gt;
    // Start the server&lt;BR /&gt;
    await server.start();&lt;BR /&gt;
    console.log(&lt;BR /&gt;
      `[js] Server alive: ${server.alive} client handle: ${server.client_connection}`,&lt;BR /&gt;
      `server handle: ${server.server_connection}`&lt;BR /&gt;
    );&lt;BR /&gt;
  } catch (ex) {&lt;BR /&gt;
    // Catch errors, if any&lt;BR /&gt;
    console.error(ex);&lt;BR /&gt;
  }&lt;BR /&gt;
})();&lt;BR /&gt;
&lt;BR /&gt;
// Close the server after 10 seconds&lt;BR /&gt;
let seconds = 10;&lt;BR /&gt;
&lt;BR /&gt;
const tick = setInterval(() =&amp;gt; {&lt;BR /&gt;
  console.log("tick", --seconds);&lt;BR /&gt;
  if (seconds &amp;lt;= 0) {&lt;BR /&gt;
    server.stop(() =&amp;gt; {&lt;BR /&gt;
      clearInterval(tick);&lt;BR /&gt;
      console.log("bye!");&lt;BR /&gt;
    });&lt;BR /&gt;
  }&lt;BR /&gt;
}, 1000);&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now open again the NWRFC_SERVER_OS RFC destination using SM59 transaction and find "Connection Test" button&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/sm59-connection-test.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;RFC destination - connection test&lt;/P&gt;&lt;BR /&gt;
Start your test script in Node.js system and after server alive message press the "Connection Test" button. When RFC connection with ABAP system is working, the output looks like this:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/sm59-connection-test-output.png" height="278" width="517" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;RFC destination connection test output&lt;/P&gt;&lt;BR /&gt;
Now when RFC connectivity is working let create Node.js function and call it from ABAP.&lt;BR /&gt;
&lt;H2 id="toc-hId--18672899"&gt;Create Node.js function to be called from ABAP and launch the server&lt;/H2&gt;&lt;BR /&gt;
Let add "my_stfc_structure" JavaScript server function, to receive ABAP calls of STFC_STRUCTURE function in Node.js system. Two additions are required in our test script, the server function implementation and registration.&lt;BR /&gt;
&lt;BR /&gt;
Server function requires nothing special for node-rfc server, it shall implement only "plain" logic to calculate the response for ABAP client. Also promise can be returned.&lt;BR /&gt;
&lt;BR /&gt;
The first parameter is request_context, just in case the function implementation shall consider it. The second parameter is JavaScript object with ABAP parameters, as defined by ABAP STFC_STRUCTURE function signature.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;// Server function&lt;BR /&gt;
function my_stfc_structure(request_context, abap_input) {&lt;BR /&gt;
  const connection_attributes = request_context["connection_attributes"];&lt;BR /&gt;
  console.log(&lt;BR /&gt;
    "[js] my_stfc_structure context:",&lt;BR /&gt;
    connection_attributes["sysId"],&lt;BR /&gt;
    connection_attributes["client"],&lt;BR /&gt;
    connection_attributes["user"],&lt;BR /&gt;
    connection_attributes["progName"]&lt;BR /&gt;
  );&lt;BR /&gt;
  console.log("[js] my_stfc_structure input:", abap_input.IMPORTSTRUCT);&lt;BR /&gt;
  const echostruct = abap_input.IMPORTSTRUCT;&lt;BR /&gt;
  echostruct.RFCINT1 = 2 * echostruct.RFCINT1;&lt;BR /&gt;
  echostruct.RFCINT2 = 3 * echostruct.RFCINT2;&lt;BR /&gt;
  echostruct.RFCINT4 = 4 * echostruct.RFCINT4;&lt;BR /&gt;
  const abap_output = {&lt;BR /&gt;
    ECHOSTRUCT: echostruct,&lt;BR /&gt;
    RESPTEXT: `~~~ Node server here ~~~`,&lt;BR /&gt;
  };&lt;BR /&gt;
&lt;BR /&gt;
  console.log("[js] my_stfc_structure response:", abap_output);&lt;BR /&gt;
  return abap_output;&lt;BR /&gt;
}&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The server function is registered using node-rfc server "addFuncion" method, telling the server to route ABAP STFC_STRUCTURE function calls to JavaScript function "my_stfc_structure":&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt; server.addFunction("STFC_STRUCTURE", my_stfc_structure);&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
ABAP data transformations to/from JavaScript are done by node-rfc server automatically.&lt;BR /&gt;
&lt;BR /&gt;
Our test script is now ready and the node-rfc server can be started, to serve ABAP client calls:&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;import { RfcLoggingLevel, Server } from "node-rfc";&lt;BR /&gt;
&lt;BR /&gt;
// Create server instance, initially inactive&lt;BR /&gt;
const server = new Server({&lt;BR /&gt;
  serverConnection: { dest: "MME_GATEWAY" },&lt;BR /&gt;
  clientConnection: { dest: "MME" },&lt;BR /&gt;
  // Server options are optional&lt;BR /&gt;
  serverOptions: {&lt;BR /&gt;
    logLevel: RfcLoggingLevel.error,&lt;BR /&gt;
    // authHandler: authHandler,&lt;BR /&gt;
  },&lt;BR /&gt;
});&lt;BR /&gt;
&lt;BR /&gt;
// Server function&lt;BR /&gt;
function my_stfc_structure(request_context, abap_input) {&lt;BR /&gt;
  const connection_attributes = request_context["connection_attributes"];&lt;BR /&gt;
  console.log(&lt;BR /&gt;
    "[js] my_stfc_structure context:",&lt;BR /&gt;
    connection_attributes["sysId"],&lt;BR /&gt;
    connection_attributes["client"],&lt;BR /&gt;
    connection_attributes["user"],&lt;BR /&gt;
    connection_attributes["progName"]&lt;BR /&gt;
  );&lt;BR /&gt;
  console.log("[js] my_stfc_structure input:", abap_input.IMPORTSTRUCT);&lt;BR /&gt;
  const echostruct = abap_input.IMPORTSTRUCT;&lt;BR /&gt;
  echostruct.RFCINT1 = 2 * echostruct.RFCINT1;&lt;BR /&gt;
  echostruct.RFCINT2 = 3 * echostruct.RFCINT2;&lt;BR /&gt;
  echostruct.RFCINT4 = 4 * echostruct.RFCINT4;&lt;BR /&gt;
  const abap_output = {&lt;BR /&gt;
    ECHOSTRUCT: echostruct,&lt;BR /&gt;
    RESPTEXT: `~~~ Node server here ~~~`,&lt;BR /&gt;
  };&lt;BR /&gt;
&lt;BR /&gt;
  console.log("[js] my_stfc_structure response:", abap_output);&lt;BR /&gt;
  return abap_output;&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
(async () =&amp;gt; {&lt;BR /&gt;
  try {&lt;BR /&gt;
    // Register server function&lt;BR /&gt;
    server.addFunction("STFC_STRUCTURE", my_stfc_structure);&lt;BR /&gt;
    console.log(&lt;BR /&gt;
      `[js] Node.js function '${my_stfc_structure.name}'`,&lt;BR /&gt;
      "registered as ABAP 'STFC_STRUCTURE' function"&lt;BR /&gt;
    );&lt;BR /&gt;
    // Start the server&lt;BR /&gt;
    await server.start();&lt;BR /&gt;
    console.log(&lt;BR /&gt;
      `[js] Server alive: ${server.alive} client handle: ${server.client_connection}`,&lt;BR /&gt;
      `server handle: ${server.server_connection}`&lt;BR /&gt;
    );&lt;BR /&gt;
  } catch (ex) {&lt;BR /&gt;
    // Catch errors, if any&lt;BR /&gt;
    console.error(ex);&lt;BR /&gt;
  }&lt;BR /&gt;
})();&lt;BR /&gt;
&lt;BR /&gt;
// Close the server after 10 seconds&lt;BR /&gt;
let seconds = 10;&lt;BR /&gt;
&lt;BR /&gt;
const tick = setInterval(() =&amp;gt; {&lt;BR /&gt;
  console.log("tick", --seconds);&lt;BR /&gt;
  if (seconds &amp;lt;= 0) {&lt;BR /&gt;
    server.stop(() =&amp;gt; {&lt;BR /&gt;
      clearInterval(tick);&lt;BR /&gt;
      console.log("bye!");&lt;BR /&gt;
    });&lt;BR /&gt;
  }&lt;BR /&gt;
}, 1000);&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
When test script is started in Node.js system and ABAP test report calls STFC_STRUCTURE function in Node.js system, the test script output looks like:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;ts-node ci/test/server-test.ts                                                                          (py3.11.4)  ✘ 1 main ◼&lt;BR /&gt;
[js] Node.js function 'my_stfc_structure' registered as ABAP 'STFC_STRUCTURE' function&lt;BR /&gt;
[js] Server alive: false client handle: 5554800128 server handle: 0&lt;BR /&gt;
tick 9&lt;BR /&gt;
tick 8&lt;BR /&gt;
[js] my_stfc_structure context: MME 620 D037732 ZSERVER_STFC_STRUCT&lt;BR /&gt;
[js] my_stfc_structure input: {&lt;BR /&gt;
  RFCFLOAT: 0,&lt;BR /&gt;
  RFCCHAR1: '',&lt;BR /&gt;
  RFCINT2: 2,&lt;BR /&gt;
  RFCINT1: 1,&lt;BR /&gt;
  RFCCHAR4: '',&lt;BR /&gt;
  RFCINT4: 4,&lt;BR /&gt;
  RFCHEX3: &amp;lt;Buffer 00 00 00&amp;gt;,&lt;BR /&gt;
  RFCCHAR2: '',&lt;BR /&gt;
  RFCTIME: '000000',&lt;BR /&gt;
  RFCDATE: '00000000',&lt;BR /&gt;
  RFCDATA1: '',&lt;BR /&gt;
  RFCDATA2: ''&lt;BR /&gt;
}&lt;BR /&gt;
[js] my_stfc_structure response: {&lt;BR /&gt;
  ECHOSTRUCT: {&lt;BR /&gt;
    RFCFLOAT: 0,&lt;BR /&gt;
    RFCCHAR1: '',&lt;BR /&gt;
    RFCINT2: 6,&lt;BR /&gt;
    RFCINT1: 2,&lt;BR /&gt;
    RFCCHAR4: '',&lt;BR /&gt;
    RFCINT4: 16,&lt;BR /&gt;
    RFCHEX3: &amp;lt;Buffer 00 00 00&amp;gt;,&lt;BR /&gt;
    RFCCHAR2: '',&lt;BR /&gt;
    RFCTIME: '000000',&lt;BR /&gt;
    RFCDATE: '00000000',&lt;BR /&gt;
    RFCDATA1: '',&lt;BR /&gt;
    RFCDATA2: ''&lt;BR /&gt;
  },&lt;BR /&gt;
  RESPTEXT: '~~~ Node server here ~~~'&lt;BR /&gt;
}&lt;BR /&gt;
tick 7&lt;BR /&gt;
tick 6&lt;BR /&gt;
tick 5&lt;BR /&gt;
^C&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--215186404"&gt;Calling Node.js function from ABAP&lt;/H2&gt;&lt;BR /&gt;
Here is ABAP test report for calling Node.js function, used in this example&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
*&amp;amp; Report ZSERVER_STFC_STRUCT&lt;BR /&gt;
*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
*&amp;amp;&lt;BR /&gt;
*&amp;amp;---------------------------------------------------------------------*&lt;BR /&gt;
report zserver_stfc_struct.&lt;BR /&gt;
&lt;BR /&gt;
data lv_echo like sy-lisel.&lt;BR /&gt;
data lv_resp like sy-lisel.&lt;BR /&gt;
&lt;BR /&gt;
data ls_struct like  rfctest.&lt;BR /&gt;
data lt_table like table of rfctest.&lt;BR /&gt;
&lt;BR /&gt;
data lv_error_message type char512.&lt;BR /&gt;
&lt;BR /&gt;
ls_struct-rfcint1 = 1.&lt;BR /&gt;
ls_struct-rfcint2 = 2.&lt;BR /&gt;
ls_struct-rfcint4 = 4.&lt;BR /&gt;
&lt;BR /&gt;
insert ls_struct into table lt_table.&lt;BR /&gt;
call function 'STFC_STRUCTURE' destination 'NWRFC_SERVER_OS'&lt;BR /&gt;
  exporting&lt;BR /&gt;
    importstruct          = ls_struct&lt;BR /&gt;
  importing&lt;BR /&gt;
    echostruct            = ls_struct&lt;BR /&gt;
    resptext              = lv_resp&lt;BR /&gt;
  tables&lt;BR /&gt;
    rfctable              = lt_table&lt;BR /&gt;
  exceptions&lt;BR /&gt;
    communication_failure = 1 message lv_error_message&lt;BR /&gt;
    system_failure        = 2 message lv_error_message.&lt;BR /&gt;
&lt;BR /&gt;
if sy-subrc eq 0.&lt;BR /&gt;
  write: / 'rfcint1:', ls_struct-rfcint1.&lt;BR /&gt;
  write: / 'rfcint2:', ls_struct-rfcint2.&lt;BR /&gt;
  write: / 'rfcint4:', ls_struct-rfcint4.&lt;BR /&gt;
  write: / 'resptext:', lv_resp.&lt;BR /&gt;
else.&lt;BR /&gt;
  write:   'subrc  :', sy-subrc.&lt;BR /&gt;
  write: / 'msgid  :', sy-msgid, sy-msgty, sy-msgno.&lt;BR /&gt;
  write: / 'msgv1-4:', sy-msgv1, sy-msgv2, sy-msgv3, sy-msgv4.&lt;BR /&gt;
  write: / 'message:', lv_error_message.&lt;BR /&gt;
  exit.&lt;BR /&gt;
endif.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
When node-rfc server is running and this ABAP report started, the output looks like:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/ABAP-report-output.png" height="312" width="539" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Node.js server call output&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--411699909"&gt;&lt;STRONG&gt;Error Handling&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
In case of error, the server function shall raise exception message and error message will be returned to ABAP, with RFC_EXTERNAL_FAILURE error code.&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;  throw new Error("my_stfc_function error");&lt;BR /&gt;
&lt;BR /&gt;
  console.log("[js] my_stfc_structure response:", abap_output);&lt;BR /&gt;
  return abap_output;&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
ABAP report output&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/Screenshot-2023-08-25-at-18.22.12.png" height="298" width="505" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;ABAP test report - error&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--608213414"&gt;Logging&lt;/H2&gt;&lt;BR /&gt;
When activated, the log is saved in local file: _noderfc.log and above mentioned error looks like:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/08/error-log.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Error log&lt;/P&gt;&lt;BR /&gt;
Enjoy calling Node.js function from ABAP &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/call-node-js-or-python-functions-from-abap/ba-p/13572286"/>
    <published>2023-08-25T16:45:09+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/abap-rfc-connectivity-from-btp-node-js-buildpack-and-kyma/ba-p/13573993</id>
    <title>ABAP RFC connectivity from BTP Node.JS buildpack and Kyma</title>
    <updated>2023-10-26T16:14:54+02:00</updated>
    <author>
      <name>Srdjan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/174007</uri>
    </author>
    <content>ABAP RFC connectivity from BTP to ABAP systems is supported by &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Connector&lt;/A&gt;, for Java runtime only. This blog describes the RFC connectivity configuration for BTP Node.JS runtime, so that Node.JS BTP applications can consume ABAP RFCs, as described in &lt;EM&gt;Deployment options &lt;/EM&gt;section of &lt;A href="https://blogs.sap.com/2023/10/12/powerful-web-applications-with-old-and-new-abap-systems" target="_blank" rel="noopener noreferrer"&gt;Powerful web applications with old and new ABAP systems&lt;/A&gt; and related blogs.&lt;BR /&gt;
&lt;BR /&gt;
Our "hello world" example is BTP Node.JS buildpack, with &lt;A href="https://expressjs.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;Express&lt;/A&gt; server, &lt;A href="https://github.com/SAP/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; and &lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;SAP NW RFC SDK&lt;/A&gt;.&lt;BR /&gt;
&lt;BR /&gt;
The example source code: &lt;A href="https://github.com/SAP-samples/node-rfc-samples/tree/main/integration/noderfc_btp" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP-samples/node-rfc-samples//integration/noderfc_btp&lt;/A&gt; can be deployed on BTP or tested locally inside &lt;A href="https://github.com/SAP/fundamental-tools/blob/main/docker/btp-cflinuxfs4.Dockerfile" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/fundamental-tools/docker/btp_cflinuxfs4.Dockerfile&lt;/A&gt; docker container.&lt;BR /&gt;
&lt;BR /&gt;
ABAP RFC connectivity from Node.JS on Kyma works practically out of the box, using &lt;A href="https://github.com/SAP/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; and &lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;SAP NW RFC SDK&lt;/A&gt; inside docker container. Try &lt;A href="http://SAP/fundamental-tools/blob/main/docker/cflinuxfs4.Dockerfile" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/fundamental-tools/docker/cflinuxfs4.Dockerfile&lt;/A&gt; for example.&lt;BR /&gt;
&lt;H2 id="toc-hId-963931172"&gt;SAP NW RFC SDK on BTP&lt;/H2&gt;&lt;BR /&gt;
ABAP RFC connectivity from Node.JS is provided by &lt;A href="https://github.com/SAP/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; open source, which provides interface to SAP proprietary SAP NW RFC SDK&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/nwrfcsdk-2.png" height="139" width="165" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;SAP NW RFC SDK&lt;/P&gt;&lt;BR /&gt;
SAP NW RFC SDK is &lt;STRONG&gt;not included&lt;/STRONG&gt; in &lt;A href="https://github.com/sap/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; because of licensing and SAP Support Portal is the only allowed public distribution channel for SAP NW RFC SDK.&lt;BR /&gt;
&lt;BR /&gt;
Shared SO libraries are required in runtime and must be registered at operating system level, using LD_LIBRARY_PATH env variable on Linux systems for example. Include files and shared libraries are both required for &lt;A href="https://github.com/sap/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; build and re-build. The node-rfc rebuild can be triggered during BTP deployment, just like for other native Node.JS modules.&lt;BR /&gt;
&lt;BR /&gt;
Express and SAP/node-rfc are standard NPM packages and BTP deployment is straightforward.&lt;BR /&gt;
&lt;H2 id="toc-hId-767417667"&gt;Preparation&lt;/H2&gt;&lt;BR /&gt;
We use this &lt;A href="https://github.com/SAP/fundamental-tools/blob/main/docker/btp-cflinuxfs4.Dockerfile" target="_blank" rel="nofollow noopener noreferrer"&gt;btp_cflinuxfs4 docker container&lt;/A&gt; and standard buildpack structure, with application in &lt;EM&gt;app&lt;/EM&gt; folder. To make SAP NW RFC SDK available for &lt;A href="https://github.com/sap/node-rfc" target="_blank" rel="nofollow noopener noreferrer"&gt;SAP/node-rfc&lt;/A&gt; in cloud application, it shall be copied to app root folder for example:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/Screenshot-2023-12-06-at-11.54.27.png" height="124" width="186" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Buildpack&lt;/P&gt;&lt;BR /&gt;
During deployment, native NPM modules like node-rfc may be or must be rebuilt. The re-build process requires SAP NW RFC SDK includes and binaries and &lt;EM&gt;SAPNWRFC_HOME_CLOUD &lt;/EM&gt;environment vaiable shell therefore point to SAP NW RFC SDK root folder, just like SAPNWRFC_HOME in on-premise case.&lt;BR /&gt;
&lt;BR /&gt;
For run-time enablement, the &lt;EM&gt;LD_LIBRARY_PATH&lt;/EM&gt; env variable shall point to RFC SDK "lib" folder, like in&amp;nbsp;&lt;A href="https://github.com/SAP-samples/node-rfc-samples/blob/main/integration/noderfc_with_nwrfcsdk/buildpack/manifest.yaml#L7" target="_blank" rel="nofollow noopener noreferrer"&gt;manifest.yaml:&lt;/A&gt;&lt;BR /&gt;
&lt;PRE class="language-python"&gt;&lt;CODE&gt;---&lt;BR /&gt;
applications:&lt;BR /&gt;
  - name: rfcapp&lt;BR /&gt;
    stack: cflinuxfs4&lt;BR /&gt;
    env:&lt;BR /&gt;
      SAPNWRFC_HOME_CLOUD: /tmp/app/nwrfcsdk&lt;BR /&gt;
      LD_LIBRARY_PATH: /home/vcap/app/nwrfcsdk/lib&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
That's all, we are ready for testing.&lt;BR /&gt;
&lt;H2 id="toc-hId-570904162"&gt;Local test&lt;/H2&gt;&lt;BR /&gt;
&lt;PRE class="language-python"&gt;&lt;CODE&gt;$ cd buildpack/app&lt;BR /&gt;
$ export SAPNWRFC_HOME=`pwd`/nwrfcsdk&lt;BR /&gt;
$ export LD_LIBRARY_PATH=$SAPNWRFC_HOME/lib&lt;BR /&gt;
$ npm install&lt;BR /&gt;
$ node .&lt;BR /&gt;
&lt;BR /&gt;
node .&lt;BR /&gt;
HOME&lt;BR /&gt;
/home/www-admin&lt;BR /&gt;
&lt;BR /&gt;
SAPNWRFC_HOME&lt;BR /&gt;
/home/www-admin/src/sap/node-rfc-samples/integration/noderfc_with_nwrfcsdk/buildpack/app/nwrfcsdk&lt;BR /&gt;
&lt;BR /&gt;
SAPNWRFC_HOME files:&lt;BR /&gt;
["include","lib","package.json"]&lt;BR /&gt;
&lt;BR /&gt;
LD_LIBRARY_PATH&lt;BR /&gt;
&lt;BR /&gt;
&lt;BR /&gt;
node-rfc&lt;BR /&gt;
{&lt;BR /&gt;
    "platform": {&lt;BR /&gt;
        "name": "linux",&lt;BR /&gt;
        "arch": "x64",&lt;BR /&gt;
        "release": "6.4.16-linuxkit"&lt;BR /&gt;
    },&lt;BR /&gt;
    "env": {&lt;BR /&gt;
        "SAPNWRFC_HOME": "/home/www-admin/src/sap/node-rfc-samples/integration/noderfc_with_nwrfcsdk/buildpack/app/nwrfcsdk",&lt;BR /&gt;
        "RFC_INI": ""&lt;BR /&gt;
    },&lt;BR /&gt;
    "versions": {&lt;BR /&gt;
        "node": "18.18.2",&lt;BR /&gt;
        "acorn": "8.10.0",&lt;BR /&gt;
        "ada": "2.6.0",&lt;BR /&gt;
        "ares": "1.19.1",&lt;BR /&gt;
        "brotli": "1.0.9",&lt;BR /&gt;
        "cldr": "43.1",&lt;BR /&gt;
        "icu": "73.2",&lt;BR /&gt;
        "llhttp": "6.0.11",&lt;BR /&gt;
        "modules": "108",&lt;BR /&gt;
        "napi": "9",&lt;BR /&gt;
        "nghttp2": "1.57.0",&lt;BR /&gt;
        "nghttp3": "0.7.0",&lt;BR /&gt;
        "ngtcp2": "0.8.1",&lt;BR /&gt;
        "openssl": "3.0.10+quic",&lt;BR /&gt;
        "simdutf": "3.2.14",&lt;BR /&gt;
        "tz": "2023c",&lt;BR /&gt;
        "undici": "5.26.3",&lt;BR /&gt;
        "unicode": "15.0",&lt;BR /&gt;
        "uv": "1.44.2",&lt;BR /&gt;
        "uvwasi": "0.0.18",&lt;BR /&gt;
        "v8": "10.2.154.26-node.26",&lt;BR /&gt;
        "zlib": "1.2.13.1-motley"&lt;BR /&gt;
    },&lt;BR /&gt;
    "noderfc": {&lt;BR /&gt;
        "version": "3.3.0",&lt;BR /&gt;
        "nwrfcsdk": {&lt;BR /&gt;
            "major": 7500,&lt;BR /&gt;
            "minor": 0,&lt;BR /&gt;
            "patchLevel": 12&lt;BR /&gt;
        }&lt;BR /&gt;
    }&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-503473376"&gt;BTP Deployment&lt;/H3&gt;&lt;BR /&gt;
When all works fine, let deploy&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;$ cd buildpack&lt;BR /&gt;
$ cf push&lt;BR /&gt;
Pushing app rfcapp to ...&lt;BR /&gt;
Uploading files...&lt;BR /&gt;
Instances starting....&lt;BR /&gt;
Instances starting...&lt;BR /&gt;
&lt;BR /&gt;
name:              rfcapp&lt;BR /&gt;
requested state:   started&lt;BR /&gt;
routes:            rfcapp.cfapps.eu10.hana.ondemand.com&lt;BR /&gt;
last uploaded:     Thu 26 Oct 15:46:54 CEST 2023&lt;BR /&gt;
stack:             cflinuxfs4&lt;BR /&gt;
buildpacks:        &lt;BR /&gt;
        name                                                       version   detect output   buildpack name&lt;BR /&gt;
        &lt;A href="https://github.com/cloudfoundry/nodejs-buildpack#v1.8.18" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://github.com/cloudfoundry/nodejs-buildpack#v1.8.18&lt;/A&gt;   1.8.18    nodejs          nodejs&lt;BR /&gt;
&lt;BR /&gt;
type:            web&lt;BR /&gt;
sidecars:        &lt;BR /&gt;
instances:       1/1&lt;BR /&gt;
memory usage:    128M&lt;BR /&gt;
start command:   npm run start:btp&lt;BR /&gt;
     state     since                  cpu    memory          disk           logging            details&lt;BR /&gt;
#0   running   2023-10-26T13:47:09Z   0.0%   54.9M of 128M   231.8M of 1G   0/s of unlimited   &lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The app test route &lt;A href="https://rfcapp.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&lt;/A&gt;&lt;A href="https://rfcapp.cfapps.eu10.hana.ondemand.com" target="test_blank" rel="nofollow noopener noreferrer"&gt;https://rfcapp.cfapps.eu10.hana.ondemand.com&lt;/A&gt;/ shows the same result as on premise test:&lt;BR /&gt;
&lt;PRE class="language-abap"&gt;&lt;CODE&gt;HOME /home/vcap/app SAPNWRFC_HOME /home/vcap/app/node_modules/nwrfcsdk&lt;BR /&gt;
SAPNWRFC_HOME files: ["include","lib","package.json"]&lt;BR /&gt;
LD_LIBRARY_PATH /home/vcap/app/node_modules/nwrfcsdk/lib&lt;BR /&gt;
node-rfc { "platform": { "name": "linux", "arch": "x64", "release": "6.2.0-33-generic" }, "env": { "SAPNWRFC_HOME": "/home/vcap/app/node_modules/nwrfcsdk", "RFC_INI": "" }, "versions": { "node": "18.18.2", "acorn": "8.10.0", "ada": "2.6.0", "ares": "1.19.1", "brotli": "1.0.9", "cldr": "43.1", "icu": "73.2", "llhttp": "6.0.11", "modules": "108", "napi": "9", "nghttp2": "1.57.0", "nghttp3": "0.7.0", "ngtcp2": "0.8.1", "openssl": "3.0.10+quic", "simdutf": "3.2.14", "tz": "2023c", "undici": "5.26.3", "unicode": "15.0", "uv": "1.44.2", "uvwasi": "0.0.18", "v8": "10.2.154.26-node.26", "zlib": "1.2.13.1-motley" }, "noderfc": { "version": "3.3.0", "nwrfcsdk": { "major": 7500, "minor": 0, "patchLevel": 12 } } }&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-177877152"&gt;Connectivity&lt;/H2&gt;&lt;BR /&gt;
With RFC connectivity enabled in Node.JS on BTP, WS-RFC connection parameters and SAP Business Connector or Cloud Connector can be used for RFC connections to ABAP systems.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-rfc-connectivity-from-btp-node-js-buildpack-and-kyma/ba-p/13573993"/>
    <published>2023-10-26T16:14:54+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/securing-external-rfc-connections-including-certificate-based/ba-p/13575027</id>
    <title>Securing external RFC connections, including certificate-based authentication</title>
    <updated>2023-12-07T09:18:50+01:00</updated>
    <author>
      <name>L_Skorwider</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/172246</uri>
    </author>
    <content>In today's world of cyber-attacks and data leaks, security and encryption should be an absolute priority for any IT organisation. However, experience shows that this is not always the case. Mechanisms that bring security are still often seen as making work difficult and challenging to implement. The fact that a program was configured years before and there was never a problem is used as an excuse not to make changes. This is a very incorrect approach that can have serious consequences.&lt;BR /&gt;
&lt;BR /&gt;
In this post, I will cover a topic perhaps quite niche for the SAP Basis administrator - securing connections from external non-SAP programs. An aspect that is often overlooked due to a gap in accountability. On the one hand, this is sometimes seen as outside the Basis scope. On the other hand, programs are sometimes configured by third party vendors not necessarily interested in the security of our system. I will try to show what we, as Basis administrators, can do to make the connection more secure.&lt;BR /&gt;
&lt;H1 id="toc-hId-834899173"&gt;Scope of consideration&lt;/H1&gt;&lt;BR /&gt;
In this post I will try to consider what mechanisms we can use to make an external connection secure. Of course, SNC/SSL-based encryption will be the focus as usual, but I will not limit myself to this technical aspect alone. As usual, I will also touch on topics that are on the borderline of responsibilities or even outside the typical scope of Basis, but important for understanding how the various mechanisms work.&lt;BR /&gt;
&lt;BR /&gt;
I will discuss the topics of encryption, authentication using an SSL certificate, level of trust in a foreign CA, permissions, limiting network traffic. I will base my analysis on example programs from the &lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;SAP NetWeaver RFC SDK&lt;/A&gt;. I originally wanted to write my own simple program, but as Basis administrators we usually secure existing software and connections, so this is a more representative example.&lt;BR /&gt;
&lt;H1 id="toc-hId-638385668"&gt;Environment preparation&lt;/H1&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-570954882"&gt;SAP server side&lt;/H2&gt;&lt;BR /&gt;
My test environment is &lt;A href="https://blogs.sap.com/2023/07/31/abap-platform-trial-1909-available-now/" target="_blank" rel="noopener noreferrer"&gt;ABAP Platform Trial 1909&lt;/A&gt;, based on S/4HANA 1909. The system is not the youngest, nor is it the oldest, but in the field of RFC connection security, not that much has changed over the years. So most of the insights will be valid for both older and younger systems.&lt;BR /&gt;
&lt;BR /&gt;
The system has already been prepped for SNC and certificate-based authentication. I described this in my previous post "&lt;A href="https://blogs.sap.com/2023/11/23/sap-gui-single-sign-on-based-on-ssl-certificates-and-snc/" target="_blank" rel="noopener noreferrer"&gt;SAP-GUI Single Sign-On based on SSL certificates and SNC&lt;/A&gt;", so I won't repeat that part.&lt;BR /&gt;
&lt;H2 id="toc-hId-374441377"&gt;Client side&lt;/H2&gt;&lt;BR /&gt;
For the purpose of presenting the client program, I prepared a completely fresh Debian Linux system version 12. The &lt;EM&gt;rfcuser&lt;/EM&gt; user was also created, in the context of which we will run the program that connects to the SAP server. Of course, you can use another Linux distribution as well, or even Windows, and the results will be similar.&lt;BR /&gt;
&lt;H1 id="toc-hId-48845153"&gt;SAP NetWeaver RFC SDK&lt;/H1&gt;&lt;BR /&gt;
SAP Note 2573790 describes where to get the library and briefly describes the installation process. I assume you can download it yourself from the Software Download Center, and I will describe the simplest installation method in a moment. I get two files, which I decompress in the &lt;EM&gt;rfcuser&lt;/EM&gt; home directory.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~$ &lt;STRONG&gt;unzip nwrfc750P_12-70002752.zip&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Archive: nwrfc750P_12-70002752.zip&lt;BR /&gt;
&lt;BR /&gt;
creating: nwrfcsdk/&lt;BR /&gt;
&lt;BR /&gt;
creating: nwrfcsdk/bin/&lt;BR /&gt;
&lt;BR /&gt;
inflating: nwrfcsdk/bin/rfcexec&lt;BR /&gt;
&lt;BR /&gt;
inflating: nwrfcsdk/bin/startrfc&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
[...]&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;inflating: nwrfcsdk/lib/libsapnwrfc.so&lt;BR /&gt;
&lt;BR /&gt;
inflating: nwrfcsdk/lib/libsapucum.so&lt;BR /&gt;
&lt;BR /&gt;
inflating: SIGNATURE.SMF&lt;BR /&gt;
&lt;BR /&gt;
rfcuser@sandboxn100:~$ &lt;STRONG&gt;unzip nwrfc750P12HF_2-70002752.zip&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
Archive: nwrfc750P12HF_2-70002752.zip&lt;BR /&gt;
&lt;BR /&gt;
inflating: libsapnwrfc.so&lt;BR /&gt;
&lt;BR /&gt;
rfcuser@sandboxn100:~$ &lt;STRONG&gt;mv libsapnwrfc.so nwrfcsdk/lib/&lt;/STRONG&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
All files are located in &lt;EM&gt;nwrfcsdk&lt;/EM&gt; folder. Next step is adding the folder to &lt;EM&gt;LD_LIBRARY_PATH&lt;/EM&gt; environment variable. I can do this for current session, but to make this permanent, I add this to &lt;EM&gt;.profile&lt;/EM&gt; file located in the user's home directory.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/nwrfcsdk/lib&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--147668352"&gt;SAP user&lt;/H1&gt;&lt;BR /&gt;
I plan to establish a connection from an external program to my SAP system to perform some operations. It is easy to guess that I will need a user on the SAP system side to do this. So I'm creating an RFC user that the external program will use for operations on the system. I give it the top-secret password &lt;EM&gt;secure123&lt;/EM&gt;, just for the purpose of this presentation, to keep things simple.&lt;BR /&gt;
&lt;BR /&gt;
In addition to filling in basic user data, I set up the type to &lt;EM&gt;system&lt;/EM&gt; or &lt;EM&gt;communication&lt;/EM&gt;. In this case, it doesn't matter much. I leave the rest of the data default, including the lack of authorizations, because I'll come back to that in the next step.&lt;BR /&gt;
&lt;H1 id="toc-hId--344181857"&gt;The first, unsecured connection&lt;/H1&gt;&lt;BR /&gt;
Together with the SDK library, we get two sample programs - &lt;EM&gt;rfcexec&lt;/EM&gt; and &lt;EM&gt;startrfc&lt;/EM&gt;. &lt;EM&gt;Rfcexec&lt;/EM&gt; connects to the SAP gateway and waits for incoming commands from the SAP system. I leave it for another occasion for now and will focus on &lt;EM&gt;startrfc&lt;/EM&gt;.&lt;BR /&gt;
&lt;BR /&gt;
The program connects to SAP and execute one of two function modules, related to EDI or display system information. In fact, I will focus on the last function today. The &lt;EM&gt;-i&lt;/EM&gt; switch is responsible for calling it.&lt;BR /&gt;
&lt;BR /&gt;
Let's call the program:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ ./startrfc -h sandbox -s 00 -u rfcuser -p secure123 -c 001 -i&lt;BR /&gt;
Error: No RFC authorization for function module RFCPING.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;EM&gt;Sandbox&lt;/EM&gt; is my SAP server hostname &lt;EM&gt;00&lt;/EM&gt; is SAP instance number. &lt;EM&gt;001&lt;/EM&gt; is a productive client.&lt;BR /&gt;
&lt;BR /&gt;
Error is expected. In general connection is successful, because program reached checking authorization phase.&lt;BR /&gt;
&lt;H1 id="toc-hId--540695362"&gt;The principle of least privilege&lt;/H1&gt;&lt;BR /&gt;
Indisputably, the principle of least privilege is one of the most important elements of security and an absolute must when it comes to external connections. Keep in mind that a system is only as secure as its weakest component. Even if you secure your SAP system perfectly, an intrusion into a server independent of you that has rights to connect to SAP with a high level of privilege could result in data leakage or even damage to the system. So you should keep the level of RFC user privileges at the minimum level needed to operate. In fact, this should obviously apply to all users. However, for technical users, this rule is more often ignored for some reason. Do we trust programs more than people?&lt;BR /&gt;
&lt;BR /&gt;
That's why I didn't give the &lt;EM&gt;RFCUSER&lt;/EM&gt;&amp;nbsp;any authorization at the beginning, and now I will build it from scratch. I check what the &lt;EM&gt;SU53&lt;/EM&gt; transaction reports for this user by selecting &lt;EM&gt;Authorization Values&lt;/EM&gt; / &lt;EM&gt;Other User&lt;/EM&gt; from the menu.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/su53-rfcuser.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
Apparently, the system first checked whether the user had access to the &lt;EM&gt;RFCPING&lt;/EM&gt; function module. Since access was not explicitly granted, so the permissions for the entire &lt;EM&gt;SYST&lt;/EM&gt; function group were also checked. Since I am very strict about permissions, I will build a role with minimal privileges in the &lt;EM&gt;PFCG&lt;/EM&gt; tranaction.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/pfcg-rfc-user-role.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
I added this role to RFCUSER and repeated the connection test.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ &lt;STRONG&gt;./startrfc -h sandbox -s 00 -u rfcuser -p secure123 -c 001 -i&lt;/STRONG&gt;&lt;BR /&gt;
SAP System ID: A4H&lt;BR /&gt;
SAP System Number: 00&lt;BR /&gt;
Partner Host: vhcala4hci&lt;BR /&gt;
Own Host: sandboxn100&lt;BR /&gt;
Partner System Release: 754&lt;BR /&gt;
Partner Kernel Release: 777&lt;BR /&gt;
Own Release: 753&lt;BR /&gt;
Partner Codepage: 4103&lt;BR /&gt;
Own Codepage: 4103&lt;BR /&gt;
User: RFCUSER&lt;BR /&gt;
Client: 001&lt;BR /&gt;
Language: E&lt;BR /&gt;
&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This time the connection is fully successful and I get system information. Authorization is sufficient.&lt;BR /&gt;
&lt;H1 id="toc-hId--737208867"&gt;Certification authority&lt;/H1&gt;&lt;BR /&gt;
At this point it is worth saying a few words about how my system is configured. This is, in fact, already described in my &lt;A href="https://blogs.sap.com/2023/11/23/sap-gui-single-sign-on-based-on-ssl-certificates-and-snc/" target="_blank" rel="noopener noreferrer"&gt;previous post&lt;/A&gt;, but it doesn't do any harm to remind you of the basic information. The main certificate authority &lt;EM&gt;(OU=Security)&lt;/EM&gt; signed the certificates of intermediate authorities - for servers &lt;EM&gt;(OU=Servers)&lt;/EM&gt; and for users &lt;EM&gt;(OU=Users)&lt;/EM&gt;. The SAP server certificate was issued by the first one.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/strust-certificates.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
It's clear that the simplest solution would be to issue a certificate by an existing certification authority, but that would simplify our considerations a bit too much. Instead, I will assume that the certificate was issued by a completely independent group of certification authorities. So I will add three new to the existing ones, marked in blue in the diagram.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/ca-structure.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
I won't focus on details, because you can go through this proces in my previous post, but let's go to the process of CAs creation and issuing RFCUSER's certificate. In practice, SAP administrators are usually not responsible for this part, so if you are not interested in issuing certificates, you can skip without hesitation to the next chapter.&lt;BR /&gt;
&lt;BR /&gt;
Root CA key creation:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl genrsa -out AnotherRootCA/anotherca.key.pem 4096&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Certificate generation:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl req -x509 -sha256 -new -nodes -key AnotherRootCA/anotherca.key.pem -days 3650 -out AnotherRootCA/anotherca.cert.pem&lt;BR /&gt;
You are about to be asked to enter information that will be incorporated&lt;BR /&gt;
into your certificate request.&lt;BR /&gt;
What you are about to enter is what is called a Distinguished Name or a DN.&lt;BR /&gt;
There are quite a few fields but you can leave some blank&lt;BR /&gt;
For some fields there will be a default value,&lt;BR /&gt;
If you enter '.', the field will be left blank.&lt;BR /&gt;
-----&lt;BR /&gt;
Country Name (2 letter code) [AU]:PL&lt;BR /&gt;
State or Province Name (full name) [Some-State]:kuj-pom&lt;BR /&gt;
Locality Name (eg, city) []:&lt;BR /&gt;
Organization Name (eg, company) [Internet Widgits Pty Ltd]:AnotherCompany&lt;BR /&gt;
Organizational Unit Name (eg, section) []:Trustworthy&lt;BR /&gt;
Common Name (e.g. server FQDN or YOUR name) []:Another Root CA&lt;BR /&gt;
Email Address []:&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Intermediate CA key:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl genrsa -out intermediateAppsCA/interApps.key.pem 4096&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Certificate signing request:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl req -key intermediateAppsCA/interApps.key.pem -new -sha256 -out intermediateAppsCA/interApps.csr.pem&lt;BR /&gt;
You are about to be asked to enter information that will be incorporated&lt;BR /&gt;
into your certificate request.&lt;BR /&gt;
What you are about to enter is what is called a Distinguished Name or a DN.&lt;BR /&gt;
There are quite a few fields but you can leave some blank&lt;BR /&gt;
For some fields there will be a default value,&lt;BR /&gt;
If you enter '.', the field will be left blank.&lt;BR /&gt;
-----&lt;BR /&gt;
Country Name (2 letter code) [AU]:PL&lt;BR /&gt;
State or Province Name (full name) [Some-State]:kuj-pom&lt;BR /&gt;
Locality Name (eg, city) []:&lt;BR /&gt;
Organization Name (eg, company) [Internet Widgits Pty Ltd]:AnotherCompany&lt;BR /&gt;
Organizational Unit Name (eg, section) []:Apps&lt;BR /&gt;
Common Name (e.g. server FQDN or YOUR name) []:Intermediate Apps CA&lt;BR /&gt;
Email Address []:&lt;BR /&gt;
&lt;BR /&gt;
Please enter the following 'extra' attributes&lt;BR /&gt;
to be sent with your certificate request&lt;BR /&gt;
A challenge password []:*******&lt;BR /&gt;
An optional company name []:&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Certificate signature by the new root CA:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl x509 -req -in intermediateAppsCA/interApps.csr.pem -days 3650 -CA AnotherRootCA/anotherca.cert.pem -CAkey AnotherRootCA/anotherca.key.pem -CAcreateserial -out intermediateAppsCA/interApps.cert.pem&lt;BR /&gt;
Certificate request self-signature ok&lt;BR /&gt;
subject=C = PL, ST = kuj-pom, O = AnotherCompany, OU = Apps, CN = Intermediate Apps CA&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
RFCUSER key creation:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl genrsa -out intermediateAppsCA/rfcuser.key.pem 4096&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Certificate signing request:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl req -key intermediateAppsCA/rfcuser.key.pem -new -sha256 -out intermediateAppsCA/rfcuser.csr.pem&lt;BR /&gt;
You are about to be asked to enter information that will be incorporated&lt;BR /&gt;
into your certificate request.&lt;BR /&gt;
What you are about to enter is what is called a Distinguished Name or a DN.&lt;BR /&gt;
There are quite a few fields but you can leave some blank&lt;BR /&gt;
For some fields there will be a default value,&lt;BR /&gt;
If you enter '.', the field will be left blank.&lt;BR /&gt;
-----&lt;BR /&gt;
Country Name (2 letter code) [AU]:PL&lt;BR /&gt;
State or Province Name (full name) [Some-State]:kuj-pom&lt;BR /&gt;
Locality Name (eg, city) []:&lt;BR /&gt;
Organization Name (eg, company) [Internet Widgits Pty Ltd]:AnotherCompany&lt;BR /&gt;
Organizational Unit Name (eg, section) []:&lt;BR /&gt;
Common Name (e.g. server FQDN or YOUR name) []:RFCUSER&lt;BR /&gt;
Email Address []:&lt;BR /&gt;
&lt;BR /&gt;
Please enter the following 'extra' attributes&lt;BR /&gt;
to be sent with your certificate request&lt;BR /&gt;
A challenge password []:********&lt;BR /&gt;
An optional company name []:&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;EM&gt;Client.cnf&lt;/EM&gt; for client certificates:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;nsCertType = client&lt;BR /&gt;
extendedKeyUsage = clientAuth&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Certificate signing:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl x509 -req -days 365 -in intermediateAppsCA/rfcuser.csr.pem -sha256 -CA intermediateAppsCA/interApps.cert.pem -CAkey intermediateAppsCA/interApps.key.pem -CAcreateserial -out intermediateAppsCA/rfcuser.crt.pem -extfile intermediateAppsCA/client.cnf&lt;BR /&gt;
Certificate request self-signature ok&lt;BR /&gt;
subject=C = PL, ST = kuj-pom, O = AnotherCompany, CN = RFCUSER&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Export certificate to PKCS12 format:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;openssl pkcs12 -export -inkey intermediateAppsCA/rfcuser.key.pem -in intermediateAppsCA/rfcuser.crt.pem -certfile AnotherRootCA/anotherca.cert.pem -certfile intermediateAppsCA/interApps.cert.pem -out rfcuser.p12&lt;BR /&gt;
Enter Export Password:&lt;BR /&gt;
Verifying - Enter Export Password:&lt;BR /&gt;
exportpassword123&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
As a result I got several keys and certificates, including the most important rfcuser.p12 file, which contains user's private key and certificate with the trust chain. The file is protected with &lt;EM&gt;exportpassword123&lt;/EM&gt; password. In real life scenarion this file you'll receive from your certification team.&lt;BR /&gt;
&lt;H1 id="toc-hId--933722372"&gt;Enforcing RFC encryption on system level&lt;/H1&gt;&lt;BR /&gt;
Ok, I know that forcing encrypted connections is not necessary for my connection to be encrypted. However, I will do it to show if the encryption works or not. Nevertheless, if you are ready to disable unsafe connections, I highly recommend making it permanent. In my case, the &lt;EM&gt;snc/only_encrypted_rfc&lt;/EM&gt; parameter is sufficient, but you might consider setting a few others as well, such as &lt;EM&gt;snc/accept_insecure_cpic&lt;/EM&gt;, &lt;EM&gt;snc/accept_insecure_gui&lt;/EM&gt;, &lt;EM&gt;snc/accept_insecure_rfc&lt;/EM&gt;, &lt;EM&gt;snc/only_encrypted_gui&lt;/EM&gt;.&lt;BR /&gt;
&lt;BR /&gt;
I can set the parameter to 1, which enforces encryprion for non-ABAP RFC connections. Higher levels enforces encryption for ABAP and intenal connections.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;snc/only_encrypted_rfc = 1&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now the call should be rejected by the system.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ ./startrfc -h sandbox -s 00 -u rfcuser -p secure123 -c 001 -t 3 -i&lt;BR /&gt;
Error: Unencrypted communication is rejected by this system&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It is no longer possible to establish an unencrypted connection.&lt;BR /&gt;
&lt;H1 id="toc-hId--360495794"&gt;SAP Cryptographic Library installation&lt;/H1&gt;&lt;BR /&gt;
To enable RFC connection encryption, it is necessary to install a cryptographic library. On SAP systems it is included along with the kernel, while here it must be installed separately. I go to the SAP Marketplace to see what the latest version is and download it. In addition, I need to get the &lt;EM&gt;SAPCAR&lt;/EM&gt; program to decompress the archive. So in the end I choose 2 files and save them in a new &lt;EM&gt;cryptolib&lt;/EM&gt; folder.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;SAPCRYPTOLIBP_8553-20011697.SAR&lt;BR /&gt;
SAPCAR_1200-70007716.EXE&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It's time to unpack the library:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/cryptolib$ &lt;STRONG&gt;./SAPCAR_1200-70007716.EXE -xf SAPCRYPTOLIBP_8553-20011697.SAR&lt;/STRONG&gt;&lt;BR /&gt;
SAPCAR: processing archive SAPCRYPTOLIBP_8553-20011697.SAR (version 2.01)&lt;BR /&gt;
SAPCAR: 6 file(s) extracted&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
SAPCAR and the archive can be removed after extraction. Let's also start &lt;EM&gt;sapgenpse&lt;/EM&gt; component to check if everything is fine.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/cryptolib$ ./sapgenpse | tail -10&lt;BR /&gt;
Versions: SAPGENPSE 8.5.53 (Sep 22 2023)&lt;BR /&gt;
CommonCryptoLib 8.5.53 (Sep 22 2023) [AES-NI,CLMUL,SSE3,SSSE3]&lt;BR /&gt;
Build change list: 248172&lt;BR /&gt;
&lt;BR /&gt;
USER="rfcuser"&lt;BR /&gt;
&lt;BR /&gt;
Environment variable $SECUDIR is not defined!&lt;BR /&gt;
Fallback selection of SECUDIR through HOME:&lt;BR /&gt;
"/home/rfcuser/sec"&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
It would be good to set &lt;EM&gt;SECUDIR&lt;/EM&gt; variable explicitly and add cryptolib folder to &lt;EM&gt;LD_LIBRARY_PATH &lt;/EM&gt;variable. Let's edit .&lt;EM&gt;profile&lt;/EM&gt; of the user.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~$ cat .profile&lt;BR /&gt;
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/nwrfcsdk/lib:~/secudir&lt;BR /&gt;
export SECUDIR=/home/rfcuser/sec&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--557009299"&gt;Client PSE preparation&lt;/H1&gt;&lt;BR /&gt;
In the previous sections, I generated an SSL certificate for the &lt;EM&gt;RFCUSER&lt;/EM&gt;. It was saved in the file &lt;EM&gt;rfcuser.p12&lt;/EM&gt;. Even if you don't generate the certificates yourself, you will probably get a ready one from the certification authority in this format. In the SAP world we rather operate on PSE repositories, so with the help of &lt;EM&gt;sapgenpse&lt;/EM&gt; I will convert PKCS#12 to PSE. I will perform all operations in the rfcuser user &lt;EM&gt;sec&lt;/EM&gt; folder.&lt;BR /&gt;
&lt;BR /&gt;
I prepared files, including certification authorities' certificates:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;ls -l&lt;/STRONG&gt;&lt;BR /&gt;
total 24&lt;BR /&gt;
-rw-r--r-- 1 rfcuser rfcuser 2033 Nov 30 18:28 anotherca.cert.pem&lt;BR /&gt;
-rw-r--r-- 1 rfcuser rfcuser 1911 Nov 30 18:29 interApps.cert.pem&lt;BR /&gt;
-rw------- 1 rfcuser rfcuser 5875 Nov 30 18:28 rfcuser.p12&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Let's import the p12 file into new repository and protect it with &lt;EM&gt;MyVerySecretPIN_1&lt;/EM&gt; secret PIN.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse import_p12 -x MyVerySecretPIN_1 -p SAPSNCS.pse -r anotherca.cert.pem -r interApps.cert.pem rfcuser.p12&lt;/STRONG&gt;&lt;BR /&gt;
Please enter PKCS#12 encryption password: *****************&lt;BR /&gt;
Found key 'INDEX=0,SIG=YES,ENC=YES,MD5-FINGERPRINT=60A1 B7F2 4F30 C198 9457 D2C3 5FA4 7F8E,KEYID=57F11B35BBC963B83B3B65F2666726003D11A46F'&lt;BR /&gt;
PSE "/home/rfcuser/sec/SAPSNCS.pse" was written&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The PIN we can encrypt in &lt;EM&gt;cred_v2&lt;/EM&gt; file, which is kind of passwords repository. Later this can be used by tools to access the PSE file. I also update file permissions to more strict.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse seclogin -x MyVerySecretPIN_1 -p SAPSNCS.pse&lt;/STRONG&gt;&lt;BR /&gt;
running seclogin with USER="rfcuser"&lt;BR /&gt;
Added SSO-credentials for PSE "/home/rfcuser/sec/SAPSNCS.pse"&lt;BR /&gt;
rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;chmod go-rwx cred_v2&lt;/STRONG&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Finally I have below files with PSE and cred_v2.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ ls -l&lt;BR /&gt;
total 28&lt;BR /&gt;
-rw-r--r-- 1 rfcuser rfcuser 2033 Nov 30 18:28 anotherca.cert.pem&lt;BR /&gt;
-rw------- 1 rfcuser rfcuser 114 Nov 30 18:37 cred_v2&lt;BR /&gt;
-rw-r--r-- 1 rfcuser rfcuser 1911 Nov 30 18:29 interApps.cert.pem&lt;BR /&gt;
-rw------- 1 rfcuser rfcuser 5875 Nov 30 18:28 rfcuser.p12&lt;BR /&gt;
-rw------- 1 rfcuser rfcuser 5111 Nov 30 18:36 SAPSNCS.pse&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Let's check what was saved in the PSE. I can see main certificate, signing CA and validity dates.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse get_my_name -p SAPSNCS.pse&lt;/STRONG&gt;&lt;BR /&gt;
SSO for USER "rfcuser"&lt;BR /&gt;
with PSE file "/home/rfcuser/sec/SAPSNCS.pse"&lt;BR /&gt;
&lt;BR /&gt;
Subject : CN=RFCUSER, O=AnotherCompany, SP=kuj-pom, C=PL&lt;BR /&gt;
Issuer : CN=Intermediate Apps CA, OU=Apps, O=AnotherCompany, SP=kuj-pom, C=PL&lt;BR /&gt;
Serialno : 72:7B:01:77:64:B6:60:0B:31:D7:6C:60:66:0A:B2:7E:AB:FD:77:B1&lt;BR /&gt;
KeyInfo : RSA, 4096-bit&lt;BR /&gt;
Validity - NotBefore: Thu Nov 30 17:54:25 2023 (231130165425Z)&lt;BR /&gt;
NotAfter : Fri Nov 29 17:54:25 2024 (241129165425Z)&lt;BR /&gt;
KeyUsage : none&lt;BR /&gt;
ExtKeyUsage : ClientAuthentication&lt;BR /&gt;
SubjectAltName : none&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I can also confirm, that the trust list of the PSE is empty.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse maintain_pk -p SAPSNCS.pse -l&lt;/STRONG&gt;&lt;BR /&gt;
maintain_pk for PSE "/home/rfcuser/sec/SAPSNCS.pse"&lt;BR /&gt;
PKList is empty.&lt;BR /&gt;
&lt;BR /&gt;
Empty trusted list.&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;H1 id="toc-hId--753522804"&gt;SAP user update&lt;/H1&gt;&lt;BR /&gt;
The next step is to prepare the &lt;EM&gt;RFCUSER&lt;/EM&gt; user for SSO authentication. To do this, I update the &lt;EM&gt;SNC name&lt;/EM&gt; field in the &lt;EM&gt;SNC&lt;/EM&gt; tab in the &lt;EM&gt;SU01&lt;/EM&gt; transaction. At the same time, I can disable the option of logging in with a password.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/rfc-user-snc-sso.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H1 id="toc-hId--950036309"&gt;sapnwrfc.ini&lt;/H1&gt;&lt;BR /&gt;
The &lt;EM&gt;sapnwrfc.ini&lt;/EM&gt; file allows to configure connection parameters for RFC calls made with the SDK library. You can define parameters there, such as the details of the system you are connecting to, the method of authentication, or encryption. Of course, you can specify a username and password there, but I will be configuring a certificate-based SSO. So I create the &lt;EM&gt;sapnwrfc.ini&lt;/EM&gt; file in the same directory as the &lt;EM&gt;startrfc&lt;/EM&gt; program:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ &lt;STRONG&gt;cat sapnwrfc.ini&lt;/STRONG&gt;&lt;BR /&gt;
DEST=a4htest&lt;BR /&gt;
SNC_LIB=/home/rfcuser/cryptolib/libsapcrypto.so&lt;BR /&gt;
SNC_MYNAME=p:CN=RFCUSER, O=AnotherCompany, SP=kuj-pom, C=PL&lt;BR /&gt;
SNC_PARTNERNAME=p:CN=sandbox.mydomain.internal, OU=IT, O=MyCompany, C=PL&lt;BR /&gt;
SNC_QOP=9&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
For readability, the file contains a minimum set of parameters. &lt;EM&gt;DEST&lt;/EM&gt; defines the name of the connection, which must be referred to by the program making the connection. &lt;EM&gt;SNC_LIB&lt;/EM&gt; defines which cryptographic library to use. &lt;EM&gt;SNC_MYNAME&lt;/EM&gt; specifies the SNC name of the client. &lt;EM&gt;SNC_PARTNERNAME&lt;/EM&gt; gives the SNC name of the SAP server to which we are connecting. &lt;EM&gt;SNC_QOP&lt;/EM&gt; defines the scope of the SNC, where &lt;EM&gt;9&lt;/EM&gt; defines the maximum available security level.&lt;BR /&gt;
&lt;BR /&gt;
I can return to &lt;EM&gt;startrfc&lt;/EM&gt; program and update required parameters. The most important one is &lt;EM&gt;-D&lt;/EM&gt;, which defines connection name, consistent with &lt;EM&gt;sapnwrfc.ini&lt;/EM&gt; definition.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ ./startrfc -h sandbox -s 00 -D a4htest -i&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
You might notice that the parameters responsible for the username, password and client number have been removed. They are not required if the SNC string is unique, that is, only one user on one client in a given system has this specific &lt;EM&gt;SNC name&lt;/EM&gt; assigned to it.&lt;BR /&gt;
&lt;BR /&gt;
The connection name is essential when you are securing a application that you are not the author of. The most important thing is to find in the documentation or configuration options how to determine this parameter or how to define it. Once you know this you will most likely be able to enable secure connection and encryption, even if the documentation from the vendor does not mention anything about such feature.&lt;BR /&gt;
&lt;H1 id="toc-hId--1146549814"&gt;Trust relationship&lt;/H1&gt;&lt;BR /&gt;
Ok, let's start the program to see what else is missing:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ &lt;STRONG&gt;./startrfc -h sandbox -s 00 -D a4htest -i&lt;/STRONG&gt;&lt;BR /&gt;
[Thr 139683030722496] Thu Nov 30 18:50:59:304 2023&lt;BR /&gt;
[Thr 139683030722496] *** ERROR =&amp;gt; SncPEstablishContext() failed for target='p:CN=sandbox.mydomain.internal, OU=IT, O=MyCompany, C=PL' [/bas/753_R 3638]&lt;BR /&gt;
Error:&lt;BR /&gt;
LOCATION CPIC (TCP/IP) with Unicode&lt;BR /&gt;
ERROR GSS-API(maj): Miscellaneous failure&lt;BR /&gt;
GSS-API(min): A2210223:&lt;STRONG&gt;Server does not trust my certificate&lt;BR /&gt;
path&lt;/STRONG&gt;&lt;BR /&gt;
target="p:CN=sandbox.mydomain.internal, OU=IT, O=MyCompany,&lt;BR /&gt;
C=PL"&lt;BR /&gt;
TIME Thu Nov 30 18:50:59 2023&lt;BR /&gt;
RELEASE 753&lt;BR /&gt;
COMPONENT SNC (Secure Network Communication)&lt;BR /&gt;
VERSION 6&lt;BR /&gt;
RC -4&lt;BR /&gt;
MODULE /bas/753_REL/src/krn/snc/sncxxall.c&lt;BR /&gt;
LINE 3604&lt;BR /&gt;
DETAIL SncPEstablishContext&lt;BR /&gt;
SYSTEM CALL gss_i&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The error message is clear - SAP server does not trust my certificate chain. What does it mean?&lt;BR /&gt;
&lt;BR /&gt;
The situation is as follows - the client approaches the server with a certificate, which perhaps even matches the SNC name of some user in the system. But after all, such certificate can be issued by anyone and any subject can be defined. Therefore, it is very important that the certificate is known and accepted by the server. This can be a trust relationship defined directly - by adding this particular certificate to the list. However, it can also be defined at a higher level - by trusting the certification authority.&lt;BR /&gt;
&lt;BR /&gt;
It is the administrator's decision, or more often security policies, at which level we establish the trust relationship. It is very convenient to add a specific CA to the trusted list and this is often the right way to go. However, be aware that this also has consequences. The organisation that issues the certificates receives the authority to authenticate users on our system.&lt;BR /&gt;
&lt;BR /&gt;
When we are unable to trust the certificate authority, we are required to add the leaf certificate to the list. This usually brings with it quite an inconvenience - the need to renew each certificate as it approaches its expiration date. This requires coordination with the client and, with a larger number of certificates, can be very inconvenient, especially as end certificates usually have an expiry date of one year.&lt;BR /&gt;
&lt;BR /&gt;
As I have full control over my certificate authorities, so I add Another Root CA to my trusted list in transaction &lt;EM&gt;STRUST&lt;/EM&gt;.&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/smalltrustedliststrust.png" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Let's retry the connection.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ &lt;STRONG&gt;./startrfc -h sandbox -s 00 -D a4htest -i&lt;/STRONG&gt;&lt;BR /&gt;
[Thr 139834091542464] Thu Nov 30 18:58:31:277 2023&lt;BR /&gt;
[Thr 139834091542464] *** ERROR =&amp;gt; SncPEstablishContext() failed for target='p:CN=sandbox.mydomain.internal, OU=IT, O=MyCompany, C=PL' [/bas/753_R 3638]&lt;BR /&gt;
Error:&lt;BR /&gt;
LOCATION CPIC (TCP/IP) with Unicode&lt;BR /&gt;
ERROR GSS-API(maj): Miscellaneous failure&lt;BR /&gt;
GSS-API(min): A2200223:&lt;STRONG&gt;Peer certificate path not trusted&lt;/STRONG&gt;&lt;BR /&gt;
target="p:CN=sandbox.mydomain.internal, OU=IT, O=MyCompany,&lt;BR /&gt;
C=PL"&lt;BR /&gt;
TIME Thu Nov 30 18:58:31 2023&lt;BR /&gt;
RELEASE 753&lt;BR /&gt;
COMPONENT SNC (Secure Network Communication)&lt;BR /&gt;
VERSION 6&lt;BR /&gt;
RC -4&lt;BR /&gt;
MODULE /bas/753_REL/src/krn/snc/sncxxall.c&lt;BR /&gt;
LINE 3604&lt;BR /&gt;
DETAIL SncPEstablishContext&lt;BR /&gt;
SYSTEM CALL gss_init_sec_context&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
There is still an error, but different one. This is also related to trust, but in opposite direction. Now client doesn't trust server. I need to add SAP system certificate or better it's CA to the client's trusted list. Let's go to &lt;EM&gt;SECUDIR&lt;/EM&gt; and add it to &lt;EM&gt;PSE&lt;/EM&gt;.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse maintain_pk -a ca.cert.pem&lt;/STRONG&gt;&lt;BR /&gt;
Please enter PSE PIN/Passphrase: *****************&lt;BR /&gt;
maintain_pk for PSE "/home/rfcuser/sec/SAPSNCS.pse"&lt;BR /&gt;
----------------------------------------------------------------------------&lt;BR /&gt;
Subject : OU=Security, O=MyCompany, SP=kuj-pom, C=PL&lt;BR /&gt;
&lt;BR /&gt;
PKList updated (1 entries total, 1 newly added)&lt;BR /&gt;
&lt;BR /&gt;
rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse maintain_pk -a interServers.cert.pem&lt;/STRONG&gt;&lt;BR /&gt;
Please enter PSE PIN/Passphrase: *****************&lt;BR /&gt;
maintain_pk for PSE "/home/rfcuser/sec/SAPSNCS.pse"&lt;BR /&gt;
----------------------------------------------------------------------------&lt;BR /&gt;
Subject : OU=Servers, O=MyCompany, SP=kuj-pom, C=PL&lt;BR /&gt;
&lt;BR /&gt;
PKList updated (2 entries total, 1 newly added)&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
I have to know PSE password to modify it.&lt;BR /&gt;
&lt;BR /&gt;
You can always your trusted list with below command:&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/sec$ &lt;STRONG&gt;../cryptolib/sapgenpse maintain_pk -l&lt;/STRONG&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Now I can test the connection once more.&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;rfcuser@sandboxn100:~/nwrfcsdk/bin$ &lt;STRONG&gt;./startrfc -h sandbox -s 00 -D a4htest -i&lt;/STRONG&gt;&lt;BR /&gt;
SAP System ID: A4H&lt;BR /&gt;
SAP System Number: 00&lt;BR /&gt;
Partner Host: vhcala4hci&lt;BR /&gt;
Own Host: sandboxn100&lt;BR /&gt;
Partner System Release: 754&lt;BR /&gt;
Partner Kernel Release: 777&lt;BR /&gt;
Own Release: 753&lt;BR /&gt;
Partner Codepage: 4103&lt;BR /&gt;
Own Codepage: 4103&lt;BR /&gt;
User: RFCUSER&lt;BR /&gt;
Client: 001&lt;BR /&gt;
Language: E&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
Success. Connection is possible with SSL based authentication. Encryption is obviously enabled.&lt;BR /&gt;
&lt;H1 id="toc-hId--1343063319"&gt;Firewall&lt;/H1&gt;&lt;BR /&gt;
When we consider how to secure RFC connections, it is impossible to ignore the question of the firewall. It is obvious that also at the network level, we should only allow traffic from addresses that are allowed to communicate with our server. One question to ask is which ports are needed. There are two ports that are used by the Gateway, which is responsible for RFC communication - 33&amp;lt;NN&amp;gt;/tcp and 48&amp;lt;NN&amp;gt;/tcp. NN is instance number, in my case 00. 3300/tcp is used for unencrypted communication, while 4800/tcp is the secure gateway, where communication is encrypted. In my case, after configuring a secure connection, only 4800/tcp is needed.&lt;BR /&gt;
&lt;BR /&gt;
However, there is one more port to be considered. It is opened by the message server, which is part of the ASCS instance, that in my case is number 01. So I would also consider opening port 3601/tcp on the firewall to allow load balancing using login groups.&lt;BR /&gt;
&lt;H1 id="toc-hId--1539576824"&gt;UCON&lt;/H1&gt;&lt;BR /&gt;
The final option I wanted to recommend to make RFC connections more secure is Unified Connectivity (UCON). This is a mechanism that provides the ability to define a list of allowed remote function modules. This is related to the idea of reducing the attack surface. It is clear that systems only use a very small proportion of functional modules. As the software may contain security vulnerabilities and somewhere in the system someone may have set too broad permissions, it is worth implementing protection at a higher level. UCON introduces an extra layer of protection - even before the user's permissions are checked, it is verified whether the call is on the allowed list. However, UCON is a rather broad topic for a separate article.&lt;BR /&gt;
&lt;H1 id="toc-hId--1736090329"&gt;Conclusion&lt;/H1&gt;&lt;BR /&gt;
RFC connections from external non-ABAP programmes can be secured on very many levels. Security should be a priority these days and unencrypted connections forbidden by any security policy. Although we often have less control over external programs, as you can see, quite a lot can be done in this area too.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/securing-external-rfc-connections-including-certificate-based/ba-p/13575027"/>
    <published>2023-12-07T09:18:50+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/handling-rfc-in-sap-build-process-automation/ba-p/13580244</id>
    <title>Handling RFC in SAP Build - Process Automation</title>
    <updated>2023-12-28T12:34:38+01:00</updated>
    <author>
      <name>Metehan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/172809</uri>
    </author>
    <content>&lt;H2 id="toc-hId-964758439"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
Hello,&lt;BR /&gt;
&lt;BR /&gt;
I will be showing you How to handle RFC in SAP Build - Process Automation .&lt;BR /&gt;
&lt;H2 id="toc-hId-768244934"&gt;&lt;STRONG&gt;Scenario&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
We will be using a RFC to get data that we need in our automation.&lt;BR /&gt;
&lt;H3 id="toc-hId-700814148"&gt;&lt;STRONG&gt;Prerequisites:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Basic Knowledge about RFC&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Basic knowledge about SAP Build&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Basic knowledge about SAP Process Automation.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-504300643"&gt;&lt;STRONG&gt;Step-by-Step Procedure:&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Creating the RFC .&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Creating the Process Automation project.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Consuming RFC in our project&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-307787138"&gt;&lt;STRONG&gt;STEP 1 : Creating RFC&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Firstly we need to create our RFC according to our needs. Go to &lt;EM&gt;&lt;STRONG&gt;' SE37 '&amp;nbsp;&lt;/STRONG&gt;&lt;/EM&gt; transaction and create your RFC. Do not forget to select Remote-Enabled Module processing type.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/1-67.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 1 - RFC Attributes&lt;/P&gt;&lt;BR /&gt;
In my case, what I needed was the mail addresses of customer numbers I already had. So created my RFC to get mail addresses using company codes and customer numbers. You should set your parameters according to your needs.&lt;BR /&gt;
You can see my parameters below.&lt;BR /&gt;
&lt;P style="text-align: center;overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/2-37.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 2 - Import Parameters&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/3-27.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 3 - Tables Parameters&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/4-27.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 4 - T_CUSTOMER Components&lt;/P&gt;&lt;BR /&gt;
In my coding part I am finding mail addresses using the customer numbers and company code provided in &lt;EM&gt;&lt;STRONG&gt;T_CUSTOMER&lt;/STRONG&gt;&lt;/EM&gt; and filling &lt;STRONG&gt;&lt;EM&gt;' MAIL '&amp;nbsp;&lt;/EM&gt;&lt;/STRONG&gt; component according to &lt;STRONG&gt;&lt;EM&gt;' IV_ CHECK '&lt;/EM&gt;&lt;/STRONG&gt; import parameter.&lt;BR /&gt;
&lt;H3 id="toc-hId-111273633"&gt;&lt;STRONG&gt;STEP 2 : Creating Process Automation Project&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Now we are going to create our project.&lt;BR /&gt;
&lt;BR /&gt;
Go to SAP Build cockpit and click create.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/5-17.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 5 - SAP Build Create Project&lt;/P&gt;&lt;BR /&gt;
After that click ' Build an Automated Process ' and ' Task Automation ' . Give your project a name and configure your agent and we are all set.&lt;BR /&gt;
&lt;H3 id="toc-hId--85239872"&gt;&lt;STRONG&gt;STEP 3 : Consuming RFC in Project&lt;/STRONG&gt;&lt;/H3&gt;&lt;BR /&gt;
Firstly we need to add &lt;EM&gt;&lt;STRONG&gt;BAPI SDK&lt;/STRONG&gt;&lt;/EM&gt; to our project. To do that go to settings and then &lt;EM&gt;&lt;STRONG&gt;Dependencies&lt;/STRONG&gt;&lt;/EM&gt; section. After that click &lt;STRONG&gt;&lt;EM&gt;Add Dependency&lt;/EM&gt;&lt;/STRONG&gt; and search for &lt;EM&gt;&lt;STRONG&gt;BAPI SDK&lt;/STRONG&gt;&lt;/EM&gt;.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/6-13.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 6 - Add Dependency&lt;/P&gt;&lt;BR /&gt;
Now we need to create our &lt;STRONG&gt;&lt;EM&gt;Data Types&lt;/EM&gt;&lt;/STRONG&gt; based on our RFC parameters. The important part here is that Data Types must be created as structures, for my case I will be creating two Data Types , one for Import Parameters of my RFC and one for Tables Parameters.&lt;BR /&gt;
&lt;BR /&gt;
Go to your &lt;STRONG&gt;&lt;EM&gt;Project Content&lt;/EM&gt;&lt;/STRONG&gt; and click &lt;EM&gt;&lt;STRONG&gt;Create&lt;/STRONG&gt;&lt;/EM&gt; then click &lt;EM&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;&lt;/EM&gt;. After that give it a proper name and lets set the Data Type.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/7-15.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 7 - Creating Data Types&lt;/P&gt;&lt;BR /&gt;
Create your Data Types based on your RFC parameters. Here are my Data Types&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/8-14.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 8 - Data Types&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;Now we can call our RFC from our project. Lets start building our project. You can see the general overview of project, I will be explaining each step.&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/9-7.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 9 - Overview of Project&lt;/P&gt;&lt;BR /&gt;
Firstly we need to establish our connection to SAP server where RFC exist. For that we are using &lt;EM&gt;&lt;STRONG&gt;Set SAP Connection (Basic)&lt;/STRONG&gt;&lt;/EM&gt; activity and filling it as needed.&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: SAPRegular, 'Helvetica Neue', Arial, sans-serif;overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/10-10.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 10 - Set SAP Connection (Basic)&lt;/P&gt;&lt;BR /&gt;
To be sure whether we were able to connect to SAP system or not we are using &lt;EM&gt;&lt;STRONG&gt;Is SAP Connection Alive&lt;/STRONG&gt;&lt;/EM&gt; activity.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/11-10.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 11 - Is SAP Connection Alive&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;For next step we are creating our variable using the Data Types that we created.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/12-9.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 12 - Creating the RFC Import Variable&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/13-8.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 13 - Creating the RFC Tables Variable&lt;/P&gt;&lt;BR /&gt;
Now that we created our variables , we are going to fill these variables. Firstly we are checking if the SAP Connection is alive or not after that we are filling our variables as we need.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/14-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 14 - Filling Variables&lt;/P&gt;&lt;BR /&gt;
Now we can execute our RFC and get the desired data. To call our RFC we are using &lt;EM&gt;&lt;STRONG&gt;Execute BAPI&lt;/STRONG&gt;&lt;/EM&gt; activity. And to reach our desired data we are using &lt;EM&gt;&lt;STRONG&gt;output parameter of Execute BAPI&lt;/STRONG&gt;&lt;/EM&gt; in a &lt;EM&gt;&lt;STRONG&gt;Custom Script&lt;/STRONG&gt;&lt;/EM&gt; activity as you can see below.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/15-6.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 15 - Execute RFC&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/16-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Image 16 - Desired Data From RFC&lt;/P&gt;&lt;BR /&gt;
Here is our mail addresses corresponding to customer numbers and company codes.&lt;BR /&gt;
&lt;H2 id="toc-hId--410836096"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H2&gt;&lt;BR /&gt;
If you read the blog well congratulations ! You learned How to create a new project in SAP Build, How to create custom Data Types in a SAP Process Automation, How to consume a RFC in SAP Process Automation and much more.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;If this blog is a help to you please like and share &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&amp;nbsp;&lt;/EM&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Also Please do not hesitate to ask any further questions and feel free to share your feedback on the content.&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;&lt;STRONG&gt;Thank you!&lt;/STRONG&gt;&lt;/EM&gt;&lt;BR /&gt;
&lt;PRE&gt;&lt;CODE&gt;&lt;STRONG&gt;- Metehan Dülger &lt;/STRONG&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;/DIV&gt;&lt;BR /&gt;
&lt;DIV&gt;&lt;/DIV&gt;&lt;BR /&gt;
&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/handling-rfc-in-sap-build-process-automation/ba-p/13580244"/>
    <published>2023-12-28T12:34:38+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/created-a-program-to-fetch-customer-details-from-as400-system-to-sap-s4hana/ba-p/13619246</id>
    <title>Created a program to fetch customer details from AS400 system to SAP S4HANA via RFC FM</title>
    <updated>2024-02-28T13:31:37.538000+01:00</updated>
    <author>
      <name>harsh_raj1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152044</uri>
    </author>
    <content>&lt;P&gt;Creating a program to fetch customer details from an AS400 system to SAP S/4HANA via RFC (Remote Function Call) involves several steps. Below is a simplified example to illustrate the process. Note that you need the appropriate authorization and system connectivity settings for RFC communication.&lt;/P&gt;&lt;H3 id="toc-hId-1116273783"&gt;Using Transaction SM59:&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Log in to SAP GUI:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Log in to the SAP GUI using the appropriate credentials.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Open Transaction SM59:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Enter transaction code SM59 in the command field and press Enter.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Choose RFC Connection:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;In the SM59 screen, navigate to the "RFC Connections" folder in the left-hand tree structure.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Create RFC Destination:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Right-click on the "RFC Connections" folder, choose "Create," and select the appropriate connection type (for example, "TCP/IP Connections" for remote systems).&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Enter Connection Details:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Fill in the required details for the RFC destination, including the connection type, the target system's IP address or hostname, and the system number.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Configure Logon &amp;amp; Security:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Configure the logon and security settings. This might include specifying the user credentials that will be used for communication.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Additional Parameters:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Depending on your scenario, you may need to configure additional parameters, such as language, code page, or other connection-specific settings.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Test Connection:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Before saving the RFC destination, you can use the "Connection Test" button to check if the connection to the target system is successful.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Save the RFC Destination:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Once the connection test is successful, save the RFC destination.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Activate and register&amp;nbsp;the RFC Destination:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;After saving the destination, you may need to activate and register it. The activation ensures that the settings take effect.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Use the RFC Destination in ABAP Programs:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;You can use the created RFC destination in ABAP programs by calling the remote function modules defined in the target system.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_0-1708951919820.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71246i814B426F5B50173C/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_0-1708951919820.png" alt="harsh_raj1_0-1708951919820.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_1-1708952589257.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71264i55F1949E37D8B5EF/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_1-1708952589257.png" alt="harsh_raj1_1-1708952589257.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Create RFC-Enabled Function Module in SAP S/4HANA:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create an RFC-enabled function module in SAP S/4HANA that will call the RFC function module in the AS400 system. This function module should take any necessary parameters, call the RFC function module in the AS400 system, and return the customer details. ￼&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_4-1708949394238.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71182i6D2B21728C58811B/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_4-1708949394238.png" alt="harsh_raj1_4-1708949394238.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_5-1708949436424.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71183i4D1D8A442E2B49C7/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_5-1708949436424.png" alt="harsh_raj1_5-1708949436424.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_6-1708949471493.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71184i6DE369551A825D78/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_6-1708949471493.png" alt="harsh_raj1_6-1708949471493.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_7-1708949530552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71186iD7FE2FCC6E8AF505/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_7-1708949530552.png" alt="harsh_raj1_7-1708949530552.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;FUNCTION zhr_fm_knb1_fico.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(IM_KUNNR) TYPE  ZHR_TTY_KNB1 OPTIONAL
*"  EXPORTING
*"     VALUE(GT_KNB2) TYPE  ZHR_TT_KNB1
*"     VALUE(EP_MSG) TYPE  STRING
*"  TABLES
*"      GT_KNB1 STRUCTURE  KNB1
*"----------------------------------------------------------------------

  IF  im_kunnr  IS NOT INITIAL.

    SELECT  FROM knb1 FIELDS kunnr,
                            bukrs,
                            erdat,
                            ernam
                             WHERE kunnr in _KUNNR INTO CORRESPONDING FIELDS OF TABLE  _knb2 .

    IF  gt_knb1 IS INITIAL.
      ep_msg = 'No record found'.

    ENDIF.



  ENDIF.


ENDFUNCTION.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;Creating a report program in SAP S/4HANA using the ABAP Editor (SE38) involves defining a report using the Report&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;statement, fetching data from the database, and displaying the results. Below is a simple example of a report program that retrieves and displays data from knb1 table.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; Report ZHR_RP_FM
*&amp;amp;---------------------------------------------------------------------*
*&amp;amp;
*&amp;amp;---------------------------------------------------------------------*
REPORT ZHR_RP_FM.

DATA: lv_kunnr TYPE kunnr.
*
SELECT-OPTIONS: s_kunnr FOR lv_kunnr.

  DATA: lt_range type RANGE OF kunnr.
     lt_range = VALUE #( sign = 'I' option = 'BT'
                       ( low = s_kunnr-low )
                       ( high = s_kunnr-high )
                     ).

DATA: lt_knb1 TYPE TABLE OF knb1,
      gt_knb1 TYPE TABLE of knb1,
*      gs_knb1 TYPE knb1,
      lv_msg TYPE string.


START-OF-SELECTION.

*
CALL FUNCTION 'ZHR_FM_KNB1_FICO' DESTINATION 'zhr_a4hana_to_s4hana'
  EXPORTING
    im_kunnr       = lt_range
 IMPORTING
   GT_KNB2        =  gt_knb1               "gs_knb1
   EP_MSG         = lv_msg
  tables
    gt_knb1        = lt_knb1
          .
IF sy-subrc &amp;lt;&amp;gt; 0.
* Implement suitable error handling here
ENDIF.


IF  gt_knb1[] is NOT INITIAL.
  cl_demo_output=&amp;gt;display( gt_knb1 ).          

ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;output:&lt;/P&gt;&lt;P&gt;give the input and click on execute button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_0-1708950301655.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71237i5C48F50B46E7A013/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_0-1708950301655.png" alt="harsh_raj1_0-1708950301655.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;provide your user-id for s4hana along with password and click on enter.&lt;/P&gt;&lt;P&gt;it will display the desired output.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_2-1708952759789.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71268i24414975FFD71A86/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_2-1708952759789.png" alt="harsh_raj1_2-1708952759789.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="harsh_raj1_2-1708950014638.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/71236iB4474CFD26FF86B1/image-size/large?v=v2&amp;amp;px=999" role="button" title="harsh_raj1_2-1708950014638.png" alt="harsh_raj1_2-1708950014638.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/created-a-program-to-fetch-customer-details-from-as400-system-to-sap-s4hana/ba-p/13619246"/>
    <published>2024-02-28T13:31:37.538000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/create-trusted-rfc-with-specific-technical-user/ba-p/13694181</id>
    <title>Create trusted RFC with specific technical user</title>
    <updated>2024-05-08T17:46:41.940000+02:00</updated>
    <author>
      <name>Austin_Nguyen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/42832</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;As the SAP Basis administrator, we know that we can establish the trusted RFC between ABAP systems in which we can connect to the target system with our current user without providing the credentials like in screenshot below.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_0-1715101552453.png" style="width: 514px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106978i86E93B9327375E79/image-dimensions/514x135?v=v2" width="514" height="135" role="button" title="austinnguyen_0-1715101552453.png" alt="austinnguyen_0-1715101552453.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;But what if we want to use a specific technical user and still want to benefit from trusted RFC? Actually, we can do it with the same method and I will show you how in this blog post.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;First of all, since we need to create the trusted RFC, we need to establish the trusted relationship between systems through transaction code SMT1. In the scope of this blog, I’ll assume that we need to define the trust between system AA and BB.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;1.&amp;nbsp;&lt;SPAN&gt;Go to SMT1 Tcode on AA, and click the “Create” button to start the process.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_1-1715101603516.png" style="width: 605px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106979i9C45744ADD2F458A/image-dimensions/605x223?v=v2" width="605" height="223" role="button" title="austinnguyen_1-1715101603516.png" alt="austinnguyen_1-1715101603516.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.&amp;nbsp;&lt;SPAN&gt;Click “Continue”.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_2-1715101638658.png" style="width: 607px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106980i307F7AC367BA5FAB/image-dimensions/607x492?v=v2" width="607" height="492" role="button" title="austinnguyen_2-1715101638658.png" alt="austinnguyen_2-1715101638658.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3.&amp;nbsp;&lt;SPAN&gt;On the next screen, we need to provide the information about the target server and login information. It'll create a new RFC on the target server called "TRUSTING@&amp;lt;SID&amp;gt;xxxxxxxx".&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_3-1715101658069.png" style="width: 612px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106981i0BD4AF7A26B6AF6E/image-dimensions/612x491?v=v2" width="612" height="491" role="button" title="austinnguyen_3-1715101658069.png" alt="austinnguyen_3-1715101658069.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4.&amp;nbsp;&lt;SPAN&gt;On the following screens, just click on “Continue” and “Finish” on the final screen.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_4-1715101674781.png" style="width: 611px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106982i1538606103989217/image-dimensions/611x489?v=v2" width="611" height="489" role="button" title="austinnguyen_4-1715101674781.png" alt="austinnguyen_4-1715101674781.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_5-1715101685108.png" style="width: 614px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106983iC1E281E0154BCD03/image-dimensions/614x494?v=v2" width="614" height="494" role="button" title="austinnguyen_5-1715101685108.png" alt="austinnguyen_5-1715101685108.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_6-1715101700657.png" style="width: 615px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106984i5F579CE9E71E7F78/image-dimensions/615x492?v=v2" width="615" height="492" role="button" title="austinnguyen_6-1715101700657.png" alt="austinnguyen_6-1715101700657.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5.&amp;nbsp;&lt;SPAN&gt;Now, it’s finished on the first system AA and you need to do the same steps on the second system BB.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Next, we need to make sure that the technical user on the source system has enough authorizations to allow the trusted call from the source system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For that purpose, the user role needs to have the authorization object S_RFCACL. Below is the description of its field.&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;ACTVT: always 16. It’s the only value we can specify.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_CLIENT: In this field, we can specify which client we allow to make the trusted connection. For example: the AA system has 3 clients 001, 002, and 003, but if we want to grant the trusted connection from client 002 only, then we need to specify here the value 002. The connection from clients 001 and 003 will be rejected.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_EQUSER: This is the important field for making trusted RFCs with another user. In this case, we want to connect with a specific technical user, therefore we set it to value “&lt;/SPAN&gt;&lt;STRONG&gt;N&lt;/STRONG&gt;&lt;SPAN&gt;”.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_INFO: the installation number of the calling system. We can set it to ‘*’, then the role can be used by multiple source systems, or you can specify here the list of installation numbers that allow you to create a trusted connection.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_SYSID: SID of the calling system.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_TCODE: Calling transaction code.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;RFC_USER: ID of the calling user.&lt;/SPAN&gt;&lt;P&gt;&lt;SPAN&gt;After finishing the role creation, please make sure that the role will be assigned to the technical user on the called system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We have come to the final step. For details on creating the RFC in SM59, please refer to the SAP help documentation. In this blog, I’ll focus only on trusted RFC settings.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After specifying the target hostname and SID, go to the Logon &amp;amp; Security tab and set the Trust Relationship to “Yes”.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now, instead of setting the checkbox at “Current User”, we will leave it blank and give the information about the technical user from the called system. Of course, the password is no longer necessary because we’re creating a trusted connection.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_7-1715101766516.png" style="width: 624px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106985iE4C7DD2969ED5D7A/image-dimensions/624x496?v=v2" width="624" height="496" role="button" title="austinnguyen_7-1715101766516.png" alt="austinnguyen_7-1715101766516.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Save the connection and execute “Authorization Check”.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_8-1715101778797.png" style="width: 628px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106986i70A61F858AB0F4C4/image-dimensions/628x295?v=v2" width="628" height="295" role="button" title="austinnguyen_8-1715101778797.png" alt="austinnguyen_8-1715101778797.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;At this point, if you log in to the called system and go to TCode SM59. Then you will see the connection from the calling system but from that technical user, not ours.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="austinnguyen_9-1715101791303.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/106987i77B6B1D9077CE4C3/image-dimensions/633x45?v=v2" width="633" height="45" role="button" title="austinnguyen_9-1715101791303.png" alt="austinnguyen_9-1715101791303.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I hope that blog will find you well. If you have any questions or concerns so far, feel free to contact me.&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/create-trusted-rfc-with-specific-technical-user/ba-p/13694181"/>
    <published>2024-05-08T17:46:41.940000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/creating-rfc-function-module-its-web-services-in-sap-amp-amp-testing-using/ba-p/13705811</id>
    <title>Creating RFC function module , Its Web services in SAP &amp;amp; Testing using SOAPUI.</title>
    <updated>2024-05-18T14:25:20.820000+02:00</updated>
    <author>
      <name>Srikanta_Kumar_Gouda1221</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1454912</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Introduction:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;By leveraging RFC, organizations can enable robust data exchange and process integration across different SAP and non-SAP systems.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, creating RFCs is only half the battle. To harness their full potential, these RFCs often need to be exposed as web services, providing a standardized way for external applications to interact with SAP functionalities. This is where the power of web services comes into play, bridging diverse systems and enabling seamless, real-time data transactions.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;But how can you ensure that these web services are functioning correctly? This is where testing tools like SOAPUI become invaluable. SOAPUI allows developers and testers to validate the performance, security, and reliability of web services before they go live, ensuring smooth and error-free operations.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog post, we will dive deep into the process of creating RFCs in SAP, transforming them into web services, and rigorously testing them using SOAPUI. Whether you are a seasoned SAP professional or a newcomer looking to enhance your integration skills, this guide will provide you with the insights and tools needed to master SAP web services and ensure their optimal performance.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;STEPS&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Create a function group in SE80.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_0-1716031664471.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112562iD638F3AAE878CD23/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_0-1716031664471.png" alt="Pramod_Hiremath_0-1716031664471.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;2.&lt;/SPAN&gt;&lt;SPAN&gt;Provide the package name &amp;amp; click on SAVE.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_1-1716031664473.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112563iBD55B6EA0AF9E544/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_1-1716031664473.png" alt="Pramod_Hiremath_1-1716031664473.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;3.Activate the FUNCTION GROUP.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_2-1716031664474.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112564iB28F559364D71A89/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_2-1716031664474.png" alt="Pramod_Hiremath_2-1716031664474.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;4.Execute the T-code SE37 &amp;amp; Create a FUNCTION MODULE.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_3-1716031664475.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112565iAF8D0F4ED85BC1B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_3-1716031664475.png" alt="Pramod_Hiremath_3-1716031664475.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Give the Function group name, short description &amp;amp; click on SAVE.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_4-1716031664475.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112566i7036C771D5ABEEE8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_4-1716031664475.png" alt="Pramod_Hiremath_4-1716031664475.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Click on the Radio button REMOTE ENABLED MODULE&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_5-1716031664478.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112567i81261880A103BC86/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_5-1716031664478.png" alt="Pramod_Hiremath_5-1716031664478.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Take some importing parameters in order to receive the values as per the requirement.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_6-1716031664480.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112568i7B16ACD13B8F1A95/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_6-1716031664480.png" alt="Pramod_Hiremath_6-1716031664480.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Take one exporting parameter to return the message if the value is not found.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_7-1716031664481.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112569iDDE80058C2D14347/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_7-1716031664481.png" alt="Pramod_Hiremath_7-1716031664481.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Take internal tables in order to store multiple data. Here, Gt_mara is referring to mara structure having some fields like MATNR, ERSDA &amp;amp;&amp;nbsp; Gt_marc&amp;nbsp; is referring to marc structure having some fields like MATNR, PLIFZ.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_8-1716031664482.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112570iD42547F561C0AAD8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_8-1716031664482.png" alt="Pramod_Hiremath_8-1716031664482.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;You can write your own logic to test the RFC FM, whether it returns some value or not.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_9-1716031664484.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112573i40F0B5CC218A0AF7/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_9-1716031664484.png" alt="Pramod_Hiremath_9-1716031664484.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Now, check the result by providing input values from MARA &amp;amp; MARC&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_10-1716031664486.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112572i34C69D2CE2FF1E3A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_10-1716031664486.png" alt="Pramod_Hiremath_10-1716031664486.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_11-1716031664487.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112571i40C2CC3B48547B21/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_11-1716031664487.png" alt="Pramod_Hiremath_11-1716031664487.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_12-1716031664488.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112574i82761DB3C9E4079D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_12-1716031664488.png" alt="Pramod_Hiremath_12-1716031664488.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_13-1716031664488.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112575iDA4F18091E50256F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_13-1716031664488.png" alt="Pramod_Hiremath_13-1716031664488.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;12.now, create its webservice from function module.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_14-1716031664489.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112576i67644DB0E8A93E38/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Pramod_Hiremath_14-1716031664489.png" alt="Pramod_Hiremath_14-1716031664489.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;13.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Provide the service definition &amp;amp; description.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_15-1716031664491.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112577iD0EA7280ED21B50B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_15-1716031664491.png" alt="Pramod_Hiremath_15-1716031664491.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_16-1716031664492.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112579i3C46BE860105C830/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_16-1716031664492.png" alt="Pramod_Hiremath_16-1716031664492.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_17-1716031664493.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112578i6607BCBCF2908DE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_17-1716031664493.png" alt="Pramod_Hiremath_17-1716031664493.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_18-1716031664495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112581i608CF6A41B4A0A8E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_18-1716031664495.png" alt="Pramod_Hiremath_18-1716031664495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_19-1716031664497.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112582i245C728FF3E6B3DD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_19-1716031664497.png" alt="Pramod_Hiremath_19-1716031664497.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;14. Below we can see the service definition properties. And activate it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_20-1716031664498.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112580i839A176BA3A5DABC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_20-1716031664498.png" alt="Pramod_Hiremath_20-1716031664498.png" /&gt;&lt;/span&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Execute the T-code &lt;STRONG&gt;SOAMANAGER &lt;/STRONG&gt;in S4HANA.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_21-1716031664499.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112583iEDEEF6EF87D5914C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_21-1716031664499.png" alt="Pramod_Hiremath_21-1716031664499.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Click on to the Webpages.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;16.Provide your Hana-user id &amp;amp; Password.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_22-1716031664502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112585iDDC8BE7641AB593A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_22-1716031664502.png" alt="Pramod_Hiremath_22-1716031664502.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;17.&lt;/SPAN&gt;&lt;SPAN&gt;Click on web service configuration.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_23-1716031664505.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112584iF29D6EA2216C82DE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_23-1716031664505.png" alt="Pramod_Hiremath_23-1716031664505.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;18.&lt;SPAN&gt;Choose the object type as Object Name and pass the correct service definition name. If the service definition exists, then we can be able to see ‘entry found’ otherwise not found.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_24-1716031664506.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112586i16E8C2B2E7952E9C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_24-1716031664506.png" alt="Pramod_Hiremath_24-1716031664506.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_25-1716031664508.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112587iD2F38F79D2B3E088/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_25-1716031664508.png" alt="Pramod_Hiremath_25-1716031664508.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;19.Now, Click on Internal Name ---&amp;gt;Click on Create service.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_27-1716032478137.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112590i6B6DB09116DDE415/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_27-1716032478137.png" alt="Pramod_Hiremath_27-1716032478137.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;20.&lt;/SPAN&gt;&lt;SPAN&gt;Fill up the details like service &amp;amp; binding name, Provide security, SOAP protocol &amp;amp; Operation settings.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_28-1716032502249.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112591i752C912208A120D8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_28-1716032502249.png" alt="Pramod_Hiremath_28-1716032502249.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_29-1716032536645.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112592iAB440AADD8CDA294/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_29-1716032536645.png" alt="Pramod_Hiremath_29-1716032536645.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;21.&lt;/SPAN&gt;&lt;SPAN&gt;Fill up the provide security&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_30-1716032620620.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112593i52D908BDC6346BE4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_30-1716032620620.png" alt="Pramod_Hiremath_30-1716032620620.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_32-1716032702986.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112595iC44973C817D32099/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_32-1716032702986.png" alt="Pramod_Hiremath_32-1716032702986.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_31-1716032696645.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112594iE8167A16F9389CF3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_31-1716032696645.png" alt="Pramod_Hiremath_31-1716032696645.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;22.&lt;/SPAN&gt;&lt;SPAN&gt;No need to fill out SOAP protocol details so, click on next. In operation settings click on finish.&lt;/SPAN&gt; &lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_33-1716032753539.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112596i0D378675B5651262/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_33-1716032753539.png" alt="Pramod_Hiremath_33-1716032753539.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;23.&lt;SPAN&gt;Then Choose the service &amp;amp; activated--&amp;gt; below interface will open--&amp;gt; click on save&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_34-1716032793811.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112597i4B264943E46CA5FB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_34-1716032793811.png" alt="Pramod_Hiremath_34-1716032793811.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;24.&lt;SPAN&gt;Select the service &amp;amp; click on republish&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_35-1716032885383.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112598iCDA796F1B5991D18/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_35-1716032885383.png" alt="Pramod_Hiremath_35-1716032885383.png" /&gt;&lt;/span&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Click on save &lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_36-1716032914591.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112599i40E9CA8605E5B16D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_36-1716032914591.png" alt="Pramod_Hiremath_36-1716032914591.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;SPAN&gt;26. Don’t provide any details, click on OK.&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_37-1716032951122.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112600iCFDE81FD95197A5E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_37-1716032951122.png" alt="Pramod_Hiremath_37-1716032951122.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;27.&lt;SPAN&gt;&amp;nbsp;Click on the below Execute button under the WSDL generation.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_38-1716033030943.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112601i9A9A89219DEDC25B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_38-1716033030943.png" alt="Pramod_Hiremath_38-1716033030943.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;28.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Press CTRL+S and save the file in WSDL format.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_39-1716033091308.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112602iF99DD903E5B8E0E8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_39-1716033091308.png" alt="Pramod_Hiremath_39-1716033091308.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_40-1716033197666.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112603i8D658740DA7B88A5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_40-1716033197666.png" alt="Pramod_Hiremath_40-1716033197666.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;29. Now, we are ready to test the service in SOAPUI. S&lt;/SPAN&gt;&lt;SPAN&gt;o, let's download the SOAPUI.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Notes:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;how to Download the SOAPUI software &amp;amp; implement it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;Go to &lt;/SPAN&gt;&lt;SPAN&gt;SOAPUI.ORG&lt;/SPAN&gt;&lt;SPAN&gt; website and download SOAPUI open source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_41-1716033275587.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112604i45FE680A66735639/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_41-1716033275587.png" alt="Pramod_Hiremath_41-1716033275587.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_42-1716033403570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112605i093E3007CFF1922A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_42-1716033403570.png" alt="Pramod_Hiremath_42-1716033403570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Below is the interface of how the SoapUI looks like. can start doing the API testcases.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Click on soap--&amp;gt;new soap project--&amp;gt; give a project name --&amp;gt;choose the WSDL which we have downloaded --&amp;gt;ok&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_43-1716033423652.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112606iB0B21F7359A9DA2F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_43-1716033423652.png" alt="Pramod_Hiremath_43-1716033423652.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_44-1716033479047.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112607iCB2DF1765F89F895/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_44-1716033479047.png" alt="Pramod_Hiremath_44-1716033479047.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_45-1716033511356.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112608i0DE68C8E76A71269/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_45-1716033511356.png" alt="Pramod_Hiremath_45-1716033511356.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Click upon request1 then we can see the details in XML file.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_46-1716033530496.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112609iE653D1A0DDF801D1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_46-1716033530496.png" alt="Pramod_Hiremath_46-1716033530496.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;To access the data, provide the authorization. Click on add new authorization.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_47-1716033585666.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112610i481517D65F1AD7A2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_47-1716033585666.png" alt="Pramod_Hiremath_47-1716033585666.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Finally, we can see the result as shown below. For success the status code will be 200.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pramod_Hiremath_26-1716031664511.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112588i8CAC50293601FB3D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pramod_Hiremath_26-1716031664511.png" alt="Pramod_Hiremath_26-1716031664511.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-rfc-function-module-its-web-services-in-sap-amp-amp-testing-using/ba-p/13705811"/>
    <published>2024-05-18T14:25:20.820000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538</id>
    <title>Technical User Propagation from JCo towards On-Premises</title>
    <updated>2024-05-22T15:06:16.024000+02:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P data-unlink="true"&gt;This blog lays out how to use a technical user instead of basic authentication from &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;JCo based on the SAP Java Buildpack in CF&lt;/A&gt; towards on-premises.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-885667874"&gt;Background&lt;/H1&gt;&lt;P data-unlink="true"&gt;JCo retrieves an access token representing the technical user which is then be sent to the Connectivity service. This is similar to principal propagation, but in this case, a technical user is propagated instead of a business user. The retrieval of the access token performs the OAuth 2.0 client credentials flow, according to the token service configurations in the destination. Currently for JCo the token service generation supports basic authentication only. The token service is called from the Internet, not from the Cloud Connector.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-689154369"&gt;Configuration&lt;/H1&gt;&lt;P&gt;Generally speaking, the setup as described in the &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/invoke-abap-function-modules-in-on-premise-abap-systems?locale=en-US" target="_self" rel="noopener noreferrer"&gt;documentation&lt;/A&gt; stays the same, only the destination configuration in the Destination Service needs to be adjusted.&lt;/P&gt;&lt;P&gt;In the UI select the authentication type&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;TechnicalUserPropagation&lt;/STRONG&gt;&lt;/EM&gt;. You now need to enter three values for:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_id&lt;/STRONG&gt; - the technical user name (client ID) which is forwarded towards on-premises and used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_secret&lt;/STRONG&gt; - the secret for &lt;EM&gt;jco.client.tech_user_id&lt;/EM&gt; used for token retrieval&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;jco.client.tech_user_service_url&lt;/STRONG&gt; - the URL of the token service&lt;SPAN&gt;, against which the token exchange is performed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-621723583"&gt;&lt;SPAN&gt;Example&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;We are going to use the token of the XSUAA service instance here. We specified for the instance in the configuration JSON the &lt;STRONG&gt;xsappname&lt;/STRONG&gt; as &lt;EM&gt;jco-technicalProp&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After the application binding we can retrieve the relevant parameters from the CF environment variables VCAP_SERVICES:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"clientid": "sb-jco-technicalProp!t77058"
"clientsecret": "TMsePptYQLSRf6qUWWt+l1D0rUQ="
"url": "https://cf.authentication.hana.ondemand.com"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Entering it in the Destination Service:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Properties" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113368iDC4EDC134023C774/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_0-1716286606143.png" alt="simon_luser_0-1716286606143.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The token will now be forwarded to the Cloud Connector. Assuming all necessary basic &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configuring-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;steps&lt;/A&gt; for principal propagation are configured, we can &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configure-subject-patterns-for-principal-propagation?locale=en-US" target="_self" rel="noopener noreferrer"&gt;configure a pattern&lt;/A&gt; to extract its name for the short-lived certificate:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Pattern" style="width: 259px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/112153iE8E7F78470E681B7/image-dimensions/259x107?v=v2" width="259" height="107" role="button" title="simon_luser_1-1715949812665.png" alt="simon_luser_1-1715949812665.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The ABAP backend needs to &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector-configure-principal-propagation-for-rfc?locale=en-US&amp;amp;version=Cloud#2.-map-short-lived-certificates-to-users" target="_self" rel="noopener noreferrer"&gt;maintain a user mapping&lt;/A&gt; for this technical user, in this case mapping it to the ABAP user &lt;EM&gt;SKYWALKER&lt;/EM&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Mapping" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/113369iC19FACFAECE438B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="simon_luser_1-1716286913724.png" alt="simon_luser_1-1716286913724.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That's it!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/technical-user-propagation-from-jco-towards-on-premises/ba-p/13704538"/>
    <published>2024-05-22T15:06:16.024000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-call-restful-apis-from-sap-abap-a-step-by-step-guide/ba-p/13926663</id>
    <title>How to Call RESTful APIs from SAP ABAP: A Step-by-Step Guide</title>
    <updated>2024-11-08T09:53:20.246000+01:00</updated>
    <author>
      <name>Vrushali_15</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/171052</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="4" color="#0000FF"&gt;Introduction to RESTful APIs:&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; RESTful APIs provide a simple way to interact with web services, making them a powerful tool for SAP developers. In this blog post, we'll explore how to call RESTful APIs from SAP ABAP, covering everything from setup to practical examples.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Some basic terms while calling API.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;API:&lt;/STRONG&gt; API stands for Application Programming Interface. Are set of rules that allow programs to communicate with each other.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;REST:&lt;/STRONG&gt; REST stands for Representational State Transfer. It is an architectural style for providing standards between systems on web which makes easier for systems to communicate with each other.&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;REST API:&lt;/STRONG&gt; The API’s which follows REST methodologies for the communication. In this, communication is done in form of &lt;STRONG&gt;Request&lt;/STRONG&gt; and &lt;STRONG&gt;Response.&lt;/STRONG&gt; Response is nothing but a request from server to the client.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Request&lt;/STRONG&gt; is made up of mainly 4 things&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1) &lt;STRONG&gt;Endpoint:&lt;/STRONG&gt; It is the URL you request for, it contains the target host and the prefix path.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;2) &lt;STRONG&gt;Methods&lt;/STRONG&gt;: Rest API generally uses four methods to communicate with server.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Methods&amp;nbsp;&lt;/STRONG&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; a) &lt;STRONG&gt;Get&lt;/STRONG&gt;&amp;nbsp;- This method is used to get data from the server&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; b) &lt;STRONG&gt;Post -&lt;/STRONG&gt; This method is used to create new data entry on the server&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; c) &lt;STRONG&gt;Put&lt;/STRONG&gt;&amp;nbsp;- This method is used to update any data on the server. It will replace the entire resources with provided data.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; d) &lt;STRONG&gt;Patch -&lt;/STRONG&gt; This method is also used to update any data on the server like put only difference is it allow you to update specific fields or properties that you want to change.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e) &lt;STRONG&gt;Delete&lt;/STRONG&gt;&amp;nbsp;- This method is used to delete data from the server&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3)&lt;STRONG&gt;&amp;nbsp;Headers:&lt;/STRONG&gt; Headers are used to provide authentication and provide information of the body content.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4) &lt;STRONG&gt;The Body:&lt;/STRONG&gt; The data you want to send to the server is sent through the request body. This data is sent either in JSON format or XML format.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#0000FF"&gt;Prerequisites:&lt;/FONT&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Ensure you have the necessary authorizations to call HTTP requests. You might need the following:&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;HTTP Service:&lt;/STRONG&gt; Ensure that the HTTP service is enabled in your SAP system. This can be checked and configured in transaction SICF (SAP Internet Communication Framework).&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;Authorization:&lt;/STRONG&gt; Make sure your user has the necessary permissions to make HTTP calls and manage the HTTP destination.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#0000FF"&gt;Setting Up the Environment:&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; After executing SM59 below screen will be visible.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_0-1730626070106.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186237i070FC6092BF9CD0E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_0-1730626070106.png" alt="Vrushali_15_0-1730626070106.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1) &lt;STRONG&gt;ABAP Connections:&lt;/STRONG&gt; Type 3 means Connection to ABAP System.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;2) &lt;STRONG&gt;HTTP connection to External Server:&lt;/STRONG&gt; Type G means we will connect SAP system with Non - SAP system or third party system.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3) &lt;STRONG&gt;HTTP connection to ABAP System&lt;/STRONG&gt;: Type H means HTTP Connection to ABAP System&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4) &lt;STRONG&gt;Internal Connections:&lt;/STRONG&gt; Type I means connection to Application Server with Same Database.&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;5) &lt;STRONG&gt;Logical Connections:&lt;/STRONG&gt; Type L means Reference Entry (Refers to Other Destination)&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;6) &lt;STRONG&gt;TCP/IP Connections:&lt;/STRONG&gt; Type T means start External Program Using TCP/IP.&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;7) &lt;STRONG&gt;Connection via ABAP Driver:&lt;/STRONG&gt; Type X means RFC Using Special ABAP Driver Routines.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_0-1730626357787.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186238iC40998D8D89A9D27/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_0-1730626357787.png" alt="Vrushali_15_0-1730626357787.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#0000FF"&gt;&lt;STRONG&gt;Connecting SAP with Non - SAP System&lt;/STRONG&gt;&lt;/FONT&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; So, we are going to connect SAP with Non - SAP system. For that we need to create RFC connection of type G i.e. HTTP Connections to External Server. Below is the procedure for creating connection.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1) Firstly, we need to click on create button as below.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_1-1730626608779.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186239iA628EFA885BB4BAF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_1-1730626608779.png" alt="Vrushali_15_1-1730626608779.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2) After clicking on create button below screen will be visible. We need to enter target host i.e. URL of third party.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_2-1730626745796.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186240i607E57FFBD70B797/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_2-1730626745796.png" alt="Vrushali_15_2-1730626745796.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ For HTTP connection.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Give Service number (Port number) : 80&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Select SSL as inactive in ‘Logon &amp;amp; Security’.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ For HTTPS Connection.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Give Service number (Port number): 443.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Configure proxy settings with help of BASIS team.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Configure SSL certificate in t-code ‘STRUST’ with help of BASIS team.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;- Select SSL as active and select ‘ANONYM SSL’ as shown in picture below.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(Difference between HTTP &amp;amp; HTTPS is HTTPS provides a secure, encrypted connection that helps protect your data and privacy, whereas HTTP does not.).&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3) Then click on ‘Connection Test’ button on upper left corner in order to test the connection we are trying to establish. If following screen appears we can assume that connection is established successfully.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_0-1730627068100.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186242i88BD4C23CBB7A4F2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_0-1730627068100.png" alt="Vrushali_15_0-1730627068100.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4)&amp;nbsp;And after that we need to upload that SSL certificates if necessary using Transaction Code ‘STRUST’ under ‘SSL client SSL Clent (Standard) ‘as maintain below.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vrushali_15_1-1730627128306.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/186243i9BD03F35DC4055E3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Vrushali_15_1-1730627128306.png" alt="Vrushali_15_1-1730627128306.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#0000FF"&gt;Making HTTP Requests from ABAP:&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; There is special class in SAP called ‘CL_REST_HTTP_CLIENT’ which can be used to communicate with REST API. In this class there are 2 methods for calling API.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;FONT size="4"&gt;&lt;STRONG&gt;1) 1st Method is ‘CREATE_BY_DESTINATION’&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;Step 1:&lt;/STRONG&gt; First we have to create HTTP object for the URL destination we want to access.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; DATA: LO_HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT.

                                                           
       CL_HTTP_CLIENT=&amp;gt;CREATE_BY_DESTINATION (
           EXPORTING
               DESTINATION = 'E-Invoicing' "Name of the RFC destination
           IMPORTING
               CLIENT = LO_HTTP_CLIENT " HTTP Client object
           EXCEPTIONS                                                                
                ARGUMENT_NOT_FOUND = 1
                DESTINATION_NOT_FOUND = 2
                DESTINATION_NO_AUTHORITY = 3
                PLUGIN_NOT_ACTIVE = 4
                INTERNAL_ERROR = 5
                OTHERS = 6
                                                                   ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;Step 2:&lt;/STRONG&gt; Set the method and version you want to use for the communication, here we have used POST method. And HTTP version as 1.0.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;lo_http_client-&amp;gt;request-&amp;gt;set_method(if_http_request=&amp;gt;co_request_method_post ).
lo_http_client-&amp;gt;request-&amp;gt;set_version(if_http_request=&amp;gt;co_protocol_version_1_1 ).
&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁&lt;STRONG&gt; Step3:&lt;/STRONG&gt; Set request parameters, if any.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;   lv_url = /test.com/ewb/enc/v1.03/authentication'.

       CALL METHOD cl_http_utility=&amp;gt;set_request_uri
           EXPORTING
              request = lo_http_client-&amp;gt;request
              uri = lv_url.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;⦁ &lt;STRONG&gt;Step4:&lt;/STRONG&gt; Set the request header if any.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; CALL METHOD lo_http_client-&amp;gt;request-&amp;gt;set_header_field   
    EXPORTING
        IV_NAME  = 'Authorization'
        IV_VALUE = ‘l7xxba7aa16e968646b993426bsd6734h:201806034242’.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step5:&lt;/STRONG&gt; Set the type of data you want to send to request body. Below are some examples.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ If you are sending JSON pass ‘application/json’.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ If you are sending XML data pass ‘application/xml’ or ‘text/xml’.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ IF you are sending multipart data pass ‘multipart/form-data’.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt; (Here I am sending JSON file)&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; LO_HTTP_CLIENT-&amp;gt;REQUEST-&amp;gt;SET_CONTENT_TYPE( 'application/json' ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step6:&lt;/STRONG&gt; Pass actual data to the request. In following example lv_string contains JSON string which is we are going to pass to request.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;   DATA : lv_string type string.

   LO_HTTP_CLIENT-&amp;gt;REQUEST-&amp;gt;SET_CDATA( LV_STRING ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step7:&lt;/STRONG&gt; Send request to the API and receive the response.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;call method lo_http_client-&amp;gt;send             “sending request to API
   exceptions
      http_communication_failure = 1
      http_invalid_state = 2.

call method lo_http_client-&amp;gt;receive           “receiving response from API
   Exceptions
      http_communication_failure = 1
      http_invalid_state = 2
      http_processing_failed = 3.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step8:&lt;/STRONG&gt; Read HTTP return code and the response. Example if 200 is a success return code, 500 for internal server error, 400 for bad request. In the below example we get the response from the API in the string ‘response’.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; DATA: http_status type string,
       Reason type string,
       Response type string.

call method lo_http_client-&amp;gt;response-&amp;gt;get_status
   importing
       code = http_status
       reason = reason.

response = lo_http_client-&amp;gt;response-&amp;gt;get_cdata( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;2) 2nd method is 'CREATE_BY_URL'&lt;/STRONG&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 1:&lt;/STRONG&gt; First we have to create HTTP object for the URL destination we want to access.&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; DATA: lo_http_client TYPE REF TO cl_http_client,
       lv_url TYPE string,
       lv_response TYPE string,
       lv_status TYPE i.

lv_url = 'https://api.example.com/data'.

   cl_http_client=&amp;gt;create_by_url(
      EXPORTING
         url = lv_url
      IMPORTING
         client = lo_http_client
      EXCEPTIONS
         argument_not_found = 1
         plugin_not_active = 2
         internal_error     = 3
         OTHERS             = 4 ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 2:&lt;/STRONG&gt; Set the method and version you want to use for the communication, here we have used POST method. And HTTP version as 1.0.&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;lo_http_client-&amp;gt;request-&amp;gt;set_method( 'POST' ).
lo_http_client-&amp;gt;request-&amp;gt;SET_VERSION(if_http_request=&amp;gt;co_protocol_version_1_1 ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 3:&lt;/STRONG&gt; Set the request header if any necessary.&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;lt_http = VALUE #( ( name = 'accesstoken'  value = ‘12344566743’ )
                    ( name = 'apiaccesskey'  value = ’ER452DD234’)                                ( name = 'Content-Type'  value = 'application/json' ) ).

lo_http_client-&amp;gt;request-&amp;gt;set_header_fields( fields = lt_http ).
lo_http_client-&amp;gt;request-&amp;gt;set_content_type( 'application/json' ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 4:&lt;/STRONG&gt; Pass actual data to the request. In following example lv_string contains JSON string which is we are going to pass to request.&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; lo_http_client-&amp;gt;request-&amp;gt;set_data( lv_string).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 5:&lt;/STRONG&gt; Send request to the API and receive the response.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;lo_http_client-&amp;gt;send(                              “Sending the request
  EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state        = 2 ).

lo_http_client-&amp;gt;receive(                             “Receiving the response
   EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state        = 2
      http_processing_failed    = 3 ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ⦁ &lt;STRONG&gt;Step 6:&lt;/STRONG&gt; Read HTTP return code and the response. Example if 200 is a success return code, 500 for internal server error, 400 for bad request. In the below example we get the response from the API in the string ‘response’.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;Code:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  Data: lv_response    TYPE  string,
        lv_http_return_code TYPE I .

                                                  lv_response = lo_http_client-&amp;gt;response-&amp;gt;get_cdata( ).
lo_http_client-&amp;gt;response-&amp;gt;get_status(IMPORTING code   = lv_http_return_code ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;STRONG&gt;&amp;nbsp;&lt;FONT color="#0000FF"&gt;Conclusion&lt;/FONT&gt;&lt;/STRONG&gt;&lt;FONT color="#0000FF"&gt;:&lt;/FONT&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Connecting RFCs in SAP is a powerful way to integrate different systems and enable seamless communication across your SAP landscape. By following above steps you can set up your RFC.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Feel free to reach out if you have any questions or run into issues during your implementation.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-call-restful-apis-from-sap-abap-a-step-by-step-guide/ba-p/13926663"/>
    <published>2024-11-08T09:53:20.246000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-save-a-lot-of-time-with-the-abap-connector-transaction-aco-proxy/ba-p/13943675</id>
    <title>How to Save a Lot of Time With the ABAP Connector (Transaction ACO_PROXY)</title>
    <updated>2024-12-31T22:42:01.243000+01:00</updated>
    <author>
      <name>thomas_weiss</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181896</uri>
    </author>
    <content>&lt;H4 id="toc-hId-1333839708"&gt;&lt;STRONG&gt;Introduction and Overview&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Are you tired of creating large numbers of data types in your client-system when you call a remote enabled function module (RFM) by RFC and the data types of its parameters do not exist on the client? Let transaction ACO_PROXY do it for you. In a fraction of the time you need to create all these data types yourself, this tool, also called ABAP connector (ACo) and available as of ABAP 7.40, generates:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;All&lt;/STRONG&gt; &lt;STRONG&gt;data types&lt;/STRONG&gt; of an RFM’s parameters as well as &lt;STRONG&gt;the parameters&lt;/STRONG&gt; &lt;STRONG&gt;themselves &lt;/STRONG&gt;&amp;nbsp;and&lt;/LI&gt;&lt;LI&gt;A &lt;STRONG&gt;static global proxy&lt;/STRONG&gt; class with a method that encapsulates the call of this RFM by RFC. &amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: You can also generate &lt;STRONG&gt;one ACo proxy class for&lt;/STRONG&gt; &lt;STRONG&gt;RFC calls of several RFMs&lt;/STRONG&gt;, if calling each of them with a different method of the same proxy class makes sense from a design perspective. Since, in principle, it is irrelevant to the explanations in this weblog whether a proxy class covers calls to one or many RFMs and in order to keep things simple, I explain the concepts and features of transaction ACO_PROXY using the case of generating a proxy that calls one RFM.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;Reading this weblog,&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;You get an idea of how much time you save with ACO_PROXY by looking at a real-world example with a BAPI that uses hundreds of elementary data types in its interface. (“BAPI” is short for Business Application Programming Interface. You find some more explanation of this concept in the next section below.)&lt;/LI&gt;&lt;/UL&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: Transaction ACO_PROXY performs a recursive analysis of all complex data types used in the relevant RFM’s interface down to the elementary ones and recreates all of them in the client system. Since this tool creates global data types, you can use them not only in your caller program, but in any program in your client system.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;UL&gt;&lt;LI&gt;Get to know the few simple steps it takes to have this transaction create these data types and a proxy class.&lt;/LI&gt;&lt;LI&gt;You learn about some more options this tool offers such as instantiating the proxy class via a constructor vs. using a factory class or directly calling the proxy class vs. calling it via an interface etc. &amp;nbsp;(again, all additional entities such as a factory class or an interface will be generated by this tool).&lt;/LI&gt;&lt;LI&gt;You get to know why you always should choose RFC’s fast serialization for new scenarios when calling RFMs via ACo proxy.&lt;/LI&gt;&lt;LI&gt;You see how little code is needed in the client program to call an RFM via an ACo proxy class.&lt;/LI&gt;&lt;LI&gt;You understand why, in most cases, you are better off with a static proxy – generated by transaction ACO_PROXY – than with a dynamic proxy – generated by an ACo API – and also why in one specific case the dynamic ACo proxy is a better choice.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: Two other use cases of transaction ACO_PROXY are just mentioned in this introduction, because the first one needs little explanation, and the second one is treated in great detail in a weblog of an SAP colleague:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Obviously, an ACo proxy class supports you in writing completely object-oriented code, when you need to call an RFM via RFC, because the call itself is hidden in the generated proxy class.&lt;/LI&gt;&lt;LI&gt;In the weblog &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/how-to-generate-a-wrapper-for-function-modules-bapis-in-tier-2/ba-p/13692790" target="_blank"&gt;&lt;STRONG&gt;How to generate a wrapper for function modules (BAPIs) in tier 2&lt;/STRONG&gt;&lt;/A&gt; my SAP colleague Andre Fischer discusses how you profit from an ACo proxy when you want to call a local RFM which is not C1-released &amp;nbsp;in a program compliant with Clean Core guidelines: In this case, transaction ACO_PROXY generates a C1-released factory class, a C1-released interface for the ACo proxy class, and the proxy class itself. For all further details&lt;SPAN&gt; you are recommended to read my SAP colleague’s weblog. &lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H4 id="toc-hId-1137326203"&gt;&lt;STRONG&gt;How ACo Saves You a Lot of Time – a Real-World Example&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Let us now consider a real-world example of using transaction ACO_PROXY: &amp;nbsp;&lt;/P&gt;&lt;P&gt;Imagine yourself writing a client program which calls the BAPI BAPI_BUPA_ADDRESS_CHANGE &amp;nbsp;by RFC to change the address of a business partner. Its interface has 8 importing and 38 table parameters, which all have complex data types, and neither the BAPI nor any of its data types exist in your client system.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: “BAPI” is an Acronym for “Business Application Programming Interface”. From a technical perspective a BAPI is an RFM for which SAP guarantees a stable interface. From a business perspective BAPIs are interfaces to business objects, which are implemented as function modules.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;If we break all these complex data types down into their components, we get almost 800 elementary data types, which you all have to recreate in the client system – and on top of them also the 46 complex data types. Assuming that you are a fast developer, let us estimate that, on average, in ABAP Dictionary (transaction SE11), it takes you one minute to define an elementary data type and another 20 seconds per component to define a complex data type. Based on this very optimistic estimate, you need about 17 hours for this job.&lt;/P&gt;&lt;P&gt;When you are facing such a repetitive task, transaction ACO_PROXY is a game changer: Just enter the name of the relevant RFM and of a suitable destination as well as some other values in the tool. This is all it takes to make this transaction generate all the almost 800 elementary and 46 complex data types used in this BAPI’s parameters and a proxy class for an RFC call to the BAPI BAPI_BUPA_ADDRESS_CHANGE.&lt;/P&gt;&lt;P&gt;With transaction “ACO_PROXY”, it takes a few minutes to generate the many hundred data types in our example, compared to about 17 hours you need for this task without tool support. In fact, 17 hours is an optimistic estimate for such a job, actually creating all data types used in the parameters of BAPI BAPI_BUPA_ADDRESS_CHANGE might take far longer.&lt;/P&gt;&lt;H4 id="toc-hId-940812698"&gt;&lt;STRONG&gt;Basic Steps to Create a Static ACo Proxy&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Let us now dive into the details of how to use this transaction. Below, there is a screenshot of ACO_PROXY’s UI with a few numbered labels, which refer to relevant input fields to be explained in this section. You will get to know also some more details of the transaction’s UI in the section to follow.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Picture 1: Transaction ACO_PROXY and its input fields" style="width: 844px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/206225iDD8CBD1CB146B110/image-size/large?v=v2&amp;amp;px=999" role="button" title="ACO_Proxy_smaller.png" alt="Picture 1: Transaction ACO_PROXY and its input fields" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Picture 1: Transaction ACO_PROXY and its input fields&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;ACo transaction needs to know &lt;STRONG&gt;where to get the called RFM’s metadata (cf. label 1):&lt;/STRONG&gt;&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;You select the option “&lt;STRONG&gt;locally&lt;/STRONG&gt;” if the respective RFM is available on your client system.&lt;/LI&gt;&lt;LI&gt;In case you choose “&lt;STRONG&gt;by RFC&lt;/STRONG&gt;”, you need to input a destination pointing to your target system or to another system that contains the relevant RFM.&lt;/LI&gt;&lt;LI&gt;If the respective metadata are to be retrieved &lt;STRONG&gt;via file upload&lt;/STRONG&gt;, first get them into the relevant file. To achieve this, you also use the ACo tool’s “Get Metadata” options and, again, you choose between the two options “locally” and “by RFC”. &amp;nbsp;Next, select “File” (&lt;STRONG&gt;cf. label 2&lt;/STRONG&gt;) in the line starting with the label “Create” and then press the execute button or F8. In the popup shown next you input file name plus location and confirm.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: The option to get the metadata by RFC – whether you retrieve them directly from the remote system or upload them from a file that in turn has got them from the remote system - is needed if, for example, you want to generate an ACo Proxy call to an RFM that, in your landscape, is not available on any system whose release supports transaction “ACO_PROXY”.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;UL&gt;&lt;LI&gt;Enter the na&lt;STRONG&gt;me(s) of the RFM(s)&lt;/STRONG&gt; for which ACo should generate a proxy with the data types of the RFM’s parameters (&lt;STRONG&gt;cf. label 3&lt;/STRONG&gt;). (Surely you remember that you can create a proxy class to encapsulate the connections to one or many RFM depending on what suits your design best.)&lt;/LI&gt;&lt;LI&gt;Enter &lt;STRONG&gt;name and package of your proxy class&lt;/STRONG&gt; (&lt;STRONG&gt;cf. label 4&lt;/STRONG&gt;).&lt;/LI&gt;&lt;LI&gt;Define whether to create a proxy class for (a) a&amp;nbsp;&lt;STRONG&gt;synchronous RFC call&lt;/STRONG&gt;, (b) an&amp;nbsp;&lt;STRONG&gt;asynchronous one with or without response / result method&lt;/STRONG&gt; or (c) a &lt;STRONG&gt;bgRFC call&lt;/STRONG&gt;. (&lt;STRONG&gt;cf. label 5&lt;/STRONG&gt;) While using the synchronous RFC proxy is the self-explanatory default option, options (b) and (c) need some more explanation: As for option (b), an ACo proxy for an asynchronous RFC call with response also has a result method, and you need a sync point in your client program where it waits until the asynchronous response is available and where it can process the result once it is provided. Option (c), creating an ACo proxy that encapsulates a bgRFC call, requires prior creation of a bgRFC unit, which needs to be passed to the relevant method of the ACo proxy class.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-744299193"&gt;&lt;STRONG&gt;More Options in Transaction “ACO_PROXY”&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;You can also choose:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Whether you prefer to create the proxy instance using a constructor or a factory class.&lt;/LI&gt;&lt;LI&gt;Whether you want to create an interface, in which case you have to enter its name. Selection of this option is enforced by the tool, if &amp;nbsp;“Create Factory Class” is chosen.&lt;/LI&gt;&lt;LI&gt;(a) Whether you want to create a public instance method of the proxy class to encapsulate the RFC call or (b) Whether you prefer to use a private instance method to achieve this, in which case – in addition to the private method - also a public method is generated that, in turn, calls this private method. &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;(a) Whether you want to pass the destination name to the relevant proxy method when calling an RFM – which is the default – or (b) whether you want to pass the destination via constructor, in which case you should select the respective option. Note that, in the latter case, &amp;nbsp;usage of interface IF_RFC_DEST is mandatory in SAP BTP ABAP Environment and SAP S/4HANA Cloud Public Edition.&lt;/LI&gt;&lt;LI&gt;Whether you want the called RFM(s) to throw class-based, classic or BAPI exceptions.&lt;/LI&gt;&lt;LI&gt;Whether you want to generate the relevant objects so that they can be used system -internally, in which case you select “C1 Release”. In this case, you should also define if you want to create only C1-released data types that do not already exist in the system. This is what the option “Do not Create Shadows of C1-released Types” is for.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Normally, you are almost done now. Just press “Execute” or F8 to generate:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;A persistent proxy class.&lt;/LI&gt;&lt;LI&gt;An &amp;nbsp;instance method that encapsulates the call of the respective RFM for each RFM covered by this proxy class a method and a constructor.&lt;/LI&gt;&lt;LI&gt;All complex and elementary data types of the relevant RFMs’ parameters.&lt;/LI&gt;&lt;LI&gt;(If you have made the respective choice) an interface and a factory class.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-547785688"&gt;&lt;STRONG&gt;Always Choose the Correct Serialization in Destinations Used in an RFC Call via ACo Proxy &lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;In an SM59 destination that is used in an RFC call via an ACo proxy you should always select these options in the tab “Special Options”:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;“Protocol -&amp;gt; Serializer -&amp;gt; &lt;STRONG&gt;Fast serializer&lt;/STRONG&gt;” plus &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;“Interface Check for Fast Serialization -&amp;gt; &lt;STRONG&gt;Destination for new scenario&lt;/STRONG&gt;“&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;With any other serialization or interface check, you might run the risk of data corruption due to incorrect data offset, which might happen to a parameter with a structured data type if this data type differs between client and server system. Though the probability that this might occur is small, once it happens, it might corrupt a large part of the data in the relevant table or structure and thereby cause big harm. &lt;STRONG&gt;Therefore, it is important to always choose fast serialization for new scenarios in destinations used by an ACo proxy&lt;/STRONG&gt;.&lt;/P&gt;&lt;H4 id="toc-hId-351272183"&gt;&lt;STRONG&gt;The Code to Call an RFM with an ACo Proxy&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Now, let us call an ACo proxy in a program. Suppose you have created a proxy class zcl_rfc_system_info, which calls RFM RFC_SYSTEM_INFO via RFC, which needs the destination name in the constructor, and which you want to call in the same system.&lt;/P&gt;&lt;P&gt;This is how you instantiate this class and pass destination SELF to the constructor:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ACO_Code_1_60.png" style="width: 678px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/206229iDF07102B72E53806/image-size/large?v=v2&amp;amp;px=999" role="button" title="ACO_Code_1_60.png" alt="ACO_Code_1_60.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;And this is the code to call this RFM using the proxy class instance:&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ACO_Code_2_60.png" style="width: 667px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/206228iFD3D3DC86CFB7414/image-size/large?v=v2&amp;amp;px=999" role="button" title="ACO_Code_2_60.png" alt="ACO_Code_2_60.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;Obviously, this code is self-explaining and does not offer any surprise for you ABAP developers.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;Note: The name of the public instance method to call an RFM always is the name of the respective RFM. But there is no need to choose a proxy class name that contains the respective RFM’s name – as we do it in the example above.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H4 id="toc-hId-154758678"&gt;&lt;STRONG&gt;Static vs. Dynamic ACo Proxy&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;There is also the option to create a dynamic ACo proxy class, and certainly you want to know, if there are use cases, in which a dynamic proxy might be advantageous over the static proxy generated by transaction “ACO_PROXY”. So, let’s start with a short description how dynamic ACo proxy works:&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: For a code example of how to create and use a dynamic ACo proxy, look at the program SAP_ACO_EXAMPLE_DYNAMIC_PROXY – also delivered with ABAP 7.40. Developers familiar with using SAP JAVA and SAP .NET Connector will see that, in many respects, creating and using a dynamic ACo proxy class is similar to how you things work with these other two connectors.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;Each time a program runs that uses a dynamic ACo proxy to call an RFM, this proxy is created via API based on the respective RFMs metadata. The dynamic proxy class is not persisted. For this reason, the parameters of the proxy class are always up-to-date, even after an upgrade of the server side involving changes to the respective RFM’s interface, which would require recreation of a static proxy. This, at first sight, appears to be a big advantage of the dynamic proxy over the static one. But in this case, appearances are deceiving:&lt;/P&gt;&lt;P&gt;If, for example, after an upgrade, the relevant RFM has additional input or output parameters, a developer has to adapt the client program’s code – be it to process additional output values or to pass values to the additional input parameters. But if developer action is required in any case – to extend the client program accordingly -, then it makes little difference whether or not the ACo proxy class also needs to be re-created as in the case of a static proxy: Compared to the effort required to adapt the client program, the additional effort needed to recreate the proxy class is negligible. Therefore, as to the case of changes to the RFM’s interface, what, at first sight, may appear to be a big advantage of the dynamic over the static proxy, in fact, carries no weight.&lt;/P&gt;&lt;P&gt;In contrast, the advantages of the static proxy are weighty:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Working with a static proxy is faster at runtime because it is created at design time and it can be re-used.&lt;/LI&gt;&lt;LI&gt;All global data types generated by the ACo transaction are statically available and therefore easy to use in a program while, in contrast, all program code using elements of the dynamic proxy must be completely dynamic, which is why using the dynamic proxy requires significant experience in dynamic programming.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Therefore, we arrive at the conclusion that, in most cases, you are better off using the static proxy. But – and this is the relevant exception -, you should choose the dynamic ACo proxy, if it is used in a completely dynamic framework. In all other cases, you should prefer the static proxy over the dynamic one.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: As with all RFC calls and no matter which kind of ACo proxy you use, after an upgrade of the respective the server system, you should have a look into possible changes of the respective RFM’s interface and also test the relevant connections. If needed, just recreate your static ACo proxy and – as required or useful for your client-program - adapt or extend the program’s code no matter which flavor of ACo you use.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H4 id="toc-hId--41754827"&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;After all, transaction ACO_PROXY&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;First and foremost, saves you a lot of time,&lt;/LI&gt;&lt;LI&gt;If you call an RFM on a remote system and if neither this RFM nor its parameters’ data types exist in the client system,&lt;/LI&gt;&lt;LI&gt;By generating a static proxy class as well as all relevant data types and parameters.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Normally, you are better off with a static than with a dynamic proxy class to be created by an ACo API. Only if the ACo proxy should be part of a fully dynamic framework, you should use dynamic ACo. In all other cases the static proxy is not only fully sufficient but even the better choice.&lt;/P&gt;&lt;P&gt;Just try it out and you will see: Transaction ACO_PROXY really is a big time saver.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-save-a-lot-of-time-with-the-abap-connector-transaction-aco-proxy/ba-p/13943675"/>
    <published>2024-12-31T22:42:01.243000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/netweaver-rfc-sdk-moving-from-python-to-c/ba-p/13977082</id>
    <title>NetWeaver RFC SDK: moving from Python to C</title>
    <updated>2025-01-06T19:19:37+01:00</updated>
    <author>
      <name>LucaFalavigna</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/615776</uri>
    </author>
    <content>&lt;P&gt;As several users of the &lt;A href="https://github.com/SAP-archive/PyRFC" target="_self" rel="nofollow noopener noreferrer"&gt;PyRFC Python bindings&lt;/A&gt;&amp;nbsp;&amp;nbsp;might have noticed, &lt;A href="https://github.com/SAP-archive/PyRFC/issues/372#issuecomment-2541490558" target="_self" rel="nofollow noopener noreferrer"&gt;SAP decided to discontinue the project&lt;/A&gt; due to lack of internal resources and the impossibility of finding a new maintainer who might have access to NetWeaver RFC SDK source code to keep the bindings up to date, mainly due to the fact the SDK itself is not free &amp;amp; open software like its bindings.&lt;/P&gt;&lt;P&gt;Needless to say this is a very sad news for me, who is an avid user of the PyRFC package, but also for the Free &amp;amp; Open Software community who recorded another casualty due to non permissive licenses despite &lt;A href="https://pages.community.sap.com/topics/open-source" target="_self" rel="noopener noreferrer"&gt;SAP believes in Free &amp;amp; Open Source&lt;/A&gt;. I hope this paradox will become clear, one day.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1078558259"&gt;Moving (back) to C/C++&lt;/H2&gt;&lt;P&gt;Python bindings were not just the only affected project, also &lt;A href="https://github.com/SAP-archive/node-rfc/issues/329#issuecomment-2541486229" target="_self" rel="nofollow noopener noreferrer"&gt;Node.js&lt;/A&gt; and other bindings were discontinued as well, leaving no other choice of moving to either C or C++ to get official support from SAP, so I decided to try to convert one of my sample PyRFC scripts into a C program to be executed either in Linux or Windows. This is the original script in Python, which queries RFC_GET_SYSTEM_INFO&amp;nbsp;to get system details:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;from pyrfc import Connection
from pyrfc._exception import LogonError


conn_params = {
    'user': '***',
    'passwd': '***',
    'mshost': '***',
    'msserv': '***',
    'r3name': '***',
    'group': '***',
    'client': '***',
    'lang': '***'
}

try:
    conn = Connection(**conn_params)
    result = conn.call('RFC_GET_SYSTEM_INFO')
except LogonError as e:
    print(e)
    exit(1)

rfcsi = result['RFCSI_EXPORT']
print(f'RFCDEST: {rfcsi['RFCDEST']}')
print(f'PFCSYSID: {rfcsi['RFCSYSID']}')
print(f'RFCDBSYS: {rfcsi['RFCDBSYS']}')

conn.close()&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This is the equivalent written in C, which is significantly larger in size and much more complex to read and understand, although it's been a while since I last touched the language and it could be there are easier ways to achieve the same results:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-c"&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include "sapnwrfc.h"

#define NUM_PARAMS 8


int main(int argc, SAP_UC** argv){

	RFC_CONNECTION_PARAMETER loginParams[NUM_PARAMS];
	loginParams[0].name	 = cU("MSHOST");
	loginParams[0].value = cU("***");
	loginParams[1].name	 = cU("MSSERV");
	loginParams[1].value = cU("***");
	loginParams[2].name	 = cU("R3NAME");
	loginParams[2].value = cU("***");
	loginParams[3].name	 = cU("GROUP");
	loginParams[3].value = cU("***");
	loginParams[4].name	 = cU("CLIENT");
	loginParams[4].value = cU("***");
	loginParams[5].name	 = cU("USER");
	loginParams[5].value = cU("***");
	loginParams[6].name	 = cU("PASSWD");
	loginParams[6].value = cU("***");
	loginParams[7].name	 = cU("LANG");
	loginParams[7].value = cU("***");

	RFC_ERROR_INFO errorInfo;
	RFC_CONNECTION_HANDLE conn;
	RFC_FUNCTION_HANDLE funcHandle;
	RFC_FUNCTION_DESC_HANDLE funcDescHandle;
	RFC_STRUCTURE_HANDLE sysInfoHandle;
	RFC_RC rc;
	SAP_UC buffer[100];

	conn = RfcOpenConnection(loginParams, NUM_PARAMS, &amp;amp;errorInfo);
	if (errorInfo.code != RFC_OK) {
		printfU(cU("Connection failed: %s\n"), errorInfo.key);
	}

	funcDescHandle = RfcGetFunctionDesc(conn, cU("RFC_GET_SYSTEM_INFO"), &amp;amp;errorInfo);
	if (funcDescHandle == NULL) {
		printfU(cU("Error getting function description: %s\n"), errorInfo.message);
		exit(1);
	}

	funcHandle = RfcCreateFunction(funcDescHandle, &amp;amp;errorInfo);
	if (funcHandle == NULL) {
		printfU(cU("Error creating function: %s\n"), errorInfo.message);
		exit(1);
	}

	rc = RfcInvoke(conn, funcHandle, &amp;amp;errorInfo);
	if (rc != RFC_OK) {
		printfU(cU("Error invoking function: %s\n"), errorInfo.message);
		exit(1);
	}

	rc = RfcGetStructure(funcHandle, cU("RFCSI_EXPORT"), &amp;amp;sysInfoHandle, &amp;amp;errorInfo);
	if (rc != RFC_OK) {
		printfU(cU("Error getting RFCSI_EXPORT: %s\n"), errorInfo.message);
		exit(1);
	}

	RfcGetString(sysInfoHandle, cU("RFCDEST"), buffer, sizeof(buffer), NULL, &amp;amp;errorInfo);
	printfU(cU("RFCDEST: %s\n"), &amp;amp;buffer);
	RfcGetString(sysInfoHandle, cU("RFCSYSID"), buffer, sizeof(buffer), NULL, &amp;amp;errorInfo);
	printfU(cU("RFCSYSID: %s\n"), &amp;amp;buffer);
	RfcGetString(sysInfoHandle, cU("RFCDBSYS"), buffer, sizeof(buffer), NULL, &amp;amp;errorInfo);
	printfU(cU("RFCDBSYS: %s\n"), &amp;amp;buffer);

	RfcDestroyFunction(funcHandle, &amp;amp;errorInfo);
	RfcCloseConnection(conn, &amp;amp;errorInfo);

	return 0;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Quite surprisingly, the execution time is taking longer for the ELF binary derived from the C source rather than the interpreted Python script (0,8 seconds on average for the ELF binary against 0,7 seconds for the Python script), while normally ELF binaries are orders of magnitude faster than their equivalent in Python. Trying to analyze where the biggest performance impact is located, it seems the Unicode functions are taking a big portion of the load, which surprises me even more...&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Perf.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/208312iF85BCD75BE90D4C4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Perf.png" alt="Perf.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-882044754"&gt;Final considerations&lt;/H2&gt;&lt;P&gt;Converting my scripts from Python to C seems feasible, there's a learning curve to master as I need to familiarize again with C after many years of Python, but little by little I should be able to get there.&lt;/P&gt;&lt;P&gt;I would like to hear from you whether there are solutions for the Unicode inefficiency, some linking parameters I somehow missed perhaps?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/netweaver-rfc-sdk-moving-from-python-to-c/ba-p/13977082"/>
    <published>2025-01-06T19:19:37+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/getting-started-with-sap-snc-for-rfc-integrations/ba-p/13983462</id>
    <title>Getting Started with SAP SNC for RFC integrations</title>
    <updated>2025-01-12T17:20:02.514000+01:00</updated>
    <author>
      <name>Martin-Pankraz</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/143781</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Dear community,&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Many of you still rely heavily on the legacy SAP interface RFC. In my world that often means customers connecting their third-party services to SAP backends (AS ABAP). Securing a protocol such as SAP Remote Function Call (RFC) requires network layer protection.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Often Kerberos is discussed on this topic, because it allows the mapping of Windows-Known identities to SAP backend users. However, &lt;STRONG&gt;this post is about apps and technical connections using X.509 certs&lt;/STRONG&gt; – not people. They complain less – and boringly but reliably behave the same way once configured properly&lt;/SPAN&gt;&lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&lt;SPAN&gt; Meet &lt;STRONG&gt;SAP Secure Network Communications&lt;/STRONG&gt; (SNC).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;SPAN&gt;By the way: In case you want user-based flows and focus on SAP Principal Propagation have a look at &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/principal-propagation-in-a-multi-cloud-solution-between-microsoft-azure-and/ba-p/13561150" target="_blank"&gt;this series&lt;/A&gt; by my beloved colleague &lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/171519" target="_blank"&gt;Martin Raepple&lt;/A&gt;.&lt;/SPAN&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="SAP SNC integration architecture overview" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210985i9E08478E04A64031/image-size/large?v=v2&amp;amp;px=999" role="button" title="Picture1.png" alt="SAP SNC integration architecture overview" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;SAP SNC integration architecture overview&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1079366398"&gt;&lt;SPAN&gt;Welcome to the world of &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_751_IP/e73bba71770e4c0ca5fb2a3c17e8e229/e656f466e99a11d1a5b00000e835363f.html" target="_blank" rel="noopener noreferrer"&gt;SAP Secure Network Communication&lt;/A&gt;s (SNC) for trustworthy technical connections!&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;In light of zero-trust efforts customers want to secure their technical connections to SAP RFCs too. In that space certificate-based authentication mechanisms are king. SNC is a prominent choice.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;There are libraries for languages like &lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;Java&lt;/A&gt;, &lt;A href="https://support.sap.com/en/product/connectors/msnet.html" target="_blank" rel="noopener noreferrer"&gt;DotNet&lt;/A&gt;, &lt;A href="https://support.sap.com/en/product/connectors/nwrfcsdk.html" target="_blank" rel="noopener noreferrer"&gt;C/C++&lt;/A&gt;, &lt;A href="https://github.com/SAP-archive/PyRFC" target="_blank" rel="noopener nofollow noreferrer"&gt;Python&lt;/A&gt;, and &lt;A href="https://github.com/SAP-archive/node-rfc" target="_blank" rel="noopener nofollow noreferrer"&gt;NodeJS&lt;/A&gt; that support SNC for RFC. Python and NodeJS were recently archived and will no longer be maintained. In case you get stuck, consider &lt;A href="https://blogs.sap.com/2023/05/17/generate-soap-services-for-your-legacy-rfcs-to-simplify-integration-out-of-the-box/" target="_blank" rel="noopener noreferrer"&gt;generating SOAP services for your SAP RFCs&lt;/A&gt; to uplevel the communication stack to layer 7 for use with TLS instead.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MartinPankraz_1-1736697403542.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210981iC0A2D3111564937D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MartinPankraz_1-1736697403542.png" alt="MartinPankraz_1-1736697403542.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;SPAN&gt;Source: &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_AS_ABAP_751_IP/e73bba71770e4c0ca5fb2a3c17e8e229/3f3dacb1c27344e29f3c7b5864825eb5.html" target="_blank" rel="noopener noreferrer"&gt;SAP Help&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Below I will show a simple setup with self-signed certificates. This way you can get started with a working setup and elevate towards more sophisticated as you go. Troubleshooting &lt;/SPAN&gt;&lt;SPAN&gt;SNC errors can be cumbersome, so starting small with less variables and less room for error is a good idea.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100%"&gt;Be aware of latest crypto library guidance (SAPCryptoLib vs, CommonCryptoLib) published by&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/2716"&gt;@JoeGoerlich&lt;/a&gt;&amp;nbsp;in &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/commoncryptolib-snc-protocol-versions-and-cipher-suites/ba-p/13518307" target="_blank"&gt;this post&lt;/A&gt;. Verify your&amp;nbsp;&lt;SPAN&gt;archive name starts with SAPCRYPTOLIB_*.sar (which refers to CCL 8.x).&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-882852893"&gt;&lt;SPAN&gt;First things first: reach your private RFC interface&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;SAP products like the SAP Cloud Connector support apps (and people) on the SAP Business Technology Platform to connect to private instances of AS ABAP systems (behind firewall, in RISE, on-premises, or on a protected hyperscaler environment) and bring the required RFC execution environment.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Third-party apps must overcome the same challenges. Typically, that means you will be provided with a piece of software to act as reverse invoke proxy (same as the SAP Cloud Connector) besides the “line of sight” through connected private networks from that proxy. See step 0 in the overview drawing for reference.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It establishes connection to your third-party app inside out, so that no inbound firewall rules or the likes need to be touched.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For instance, Microsoft apps like &lt;A href="https://www.microsoft.com/download/details.aspx?id=39717" target="_blank" rel="noopener nofollow noreferrer"&gt;Azure Data Factory, Azure Synapse&lt;/A&gt;, &lt;A href="https://www.microsoft.com/download/details.aspx?id=105539" target="_blank" rel="noopener nofollow noreferrer"&gt;Microsoft Purview&lt;/A&gt;, Microsoft Fabric, and &lt;A href="https://learn.microsoft.com/power-bi/connect-data/service-gateway-onprem" target="_blank" rel="noopener nofollow noreferrer"&gt;Microsoft Power BI&lt;/A&gt; have dedicated means to connect. These components are called Self-hosted Integration Runtime (SHIR) or On-Premises Data Gateway. Find the downloads on the individual product pages.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Be aware that services like Azure Functions or &lt;A href="https://learn.microsoft.com/azure/logic-apps/connectors/sap?tabs=consumption#enable-secure-network-communications-snc" target="_blank" rel="noopener nofollow noreferrer"&gt;Azure LogicApps&lt;/A&gt;&amp;nbsp;have a second approach beyond the Microsoft On-premises Data Gateway. They can bring the means to execute RFC calls, provide SNC configuration, and create line-of-sight to the &lt;A href="https://learn.microsoft.com/azure/logic-apps/connectors/sap?tabs=consumption#network-connectivity-prerequisites" target="_blank" rel="noopener nofollow noreferrer"&gt;private network through injection&lt;/A&gt; capability in a single deployment. This way you don't need the reverse invoke proxy.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Each of the described solutions have individual guides on the SAP RFC setup and how to expose the configuration for SAP SNC.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;SPAN&gt;Can highly recommend my colleague &lt;/SPAN&gt;&lt;/EM&gt;&lt;SPAN&gt;&lt;A href="https://taylorbrazelton.com/2024/02/26/2024-02-23-setting-up-snc-between-power-apps-automate-and-sap/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;EM&gt;Taylor Brazelton’s blog&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt; for SNC from Power Platform and On-premises Data Gateway.&lt;/EM&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Find below an SAP SNC config sequence with self-signed certificates generated by OpenSSL. Through this setup AS ABAP accepts requests protected by SNC via the SHIR.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I assume you have already installed the SHIR on a suitable windows machine and taken care of &lt;A href="https://learn.microsoft.com/purview/register-scan-sapecc-source#prerequisites" target="_blank" rel="noopener nofollow noreferrer"&gt;required installations&lt;/A&gt; like SAP Java Connector (JCo), SAP Connector for Microsoft .NET (NCo), and .NET Framework. My samples and script commands are Windows specific. However, Linux works the same way with slightly different commands.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-686339388"&gt;&lt;SPAN&gt;Download SAP SNC Crypto Lib to your SNC client machine&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Search the latest “SAPCRYPTOLIB” on SAP’s &lt;A href="https://me.sap.com/softwarecenterviewer/67838200100200022586/MAINT" target="_blank" rel="noopener noreferrer"&gt;software center&lt;/A&gt; (S-User with download rights required)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;And extract the SAR file using &lt;A href="https://me.sap.com/softwarecenterviewer/01200615320100002542/MAINT" target="_blank" rel="noopener noreferrer"&gt;SAPCAR&lt;/A&gt;. Command looks something like this:&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;.\SAPCAR_1200-70007719.EXE -xvf .\SAPCRYPTOLIBP_8553-20011729.SAR -R .\..\libs\sapcryptolib&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Find the executable sapgenpse&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-489825883"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-293312378"&gt;&lt;SPAN&gt;Prepare your SNC client machine&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Create a folder to hold your SAP PSE artifacts:&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mkdir sapsecudir
cd .\sapsecudir&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Permanently add environment variable to point at this folder&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;[Environment]::SetEnvironmentVariable("SECUDIR", "C:\sapsecudir", "Machine") # Sets the variable permentaly on the system.
$env:SECUDIR = "C:\sapsecudir" # Updates the current powershell session as there currently does not exist a function to reload.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-96798873"&gt;&lt;SPAN&gt;Generate a certificate for your SNC client app&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Create folders to hold your certificates: mkdir rootCA sncCert&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Generate root CA certificate: Adjust the subject as needed&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;openssl genpkey -algorithm RSA -out rootCA/ca.key.pem -pkeyopt rsa_keygen_bits:2048 

openssl req -x509 -new -key rootCA/ca.key.pem -days 7305 -sha256 -extensions v3_ca -out rootCA/ca.cert.pem -subj "/O=Contoso/CN=Root CA"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Generate SNC client certificate and adjust subject as needed:&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;openssl genrsa -out sncCert/snc.key.pem 2048

openssl req -key sncCert/snc.key.pem -new -sha256 -out sncCert/snc.csr.pem -subj "/O=Contoso/CN=SNC"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Sign the SNC certificate with the root CA certificate:&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;openssl x509 -req -in sncCert/snc.csr.pem -days 3650 -CA rootCA/ca.cert.pem -CAkey rootCA/ca.key.pem -CAcreateserial -out sncCert/snc.cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId--99714632"&gt;&lt;SPAN&gt;Establish trust between SNC client and SAP&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Add the SNC cert to a PKCS #12 archive file (.p12)&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;openssl pkcs12 -export -out snc.p12 -inkey sncCert\snc.key.pem -in sncCert\snc.cert.pem -certfile rootCA\ca.cert.pem&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Create the SAP Personal Security Environment (PSE) using the container&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;.\sapgenpse.exe import_p12 -p SAPSNCSKERB.pse C:\Users\shir-admin\Documents\snc.p12&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--167145418"&gt;&lt;SPAN&gt;Verify SAP is configured for SNC yet&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;One way of doing that is using transaction RZ10 and browsing the parameters prefixed with SNC. See &lt;A href="https://help.sap.com/docs/SAP_SINGLE_SIGN-ON/df185fd53bb645b1bd99284ee4e4a750/06298bf7ec7e4ae19fba6ab0c518dda1.html" target="_blank" rel="noopener noreferrer"&gt;this SAP document&lt;/A&gt; on the required “SNC Parameters for X.509 Configuration” settings and their implications.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If there is no configuration yet execute the transaction SNCWIZARD and maintain settings for X.509 credentials. Take note of the SNC private key subject. The CN will be required later.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Add your SNC client (I named mine PRV for Microsoft Purview) to the SAP Access Control List (ACL) using transaction SNC0 and allow RFC and CPIC connections.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MartinPankraz_2-1736697403544.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210979iBF1D0B87863E6169/image-size/large?v=v2&amp;amp;px=999" role="button" title="MartinPankraz_2-1736697403544.png" alt="MartinPankraz_2-1736697403544.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId--363658923"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId--560172428"&gt;&lt;SPAN&gt;Import SNC client cert into SAP&lt;/SPAN&gt;&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Use transaction STRUST&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Navigate to the instance below SNC SAPCryptolib (if crossed out with a red X, create one from right-click)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Scroll down below the certificate list pane, choose import certificate and supply your snc.cert.pem file.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Click “Add to Certificate List” button&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Click “Save”.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MartinPankraz_3-1736697403552.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210982i4D5DAC894F2F5F39/image-size/large?v=v2&amp;amp;px=999" role="button" title="MartinPankraz_3-1736697403552.png" alt="MartinPankraz_3-1736697403552.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--831917302"&gt;&lt;SPAN&gt;Download SAP cert and import into SNC client PSE&lt;/SPAN&gt;&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;From the same STRUST screen, double click the Subject line of “Own Certificate” and&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Scroll down again to find the “Export Certificate” button at the bottom.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Move to your SNC client machine (where your SHIR runs), put the certificate in a secure place (in my sample it landed in a folder called sap) and run below command to import it into your PSE.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;sapgenpse.exe maintain_pk -p SAPSNCSKERB.pse -v -a  C:\sap\contoso-public-key.crt&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now your SAP trusts connections coming from your SHIR.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId--735027800"&gt;&lt;SPAN&gt;Allow your SHIR process to use your SAP PSE&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Verify which user or service is being used by your SNC client to obtain certificate to communicate with SAP. The Purview SHIR uses the service user “NT SERVICE\DIAHostService”.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Add a credential to allow the certificate retrieval request from the PSE.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;.\sapgenpse.exe seclogin -p C:\sapsecudir\SAPSNCSKERB.pse -x your-pse-pin -O "NT SERVICE\DIAHostService"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Verify credentials like so&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;.\sapgenpse.exe seclogin -l -O "NT SERVICE\DIAHostService"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can delete them like this:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;.\sapgenpse.exe seclogin -d -O " NT SERVICE\DIAHostService "&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Use the &lt;STRONG&gt;-h parameter to get help&lt;/STRONG&gt; with the sapgenpse command line tool or check the command reference &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/e73bba71770e4c0ca5fb2a3c17e8e229/0d9ce63bab134b39a52e340255d7650c.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--638138298"&gt;&lt;SPAN&gt;Test communication using SAP SNC&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;Navigate to your client application and supply the SNC configuration you have prepared. Some apps require an SAP user and password in addition even though providing a client certificate would be enough for a technical connection (remember: no user mapping or SSO).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;SPAN&gt;This gives you the option to further trim down access. Use transaction SU01 and the SNC tab or the maintenance view “VUSREXTID” from transaction SM30 to configure the SNC external ID (CN) to your SAP user name.&lt;/SPAN&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;See below sample taken from the connection configuration fly-out pane on the Azure portal UI. It can be applied, however, to any SNC client configuration. See further samples &lt;A href="https://help.sap.com/doc/saphelp_nw75/7.5.5/en-US/ce/1dfd3d4aefd95ee10000000a114084/content.htm" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt; and &lt;A href="https://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc01703.0222/doc/html/fre1292886445861.html" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MartinPankraz_4-1736697403557.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210983iBFAF35BE9B7B3379/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MartinPankraz_4-1736697403557.png" alt="MartinPankraz_4-1736697403557.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Trigger “Test connection” and marvel at the SNC secured communication test from Microsoft Purview to AS ABAP&lt;/SPAN&gt;&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Or go even a step further and call your first RFC. RFC_PING or STFC_CONNECTION might be a suitable one in case your target is not yet operational or not identified yet.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--834651803"&gt;&lt;SPAN&gt;Hints on Troubleshooting&lt;/SPAN&gt;&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;First, try to connect from your client to AS ABAP without SNC to ensure that networking is properly configured already. Be aware of &lt;A href="https://help.sap.com/docs/Security/575a9f0e56f34c6e8138439eefc32b16/616a3c0b1cc748238de9c0341b15c63c.html" target="_blank" rel="noopener noreferrer"&gt;SAP RFC ports&lt;/A&gt; (ZZ placeholder represents your SAP instance number, e.g. 00 or 01 often) and check firewall accordingly if needed.&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;32ZZ and 33ZZ for direct RFC connections&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;48ZZ for SNC secured RFC connections&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Verify SNC status from transaction SM51 -&amp;gt; click “SNC Status” button to ensure it is fully configured&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Consult the &lt;A href="https://community.sap.com/t5/application-development-blog-posts/report-zsm04000-snc-zrsusr000-620-show-snc-status-of-current-user-sessions/ba-p/13027982" target="_blank"&gt;blog series&lt;/A&gt; from @&lt;A href="https://community.sap.com/t5/user/viewprofilepage/user-id/360" target="_blank"&gt;Frank_Buchholz&lt;/A&gt; on more sophisticated approaches to verify individual SNC connections. For instance, report “&lt;A href="https://github.com/SAP-samples/security-services-tools" target="_blank" rel="noopener nofollow noreferrer"&gt;ZSM04000_SNC&lt;/A&gt;” shows more details.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;For those of you using &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/1ca554ffe75a4d44a7bb882b5454236f/ab35e1c69f744d69a4fcf4ca93284e0c.html" target="_blank" rel="noopener noreferrer"&gt;SAP UCON&lt;/A&gt; may consult the SNC connectivity status there.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Closing above mentioned RFC ports (32ZZ, 33ZZ) on the proxy VM firewall does the trick to verify if SNC connection is opened. Intentionally “breaking” your SNC config by mistyping the SNC partner name for instance could give you another indication on a functional setup.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--1031165308"&gt;&lt;SPAN&gt;Final Words&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;That’s a wrap &lt;/SPAN&gt;&lt;span class="lia-unicode-emoji" title=":burrito:"&gt;🌯&lt;/span&gt;&lt;SPAN&gt;. You learned today how to secure your technical RFC connections from third party apps to AS ABAP systems using SNC. The guide keeps it simple so you can establish a stable setup base from which to iterate on more complex setups confidently &lt;/SPAN&gt;&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&lt;SPAN&gt;Generate SOAP services for your RFCs and use TLS in case SNC is not an option.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;By the way: When introducing an API Management solution between your 3rd party app and the SOAP service on AS ABAP you may use OAuth2, or OpenID Connect on the client. You still need to translate on the API Management layer to an auth mechanism that &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/f7dd32926c1c4fcf889a4303d833a22b/cf507f42805444f3ad1caf430ca4a221.html" target="_blank" rel="noopener noreferrer"&gt;AS ABAP supports&lt;/A&gt;. Either way a step forward in securing your SAP connections.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Happy integrating with SAP!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;#Kudos again to &lt;A href="https://www.linkedin.com/in/savas-akgol-713b3915/" target="_self" rel="nofollow noopener noreferrer"&gt;Savas Akgol&lt;/A&gt;,&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/171519"&gt;@MartinRaepple&lt;/a&gt;, and&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/360"&gt;@Frank_Buchholz&lt;/a&gt;&amp;nbsp;for helping with some&amp;nbsp; of the hard parts&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":folded_hands:"&gt;🙏&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Cheers&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Martin&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-members/getting-started-with-sap-snc-for-rfc-integrations/ba-p/13983462"/>
    <published>2025-01-12T17:20:02.514000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498</id>
    <title>Communicate from a Java Application to ABAP via WebSocket RFC using JCo - Migration Guide</title>
    <updated>2025-01-21T19:20:20.825000+01:00</updated>
    <author>
      <name>simon_luser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/771659</uri>
    </author>
    <content>&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/websocket-rfc-rfc-for-the-internet/ba-p/13502531" target="_blank"&gt;WebSocket RFC&lt;/A&gt; is available for a while now. Continue reading, if&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;you want to communicate from an external Java application to an ABAP-based system via this new protocol using the&amp;nbsp;&lt;A href="https://support.sap.com/en/product/connectors/jco.html" target="_blank" rel="noopener noreferrer"&gt;JCo library&lt;/A&gt;.&lt;/LI&gt;&lt;LI&gt;you have an existing JCo setup using classic CPIC-based RFC and want to migrate.&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-950224196"&gt;Adjusting the destination&lt;/H1&gt;&lt;P&gt;For specifying the destination, instead of providing properties for application server logon (&lt;SPAN&gt;&lt;EM&gt;jco.client.ashost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.sysnr&lt;/EM&gt;) or message server logon (&lt;EM&gt;jco.client.mshost&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.msserv&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;jco.client.r3name&lt;/EM&gt;), the f&lt;/SPAN&gt;ollowing properties must be provided:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wshost&lt;/STRONG&gt;: the hostname of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.wsport&lt;/STRONG&gt;: the port for HTTPS/WSS (WebSocket Secure) of the target system&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Optionally, you can also specify&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&lt;/STRONG&gt;: If set to 1 this property enables to logon at the backend via the X.509 client&amp;nbsp;certificate that is used in the TLS handshake (mTLS). An associated user or mapping rule must be defined at the backend.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-753710691"&gt;Extending the implementation&lt;/H1&gt;&lt;P&gt;WebSocket RFC is based on TLS, thus a PKI infrastructure is required to be setup. To achieve that, following methods from the JCo interface &lt;EM&gt;DestinationDataProvider&lt;/EM&gt;&amp;nbsp;must be implemented:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext getSSLContext(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method returns a&amp;nbsp;&lt;EM&gt;javax.net.ssl.SSLContext&lt;/EM&gt; instance to JCo, which is used to create the TLS session for a given destination. How such an instance is created is up to the application - we are going to describe a simple use case in which all keys and CAs are stored in a local p12 file (&lt;EM&gt;p12FilePath&lt;/EM&gt;) and the password is read from a secured database.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;SSLContext loadSSLContextFromFile() throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException, UnrecoverableKeyException, KeyManagementException {
    File p12File = new File(p12FilePath);

    try (InputStream p12FileStream = new BufferedInputStream(new FileInputStream(p12File))) {
        KeyStore ks = KeyStore.getInstance("PKCS12");

        char[] pwd = SecuredDatabaseConnection.readPassword();

        ks.load(p12FileStream, pwd);
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(ks, pwd);

        // delete the plain text password from the heap memory as soon as possible
        Arrays.fill(pwd, (char) 0);
        pwd = null;

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ks);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
        return sslContext;
    }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;(Optionally) If&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;jco.client.tls_client_certificate_logon&amp;nbsp;&lt;/STRONG&gt;is used, the API below must be implemented additionally:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;X509Certificate getClientCertificate(String destinationName)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This method must return the &lt;EM&gt;java.security.cert.X509Certificate&lt;/EM&gt; instance of the client certificate used for logon. It must be the one provided in the &lt;EM&gt;SSLContext&lt;/EM&gt;, which is used during the TLS handshake.&lt;/P&gt;&lt;H1 id="toc-hId-557197186"&gt;Setting up Trust&lt;/H1&gt;&lt;H2 id="toc-hId-489766400"&gt;Creating the p12 File&lt;/H2&gt;&lt;P&gt;Create a p12 file with a private key using a tool like &lt;A href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noopener nofollow noreferrer"&gt;keytool&lt;/A&gt; or &lt;A href="https://docs.openssl.org/1.1.1/man1/pkcs12/" target="_blank" rel="noopener nofollow noreferrer"&gt;OpenSSL&lt;/A&gt;. Create a CSR and import the CA response. Furthermore, import the CA certificate from the ABAP system which has been exported (see next section).&lt;/P&gt;&lt;H2 id="toc-hId-293252895"&gt;Configuring trust in ABAP&lt;/H2&gt;&lt;P&gt;Navigate to transaction STRUST and select "SSL-Server Standard". Select the own certificate and export it. For more information, see also &lt;A href="https://help.sap.com/docs/SAP_NETWEAVER_750/e73bba71770e4c0ca5fb2a3c17e8e229/4923501ebf5a1902e10000000a42189c.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;. Also, import the CA certificate from the p12 file and add it to the certificate list, so that mutual trust can be established.&lt;/P&gt;&lt;H1 id="toc-hId--32343329"&gt;Using WebSocket RFC in BTP&lt;/H1&gt;&lt;P&gt;If you use JCo in BTP in conjunction with the Destination Service and you want to use WebSocket RFC to call publicly exposed endpoints, you can skip the above "Extending the implementation" part. This integration is already implemented by SAP in the supported environments. You can follow the steps in the &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-configure-rfc-destination" target="_blank" rel="noopener noreferrer"&gt;BTP Connectivity Service documentation&lt;/A&gt;&lt;/SPAN&gt; on how to configure the Destination Service accordingly.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/communicate-from-a-java-application-to-abap-via-websocket-rfc-using-jco/ba-p/13981498"/>
    <published>2025-01-21T19:20:20.825000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-adaptation-for-any-middleware-to-cpi-is-migration-rfc-to-webservice/ba-p/14105577</id>
    <title>ABAP Adaptation for Any Middleware to CPI/IS Migration ( RFC to Webservice )</title>
    <updated>2025-05-20T16:14:40.004000+02:00</updated>
    <author>
      <name>Hashini</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1419019</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;1.Introduction:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This document provides an in-depth overview of the necessary changes in ABAP development when migrating from any middleware platform to SAP CPI. It particularly addresses the migration of RFC-based communication in middleware to SOAP-based web services in CPI.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.Background:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The integration platform that enables communication between SAP and external systems. In any middleware, RFC adapters are commonly used to interact with remote systems through RFCs. However, with the shift to SAP CPI/IS, the integration landscape changes, and CPI/IS does not support sender RFCs, so &amp;nbsp;it is necessary to refactor and convert these RFC calls into SOAP web services.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3.Transition to SAP CPI:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In CPI, communication is predominantly based on HTTP/SOAP or REST protocols. Therefore, the ABAP function modules that were exposed as RFCs in integration platform must now be exposed as &lt;STRONG&gt;SOAP web services&lt;/STRONG&gt; to be compatible with CPI’s integration model.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;4.Why Convert RFC to a SOAP Web Service Rather Than Using a Wrapper?&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;When a wrapper is created for a sender or receiver RFC, SAP automatically configures the service provider (inbound interface) in SOAMANAGER, thereby generating the web service from the scratch.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;5.ABAP Development Steps - Replacing RFC with SOAP Web Services:&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;5.1. Obtain the WSDL file from the RFC in SAP or from Integration team.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.1.1.In SE37, enter the RFC to convert to SOAP.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.1.2.&lt;/STRONG&gt;Go to &lt;STRONG&gt;Utilities&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;More Utilities&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;Create Web Service&lt;/STRONG&gt; -&amp;gt; &lt;STRONG&gt;From Function Module&lt;/STRONG&gt;.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_0-1746429056919.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257494i17CFCB0BD135FEAF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_0-1746429056919.png" alt="Hashini_0-1746429056919.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;5.1.3.Enter the RFC name and description, then click &lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_1-1746429146623.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257495i5C5301181E8BC2E2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_1-1746429146623.png" alt="Hashini_1-1746429146623.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_3-1746434065390.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257524i0393504AFBBC435E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_3-1746434065390.png" alt="Hashini_3-1746434065390.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_2-1746433768602.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257521iC8106AAD1AD49529/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_2-1746433768602.png" alt="Hashini_2-1746433768602.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5.1.4.Fill in the details and click &lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;The screen will appear as shown below.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_4-1746434144573.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257525i093DF027A1CCFC82/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_4-1746434144573.png" alt="Hashini_4-1746434144573.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5.1.5.Click on the &lt;STRONG&gt;WSDL&lt;/STRONG&gt; tab to retrieve the WSDL file and modify the wsdl file.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_5-1746434261354.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257528i08218480B43EBEB5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_5-1746434261354.png" alt="Hashini_5-1746434261354.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;5.2. Modify the WSDL to an asynchronous structure.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;5.2.1. Why to modify the wsdl structure?&lt;/STRONG&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The WSDL structure used in PI/PO follows a synchronous pattern, with both request and response. When uploading the same file while creating a web service, SAP expects a response from the middleware. To convert it to asynchronous, the WSDL structure must be modified.&lt;BR /&gt;&lt;BR /&gt;Before modification of WSDL : ( It has both input and output parameter )&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_6-1746434525224.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257533i4E7AC59A8E7B8AC7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_6-1746434525224.png" alt="Hashini_6-1746434525224.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After modification of WSDL : ( It has only input parameter )&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_7-1746434620939.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257536iE2EAD6C5B22830C6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_7-1746434620939.png" alt="Hashini_7-1746434620939.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;5.2.2. &lt;STRONG&gt;How it can be modified?&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; At the end of &amp;lt;/wsdl:types&amp;gt; tag, add the below template and update the required details:&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Replace&amp;nbsp; ZTEST in the template with the actual RFC name. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;wsdl:message name="ZTEST"&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;wsdl:part name=" ZTEST " element="tns: ZTEST "/&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/wsdl:message&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsdl:portType name=" ZTEST"&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsp:Policy&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsp:PolicyReference URI="#IF_IF_ ZTEST "/&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/wsp:Policy&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsdl:operation name=" ZTEST"&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsp:Policy&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsp:PolicyReference URI="#OP_IF_OP_ ZTEST"/&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/wsp:Policy&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;wsdl:input message="tns: ZTEST"/&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/wsdl:operation&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/wsdl:portType&amp;gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/wsdl:definitions&amp;gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;5.3. Upload the WSDL and create the web service in SE80.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.1.Navigate to sproxy tcode and click on create button.&lt;STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_8-1746440106759.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257568i1DFF3324020F888B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_8-1746440106759.png" alt="Hashini_8-1746440106759.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.2.Click on service consumer radio button and then continue.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_9-1746440159366.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257570iB046C320BCBA7330/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_9-1746440159366.png" alt="Hashini_9-1746440159366.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.3.Click on service External WSDL/Schema and then continue.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_10-1746440204546.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257571i37808EEE26AFA571/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_10-1746440204546.png" alt="Hashini_10-1746440204546.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.4.Click on local file and then continue.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_11-1746440243240.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257573i5B08B741944E69E4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_11-1746440243240.png" alt="Hashini_11-1746440243240.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.5.Upload the wsdl file and click on continue.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_12-1746440285961.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257575i5F547837BE5610DA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_12-1746440285961.png" alt="Hashini_12-1746440285961.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.6.Provide the package name and then the TR details and then continue .&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_13-1746440335494.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257576iF1AF9C50FE69CBC0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_13-1746440335494.png" alt="Hashini_13-1746440335494.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.3.7.Click on complete and then save and activate the service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_14-1746440379651.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257577iCA328256692193FC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_14-1746440379651.png" alt="Hashini_14-1746440379651.png" /&gt;&lt;/span&gt;&lt;BR /&gt;5.4.Use the "Where Used" function to identify the related report, function module, or class of the RFC.&lt;/P&gt;&lt;P&gt;5.5.Replace the RFC code with the corresponding SOAP web service code,ensuring all required parameters are passed as in the original RFC.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;RFC Code :&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_15-1746440486989.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257578i555CDD586993C77D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_15-1746440486989.png" alt="Hashini_15-1746440486989.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SOAP Code:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_16-1746440532648.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257579i5A39405B8F356868/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_16-1746440532648.png" alt="Hashini_16-1746440532648.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_17-1746440569650.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257581iD69CCA7BBD8FF9F7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_17-1746440569650.png" alt="Hashini_17-1746440569650.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5.6.Configure the web service in SOAMANAGER.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.1.Navigate to SOAMANAGER tcode and click on &lt;STRONG&gt;web service configuration.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_18-1746440621733.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257583i8EC9398FABA20172/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_18-1746440621733.png" alt="Hashini_18-1746440621733.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.2.Provide and select the web service name&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_19-1746440787129.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257590iD0D16126F6ECFA26/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_19-1746440787129.png" alt="Hashini_19-1746440787129.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 5.6.3. Click on the create button manual configuration to create a logical port for the webservice.&amp;nbsp;Provide the Port name and description.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_20-1746440857861.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257591i7C43A09A50F4909D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_20-1746440857861.png" alt="Hashini_20-1746440857861.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_21-1746440936281.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257593i8DB3A9A41CFAD1B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_21-1746440936281.png" alt="Hashini_21-1746440936281.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.4. In the consumer security tab, give the s-user ID and password and click next.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_22-1746440977144.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257594iC92E2E9662EAFD1C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_22-1746440977144.png" alt="Hashini_22-1746440977144.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;5.6.5. Provide the correct endpoint in the URL tab and click next.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_23-1746441032712.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257595i761E4B889B87C256/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_23-1746441032712.png" alt="Hashini_23-1746441032712.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.6. In the Messaging tab, select suppress id transfer in Message ID Protocol and SAP RM in&amp;nbsp;RM&amp;nbsp;Protocol tab and click next.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_24-1746441202281.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257596i5493356F49295930/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_24-1746441202281.png" alt="Hashini_24-1746441202281.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.7. Click on finish to complete the setting.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 5.6.8: Click on ping test for the successful setup.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Hashini_25-1746446817247.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/257647iDA5E5450746CCCF3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Hashini_25-1746446817247.png" alt="Hashini_25-1746446817247.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-adaptation-for-any-middleware-to-cpi-is-migration-rfc-to-webservice/ba-p/14105577"/>
    <published>2025-05-20T16:14:40.004000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/function-expression-in-business-rule-framework-brf/ba-p/14156170</id>
    <title>Function Expression in Business Rule Framework (BRF+)</title>
    <updated>2025-08-12T11:28:52.458000+02:00</updated>
    <author>
      <name>manoharreddy478</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152690</uri>
    </author>
    <content>&lt;P&gt;Function in BRF+:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A function is the&amp;nbsp;&lt;/SPAN&gt;rule interface&lt;SPAN&gt;&amp;nbsp;in BRF+ and acts as a link between the application code and the BRF+ code. A function carries a context and a result. It imports the context from the calling application and passes the context data to the assigned top expression or ruleset for further processing.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Create an BRF+ application or chose the application in which you wanted to add function Expression.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Right click on the application and select create &amp;gt; Function&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_0-1752824529026.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288460i61EA79C34E910895/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_0-1752824529026.png" alt="manoharreddy478_0-1752824529026.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Provide the function name, text and short text.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_1-1752824529027.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288459iB99FA991E1A5E86A/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_1-1752824529027.png" alt="manoharreddy478_1-1752824529027.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Click on create and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;navigate to object to save and activate the object.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_2-1752824529029.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288461iF1CC269E100DFB38/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_2-1752824529029.png" alt="manoharreddy478_2-1752824529029.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Once clicked, it will navigate to the above screen. Here you have to assign the result data object based on the context data objects.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Types of Mode:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Function mode:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In functional mode, function execution starts with the assigned top expression. From this top expression, the processing may run through any number of nested subexpressions until a result is returned.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Event mode:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In event mode, the function is associated with a list of rulesets that are executed according to their execution priority and their position in the list.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Function and Event mode:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This mode is a combination of the modes mentioned above. At runtime, the function starts processing the assigned top expression. Once the expression evaluation is finished, function execution continues with the associated rulesets.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Analytical Mode:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;It is mainly related to the Hana rules framework which is relevant to the runtime operations.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;Signature&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The function signature consists of two parts:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Context&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The context is a container for data objects that you can assign as import parameters for the function. You choose the context data objects of a function according to the requirements of the calling application by which the BRF+ function is invoked. Also, the context data objects of a function define the scope of objects that can be accessed by the expressions that are evaluated during function execution.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Result&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The result data object returns a result value that has been calculated by the expressions of which the function consists .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Note: For further in event mode, the result object is automatically set to the predefined actions table where the actions are recorded that have been triggered by the assigned rulesets.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Code Generation:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;BRF+ provides a built-in code generation facility used to compile source code for as many rule constructs in a function as possible. With the help of generated code, BRF+ rules can be executed significantly faster than in interpretation mode.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Simulation:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can simulate the function processing to test the function's behavior in a sandbox environment. Here, you can gain an in-depth insight into the system status for every single step the system takes during function processing.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Trace&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In BRF+, you can request the system to create a processing log to keep track of all processing steps during function execution. The trace information is stored in the system and can be reviewed at any point in time.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Trace will be stored in Trace tables FDT_TRACE_* &lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Generation Services&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For a BRF+ function, you can take advantage of different services that automatically generate code and other objects that are needed to bridge the gap between the ABAP backend system where a BRF+ function is hosted and other systems or environments that wish to access BRF+. The different services available address different usage scenarios. These can be categorized as follows:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Code Templates&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;A code template is a predefined snippet of ABAP code that you can use to call a BRF+ function from your application in the same system.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Generate&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Function Module&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;You can use a generated RFC-enabled function module to call a BRF+ function that resides in a remote backend system. This is useful in cases where you cannot bring BRF+ and the calling application into the same system — be it for technical reasons (for example, different releases) or for organizational reasons (for example, missing authorization to develop in the remote system).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Web Service&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;You can use a generated web service to call a BRF+ function from a web application that is not ABAP-based, or that you can only integrate via its exposed services interface. From a technical point of view, web service generation is reusing the function module generation component of BRF+ and generates additional system objects needed for service enablement.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we will work on Function mode example:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_3-1752824529030.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288463i1191B0572209180D/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_3-1752824529030.png" alt="manoharreddy478_3-1752824529030.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Assign the top expression and in context add the required objects and finally assign result object suitable.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Top Expression:&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Its is pre-condition of the function which will evaluate the number of nested expressions to find the result.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To execute the function click on simulation.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_4-1752824529031.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288462i84A6CAE70B8E7C9C/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_4-1752824529031.png" alt="manoharreddy478_4-1752824529031.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Click on continue&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_5-1752824529032.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288464iE75AFDCD26B125E5/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_5-1752824529032.png" alt="manoharreddy478_5-1752824529032.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Select the input true or false and click on execute&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Result :&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="manoharreddy478_6-1752824681872.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288466i7DB353D19356CE45/image-size/large?v=v2&amp;amp;px=999" role="button" title="manoharreddy478_6-1752824681872.png" alt="manoharreddy478_6-1752824681872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note : All the objects created will be stored in FDT_* tables&amp;nbsp;&lt;/P&gt;&lt;P&gt;Conclusion:&amp;nbsp;&lt;/P&gt;&lt;P&gt;Function provides a built-in code generation facility used to compile source code for as many rule constructs in a function as possible&lt;BR /&gt;Function is the most important BRF+ object and it represents a decision service , which is the element that is in fact invoked by the application and&amp;nbsp;the entire application is invoked by function to stimulate and provide the output we can invoke using the code generation to create report program for executing in GUI.&lt;BR /&gt;we can perform pre-conditional and event of action related condition's like rules for executing in the based on the specified rule using the type of modes in the function expression.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/function-expression-in-business-rule-framework-brf/ba-p/14156170"/>
    <published>2025-08-12T11:28:52.458000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397</id>
    <title>ABAP's Parallel Processing Frameworks: Practical Guide to Performance Tuning of Mass Data Processing</title>
    <updated>2025-09-29T08:52:47.138000+02:00</updated>
    <author>
      <name>marc_steinert</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/892436</uri>
    </author>
    <content>&lt;P&gt;While working on a project to optimize a standard SAP report that struggled with large data volumes, I took a deep dive into &lt;STRONG&gt;performance tuning&lt;/STRONG&gt; in ABAP, specifically focusing on &lt;STRONG&gt;parallel processing&lt;/STRONG&gt;. This journey led me to a comprehensive analysis of the various methods SAP provides for running processes in parallel.&lt;/P&gt;&lt;P&gt;I discovered that parallel processing in ABAP is achieved using one of two core technologies. The first is the &lt;STRONG&gt;Remote Function Call (RFC)&lt;/STRONG&gt;, where both &lt;STRONG&gt;asynchronous (aRFC)&lt;/STRONG&gt; and &lt;STRONG&gt;background (bgRFC)&lt;/STRONG&gt; variants can be used to run tasks in parallel. The second technology is based on &amp;nbsp;&lt;STRONG&gt;background processes&lt;/STRONG&gt;. To make implementation easier, several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; have been built on top of these technologies, simplifying the development process.&lt;/P&gt;&lt;P&gt;This blog post is a &lt;STRONG&gt;summary&lt;/STRONG&gt; of the theoretical research I conducted for my bachelor's thesis. Its goal is to provide a &lt;STRONG&gt;comprehensive overview&lt;/STRONG&gt; of the different technologies and the six key frameworks I identified. Think of it as a practical guide to help you choose the most suitable framework for your needs, with linked resources for anyone who wants to dive deeper into a specific topic.&lt;/P&gt;&lt;H3 id="toc-hId-1890036543"&gt;&lt;STRONG&gt;The Landscape of Parallel Processing in ABAP&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;As mentioned in the introduction, parallel processing in ABAP is based on two core technologies. To simplify their use, multible frameworks have been developed for easier implementation. The following table provides an overview of these technologies and their corresponding frameworks:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="marc_steinert_0-1758550065480.png" style="width: 706px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318006iFE283EECD9A1C02A/image-dimensions/706x145?v=v2" width="706" height="145" role="button" title="marc_steinert_0-1758550065480.png" alt="marc_steinert_0-1758550065480.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, let's explore how each of these core technologies enables parallel processing.&lt;/P&gt;&lt;H4 id="toc-hId-1822605757"&gt;&lt;STRONG&gt;Asynchronous Remote Function Call (aRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Asynchronous Remote Function Call&lt;/STRONG&gt; is one of the older and established SAP technology for parallel processing in ABAP. It works by starting a session in a separate &lt;STRONG&gt;dialog work process&lt;/STRONG&gt;, which then executes a function module in parallel with the main program. The calling program does not wait for the function to finish and continues its own processing immediately.&lt;/P&gt;&lt;P&gt;By starting multiple aRFCs in a row, you can achieve a significant parallelization effect, as each call runs simultaneously in its own process. This is implemented using the &lt;EM&gt;STARTING NEW TASK&lt;/EM&gt; addition to the standard &lt;EM&gt;CALL FUNCTION&lt;/EM&gt; statement. A example call could look like this:&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
STARTING NEW TASK '&amp;lt;task_name&amp;gt;'
DESTINATION IN GROUP &amp;lt;server_group&amp;gt;
PERFORMING &amp;lt;callback_form&amp;gt; ON END OF TASK.&lt;/PRE&gt;&lt;P&gt;For a more detailed guide on aRFCs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Gahm, H. (2009): ABAP Performance Tuning&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://pdfcoffee.com/5-rfc-types-in-abap-pdf-free.html" target="_self" rel="nofollow noopener noreferrer"&gt;Jolfaei, M. A. and Neuwirt, E. (2006): Master the five remote function call (RFC) types in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/doc/saphelp_em92/9.2/en-US/48/89673284b84e6fe10000000a421937/content.htm?no_cache=true" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Asynchronous RFC (aRFC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/753088fc00704d0a80e7fbd6803c8adb/489aa5b948c673e8e10000000a42189b.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing with Asynchronous RFC&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1626092252"&gt;&lt;STRONG&gt;Background Remote Function Call (bgRFC)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Remote Function Call&lt;/STRONG&gt; is a newer method for parallelization. While it also uses dialog work processes for execution like the aRFC, its operational logic is quite different.&lt;/P&gt;&lt;P&gt;Instead of executing immediately, a bgRFC call is first saved to a &lt;STRONG&gt;persistent queue&lt;/STRONG&gt; in the database. The actual processing is only triggered by an explicit &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement and is managed by a dedicated &lt;STRONG&gt;scheduler&lt;/STRONG&gt;. This approach makes it possible to execute tasks with an &lt;STRONG&gt;"Exactly Once"&lt;/STRONG&gt; or even an &lt;STRONG&gt;"Exactly Once in Order"&lt;/STRONG&gt; guarantee, which provides a high degree of reliability.&lt;/P&gt;&lt;P&gt;The implementation is nearly identical to that of an aRFC. The key difference is the use of the &lt;EM&gt;IN BACKGROUND UNIT&lt;/EM&gt; statement, which groups one or more function calls into a single, logical unit of work.&lt;/P&gt;&lt;PRE&gt;CALL FUNCTION '&amp;lt;function_module_name&amp;gt;'
IN BACKGROUND UNIT &amp;lt;unit_object&amp;gt;.&lt;/PRE&gt;&lt;P&gt;You can find more information about this technology here:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://support.sap.com/en/alm/sap-focused-run/expert-portal/integration-cloud-monitoring/bgrfc.html" target="_self" rel="noopener noreferrer"&gt;SAP Support: bgRFC&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/48927c2caa6b17cee10000000a421937.html" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: bgRFC (Background Remote Function Call)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1429578747"&gt;&lt;STRONG&gt;Background Processes&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;Using dedicated &lt;STRONG&gt;Background Processes&lt;/STRONG&gt; is another established method for achieving parallelism in SAP Systems, especially suitable for long-running and resource-intensive tasks that can be clearly divided.&lt;/P&gt;&lt;P&gt;Parallelizing with background processes follows the same core principle as with aRFCs: multiple tasks are started to run simultaneously. This can be achieved in two main ways. The first approach is done purely through configuration. Here, an administrator can manually schedule the same ABAP program multiple times, where each parallel &lt;STRONG&gt;job&lt;/STRONG&gt; uses a unique &lt;STRONG&gt;variant&lt;/STRONG&gt; with a different dataset&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The second approach is to implement this parallelization within a single ABAP program. This is done using a set of function modules that control the job lifecycle:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_OPEN&lt;/STRONG&gt;&lt;/EM&gt; creates a new job.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_SUBMIT&lt;/STRONG&gt;&lt;/EM&gt; adds the program and its variant as a step.&lt;/LI&gt;&lt;LI&gt;&lt;EM&gt;&lt;STRONG&gt;JOB_CLOSE&lt;/STRONG&gt;&lt;/EM&gt; releases the job to the system for execution.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For more details on implementing parallel background jobs, check out these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-with-background-jobs-in-sap/ba-p/14001745" target="_self"&gt;SAP Community (2025): Parallel Processing with Background Jobs in SAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/7bfe8cdcfbb040dcb6702dada8c3e2f0/4d95304dd1b83c46e10000000a42189e.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Programming with the Background Processing System (BC-CCM-BTC)&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/parallel-processing-of-background-jobs-in-sap/ba-p/13244439" target="_self"&gt;SAP Community (2014):&amp;nbsp;Parallel processing of background jobs in SAP&amp;nbsp;&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1103982523"&gt;&lt;STRONG&gt;Frameworks for Easier Implementation&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;While the core technologies provide the fundamental mechanisms for parallel processing, implementing them directly requires handling details like load balancing, package creation and managing parallel tasks. To simplify this process, SAP provides several &lt;STRONG&gt;frameworks&lt;/STRONG&gt; that build on these technologies. These frameworks offer a structured, reusable and often easier way to implement robust parallel processing.&lt;/P&gt;&lt;P&gt;To select the most suitable framework, the following decision matrix based on the Qualitative Weight and Summ (QWS) method provides a visual comparison. The &lt;STRONG&gt;darker the green shade&lt;/STRONG&gt;, the better a framework fulfills a specific criterion. Please note that this matrix reflects my subjective evaluation for a specific use case. Your assessment will likely differ based on your project's unique requirements.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="marc_steinert_1-1758550429007.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/318022i6DE4D8A1A7502555/image-size/large?v=v2&amp;amp;px=999" role="button" title="marc_steinert_1-1758550429007.png" alt="marc_steinert_1-1758550429007.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Evaluation Criteria Explained&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Here is a brief summary of each criterion used in the matrix:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Platform Compatibility:&lt;/STRONG&gt; Runs on both SAP ECC and S/4HANA systems.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Timeout Robustness:&lt;/STRONG&gt; Handles long-running tasks without timing out.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Package Creation:&lt;/STRONG&gt; Automatically divides data into work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Configurable Package Size:&lt;/STRONG&gt; Allows the developer to define the size of work packages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Parallel Execution:&lt;/STRONG&gt; Automatically starts and manages the execution of parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Result Aggregation:&lt;/STRONG&gt; Helps collect and consolidate results from parallel tasks.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Multi-Server Function:&lt;/STRONG&gt; Can distribute tasks across multiple application servers.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Processing Server Selection:&lt;/STRONG&gt; Allows specifying a server or server group for execution.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Load Balancing:&lt;/STRONG&gt; Automatically distributes tasks based on system load.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;System Load Control:&lt;/STRONG&gt; Allows setting limits on the maximum system resources used.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Implementation Effort:&lt;/STRONG&gt; The complexity and time required to implement the framework.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Documentation Quality:&lt;/STRONG&gt; The availability and quality of supporting documentation.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now lets have a look at the individual Frameworks.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1036551737"&gt;&lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SPTA Framework&lt;/STRONG&gt; provides a straightforward, function-module-based approach to simplify parallel processing with aRFCs. Instead of requiring the developer to manage the aRFC calls manually, the framework encapsulates the entire parallelization logic within a single, reusable function module, &lt;EM&gt;SPTA_PARA_PROCESS_START_2&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;To use the SPTA framework, a developer implements three specific form routines that serve as callbacks, filling them with the custom logic required for the application. The &lt;EM&gt;BEFORE_RFC_CALLBACK_FORM&lt;/EM&gt; is responsible for preparing the data and creating the work packages. The core processing logic, which is to be executed in parallel, is placed within the &lt;EM&gt;IN_RFC_CALLBACK_FORM&lt;/EM&gt;. After all the parallel tasks have been completed, the &lt;EM&gt;AFTER_RFC_CALLBACK_FORM&lt;/EM&gt; is called to consolidate the results and make them available for further processing.&lt;/P&gt;&lt;P&gt;For more information on the SPTA Framework, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://me.sap.com/notes/3002940/E" target="_self" rel="noopener noreferrer"&gt;SAP for Me (2020): 3002940 - Parallel Processing FAQ&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://sapyard.com/spta-parallel-processing-framework-in-abap" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] SAPYARD (2018): SPTA Parallel Processing Framework in ABAP&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://www.linkedin.com/pulse/lets-talk-spta-framework-your-guide-parallel-sap-dzmitryi-kharlanau-1skaf/" target="_self" rel="nofollow noopener noreferrer"&gt;[Non SAP] LinkedIn (2024): Let’s Talk About the SPTA Framework: Your Guide to Parallel Processing in SAP&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-840038232"&gt;&lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;SHDB Framework&lt;/STRONG&gt; is a more powerful and modern, object-oriented framework that also simplifies the use of aRFCs. It is structured into four main components that work together to provide a robust parallelization environment: the &lt;STRONG&gt;Package Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt;, the &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt;&amp;nbsp;and the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;The &lt;STRONG&gt;Package Provider&lt;/STRONG&gt; is responsible for automatically dividing the total dataset into smaller, processable packages according to configurable rules. The &lt;STRONG&gt;Resource Provider&lt;/STRONG&gt; actively monitors the system's memory and process utilization to determine the maximum allowed number of parallel tasks, thereby preventing system overloads. The &lt;STRONG&gt;Parallelizer&lt;/STRONG&gt; then calls the application-specific logic for each package in a separate aRFC task, while the &lt;STRONG&gt;Dispatcher&lt;/STRONG&gt; coordinates the entire process by requesting packages and resources and launching the asynchronous tasks.&lt;/P&gt;&lt;P&gt;Implementation is done in an object-oriented manner, starting with the factory class &lt;EM&gt;CL_SHDB_PFW_FACTORY&lt;/EM&gt; and using configuration objects from &lt;EM&gt;CL_SHDB_PFW_CONFIG&lt;/EM&gt; to define parameters like the number of parallel processes or package parameters.&lt;/P&gt;&lt;P&gt;While a complete guide for the SHDB Framework is not publicly available at this time, some information can be found on the SAP for Me portal. Relevant resources are available there using the search terms &lt;STRONG&gt;"SHDB Framework"&lt;/STRONG&gt; or &lt;STRONG&gt;"SHDB PFW"&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-643524727"&gt;&lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt; framework is another object-oriented solution for aRFC-based parallelization. Its name, while not official, comes from its original project folder. It is a lightweight solution centered around a main class and an interface that developers use to structure their parallel logic.&lt;/P&gt;&lt;P&gt;The implementation pattern requires the developer to create a processing class that implements the &lt;EM&gt;IF_ABAP_PARALLEL&lt;/EM&gt; interface. All the custom logic intended to run in parallel is then placed within its &lt;EM&gt;DO&lt;/EM&gt; method. Finally, the entire process is managed by an instance of the main &lt;EM&gt;CL_ABAP_PARALLEL&lt;/EM&gt; class and the parallel execution is triggered by calling the &lt;EM&gt;RUN_INST&lt;/EM&gt; method.&lt;/P&gt;&lt;P&gt;For more information on &lt;STRONG&gt;CL_ABAP_PARALLEL&lt;/STRONG&gt;, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Book: Schwarzmann, W. (2022): Parallel Processing with ABAP Objects: Implementation and Testing, isbn: 978-1-4932-2354-1&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/parallel-processing" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/using-class-cl-abap-parallel-for-mass-parallel-dialog-work-processes/ba-p/13579844" target="_self"&gt;SAP Community (2023): Using class CL_ABAP_PARALLEL for mass parallel dialog work processes&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-447011222"&gt;&lt;STRONG&gt;Background Processing Framework (bgPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Background Processing Framework&lt;/STRONG&gt; serves as the dedicated framework for the &lt;STRONG&gt;bgRFC&lt;/STRONG&gt; technology.&lt;/P&gt;&lt;P&gt;The implementation pattern requires a developer to encapsulate the business logic in a dedicated class that implements a framework interface. For most use cases, &lt;EM&gt;IF_BGMC_OP_SINGLE&lt;/EM&gt; is used to ensure the process follows strict transactional rules for data consistency.&lt;/P&gt;&lt;P&gt;Once this class with the business logic is ready, it is passed to the &lt;EM&gt;CL_BGMC_PROCESS_FACTORY&lt;/EM&gt;. This is a helper class provided by the framework that constructs the main process object for the background task. The task is then registered by calling the &lt;EM&gt;save_for_execution()&lt;/EM&gt; method and the entire process is finally triggered by a &lt;EM&gt;COMMIT WORK&lt;/EM&gt; statement.&lt;/P&gt;&lt;P&gt;For more information on the bgPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-concepts/background-processing-framework" target="_self" rel="noopener noreferrer"&gt;SAP Help Protal: Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-background-processing-framework/ba-p/13579056" target="_self"&gt;SAP Community (2023): Introducing the Background Processing Framework&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-250497717"&gt;&lt;STRONG&gt;Parallel Processing Framework (PPF)&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Parallel Processing Framework&lt;/STRONG&gt;, sometimes also referred to as the &lt;STRONG&gt;Framework for Parallel Processing (FPP)&lt;/STRONG&gt;, is a framework based on background processes used to structure and execute mass-data processing runs in parallel.&lt;/P&gt;&lt;P&gt;Its implementation requires both settings in Customizing and the development of custom ABAP function modules. A developer first defines an &lt;STRONG&gt;application type&lt;/STRONG&gt; using transaction &lt;EM&gt;BANK_CUS_PPC&lt;/EM&gt;. This application type links specific processing steps, such as data packaging or execution, to the custom-developed function modules that contain the business logic.&lt;/P&gt;&lt;P&gt;The entire process is then initiated from a report by calling the central function module &lt;EM&gt;BANK_MAP_PP_START&lt;/EM&gt;, which uses the application type's configuration to manage the parallel jobs.&lt;/P&gt;&lt;P&gt;For more information on the PPF, see these resources:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/sap-for-banking-blogs/exploring-mass-run-program-based-on-ppf/ba-p/13136452" target="_self"&gt;SAP Community (2015): Exploring Mass run program based on PPF&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/5bec6e0df6b549258e7ae381fedd4066/593e3752aeefbc02e10000000a44176d.html?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Help Portal: Parallel Processing (FPP)&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--443732883"&gt;&lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The &lt;STRONG&gt;Mass Data Framework&lt;/STRONG&gt; is a comprehensive solution for structuring and controlling complex projects that involve large-scale data changes and is often used in migration scenarios.&lt;/P&gt;&lt;P&gt;The implementation requires just like the Parallel Processing Framework a combination of &lt;STRONG&gt;Customizing&lt;/STRONG&gt; and &lt;STRONG&gt;development&lt;/STRONG&gt;. In Customizing (via transaction SM30), a developer defines the entire project structure. This involves creating a &lt;STRONG&gt;Project Type&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MPROJ_TYP&lt;/EM&gt;), which consists of a sequence of &lt;STRONG&gt;Activities&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_SET&lt;/EM&gt;). Each activity is made up of one or more &lt;STRONG&gt;Steps&lt;/STRONG&gt; (&lt;EM&gt;FINSV_MASSF_STEP&lt;/EM&gt;), where the custom ABAP logic is assigned.&lt;/P&gt;&lt;P&gt;The developer's main task is to create an &lt;STRONG&gt;application class&lt;/STRONG&gt; that contains the business logic for a step. This class must implement the interface &lt;EM&gt;IF_FINS_MASS_DATA&lt;/EM&gt;, which includes three key methods. The &lt;EM&gt;GET_PACKAGES&lt;/EM&gt; method is called to define the work packages. The &lt;EM&gt;PREPARE &lt;/EM&gt;method can be used for any setup tasks before the parallel processing starts. Finally, the &lt;EM&gt;PROCESS &lt;/EM&gt;method contains the core logic that is executed in parallel for each individual package.&lt;/P&gt;&lt;P&gt;As it is an older framework, further resources for the Mass Data Framework are primarily located on internal SAP platforms and are not publicly available.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I hope you found this overview informative and that it helps you tackle your own performance tuning challenges.&lt;/P&gt;&lt;P&gt;A special thanks to &lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/226501"&gt;@ManuS&lt;/a&gt;&amp;nbsp;&lt;/STRONG&gt; for the help and guidance!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-s-parallel-processing-frameworks-practical-guide-to-performance-tuning/ba-p/14224397"/>
    <published>2025-09-29T08:52:47.138000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/abap-blog-posts/abap-code-to-wait-for-the-end-of-quot-inbound-bgrfc-type-q-quot-units/ba-p/14237566</id>
    <title>ABAP code to wait for the end of "inbound bgRFC type Q" units</title>
    <updated>2025-10-07T20:28:26.490000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;I have a program which runs parallel tasks in the same system by using bgRFC and several qRFC queues: each queue runs tasks sequentially, but two queues run in parallel. With bgRFC, each task is called a unit. This scenario is called Inbound bgRFC type Q, see here for more information:&amp;nbsp;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/753088fc00704d0a80e7fbd6803c8adb/48927c2caa6b17cee10000000a421937.html?locale=en-US" target="_blank" rel="noopener noreferrer"&gt;bgRFC (Background Remote Function Call) | SAP Help Portal&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Once all units are started, I want the program to wait for all units to finish.&lt;/P&gt;&lt;P&gt;I propose a simple ABAP method which should work for most of situations.&lt;/P&gt;&lt;P&gt;There are really very few posts about bgRFC and the official documentation is missing information too, so I hope it can help some people. Note: I don't even know if the classes I use are supported by SAP and if it's the right way to do it, so all comments are welcome, thank you.&lt;/P&gt;&lt;P&gt;Here is the context how this method is used (&lt;CODE&gt;WAIT_END_OF_QRFC_INBOUND_UNITS&lt;/CODE&gt;) :&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA(inbound_destination) = cl_bgrfc_destination_inbound=&amp;gt;create( 'ZZZ' ).

LOOP AT any_table INTO line.
  DATA(unit) = inbound_destination-&amp;gt;create_qrfc_unit( ).
  unit-&amp;gt;add_queue_name_inbound( line-queue_name ).

  CALL FUNCTION '...' 
     IN BACKGROUND UNIT unit
     EXPORTING ...

  INSERT unit INTO TABLE units.
ENDLOOP.

COMMIT WORK.

DATA(wait_results) = zcl_bgrfc_helper=&amp;gt;wait_end_of_qrfc_inbound_units(
                       i_watch_delay_seconds = 5
                       i_units               = units ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Little explanation: there's an internal table containing data which needs to be processed in parallel via a given RFC-enabled function module. The internal table assigns given queue names to each line of data in order to achieve the parallelization. For instance, one half of the table goes to the queue named Z1, all calls in Z1 will be executed sequentially, the other half goes to the queue named Z2, the calls in Z1 and Z2 will be executed in parallel).&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;CALL FUNCTION ... IN BACKGROUND UNIT unit ...&lt;/CODE&gt;&amp;nbsp;registers a call in a given bgRFC unit. You may call several function modules in the same unit. The function modules are not called until &lt;CODE&gt;COMMIT WORK&lt;/CODE&gt; is reached.&lt;/P&gt;&lt;P&gt;&lt;CODE&gt;COMMIT WORK&lt;/CODE&gt; creates the inbound bgRFC units in the database (function module calls and parameters) and all the queues are started by the bgRFC scheduler. You can see the units via the transaction SBGRFCMON.&lt;/P&gt;&lt;P&gt;Prerequisite: the inbound destination ZZZ was created via the transaction SBGRFCCONF. Nothing else needed (no prefix, no RFC destination in SM59, queue names are assigned freely by the program, etc.)&lt;/P&gt;&lt;P&gt;Here's the code of the method &lt;CODE&gt;WAIT_END_OF_QRFC_INBOUND_UNITS&lt;/CODE&gt;:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_bgrfc_helper DEFINITION FINAL PUBLIC CREATE PRIVATE.
  PUBLIC SECTION.
    TYPES ty_qrfc_inbound_units TYPE STANDARD TABLE OF REF TO if_qrfc_unit_inbound WITH EMPTY KEY.
    TYPES:
      BEGIN OF ty_bgrfc_unit_state,
        unit         TYPE REF TO if_qrfc_unit_inbound,
        "! Time at which the information was collected
        timestamp    TYPE timestampl,
        unit_success TYPE abap_bool,
        unit_error   TYPE abap_bool,
        "! In case there's a unit error
        unit_state   TYPE bgrfc_unit_state,
        queue_error  TYPE abap_bool,
        "! In case there's a queue error
        queue_state  TYPE qrfc_queue_state,
      END OF ty_bgrfc_unit_state.
    TYPES ty_bgrfc_unit_states TYPE SORTED TABLE OF ty_bgrfc_unit_state WITH UNIQUE KEY unit.

    CLASS-METHODS wait_end_of_qrfc_inbound_units
      IMPORTING i_watch_delay_seconds      TYPE numeric DEFAULT 5
                i_units                    TYPE ty_qrfc_inbound_units
      RETURNING VALUE(r_bgrfc_unit_states) TYPE ty_bgrfc_unit_states.

    CLASS-METHODS get_timestamp
      RETURNING VALUE(r_result) TYPE timestampl.
ENDCLASS.

CLASS zcl_bgrfc_helper IMPLEMENTATION.
  METHOD wait_end_of_qrfc_inbound_units.
    TYPES:
      BEGIN OF ty_queue,
        queue_name TYPE qrfc_queue_name,
        dest_name  TYPE bgrfc_dest_name_inbound,
      END OF ty_queue.
    TYPES tt_queue TYPE SORTED TABLE OF ty_queue WITH UNIQUE KEY queue_name dest_name.
    TYPES:
      BEGIN OF ty_unit_and_queue,
        unit       TYPE REF TO if_qrfc_unit_inbound,
        queue_name TYPE qrfc_queue_name,
        dest_name  TYPE bgrfc_dest_name_inbound,
      END OF ty_unit_and_queue.
    TYPES tt_unit_and_queue TYPE SORTED TABLE OF ty_unit_and_queue WITH UNIQUE KEY unit
                            WITH NON-UNIQUE SORTED KEY by_inbound_queue COMPONENTS queue_name dest_name.

    DATA ls_unit_and_queue TYPE REF TO ty_unit_and_queue.

    DATA(lt_queue) = REDUCE #(
                    INIT lt_queue_2 = VALUE tt_queue( )
                    FOR &amp;lt;lv_unit&amp;gt; IN i_units
                    FOR &amp;lt;lv_queue_name&amp;gt; IN &amp;lt;lv_unit&amp;gt;-&amp;gt;get_queue_names_inbound( )
                    NEXT lt_queue_2 = COND #(
                         WHEN NOT line_exists( lt_queue_2[ queue_name = &amp;lt;lv_queue_name&amp;gt;
                                                           dest_name  = &amp;lt;lv_unit&amp;gt;-&amp;gt;destination-&amp;gt;dest_name ] )
                         THEN VALUE #( BASE lt_queue_2
                                       ( queue_name = &amp;lt;lv_queue_name&amp;gt;
                                         dest_name  = &amp;lt;lv_unit&amp;gt;-&amp;gt;destination-&amp;gt;dest_name )  )
                         ELSE lt_queue_2 ) ).

    DATA(lt_unit_and_queue) = VALUE tt_unit_and_queue( FOR &amp;lt;lv_unit&amp;gt; IN i_units
                                                       FOR &amp;lt;lv_queue_name&amp;gt; IN &amp;lt;lv_unit&amp;gt;-&amp;gt;get_queue_names_inbound( )
                                                       ( unit       = &amp;lt;lv_unit&amp;gt;
                                                         queue_name = &amp;lt;lv_queue_name&amp;gt;
                                                         dest_name  = &amp;lt;lv_unit&amp;gt;-&amp;gt;destination-&amp;gt;dest_name ) ).
    WHILE lt_unit_and_queue IS NOT INITIAL.

      WAIT UP TO i_watch_delay_seconds SECONDS.

      LOOP AT lt_unit_and_queue REFERENCE INTO ls_unit_and_queue.
        DATA(bgrfc_unit_state) = cl_qrfc_client_inbound=&amp;gt;get_unit_state( ls_unit_and_queue-&amp;gt;unit-&amp;gt;unit_id ).
        CASE bgrfc_unit_state.
          WHEN if_bgrfc_client=&amp;gt;unit_state_runnable
            OR if_bgrfc_client=&amp;gt;unit_state_in_execution
            OR if_bgrfc_client=&amp;gt;unit_state_blocked ##NO_HANDLER.
          WHEN if_bgrfc_client=&amp;gt;unit_state_executed.
            r_bgrfc_unit_states = VALUE #( BASE r_bgrfc_unit_states
                                           ( unit         = ls_unit_and_queue-&amp;gt;unit
                                             timestamp    = get_timestamp( )
                                             unit_state   = bgrfc_unit_state
                                             unit_success = abap_true ) ).
            DELETE lt_unit_and_queue USING KEY loop_key.
          WHEN OTHERS.
            r_bgrfc_unit_states = VALUE #( BASE r_bgrfc_unit_states
                                           ( unit       = ls_unit_and_queue-&amp;gt;unit
                                             timestamp  = get_timestamp( )
                                             unit_state = bgrfc_unit_state
                                             unit_error = abap_true ) ).
            DELETE lt_unit_and_queue USING KEY loop_key.
        ENDCASE.
      ENDLOOP.

      LOOP AT lt_queue REFERENCE INTO DATA(queue).
        DATA(bgrfc_queue_state) = cl_qrfc_client_inbound=&amp;gt;get_queue_state( queue_name = queue-&amp;gt;queue_name
                                                                           dest_name  = queue-&amp;gt;dest_name ).
        CASE bgrfc_queue_state.
          WHEN if_bgrfc_client=&amp;gt;queue_state_runnable
            OR if_bgrfc_client=&amp;gt;queue_state_in_execution
            OR if_bgrfc_client=&amp;gt;queue_state_empty ##NO_HANDLER.
          WHEN OTHERS.
            LOOP AT lt_unit_and_queue REFERENCE INTO ls_unit_and_queue
                 USING KEY by_inbound_queue
                 WHERE     queue_name = queue-&amp;gt;queue_name
                       AND dest_name  = queue-&amp;gt;dest_name.
              r_bgrfc_unit_states = VALUE #( BASE r_bgrfc_unit_states
                                             ( unit        = ls_unit_and_queue-&amp;gt;unit
                                               timestamp   = get_timestamp( )
                                               queue_state = bgrfc_queue_state
                                               queue_error = bgrfc_queue_state ) ).
              DELETE lt_unit_and_queue WHERE unit = ls_unit_and_queue-&amp;gt;unit.
            ENDLOOP.
            DELETE lt_queue USING KEY loop_key.
        ENDCASE.
      ENDLOOP.
    ENDWHILE.
  ENDMETHOD.

  METHOD get_timestamp.
    GET TIME STAMP FIELD r_result.
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;As I said, I don't know if these classes are released by SAP:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;CODE&gt;cl_qrfc_client_inbound=&amp;gt;get_unit_state&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;CODE&gt;cl_qrfc_client_inbound=&amp;gt;get_queue_state&lt;/CODE&gt;&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The method should support units which span other several inbound queues, but I didn't test it.&lt;/P&gt;&lt;P&gt;In my case, I could see that one unit has these states: runnable (briefly), in execution, executed. In a given queue, there's only one unit processed at a time. All the units instantiated after the one processed have the state blocked. Other states should be errors (e.g. short dump, uncaught exception, error message, etc.)&lt;/P&gt;&lt;P&gt;The queues have these states: empty if it doesn't contain any unit, runnable if it contains at least one unit to execute but it's not started yet, in execution when a unit is processed.&lt;/P&gt;&lt;P&gt;About the code, in case you want to ask: "DELETE itab USING KEY loop_key" is to delete the current line in the loop (LOOP AT itab), it corresponds to the old and less expressive syntax "DELETE itab". I used the pragma ##NO_HANDLER for CASE WHEN although it's not asked by the syntax check, the pragma is meant to be used for CATCH, when there's no code inside.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Any way, feel free to post any comment.&lt;/P&gt;&lt;P&gt;Thank you for reading.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/abap-blog-posts/abap-code-to-wait-for-the-end-of-quot-inbound-bgrfc-type-q-quot-units/ba-p/14237566"/>
    <published>2025-10-07T20:28:26.490000+02:00</published>
  </entry>
</feed>
