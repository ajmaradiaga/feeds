<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Process-Orchestration-blog-posts.xml</id>
  <title>SAP Community - SAP Process Orchestration</title>
  <updated>2025-08-13T02:01:36.853913+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Process Orchestration/pd-p/477916618626075516391832082074785" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Process Orchestration blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-more-bypass-options-and-custom-extensions/ba-p/13955138</id>
    <title>New Pipeline Concept features: more bypass options and custom extensions</title>
    <updated>2024-12-04T12:41:15.645000+01:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;We have recently shipped a new version 1.0.8 of the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-new-pipeline-concept-in-cloud-integration/ba-p/13639651" target="_blank"&gt;Pipeline Concept&lt;/A&gt;&amp;nbsp;were we introduced the following new features:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Option to combine receiver and interface determination in one single XSLT mapping for an improved runtime behavior&lt;/LI&gt;&lt;LI&gt;Option to bypass interface determination pipeline step in case of Recipient List pattern without interface split&lt;/LI&gt;&lt;LI&gt;Option to bypass receiver determination pipeline step in case of interface split scenarios with one single receiver only&lt;/LI&gt;&lt;LI&gt;Supporting header-based XSLT routing conditions if message body is non-XML&lt;/LI&gt;&lt;LI&gt;Extension for custom receiver determination instead of XSLT from Partner Directory&lt;/LI&gt;&lt;LI&gt;Extension for custom interface determination instead of XSLT from Partner Directory&lt;/LI&gt;&lt;LI&gt;New pipeline processing log providing more details if message is stored to the dead letter queue&lt;/LI&gt;&lt;LI&gt;Fixed standard retry handling for generic integration flows with splitter to avoid message duplicates&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The package can be accessed from the&amp;nbsp;&lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/integrationflow" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;. If you have already copied the package to your workspace in your SAP Integration Suite tenant, you can simply run the update of the package to be able to use the latest features.&lt;/P&gt;&lt;P&gt;Let me briefly describe some of the new features.&lt;/P&gt;&lt;H2 id="toc-hId-1076652447"&gt;Further bypass options&lt;/H2&gt;&lt;P&gt;With version 1.0.6, we have already shipped a bypass option for pure Point-to-Point scenarios, see&amp;nbsp;&lt;A class="" href="https://community.sap.com/t5/technology-blogs-by-sap/new-pipeline-concept-features-new-partner-id-definition-alternative-partner/ba-p/13787400" target="_blank"&gt;New Pipeline Concept features: new partner id definition, alternative partner, bypass option&lt;/A&gt;. With the latest version, you now have the option to either bypass the receiver determination or the interface determination depending on your integration scenario. For an interface split scenario with one single receiver only, you can bypass the receiver determination. For a Recipient List pattern with one interface per receiver, you can bypass the interface determination. In any cases, by applying the different bypass options you can save at least one JMS queue and one pipeline step which leads to an improved runtime behavior.&lt;/P&gt;&lt;P&gt;Further runtime improvements can be achieved by combining the receiver determination xpaths and the interface determination xpaths in one single XSLT. This use case is actually a special case of the interface determination bypass option. Here, the receiver determination pipeline step has been enhanced supporting a receiver determination XSLT that contains xpaths conditions for both the receiver and the interface determination. The&amp;nbsp;receiver determination pipeline step then splits both the number of receivers and the number of interfaces. This way, you only need to read, decode, and run one single XSLT instead of multiple interface determination XSLTs for each receiver.&lt;/P&gt;&lt;P&gt;Here's an example of such a combined XSLT:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;
  &amp;lt;xsl:param name="dc_country"/&amp;gt;
  &amp;lt;xsl:template match="/"&amp;gt;
    &amp;lt;ns0:Receivers xmlns:ns0="http://sap.com/xi/XI/System"&amp;gt;
      &amp;lt;ReceiverNotDetermined&amp;gt;
        &amp;lt;Type&amp;gt;Error&amp;lt;/Type&amp;gt;
        &amp;lt;DefaultReceiver/&amp;gt;
      &amp;lt;/ReceiverNotDetermined&amp;gt;
      &amp;lt;xsl:if test="/*:Item/Category = 'Keyboards'"&amp;gt;
        &amp;lt;Receiver&amp;gt;
          &amp;lt;Service&amp;gt;Receiver_11&amp;lt;/Service&amp;gt;
          &amp;lt;Interfaces&amp;gt;
            &amp;lt;xsl:if test="/*:Item/Quantity = '10'"&amp;gt;
              &amp;lt;Interface&amp;gt;
                &amp;lt;Index&amp;gt;1&amp;lt;/Index&amp;gt;                       
                &amp;lt;Service&amp;gt;/PIP/Step07/Samples/Scenario_1/Receiver_11/IfIdx1&amp;lt;/Service&amp;gt;
              &amp;lt;/Interface&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
            &amp;lt;xsl:if test="/*:Item/CurrencyCode = 'EUR'"&amp;gt;
              &amp;lt;Interface&amp;gt;
                &amp;lt;Index&amp;gt;2&amp;lt;/Index&amp;gt;
                &amp;lt;Service&amp;gt;/PIP/Step07/Samples/Scenario_1/Receiver_11/IfIdx2&amp;lt;/Service&amp;gt;
              &amp;lt;/Interface&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
            &amp;lt;xsl:if test="/*:Item/Quantity != '10'"&amp;gt;
              &amp;lt;Interface&amp;gt;
                &amp;lt;Index&amp;gt;3&amp;lt;/Index&amp;gt;
                &amp;lt;Service&amp;gt;/PIP/Step07/Samples/Scenario_1/Receiver_11/IfIdx3&amp;lt;/Service&amp;gt;
              &amp;lt;/Interface&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/Interfaces&amp;gt;
        &amp;lt;/Receiver&amp;gt;
      &amp;lt;/xsl:if&amp;gt;
      &amp;lt;xsl:if test="(/*:Item/Category = 'Keyboards') or (/*:Item/Category = 'Software')"&amp;gt;
        &amp;lt;Receiver&amp;gt;
          &amp;lt;Service&amp;gt;Receiver_12&amp;lt;/Service&amp;gt;
          &amp;lt;Interfaces&amp;gt;
            &amp;lt;xsl:if test="$dc_country = 'DE'"&amp;gt;
              &amp;lt;Interface&amp;gt;
                &amp;lt;Index&amp;gt;1&amp;lt;/Index&amp;gt;
                &amp;lt;Service&amp;gt;/PIP/Step07/Samples/Scenario_1/Receiver_12/IfIdx1&amp;lt;/Service&amp;gt;
              &amp;lt;/Interface&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
            &amp;lt;xsl:if test="$dc_country != 'DE'"&amp;gt;
              &amp;lt;Interface&amp;gt;
                &amp;lt;Index&amp;gt;2&amp;lt;/Index&amp;gt;
                &amp;lt;Service&amp;gt;/PIP/Step07/Samples/Scenario_1/Receiver_12/IfIdx2&amp;lt;/Service&amp;gt;
              &amp;lt;/Interface&amp;gt;
            &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/Interfaces&amp;gt;
        &amp;lt;/Receiver&amp;gt;
      &amp;lt;/xsl:if&amp;gt;
    &amp;lt;/ns0:Receivers&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;As you can see, the XSLT contains the receiver components as well as the receiver interface index and the end points of the scenario-specific outbound processing flows where the mappings and the delivery to the receivers are done. By providing the end point information here, the interface determination pipeline step is bypassed.&lt;/P&gt;&lt;P&gt;For more details, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/special-cases#pipeline-bypass-options" target="_blank" rel="noopener noreferrer"&gt;Pipeline Bypass Options&lt;/A&gt;.&lt;/P&gt;&lt;H2 id="toc-hId-880138942"&gt;Custom extensions&lt;/H2&gt;&lt;P&gt;As an alternative to the standard receiver or interface determination based on an XSLT from the Partner Directory, you can implement your own custom receiver or interface determination. The generic integration flows support a kind of custom exit that you can use to run your own custom logic without changing the delivered generic integration flows. To do so, you must implement a separate scenario-specific integration flow that's called instead of the standard XSLT mappings.&lt;/P&gt;&lt;P&gt;You do not need to create the scenario-specific integration flows from scratch, the updated Pipeline package contains templates that you can copy and adapt to your needs. The templates have the target XSDs as references which eases the implementation effort. So, you can create a message mapping that maps to the target structure or alternatively you can create your own groovy scripts or use any other logic which you prefer. The target XSD for the receiver determination by the way supports the combined receiver and interface determination as described above. So, when using the custom extensions, you can also leverage the bypass options.&lt;/P&gt;&lt;P&gt;For more details, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/customizing-pipeline-concept" target="_blank" rel="noopener noreferrer"&gt;Customizing the Pipeline Concept&lt;/A&gt;.&lt;/P&gt;&lt;H2 id="toc-hId-683625437"&gt;Non-XML payloads&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;When running an XSLT mapping to determine the list of receivers or interfaces for non-XML messages, you usually run into an error even if the conditions are based on headers only because the XSLT expects an XML. To overcome this error, a dummy XML is created right before running the XSLT. With this, you are able to process non-XML messages within the pipeline without the need to convert into XML before.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-487111932"&gt;Processing log&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;At various places during message processing, information is stored in a new header which we pass across the pipeline steps. We decided to add the log information whenever we call groovy scripts to avoid to make too many changes to the integration flow model. Whenever a message is stored in the dead letter queue because the maximum of retries has been exceeded, the log information is attached to the message processing log.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-290598427"&gt;Retry handling&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;For the generic &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;receiver &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;and interface determination &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;integration flows &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;where the message is split, &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;t&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ransaction handling ensures that split messages are rolled back in case of an error&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;. H&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;owever&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; if the message is forwarded to the dead letter queue&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; the &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;message processing ends with&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; either &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;a message end event or an escalation end event&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; so that in rare cases already split messages might be&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;committed&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;. This may lead to duplicates if the message&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; is &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;moved from the dead letter queue to the actual queue &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;for reprocessing.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;To avoid duplicates, we had to change the standard retry handling within the receiver and the interface determination flows. When the actual maximum number of retries have been exceeded, we need to do an additional retry &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;and then&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;check&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; right at the beginning of the &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;integration flows&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; before splitting the message. For the other generic flows that do not carry out a split, the retry handling kept unchanged.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;If you like to try out the pipeline concept in general and the new features in particular, check out this &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios" target="_blank" rel="noopener nofollow noreferrer"&gt;github repository&lt;/A&gt; where I describe how to setup sample scenarios using the pipeline concept. Here, we have added the following new scenarios and scenario variants leveraging the new features:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario1A" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 1A&lt;/A&gt;, &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario2A" target="_blank" rel="noopener nofollow noreferrer"&gt;scenario 2A&lt;/A&gt; and &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario2B" target="_blank" rel="noopener nofollow noreferrer"&gt;scenario 2B&lt;/A&gt; cover the bypass options including the combined receiver and interface determination.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario2C" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 2C&lt;/A&gt; and &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario4A" target="_blank" rel="noopener nofollow noreferrer"&gt;scenario 4A&lt;/A&gt; cover the custom extensions samples.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario7" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 7&lt;/A&gt; covers the non-XML payload use case.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;As usually, in case of feedback, feel free to reach out to me.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-more-bypass-options-and-custom-extensions/ba-p/13955138"/>
    <published>2024-12-04T12:41:15.645000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-configure-pollenrich-in-cloud-integration/ba-p/13972855</id>
    <title>How to configure PollEnrich in Cloud Integration</title>
    <updated>2024-12-30T22:20:06.846000+01:00</updated>
    <author>
      <name>SaiPrudhviRajTaduva</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1501949</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What is Poll Enrich&lt;/STRONG&gt;:&amp;nbsp; It is used to read the messages from external system and add the content to the original message in the middle of message processing sequence. Currently, we can use Poll Enrich step &lt;EM&gt;only to read the data from SFTP server.&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;There are the following options in Poll Enrich:&lt;/STRONG&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;P class=""&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Combine XML:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Combines the message polled from the external component with the original message without any conditions. The messages are combined in multimapping format.&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Concatenate:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;The message polled from the external component is added to the existing message.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Replace:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;The existing message is replaced with the message polled from the external component.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step-1:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;Add i-Flow and name it as PollEnrich and add an artifact take sender&amp;nbsp; as HTTPs and receiver as SFTP&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Step-2:&amp;nbsp;&lt;/STRONG&gt;Open the i-Flow and Change the Sender Participant to “HTTP” and Target Participant to “&lt;EM&gt;SFTP&lt;/EM&gt;”&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_0-1735370357638.png" style="width: 712px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205593i48620A6AC78FFCD8/image-dimensions/712x211?v=v2" width="712" height="211" role="button" title="SaiPrudhviRajTaduva_0-1735370357638.png" alt="SaiPrudhviRajTaduva_0-1735370357638.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Step-3:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;Connect the Sender Participant “HTTP&lt;/SPAN&gt;&lt;SPAN&gt;” to Start and use the HTTPs adapter. Configure the Connection Tab as per below.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&amp;nbsp;Address can be anything, but for practice purpose here I am using POllEnrich as naming convention. This will be the end point URL for the Interface to trigger.&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_1-1735370470966.png" style="width: 721px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205594iE0B3A7ED75E96E73/image-dimensions/721x229?v=v2" width="721" height="229" role="button" title="SaiPrudhviRajTaduva_1-1735370470966.png" alt="SaiPrudhviRajTaduva_1-1735370470966.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Step-4:&lt;/STRONG&gt;From&amp;nbsp;the pallet functions, choose Call ---&amp;gt; External call---&amp;gt;Poll Enrich&amp;nbsp; and drop it in-between Start and End Message.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Double click on Poll Enrich function and select Combine XML from the Processing tab&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_2-1735370824753.png" style="width: 710px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205595i4A35EFE6A2B2F8C4/image-dimensions/710x268?v=v2" width="710" height="268" role="button" title="SaiPrudhviRajTaduva_2-1735370824753.png" alt="SaiPrudhviRajTaduva_2-1735370824753.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Step-5:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;Connect the End message and Target Participant “&lt;/SPAN&gt;&lt;EM&gt;SFTP&lt;/EM&gt;&lt;SPAN&gt;” and use SFTP adapter. In SFTP adapter, enter the following details&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_3-1735371260113.png" style="width: 739px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205597i65BED8F432E300FD/image-dimensions/739x289?v=v2" width="739" height="289" role="button" title="SaiPrudhviRajTaduva_3-1735371260113.png" alt="SaiPrudhviRajTaduva_3-1735371260113.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;SPAN&gt;Make sure that the SFTP credentials are deployed in the below path&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Monitoring–&amp;gt;Integrations And APIs–&amp;gt;Overview –&amp;gt; Manage Security –&amp;gt; Security Material –&amp;gt; Create/Upload Credentials&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Check the connectivity test of SFTP adapter in Test Connectivity in the below path&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Overview –&amp;gt; Manage Security –&amp;gt; Connectivity Tests –&amp;gt; SSH&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Copy the Host Key and paste it in notepad &amp;amp; deploy it in Known Hosts(SSH) file in the below path&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Overview –&amp;gt; Manage Security –&amp;gt; Security Material –&amp;gt; Upload Known Hosts(SSH)&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Step-6: &lt;/STRONG&gt;Now take one more sender from the Participant pallet and Connect the Sender Participant “SFTP1” to Poll Enrich.&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_4-1735371805247.png" style="width: 706px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205598i20C48E05346CB10F/image-dimensions/706x276?v=v2" width="706" height="276" role="button" title="SaiPrudhviRajTaduva_4-1735371805247.png" alt="SaiPrudhviRajTaduva_4-1735371805247.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;In SFTP adapter, enter the following details&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_5-1735372474776.png" style="width: 753px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205599iA936ACDDD2635862/image-dimensions/753x288?v=v2" width="753" height="288" role="button" title="SaiPrudhviRajTaduva_5-1735372474776.png" alt="SaiPrudhviRajTaduva_5-1735372474776.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-7:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Save the Integration Flow &amp;amp; deploy it. Once Deployed, Go to Monitor. The status of the Integration Flow should be started&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_6-1735372646481.png" style="width: 605px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205600iA6D1EDA3EA697FE9/image-dimensions/605x268?v=v2" width="605" height="268" role="button" title="SaiPrudhviRajTaduva_6-1735372646481.png" alt="SaiPrudhviRajTaduva_6-1735372646481.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Step-9:&lt;/STRONG&gt;&lt;SPAN&gt;Now we are good to test the Integration flow. The next step is configuring the end point in Postman Copy the end point from Monitor tab.&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_8-1735373174754.png" style="width: 559px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205602i338C7C3D657FA750/image-dimensions/559x306?v=v2" width="559" height="306" role="button" title="SaiPrudhviRajTaduva_8-1735373174754.png" alt="SaiPrudhviRajTaduva_8-1735373174754.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;P&gt;&lt;STRONG&gt;Inputdata:&lt;/STRONG&gt;&lt;/P&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;OrderDetails&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;Order&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;OrderNumber&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;1&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;OrderNumber&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;OrderStatus&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;Shipped&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;OrderStatus&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;CustomerEmail&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;customer@example.com&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;CustomerEmail&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;CustomerName&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;John Doe&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;CustomerName&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;EmailNotificationFlag&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;true&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;EmailNotificationFlag&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;OrderTrackingNumber&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;TN12345678900&lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;OrderTrackingNumber&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;lt;&lt;/SPAN&gt;&lt;SPAN&gt;Order&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;&amp;lt;/&lt;/SPAN&gt;&lt;SPAN&gt;OrderDetails&lt;/SPAN&gt;&lt;SPAN&gt;&amp;gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Data from external system:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;lt;OrderDetails&amp;gt;&lt;BR /&gt;&amp;nbsp;&amp;lt;Order&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;OrderNumber&amp;gt;12345&amp;lt;/OrderNumber&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;OrderStatus&amp;gt;delivered&amp;lt;/OrderStatus&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;CustomerEmail&amp;gt;customer@example.com&amp;lt;/CustomerEmail&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;CustomerName&amp;gt;John Doe&amp;lt;/CustomerName&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;EmailNotificationFlag&amp;gt;true&amp;lt;/EmailNotificationFlag&amp;gt;&lt;BR /&gt;&amp;nbsp; &amp;lt;OrderTrackingNumber&amp;gt;TN12345678900&amp;lt;/OrderTrackingNumber&amp;gt;&lt;BR /&gt;&amp;nbsp;&amp;lt;/Order&amp;gt;&lt;BR /&gt;&amp;lt;/OrderDetails&amp;gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Step-8:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Open Postman paste the endpoint that you have copied from the monitor select basic authentication and provide the credentials the you have created.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Inputdata:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_9-1735373849257.png" style="width: 531px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205603i18B07E670FBF0FC9/image-dimensions/531x153?v=v2" width="531" height="153" role="button" title="SaiPrudhviRajTaduva_9-1735373849257.png" alt="SaiPrudhviRajTaduva_9-1735373849257.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;STRONG&gt;Output:&lt;/STRONG&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_10-1735373885729.png" style="width: 529px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/205605iA9D65E5FD3D2D1D2/image-dimensions/529x246?v=v2" width="529" height="246" role="button" title="SaiPrudhviRajTaduva_10-1735373885729.png" alt="SaiPrudhviRajTaduva_10-1735373885729.png" /&gt;&lt;/span&gt;&lt;P&gt;You can also try the other two functions in the same flow by changing the aggregation algorithm to&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;Concatenate&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Replace&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Thank you &amp;amp; Happy&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&lt;SPAN&gt;Integrating&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-configure-pollenrich-in-cloud-integration/ba-p/13972855"/>
    <published>2024-12-30T22:20:06.846000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location-gt-code/ba-p/13973080</id>
    <title>Adapter Module to stop processing of duplicate file (FTP Location) ==&gt; Code Example Fixed</title>
    <updated>2024-12-30T22:20:32.797000+01:00</updated>
    <author>
      <name>isudoajl_ine</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1454911</uri>
    </author>
    <content>&lt;P&gt;Source post by Sandeep Jaiswal:&amp;nbsp;&lt;A href="https://community.sap.com/t5/additional-blogs-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location/ba-p/12863432" target="_self"&gt;additional-blogs-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location/ba-p/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;We had a requirement in one of our project, to stop the processing of duplicate files at the adapter level i.e. the message should not enter&amp;nbsp; the integration engine, if the file has been already processed earlier. There was a chance that client might place a file at FTP location more than ones.&lt;/P&gt;&lt;P&gt;Here we have used two text file at server to maintain the name of processed file and the password of the FTP. Example: name.txt and FtpPassword.txt.&lt;/P&gt;&lt;P&gt;The developed module code has the following functionality.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Whenever a file will be picked from a FTP location, the module code will check the existence of that file name in&amp;nbsp;the text file placed at the server. Example name.txt.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp;If the name of the file already exist, the code will make the file empty by making URL connection with the FTP server (so that adapter will delete that file when pinged to the server next time. For that we had set the property “do not process empty file” in the ftp channel). An error will be thrown.&lt;/LI&gt;&lt;LI&gt;Else the name will be written in the text file (server) i.e. name.txt.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp;The module code will make a URL connection with the FTP server by picking the password from a text file stored at the server.Example FtpPassword.txt.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; To implement this functionality,&amp;nbsp;we had written a module code. This module code will keep the name of files as record which will be checked before processing of the next file. If the file has been already processed, it will throw an error at adapter level which in turn can trigger alerts.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The code for the adapter module:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.CreateException;
import com.sap.aii.af.service.auditlog.*;
/**
 * @ejbHome &amp;lt;{com.sap.aii.af.mp.module.ModuleHome}&amp;gt;
 * @ejbLocal &amp;lt;{com.sap.aii.af.mp.module.ModuleLocal}&amp;gt;
 * @ejbLocalHome &amp;lt;{com.sap.aii.af.mp.module.ModuleLocalHome}&amp;gt;
 * @ejbRemote &amp;lt;{com.sap.aii.af.mp.module.ModuleRemote}&amp;gt;
 * @stateless
 * @transactionType Container
 */
import com.sap.aii.af.mp.module.*;
import com.sap.aii.af.ra.ms.api.Message;
import java.util.Hashtable;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;

public class CustomFileBean implements SessionBean, Module {

    private SessionContext myContext;

    public void ejbRemove() {}
    public void ejbActivate() {}
    public void ejbPassivate() {}
    public void ejbCreate() throws CreateException {}
    public void setSessionContext(SessionContext context) {
        myContext = context;
    }

    public ModuleData process(ModuleContext moduleContext, ModuleData inputModuleData) throws ModuleException {
        Object obj = inputModuleData.getPrincipalData();
        Message msg = (Message) obj;
        String fileName = null;

        Hashtable mp = (Hashtable) inputModuleData.getSupplementalData("module.parameters");
        if (mp != null) {
            fileName = (String) mp.get("FileName");
        }

        AuditMessageKey amk = new AuditMessageKey(msg.getMessageId(), AuditDirection.INBOUND);

        String Location = moduleContext.getContextData("Location");
        String FtpUser = moduleContext.getContextData("FtpUser");
        String PassLocation = moduleContext.getContextData("PassLocation");

        // Read existing processed file names into a list
        List&amp;lt;String&amp;gt; wordList = new ArrayList&amp;lt;&amp;gt;();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(Location));
            String word;
            while ((word = br.readLine()) != null) {
                wordList.add(word);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (br != null) br.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        // Compare current file with the list of already-processed files
        try {
            String[] words = wordList.toArray(new String[0]);
            Writer output = new BufferedWriter(new FileWriter(Location));
            int flag = 0;

            for (String w : words) {
                String text = w + "&amp;lt;br /&amp;gt;";
                output.write(text);
                if (w.equals(fileName)) {
                    flag = 1;
                }
            }

            if (flag == 0) {
                // Not processed yet, add to list
                output.write(fileName);
                output.close();
            } else {
                // Already processed
                output.close();
                try {
                    BufferedReader read = new BufferedReader(new FileReader(PassLocation));
                    Audit.addAuditLogEntry(amk, AuditLogStatus.ERROR, "File has been already processed");

                    URL fileLocation = new URL(
                        "ftp://" + FtpUser + ":" + read.readLine() + "@" +
                        msg.getMessageProperty("http://sap.com/xi/XI/System/File", "SourceFTPHost") +
                        msg.getMessageProperty("http://sap.com/xi/XI/System/File", "Directory") +
                        "/" + fileName
                    );
                    DeleteFile(fileLocation);
                } catch (Exception e) {
                    throw new ModuleException(fileName + " should be deleted");
                }
                throw new ModuleException(fileName + " is already processed");
            }
        } catch (Exception e) {
            throw new ModuleException(e);
        }

        return inputModuleData;
    }

    public void DeleteFile(URL fileLocation) throws Exception {
        URLConnection uc = fileLocation.openConnection();
        uc.setDoOutput(true);
        try (OutputStream out = uc.getOutputStream()) {
            out.flush();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Code Explanation:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Package and imports&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package com.sap; 
// Defines the package. Standard naming convention.
import javax.ejb.*; 
import com.sap.aii.af.service.auditlog.*; 
import com.sap.aii.af.mp.module.*; 
import com.sap.aii.af.ra.ms.api.Message;
import java.util.*; 
import java.io.*; 
import java.net.*;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Just the usual Java + SAP imports (Session Beans, audit log, module classes, and so on).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Class declaration&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;public class CustomFileBean implements SessionBean, Module {
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This class is both a Session Bean (for EJB stuff) and implements Module (the SAP adapter module interface).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;EJB lifecycle methods&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;private SessionContext myContext;
public void ejbRemove() {}
public void ejbActivate() {}
public void ejbPassivate() {}
public void ejbCreate() throws CreateException {}
public void setSessionContext(SessionContext context) { 
    myContext = context;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Boilerplate EJB code.&lt;/LI&gt;&lt;LI&gt;ejbCreate() gets called when bean is created, ejbRemove() when it’s removed, etc.&lt;/LI&gt;&lt;LI&gt;setSessionContext() receives a reference to the bean’s context.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Main module code&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;public ModuleData process(ModuleContext moduleContext, ModuleData inputModuleData) throws ModuleException {&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;process&lt;/STRONG&gt; is the key method that gets called when the adapter processes a message.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Extracting the message data&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;Object obj = inputModuleData.getPrincipalData();
Message msg = (Message) obj;
String fileName = null;

Hashtable mp = (Hashtable) inputModuleData.getSupplementalData("module.parameters");
if (mp != null) {
    fileName = (String) mp.get("FileName");
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Retrieves the SAP message (msg).&lt;/LI&gt;&lt;LI&gt;Pulls additional “module parameters” (like the file name from the adapter).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;fileName&lt;/STRONG&gt; is then set from these parameters.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Audit log stuff&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;AuditMessageKey amk = new AuditMessageKey(msg.getMessageId(), AuditDirection.INBOUND);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;This is to log details in SAP’s audit log for this message, tied to msg.getMessageId().&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Reading module context&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;String Location = moduleContext.getContextData("Location");
String FtpUser = moduleContext.getContextData("FtpUser");
String PassLocation = moduleContext.getContextData("PassLocation");&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;These are custom adapter module properties set in the communication channel. For example:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Location might be where name.txt resides (list of already processed files).&lt;/LI&gt;&lt;LI&gt;FtpUser is the username for the FTP server.&lt;/LI&gt;&lt;LI&gt;PassLocation is where the password file (FtpPassword.txt) is.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Read the list of processed files&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;List&amp;lt;String&amp;gt; wordList = new ArrayList&amp;lt;&amp;gt;();
BufferedReader br = null;
try {
    br = new BufferedReader(new FileReader(Location));
    String word;
    while ((word = br.readLine()) != null) {
        wordList.add(word);
    }
} catch (IOException ex) {
    ex.printStackTrace();
} finally {
    try {
        if (br != null) br.close();
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Opens name.txt (the file at Location) to read previously processed filenames.&lt;/LI&gt;&lt;LI&gt;Loads each line into a list (wordList).&lt;/LI&gt;&lt;LI&gt;If any error occurs, it’s caught and printed.&lt;/LI&gt;&lt;LI&gt;In the finally block, br is closed to free resources.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Compare current file name with the stored ones&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;String[] words = wordList.toArray(new String[0]);
Writer output = new BufferedWriter(new FileWriter(Location));
int flag = 0;

for (String w : words) {
    String text = w + "&amp;lt;br /&amp;gt;";
    output.write(text);
    if (w.equals(fileName)) {
        flag = 1;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Converts the list to an array for easy iteration.&lt;/LI&gt;&lt;LI&gt;Opens the same file (name.txt) again but in write mode (new FileWriter(Location)), so it can re-write the old names plus possibly the new one.&lt;/LI&gt;&lt;LI&gt;flag indicates if the file was previously processed.&lt;/LI&gt;&lt;LI&gt;Loop through existing file names, writing them back to name.txt. If a line matches our fileName, mark flag=1.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;If not processed&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;if (flag == 0) {
    // Not processed yet, add to list
    output.write(fileName);
    output.close();
} else {&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If flag == 0, it means no match found, so we append the new file name.&lt;/LI&gt;&lt;LI&gt;Then close the output.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;If already processed&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;// Already processed
output.close();
try {
    BufferedReader read = new BufferedReader(new FileReader(PassLocation));
    Audit.addAuditLogEntry(amk, AuditLogStatus.ERROR, "File has been already processed");

    URL fileLocation = new URL(
        "ftp://" + FtpUser + ":" + read.readLine() + "@" +
        msg.getMessageProperty("http://sap.com/xi/XI/System/File", "SourceFTPHost") +
        msg.getMessageProperty("http://sap.com/xi/XI/System/File", "Directory") +
        "/" + fileName
    );
    DeleteFile(fileLocation);
} catch (Exception e) {
    throw new ModuleException(fileName + " should be deleted");
}
throw new ModuleException(fileName + " is already processed");&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If flag == 1, the file &lt;STRONG&gt;is&lt;/STRONG&gt; already processed.&lt;/LI&gt;&lt;LI&gt;Log an ERROR entry in SAP’s audit.&lt;/LI&gt;&lt;LI&gt;Read the FTP password from PassLocation (FtpPassword.txt).&lt;/LI&gt;&lt;LI&gt;Construct the URL to point exactly to that FTP file.&lt;/LI&gt;&lt;LI&gt;Call DeleteFile(...) to make the file empty on the FTP (so the adapter won't process it).&lt;/LI&gt;&lt;LI&gt;Throw a ModuleException so the module fails right here (the integration engine never processes it further).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;DeleteFile method&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;public void DeleteFile(URL fileLocation) throws Exception {
    URLConnection uc = fileLocation.openConnection();
    uc.setDoOutput(true);
    try (OutputStream out = uc.getOutputStream()) {
        out.flush();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Opens a connection to the file’s FTP URL.&lt;/LI&gt;&lt;LI&gt;setDoOutput(true) lets us write to it.&lt;/LI&gt;&lt;LI&gt;By opening and flushing the output stream, we effectively overwrite the file with nothing (empty file).&lt;/LI&gt;&lt;LI&gt;Because we have the channel property “do not process empty file” set, the adapter just deletes it.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Source Explanation: &lt;STRONG&gt;ChatGPT&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Please refer to original post to see the deployment screenshots&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;A href="https://community.sap.com/t5/additional-blogs-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location/ba-p/12863432" target="_self"&gt;https://community.sap.com/t5/additional-blogs-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location/ba-p/12863432&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/adapter-module-to-stop-processing-of-duplicate-file-ftp-location-gt-code/ba-p/13973080"/>
    <published>2024-12-30T22:20:32.797000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/xml-to-csv-conversion-in-integration/ba-p/13978887</id>
    <title>XML to CSV conversion in integration</title>
    <updated>2025-01-08T05:46:53.985000+01:00</updated>
    <author>
      <name>RaghuVamseedhar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191580</uri>
    </author>
    <content>&lt;P&gt;In SAP Process Orchestration, 'content conversion' processes XML level 3 elements into CSV format. Note, the fieldNames do not influence the output CSV.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209025i0AD5B10E4ADF01CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="1.png" alt="1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Conversely, in SAP Cloud Integration, the 'CSV to XML converter' generates CSV using the element names from the first record of the input XML. If a new element appears in subsequent records, it will be appended at the end of the line.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209028iABE5DC8420A65DA1/image-size/large?v=v2&amp;amp;px=999" role="button" title="2.png" alt="2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This difference in behavior can create challenges in migration projects. For PO interfaces with optional elements, fewer CSV columns are produced, whereas CPI interfaces will append optional fields at the end of the line. To manage these issues, you can use additional message mapping with a one-to-one mapWithDefault, although this will create columns even for optional elements. Another option is to use a Groovy script to create consistent elements (e.g., field1, field2, field3, and so on). Below is an example Groovy script:&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.gateway.ip.core.customdev.util.Message
import groovy.xml.MarkupBuilder

def Message processData(Message message) {
    def stringWriter = new StringWriter()
    def xmlBuilder = new MarkupBuilder(stringWriter)
    def inputXml = new XmlSlurper().parseText(message.getBody(String))

    xmlBuilder.Root {
        inputXml.Record.each { record -&amp;gt;
            Record {
                record.children().eachWithIndex { element, index -&amp;gt;
                    "field${index + 1}"(element.text())
                }
            }
        }
    }

    message.setBody(stringWriter.toString())
    return message
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="3.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/209030iC6756A56268944F0/image-size/large?v=v2&amp;amp;px=999" role="button" title="3.png" alt="3.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You can use a Content Modifier after the 'XML to CSV Converter' if you want to prefix the header with actual field names instead of generic names like field1, field2, field3.&lt;/P&gt;&lt;P&gt;SAP Help Links:-&lt;/P&gt;&lt;P&gt;SAP PO - &lt;A href="https://help.sap.com/doc/saphelp_snc70/7.0/en-US/2c/181077dd7d6b4ea6a8029b20bf7e55/frameset.htm" target="_self" rel="noopener noreferrer"&gt;Converting File Content in a Sender Adapter&lt;/A&gt;&lt;/P&gt;&lt;P&gt;SAP Cloud Integration - &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/configure-xml-to-csv-converter" target="_self" rel="noopener noreferrer"&gt;Configure XML to CSV Converter&lt;/A&gt;&amp;nbsp;- "&lt;EM&gt;When optional fields exists in the XML, the ordering is maintained in the order when a tag is encountered.&lt;/EM&gt;"&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/xml-to-csv-conversion-in-integration/ba-p/13978887"/>
    <published>2025-01-08T05:46:53.985000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/enterprise-service-enhancement/ba-p/13984180</id>
    <title>Enterprise service Enhancement</title>
    <updated>2025-01-13T13:09:14.547000+01:00</updated>
    <author>
      <name>lm_allen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/536714</uri>
    </author>
    <content>&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Background&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;There are a few blogs already available showing how to enhance an enterprise service, as well as an SAP guide (SAP Note&amp;nbsp;2474420 - Enterprise Services Enhancement Guide).&amp;nbsp; These resources though do not cover usage of the data type after the enhancement.&amp;nbsp; Hopefully the below blog will help fill in the gap.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Step By Step Guide&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;In this example wanted to enhance the below Service Interface&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_19-1736769521279.png" style="width: 509px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211328i46FB32C4290DA395/image-dimensions/509x239?v=v2" width="509" height="239" role="button" title="lm_allen_19-1736769521279.png" alt="lm_allen_19-1736769521279.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Looking at the message type we can get the data type used&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_20-1736769521280.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211330i8BA2FD9083F4BDD5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_20-1736769521280.png" alt="lm_allen_20-1736769521280.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;We can enhance this data type to add fields to the main message, equally can enhance sub-nodes if required.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;In SLD &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;created product&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_21-1736769521280.png" style="width: 479px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211329iAA05DBD67EAF9838/image-dimensions/479x144?v=v2" width="479" height="144" role="button" title="lm_allen_21-1736769521280.png" alt="lm_allen_21-1736769521280.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Create Software component linked to this product&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_22-1736769521281.png" style="width: 526px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211331i105FB9C81BF73D33/image-dimensions/526x116?v=v2" width="526" height="116" role="button" title="lm_allen_22-1736769521281.png" alt="lm_allen_22-1736769521281.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Add Installation Time dependency to component wish to enhance&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_23-1736769521281.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211332iC87ADF6E6492B5B6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_23-1736769521281.png" alt="lm_allen_23-1736769521281.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;In ESR&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Import software component&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_24-1736769521281.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211333iEBD815E171B768D2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_24-1736769521281.png" alt="lm_allen_24-1736769521281.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once imported can see the dependency set in SLD under the 'Basis Objects'&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_25-1736769521282.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211334iA4AEB6A4AFD46E92/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_25-1736769521282.png" alt="lm_allen_25-1736769521282.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Create namespace&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_26-1736769521282.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211335i2076599F63106444/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_26-1736769521282.png" alt="lm_allen_26-1736769521282.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Add Data Enhancement Type&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_27-1736769521282.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211336iF7CAB6F205FA0554/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_27-1736769521282.png" alt="lm_allen_27-1736769521282.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Nb: worth naming DTE based on data type to be enhanced (ie DTE_TransportationDocumentRequestMessage in this case would be a better name than one used in this example, useful if enhancing multiple nodes)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Set the Data Type you with to enhance (selected from the underlying dependency).&amp;nbsp; This can be a data type at any node level&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_0-1736770691504.png" style="width: 499px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211362i981A6C3D3D12BF03/image-dimensions/499x125?v=v2" width="499" height="125" role="button" title="lm_allen_0-1736770691504.png" alt="lm_allen_0-1736770691504.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Add fields that you want in the enhancement&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_29-1736769521283.png" style="width: 500px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211339i29FD6D9358412436/image-dimensions/500x130?v=v2" width="500" height="130" role="button" title="lm_allen_29-1736769521283.png" alt="lm_allen_29-1736769521283.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Save and activate&lt;/P&gt;&lt;P&gt;If we now view the message type we are enhancing can see new field added.&amp;nbsp; Note this only shows under the S4CORE 107 Dependency object in our new Software Component and not in the standard SAP Software component&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_30-1736769521283.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211338i4AF02965AFD5D8FB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_30-1736769521283.png" alt="lm_allen_30-1736769521283.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_31-1736769521284.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211342i310D9436AF592A57/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_31-1736769521284.png" alt="lm_allen_31-1736769521284.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In S4 Hana ABAP code in a BADI is used to populate these new fields.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;When creating an Iflow in NWDS:&lt;/P&gt;&lt;P&gt;Use the original SAP standard service interface&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_32-1736769521284.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211341i27931F894AE2AC76/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_32-1736769521284.png" alt="lm_allen_32-1736769521284.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_33-1736769521284.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211343i4283FE0CB1CC7CDD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_33-1736769521284.png" alt="lm_allen_33-1736769521284.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_34-1736769521284.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211344iD7273BAEA850D304/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_34-1736769521284.png" alt="lm_allen_34-1736769521284.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Although this is linked to the original unenhanced Message type it is setup as XI compatible, this means that it will accept any message structure (root node remains unchanged so would still work even if not XI compatible)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_35-1736769521284.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211345i603042E132F4F8A7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_35-1736769521284.png" alt="lm_allen_35-1736769521284.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;For operation mapping - again use the original service interface&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_36-1736769521285.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211346iA3B9F5C20B558BBF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_36-1736769521285.png" alt="lm_allen_36-1736769521285.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;For the message mapping however you need to use the enhancement message type under the newly created software component since this will show the newly added fields.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lm_allen_37-1736769521285.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211348i53FA33ABF020F2B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="lm_allen_37-1736769521285.png" alt="lm_allen_37-1736769521285.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/enterprise-service-enhancement/ba-p/13984180"/>
    <published>2025-01-13T13:09:14.547000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-configure-consume-odata-service-in-sap-cpi/ba-p/13998415</id>
    <title>How to configure/consume OData Service in SAP CPI</title>
    <updated>2025-01-28T10:29:40.959000+01:00</updated>
    <author>
      <name>SaiPrudhviRajTaduva</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1501949</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;This blog will teach you how to consume OData service in an i-Flow also you can learn about OData/HTTP/SFTP adapter configuration &amp;amp; the utilization of XML to CSV converter in our i-Flow.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1080438722"&gt;Introduction&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;You can develop OData APIs that expose existing data sources, such as SOAP, as OData endpoints. These OData APIs can be consumed by SAP Fiori apps,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP BTP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Mobile Services, or any other custom app, to implement user-centric scenarios -&lt;/SPAN&gt;SAP help portal&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/developing-odata-api-project?locale=en-US" target="_self" rel="noopener noreferrer"&gt;Developing an OData API Project&amp;nbsp;&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;OData Operations:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;OData is a way of performing database-style&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;create, read, update, and delete&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;operations on resources through HTTP verbs - &lt;A href="https://learning.sap.com/learning-journeys/building-odata-services-with-sap-gateway/performing-odata-operations" target="_self" rel="noopener noreferrer"&gt;SAP Learning&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;SPAN class=""&gt;&lt;BR /&gt;&lt;STRONG&gt;Let's start creating simple&amp;nbsp;OData service&lt;BR /&gt;&lt;/STRONG&gt;Here in this i-flow we are going to send request via HTTPS adapter using postman that request will be sent to OData service and the response that we get from OData service will be stored as a .csv file using SFTP adapter&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;&amp;nbsp;Step 1:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;Configure HTTPS and SFTP adapters as per my previous &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/how-to-configure-pollenrich-in-cloud-integration/ba-p/13972855" target="_self"&gt;blog&amp;nbsp;&lt;/A&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_2-1737991427114.png" style="width: 707px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217818i7060941707968C39/image-dimensions/707x212?v=v2" width="707" height="212" role="button" title="SaiPrudhviRajTaduva_2-1737991427114.png" alt="SaiPrudhviRajTaduva_2-1737991427114.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;Step 2:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;Add request and reply pallet function in between Start and End message functions&amp;nbsp;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_3-1737991719132.png" style="width: 712px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217823i5ABB299FE77D58E2/image-dimensions/712x203?v=v2" width="712" height="203" role="button" title="SaiPrudhviRajTaduva_3-1737991719132.png" alt="SaiPrudhviRajTaduva_3-1737991719132.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;STRONG&gt;Step 3:&lt;/STRONG&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;BR /&gt;Take one more receiver from the Participant name it as ODATASERVICE and connect it to Request Reply using OData adapter with OData v2 protocol.&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_4-1737992348652.png" style="width: 720px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217836i99866D137C255093/image-dimensions/720x269?v=v2" width="720" height="269" role="button" title="SaiPrudhviRajTaduva_4-1737992348652.png" alt="SaiPrudhviRajTaduva_4-1737992348652.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Step 4:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In this Flow we are going use below free OData service&amp;nbsp;&lt;BR /&gt;&lt;A href="https://services.odata.org/v3/northwind/northwind.svc" target="_blank" rel="nofollow noopener noreferrer"&gt;https://services.odata.org/v3/northwind/northwind.svc&lt;/A&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_5-1737992907713.png" style="width: 716px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217845iA5CEFE40AC28EDEB/image-dimensions/716x256?v=v2" width="716" height="256" role="button" title="SaiPrudhviRajTaduva_5-1737992907713.png" alt="SaiPrudhviRajTaduva_5-1737992907713.png" /&gt;&lt;/span&gt;&lt;P&gt;&lt;STRONG&gt;Step 5:&lt;BR /&gt;&lt;/STRONG&gt;In processing tab choose Resource path click on Select &amp;amp; click on step 2 and select the entity as per your requirement in this blog I am selecting Employees as shown below&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;-select the Operation as Query as we are fetching the Employee Details.&lt;/SPAN&gt;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_6-1737993552451.png" style="width: 679px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217846i54C38D35FCA74B23/image-dimensions/679x302?v=v2" width="679" height="302" role="button" title="SaiPrudhviRajTaduva_6-1737993552451.png" alt="SaiPrudhviRajTaduva_6-1737993552451.png" /&gt;&lt;/span&gt;&lt;P&gt;After selecting the Entity select all the fields as shown below an d click on finish so that it will automatically generate a Query&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_7-1737993665662.png" style="width: 686px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217847i910A1AAC7FC24E74/image-dimensions/686x294?v=v2" width="686" height="294" role="button" title="SaiPrudhviRajTaduva_7-1737993665662.png" alt="SaiPrudhviRajTaduva_7-1737993665662.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_8-1737993885724.png" style="width: 728px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217851i93048358F66583C8/image-dimensions/728x162?v=v2" width="728" height="162" role="button" title="SaiPrudhviRajTaduva_8-1737993885724.png" alt="SaiPrudhviRajTaduva_8-1737993885724.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6:&lt;BR /&gt;&lt;/STRONG&gt;Now I am adding XML to CSV converter to convert the response data that we get from OData service and to send .csv file to the target system&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_9-1737994712412.png" style="width: 652px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217865iB3F8885113FBBEBC/image-dimensions/652x282?v=v2" width="652" height="282" role="button" title="SaiPrudhviRajTaduva_9-1737994712412.png" alt="SaiPrudhviRajTaduva_9-1737994712412.png" /&gt;&lt;/span&gt;&lt;P&gt;Finally save and deploy the i-flow and trigger the data from Postman to check the result&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_11-1737995085443.png" style="width: 614px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/217878i0AB38701AF8BBF23/image-dimensions/614x382?v=v2" width="614" height="382" role="button" title="SaiPrudhviRajTaduva_11-1737995085443.png" alt="SaiPrudhviRajTaduva_11-1737995085443.png" /&gt;&lt;/span&gt;&lt;BR /&gt;If you look at the above screenshot we have successfully received response of Employees data from OData service and converted to csv format.&lt;BR /&gt;&lt;BR /&gt;&lt;SPAN&gt;Please feel free to post a query in the comments section if you have any inquiries.&lt;BR /&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;STRONG&gt;Thank you and Happy Integrating&lt;/STRONG&gt;&lt;BR /&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-configure-consume-odata-service-in-sap-cpi/ba-p/13998415"/>
    <published>2025-01-28T10:29:40.959000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-integrated-runtimes-and-supporting-landscape/ba-p/14000234</id>
    <title>New Pipeline Concept features: integrated runtimes and supporting landscape stages</title>
    <updated>2025-01-29T16:27:57.266000+01:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;I like to let you know that a new version 1.0.9 of the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-new-pipeline-concept-in-cloud-integration/ba-p/13639651" target="_blank"&gt;Pipeline Concept&lt;/A&gt;&amp;nbsp;has been recently shipped with a couple of new enhancements that help you to improve the overall performance, operation and lifecycle when using the Pipelines package for Cloud Integration. At a glance, the following new features and fixes have been introduced:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Supporting different tenant stages, e.g., DEV, QA, PRD&lt;/LI&gt;&lt;LI&gt;New integrated messaging runtime "Pipeline Generic Step02 - Integrated Messaging Runtime Async" combining inbound conversion and receiver/interface determination in one pipeline step&lt;/LI&gt;&lt;LI&gt;New integrated messaging runtime "Pipeline Generic Step02 - Integrated Messaging Runtime Sync" for handling synchronous Content-Based-Routing scenarios&lt;/LI&gt;&lt;LI&gt;New template "Pipeline Template Step01 - Inbound Processing Synchronous" for scenario-specific synchronous inbound processing&lt;/LI&gt;&lt;LI&gt;New template "Pipeline Template Step07 - Outbound Processing Synchronous" for scenario-specific synchronous outbound processing&lt;/LI&gt;&lt;LI&gt;Generic inbound processing for XI supports both asynchronous and synchronous messaging&lt;/LI&gt;&lt;LI&gt;Failed test messages end with escalation instead of completed&lt;/LI&gt;&lt;LI&gt;Added custom error handling for generic XI and IDoc inbound flows&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The package can be accessed from the&amp;nbsp;&lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/integrationflow" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;. If you have already copied the package to your workspace in your SAP Integration Suite tenant, you can simply run the update of the package to be able to use the latest features.&lt;/P&gt;&lt;P&gt;Let me briefly describe the major new features.&lt;/P&gt;&lt;H2 id="toc-hId-1701728166"&gt;Integrated messaging runtime - Async&lt;/H2&gt;&lt;P&gt;In the previous package version 1.0.8, we shipped the option to combine receiver and interface determination in one single XSLT mapping for an improved runtime behavior. Now, with the new version, we introduced a new pipeline step called&amp;nbsp;&lt;EM&gt;Pipeline Generic Step02 - Integrated Messaging Runtime Async&lt;/EM&gt;&amp;nbsp;which combines the inbound conversion as well as the receiver and interface determination in one single pipeline step. This helps to further improve the runtime behavior as well as monitoring and operation.&lt;/P&gt;&lt;P&gt;When using this new integrated pipeline step, you are able to skip most of the other pipeline steps. So, you can reduce the number of JMS queues required to process your messages from 4 to 2 or 8 to 4 when counting in the dead letter queues as well. This integrated messaging runtime only works with the combined receiver and interface determination XSLT, so we can reduce the number of XSLT to a minimum of 1. If you like to use this integrated pipeline instead of the fully decoupled pipeline, you just need to deploy the new generic flow and configure the JMS queue of the scenario-specific inbound processing flow accordingly, by default the name of the inbound processing queue of the&amp;nbsp;integrated pipeline is PIPX01 instead of PIPQ01.&lt;/P&gt;&lt;P&gt;From performance measurements that we did, we know that reading and writing from and to the JMS queues incl. zipping and unzipping the messages as well as fetching the XSLT mappings from the Partner Directory incl. decoding the XSLT require the most CPU consumption within the overall pipeline processing. So, using the integrated messaging runtime helps to reduce the overall CPU consumption compared to the fully decoupled pipeline with 4 generic integration flows instead of 2.&lt;/P&gt;&lt;P&gt;Furthermore, since we run through less number of pipeline steps, the number of message processing logs is also reduced.&lt;/P&gt;&lt;P&gt;We still support the complete pipeline which is shown here:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="FullyCoupledPipeline.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218774i5B2153A17304E772/image-size/large?v=v2&amp;amp;px=999" role="button" title="FullyCoupledPipeline.png" alt="FullyCoupledPipeline.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Recommendation however is to use the integrated pipeline. This picture nicely illustrates which steps and queues can be saved.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="IntegratedPipelineAsync.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218776i5459761E2F02C0F8/image-size/large?v=v2&amp;amp;px=999" role="button" title="IntegratedPipelineAsync.png" alt="IntegratedPipelineAsync.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;For more details about the integrated messaging runtime, see the chapter &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/integrated-messaging-runtime-asynchronous" target="_blank" rel="noopener noreferrer"&gt;Integrated Messaging Runtime (Asynchronous)&lt;/A&gt; in the standard documentation.&lt;/P&gt;&lt;H2 id="toc-hId-1505214661"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-1308701156"&gt;Integrated messaging runtime - Sync&lt;/H2&gt;&lt;P&gt;With the new version, we now also support a synchronous pipeline. The new pipeline called&amp;nbsp;&lt;EM&gt;Pipeline Generic Step02 - Integrated Messaging Runtime Sync&lt;/EM&gt;&amp;nbsp;combines the receiver and interface determination in one single pipeline step and is suited&amp;nbsp;for handling synchronous Content-Based-Router scenarios. Other than the async pipelines, it doesn't require any JMS queue, instead the pipeline steps are connected using the ProcessDirect adapter which is synchronous by nature.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="IntegratedPipelineSync.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218785i601DBFBB1F3A3FF3/image-size/large?v=v2&amp;amp;px=999" role="button" title="IntegratedPipelineSync.png" alt="IntegratedPipelineSync.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;For more details about the synchronous integrated messaging runtime, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/integrated-messaging-runtime-synchronous" target="_blank" rel="noopener noreferrer"&gt;Integrated Messaging Runtime (Synchronous)&lt;/A&gt;.&lt;/P&gt;&lt;H2 id="toc-hId-1112187651"&gt;Supporting landscape stages&lt;/H2&gt;&lt;P&gt;On Cloud Integration, you do not necessarily have to have different business system names depending on the landscape stage such as DEV, QA, PRD. For XI and IDoc however you usually do. In SAP Process Orchestration, you maintain the business systems as well as transport groups in its SLD, and when transporting the objects between the stages, the business names are automatically converted. This is not supported in Cloud Integration, so we came up with the following approach to support different stages without the need converting the system names when transporting across the stages.&lt;/P&gt;&lt;P&gt;Within the pipeline, we actually use alias names for the business systems. During runtime, the actual sender business system name is mapped to a sender alias which is used within the pipeline processing, once the receiver alias has been determined, it is then mapped to the actual receiver business name. This allows you to run your scenarios on the different landscape stages without changing the configuration in the Partner Directory such as the XSLT for determining the receivers. So, all partner and scenario definitions in the Partner Directory are the same on all stages based on the alias names. As said, there is no need to do any changes in the XSLT, so this approach is less error prone.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="StagesScenario.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218788i460BAE2133D79A73/image-size/large?v=v2&amp;amp;px=999" role="button" title="StagesScenario.png" alt="StagesScenario.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To setup the support for landscape stages, you need to create the business system aliases as partner IDs in the Partner Directory where for each stage you maintain the mapping between alias name and actual names.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="StagesSystem.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218789iBDC4AB6FE9D6E506/image-size/large?v=v2&amp;amp;px=999" role="button" title="StagesSystem.png" alt="StagesSystem.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Furthermore, to automatically identify the landscape stage of your tenant during runtime, the tenant names are used which are mapped to the corresponding stage IDs. This mapping is stored in the Partner Directory using partner ID &lt;EM&gt;SAP_Integration_Suite_Landscape&lt;/EM&gt;. To do so, you can either use the&amp;nbsp;&lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/partner-directory" target="_blank" rel="noopener noreferrer"&gt;Partner Directory API&lt;/A&gt;&amp;nbsp;or the new&amp;nbsp;&lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/managing-partner-directory-entries" target="_blank" rel="noopener noreferrer"&gt;Partner Directory user interface&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="StagesTenants.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/218791iC071CA84113C5DAA/image-size/large?v=v2&amp;amp;px=999" role="button" title="StagesTenants.png" alt="StagesTenants.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;For more details, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/landscape-stages" target="_blank" rel="noopener noreferrer"&gt;Landscape Stages&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-915674146"&gt;Single point of entry for any XI inbound scenarios&lt;/H2&gt;&lt;P&gt;With the latest enhancements of the Cloud Integration capability of SAP Integration Suite, we support the so called &lt;EM&gt;handled by integration flow&lt;/EM&gt; option for both the XI sender and the XI receiver adapter. In the generic XI inbound processing flow we have changed the XI sender adapter using this very option. With this, we can reduce the number of JMS queues by one. Since we write the messages into an inbound JMS queue anyway, we do not need to use the XI sender specific JMS queue. Furthermore, this option allows us to receive both async and sync calls via the same inbound adapter. So, this reduces the configuration effort in your sender backend, there is no need any more to maintain the IS_URL configuration parameter, all scenarios can be pointed to the very same end point on Cloud Integration.&lt;/P&gt;&lt;P&gt;For more details, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/special-cases#xi-sender-adapter" target="_blank" rel="noopener noreferrer"&gt;XI Sender Adapter&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;If you like to try out the pipeline concept in general and the new features in particular, check out this &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios" target="_blank" rel="noopener nofollow noreferrer"&gt;github repository&lt;/A&gt; where I describe how to setup sample scenarios using the pipeline concept. Here, we have added the following new scenarios and scenario variants leveraging the new features:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario2D" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 2D&lt;/A&gt; uses the new asynchronous integrated messaging runtime for a recipient list and interface split scenario.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario8" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 8&lt;/A&gt; handles a synchronous Point-to-Point with XI inbound.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/scenario9" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 9&lt;/A&gt; uses the new synchronous integrated messaging runtime for a synchronous content-based-router pattern.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;As usually, in case of feedback, feel free to reach out to me.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-integrated-runtimes-and-supporting-landscape/ba-p/14000234"/>
    <published>2025-01-29T16:27:57.266000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-shift-to-open-standards-a-strategic-move-or-happy-accident/ba-p/14004376</id>
    <title>SAP’s Shift to Open Standards – A Strategic Move or Happy Accident?</title>
    <updated>2025-02-04T18:08:09.112000+01:00</updated>
    <author>
      <name>arunmaarirajha</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/124788</uri>
    </author>
    <content>&lt;H4 id="toc-hId-1960013855"&gt;Introduction&lt;/H4&gt;&lt;P&gt;11 years ago, when I began my career as an SAP Integration consultant, often times when I google for work related research, I’d see results from SAP SCN and SAP help pages only. Today, what has changed is that, I see results on the same question/theme, being addressed by blogs/sites that have nothing to do with the SAP tool/platform on which, I am working currently. But the answer/content that I read there somehow turns out to be highly relevant to the issue/topic I am researching currently, on the SAP tool/platform that I am working with.&lt;/P&gt;&lt;P&gt;Upon reflection, as a broader trend across various SAP products and platforms, there seem to be a strong adoption of industry standard technologies, protocols &amp;amp; frameworks, which in many cases are open-source as well. While SAP’s proprietary standards have influenced others in the ERP industry for a long time, this remarkable departure and SAP gravitating towards standards in many aspects, is something that prompted me to connect the dots and to share with the community. In this post, I’d like to list a few of the areas, where I have noticed this trend:&lt;/P&gt;&lt;H4 id="toc-hId-1763500350"&gt;1) Integrations:&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://learning.sap.com/learning-journeys/managing-clean-core-for-sap-s-4hana-cloud/exploring-how-to-make-landscapes-core-compliant-1" target="_blank" rel="noopener noreferrer"&gt;REST, ODATA APIs encouraged instead of bapi/rfc, proxy, Idoc&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Edge Integration Cell is based on Kubernetes containers, which is industry standard to package &amp;amp; distribute workloads, a necessary evolution from the SOA style platform that SAP PI/PO used to be.&lt;/LI&gt;&lt;LI&gt;Well documented APIs in Business Accelerator Hub than in &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/automate-it-an-overview-on-sap-pi-po-apis/ba-p/13432306" target="_blank"&gt;PI/PO days&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;SAP Cloud Integration being based on Apache camel open-source framework. By extension, this facilitates direct support for camel expression language as well as various &lt;A href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/" target="_blank" rel="noopener nofollow noreferrer"&gt;enterprise integration patterns&lt;/A&gt; – like splitter, router, gather, join in the Iflow design.&lt;/LI&gt;&lt;LI&gt;Integration advisor’s crowdsourced ML based mapping recommendation, supports conversion of canonical data model to standard EDI formats like ANSI X12, EDIFACT and vice-versa.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1566986845"&gt;2) Platform choices:&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Choice of hyperscaler platforms – Azure, AWS, etc. allowed to be exercised by the customer. This makes SAP an ERP Software selling company.&lt;/LI&gt;&lt;LI&gt;Runtime environments such as Cloud Foundry &amp;amp; Kyma are open-source. (&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/farewell-neo-sap-btp-multi-cloud-environment-the-deployment-environment-of/ba-p/13560080" target="_blank"&gt;Further reading&lt;/A&gt;)&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1370473340"&gt;3) Application Development:&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Support for Java, JavaScript (node js), in addition to ABAP as tech stacks. This is a big step in utilizing coding skills available in the market.&lt;/LI&gt;&lt;LI&gt;BAS and Build Code being Git friendly.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1173959835"&gt;4) Broader BTP services:&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Application logging service in BTP uses Kibana (an open-source project)&lt;/LI&gt;&lt;LI&gt;KServe, an open-source Model Inference Platform on Kubernetes, being used behind the scenes by AI Core.&lt;/LI&gt;&lt;LI&gt;Redis &amp;amp; Postgres hyperscaler offering in addition to the proprietary HANA DB.&lt;/LI&gt;&lt;LI&gt;Evolution of UX/UI from proprietary SAP GUI to Fiori / UI5 based front-end. OpenUI5 is a JavaScript UI Framework released by SAP under the Apache 2.0 license.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-977446330"&gt;Conclusion&lt;/H4&gt;&lt;P&gt;SAP’s growing adoption of open-source technologies and industry standards doesn’t just seem to be accidental, but based on a conscious vision, as reflected in the &lt;A href="https://www.sap.com/documents/2024/05/ec7cc67d-bf7e-0010-bca6-c68f7e60039b.html" target="_blank" rel="noopener noreferrer"&gt;SAP Open-source Manifesto&lt;/A&gt;. This shift benefits both customers and developers by fostering interoperability, flexibility, and innovation in the SAP ecosystem.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Disclaimer: My observations are based on my exposure to SAP BTP &amp;amp; ERP only and this trend might not apply or apply differently across SAP’s other product lines.&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-shift-to-open-standards-a-strategic-move-or-happy-accident/ba-p/14004376"/>
    <published>2025-02-04T18:08:09.112000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-and-expose-odata-apis/ba-p/14025789</id>
    <title>how to create and expose OData APIs</title>
    <updated>2025-02-26T17:10:05.673000+01:00</updated>
    <author>
      <name>SaiPrudhviRajTaduva</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1501949</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;The capabilities of an OData API allow you to support new integration use cases with SAP Cloud Integration where you expose an OData API which can be consumed by SAP Fiori applications, SAP Business Technology Platform, mobiles services or any other custom applications to fulfil user-centric scenarios&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;As an example, we will create an OData API&amp;nbsp;which delivers product data.&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Note:&amp;nbsp;Go to POSTMAN, save meta data of ODATA service in .edmx format&lt;BR /&gt;URl:&amp;nbsp;&lt;SPAN&gt;&lt;A href="http://services.odata.org/V2/Northwind/Northwind.svc/$metadata" target="_blank" rel="nofollow noopener noreferrer"&gt;http://services.odata.org/V2/Northwind/Northwind.svc/$metadata&lt;/A&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_0-1740415090818.png" style="width: 662px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229783i01741137711449C6/image-dimensions/662x450?v=v2" width="662" height="450" role="button" title="SaiPrudhviRajTaduva_0-1740415090818.png" alt="SaiPrudhviRajTaduva_0-1740415090818.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step1:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Open Cloud Integration via the tab “Design, Develop and Operate Integration Scenarios” in your SAP Integration Suite Landing page.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_0-1740400555151.png" style="width: 691px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229587iF70BC9FFDCD7CFA1/image-dimensions/691x221?v=v2" width="691" height="221" role="button" title="SaiPrudhviRajTaduva_0-1740400555151.png" alt="SaiPrudhviRajTaduva_0-1740400555151.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Click on create and enter the details and click on save&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_2-1740401083296.png" style="width: 702px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229592i7CE87ABEFAD8DA29/image-dimensions/702x218?v=v2" width="702" height="218" role="button" title="SaiPrudhviRajTaduva_2-1740401083296.png" alt="SaiPrudhviRajTaduva_2-1740401083296.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_3-1740404698275.png" style="width: 679px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229675i242C4302200FB222/image-dimensions/679x238?v=v2" width="679" height="238" role="button" title="SaiPrudhviRajTaduva_3-1740404698275.png" alt="SaiPrudhviRajTaduva_3-1740404698275.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3:Navigate to Artifacts tab&amp;nbsp;Click on Add -&amp;gt;API-&amp;gt;select runtime profile as cloud integration and click on next&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_4-1740404858974.png" style="width: 687px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229678iF5E39A4CC356F8B0/image-dimensions/687x207?v=v2" width="687" height="207" role="button" title="SaiPrudhviRajTaduva_4-1740404858974.png" alt="SaiPrudhviRajTaduva_4-1740404858974.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_5-1740404986836.png" style="width: 673px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229680iBF216D2F969BC676/image-dimensions/673x482?v=v2" width="673" height="482" role="button" title="SaiPrudhviRajTaduva_5-1740404986836.png" alt="SaiPrudhviRajTaduva_5-1740404986836.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Step 4:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Select the API type AS OData API and click on next then click on the method create using wizard&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_7-1740405145217.png" style="width: 689px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229684i3326B0A95D5EAC65/image-dimensions/689x493?v=v2" width="689" height="493" role="button" title="SaiPrudhviRajTaduva_7-1740405145217.png" alt="SaiPrudhviRajTaduva_7-1740405145217.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_8-1740405278191.png" style="width: 677px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229685iD0E6B9E16D65ACF8/image-dimensions/677x491?v=v2" width="677" height="491" role="button" title="SaiPrudhviRajTaduva_8-1740405278191.png" alt="SaiPrudhviRajTaduva_8-1740405278191.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5:&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Provide the API details as shown in the below and click on create&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_9-1740405385944.png" style="width: 674px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229686i8446A24E72F08054/image-dimensions/674x488?v=v2" width="674" height="488" role="button" title="SaiPrudhviRajTaduva_9-1740405385944.png" alt="SaiPrudhviRajTaduva_9-1740405385944.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6:&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;After performing above step you will be able to see below screen then click on edit&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_10-1740405526981.png" style="width: 687px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229687iD3D37E49993C58A2/image-dimensions/687x388?v=v2" width="687" height="388" role="button" title="SaiPrudhviRajTaduva_10-1740405526981.png" alt="SaiPrudhviRajTaduva_10-1740405526981.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Click on Import Model wizards as shown in below&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_11-1740405582297.png" style="width: 679px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229688iCE988EB28D75FDBB/image-dimensions/679x361?v=v2" width="679" height="361" role="button" title="SaiPrudhviRajTaduva_11-1740405582297.png" alt="SaiPrudhviRajTaduva_11-1740405582297.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7:&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Select the&amp;nbsp; Data Source Type as ODATA and browse the .edmx file which is saved in your local desktop then click on step 2 and select the required entity type in our case we are selecting Product then click on step3 and select finish&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_13-1740405815286.png" style="width: 695px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229691i792F858C229176EF/image-dimensions/695x278?v=v2" width="695" height="278" role="button" title="SaiPrudhviRajTaduva_13-1740405815286.png" alt="SaiPrudhviRajTaduva_13-1740405815286.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_14-1740405986584.png" style="width: 678px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229692i77A1FEEA8D0DB206/image-dimensions/678x315?v=v2" width="678" height="315" role="button" title="SaiPrudhviRajTaduva_14-1740405986584.png" alt="SaiPrudhviRajTaduva_14-1740405986584.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_15-1740406073391.png" style="width: 674px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229694iB217E2B4BA0678BD/image-dimensions/674x316?v=v2" width="674" height="316" role="button" title="SaiPrudhviRajTaduva_15-1740406073391.png" alt="SaiPrudhviRajTaduva_15-1740406073391.png" /&gt;&lt;/span&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8&lt;/STRONG&gt;:&lt;BR /&gt;&lt;STRONG&gt;Click on bind then provide Entity sets and End Point as shown in the below, here in our case I have used free ODATA service " &lt;A href="https://services.odata.org/V2/Northwind/Northwind.svc/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://services.odata.org/V2/Northwind/Northwind.svc/&lt;/A&gt; " then clock on ok&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_0-1740410230913.png" style="width: 679px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229726i1B578559C1127B2D/image-dimensions/679x297?v=v2" width="679" height="297" role="button" title="SaiPrudhviRajTaduva_0-1740410230913.png" alt="SaiPrudhviRajTaduva_0-1740410230913.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_1-1740410284210.png" style="width: 677px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229727i2704B35B304375F0/image-dimensions/677x314?v=v2" width="677" height="314" role="button" title="SaiPrudhviRajTaduva_1-1740410284210.png" alt="SaiPrudhviRajTaduva_1-1740410284210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 9:&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Now you will see below option navigate to Integration flow editor&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_3-1740410648216.png" style="width: 660px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229734i1015ECB996B9F2A0/image-dimensions/660x317?v=v2" width="660" height="317" role="button" title="SaiPrudhviRajTaduva_3-1740410648216.png" alt="SaiPrudhviRajTaduva_3-1740410648216.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 10:&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Click on Navigate to Integration flow editor it will route you to the below integration flow now&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_4-1740410780671.png" style="width: 655px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229735i5464332895AD25EA/image-dimensions/655x329?v=v2" width="655" height="329" role="button" title="SaiPrudhviRajTaduva_4-1740410780671.png" alt="SaiPrudhviRajTaduva_4-1740410780671.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 11&lt;/STRONG&gt;:&lt;BR /&gt;&lt;STRONG&gt;Click on Response message mapping and map all the fields one to one&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_5-1740410909499.png" style="width: 671px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229736iB2AE724351600AF8/image-dimensions/671x222?v=v2" width="671" height="222" role="button" title="SaiPrudhviRajTaduva_5-1740410909499.png" alt="SaiPrudhviRajTaduva_5-1740410909499.png" /&gt;&lt;/span&gt;&lt;BR /&gt;Now click on ODATA receiver connector as below and provide the details&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_6-1740411004616.png" style="width: 657px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229737i62AEA134037695A2/image-dimensions/657x303?v=v2" width="657" height="303" role="button" title="SaiPrudhviRajTaduva_6-1740411004616.png" alt="SaiPrudhviRajTaduva_6-1740411004616.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Click on browse and select .edmx file and click on step2 then select entity and the required fields then click on finish&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_7-1740411076770.png" style="width: 653px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229739iD9E1A4EDAFB9401C/image-dimensions/653x249?v=v2" width="653" height="249" role="button" title="SaiPrudhviRajTaduva_7-1740411076770.png" alt="SaiPrudhviRajTaduva_7-1740411076770.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_8-1740411212335.png" style="width: 658px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229740i17763CFE2FA086F7/image-dimensions/658x329?v=v2" width="658" height="329" role="button" title="SaiPrudhviRajTaduva_8-1740411212335.png" alt="SaiPrudhviRajTaduva_8-1740411212335.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 12&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Click on Ok and go back to the OADATAAPIproduct to deploy&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_9-1740411407475.png" style="width: 665px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229742i0D004C37B1C35C07/image-dimensions/665x346?v=v2" width="665" height="346" role="button" title="SaiPrudhviRajTaduva_9-1740411407475.png" alt="SaiPrudhviRajTaduva_9-1740411407475.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_10-1740411483544.png" style="width: 680px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229743i43A9B37B4D84C733/image-dimensions/680x333?v=v2" width="680" height="333" role="button" title="SaiPrudhviRajTaduva_10-1740411483544.png" alt="SaiPrudhviRajTaduva_10-1740411483544.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step13&lt;/STRONG&gt;:&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Now our ODATAAPI is ready to test for this we have to go to Monitor-&amp;gt;Integrations and APIs&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_11-1740411669672.png" style="width: 678px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229744iCED99F5BE46396A5/image-dimensions/678x231?v=v2" width="678" height="231" role="button" title="SaiPrudhviRajTaduva_11-1740411669672.png" alt="SaiPrudhviRajTaduva_11-1740411669672.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Copy the endpoint to test it using Postman&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_12-1740411785887.png" style="width: 676px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229746i057CEE5ADB8CF12D/image-dimensions/676x254?v=v2" width="676" height="254" role="button" title="SaiPrudhviRajTaduva_12-1740411785887.png" alt="SaiPrudhviRajTaduva_12-1740411785887.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;For testing the above endpoint using Postman&amp;nbsp;Enter the URL you copied&amp;nbsp;For Authorization choose Type as Basic Auth from the dropdown list. Enter&amp;nbsp; your user Id and password of CPI tenant&amp;nbsp;And finally click on Send for sending out the request to your new OData API on&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_13-1740412009221.png" style="width: 595px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229748i9827AC6F503B63BC/image-dimensions/595x381?v=v2" width="595" height="381" role="button" title="SaiPrudhviRajTaduva_13-1740412009221.png" alt="SaiPrudhviRajTaduva_13-1740412009221.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;If you get a response which shows that a collection ProductSet is available, then the OData API is registered on the CPI tenant.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Next, call GET operation of this OData API for retrieving the list of orders out of the OData source.&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;In Postman append /ProductSet to the previous Url click on send&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SaiPrudhviRajTaduva_15-1740412422459.png" style="width: 696px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/229752iF3EA9C7EC17B86E3/image-dimensions/696x454?v=v2" width="696" height="454" role="button" title="SaiPrudhviRajTaduva_15-1740412422459.png" alt="SaiPrudhviRajTaduva_15-1740412422459.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Thanks for reading the blog, happy Integrating&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Regards,&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;Sai Prudhvi Raj Taduva&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-create-and-expose-odata-apis/ba-p/14025789"/>
    <published>2025-02-26T17:10:05.673000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/sap-learning-blog-posts/how-do-i-use-the-migration-tool/ba-p/14042000</id>
    <title>How do I use the migration tool?</title>
    <updated>2025-03-12T12:26:21.872000+01:00</updated>
    <author>
      <name>Margit_Wagner</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/491</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="3"&gt;&lt;SPAN&gt;I&amp;nbsp;&lt;/SPAN&gt;recommend to access our&amp;nbsp;&lt;A title="Migrating to SAP Integration Suite" href="https://learning.sap.com/learning-journeys/migrating-to-sap-integration-suite" target="_blank" rel="noopener noreferrer"&gt;Migrating to SAP Integration Suite&lt;/A&gt;&lt;/FONT&gt;&amp;nbsp;learning journey.&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Overview&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;After completing this learning journey, you will be able to migrate integration scenarios from SAP Process Orchestration / SAP Process Integration to SAP Integration Suite.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Learning objectives&lt;BR /&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This learning journey provides guidance for integration developers to migrate from SAP Process Orchestration / SAP Process Integration to SAP Integration Suite.&lt;/SPAN&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisites&lt;/STRONG&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Experience creating iFlows with SAP Integration Suite&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;P&gt;&lt;STRONG&gt;Please ask a question related&amp;nbsp;to the digital learning Journey in the&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://groups.community.sap.com/t5/sap-learning-q-a/qa-p/learningqanda-board" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;Q&amp;amp;A area&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt;.&amp;nbsp;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Our SAP Learning Experts will get back to you as soon as possible!&amp;nbsp;We are here to support you.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;I appreciate your feedback and we will make sure to continue sharing interesting topics.&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;Kind regards&lt;BR /&gt;Margit&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/sap-learning-blog-posts/how-do-i-use-the-migration-tool/ba-p/14042000"/>
    <published>2025-03-12T12:26:21.872000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/exciting-opportunity-for-sap-partners-join-the-sap-customer-engagement/ba-p/14051471</id>
    <title>Exciting Opportunity for SAP Partners: Join the SAP Customer Engagement Initiative - Cycle 1, 2025</title>
    <updated>2025-03-20T13:51:32.601000+01:00</updated>
    <author>
      <name>nadine_p</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/762608</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="All Projects 1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/240468i2B01BE5AC9C7C8BF/image-size/large?v=v2&amp;amp;px=999" role="button" title="All Projects 1.png" alt="All Projects 1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Dear SAP Partners,&lt;/P&gt;&lt;P&gt;We're thrilled to announce that the first cycle of the SAP Customer Engagement Initiative for 2025 is still &lt;STRONG&gt;open for your registrations!&lt;/STRONG&gt; This is a unique opportunity for you to collaborate with SAP and help shape the future of our products. This is your chance to make a real impact and contribute valuable insights to the development of SAP's upcoming products, features, and applications. Don't miss out – &lt;STRONG&gt;register by March 28, 2025&lt;/STRONG&gt;, to join the current projects open to SAP partners. We look forward to hearing your perspectives and ideas on the following initiatives:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;ABAP&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3895" target="_blank" rel="noopener noreferrer"&gt;ABAP Cloud Development Assistant&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3893" target="_blank" rel="noopener noreferrer"&gt;OData UI Service from scratch Generator&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;SAP Business Technology Platform&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3860" target="_blank" rel="noopener noreferrer"&gt;Create AI-driven extensions and automations with SAP Build&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3853" target="_blank" rel="noopener noreferrer"&gt;SAP BPM, SAP BRM and SAP Process Orchestration migration to Cloud&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3850" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Cockpit, Cloud Foundry UIs&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3861" target="_blank" rel="noopener noreferrer"&gt;SAP BTP Usability Event - User research project&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3854" target="_blank" rel="noopener noreferrer"&gt;SAP Integration Suite&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;SAP&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Customer&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Experience&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3849" target="_blank" rel="noopener noreferrer"&gt;SAP CX AI Toolkit&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Data &amp;amp; Analytics&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3859" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Cloud Elastic Compute Node&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3857" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Database Migration to SAP HANA Cloud&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;SAP S/4HANA Cloud&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3862" target="_blank" rel="noopener noreferrer"&gt;Fiori First for Sales Order Management&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3869" target="_blank" rel="noopener noreferrer"&gt;Identifying and resolving critical situations in a production planners day in S/4HANA Public Cloud&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3868" target="_blank" rel="noopener noreferrer"&gt;Identity and Access Management in SAP S/4HANA Cloud Public Edition&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3866" target="_blank" rel="noopener noreferrer"&gt;Insights into Business processes with Business Event Logging&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3890" target="_blank" rel="noopener noreferrer"&gt;New Financial Reporting for Enterprise Project (Project Booklet) including ETO&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3872" target="_blank" rel="noopener noreferrer"&gt;Planned New Solution for Cost Component Breakdown&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3845" target="_blank" rel="noopener noreferrer"&gt;SAP S/4HANA Cloud Private Edition - Product Change Management&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3848" target="_blank" rel="noopener noreferrer"&gt;Simplification of transports in SAP S/4HANA® Cloud Public Edition, three-system landscape&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;SAP&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Globalization&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3877" target="_blank" rel="noopener noreferrer"&gt;Australia and New Zealand: GST requirement for Down payments&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3876" target="_blank" rel="noopener noreferrer"&gt;Australia: Modified Payment Times Report - AASB 8 and Taxable Payments Annual Report&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Lifecycle Management&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3863" target="_blank" rel="noopener noreferrer"&gt;DevOps with ABAP&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Others&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3846" target="_blank" rel="noopener noreferrer"&gt;SAP Reference Architecture in SAP LeanIX&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;LI&gt;&lt;U&gt;&lt;A href="https://influence.sap.com/sap/ino/#campaign/3864" target="_blank" rel="noopener noreferrer"&gt;Shape the future of SAP Cloud ALM Configuration &amp;amp; Security Analysis&lt;/A&gt;&lt;/U&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;We believe collaboration is at the heart of innovation. By working together with our customers and partners, we can reshape the future of SAP products and transform the way businesses operate.&lt;/P&gt;&lt;P&gt;Don't wait – register today on&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/calling-all-sap-partners-join-the-sap-customer-engagement-initiative-cycle/ba-p/influence.sap.com" target="_blank"&gt;influence.sap.com&lt;/A&gt;&amp;nbsp;and join the SAP Customer Engagement Initiative Cycle 1 in 2025!&lt;/P&gt;&lt;P&gt;Warm regards,&lt;/P&gt;&lt;P&gt;Your SAP Customer Engagement Initiative Team&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Follow-up after registration: When you register for a project, you will be invited to an introductory call&amp;nbsp;with the SAP project lead. At this point further participation is optional. Typically, all activities are governed by the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.sap.com/about/customer-involvement/influence-adopt.html#pdf-asset=c4f10951-db7c-0010-82c7-eda71af511fa&amp;amp;page=1" target="_blank" rel="noopener noreferrer"&gt;&lt;EM&gt;Feedback Agreement with SAP&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/exciting-opportunity-for-sap-partners-join-the-sap-customer-engagement/ba-p/14051471"/>
    <published>2025-03-20T13:51:32.601000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-supporting-service-interface-operations-and/ba-p/14049909</id>
    <title>New Pipeline Concept features: Supporting service interface operations and others</title>
    <updated>2025-03-25T18:35:40.028000+01:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;With the latest version 1.0.10 of the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-new-pipeline-concept-in-cloud-integration/ba-p/13639651" target="_blank"&gt;Pipeline Concept&lt;/A&gt;, we have shipped the following features:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Supporting service interface operations&lt;/LI&gt;&lt;LI&gt;Updated the allowed header list&lt;/LI&gt;&lt;LI&gt;Have done script optimizations&lt;/LI&gt;&lt;LI&gt;Converted the XI message ID to upper case&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The package can be accessed from the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/integrationflow" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;&lt;SPAN&gt;. If you have already copied the package to your workspace in your SAP Integration Suite tenant, you can simply run the update of the package to be able to use the latest features.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;With respect to the &lt;STRONG&gt;allowed header&lt;/STRONG&gt; list, we did some minor changes to increase the flexibility when using SAP headers starting with the terms &lt;EM&gt;SAP_Sender&lt;/EM&gt; and &lt;EM&gt;SAP_Receiver&lt;/EM&gt; as well as custom headers starting with the term &lt;EM&gt;customX&lt;/EM&gt;. So, now any header starting with those terms are allowed.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Script optimizations&lt;/STRONG&gt; have been carried out for the scripts in the provided script collection. Here, we used the new features to fix script incompatibilities and optimizing Groovy scripts via generative AI. Actually, not much had to be changed, the scripts are actually not that complex and in most cases already most efficiently coded.&lt;/P&gt;&lt;P&gt;With respect to the &lt;STRONG&gt;XI message ID&lt;/STRONG&gt;, we received feedback from a customer that it was hard to track an XI message from the sending system in the message monitor of the Cloud Integration. The issue was that the ID in the Integration Engine monitor was all capital letter whereas in the Cloud Integration message monitor it was lower case. So, copy and past into the search field was not really supported. In the generic XI inbound processing flow &lt;EM&gt;Pipeline Generic Step01 - Inbound Processing for XI&lt;/EM&gt; we now simply&amp;nbsp;&lt;SPAN&gt;convert the XI message IDs to upper case to be compatible with the format which is displayed in the message monitoring of the Integration Engine of the sender system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Finally, we now support integration scenarios with multiple &lt;STRONG&gt;operations of the sender service interface&lt;/STRONG&gt;, see Scenarios with &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/special-cases#scenarios-with-sender-service-interface-operations" target="_blank" rel="noopener noreferrer"&gt;Sender Service Interface Operations&lt;/A&gt;. For this,&amp;nbsp;you need to pass the SAP header &lt;EM&gt;SAP_SenderOperation&lt;/EM&gt; from either the scenario-specific inbound processing flow or the scenario-specific inbound conversion flow to the generic integration flows to be able to determine receiving systems or receiver interfaces based on the operation. In the XSLT to determine receivers and receiver interfaces you can then refer to the SAP header as parameter, see example below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="22_02_Scenario10_xslt.png" style="width: 928px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239679iF903157412893347/image-size/large?v=v2&amp;amp;px=999" role="button" title="22_02_Scenario10_xslt.png" alt="22_02_Scenario10_xslt.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You can either implement your own logic to determine the operation or you can reuse the templates provided in the integration package for scenario-specific inbound processing or scenario-specific inbound conversion where we have implemented the following logic:&lt;/P&gt;&lt;P&gt;We assume that&amp;nbsp;there is a one-to-one relationship between the service interface operation and the message type, i.e., each operation of one and the same service interface must have a unique message type. This is exactly the same restriction that we have in SAP Process Orchestration which allows us to uniquely determine the operation based on the message type.&lt;/P&gt;&lt;P&gt;For this, we need to maintain the mapping between the operation and the root node name of the incoming XML message. Optionally, if the incoming message is not in XML format, you can maintain the mapping in the scenario-specific inbound conversion flow assuming that after the conversion your message is in XML format.&lt;/P&gt;&lt;P&gt;In a content modifier step, for each operation you need to create an exchange property to map the operation to the message type adhering to the naming convention as shown in the figure below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="22_01_Scenario10_inbound_flow.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239681iFF52E0F75C3E3CF4/image-size/large?v=v2&amp;amp;px=999" role="button" title="22_01_Scenario10_inbound_flow.png" alt="22_01_Scenario10_inbound_flow.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the example, we map the operation &lt;EM&gt;Create&lt;/EM&gt; to the message type &lt;EM&gt;MTOrderCreate&lt;/EM&gt; and the operation&amp;nbsp;&lt;EM&gt;Change&lt;/EM&gt; to the message type &lt;EM&gt;MTOrderChange&lt;/EM&gt;. In addition, we need to store the name of the XML root node in the exchange property &lt;EM&gt;messageTypeFromXMLRoot&lt;/EM&gt;&amp;nbsp;via the xpath&amp;nbsp;&lt;EM&gt;/*/local-name()&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;After the content modifier, we need to carry out the Groovy script &lt;EM&gt;mapMessageTypeToOperation&lt;/EM&gt;. The script compares the value of all exchange properties having the prefix &lt;EM&gt;SAP-MT2OP-&lt;/EM&gt; with the value of the exchange property &lt;EM&gt;messageTypeFromXMLRoot&lt;/EM&gt; to determine the operation. This operation will then at the end be stored in the header &lt;EM&gt;SAP_SenderOperation&lt;/EM&gt;.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you like to try out the pipeline concept in general and the new features in particular, check out this&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios" target="_blank" rel="noopener nofollow noreferrer"&gt;github repository&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;where we describe how to setup sample scenarios using the pipeline concept. Here, we have added a new scenario &lt;A href="https://github.com/peasantsboot/ProcessIntegrationPipelineSampleScenarios/tree/main/scenarios/Scenario10" target="_blank" rel="noopener nofollow noreferrer"&gt;Scenario 10&lt;/A&gt; leveraging the new service interface operation feature.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;If you have feedback, feel free to reach out to me or add your comment here.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-supporting-service-interface-operations-and/ba-p/14049909"/>
    <published>2025-03-25T18:35:40.028000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/migration-tooling-now-supporting-migration-via-the-pipeline-approach/ba-p/14073721</id>
    <title>Migration Tooling now supporting migration via the pipeline approach</title>
    <updated>2025-04-11T16:53:11.596000+02:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;With the latest Cloud Integration update, the SAP Process Orchestration to SAP Integration Suite&amp;nbsp;&lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/migration-tooling" target="_blank" rel="noopener noreferrer"&gt;migration tool&lt;/A&gt; now supports the automatic creation of integration artifacts supporting the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/pipeline-concept" target="_blank" rel="noopener noreferrer"&gt;Pipeline for Cloud Integration&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For an introduction to the migration tool, check out this &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/migration-tool-in-cloud-integration-capability-of-sap-integration-suite/ba-p/13555109" target="_blank"&gt;blog post&lt;/A&gt;. For more details about the pipeline for Cloud Integration incl. example implementations, see this &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/introducing-the-new-pipeline-concept-in-cloud-integration/ba-p/13639651" target="_blank"&gt;blog post&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the migration tool, you can now decide between two migration approaches: &lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/migrate-integration-objects-from-sap-process-orchestration-and-sap-process-integration" target="_blank" rel="noopener noreferrer"&gt;standard&lt;/A&gt; vs &lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/pipeline-approach" target="_blank" rel="noopener noreferrer"&gt;pipeline&lt;/A&gt;. If you select standard, then one integration flow is created based on one integration scenario (an Integrated Configuration Object or a decoupled PI dual stack configuration) in the SAP Process Integration / SAP Process Orchestration system. If you like to run your scenarios using the pipeline for Cloud Integration, multiple integration flows and the corresponding Partner Directory objects are automatically created.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Let me showcase you the pipeline support in the migration tool along two examples, one for a content-based-router scenario and one for a point-to-point scenario.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1708286957"&gt;&lt;SPAN&gt;Migrating a Content-based-router scenario using the pipeline approach&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;So, we have created a new package where we like to migrate the scenario to. Once we switch to the edit mode, we see a Migrate button to start the migration wizard.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="01 Migrate button.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249850i3EA58439399604B7/image-size/large?v=v2&amp;amp;px=999" role="button" title="01 Migrate button.png" alt="01 Migrate button.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the wizard, we first need to connect to the SAP Process Orchestration system.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="02 Connect to PO system.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249852i73B32769625B4603/image-size/large?v=v2&amp;amp;px=999" role="button" title="02 Connect to PO system.png" alt="02 Connect to PO system.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Once done, we select the scenario that we like to migrate, in our case we select an Integrated Configuration of pattern Content-based-router.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="03 Select ICO.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249853iF50D4972791E5E9C/image-size/large?v=v2&amp;amp;px=999" role="button" title="03 Select ICO.png" alt="03 Select ICO.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the next screen, the best fit pattern is identified, here we can choose between Content-Based Router and Recipient List. Furthermore, we select the migration approach. In our case Pipeline. Btw, for Pipeline, it doesn't really matter whether you select&amp;nbsp;Content-Based Router or&amp;nbsp;Recipient List for scenario with more than one receiver because here we use the provided generic pipeline steps and hence the generated objects are the same. For the Standard approach it differs.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="04 Select PIP Approach.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249854i7549230405F3539A/image-size/large?v=v2&amp;amp;px=999" role="button" title="04 Select PIP Approach.png" alt="04 Select PIP Approach.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the next screen, you can either create mappings that are uploaded to your integration flows or you can create reusable artifacts. In our case, we go for reusable artifacts. Btw, this step and the next are identical with the Standard approach.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="05 Message Mappings.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249855iC3CC0DBEE848757B/image-size/large?v=v2&amp;amp;px=999" role="button" title="05 Message Mappings.png" alt="05 Message Mappings.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The next screen just informs about which mapping objects are created or reused.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="06 Message Mapping Resources.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249856iD71CE2AB18737D37/image-size/large?v=v2&amp;amp;px=999" role="button" title="06 Message Mapping Resources.png" alt="06 Message Mapping Resources.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the Scenario screen, you need to maintain a unique scenario name. This scenario name is used for the naming of the created integration flows and Partner Directory entries. Furthermore, you need to maintain the name of the very first JMS queue of the pipeline. By default, it's PIPX01 following our recommendations. So, we assume that you like to use the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/integrated-messaging-runtime-asynchronous" target="_blank" rel="noopener noreferrer"&gt;integrated messaging runtime&lt;/A&gt;. If you like to use the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/pipeline-steps" target="_blank" rel="noopener noreferrer"&gt;fully decoupled pipeline&lt;/A&gt;, you need to change to PIPQ01. If you have configured an own queue prefix, then you need to maintain the queue name accordingly.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="07a Scenario.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249857i23AE1036F3BA7228/image-size/large?v=v2&amp;amp;px=999" role="button" title="07a Scenario.png" alt="07a Scenario.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you scroll down, you can see that one inbound conversion flow and three receiver flows will be created. Here, you have the option to maintain the xpath conditions just in case that the xpaths haven't been properly resolved from the conditions in the SAP Process Orchestration system. If you like, you can also change the end points of the scenario-specific conversion flow and the outbound flows to your needs.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="07b Scenario.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249858i37E1C14FE7C41995/image-size/large?v=v2&amp;amp;px=999" role="button" title="07b Scenario.png" alt="07b Scenario.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the Review screen, select Migrate.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="08 Migrate.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249859iEB2F7689A2AB1A94/image-size/large?v=v2&amp;amp;px=999" role="button" title="08 Migrate.png" alt="08 Migrate.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Once, the migration has been successfully carried out, you get a list of all objects created. On the first tab, you can see that 5 integration flows have been created. The first one is the scenario-specific inbound flow. The second flow runs the inbound conversion, in our case it converts the incoming message in JSON format to XML. The last 3 flows are the scenario-specific outbound flows, one for each receiver. From here, you can navigate to the flow models. The naming convention for the integration flow names are defined as follows:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;lt;Your sceneario name&amp;gt;_&amp;lt;pipeline step&amp;gt;_&amp;lt;pipeline type&amp;gt;[_&amp;lt;receiver name&amp;gt;_&amp;lt;interface index&amp;gt;]&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="09a Success.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249860i7E8011BE1E528550/image-size/large?v=v2&amp;amp;px=999" role="button" title="09a Success.png" alt="09a Success.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the Partner Directory tab, you see an overview of the partner ID which has been created and its parameters.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="09c Success.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249861i0608BE7030D9CF78/image-size/large?v=v2&amp;amp;px=999" role="button" title="09c Success.png" alt="09c Success.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The Next Steps provides you information what activities may have to be carried out post migration, like for the pipeline approach the prerequisite is that you have copied the latest pipeline package to your workspace and have deployed the script collection and all the generic flows.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="09d Success.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249862i9A9D3779336023D3/image-size/large?v=v2&amp;amp;px=999" role="button" title="09d Success.png" alt="09d Success.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Let's take a look at the created Partner Directory entry. You can see that a partner ID has been created with the scenario name maintained in the wizard. Because we need to run an inbound conversion from JSON to XML, the string parameter InboundConversionEndpoint has been created pointing to the ProcessDirect endpoint of the corresponding scenario-specific flow. If you like, you can add further string parameters to customize the runtime behaviour, like the max number of retries, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/using-partner-directory-in-pipeline-concept" target="_blank" rel="noopener noreferrer"&gt;Using the Partner Directory in the Pipeline Concept&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="10a PD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249863iFAFA15674C22452F/image-size/large?v=v2&amp;amp;px=999" role="button" title="10a PD.png" alt="10a PD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the Alternative Partners tab, you can see that the sender system name and the sender interface is mapped to the scenario. The sender information is actually used to determine the partner ID.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="10b PD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249864iAEF7FADC29D94E1B/image-size/large?v=v2&amp;amp;px=999" role="button" title="10b PD.png" alt="10b PD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On the Binary Parameters tab, you can see that a binary parameter with ID receiverDetermination has been created. This is the XSLT which is carried out to determine the receivers. Let's download the same.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="10c PD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249865i20CF1910991F6E08/image-size/large?v=v2&amp;amp;px=999" role="button" title="10c PD.png" alt="10c PD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here you can see the xpaths which are carried out to determine the receivers and interfaces. Btw, using the migration tool, we only support XSLTs combining receiver and interface determination in one single XSLT to keep it simple, see &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/special-cases" target="_blank" rel="noopener noreferrer"&gt;Special Cases&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="10d PD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249866iC4D723DB1B07C8CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="10d PD.png" alt="10d PD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1511773452"&gt;&lt;SPAN&gt;Migrating a P2P scenario using the pipeline approach&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Now, let's run through a P2P scenarios. The steps are the same like for the case above, so we skip most of the steps here to focus on the difference. Once we have started the wizard, connected to the system, we select a P2P scenario.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="11 P2P ICO.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249867iE3D06C1FD95BDED8/image-size/large?v=v2&amp;amp;px=999" role="button" title="11 P2P ICO.png" alt="11 P2P ICO.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This time Point-to-Point Asynchronous has been identified as the fitting pattern. We again select Pipeline as approach. In addition, we can either select or deselect the Idempotent Process at Receiver Side flag. If selected, we add an idempotent process when calling the receiver to identify duplicate messages in case that the receiver is not idempotent.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="12 P2P Select PIP.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249868i8CD1142B88CEE9BB/image-size/large?v=v2&amp;amp;px=999" role="button" title="12 P2P Select PIP.png" alt="12 P2P Select PIP.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here again, we need to maintain a scenario name.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="15a P2P Scenario.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249869i1429A80074F45362/image-size/large?v=v2&amp;amp;px=999" role="button" title="15a P2P Scenario.png" alt="15a P2P Scenario.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And further below, you can see that we only have one single receiver.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="15b P2P Scenario.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249870i054930A4BA1AC449/image-size/large?v=v2&amp;amp;px=999" role="button" title="15b P2P Scenario.png" alt="15b P2P Scenario.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Once migrated, you see that two integration flows have been created, one for the inbound and one for the outbound.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="17a Success.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249871i41AB5E286CC13668/image-size/large?v=v2&amp;amp;px=999" role="button" title="17a Success.png" alt="17a Success.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now, let's take a look at the generated Partner Directory object. For P2P, we only need string parameters. The name of the receiver is stored in the receiverDetermination parameter, the endpoint in the interfaceDetermination_&amp;lt;system name&amp;gt; parameter.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="18a PD.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249872i3D3A68813EA87275/image-size/large?v=v2&amp;amp;px=999" role="button" title="18a PD.png" alt="18a PD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In case that you can't see the pipeline approach option in your tenant, you may need to wait for the upcoming weekend where the rest of the data centers should be updated, so stay tuned, hopefully on coming Monday you can hold of this new feature.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/migration-tooling-now-supporting-migration-via-the-pipeline-approach/ba-p/14073721"/>
    <published>2025-04-11T16:53:11.596000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/fixed-length-file-display-tool/ba-p/14076941</id>
    <title>Fixed Length File Display Tool</title>
    <updated>2025-04-15T20:08:33.864000+02:00</updated>
    <author>
      <name>RaghuVamseedhar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191580</uri>
    </author>
    <content>&lt;P&gt;When dealing with text-based data, two common formats emerge—delimited files and fixed-length files. A delimited file, such as CSV, uses characters like commas or pipes to separate fields, making it easy to open and interpret in tools like Notepad++ or MS Excel. In contrast, a fixed-length file assigns a predefined width to each field, offering consistency for legacy systems but making column identification more complex. Unlike CSV files, fixed-length files often lack a header row, requiring developers to reference external documentation to understand the structure.&lt;/P&gt;&lt;P&gt;Working with fixed-length files presents unique challenges. Programming languages like Groovy (SAP Cloud Integration) and Java (SAP Process Orchestration) index characters starting from 0, whereas text editors (Notepad++) start from 1. This discrepancy can lead to errors such as reading extra characters or encountering ArrayIndexOutOfBoundsException. String substring(int begin, int end) begin index starts with 0. Debugging and testing require precision, especially when aligning data fields correctly. Functional teams reviewing fixed-length files often resort to guessing column names based on data patterns.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251103i3A725AA3C0B02E61/image-size/large?v=v2&amp;amp;px=999" role="button" title="1.png" alt="1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This HTML-based Fixed-Length File Display Tool offers a practical solution. This tool allows to define column names and sizes while deciding whether indexing should start at 0 or 1. By submitting text for display, the tool color-codes fields, enabling visual distinction between columns. Even if column names are unavailable, alternating colors help segment the data in blocks of 10 characters. The tool is useful across development, testing, and support phases, making it easier to identify column boundaries.&lt;/P&gt;&lt;P&gt;As this is a simple HTML file, users can save formatted files, creating structured references for each integrations which are using fixed-length files. Right click and select 'Save As'.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251104i40257B8A13100FBA/image-size/large?v=v2&amp;amp;px=999" role="button" title="2.png" alt="2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note:- Save this code as Tool.html and open with a browser (Chrome, Edge...).&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="UTF-8" /&amp;gt;
        &amp;lt;title&amp;gt;Fixed Length File Display Tool&amp;lt;/title&amp;gt;
        &amp;lt;style&amp;gt;
            body {
                font-family: monospace;
            }
            textarea {
                width: 100%;
                overflow: auto;
                white-space: nowrap;
            }
            /* Tooltip &amp;amp; Popup Styling */
            .tooltip, .popup {
                position: absolute;
                display: none;
                pointer-events: none;
                z-index: 1000;
            }
            .tooltip {
                background: #333;
                color: #fff;
                padding: 6px 10px;
                border-radius: 4px;
                font-size: 13px;
                white-space: nowrap;
            }
            .popup {
                /* Background color will be set dynamically */
                color: #fff;
                font-size: 30px;
                font-weight: bold;
                padding: 5px 10px;
                border: 1px solid #aaa;
                border-radius: 5px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            }
            /* Output Area &amp;amp; Span Styling */
            #output {
                font-size: 18px;
                white-space: pre;
                overflow: auto;
                border: 1px solid #ccc;
                padding: 10px;
                margin-top: 10px;
                max-height: 300px;
            }
            #output div {
                display: block;
            }
            #output span {
                display: inline-block;
                cursor: pointer;
                user-select: none;
                padding: 2px;
            }
            #output .selected {
                background-color: #ffeb3b;
            }
        &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Line Index Start:
            &amp;lt;input type="radio" name="lineIndexStart" value="0" checked&amp;gt; 0
            &amp;lt;input type="radio" name="lineIndexStart" value="1"&amp;gt; 1
        &amp;lt;/label&amp;gt;

        &amp;lt;label&amp;gt;
            &amp;lt;br/&amp;gt;Character Index Start:
            &amp;lt;input type="radio" name="charIndexStart" value="0" checked&amp;gt; 0
            &amp;lt;input type="radio" name="charIndexStart" value="1"&amp;gt; 1
        &amp;lt;/label&amp;gt;

        &amp;lt;label&amp;gt;
            &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;Column Names:&amp;lt;/label&amp;gt;
        &amp;lt;textarea id="columnNames" style="height:20px" placeholder="Enter column names (e.g. SNo,ID,Name,Subject)"&amp;gt;SNo,ID,Name,Subject&amp;lt;/textarea&amp;gt;

        &amp;lt;label&amp;gt;
            &amp;lt;br/&amp;gt;Column Sizes:
            &amp;lt;textarea id="groupSizes" style="height:20px" placeholder="Enter column sizes (e.g. 2,5,15,10)"&amp;gt;2,5,15,10&amp;lt;/textarea&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;lt;br/&amp;gt;Input Text:
            &amp;lt;textarea id="inputText" style="height:100px" placeholder="Enter text here"&amp;gt;01  101James          English   ..............&amp;amp;#10;02  102Vamsee         Science   Something Else&amp;amp;#10;10  202Ahmed          English   ..............&amp;lt;/textarea&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;br/&amp;gt;
        &amp;lt;button id="submitBtn" style="width: 100%;" onclick="updateText()"&amp;gt;Submit&amp;lt;/button&amp;gt;


        &amp;lt;!-- Output Area and Helper Elements --&amp;gt;
        &amp;lt;div id="output"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div id="tooltip" class="tooltip"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div id="popup" class="popup"&amp;gt;&amp;lt;/div&amp;gt;

        &amp;lt;script&amp;gt;
            const output = document.getElementById("output");
            const tooltip = document.getElementById("tooltip");
            const popup = document.getElementById("popup");
            const submitBtn = document.getElementById("submitBtn");

            // Global selection variables.
            let selecting = false;
            let startIndex = null;
            let endIndex = null;

            function getCharIndexStart() {
                return parseInt(document.querySelector('input[name="charIndexStart"]:checked').value, 10);
            }

            function getLineIndexStart() {
                return parseInt(document.querySelector('input[name="lineIndexStart"]:checked').value, 10);
            }

            function clearSelection() {
                output.querySelectorAll("span").forEach(span =&amp;gt; span.classList.remove("selected"));
            }

            function highlightRange(start, end) {
                const minIndex = Math.min(start.index, end.index);
                const maxIndex = Math.max(start.index, end.index);
                output.querySelectorAll(`div[data-line="${start.line}"] span`).forEach(span =&amp;gt; {
                    const idx = parseInt(span.dataset.index, 10);
                    if (idx &amp;gt;= minIndex &amp;amp;&amp;amp; idx &amp;lt;= maxIndex) {
                        span.classList.add("selected");
                    }
                });
            }

            /*Core Logic:- When Submit is pressed. For each char in input text create a div and add it to output. When mouse hovers over it, element attributes are displayed
             * Sample div:- &amp;lt;span data-index="4" data-line="0" style="color: black;" data-column="ID" class="selected"&amp;gt;1&amp;lt;/span&amp;gt;
             * */
            function updateText() {
                const charOffset = getCharIndexStart();
                const lineOffset = getLineIndexStart();

                // Parse column names.
                const columnNamesInput = document.getElementById("columnNames").value.trim();
                const columnNames = columnNamesInput ? columnNamesInput.split(",").map(s =&amp;gt; s.trim()).filter(s =&amp;gt; s !== "") : [];

                // Parse group sizes.
                const groupSizesRaw = document.getElementById("groupSizes").value;
                let groupSizes = groupSizesRaw.split(",").map(Number).filter(n =&amp;gt; n &amp;gt; 0);

                const validGroupSizes = groupSizes.length &amp;gt; 0;
                const validColumnNames = columnNames.length &amp;gt; 0;
                // Use popup column if both valid group sizes and column names are provided.
                const usePopupColumn = validGroupSizes &amp;amp;&amp;amp; validColumnNames;

                output.innerHTML = ""; //Reset output area. i.e. drop all child &amp;lt;div&amp;gt;.
                const text = document.getElementById("inputText").value.replaceAll(" ", "\u00A0"); //Replace space with \u00A0. Reason: In HTML multiple spaces are automatically collapsed into a single space.

                startIndex = endIndex = null;

                text.split("\n").forEach((line, lineIndexRaw) =&amp;gt; {
                    const lineIndex = lineIndexRaw + lineOffset;
                    let lineDiv = document.createElement("div");
                    lineDiv.dataset.line = lineIndex;

                    if (!validGroupSizes) {
                        // Default grouping: every 10 characters, alternating blue and black.
                        line.split("").forEach((char, idx) =&amp;gt; {
                            const charIndex = idx + charOffset;
                            const span = document.createElement("span");
                            span.innerHTML = char;
                            span.dataset.index = charIndex;
                            span.dataset.line = lineIndex;

                            let groupNumber = Math.floor(idx / 10);
                            // Here: even groups are blue and odd groups are black.
                            span.style.color = (groupNumber % 2 === 0) ? "blue" : "black";
                            // Without valid grouping, popup shows the character.
                            span.dataset.column = char;
                            addCommonEventHandlers(span, lineIndex, charIndex, char, false);
                            lineDiv.appendChild(span);
                        });
                    } else {
                        // Valid group sizes provided.
                        let groupIndex = 0;
                        let countInGroup = 0;
                        line.split("").forEach((char, idx) =&amp;gt; {
                            const charIndex = idx + charOffset;
                            const span = document.createElement("span");
                            span.innerHTML = char;
                            span.dataset.index = charIndex;
                            span.dataset.line = lineIndex;

                            if (groupIndex &amp;lt; groupSizes.length) {
                                // Color: even groups → blue, odd groups → black.
                                span.style.color = (groupIndex % 2 === 0) ? "blue" : "black";
                                // Use the corresponding column name if available; otherwise, fallback to the character.
                                const label = (groupIndex &amp;lt; columnNames.length) ? columnNames[groupIndex] : char;
                                span.dataset.column = label;
                                countInGroup++;
                                if (countInGroup &amp;gt;= groupSizes[groupIndex]) {
                                    groupIndex++;
                                    countInGroup = 0;
                                }
                            } else {
                                // For characters beyond the provided groups.
                                span.style.color = "purple";
                                span.dataset.column = char;
                            }
                            addCommonEventHandlers(span, lineIndex, charIndex, char, usePopupColumn);
                            lineDiv.appendChild(span);
                        });
                    }
                    output.appendChild(lineDiv);
                });
            }

            // Attach common event handlers for each span.
            function addCommonEventHandlers(span, lineIndex, charIndex, char, usePopupColumn) {
                span.addEventListener("mousedown", () =&amp;gt; {
                    selecting = true;
                    startIndex = {line: lineIndex, index: charIndex};
                    clearSelection();
                    span.classList.add("selected");
                });

                span.addEventListener("mouseover", (e) =&amp;gt; {
                    const rect = span.getBoundingClientRect();
                    const popupLabel = usePopupColumn ? span.dataset.column : char;
                    // Pass the span's color for popup background matching.
                    showPopup(rect, popupLabel, span.style.color);
                    if (selecting &amp;amp;&amp;amp; startIndex !== null) {
                        const currentPosition = {line: lineIndex, index: charIndex};
                        if (startIndex.line === currentPosition.line) {
                            endIndex = currentPosition;
                            highlightRange(startIndex, endIndex);
                            showTooltip(e.pageX, e.pageY, `Line: ${lineIndex}, Start: ${startIndex.index} | End: ${endIndex.index} | Count: ${Math.abs(endIndex.index - startIndex.index) + 1}`);
                        }
                    } else {
                        showTooltip(e.pageX, e.pageY, `Line: ${lineIndex}, Char: '${char}' | Index: ${charIndex}`);
                    }
                });

                span.addEventListener("mouseout", () =&amp;gt; {
                    hidePopup();
                    hideTooltip();
                });
            }

            // Tooltip helper functions with viewport bounds adjustments.
            function showTooltip(x, y, content) {
                tooltip.textContent = content;
                tooltip.style.display = "block";

                const viewportWidth = window.innerWidth;
                const viewportHeight = window.innerHeight;
                const tooltipPadding = 10;

                let left = x + 10;
                let top = y + 10;

                // Adjust horizontal position
                if (left + tooltip.offsetWidth &amp;gt; viewportWidth) {
                    left = viewportWidth - tooltip.offsetWidth - tooltipPadding;
                }
                if (left &amp;lt; tooltipPadding) {
                    left = tooltipPadding;
                }

                // Adjust vertical position
                if (top + tooltip.offsetHeight &amp;gt; viewportHeight) {
                    top = viewportHeight - tooltip.offsetHeight - tooltipPadding;
                }
                if (top &amp;lt; tooltipPadding) {
                    top = tooltipPadding;
                }

                tooltip.style.left = left + "px";
                tooltip.style.top = top + "px";
            }

            function hideTooltip() {
                tooltip.style.display = "none";
            }

            // Popup helper functions with viewport bounds adjustments.
            function showPopup(rect, content, colColor) {
                const viewportWidth = window.innerWidth;
                const viewportHeight = window.innerHeight;
                const popupPadding = 10; // Extra padding to avoid screen edges

                let left = rect.left + window.scrollX;
                let top = rect.top - 40 + window.scrollY;

                // Adjust if the popup goes beyond the right edge
                if (left + popup.offsetWidth &amp;gt; viewportWidth) {
                    left = viewportWidth - popup.offsetWidth - popupPadding;
                }
                // Adjust if the popup goes beyond the left edge
                if (left &amp;lt; popupPadding) {
                    left = popupPadding;
                }
                // Adjust if the popup goes beyond the bottom edge
                if (top + popup.offsetHeight &amp;gt; viewportHeight) {
                    top = viewportHeight - popup.offsetHeight - popupPadding;
                }
                // Adjust if the popup goes above the top edge
                if (top &amp;lt; popupPadding) {
                    top = popupPadding;
                }

                popup.style.left = `${left}px`;
                popup.style.top = `${top}px`;
                popup.textContent = content;
                // Set the popup's background color to match the column color.
                popup.style.backgroundColor = colColor;
                popup.style.display = "block";
            }

            function hidePopup() {
                popup.style.display = "none";
            }

            document.addEventListener("mouseup", () =&amp;gt; {
                selecting = false;
            });

            document.addEventListener("keydown", (e) =&amp;gt; {
                if (e.key === "Escape") {
                    clearSelection();
                    selecting = false;
                    startIndex = endIndex = null;
                }
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/fixed-length-file-display-tool/ba-p/14076941"/>
    <published>2025-04-15T20:08:33.864000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-pipeline-for-cloud-integration-features-with-version-1-0-11/ba-p/14093335</id>
    <title>New Pipeline for Cloud Integration features with version 1.0.11</title>
    <updated>2025-05-07T07:52:30.826000+02:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;A new version 1.0.11 of the &lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/overview" target="_blank" rel="noopener noreferrer"&gt;Process Integration Pipeline package&lt;/A&gt; has been recently shipped, this time with rather minor changes but two changes &lt;STRONG&gt;require your attention&lt;/STRONG&gt; because here we decided to change default configurations to follow our recommendations. If you nevertheless like to use the old default settings, you need to configure your integration flows before deployment.&lt;/P&gt;&lt;P&gt;So, here the list of new features/changes at a glance:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The search based on IDoc number in the message monitor has been improved by removing the leading zeros from IDoc number in ApplicationID and custom header properties.&lt;/LI&gt;&lt;LI&gt;For the XI inbound flow, the partner ID is determined also based on service interface namespace in addition to system name and service interface name.&lt;/LI&gt;&lt;LI&gt;We fixed an error with wrong inbound queue in case of custom error handling for the integrated messaging runtime.&lt;/LI&gt;&lt;LI&gt;We introduced a configuration option to switch off the option to determine the partner ID using the so called "tilde option". The default is that this option is switched off.&lt;/LI&gt;&lt;LI&gt;We changed the default inbound processing queue of the XI inbound and the IDoc inbound flows from PIPQ01 to PIPX01 so that by default the integrated messaging runtime is used.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Here some more details:&lt;/P&gt;&lt;H3 id="toc-hId-1839212909"&gt;Switch off "tilde option"&lt;/H3&gt;&lt;P&gt;The partner ID unambiguously defines the configuration scenarios and is usually based on the sender system name and the sender interface name. The recommended approach is to define the partner ID as configuration scenario name and then to map&amp;nbsp;sender system name and the sender interface name to the partner ID using an alternative partner.&lt;/P&gt;&lt;P&gt;An alternative option is to define the partner ID by combining the&amp;nbsp;sender system name and the sender interface name separated by a tilde, hence I call it "tilde option". This was the only option when we shipped the first version of the pipeline concept and so we still support it for compatibility reasons.&lt;/P&gt;&lt;P&gt;We do not recommend to use the&amp;nbsp;"tilde option" because with this you may exceed the maximum length of the partner ID in the Partner Directory which is 60 characters. So, we came up with the option defining alternative partners. This also has the advantage that it easily supports sender wildcard scenarios, so different sender systems with same sender interface sharing the same configuration. Here, you simply add another alternative partner to the configuration scenario.&lt;/P&gt;&lt;P&gt;In a first attempt, the partner ID is determined based on an alternative partner matching the headers SAP_Sender and SAP_SenderInterface which are passed from the scenario-specific inbound flows. So far, if no partner ID could be determined, in a second attempt a partner ID was constructed by combining the two headers separated by tilde assuming that this option should be used.&lt;/P&gt;&lt;P&gt;If you however did not intend to use the "tilde option" and for whatever reason the partner ID could not be determined, e.g., because you missed to maintain the alternative partner, the partner ID was unintentionally constructed in a wrong way. The message most likely went into an error because the constructed partner ID did not exist in the Partner Directory. The message was not lost because it stayed on the first JMS queue in the pipeline, but the issue was that there was no way that you could change the partner ID header of the message to get the message restarted with a correct partner ID.&lt;/P&gt;&lt;P&gt;To avoid such a situation, we introduced an externalized parameter&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CustomXPid_SwitchOffTilde. The default value is true, so the "tilde option" is switched off. The new behaviour is that if we could not determine the partner ID based on an alternative partner, we do not automatically construct the partner ID and the message rather goes into an error. The difference is that you are now able to resolve the error resolution by fixing the Partner Directory entry and restarting the message.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;We intentionally decided to set the default to true which unfortunately is an incompatible change if you like to use the "tilde option". For those of you who prefer to use the "tilde option", you need to &lt;STRONG&gt;take the following action&lt;/STRONG&gt; before deploying the generic flows of the updated package:&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Select the following generic flows where the script to determine the partner ID is called and for each flow&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;change the value of the externalized parameter&amp;nbsp;CustomXPid_SwitchOffTilde from true to false&lt;/SPAN&gt;&lt;/SPAN&gt;:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Pipeline Generic Step01 - Inbound Processing for &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Idoc&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Pipeline Generic Step01 - Inbound Processing for XI&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Pipeline Generic Step02 - Inbound Processing&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Pipeline Generic Step02 - Integrated Messaging Runtime Async&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Pipeline Generic Step02 - Integrated Messaging Runtime &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;S&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ync&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;No action required&lt;/STRONG&gt; when you like to stick to our recommendation &lt;STRONG&gt;using alternative partner&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Tilde vs Alternative Partner.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/258268i068826F6DA385514/image-size/large?v=v2&amp;amp;px=999" role="button" title="Tilde vs Alternative Partner.png" alt="Tilde vs Alternative Partner.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;U&gt;Figure 1:&lt;/U&gt; Tilde option vs alternative partner&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1642699404"&gt;Default inbound processing queue&lt;/H3&gt;&lt;P&gt;For each scenario-specific flow, you explixitly define the inbound processing queue where you store the incoming message. Depending on the queue chosen, the message is either processed within the fully decoupled pipeline or the integrated messaging runtime. If you keep the JMS queue prefix to the default value which is PIP, PIPQ01 stands for the fully decoupled pipeline whereas messages that are stored in PIPX01 are picked up by the integrated messaging runtime.&lt;/P&gt;&lt;P&gt;The&amp;nbsp;fully decoupled pipeline consists of separate integration flows for each pipeline step so that you end up at 4 JMS queues required to decouple the pipeline steps. Furthermore, for a recipient list pattern with additional interface determination it requires an XSLT for the receiver determination and for each receiver an XSLT for the interface determination.&lt;/P&gt;&lt;P&gt;The&amp;nbsp;integrated messaging runtime has been evolved from the&amp;nbsp;fully decoupled pipeline by combining several pipeline steps into one integration flow. Here, you only need 2 JMS queues and only one single XSLT mapping per scenario to determine receivers and interfaces.&lt;/P&gt;&lt;P&gt;Recommendation is to use the integrated messaging runtime for reasons of better tenant resource consumption and better runtime behaviour due to less number of logs, less number of JMS queues and less number of XSLT mappings. The only scenarios that are not supported on the integrated messaging runtime are those where you would like to reuse extended receiver determination because here you separate the receiver determination from the interface determination, however the integrated messaging runtime only supports a combined XSLT.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The generic XI inbound flow and the generic IDoc inbound flow are used across multiple scenarios and hence the inbound processing queue is generally defined across multiple scenarios. If you like to define an inbound queue for a particular scenario, you need to configure the string parameter inboundQueue in the Partner Directory to overwrite the default value for this particular scenario. For compatibility reasons, so far the default inbound processing queue was configured as PIPQ01. In order to&amp;nbsp;follow our recommendation to use the integrated messaging runtime instead of the fully decoupled pipeline, we decided to change the default&amp;nbsp;from PIPQ01 to PIPX01.&lt;/P&gt;&lt;P&gt;So, with this change the XI and IDoc messages are now routed to the&amp;nbsp;integrated messaging runtime by default, and if you like to route the message for a particular scenario to the fully decoupled pipeline you need to create a string parameter inboundQueue with value PIPQ01.&lt;/P&gt;&lt;P&gt;If you however like to stick to the old behaviour, you need to &lt;STRONG&gt;take action&lt;/STRONG&gt; before deploying the two generic flows:&amp;nbsp;&lt;SPAN class=""&gt;Select the following generic flows and for each flow&amp;nbsp;change the value of the externalized parameter DefaultJMSQueueNumber from X01 to Q01:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;Pipeline Generic Step01 - Inbound Processing for XI&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Pipeline Generic Step01 - Inbound Processing for Idoc&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;No action required&lt;/STRONG&gt; when you like to stick to our recommendation &lt;STRONG&gt;using X01&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1446185899"&gt;Partner ID for XI inbound&lt;/H3&gt;&lt;P&gt;For ABAP proxy scenarios, there might be situations where the combination of sender system name and sender interface name alone is not unambiguous, namely if you have a scenario with the same sender system name and the same sender interface name but different sender system namespaces which is actually supported in SAP Process Orchestration. For this reason, the approach determining the partner ID has been extended for the XI inbound flow. If you like to leverage the new feature, you need to define the alternative partner in your configuration scenario differently:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The agent remains the same, here you maintain the sender system name.&lt;/LI&gt;&lt;LI&gt;The scheme was constant before, now you need to maintain the sender interface name.&lt;/LI&gt;&lt;LI&gt;And for the ID, you maintain the sender interface namespace.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;When matching the alternative partner to a partner ID, in a first attempt such a combination incl. namespace is checked. If we do not have a match, then in a second attempt the usual approach without namespace is applied.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Namespace support.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/258269i5BFEBAD751B060F1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Namespace support.png" alt="Namespace support.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;Figure 2:&lt;/U&gt; Determine partner ID based on sender system name, sender interface name and sender interface namespace&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-for-cloud-integration-features-with-version-1-0-11/ba-p/14093335"/>
    <published>2025-05-07T07:52:30.826000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-with-version-1-0-12-improved-handling-of/ba-p/14112869</id>
    <title>New Pipeline Concept features with version 1.0.12: improved handling of Custom Header Properties</title>
    <updated>2025-05-28T08:56:53.692000+02:00</updated>
    <author>
      <name>slava_kuzyakin</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/171238</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;A new version (1.0.12) of the Process Integration Pipeline package has recently been released, featuring several minor technical updates, bug fixes, and a reworked approach to handling custom header properties. This blog outlines the enhancements made in the area of custom header property processing.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1731346284"&gt;Intro&lt;/H2&gt;&lt;P&gt;Starting with &lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-supporting-custom-header-properties-and/ba-p/13894048" target="_blank"&gt;version 1.0.7 of the Process Integration Pipeline package&lt;/A&gt;&lt;/SPAN&gt;, support for &lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/monitoring-and-error-handling-pipeline-concept#custom-header-properties" target="_blank" rel="noopener noreferrer"&gt;custom header properties&lt;/A&gt;&lt;/SPAN&gt; was introduced. Custom header properties enable enhanced searchability of the message processing log by allowing key-value pairs – extracted from the message payload or other relevant attributes – to be indexed and queried.&lt;/P&gt;&lt;P&gt;To use this feature, you must configure the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header in a scenario-specific integration flow step. This header is then propagated to the generic integration flows. The header value is defined as a pipe-delimited (&lt;FONT face="courier new,courier"&gt;'|'&lt;/FONT&gt;) string, where each key-value pair is separated by a colon (&lt;FONT face="courier new,courier"&gt;':'&lt;/FONT&gt;). For example:&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier"&gt;purchaseOrder:${property.purchaseOrder}|companyCode:${property.companyCode}|vendorNumber:${property.vendorNumber}&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;This implementation meets basic requirements for transmitting custom header properties across multiple integration flows via a single header. However, it is somewhat error-prone due to the use of fixed delimiter characters. If any value contains reserved characters such as colons (e.g., in timestamps), parsing may fail.&lt;/P&gt;&lt;P&gt;Another limitation is the two-step setup required when extracting multiple key fields from an XML payload using XPath: first, each value must be stored in a message header or exchange property, and only then can they be combined into a single &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; string.&lt;/P&gt;&lt;P&gt;To address these limitations, an enhanced processing option has been introduced. Instead of using a delimited string, you can define exchange properties with the prefix &lt;FONT face="courier new,courier"&gt;'customHeader_'&lt;/FONT&gt; and invoke the Groovy script &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt;. This script generates the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header as a Base64-encoded JSON object, preserving all key-value pairs.&lt;/P&gt;&lt;P&gt;With this approach, special characters within header values – such as colons, pipes, or quotes – are fully supported and correctly handled, making the process more robust and reliable.&lt;/P&gt;&lt;H2 id="toc-hId-1534832779"&gt;New processing option: Using exchange properties&lt;/H2&gt;&lt;P&gt;For each custom header property, you can create an exchange property with prefix &lt;FONT face="courier new,courier"&gt;'customHeader_'&lt;/FONT&gt; in a content modifier step. The name of the exchange property without the prefix becomes the name of the custom header property.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_0-1748413946601.png" style="width: 598px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266765iE896E08A7C2EB36C/image-dimensions/598x144?v=v2" width="598" height="144" role="button" title="slava_kuzyakin_0-1748413946601.png" alt="slava_kuzyakin_0-1748413946601.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After the Content Modifier step, you need to invoke the Groovy script &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt; from the script collection &lt;FONT face="courier new,courier"&gt;Pipeline Generic - Script Collection&lt;/FONT&gt;, which is part of the provided integration package. This script reads all exchange properties prefixed with &lt;FONT face="courier new,courier"&gt;'customHeader_'&lt;/FONT&gt;, constructs a JSON object from their name-value pairs, and Base64-encodes the result.&lt;/P&gt;&lt;P&gt;In addition to generating the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header, the script also attaches these custom header values to the message processing log, ensuring they are available for monitoring and diagnostics. The resulting &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header is then seamlessly passed along to the generic integration flows.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_1-1748413989061.png" style="width: 501px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266767i39AB1A0F5AFD25CC/image-dimensions/501x328?v=v2" width="501" height="328" role="button" title="slava_kuzyakin_1-1748413989061.png" alt="slava_kuzyakin_1-1748413989061.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the generic integration flows, the &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt; Groovy script splits the header value using the pipe character (&lt;FONT face="courier new,courier"&gt;'|'&lt;/FONT&gt;) for backward compatibility. It then evaluates each resulting segment (or the original value if no pipe is present) to determine whether it is Base64-encoded. All key-value pairs extracted from the decoded or raw segments are stored in a map, which is subsequently used as the source for custom header properties.&lt;/P&gt;&lt;P&gt;In the message monitor, the custom headers are displayed in the Properties tab of the message processing logs of the generic integration flows. In the filter section, you can search for specific custom header values.&lt;/P&gt;&lt;H2 id="toc-hId-1338319274"&gt;Previous Approach Still Supported: Manually Setting customHeaderProperties&lt;/H2&gt;&lt;P&gt;In a content modifier step, you can create a new header &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt;. The source value of the header &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; must follow the following pattern:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Name and value are separated by colon (&lt;FONT face="courier new,courier"&gt;':'&lt;/FONT&gt;)&lt;/LI&gt;&lt;LI&gt;Name and value pairs are separated by pipe (&lt;FONT face="courier new,courier"&gt;'|'&lt;/FONT&gt;)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_2-1748414016626.png" style="width: 589px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266771iFCA4A72C7812ABA3/image-dimensions/589x106?v=v2" width="589" height="106" role="button" title="slava_kuzyakin_2-1748414016626.png" alt="slava_kuzyakin_2-1748414016626.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Optionally, you can invoke the &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt; script to add custom header properties to your scenario-specific flow.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_3-1748414052318.png" style="width: 494px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266772iCBDEA4974900AD09/image-dimensions/494x320?v=v2" width="494" height="320" role="button" title="slava_kuzyakin_3-1748414052318.png" alt="slava_kuzyakin_3-1748414052318.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;At the same time, the script transforms the previously defined pipe-delimited string into a JSON object, encodes it in Base64, and updates the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header accordingly: &lt;FONT face="courier new,courier"&gt;{"docType":"Z0","docRefId":"Test Doc 01"}&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_4-1748414079341.png" style="width: 562px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266773iDD6B7CB692D9A83F/image-dimensions/562x240?v=v2" width="562" height="240" role="button" title="slava_kuzyakin_4-1748414079341.png" alt="slava_kuzyakin_4-1748414079341.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the generic integration flows, the Groovy script &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt; splits up the list of name and value pairs and adds the custom header properties accordingly.&lt;/P&gt;&lt;P&gt;In the message monitor, the custom headers are displayed in the Properties tab of the message processing logs of the generic integration flows. In the filter section, you can search for specific custom header values.&lt;/P&gt;&lt;H2 id="toc-hId-1141805769"&gt;Combined approach&lt;/H2&gt;&lt;P&gt;A combined approach is also supported: you can use the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header with a pipe-delimited string, and simultaneously define exchange properties with the prefix &lt;FONT face="courier new,courier"&gt;'customHeader_'&lt;/FONT&gt; in the same Content Modifier.&lt;/P&gt;&lt;P&gt;In the example below, the custom header key &lt;FONT face="courier new,courier"&gt;companyCode&lt;/FONT&gt; is included both in the delimited string and as an exchange property.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_5-1748414115983.png" style="width: 664px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266776iE404C0B1AAA94A10/image-dimensions/664x123?v=v2" width="664" height="123" role="button" title="slava_kuzyakin_5-1748414115983.png" alt="slava_kuzyakin_5-1748414115983.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_6-1748414132720.png" style="width: 573px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266777i3051A4E4AA94DCA8/image-dimensions/573x165?v=v2" width="573" height="165" role="button" title="slava_kuzyakin_6-1748414132720.png" alt="slava_kuzyakin_6-1748414132720.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When the &lt;FONT face="courier new,courier"&gt;addCustomHeaderProperties&lt;/FONT&gt; script is invoked, it merges the entries from the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header and the &lt;FONT face="courier new,courier"&gt;'customHeader_'&lt;/FONT&gt; exchange properties into a single map. It then logs the resulting custom header properties in the message processing log and sets a new merged value – encoded as a Base64 JSON object – back to the &lt;FONT face="courier new,courier"&gt;customHeaderProperties&lt;/FONT&gt; header.&lt;/P&gt;&lt;P&gt;In this case, the value from the exchange property &lt;FONT face="courier new,courier"&gt;customHeader_companyCode&lt;/FONT&gt; takes precedence over the one from the delimited string. This is because the script first reads values from the existing header, then adds or overwrites them with those from the exchange properties – allowing you to override specific values if needed.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slava_kuzyakin_7-1748414176916.png" style="width: 455px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266778iBE0B372A7AD69573/image-dimensions/455x363?v=v2" width="455" height="363" role="button" title="slava_kuzyakin_7-1748414176916.png" alt="slava_kuzyakin_7-1748414176916.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-pipeline-concept-features-with-version-1-0-12-improved-handling-of/ba-p/14112869"/>
    <published>2025-05-28T08:56:53.692000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/a-look-into-the-migration-assessment-modernization-recommendation-clean/ba-p/14107032</id>
    <title>A look into the Migration Assessment Modernization Recommendation - Clean Core</title>
    <updated>2025-05-30T09:23:11.898000+02:00</updated>
    <author>
      <name>DeniseRodrigues</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1974289</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Moving from SAP Process Orchestration to SAP Integration Suite shouldn’t be just about &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;migrating&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In order to unlock full potential, increase agility and flexibility and reduce technical debts we have to think about &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;modernization&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The modernization recommendations are used in the &lt;/SPAN&gt;&lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/migration-assessment" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN&gt;Migration Assessment&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt; capability of Cloud Integration. Once you´ve extracted your integration scenarios and executed the Scenario Evaluation, you can find the modernization recommendations in the Dashboard and in the downloadable &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Evaluation Run Results&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; reports - under the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Modernization Recommendations&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; section of the pdf and in the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Recommendations&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;API Recommendations&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; tabs of the excel, as shown below:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;So, you have done your data extraction&amp;nbsp;and opened the respective &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Scenario Evaluation Dashboard&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;. There you can see the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Modernization Recommendations&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; under the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Overview&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; tab, and you have the option to export the results to a spreadsheet or to generate a report.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_0-1747918237840.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/265090i8057D1C044D4B315/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_0-1747918237840.png" alt="DeniseRodrigues_0-1747918237840.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When you open &lt;/SPAN&gt;&lt;SPAN class=""&gt;the pdf &lt;/SPAN&gt;&lt;SPAN class=""&gt;report&lt;/SPAN&gt;&lt;SPAN class=""&gt; there is a section &lt;/SPAN&gt;&lt;SPAN class=""&gt;dedicated to &lt;/SPAN&gt;&lt;SPAN class=""&gt;modernization&lt;/SPAN&gt;&lt;SPAN class=""&gt; recommendations, where you can have an &lt;/SPAN&gt;&lt;SPAN class=""&gt;idea of the integration scenarios that could be improved.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_0-1748364555864.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266553i49CFA93B69780C38/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_0-1748364555864.png" alt="DeniseRodrigues_0-1748364555864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;a similar way&lt;/SPAN&gt;&lt;SPAN class=""&gt;, w&lt;/SPAN&gt;&lt;SPAN class=""&gt;hen you &lt;/SPAN&gt;&lt;SPAN class=""&gt;open the excel &lt;/SPAN&gt;&lt;SPAN class=""&gt;results&lt;/SPAN&gt; &lt;SPAN class=""&gt;you can check &lt;/SPAN&gt;&lt;SPAN class=""&gt;the recommendations for the &lt;/SPAN&gt;&lt;SPAN class=""&gt;possible modernization item &lt;/SPAN&gt;&lt;SPAN class=""&gt;of the &lt;/SPAN&gt;&lt;SPAN class=""&gt;integration scenario&lt;/SPAN&gt; &lt;SPAN class=""&gt;and&lt;/SPAN&gt;&lt;SPAN class=""&gt; the category it falls into.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_1-1747918237841.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/265091i4FE0FFF8ABC05DF6/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_1-1747918237841.png" alt="DeniseRodrigues_1-1747918237841.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;On a different tab, you can also analyze the API recommendations presented based on the extracted &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Object ID&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;, its type, and the proposed solution.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_2-1747918237843.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/265092i7314F690F2E27018/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_2-1747918237843.png" alt="DeniseRodrigues_2-1747918237843.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;And on the next tab, you can see the &lt;/SPAN&gt;&lt;SPAN class=""&gt;recommendations for the existing &lt;/SPAN&gt;&lt;SPAN class=""&gt;Business Event &lt;/SPAN&gt;&lt;SPAN class=""&gt;scenarios.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_1-1748364643847.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266555i125C3F4E3B1835AA/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_1-1748364643847.png" alt="DeniseRodrigues_1-1748364643847.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Those &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/modernization-recommendations" target="_blank" rel="noopener noreferrer"&gt;recommendations&lt;/A&gt; point out where your existing integration scenarios show potential to be updated for optimal usage in Cloud Integration and can be divided in the following categories:&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Clean Core:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on replacing outdated or custom interfaces with standard content or standard APIs to be up to date and in line with SAP product strategy&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Integration Style:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on integration patterns&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Mapping:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on using different mapping approaches&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Monitoring &amp;amp; Operation:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on enhancing monitoring and operations&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Protocol:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on using state-of-the-art communication protocols&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Security:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Recommendations on using state-of-the-art security options in integration scenarios&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Today we will focus on the category&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Clean Core Modernization Recommendations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;As SAP landscapes evolve to meet the demands of agility, scalability, and innovation, the concept of &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Clean Core&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; has become a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;key priority&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. It refers to maintaining a stable, upgrade-friendly SAP system by minimizing customizations and relying on standardized, modern integration practices.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Guiding Principles&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Having that in mind the guiding principles for the clean core modernization rely on four pillars:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Avoid&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; extensions where not necessary and stay as close as possible to SAP standards.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Be Aware &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;of your technical debts, evaluate them on a regular basis and establish a binding governance framework.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Be Cloud Ready &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;by extending and integrating in a stable and transparent manner.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Decouple &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;by leveraging BTP as a platform to innovate for additional differentiation and automate with standard APIs and Events.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Integration Dimension&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;There are some main aspects regarding the integration implementation that you can follow to keep your landscape reliable:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Integrations shall be based on &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;standard APIs&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (OData and SOAP).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Aim for &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;side-by-side extensibility&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; with API integration or even SAP Build, by utilizing the tight coupling with the SAP Cloud Integration.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Loosely coupled integrations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; could be realized in an event-driven design based on standard events.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Avoid&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; traditional APIs (&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;RFC and IDoc&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;) and their related classical extension options.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Ensure&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; proper &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;monitoring&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and error resolution capabilities by utilizing SAP Application Interface Framework.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Three of the most impactful modernization moves include:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;&lt;STRONG&gt;&lt;SPAN&gt;1. Replacing RFCs (BAPIs) with SOAP/OData APIs&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Modern APIs are better suited for integration with both SAP and non-SAP systems, &lt;/SPAN&gt;&lt;SPAN&gt;offering:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Greater flexibility for future changes&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Public documentation and support via SAP Business Accelerator Hub&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Cleaner, standardized interfaces&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;2. Replacing custom interfaces with Pre-Delivered Packages&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Pre-delivered content accelerates implementation and ensures consistency:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Saves development time with ready-to-use mappings and flows&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Built on best practices and regularly updated by SAP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Scalable and adaptable for enterprise growth&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;3. Replace IDOCs with SOAP/OData APIS or Business Events&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using open and standardized protocols like SOAP or OData for event communication &lt;/SPAN&gt;&lt;SPAN&gt;provides benefits like:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Interoperability&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Wider adoption&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Easier integration with non-SAP systems&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The central access point to discover integration artifacts like standard APIs, events and integration flows is &lt;/SPAN&gt;&lt;A href="https://api.sap.com/" target="_blank" rel="noopener noreferrer"&gt;&lt;STRONG&gt;&lt;SPAN&gt;SAP Business Accelerator Hub&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt;&lt;SPAN&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Below you have a step by step of how to find the recommended API and business event highlighted in the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;API Recommendation &lt;/SPAN&gt;&lt;/I&gt;and&lt;I&gt;&lt;SPAN&gt; Business Event Recommendation&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;&amp;nbsp;tabs of the &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;Evaluation Run Results&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; excel.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;So, you opt to move forward with the API &lt;/SPAN&gt;&lt;SPAN class=""&gt;and the Business Event &lt;/SPAN&gt;&lt;SPAN class=""&gt;recommendation&lt;/SPAN&gt;&lt;SPAN class=""&gt;s&lt;/SPAN&gt;&lt;SPAN class=""&gt; and choose the object&lt;/SPAN&gt; &lt;SPAN class=""&gt;you want to replace.&lt;/SPAN&gt; &lt;SPAN class=""&gt;Let’s&lt;/SPAN&gt;&lt;SPAN class=""&gt; take the second line as an &lt;/SPAN&gt;&lt;SPAN class=""&gt;example,&lt;/SPAN&gt; &lt;SPAN class=""&gt;the Object ID is &lt;/SPAN&gt;&lt;SPAN class=""&gt;ORDERS05,&lt;/SPAN&gt; &lt;SPAN class=""&gt;and you will be replacing an &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt;DOC &lt;/SPAN&gt;&lt;SPAN class=""&gt;for &lt;/SPAN&gt;&lt;SPAN class=""&gt;an &lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP S/4HANA &lt;/SPAN&gt;&lt;SPAN class=""&gt;or SAP S/4HANA &lt;/SPAN&gt;&lt;SPAN class=""&gt;Cloud Public Edition&lt;/SPAN&gt; &lt;SPAN class=""&gt;SOAP &lt;/SPAN&gt;&lt;SPAN class=""&gt;API&lt;/SPAN&gt;&lt;SPAN class=""&gt;, &lt;/SPAN&gt;&lt;SPAN class=""&gt;depending on your context&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_3-1747918237844.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/265094i8AC2076F234BEEE6/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_3-1747918237844.png" alt="DeniseRodrigues_3-1747918237844.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;As for the business event&lt;/SPAN&gt;&lt;SPAN class=""&gt;, you will be replacing the IDOC for &lt;/SPAN&gt;&lt;SPAN class=""&gt;a Purchase&lt;/SPAN&gt;&lt;SPAN class=""&gt; Order &lt;/SPAN&gt;&lt;SPAN class=""&gt;Event&lt;/SPAN&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;SPAN class=""&gt; available either on&lt;/SPAN&gt; &lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;SAP S/4HANA&lt;/SPAN&gt;&lt;SPAN class=""&gt; Business Event&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;s&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; or SAP S/4HANA Cloud Public Edition&lt;/SPAN&gt;&lt;SPAN class=""&gt; for Business &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Events,&lt;/SPAN&gt; &lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;according to &lt;/SPAN&gt;&lt;SPAN class=""&gt;your context&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_3-1748365155886.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266558iE7BBFCF01AC95E88/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_3-1748365155886.png" alt="DeniseRodrigues_3-1748365155886.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Note that &lt;/SPAN&gt;&lt;SPAN class=""&gt;in&lt;/SPAN&gt;&lt;SPAN class=""&gt; th&lt;/SPAN&gt;&lt;SPAN class=""&gt;ese&lt;/SPAN&gt; &lt;SPAN class=""&gt;cases&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;we can see that there is a solution available for both S/4HANA versions, but sometimes the &lt;/SPAN&gt;&lt;SPAN class=""&gt;suggestion &lt;/SPAN&gt;&lt;SPAN class=""&gt;might &lt;/SPAN&gt;&lt;SPAN class=""&gt;be only&lt;/SPAN&gt;&lt;SPAN class=""&gt; available for one of the versions (public or private&lt;/SPAN&gt;&lt;SPAN class=""&gt; edition&lt;/SPAN&gt;&lt;SPAN class=""&gt;).&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To find the recommended object you must open the Business Accelerator Hub and look for it. There are multiple ways to do it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can go to the general categories of APIs/Events, where both SAP S/4HANA and SAP S/4HANA Cloud Public Edition will show up.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_4-1748365229041.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266559iE49286DD8C7615B0/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_4-1748365229041.png" alt="DeniseRodrigues_4-1748365229041.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;There, you can search by the name and protocol provided in the &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Evaluation Run Results&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; excel&lt;/SPAN&gt;&lt;SPAN class=""&gt; or by the event name, respectively&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_5-1748365254785.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266560iCF0ADCED9BBFE5EE/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_5-1748365254785.png" alt="DeniseRodrigues_5-1748365254785.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_6-1748365277186.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266561iCE63B520A609ED24/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_6-1748365277186.png" alt="DeniseRodrigues_6-1748365277186.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;As an alternative&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can go directly to SAP S/4HANA Cloud Public Edition &lt;/SPAN&gt;&lt;SPAN class=""&gt;and search there&lt;/SPAN&gt;&lt;SPAN class=""&gt; for the &lt;/SPAN&gt;&lt;SPAN class=""&gt;P&lt;/SPAN&gt;&lt;SPAN class=""&gt;ublic &lt;/SPAN&gt;&lt;SPAN class=""&gt;Edition&lt;/SPAN&gt;&lt;SPAN class=""&gt; solution&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_7-1748365370809.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266562iEB9CA1A2CE5644D6/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_7-1748365370809.png" alt="DeniseRodrigues_7-1748365370809.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_8-1748365406059.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266563iEFFFCF0256A3C1C6/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_8-1748365406059.png" alt="DeniseRodrigues_8-1748365406059.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_9-1748365417920.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266564i2B29CC403FE7C628/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_9-1748365417920.png" alt="DeniseRodrigues_9-1748365417920.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;a similar way&lt;/SPAN&gt;&lt;SPAN class=""&gt;,&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can go directly to SAP S/4HANA Cloud Private Edition and search there&lt;/SPAN&gt;&lt;SPAN class=""&gt; for the S/4HANA solution either for the API or for the business event&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;For an even more refined result&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can search by the API &lt;/SPAN&gt;&lt;SPAN class=""&gt;or the event &lt;/SPAN&gt;&lt;SPAN class=""&gt;technical name&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt; &lt;SPAN class=""&gt;and get a 1:1 match.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_10-1748365482987.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266565i2D27684F9825FCD4/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_10-1748365482987.png" alt="DeniseRodrigues_10-1748365482987.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_11-1748365498619.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266566i8B81AECC8F20E560/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_11-1748365498619.png" alt="DeniseRodrigues_11-1748365498619.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;Once you find &lt;/SPAN&gt;&lt;SPAN class=""&gt;it,&lt;/SPAN&gt;&lt;SPAN class=""&gt; you can &lt;/SPAN&gt;&lt;SPAN class=""&gt;access the specification&lt;/SPAN&gt;&lt;SPAN class=""&gt; and use it&lt;/SPAN&gt;&lt;SPAN class=""&gt; on Cloud Integration.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_12-1748365540469.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266567iA0C84BF37AE10453/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_12-1748365540469.png" alt="DeniseRodrigues_12-1748365540469.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="DeniseRodrigues_13-1748365550321.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266568iB0757FA357CDAA9D/image-size/large?v=v2&amp;amp;px=999" role="button" title="DeniseRodrigues_13-1748365550321.png" alt="DeniseRodrigues_13-1748365550321.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Note that &lt;/SPAN&gt;&lt;SPAN class=""&gt;after th&lt;/SPAN&gt;&lt;SPAN class=""&gt;e&lt;/SPAN&gt;&lt;SPAN class=""&gt; replacement, either by&lt;/SPAN&gt; &lt;SPAN class=""&gt;S/4HANA or &lt;/SPAN&gt;&lt;SPAN class=""&gt;S/4HANA&lt;/SPAN&gt;&lt;SPAN class=""&gt; Cloud&lt;/SPAN&gt;&lt;SPAN class=""&gt; Public&lt;/SPAN&gt; &lt;SPAN class=""&gt;Edition &lt;/SPAN&gt;&lt;SPAN class=""&gt;API&lt;/SPAN&gt;&lt;SPAN class=""&gt;/&lt;/SPAN&gt;&lt;SPAN class=""&gt;Event,&lt;/SPAN&gt;&lt;SPAN class=""&gt; further &lt;/SPAN&gt;&lt;SPAN class=""&gt;changes in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt;F&lt;/SPAN&gt;&lt;SPAN class=""&gt;low&lt;/SPAN&gt; &lt;SPAN class=""&gt;may &lt;/SPAN&gt;&lt;SPAN class=""&gt;be &lt;/SPAN&gt;&lt;SPAN class=""&gt;required&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt; &lt;SPAN class=""&gt;At the moment&lt;/SPAN&gt;&lt;SPAN class=""&gt; that &lt;/SPAN&gt;&lt;SPAN class=""&gt;additional&lt;/SPAN&gt;&lt;SPAN class=""&gt; effort is not being &lt;/SPAN&gt;&lt;SPAN class=""&gt;considered&lt;/SPAN&gt; &lt;SPAN class=""&gt;on the effort estimation&lt;/SPAN&gt;&lt;SPAN class=""&gt; results,&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN class=""&gt;&lt;SPAN class=""&gt;so it is important&lt;/SPAN&gt; &lt;SPAN class=""&gt;not only &lt;/SPAN&gt;&lt;SPAN class=""&gt;to have that in mind &lt;/SPAN&gt;&lt;SPAN class=""&gt;but also &lt;/SPAN&gt;&lt;SPAN class=""&gt;to &lt;/SPAN&gt;&lt;SPAN class=""&gt;verify &lt;/SPAN&gt;&lt;SPAN class=""&gt;if th&lt;/SPAN&gt;&lt;SPAN class=""&gt;at&lt;/SPAN&gt;&lt;SPAN class=""&gt; given &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;A class="" href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/modernization-recommendations#loiod337a6f0d324405f9ef0c410fd0d3739__section_kfp_nmx_fbc" target="_blank" rel="noreferrer noopener"&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;recommendation&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN class=""&gt; &lt;SPAN class=""&gt;fulfills &lt;/SPAN&gt;&lt;SPAN class=""&gt;all the necessary functional requirements &lt;/SPAN&gt;&lt;SPAN class=""&gt;currently in place for the given business scenario&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Final Thoughts&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Modernizing your integration landscape isn’t just about following trends—it’s about future-proofing your SAP environment. By replacing outdated technologies with standardized APIs and leveraging prebuilt content, you move closer to a Clean Core that’s easier to maintain, more responsive to business needs, and ready for the future.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Think strategically, start simple, and scale confidently by adopting SAP’s recommendations and incrementally build a cleaner and smarter core.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;SAP Help Pages&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;To explore in more detail the Migration Assessment, refer to &lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/migration-assessment" target="_blank" rel="noopener noreferrer"&gt;Migration Assessment&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/automatically-assess-your-migration-from-sap-process-orchestration-systems/ba-p/13555563" target="_blank"&gt;Automatically assess your migration&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;To get information on Modernization Recommendations, refer to&amp;nbsp;&lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/modernization-recommendations#loiod337a6f0d324405f9ef0c410fd0d3739__section_kfp_nmx_fbc" target="_blank" rel="noopener noreferrer"&gt;Modernization Recommendations&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/a-look-into-the-migration-assessment-modernization-recommendation-clean/ba-p/14107032"/>
    <published>2025-05-30T09:23:11.898000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/partner-directory-accelerator-tool-for-pipeline-concept/ba-p/14095019</id>
    <title>Partner Directory Accelerator Tool for Pipeline Concept</title>
    <updated>2025-06-16T17:00:09.584000+02:00</updated>
    <author>
      <name>LorenaHanser</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1471152</uri>
    </author>
    <content>&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-unicode-emoji" title=":warning:"&gt;⚠️&lt;/span&gt;&amp;nbsp;&lt;STRONG&gt;Disclaimer&lt;/STRONG&gt;: The helper tool described in this blog post is not an official product by SAP, but is available as &lt;A title="SAP Open Source project &amp;quot;Partner Directory Accelerator for Pipeline Concept&amp;quot;" href="https://github.com/SAP-samples/integration-suite-partner-directory-accelerator-for-pipeline-concept" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Open Source project&lt;/A&gt;, intended to accelerate the interaction with the Partner Directory for the Pipeline Concept.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1581104112"&gt;&lt;FONT size="6"&gt;Purpose&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;The Partner Directory Accelerator Tool supports the Pipeline Concept, which is introduced in a&amp;nbsp;&lt;A title="SAP Community blog: Introducing the new pipeline concept in Cloud Integration" href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-the-new-pipeline-concept-in-cloud-integration/ba-p/13639651" target="_blank"&gt;SAP Community blog&lt;/A&gt;&amp;nbsp;by&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/45178"&gt;@alex_bundschuh&lt;/a&gt;&amp;nbsp;and further documented in&amp;nbsp;&lt;A title="SAP Help on Pipeline Concept" href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/pipeline-concept" target="_blank" rel="noopener noreferrer"&gt;SAP Help&lt;/A&gt;. Before using this helper tool, please make yourself familiar with the Pipeline Concept itself.&lt;/P&gt;&lt;P&gt;The Pipeline Concept relies on data from the Partner Directory which is needed during message processing. The Partner Directory can be accessed through a user interface (UI) in the SAP Integration Suite (or via the Partner Directory API). Here, you can upload existing &lt;A title="SAP Help on XSLT mappings for Pipeline Concept" href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/using-partner-directory-in-pipeline-concept#xslt-mappings" target="_blank" rel="noopener noreferrer"&gt;XSLT mappings&lt;/A&gt; after creating them manually, yet the Partner Directory UI itself does not support you in creating these XSLTs.&lt;/P&gt;&lt;P&gt;That is why the purpose of the helper tool is to accelerate the interaction with the Partner Directory for the Pipeline Concept. To do so, a Pipeline Concept-specific UI is provided which accesses the Partner Directory data via its &lt;A title="Partner Directory API in SAP Business Accelerator Hub" href="https://hub.sap.com/api/PartnerDirectory/overview" target="_blank" rel="noopener noreferrer"&gt;API&lt;/A&gt;, allowing you to easily create or update XSLT mappings and other required content, and to replicate these Partner Directory entries to another tenant.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1384590607"&gt;&lt;FONT size="6"&gt;Key Features&lt;/FONT&gt;&lt;/H1&gt;&lt;H2 id="toc-hId-1317159821"&gt;&lt;FONT size="5"&gt;XSLT Generation for Receiver Determination and Interface Determination&lt;/FONT&gt;&lt;/H2&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LorenaHanser_0-1749108800168.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/269980i9C3A4417D35F147B/image-size/large?v=v2&amp;amp;px=999" role="button" title="LorenaHanser_0-1749108800168.png" alt="LorenaHanser_0-1749108800168.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;P&gt;For receiver determination and interface determination, the Pipeline Concept offers different options on XSLT mappings, e.g., either&lt;STRONG&gt; one combined or multiple single XSLT mappings&lt;/STRONG&gt; can be used. For both options, the helper tool supports the &lt;STRONG&gt;creation and&amp;nbsp;maintenance&lt;/STRONG&gt; of new and existing XSLT mappings. For that, a &lt;STRONG&gt;tabular input format&lt;/STRONG&gt; is used in which you can maintain XPath conditions (if required) and the resulting receiver system / receiver interface. When triggering the generation of an XSLT, a &lt;STRONG&gt;XSLT syntax check&lt;/STRONG&gt; is performed and the resulting XSLT is shown, which can be directly sent to the API.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;H2 id="toc-hId-1120646316"&gt;&lt;FONT size="5"&gt;Replication of Partner Directory Entries to another Tenant&lt;/FONT&gt;&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LorenaHanser_1-1749108832111.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/269981i7A179DC65FFDBB45/image-size/large?v=v2&amp;amp;px=999" role="button" title="LorenaHanser_1-1749108832111.png" alt="LorenaHanser_1-1749108832111.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the helper tool, you can configure multiple tenants by providing respective credentials (which are only stored locally). Once you have configured more than one tenant, you can &lt;STRONG&gt;replicate Partner Directory entries to another tenant&lt;/STRONG&gt;. To do so, select the relevant entries as well as the target tenant, and the tool takes over for you to create (and update if desired) these entries in your selected target tenant. One use case could be to replicate Partner Directory entries from a development tenant to a productive tenant.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-795050092"&gt;&lt;FONT size="6"&gt;Use the Tool&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;The tool is publicly available as SAP Open Source Project&lt;/STRONG&gt;. All information on supported features, setup, usage, and contribution is maintained in this repository:&amp;nbsp;&lt;BR /&gt;&lt;STRONG&gt;&lt;A href="https://github.com/SAP-samples/integration-suite-partner-directory-accelerator-for-pipeline-concept" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-samples/integration-suite-partner-directory-accelerator-for-pipeline-concept&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/partner-directory-accelerator-tool-for-pipeline-concept/ba-p/14095019"/>
    <published>2025-06-16T17:00:09.584000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/process-integration-pipeline-extension-restart-via-data-store/ba-p/14153116</id>
    <title>Process Integration Pipeline Extension - Restart via Data Store</title>
    <updated>2025-07-23T17:38:26.286000+02:00</updated>
    <author>
      <name>mate_moricz</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/191315</uri>
    </author>
    <content>&lt;P&gt;If you use the &lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/overview" target="_self" rel="noopener noreferrer"&gt;Process Integration Pipeline concept&lt;/A&gt; on your SAP Cloud Integration tenant, then you'll be familiar with the error handling process. In case of a message processing error, the message will be retried from the JMS processing queues and upon reaching the maximum number of retries, the message is sent to a Dead Letter Queue (DLQ) to stop further processing. The message then has to be &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/monitoring-and-error-handling-pipeline-concept#dead-letter-queue-handling" target="_self" rel="noopener noreferrer"&gt;moved&lt;/A&gt; from the DLQ back to the processing queues of the pipeline.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="move_jms.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286931iB391DAA7CA2855E5/image-size/large?v=v2&amp;amp;px=999" role="button" title="move_jms.png" alt="move_jms.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The move feature in the queue monitor only enables you to move all messages within a queue. Currently, you can't move a single message from one queue to another. Selective message move is a &lt;A href="https://roadmaps.sap.com/board?PRODUCT=000D3A47875C1EDB98A8A910864AC24B&amp;amp;q=move&amp;amp;range=CURRENT-LAST#;INNO=CB93051A54FD1EDFBDB6AEC234D1AC40" target="_self" rel="noopener noreferrer"&gt;planned roadmap item for Q3 2025.&lt;/A&gt;&lt;/P&gt;&lt;P&gt;There are multiple restrictions imposed by this retry handling process:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;It is not possible to figure out to which scenarios the messages belong in the DLQ&lt;/LI&gt;&lt;LI&gt;It is not possible to schedule a restart job with periodic retries of erroneous messages.&lt;/LI&gt;&lt;LI&gt;It is not possible to execute selective move of messages from JMS queue (to be solved by Q3 2025 as mentioned).&lt;/LI&gt;&lt;LI&gt;There is no API to move messages from DLQ to normal processing queues.&lt;/LI&gt;&lt;LI&gt;There is no API to read JMS queue content and select required messages based on query conditions (JMS Message ID cannot be set from an Integration Flow and there is not any configurable tag for JMS message).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;An additional aspect is the resource limit of the JMS broker:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;There is a hard size limit of JMS broker and JMS queues (default 95% of broker). In case of an unplanned outage of a receiver system, messages might be flooding generic pipeline queues like Outbound (Q4) JMS queue.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;To solve these issues, we have created a package called the&amp;nbsp;&lt;A href="https://hub.sap.com/package/processintegrationpipelineextensionrestartviadatastore/overview" target="_self" rel="noopener noreferrer"&gt;Process Integration Pipeline Extension - Restart via Data Store&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;which is now available in SAP Business Accelerator Hub. This package helps to automate message retries via scheduled jobs and APIs by utilizing Data Stores instead of DLQs on the JMS broker. There is no change required to the standard&amp;nbsp;Process Integration Pipeline package due to the available &lt;A href="https://community.sap.com/t5/integration-blog-posts/latest-pipeline-concept-enhancements-custom-error-handling-and-others/ba-p/13757664" target="_self"&gt;custom error handling extension&lt;/A&gt;&amp;nbsp;from version&amp;nbsp;1.0.5 on.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This blog describes the concept of the extension, but not the detailed configuration of each Integration Flow.. A detailed configuration guide is attached to the Integration Package.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1735063274"&gt;Integration Package contents&lt;/H2&gt;&lt;P&gt;The package consists of multiple Integration Flows and a Script Collection. Below schema describes the logical connection between the Integration Flows.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mate_moricz_1-1753260008506.png" style="width: 911px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290178i5594727031643E89/image-dimensions/911x435?v=v2" width="911" height="435" role="button" title="mate_moricz_1-1753260008506.png" alt="mate_moricz_1-1753260008506.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pipeline DS Retry - Custom Error Handling with Data Stores&lt;/STRONG&gt;&lt;SPAN&gt;. This Integration Flow implements Custom Error Handling for exceptions occurring in the generic steps of the Process Integration Pipeline. It leverages the public Pipeline extension exit, as described in the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/monitoring-and-error-handling-pipeline-concept#loioed9b82cb928049e6990a4d784aa6aac7__section_pm1_ggs_5bc" target="_blank" rel="noopener noreferrer"&gt;Custom Exception Handling documentation&lt;/A&gt;. Its primary function is to determine whether retries should continue through the JMS persistence layer or, if all configured JMS retries are exhausted, to move the message out of the queue into the Data Store while capturing all necessary restart attributes and forming the Data Store entry body.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pipeline DS Retry - Restart Executor from Data Store to JMS&lt;/STRONG&gt;&lt;SPAN&gt;. This Integration Flow handles message reprocessing by moving messages from the Data Store back to the source JMS processing queue, allowing the JMS layer to manage the actual retry process. It is triggered via Process Direct and requires XML input specifying the source Data Store, maximum retry count, and the retry subject – either a list of Data Store entry names or an Interface PID for dynamically retrying all associated Data Store entries.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pipeline DS Retry - Template - Restart Job&lt;/STRONG&gt;&lt;SPAN&gt;. This Integration Flow represents a Restart Job that automatically reprocesses messages from the Data Store based on assigned restart configuration profiles. Execution is scheduled using a Start Timer event. Provided as a template, this Integration Flow allows for the creation of multiple customized copies in a custom package, with different Job Profiles maintained in the Partner Directory.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pipeline API - Data Store Manage Retries &lt;/STRONG&gt;&lt;SPAN&gt;(Optional). This Integration Flow enables on-demand restart operations via API clients like Postman. It exposes an HTTP endpoint to trigger restarts for specified Data Store entries or based on selection criteria. Additional operations allow users to retrieve a list of Data Stores in the tenant, fetch entries from a specific Data Store, and move entries between Data Stores (e.g., transferring entries from the “Retry” Data Store to the “NoRetry” Data Store to prevent automatic retriggering).&lt;/SPAN&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Pipeline API - Data Store Manage Entries &lt;/STRONG&gt;&lt;SPAN&gt;(Optional). This Integration Flow provides API-based management of Data Store entries, separate from the "Manage Retries" API, to enforce role-based access. It allows users to read messages from a selected Data Store, delete messages (individually or based on query conditions), and add messages to the Data Store (this capability can be disabled at the Integration Flow level).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1538549769"&gt;Data Store Entry Format&lt;/H2&gt;&lt;P&gt;The&amp;nbsp;&lt;EM&gt;Pipeline DS Retry - Custom Error Handling with Data Stores &lt;/EM&gt;Integration Flow will write the messages into Data Stores in a specific pattern which can be used to easily identify the corresponding scenario, message restart by filter criteria.&amp;nbsp; The following pattern is used:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;PartnerId&lt;SPAN&gt;~PipelineStage(~Receiver )~MplId~UTC-Timestamp(~RetryCount )&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;PartnerId (Mandatory)&lt;/STRONG&gt;&lt;SPAN&gt; – A unique identifier in the Process Integration Pipeline that defines the configuration scenario. It is derived from the sender system name and sender interface name. More details can be found in the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/using-partner-directory-in-pipeline-concept#partner-id" target="_blank" rel="noopener noreferrer"&gt;Partner ID documentation&lt;/A&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;PipelineStage (Mandatory)&lt;/STRONG&gt;&lt;SPAN&gt; – Identifies the stage in the Process Integration Pipeline where the exception occurred. &lt;/SPAN&gt;It uses predefined two-letter identifiers enclosed in parentheses (e.g., (IB)), resulting in a four-character code&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;(IB)&lt;/STRONG&gt;&lt;SPAN&gt; – Inbound Stage: The message was received by an inbound Integration Flow, stored in the first JMS queue, and encountered an exception during the next processing step.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;(RD)&lt;/STRONG&gt;&lt;SPAN&gt; – Receiver Determination Stage: The inbound conversion was successful, but an error occurred while identifying the receiver system.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;(ID)&lt;/STRONG&gt;&lt;SPAN&gt; – Interface Determination Stage: The receiver system was identified, but an error occurred while determining the target inbound interface for that receiver (i.e., the Process Direct endpoint of the outbound Integration Flow).&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;(OB)&lt;/STRONG&gt;&lt;SPAN&gt; – Outbound Stage: The message was successfully routed, but an error occurred during message conversion to the outbound format or while transmitting data to the receiver. This is the most common error-handling stage.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;(NA)&lt;/STRONG&gt;&lt;SPAN&gt; – The error originated from an unknown or custom Integration Flow (e.g., a copy of the generic flow or an interface-specific flow connected to the retry extension).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Receiver (Optional)&lt;/STRONG&gt;&lt;SPAN&gt; – The receiver business system or alias to which the message is to be delivered. This field is optional because in the |IB| and |RD| stages, the receiver is still unknown. It is assigned only starting from the |ID| stage.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;MplId (Mandatory)&lt;/STRONG&gt;&lt;SPAN&gt; – The Message Processing Log ID (Message GUID) of the erroneous message, a 28-character unique identifier assigned to each message in Cloud Integration. Even though the Message Processing Log ID is directly visible in the Data Store UI, this identifier is required to guarantee uniqueness in terms of Data Store entry ID as a timestamp will not guarantee uniqueness.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;UTC-Timestamp (Mandatory)&lt;/STRONG&gt;&lt;SPAN&gt; – A timestamp marking when the message first entered the Custom Error Handling Integration Flow. It follows the ISO 8601 format:&amp;nbsp;&lt;/SPAN&gt;yyyy-MM-dd'T'HH:mm:ss.SSS'Z' (Example: 2025-04-20T06:51:11.123Z)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;RetryCount (Optional)&lt;/STRONG&gt;&lt;SPAN&gt; – A counter tracking Data Store restart attempts. For a new erroneous message using Data Store-based restarts, this counter starts at 0 and increments with each retry attempt. This prevents exceeding the maximum allowed retries (MaxDataStoreRetries).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The entry written to the Data Store contains the message payload and the potential attachments in a Base64-encoded format. Additionally a message header is included which contains metadata required for further processing such as:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The source JMS queue where the message will be placed for reprocessing&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The entry name of the Data Store record&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The Data Store name used for reprocessing&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The maximum retry count assigned to the interface in the Partner Directory (or a default of 3 retries from the Data Store)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The exception message, also stored in Base64-encoded format&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The structure looks as follows:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;Message&amp;gt;
	&amp;lt;MsgHeader&amp;gt;
		&amp;lt;RestartQueue&amp;gt;${property.SourceJMSQueue}&amp;lt;/RestartQueue&amp;gt;
		&amp;lt;EntryID&amp;gt;${property.EntryID}&amp;lt;/EntryID&amp;gt;
		&amp;lt;RetryDataStore&amp;gt;${property.RetryDataStore}&amp;lt;/RetryDataStore&amp;gt;
		&amp;lt;MaxRetryCount&amp;gt;${property.MaxDataStoreRetries}&amp;lt;/MaxRetryCount&amp;gt;
		&amp;lt;Error&amp;gt;exception.message.Base64encoded&amp;lt;/Error&amp;gt;
	&amp;lt;/MsgHeader&amp;gt;
	&amp;lt;Payload&amp;gt;Payload.Base64encoded&amp;lt;/Payload&amp;gt;
	&amp;lt;Attachments&amp;gt; (minOccurs="0")
		&amp;lt;Attachment&amp;gt; (maxOccurs="unbounded")
			&amp;lt;AttachmentName&amp;gt;attachmentName&amp;lt;/AttachmentName&amp;gt;
			&amp;lt;AttachmentContentType&amp;gt;contType&amp;lt;/AttachmentContentType&amp;gt;
			&amp;lt;AttachmentContent&amp;gt;content.Base64&amp;lt;/AttachmentContent&amp;gt;
		&amp;lt;/Attachment&amp;gt;
	&amp;lt;/Attachments&amp;gt;
&amp;lt;/Message&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1342036264"&gt;Data Store Options&lt;/H2&gt;&lt;P&gt;The extension package utilizes two data store options: RetryStore and NoRetryStore. The Integration Flow &lt;EM&gt;Pipeline DS Retry - Custom Error Handling with Data Stores&lt;/EM&gt;&amp;nbsp;determines – based on the number of JMS retries, PartnerId configuration in Partner Directory and the pipeline Stage where the error occurred – into which kind of Data Store the message is placed.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;RetryStore&lt;/STRONG&gt;&lt;SPAN&gt; – If a message should be automatically restarted in case of an error in inbound or outbound processing or in the integrated runtime, it will be put into this store. The messages in this store option can be restarted via the Restart Job Template Integration Flow. If the maximum number of retries is not reached for restarted messages, they will be put back into this store with an increased retry counter.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;NoRetryStore&lt;/STRONG&gt;&lt;SPAN&gt; – If a message should not be restarted automatically in case of failing receiver or interface determination or when the maximum number of retries have been reached by an already restarted message, it will be put into this store. The messages in this store option can be restarted explicitly &lt;/SPAN&gt;&lt;SPAN&gt;via the Integration Flow &lt;EM&gt;Pipeline API - Data Store Manage Retries&amp;nbsp;&lt;/EM&gt;or via even by the Restart Job if needed.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1145522759"&gt;Restart configuration settings for scenarios&lt;/H2&gt;&lt;P&gt;The Integration Flow &lt;EM&gt;&lt;I&gt;Pipeline DS Retry - Custom Error Handling with Data Stores&lt;/I&gt;&lt;/EM&gt;&amp;nbsp;will put the failed messages into Data Stores based on &lt;EM&gt;&lt;I&gt;PartnerId&lt;/I&gt;&lt;/EM&gt; configuration defined in the Partner Directory via String Parameters. If the configuration is missing in the Partner Directory for a given &lt;EM&gt;&lt;I&gt;PartnerId&lt;/I&gt;&lt;/EM&gt;, default values will be applied.&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;RetryDataStore&lt;/STRONG&gt;&lt;SPAN&gt; – Defines the name of the Data Store where the erroneous message should be stored in case of exceeding maximum number of retry attempts at JMS layer.&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Note that even when set to a specific value, messages destined for the &lt;EM&gt;&lt;I&gt;NoRetryStore&lt;/I&gt;&lt;/EM&gt; will have the “&lt;EM&gt;&lt;I&gt;_NoRetry”&lt;/I&gt;&lt;/EM&gt; postfix appended to the Data Store name and they require no explicit configuration.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;If &lt;EM&gt;&lt;I&gt;RetryDataStore&lt;/I&gt;&lt;/EM&gt; String parameter is not set for the &lt;EM&gt;&lt;I&gt;PartnerId&lt;/I&gt;&lt;/EM&gt;, then the data store names used will be &lt;EM&gt;&lt;I&gt;&amp;lt;PartnerId&amp;gt;_Retry&lt;/I&gt;&lt;/EM&gt; and &lt;EM&gt;&lt;I&gt;&amp;lt;PartnerId&amp;gt;_NoRetry&lt;/I&gt;&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;restartMode&lt;/STRONG&gt;&lt;SPAN&gt; – Can be set to either &lt;STRONG&gt;&lt;EM&gt;&lt;I&gt;DS&lt;/I&gt;&lt;/EM&gt; &lt;/STRONG&gt;(Data Store) or &lt;STRONG&gt;&lt;EM&gt;&lt;I&gt;JMS&lt;/I&gt;&lt;/EM&gt; &lt;/STRONG&gt;(JMS queue) to define how the messages should be restarted. Default option is &lt;STRONG&gt;&lt;EM&gt;&lt;I&gt;DS&lt;/I&gt;&lt;/EM&gt;&lt;/STRONG&gt; if not set.&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;DS:&lt;/STRONG&gt;&lt;SPAN&gt; putting a message back to the JMS queue, but in case of an error immediately taking it to a Data Store (preferred and default)&lt;/SPAN&gt;&lt;SPAN&gt;.&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;JMS:&lt;/STRONG&gt;&lt;SPAN&gt; putting a message back to the JMS queue and in case of an error executing retries in this JMS queue according to the maximum number of JMS retries&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;MaxDataStoreRetries&lt;/STRONG&gt;&lt;SPAN&gt; – Defines the number of retries after a restart of a message. If the limit is reached, the messaged is moved into the “&lt;EM&gt;&lt;I&gt;_NoRetry”&lt;/I&gt;&lt;/EM&gt; Data Store. &lt;/SPAN&gt;Default number is 5.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mate_moricz_2-1753260232208.png" style="width: 679px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290183iB0248737819ED8F1/image-dimensions/679x404?v=v2" width="679" height="404" role="button" title="mate_moricz_2-1753260232208.png" alt="mate_moricz_2-1753260232208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-949009254"&gt;Restart job configuration&amp;nbsp;&lt;/H2&gt;&lt;P&gt;The Integration Flow “&lt;EM&gt;&lt;I&gt;Pipeline DS Retry - Template - Restart Job&lt;/I&gt;&lt;/EM&gt;” relies on the configuration of different Restart Job Profiles. Multiple variants can be configured to have different scheduled versions of the Restart Job for specific interfaces.&lt;/P&gt;&lt;P&gt;Note that interfaces must be explicitly specified, no regex pattern is applicable in the profiles. Also, there is no default Job Profile applicable for all integration scenarios, i.e. if there is no defined job profile for the interface – the messages won’t be restarted&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Status&lt;/STRONG&gt;&lt;SPAN&gt; – Can be set to “&lt;EM&gt;&lt;I&gt;active”&lt;/I&gt;&lt;/EM&gt; or “&lt;EM&gt;&lt;I&gt;inactive”&lt;/I&gt;&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;InterfacePidList&lt;/STRONG&gt;&lt;SPAN&gt; – Defines the list of the interfaces (or integration scenarios) for which the message restarts should be triggered. Multiple scenarios can be set by using the character semicolon &lt;STRONG&gt;&lt;EM&gt;&lt;I&gt;“;”&lt;/I&gt;&lt;/EM&gt;&lt;/STRONG&gt; as a delimiter. The Restart Job will consider the scenario-specific configuration defined in the Partner Directory (assigned Data Store, number of retries and restart mode).&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Store&lt;/STRONG&gt;&lt;SPAN&gt; – (&lt;/SPAN&gt;&lt;SPAN&gt; If not set, &lt;EM&gt;&lt;I&gt;Retry&lt;/I&gt;&lt;/EM&gt; stores will be always&amp;nbsp;used (with value &lt;EM&gt;&lt;I&gt;Retry&lt;/I&gt;&lt;/EM&gt;). In case of emergencies or if the API based restart can’t be used, restart from the &lt;EM&gt;&lt;I&gt;NoRetryStore&lt;/I&gt;&lt;/EM&gt; can be set for scheduled Restart Jobs. &lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Filters within the Restart Job Profile. If not set, all entries from the given Data Store will be restarted.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Receiver&lt;/STRONG&gt;&lt;SPAN&gt; – (&lt;/SPAN&gt; &lt;SPAN&gt;Receiver name to select all the entries from the Data Store that belong to the specified receiver (for the stages when receiver is unknown (e.g. Inbound), the value “&lt;EM&gt;&lt;I&gt;null&lt;/I&gt;&lt;/EM&gt;” can be sent and then all entries without receiver will be selected). Example of value: &lt;EM&gt;&lt;I&gt;“S4HCLNT100”. &lt;/I&gt;&lt;/EM&gt;Note that the parameter setting is global for all interfaces maintained in the &lt;EM&gt;&lt;I&gt;InterfacePidList&lt;/I&gt;&lt;/EM&gt; parameter, it can’t be set for each interface separately.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;TimeFrom&lt;/STRONG&gt;&lt;SPAN&gt; – (Optional parameter): Interval start timestamp in UTC format to select all the entries from the Data Store that have timestamp in DS Entry name later than specified timestamp. Example of value: “&lt;EM&gt;&lt;I&gt;2025-06-01T09:00:00.000Z&lt;/I&gt;&lt;/EM&gt;”.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;TimeTo&lt;/STRONG&gt;&lt;SPAN&gt; – (Optional parameter): Interval end timestamp in UTC format to select all the entries from the Data Store that have timestamp in DS Entry name earlier than specified timestamp. Example of value: “&lt;EM&gt;&lt;I&gt;2025-06-02T09:00:00.000Z&lt;/I&gt;&lt;/EM&gt;”.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mate_moricz_1-1753261119683.png" style="width: 601px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290215i9B8F1F9C2D096BAA/image-dimensions/601x275?v=v2" width="601" height="275" role="button" title="mate_moricz_1-1753261119683.png" alt="mate_moricz_1-1753261119683.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Below screenshot shows a Restart Job profile with the optional parameters.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mate_moricz_2-1753261204824.png" style="width: 599px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290216iC66249024E4F1415/image-dimensions/599x384?v=v2" width="599" height="384" role="button" title="mate_moricz_2-1753261204824.png" alt="mate_moricz_2-1753261204824.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The Restart Job from the template Integration Flow &lt;EM&gt;&lt;I&gt;Pipeline DS Retry - Template - Restart Job&lt;/I&gt;&lt;/EM&gt;&amp;nbsp;can be configured to use a schedule-based trigger (start Timer event). Default configuration is to run &lt;EM&gt;&lt;I&gt;On Deployment.&lt;/I&gt;&lt;/EM&gt;&lt;/P&gt;&lt;DIV&gt;&lt;H2 id="toc-hId-752495749"&gt;&lt;SPAN&gt;On-Demand Restarts or Data Store management via HTTP API&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;There are 2 optional Integration Flows in the package which can be used for on-demand operations. They expose 2 HTTP endpoints to manage Retry related operations and to manage Data Store entries. The functionality is divided into 2 Integration Flows for more granular control on authorization level who is allowed to call Restart operations only and who is allowed to Cancel messages (manipulate Data Store entries).&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mate_moricz_0-1753261055289.png" style="width: 947px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290213i2EE2FC23FCB080E3/image-dimensions/947x424?v=v2" width="947" height="424" role="button" title="mate_moricz_0-1753261055289.png" alt="mate_moricz_0-1753261055289.png" /&gt;&lt;/span&gt;&lt;DIV&gt;&lt;P&gt;These 2 additional Integration Flows are acting as APIs for more granular control of messages in the Data Stores than the Restart Job. On the other hand, these must be handled with caution as it requires deep understanding of the extension package on how to restart a corresponding package.&lt;/P&gt;&lt;H2 id="toc-hId-555982244"&gt;Configuration steps to use the package&lt;/H2&gt;&lt;DIV&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Configure and Deploy mandatory Integration Artefacts of DS Restart Extension package.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Assign Data Store Restart Configuration for Configuration Scenarios in Partner Directory.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Enable Custom Exception Handling in generic Integration Flows of Process Integration Pipeline package.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create Restart Job Profiles in Partner Directory.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create a Restart Job Integration Flow from Template, Configure Parameters and Deploy.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;(Optional) Configure and Deploy Integration Flows for On-Demand Restarts or Data Store management via HTTP API.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-359468739"&gt;Further improvements&lt;/H2&gt;&lt;P&gt;We are planning to add further improvements to the package such as:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Configurable no restart stages&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Add default Restart Job Profile if scenarios are not maintained explicitly&lt;/LI&gt;&lt;LI&gt;Catch mapping errors in the outbound stages and move these messages into the NoRetry store (as there is no option to edit a message like in SAP PO)&lt;/LI&gt;&lt;LI&gt;Catch routing errors for the Integrated Messaging Runtime&lt;/LI&gt;&lt;LI&gt;Current Receiver filter in the Restart Job Profile setting is global, needs to be changed to scenario-specific filter&lt;/LI&gt;&lt;LI&gt;Add extension point in the&amp;nbsp;&lt;EM&gt;Pipeline DS Retry - Custom Error Handling with Data Stores&amp;nbsp;&lt;/EM&gt;Integration Flow for potential custom alerting requirement&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;If you have any further ideas to enhance the package, let us know in the comments.&lt;/P&gt;&lt;H2 id="toc-hId-162955234"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;The &lt;EM&gt;Process Integration Pipeline Extension - Restart via Data Store&lt;/EM&gt; package offers a viable solution to the challenges faced when utilizing the Process Integration Pipeline concept. By automating message retries through scheduled jobs and APIs, and shifting reliance from Dead Letter Queues to Data Stores,&amp;nbsp;&lt;SPAN&gt;users can effectively manage message restarts as an alternative to the standard error handling of the Pipeline concept. By leveraging the Pipeline’s custom exit for error handling, this can be achieved without requiring changes to the standard Process Integration Pipeline package.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/process-integration-pipeline-extension-restart-via-data-store/ba-p/14153116"/>
    <published>2025-07-23T17:38:26.286000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/new-integration-packages-for-the-pipeline-for-cloud-integration/ba-p/14175339</id>
    <title>New integration packages for the Pipeline for Cloud Integration</title>
    <updated>2025-08-08T15:08:45.923000+02:00</updated>
    <author>
      <name>alex_bundschuh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/45178</uri>
    </author>
    <content>&lt;P&gt;I would like to share with you an important change for the &lt;A href="https://help.sap.com/docs/migration-guide-po/migration-guide-for-sap-process-orchestration/pipeline-concept" target="_blank" rel="noopener noreferrer"&gt;Pipeline for Cloud Integration&lt;/A&gt; that we did based on feedback we received from customers running the Pipeline. As a result, &lt;STRONG&gt;new integration packages for supporting the Pipeline for Cloud Integration has been recently shipped&lt;/STRONG&gt; on the&amp;nbsp;&lt;A href="https://hub.sap.com/" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;. Those packages replace the so far provided package&amp;nbsp;&lt;A href="https://hub.sap.com/package/PIPipelineGenericIntegrationFlows/overview" target="_blank" rel="noopener noreferrer"&gt;Process Integration Pipeline - Generic Integration Flows &amp;amp; Templates&lt;/A&gt; &lt;STRONG&gt;which will be deprecated soon&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;To be more flexible in setting up your different pipelines, different sender-specific IDoc and XI inbound flows, and receiver-specific outbound flows if required, we decided to split up the&amp;nbsp;Process Integration Pipeline - Generic Integration Flows &amp;amp; Templates into four packages. For the same reason, the script collection has been replaced by local scripts.&lt;/P&gt;&lt;P&gt;Customers like to run different pipelines, e.g., for distributing their critical and non-critical scenarios across different pipelines, or setting up different pipelines in a shared tenant environment. Also, it makes sense to define an own IDoc or XI inbound flow for each sender system to be able for instance to define a sender-specific user role or to stop incoming messages for a specific sender system. For those uses cases, so far you had to copy the package with the complete number of integration flows from the Discovery to the Design adding a suffix. This ensured that the copied packages were not cut off from future updates. However, downside was that this resulted in a large number of stale artifacts, so integration flows which were not used at all.&lt;/P&gt;&lt;P&gt;With the new package setup, we now better support those use cases without creating all those stale integration artifacts. The approach is still to copy a new package from the Discovery, but depending on the use case, you would only copy the integration flows which are required for the respective use case.&lt;/P&gt;&lt;P&gt;You can now find the generic integration flows and a set of templates for the scenario-specific integration flows and custom exits spread across the following integration packages:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://hub.sap.com/package/CloudIntegrationPipelineGenericInbound/overview" target="_blank" rel="noopener noreferrer"&gt;Cloud Integration Pipeline - Generic Inbound&lt;/A&gt;: Contains the generic IDoc and XI inbound flows.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://hub.sap.com/package/CloudIntegrationPipelineGenericPipelines/overview" target="_blank" rel="noopener noreferrer"&gt;Cloud Integration Pipeline - Generic Pipelines&lt;/A&gt;: Contains the main generic pipeline steps.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://hub.sap.com/package/CloudIntegrationPipelineGenericOutbound/overview" target="_blank" rel="noopener noreferrer"&gt;Cloud Integration Pipeline - Generic Outbound&lt;/A&gt;: Contains the generic outbound processing flow.&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://hub.sap.com/package/CloudIntegrationPipelineTemplates/overview" target="_blank" rel="noopener noreferrer"&gt;Cloud Integration Pipeline - Templates&lt;/A&gt;: Contains all templates for the scenario-specific flows and custom extensions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;U&gt;Note&lt;/U&gt;: As said, &lt;STRONG&gt;the so far provided integration package will be deprecated soon&lt;/STRONG&gt;. All new feature increments will only be shipped with the new integration packages. So, If you have used the previously provided package, you need to switch to the new packages. To do so, &lt;STRONG&gt;proceed as follows&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Undeploy all generic flows from the soon to be deprecated package.&lt;/LI&gt;&lt;LI&gt;Configure and deploy the required generic flows provided by the new Cloud Integration Pipeline packages. You can either deploy all generic flows or just the ones that you need depending on which pipeline you use, see below.&lt;/LI&gt;&lt;LI&gt;If you have used scripts from the script collection in your scenario-specific flows, replace the scripts with local scripts. You find the local scripts in either the generic flows or the new templates. As long as you haven't replaced all scripts, recommendation is to still run the script collection. Once done, you can then also undeploy the script collection.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;U&gt;Note&lt;/U&gt;: In the newly shipped Cloud Integration packages, the name and IDs of the integration flows have version v2 added. It's important that the old integration flows and the new integration flows must not be deployed together because they compete on reading from the same JMS queues.&lt;/P&gt;&lt;P&gt;The templates package doesn't contain any artifact which needs to be deployed nor does it need to be transported to the production tenant. It only contains templates that you can copy to create your scenario-specific flows and custom flows. For this reason, we kept those integration flows in a separate package.&lt;/P&gt;&lt;P&gt;For setting up the integrated messaging runtime for asynchronous communication (recommended option for asynchronous communication), you need to deploy the following generic integration flows:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;(Optionally, if you like to use a single entry point for IDoc messages) Pipeline v2 Generic Step01 - Inbound Processing for Idoc&lt;/LI&gt;&lt;LI&gt;(Optionally, if you like to use a single entry point for XI messages) Pipeline v2 Generic Step01 - Inbound Processing for XI&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step02 - Integrated Messaging Runtime Async&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step06 - Outbound Processing&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For setting up the integrated messaging runtime for synchronous content-based-router scenarios, you need to deploy the following generic integration flows:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;(Optionally) Pipeline v2 Generic Step01 - Inbound Processing for XI&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step02 - Integrated Messaging Runtime Sync&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For setting up the fully decoupled pipeline for asynchronous communication, you need to deploy the following integration flows:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;(Optionally) Pipeline v2 Generic Step01 - Inbound Processing for Idoc&lt;/LI&gt;&lt;LI&gt;(Optionally) Pipeline v2 Generic Step01 - Inbound Processing for XI&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step02 - Inbound Processing&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step04 - Receiver Determination&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step05 - Interface Determination&lt;/LI&gt;&lt;LI&gt;Pipeline v2 Generic Step06 - Outbound Processing&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;All integration flows within the new Cloud Integration packages have been copied from the old package. Besides this, some new features have been added which I will soon describe in a bit more detail in a separate blog post. You also find this information in the change logs of the packages. Upfront, here some of the new features that we have shipped with the new packages:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;For IDoc inbound scenarios where you exchange IDoc bulk messages, you have the option to keep the bulk, i.e., not to split the bulk message into individual messages.&lt;/LI&gt;&lt;LI&gt;You can now call a custom exit integration flow for custom pre-processing without the need to alter the standard generic flows of the pipeline. This can be configured globally or scenario-specific.&amp;nbsp;Potential use cases could be to implement additional external or internal logging capabilities or to stop certain messages from sending to the receiver systems based on some conditions, e.g. maintained in the Partner Directory.&lt;/LI&gt;&lt;LI&gt;A new template has been added that allows you to implement&amp;nbsp;custom receiver and interface determination by maintaining exchange properties. A similar approach is applied in the SAP Process Orchestration to Cloud Integration migration tool when selecting the standard migration approach for the Recipient List and Content-Based-Router patterns.&lt;/LI&gt;&lt;LI&gt;A new template has been added for an option to implement custom receiver determination based on a message mapping and by maintaining exchange properties for the interface determination. A similar approach is applied in the SAP Process Orchestration to Cloud Integration migration tool when selecting the Pipeline migration approach.&lt;/LI&gt;&lt;LI&gt;For the Outbound Processing templates, an option to call custom post-processing has been added.&lt;/LI&gt;&lt;LI&gt;We fixed an issue in the duplication check caused by a wrong usage of the escalation end event for the IDoc and XI inbound processing flow.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;We are currently updating the standard documentation, so stay tuned.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/new-integration-packages-for-the-pipeline-for-cloud-integration/ba-p/14175339"/>
    <published>2025-08-08T15:08:45.923000+02:00</published>
  </entry>
</feed>
