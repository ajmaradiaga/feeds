<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/OData-blog-posts.xml</id>
  <title>SAP Community - OData</title>
  <updated>2025-09-14T23:11:23.972520+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/OData/pd-p/551580658536717501828021060147962" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>OData blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/consuming-complex-datasphere-models/ba-p/14091196</id>
    <title>Consuming complex Datasphere models</title>
    <updated>2025-05-02T15:34:21.742000+02:00</updated>
    <author>
      <name>clsorensen911</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/768390</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1580986154"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp;is a part of the new &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Data+Cloud/pd-p/73554900100700003531" class="lia-product-mention" data-product="1249-1"&gt;SAP Business Data Cloud&lt;/a&gt;&amp;nbsp;offering, which&amp;nbsp;&lt;SPAN&gt;enables a business data fabric architecture that uniquely harmonizes mission-critical data across the organization.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;One prime feature of Datasphere is the semantically rich data model, that allows for deep structures of dimensions, hierarchies and transactional data.&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;The data models created in Datasphere can then be consumed for reporting by various tools, both SAP and non-SAP tools and used as the basis of reporting.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And while the "Single source of truth" is the cornerstone of enterprise reporting, the individual tools may interpret the data models differently.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1384472649"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-1187959144"&gt;Purpose&lt;/H1&gt;&lt;P&gt;My main objective in this blog is to show how different tools interprets an Analytical Model and what you may want to consider when building models.&amp;nbsp;&lt;/P&gt;&lt;P&gt;I will focus on the Analytical Model, rather than consumption models / perspective in this blog, because the end-result is the same, and the Analytical Model is the object that most people will first try to consume for reporting.&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-991445639"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-794932134"&gt;Basic concepts&lt;/H1&gt;&lt;P&gt;Before we dive in, I want to outline a few basic concepts that is important to understand the mechanisms at play. If you are already familiar with the concepts, you can skip this section.&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-727501348"&gt;Annotations&lt;/H2&gt;&lt;P&gt;With the introduction of CDS views, SAP introduced Annotations, which is a tool to semantically enri&lt;/P&gt;&lt;P&gt;ch a table or view with instructions for the analytical engine to interpret the data.&amp;nbsp;&lt;BR /&gt;While there are many, many different types of annotations, Datasphere primarily uses Consumption and Semantics.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Take the below, very simple table&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Material&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Quantity&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Sales Unit&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;MAT1&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;100&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;KG&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;MAT2&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;50&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;TON&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;We can add the following annotations to the table:&lt;/P&gt;&lt;TABLE border="1" width="44.44399699312715%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Column&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;CDS Annotation&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;Material&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;none&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;Quantity&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;SPAN&gt;@Semantics.quantity.unitOfMeasure: 'Sales Unit'&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Sales Unit&lt;/TD&gt;&lt;TD&gt;&lt;SPAN&gt;@Semantics.unitOfMeasure: true&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;Which does nothing to the table definition itself, but we've told the engine that 'Quantity' and 'Unit' belong together.&lt;/P&gt;&lt;H2 id="toc-hId-530987843"&gt;Associations&lt;/H2&gt;&lt;P&gt;One of the, at least to me, best things that came with CDS views was 'associations'.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In short, an association between two tables allows the engine to fine-tune the query, based on what you need, without you having to join tables together.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Based on the associations and annotations, the analytical engine can dynamically navigate the underlaying objects to fit the demands of the user at runtime.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can read more about associations in the &lt;A href="https://help.sap.com/docs/SAP_HANA_PLATFORM/09b6623836854766b682356393c6c416/6fcd6e5883f04de5b618a6d91141afb4.html" target="_blank" rel="noopener noreferrer"&gt;SAP documentation&lt;/A&gt; or one of the many blog posts.&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-334474338"&gt;Semantic usage&lt;/H2&gt;&lt;P&gt;When modelling objects in Datasphere, you will have the option to mark a table or view with a semantic usage, which provides some higher level annotations to the object.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Datasphere allows for the following options&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Fact&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains one or more measures and attributes. A fact typically has associations pointing to one or more dimensions and is consumed by analytic models (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/30089bd2aa754ab996a62cf5842ae60a.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Fact to Contain Measurable Data&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Dimension&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes containing master data like a product list or store directory, and supporting hierarchies (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/5aae0e95361a4a4c964e69c52eada87d.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Dimension to Categorize Data&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Hierarchy&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes defining a parent-child hierarchy (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/dbac7a862b3744d8a71d268644aac389.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create an External Hierarchy for Drill-Down&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Hierarchy with Directory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;- Contains one or more parent-child hierarchies (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/36c39eee184c485a80ebce9d0fec49ec.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Hierarchy with Directory&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Text&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes used to provide textual content in one or more languages (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/b25726df116b463e97435ba720e48ac9.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Text Entity for Attribute Translation&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Relational Dataset&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;- [default] Contains columns with no specific analytical purpose.&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-8878114"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId--187635391"&gt;Creating a complex data model&lt;/H1&gt;&lt;P&gt;When I use the word "complex", I don't mean&amp;nbsp;&lt;EM&gt;big&lt;/EM&gt; but&amp;nbsp;&lt;EM&gt;deep&lt;/EM&gt;. A data model can have a hundred dimensions, and still be pretty simple.&lt;/P&gt;&lt;P&gt;In this example, I've created a straight forward data model, which the following objects:&lt;/P&gt;&lt;TABLE border="1" width="66.66666666666667%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Semantic Usage&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Employee&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Fact&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Department&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Education&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Job Function&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Job Level&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;The main object in this data model is the employee, which has several attributes: (1) They belong to a&amp;nbsp;&lt;STRONG&gt;department&lt;/STRONG&gt;, have an (2)&amp;nbsp;&lt;STRONG&gt;education&lt;/STRONG&gt;, and a (3)&amp;nbsp;&lt;STRONG&gt;job function&lt;/STRONG&gt;.&amp;nbsp;&lt;BR /&gt;In addition, each job function has another property: (4) &lt;STRONG&gt;job level&lt;/STRONG&gt;, which indicates if it is a management position.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can see the relationship in a graphical representation here:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746097686600.png" style="width: 615px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256833i1995603F9A6BC3DE/image-dimensions/615x288?v=v2" width="615" height="288" role="button" title="clsorensen911_0-1746097686600.png" alt="clsorensen911_0-1746097686600.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When I say "complex" data model, this is what I mean: Some dimensions have no direct link to the main object - as you might have in a star schema - but can still be consumed.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In a real world scenario, you can imagine an almost infinite amount of levels and data links.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Imagine, for instance that we extended the "Education" dimension with the following extra fields: (1) Level (Bachelor, master, PhD, ect.) which also needs it one text, (2) area of study (such as engineering, finance, accounting, etc.), (3) completion date, (4) school of graduation, which may be a whole other dimension all by itself.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can imagine how quickly we can add layers to a data model, which might technically be "correct" in a data modelling sense, but can present other problems, as we can see shortly.&amp;nbsp;&lt;/P&gt;&lt;P&gt;When we create our Analytical Model, we have the option to select the associations we want from our "Fact" object.&lt;/P&gt;&lt;P&gt;Take note of a few things here:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Some of the fields are marked with a cube, which marks them as a Dimension (See the red squares).&lt;/LI&gt;&lt;LI&gt;All the dimensions have a "T" on their line, meaning that the dimension contains both key and text&lt;/LI&gt;&lt;LI&gt;Notice the "Date" dimension has a little stair / hierarchy icon as well, meaning that the association also comes with a hierarchy.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746098768582.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256835iD3CEE4C46971AC04/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746098768582.png" alt="clsorensen911_0-1746098768582.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you saw above, our "Job Function" dimension have attributes of it's own, so we can choose that and see that it has two attributes, but only one of them is a dimension:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_1-1746099009858.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256836i720DC42D6445FA0C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_1-1746099009858.png" alt="clsorensen911_1-1746099009858.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The final analytical model looks like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746098503796.png" style="width: 584px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256834iA7E7BDC0A8EBAE30/image-dimensions/584x333?v=v2" width="584" height="333" role="button" title="clsorensen911_0-1746098503796.png" alt="clsorensen911_0-1746098503796.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-385591187"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-189077682"&gt;Consuming the Analytical Model&lt;/H1&gt;&lt;P&gt;As promised, we shall now see how the Analytical model can be consumed with all the semantic enrichment. I will go through the following tools:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;SAP Analytics Cloud via a Live Connection&lt;/LI&gt;&lt;LI&gt;Microsoft Excel via an SAP Add-In&lt;/LI&gt;&lt;LI&gt;3rd Party tools via OData&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId--594241837"&gt;Consumption in general&lt;/H3&gt;&lt;P&gt;I have skipped over a lot of different topics, so I would absolutely recommend the &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/d7d56284bb5148c887ac4054689bfbca.html" target="_blank" rel="noopener noreferrer"&gt;official documentation on consumption&lt;/A&gt; to see in more detail.&amp;nbsp;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--497352335"&gt;&lt;SPAN class=""&gt;SAP Analytics Cloud&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;via a Live Connection&lt;/H2&gt;&lt;P&gt;To be able to use this connection, you must have a user in both Datasphere and SAC, and have a working live connection &lt;SPAN&gt;(see&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" title="https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/ad4281e2875949f0b4d45d1072ff4c38.html" href="https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/ad4281e2875949f0b4d45d1072ff4c38.html" target="_blank" rel="noopener noreferrer"&gt;Live Data Connections to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Datasphere&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;in the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Analytics Cloud&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;documentation)&lt;/SPAN&gt;.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When you create a story in SAC, or just edit an existing one, you have the option to add a data source:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746099574810.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256838i75B933D1157BFCFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_0-1746099574810.png" alt="clsorensen911_0-1746099574810.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;From here, you can see a subfolder called Datasphere. Select the correct Datasphere and Space:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_3-1746099689403.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256842i2468F722A1AADF05/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_3-1746099689403.png" alt="clsorensen911_3-1746099689403.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And select your Model:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Choose Analytical Model" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256843iE60408AACC61B989/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746099789996.png" alt="Choose Analytical Model" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Choose Analytical Model&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can now consume the model including all associations and metadata.&lt;BR /&gt;While there are a lot to explore, consider these two points:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746099862124.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256844iB3C3BEDBBB1DE98F/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_5-1746099862124.png" alt="clsorensen911_5-1746099862124.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;The attribute “Management” is available as a property under Job Function and can be used in modelling&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;While the actual data only contains 1, 2, 3 in the “Department” column, because we have created the association to texts in Datasphere, we can use the texts with no extra work.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Additionally, take note of the "Date" column, where we have both attributes&amp;nbsp;&lt;EM&gt;and&lt;/EM&gt; the hierarchy:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_6-1746100092211.png" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256845iFC5F35D9579CA5AF/image-size/small?v=v2&amp;amp;px=200" role="button" title="clsorensen911_6-1746100092211.png" alt="clsorensen911_6-1746100092211.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Which is absolutely fantastic!&amp;nbsp;&lt;BR /&gt;No objects are transferred to SAC, it just acts as a tunnel between Datasphere and the end-user.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, there is one problem. As you may have noticed, &lt;STRONG&gt;Job Level&lt;/STRONG&gt; is not visible as a property of "Job Function", whereas "Management" is.&amp;nbsp;"Job Level" appears as it's own dimension.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746100780173.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256847i0AF0430144C9131A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746100780173.png" alt="clsorensen911_0-1746100780173.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;SAC displays nested dimensions as their own entity, rather than related to "Job Function". Which may be perfectly alright, but might cause confusion for the people building the reports, that might not know the underlaying data model.&amp;nbsp;&lt;BR /&gt;Imagine you have some sales data with a ship-to and ship-from columns. Both of these might have an "Address" dimension, and may cause confusion.&amp;nbsp;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--693865840"&gt;Microsoft Excel via an SAP Add-In&lt;/H2&gt;&lt;P&gt;The SAP Analytics Cloud add-in (which is&amp;nbsp;&lt;EM&gt;not&lt;/EM&gt; the same as Analysis for Office), can simply be downloaded from the Microsoft Store.&amp;nbsp;&lt;/P&gt;&lt;P&gt;After installing, you can add the model to Excel, very similar to SAC:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_1-1746101662053.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256852i13EABEA5D5D9920B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_1-1746101662053.png" alt="clsorensen911_1-1746101662053.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And will interpret the metadata in the exact same way SAC does:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_2-1746101749130.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256854i72AFBF6E5EC58321/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_2-1746101749130.png" alt="clsorensen911_2-1746101749130.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--890379345"&gt;3rd Party tools via an OData Service&lt;/H2&gt;&lt;P&gt;Non-SAP products, such as Power BI or Tableau, can consume the data from Datasphere through an OData service.&lt;/P&gt;&lt;H3 id="toc-hId--1380295857"&gt;Setup&lt;/H3&gt;&lt;P&gt;You can find other guides to help you set up a connection for your service of choice, but the setup in Datasphere is the same for all tools.&amp;nbsp;&lt;BR /&gt;I highly recommend&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/513684"&gt;@gustavokath&lt;/a&gt;&amp;nbsp;&lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/connecting-sap-data-warehouse-cloud-odata-api-with-powerbi-via-a-blank/ba-p/13546615" target="_self"&gt;blogpost&lt;/A&gt; on the topic, which has all the information you need to set up your client.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId--1576809362"&gt;The OData request&lt;/H3&gt;&lt;P&gt;Datasphere allows you to build and preview an OData request from the Analytical Model builder:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_4-1746104214363.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256857i72AA5DA928112E82/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746104214363.png" alt="clsorensen911_4-1746104214363.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Which allows you to play and and configure the request and will generate a URL for you:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746104337134.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256858iF8B3CA51C3A5F4B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_5-1746104337134.png" alt="clsorensen911_5-1746104337134.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you preview the data, you can see what kind of response it will generate.&amp;nbsp;&lt;BR /&gt;However, there are a lot of things to note here, so let's take them one at a time.&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1. Datasphere completely flattens the data before it sends it:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_7-1746104578440.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256860iF3A46F7382510A05/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_7-1746104578440.png" alt="clsorensen911_7-1746104578440.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The dimensions are served as both the key, and the text.&amp;nbsp;&lt;BR /&gt;Note that the "Dimension" is served as the technical name of the dimension.&lt;BR /&gt;All Text fields added this way will have the suffix "_T", but uses the technical name of the field in the annotation:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746104857730.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256861i22F0BFBD4AFE04AD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746104857730.png" alt="clsorensen911_0-1746104857730.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Which can make the output difficult to read.&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. All data is served as either string or number (decimal, integer ect).&lt;/P&gt;&lt;P&gt;This may not seem as such a big deal, until you consider the dates:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_2-1746105201519.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256863i2B5626708101A57A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_2-1746105201519.png" alt="clsorensen911_2-1746105201519.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And while it can seem like a non-issue, the data itself contains no hint as to the format.&amp;nbsp;&lt;BR /&gt;You can request the metadata and see the type of the field is Edm.Date, which is a nice standard format:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_3-1746105339985.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256865i47E8439A81CB5F24/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_3-1746105339985.png" alt="clsorensen911_3-1746105339985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But that only happens because we've specified the column as a Date:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_4-1746105395091.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256867iB8AB20834455E9F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746105395091.png" alt="clsorensen911_4-1746105395091.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But you can imagine different sources serving data in different formats, which can make consumption and modelling a nightmare, unless you enforce strict data harmonization in Datasphere - which you should obviously do - but mistakes happen.&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Nested dimensions are flattened with the business name, not technical name.&lt;/P&gt;&lt;P&gt;There is, however, one absolutely brain-melting thing that I personally foresee causing endless amounts of confusion.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The nested dimension M_LEVEL, seen above as "Job Level" is a part of the data, but it is represented by the description of the parent dimension:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746105736726.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256869i0CAAD9E6E4B2CD10/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_5-1746105736726.png" alt="clsorensen911_5-1746105736726.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Just looking at this output, you have a ice cube's chance in hell to deduce which fields belong together.&amp;nbsp;&lt;BR /&gt;Again, you can query the metadata and see the relationship, but you know as well as I do, that at some point, the data is going to end up in the hands of a super-user who has&amp;nbsp;a very specific use case, and will be absolutely floored.&amp;nbsp;&lt;/P&gt;&lt;P&gt;And yes - you are correct. If I had named my dimensions and fields better, a lot of the confusion could be avoided. Absolutely. That is kind of the point &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--1186516853"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId--1383030358"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;The ability to consume Analytical Models build in Datasphere is an absolute godsend.&amp;nbsp;&lt;BR /&gt;It allows you to build central complex, semantically rich data model and allow your users to build their own reports, with whatever tools - to an extent - they prefer.&amp;nbsp;&lt;/P&gt;&lt;P&gt;However, you as the data engineer have a responsibility to find the sweet spot between a model that contains 'enough', without it becoming too complicated.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Sometimes, two models might be better than one.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/consuming-complex-datasphere-models/ba-p/14091196"/>
    <published>2025-05-02T15:34:21.742000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/creating-your-custom-validation-in-cap-java-messagetargets-for-composition/ba-p/14090235</id>
    <title>Creating your custom validation in CAP (JAVA) + MessageTargets for composition associations</title>
    <updated>2025-05-05T10:37:38.704000+02:00</updated>
    <author>
      <name>NicholasArefta</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/876567</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1710039856"&gt;Objective&lt;/H2&gt;&lt;P&gt;Implement dynamic field control on a chosen field, add our own validation along with an error message that targets that field when the validation fails.&lt;/P&gt;&lt;P&gt;Source code: &lt;SPAN class=""&gt;&lt;A href="https://github.com/nickcantstop/SchoolExample" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/nickcantstop/SchoolExample&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;As per capire documentation when using dynamic field control, it forces you to create your custom validations.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="capire fieldcontrol" style="width: 784px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/247819iAC31A3AFAF62BDC2/image-size/large?v=v2&amp;amp;px=999" role="button" title="capire field control.png" alt="capire fieldcontrol" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;capire fieldcontrol&lt;/span&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;Available field control options.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;STRONG&gt;Number Key&lt;/STRONG&gt;&lt;STRONG&gt;Field Control&lt;/STRONG&gt;&lt;SPAN&gt; &lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-05-01 at 4.38.49 pm.png" style="width: 305px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256753iF47DA34EFEE7568E/image-dimensions/305x217?v=v2" width="305" height="217" role="button" title="Screenshot 2025-05-01 at 4.38.49 pm.png" alt="Screenshot 2025-05-01 at 4.38.49 pm.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;In our example we want the field averageGrade to be (Read Only) when firstName is null and then Mandatory when firstName has a value.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;We will use &lt;SPAN class=""&gt;averageGradeFC&lt;/SPAN&gt; field to store and also annotate our &lt;SPAN class=""&gt;averageGrade&lt;/SPAN&gt; field.&lt;/P&gt;&lt;P&gt;(./db/school.cds)&lt;/P&gt;&lt;P&gt;The composition associations are included purely for illustrative purposes&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;&lt;PRE&gt;namespace my.domain.education;

entity School {
    key ID      : Integer;
        name    : String;
        address : String;
        classes : Composition of many School.Classes
                      on classes.parent = $self;
}

entity School.Classes {
    key ID       : Integer;
    key parent   : Association to School;
        subject  : String;
        students : Composition of many School.Classes.Students
                       on students.parent = $self;
}

entity School.Classes.Students {
    key ID             : Integer;
    key parent         : Association to School.Classes;
        firstName      : String;
        lastName       : String;
        averageGrade   : String;
        averageGradeFC : Integer default 1;
}&lt;/PRE&gt;&lt;P&gt;Service Layer (./srv/schoolService.cds)&lt;/P&gt;&lt;PRE&gt;using {my.domain.education as education} from '../db/school';

service SchoolService {
    @odata.draft.enabled
    entity School                as projection on education.School;

    @cds.redirection.target: true
    entity SchoolClasses         as projection on education.School.Classes;

    @cds.redirection.target: true
    entity SchoolClassesStudents as projection on education.School.Classes.Students;
}&lt;/PRE&gt;&lt;P&gt;In annotations file (./app/school/annotations.cds)&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;annotate service.SchoolClassesStudents with @(Common : { SideEffects #averageGradeSideEffect : {
    SourceProperties: [firstName],
    TargetProperties: ['averageGradeFC']
}}) {
    averageGrade @Common.FieldControl : averageGradeFC;
};&lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;Using the target method as seen here &lt;SPAN class=""&gt;messages.error(“Error”).target()&lt;/SPAN&gt; can help us indicate to the user which field needs attention, in our example we are throwing an error for each averageGrade field that does not pass the validation in the existing School entity.&lt;/P&gt;&lt;P&gt;If we use the following code snippet &lt;SPAN class=""&gt;averageGrade &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1648847"&gt;@Common&lt;/a&gt;.FieldControl : 7;&amp;nbsp;&lt;/SPAN&gt;the framework will append a red asterisk (*) next to the annotated field, to signal that this field is mandatory, but it does not enforce that mandatory rule.&lt;/P&gt;&lt;P&gt;The following handler provides us the validation needed to enforce our mandatory field.&lt;/P&gt;&lt;P&gt;SchoolHandler - validation on when School entity is updated&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;@Component
@ServiceName(SchoolService_.CDS_NAME)
public class SchoolHandler implements EventHandler {

    @Autowired
    Messages messages;

    SchoolHandler(Messages messages) {
        messages = this.messages;
    }

    @Before(entity = School_.CDS_NAME, event = CqnService.EVENT_UPDATE)
    public void onSchoolUpdate(School school) {
        school.getClasses().forEach(classes -&amp;gt; classes.getStudents().forEach(students -&amp;gt; {
            if (Objects.isNull(students.getAverageGrade())) {
                messages.error("Average Grade cannot be null.").target(School_.class,
                        sc -&amp;gt; sc.classes(
                                cl -&amp;gt; cl.ID().eq(classes.getId())
                                        .and(cl.parent_ID().eq(classes.getParentId())
                                                .and(cl.IsActiveEntity().eq(false))))
                                .students(
                                        stu -&amp;gt; stu.ID().eq(students.getId())
                                                .and(stu.parent_ID().eq(students.getParentId()))
                                                .and(stu.parent_parent_ID().eq(students.getParentParentId()))
                                                .and(stu.IsActiveEntity().eq(false)))
                                .averageGrade());
            }
        }));
        messages.throwIfError();
    }

    @Before(entity = SchoolClassesStudents_.CDS_NAME, event = DraftService.EVENT_DRAFT_PATCH)
    public void onStudentSideEffect(SchoolClassesStudents students) {
        if (Objects.isNull(students.getFirstName())) {
            students.setAverageGradeFC(1);
        } else {
            students.setAverageGradeFC(7);
        }
    }
}&lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;With this code if I leave the field averageGrade as null when it is set to mandatory in the field control, I am met with this error when saving the draft.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="error highlighted.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/247820i9ACD8FFC6F8024F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="error highlighted.png" alt="error highlighted.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;The following error message is returned in the backend, it depicts the target as the odata path to the corresponding field.&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;PRE&gt;{
    "error": {
        "code": "400",
        "message": "Average Grade cannot be null.",
        "target": "in/classes(ID=2,parent_ID=1,IsActiveEntity=false)/students(ID=3,parent_ID=2,parent_parent_ID=1,IsActiveEntity=false)/averageGrade"
    }
}&lt;/PRE&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/creating-your-custom-validation-in-cap-java-messagetargets-for-composition/ba-p/14090235"/>
    <published>2025-05-05T10:37:38.704000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-extract-all-artifacts-of/ba-p/14087857</id>
    <title>SAP Datasphere CLI &amp; Python Automation : Extract All Artifacts of Datasphere in CSV files.</title>
    <updated>2025-05-05T10:47:20.047000+02:00</updated>
    <author>
      <name>VikasParmar055</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1716232</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1382837983" id="toc-hId-1580247983"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&lt;BR /&gt;In this post, we'll look at how to use Python with SAP Datasphere CLI to extract data objects and save them as CSV files. The script helps you manage items like remote tables, views, replication flows, and more for every space in SAP Datasphere. It's a great tool for automating repeated tasks and keeping data organized across different objects.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1383734478"&gt;Usecases:&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;1. &lt;STRONG&gt;Validate Namig Convesion&lt;/STRONG&gt; : Generated files can be used as source in Datasphere to validate the naming convension for all artifactes&lt;/SPAN&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;2. Identify and Delete unncessary objects from Datasphere Tenant.&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1187220973"&gt;&lt;STRONG&gt;Prerequisites&lt;/STRONG&gt;&lt;/H1&gt;&lt;P&gt;Steps to install SAP Datasphere CLI:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68...&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/bc-p/14086942#M180986/" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cl...&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5" color="#000000"&gt;&lt;STRONG&gt;Step-by-Step Process&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Prepare Login.Json file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create OAuth Client with Purpose as Interactive Usage and Redirect URL as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="http://localhost:8080/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;EM&gt;http://localhost:8080&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Get the value of all below fields from the OAuth Client and prepare the Login.json file.&lt;/P&gt;&lt;PRE&gt;{
"client_id": "",
"client_secret": "",
"authorization_url": "",
"token_url": "",
"access_token": "",
"refresh_token": ""
}&lt;/PRE&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;Step 2: Create Model_Object.py file with below code&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;dsp host&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: give URL of Datasphere Tenant.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;secrets_file&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: Give Path of Login.json file.&lt;/P&gt;&lt;PRE&gt;import subprocess
import pandas as pd
import sys

def manage_Modeling_Object(Modeling_Object):
    # Step 1: Login to Datasphere using host and secrets file
    dsp_host = '&amp;lt;URL of Datasphere&amp;gt;'
    secrets_file = '&amp;lt;path&amp;gt;/Login.json'
    command = f'datasphere login --host {dsp_host} --secrets-file {secrets_file}'
    subprocess.run(command, shell=True)  # Execute the login command
    
    # Step 2: Retrieve a list of all spaces in JSON format
    command = ['datasphere', 'spaces', 'list', '--json']
    result_spaces = subprocess.run(command, capture_output=True, shell=True, text=True)  # Run the command and capture output
    
    # Step 3: Parse the list of spaces from the command's output
    spaces = result_spaces.stdout.splitlines()  # Split output into individual lines
    
    ModelingObject_data = []  # Initialize a list to store Modeling Object data
    
    # Step 4: Check if the Modeling Object is 'spaces'
    if Modeling_Object == 'spaces':
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip()  # Extract space ID
            
            # Add space details to the data list
            ModelingObject_data.append({
                'Space ID': space_id.replace('"', '').replace(',', ''),
                'Technical Name': space_id.replace('"', '').replace(',', ''),
                'TYPE': Modeling_Object[:-1].upper()  # Set the TYPE as uppercase version of the input Modeling Object name
            })
    
    # Step 5: Process Modeling Objects for each space
    else:
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip()  # Extract space ID
            
            # Step 6: Retrieve Modeling Objects for the current space
            command = ['datasphere', 'objects', Modeling_Object, 'list', '--space', space_id.replace('"', '').replace(',', '')]
            result_ModelingObject = subprocess.run(command, capture_output=True, shell=True, text=True)  # Run the command
            
            # Step 7: Parse the Modeling Object data from the output
            ModelingObject_info = result_ModelingObject.stdout.splitlines()  # Split output into individual lines
            print("Checking "+Modeling_Object.upper()+" for space : "+space_id.replace('"', '').replace(',', ''))  # Log the space being checked
            
            # Step 8: Process each Modeling Object
            if len(ModelingObject_info) &amp;gt; 1:
                for flow in ModelingObject_info:
                    if '{' in flow or '}' in flow or '[' in flow or ']' in flow:
                        continue  # Skip brackets or braces in the output
                    cleaned_flow = flow.replace('"technicalName":', '').replace('"', '').strip()  # Clean up the output
                    
                    # Step 9: Add Modeling Object details to the data list
                    ModelingObject_data.append({
                        'Space ID': space_id.replace('"', '').replace(',', ''),
                        'Technical Name': cleaned_flow,
                        'TYPE': Modeling_Object[:-1].upper()  # Set the TYPE as uppercase version of the input Modeling Object name
                    })
    
    # Step 10: Write the collected data into a CSV file
    if ModelingObject_data:
        df = pd.DataFrame(ModelingObject_data)  # Create a DataFrame from the data list
        df.to_csv(Modeling_Object.upper()+'.csv', index=False)  # Save the DataFrame to a CSV file without the index
        print("Space vise all "+Modeling_Object.upper()+" have been written to "+Modeling_Object.upper()+".csv.")  # Log success message
    else:
        print("No Modeling Objects found.")  # Log message if no data was collected
    
    print('------------------------------------------------------------------------------------------------------------------------------------')  # Separator for readability
        
if __name__ == "__main__":
    # Check if an argument is provided via the command line
    if len(sys.argv) &amp;gt; 1:
        # Pass the first argument to the method
        manage_Modeling_Object(sys.argv[1])
    else:
        print("Please provide a Modeling Object name as an argument.")  # Log error message if no argument is provided
        
# Execute for predefined Modeling Objects
manage_Modeling_Object('remote-tables')
manage_Modeling_Object('local-tables')
manage_Modeling_Object('views')
manage_Modeling_Object('intelligent-lookups')
manage_Modeling_Object('data-flows')
manage_Modeling_Object('replication-flows')
manage_Modeling_Object('transformation-flows')
manage_Modeling_Object('task-chains')
manage_Modeling_Object('analytic-models')
manage_Modeling_Object('data-access-controls')&lt;/PRE&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Open command prompt and execute the Model_Objects.py file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VikasParmar055_0-1745819896727.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/255331iD13C18E5F83CA56D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VikasParmar055_0-1745819896727.png" alt="VikasParmar055_0-1745819896727.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Once the program execution is done it will generate CSV files for all the Datasphere artifactes mention in python code&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VikasParmar055_1-1745819896735.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/255332iD2C8108036EAC9AD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VikasParmar055_1-1745819896735.png" alt="VikasParmar055_1-1745819896735.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;each CSV file will have 3 columns :&amp;nbsp;&lt;/P&gt;&lt;P&gt;1) Space ID : Name of the space&lt;/P&gt;&lt;P&gt;2) Technical Name : Exact Technical Name of Object&amp;nbsp;&lt;/P&gt;&lt;P&gt;3) Type : Type of Object&amp;nbsp;( i.e view, local-table, remote-table, replication flw etc)&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-990707468"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;This script demonstrates how Python and SAP Datasphere CLI can collaborate to streamline artifact management and export data systematically. By following the steps provided, users can extend or adapt the code to suit their requirements.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-extract-all-artifacts-of/ba-p/14087857"/>
    <published>2025-05-05T10:47:20.047000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-add-1000-users-in-datasphere-space/ba-p/14101128</id>
    <title>SAP Datasphere CLI &amp; Python Automation : ADD 1000+ Users in Datasphere space in few seconds</title>
    <updated>2025-05-16T09:59:17.308000+02:00</updated>
    <author>
      <name>vikasparmar88</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1528256</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;This blog is part of a blog series from SAP Datasphere CLI &amp;amp; Python Automation with the focus on SAP Datasphere &amp;amp; Python capabilities:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT size="4"&gt;&lt;A title="SAP Datasphere CLI &amp;amp; Python: Exporting Modeling Objects to CSV Files for Each Artifact" href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-exporting-modeling-objects-to-csv-files-for/ba-p/14087080" target="_blank"&gt;SAP Datasphere CLI &amp;amp; Python: Exporting Modeling Objects to CSV Files for Each Artifact&lt;/A&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1601303401"&gt;&lt;FONT size="6"&gt;Introduction&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;Managing users in SAP Datasphere can take a lot of time, especially when there are hundreds or thousands of users. Adding them one by one is slow and tiring. This blog explains an easy way to automate the process using Python and SAP Datasphere CLI. With this method, you can add over 1000 users in just a few seconds, saving time and effort.&lt;/P&gt;&lt;H1 id="topic-title" id="toc-hId-1404789896"&gt;Install or Update the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Datasphere&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Command Line Interface&lt;/H1&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1208276391"&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Step-by-Step Process&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Prepare Login.Json file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create OAuth Client with Purpose as Interactive Usage and Redirect URL as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;&lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Get the Refresh Token and access Token by executing below command&amp;nbsp;&lt;/EM&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;datasphere config secrets show&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Get the value of all below fields from the OAuth Client and prepare the Login.json file.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
"client_id": "",
"client_secret": "",
"authorization_url": "",
"token_url": "",
"access_token": "",
"refresh_token": ""
}&lt;/code&gt;&lt;/pre&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1011762886"&gt;&lt;FONT size="4"&gt;Step-2: Prepare USERS.CSV File for Input:&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;FONT size="4"&gt;There are 3 columns in CSV file.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;1) &lt;STRONG&gt;Space&lt;/STRONG&gt; : Space Name&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;2) &lt;STRONG&gt;User&lt;/STRONG&gt; : User ID in Datasphere&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;3) &lt;STRONG&gt;Role&lt;/STRONG&gt; : Scope Role name, required for user.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;As shown below, There are 1357 users need to be assigned to Datasphere space with given role in Datasphere.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-05-14 132712.png" style="width: 361px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/260915iC37BF11D608DEDB0/image-dimensions/361x385?v=v2" width="361" height="385" role="button" title="Screenshot 2025-05-14 132712.png" alt="Screenshot 2025-05-14 132712.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-815249381"&gt;&lt;FONT size="4"&gt;Step-3:&amp;nbsp;Space_User_Role_Json&lt;STRONG&gt;.py file with below code&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;The Code: Automating User Assignments&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The following Python script simplifies bulk user assignments by:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Reading user-role mappings from a CSV file.&lt;/LI&gt;&lt;LI&gt;Dynamically creating JSON files containing space-user-role mappings.&lt;/LI&gt;&lt;LI&gt;Executing SAP Datasphere CLI commands to automate user additions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;dsp host&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: give URL of Datasphere Tenant.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;secrets_file&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: Give Path of Login.json file.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import subprocess  # For OS commands on DSP CLI
import json  # For handling the JSON file format
import pandas as pd  # For reading the CSV file
import os  # For creating directories dynamically
import sys  # For accessing command-line arguments

def create_json_file(space_name, user_role_data, directory):
    """
    Create a JSON file for the given space name and associated user-role data, saving it to the specified directory.

    Args:
        space_name (str): The name of the space.
        user_role_data (list): A list of dictionaries containing user and role mappings.
        directory (str): The directory where the file should be saved.
    """
    # Define the JSON structure
    data = [
        {
            "id": user_role["User"],
            "roles": [user_role["Role"]]  # Roles are explicitly wrapped in a list
        }
        for user_role in user_role_data
    ]


    # Specify the file name and path
    file_name = f"{space_name}.json"
    file_path = os.path.join(directory, file_name)

    # Ensure the directory exists
    os.makedirs(directory, exist_ok=True)

    # Convert `data` to a JSON string with the desired format
    json_content = json.dumps(data, indent=2, separators=(',', ': '))

    # Remove unncessary new lines and spaces for Role
    json_content = json_content.replace("[\n", "[").replace("\n    ]","]").replace("[      ","[")

    # Create the JSON file with the updated content
    with open(file_path, "w") as json_file:
        json_file.write(json_content)

    print(f"JSON file created successfully for space : {space_name}")
    return file_path

def manage_spaces(csv_file_path):
    """
    Reads a CSV file to verify columns, then processes spaces, users, and roles to create JSON files
    and execute Datasphere CLI commands.

    Args:
        csv_file_path (str): The path to the CSV file containing Space, User, and Role columns.
    """
    try:
        # Check if the argument is passed
        if not csv_file_path:
            raise ValueError("csv_file_path argument is required.")
        
        # Check if the argument is a string and contains ".csv"
        if not isinstance(csv_file_path, str) or not csv_file_path.endswith(".csv"):
            raise ValueError("The csv_file_path must be a string and end with '.csv'.")
        
        print(f"Argument received: {csv_file_path}")
        
        # Login to Datasphere using host and secrets file
        dsp_host = '&amp;lt;DATASPHERE URL&amp;gt;'
        secrets_file = '&amp;lt;PATH&amp;gt;/Login.json'
        command = f'datasphere login --host {dsp_host} --secrets-file {secrets_file}'
        subprocess.run(command, shell=True)  # Execute the login command

        # Replace forward slashes with backslashes for consistency
        csv_file_path = csv_file_path.replace("/", "\\")
        print(f"Formatted csv_file_path: {csv_file_path}")
        
        # Read the CSV file
        data = pd.read_csv(csv_file_path)

        # Validate columns
        required_columns = ['Space', 'User', 'Role']
        if not set(required_columns).issubset(data.columns):
            raise ValueError("CSV file must contain 'Space', 'User', and 'Role' columns.")

        # Extract unique spaces
        spaces = data['Space'].unique()

        # Process each space
        for space in spaces:
            
            #For each space find users and their role given in csv file
            space_data = data[data['Space'] == space]
            user_role_data = space_data[['User', 'Role']].to_dict(orient='records')
            
            # Check if the space exists
            check_space_command = f'datasphere spaces read --space {space}'
            result = subprocess.run(check_space_command, shell=True, capture_output=True, text=True)
            
            # Create JSON file for each space
            path = csv_file_path.rsplit('\\', 1)[0] + "\\"
            json_file_path = create_json_file(space, user_role_data, path)
              
            # Add users to the space using the generated JSON file
            add_users_command = f'datasphere spaces users add --space "{space}" --file-path "{json_file_path}"'
            print(f"Adding Users to {space} space now...")
            try:
                result = subprocess.run(add_users_command, shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"Successfully added users to space '{space}' using file '{json_file_path}'.")
                else:
                    print(f"Failed to add users to space '{space}'. Error: {result.stderr}")
            except Exception as e:
                print(f"An error occurred while adding users to space '{space}': {e}")

    except FileNotFoundError:
        print(f"CSV file '{csv_file_path}' not found.")
    except ValueError as ve:
        print(f"Argument error: {ve}")
    except Exception as e:
        print(f"An error occurred: {e}")

# Check if the script is run with the required argument
if len(sys.argv) &amp;gt; 1:
    manage_spaces(sys.argv[1])
else:
    print("Please provide the CSV file path as an argument when running the script.")&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Open command prompt and execute the&amp;nbsp;&lt;FONT size="4"&gt;Space_User_Role_Json.py&amp;nbsp;&lt;/FONT&gt;file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Give the path of USERS.csv file as argument&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;python Space_User_Role_Json.py('C:/DataSphere/USERS.csv')&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Execution will take few seconds to complete and Once it's done you can see all users ( User count 1356 in my case ) are added to respective space with role assigned in USERS.csv file.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vikasparmar88_2-1747214928113.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/260980iACEA161A6FA8D830/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vikasparmar88_2-1747214928113.png" alt="vikasparmar88_2-1747214928113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;!--     StartFragment      --&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-618735876"&gt;&lt;FONT size="6"&gt;Conculsion&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;With this automation, SAP Datasphere user management becomes seamless and scalable. Python scripting combined with Datasphere CLI simplifies user assignments and minimizes human effort. Whether managing hundreds or thousands of users, this method enhances efficiency while maintaining structured access control.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you have questions or noticed a scenario I didn’t cover, feel free to leave a comment below the blog post.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Thank&lt;/P&gt;&lt;P&gt;Vikas Parmar&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp; &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+HANA/pd-p/73554900100700000996" class="lia-product-mention" data-product="639-1"&gt;SAP HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/OData/pd-p/551580658536717501828021060147962" class="lia-product-mention" data-product="323-1"&gt;OData&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SQL/pd-p/122888716930844301706258287775555" class="lia-product-mention" data-product="326-1"&gt;SQL&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/Python/pd-p/f220d74d-56e2-487e-8e6c-a8cb3def2378" class="lia-product-mention" data-product="126-1"&gt;Python&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;!--     EndFragment      --&gt;&lt;/P&gt;&lt;P&gt;&lt;!--     EndFragment      --&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-add-1000-users-in-datasphere-space/ba-p/14101128"/>
    <published>2025-05-16T09:59:17.308000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/updating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/14109511</id>
    <title>Updating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter</title>
    <updated>2025-05-22T18:35:37.307000+02:00</updated>
    <author>
      <name>jirifridrich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/146600</uri>
    </author>
    <content>&lt;P&gt;In my &lt;A title="Create customer in S4" href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/13953228" target="_blank"&gt;previous blog&lt;/A&gt; I describe how to create Customer in SAP S/4HANA Public Cloud via HTTP adapter. In this post we will explore the UPDATE possibilities.&amp;nbsp;&lt;/P&gt;&lt;P&gt;I will skip the authentication part, as that is desribed in the mention blog and it follows the same pattern.&lt;/P&gt;&lt;P&gt;We'll again focus on the API_BUSINESS_PARTNER service, your go-to resource for all things related to business partners (which is how customers are represented in S/4HANA). The PATCH method will be our primary tool for making targeted updates.&lt;/P&gt;&lt;P&gt;The official documentation, which will be your good companion is provided at the &lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-1859710973"&gt;1. Updating Core Business Partner Information&lt;/H3&gt;&lt;P&gt;This is where you'll modify fundamental details about your customer, such as their name.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('&amp;lt;CUSTOMER-NUMBER&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Replace&lt;EM&gt; &amp;lt;CUSTOMER-NUMBER&amp;gt;&lt;/EM&gt; with the actual customer ID you wish to update.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;Let's say we want to update the customer's first name or last name. Then the request body will be as follows. General rule is that we are sending only data which we want to change. The rest remains intact.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "FirstName": "FIRST NAME",
    "LastName": "LAST NAME"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1663197468"&gt;2. Updating Sales Area Data&lt;/H3&gt;&lt;P&gt;Sales area data is crucial for sales processes, defining how a customer interacts with your sales organization, distribution channel, and division.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_CustomerSalesArea(Customer='&amp;lt;CUSTOMER-NUMBER&amp;gt;',SalesOrganization='&amp;lt;SALES-ORG&amp;gt;',DistributionChannel='&amp;lt;DISTR-CHANNEL&amp;gt;',Division='&amp;lt;DIVISION&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example (with placeholders replaced):&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_CustomerSalesArea(Customer='1000010',SalesOrganization='1000',DistributionChannel='01',Division='01')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Remember to replace &amp;lt;CUSTOMER-NUMBER&amp;gt;, &amp;lt;SALES-ORG&amp;gt;, &amp;lt;DISTR-CHANNEL&amp;gt;, and &amp;lt;DIVISION&amp;gt; with the specific values for the sales area you want to modify.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;For example we want to update the Customer Group for a specific customer.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "CustomerGroup": "&amp;lt;CUSTOMER-GROUP&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1466683963"&gt;3. Updating Customer Address&lt;/H3&gt;&lt;P&gt;Updating addresses is a two-step process: first, you need to retrieve the AddressID, and then you can perform the update. This ensures you're targeting the correct address record, as a business partner can have multiple addresses.&lt;/P&gt;&lt;H4 id="toc-hId-1399253177"&gt;Step 3a: Get Address to Extract Address ID&lt;/H4&gt;&lt;P&gt;You'll need to query the business partner to retrieve the associated address ID.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint (GET Request):&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('&amp;lt;CUSTOMER-NUMBER&amp;gt;')$expand=to_BusinessPartnerAddress&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Replace &amp;lt;CUSTOMER-NUMBER&amp;gt; with the relevant customer ID. Notice the 'expand' in the query. Without it the system would not return the address details, as it can contain a lot of data. If we want address details, we have to ask for it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; GET&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Explanation:&lt;/STRONG&gt; This GET request will retrieve the business partner details. Within the response, you'll find the AddressID for each address record linked to the business partner. You'll need to parse this response to extract the correct AddressID for the address you intend to update.&lt;/P&gt;&lt;H4 id="toc-hId-1202739672"&gt;Step 3b: Update Address&lt;/H4&gt;&lt;P&gt;Once you have the AddressID, you can proceed with the PATCH request to update the address details.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartnerAddress(BusinessPartner='&amp;lt;CUSTOMER-NUMBER&amp;gt;',AddressID=&amp;lt;ADDRESS-ID&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;Again, we are sending only data which we want to change. Notice that we are calling different API (&lt;EM&gt;A_BusinessPartnerAddress&lt;/EM&gt;) than when we were requesting the address object (&lt;EM&gt;A_BusinessPartner&lt;/EM&gt;). This can be misleading and one of the reasons I am writing this blog to clarify it.&lt;BR /&gt;The body to change the whole address can look like this.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "Country": "&amp;lt;COUNTRY&amp;gt;",
    "CityName": "&amp;lt;CITY&amp;gt;",
    "StreetName": "&amp;lt;STREET&amp;gt;",
    "HouseNumber": "&amp;lt;HOUSE-NUMBER&amp;gt;",
    "PostalCode": "&amp;lt;ZIP-CODE&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-877143448"&gt;4. Updating Customer Email&lt;/H3&gt;&lt;P&gt;Updating email is again a two-step process similar to address update, but it gets even trickier, that's why I want to demonstrate it as well.&lt;/P&gt;&lt;H4 id="toc-hId-809712662"&gt;Step 4a: Get Current Email Address&amp;nbsp;&lt;/H4&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint&lt;BR /&gt;&lt;/STRONG&gt;&lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('${property._CustomerNumber}')$expand=to_BusinessPartnerAddress/to_EmailAddress&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Notice that we are again expanding the query, but this time even furhter, as we need the email address, which is nested under the general address.&lt;BR /&gt;This time we need to extract more parameters - AddressID, Person and OrdinalNumber !&lt;/P&gt;&lt;H4 id="toc-hId-613199157"&gt;Step 4b: Update Email Address&lt;/H4&gt;&lt;P&gt;With all this data, we can finally run our update query.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;BR /&gt;&lt;/STRONG&gt;&lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_AddressEmailAddress(AddressID='&amp;lt;ADDRESS-ID&amp;gt;',Person='&amp;lt;PERSON&amp;gt;',OrdinalNumber='&amp;lt;ORDINAL-NUMBER&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "EmailAddress": "NEW@EMAIL.COM"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;That's it&lt;/P&gt;&lt;P&gt;Similarly, we can update phone or any other business partner object. Always ensure that you are expanding properly when calling the GET query, so that the object you want to get is listed in the response.&lt;/P&gt;&lt;P&gt;Recommendable is also to handle the response to the PATCH request, the desirable response code is 204. Anything else we can route as an exception in our iflow, as the update did not go through.&lt;/P&gt;&lt;P&gt;See also&amp;nbsp;&lt;A title="Creating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter" href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/13953228" target="_blank"&gt;Creating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter&lt;/A&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/updating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/14109511"/>
    <published>2025-05-22T18:35:37.307000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/send-data-from-sap-analytics-cloud-to-3rd-party-tools-using-cpi/ba-p/14129356</id>
    <title>Send data from SAP Analytics Cloud to 3rd Party tools using CPI</title>
    <updated>2025-06-17T10:57:20.877000+02:00</updated>
    <author>
      <name>akshaykhatri1992</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/778666</uri>
    </author>
    <content>&lt;P&gt;Requirement from customer:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Customer checks the financial values on SAC story and is ok with the KPIs.&lt;/LI&gt;&lt;LI&gt;Customer needs a &lt;STRONG&gt;button&lt;/STRONG&gt; in SAC to send the KPIs to 3rd party system in a format different from what we have in Step 1.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample Layout of Report for 1:&amp;nbsp;&lt;/U&gt;&lt;/STRONG&gt;Format of report to validate KPI values, Accounts on rows and Period Amounts in columns.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_0-1750139502848.png" style="width: 640px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274957i00BE7E2542B0130A/image-dimensions/640x76?v=v2" width="640" height="76" role="button" title="akshaykhatri1992_0-1750139502848.png" alt="akshaykhatri1992_0-1750139502848.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample Layout of Report for 2:&amp;nbsp;&lt;/U&gt;&lt;/STRONG&gt;Format of data to be send outside of SAC using Button Script:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_1-1750139502849.png" style="width: 644px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274956i3F260978BA99571B/image-dimensions/644x71?v=v2" width="644" height="71" role="button" title="akshaykhatri1992_1-1750139502849.png" alt="akshaykhatri1992_1-1750139502849.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Here we will not cover Analytic Model development on &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp;end to end, below is how we take the oData request of Analytic model&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_2-1750139502852.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274958i8B285EE859786985/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_2-1750139502852.png" alt="akshaykhatri1992_2-1750139502852.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Copy URL and adjust the URL depending on fields required and additional operators like sort, filter etc. This URL will contain the fields that need to be sent outside SAC, hence needs to be accurate.&lt;/P&gt;&lt;P&gt;Example:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_3-1750139502864.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274961i7C14996EEF2DD1E3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_3-1750139502864.png" alt="akshaykhatri1992_3-1750139502864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The above URL can be shared with &lt;a href="https://community.sap.com/t5/c-khhcw49343/Cloud+Integration/pd-p/67837800100800006801" class="lia-product-mention" data-product="361-1"&gt;Cloud Integration&lt;/a&gt;&amp;nbsp;(CPI), to be maintained in HTTP Adapter, also can be made dynamic with placeholders/filters. ( In our case w e are passing fiscal year, Period, company code etc. and the same is changed dynamically at CPI end.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample IFLOW from CPI ( HTTP Adapter)&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_4-1750139502868.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274960i998DE03D8D3357CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_4-1750139502868.png" alt="akshaykhatri1992_4-1750139502868.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Create a connection in &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-1"&gt;SAP Analytics Cloud&lt;/a&gt;&amp;nbsp;with CPI ( HTTP Connection ) :&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This will be used to POST the data from SAC to the endpoint of CPI tenant(S).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_5-1750139502870.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274959i6D058F1CED2C7224/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_5-1750139502870.png" alt="akshaykhatri1992_5-1750139502870.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Create MultiAction in &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-2"&gt;SAP Analytics Cloud&lt;/a&gt;&amp;nbsp;with API&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;“Test_Multiaction”&lt;/STRONG&gt; created&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_6-1750139502872.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274963iAD26D6A984242D6D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_6-1750139502872.png" alt="akshaykhatri1992_6-1750139502872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;HTTP API Connection is selected that was created in above step.&lt;/P&gt;&lt;P&gt;Message body can have fixed message, also can pass Parameters as in our case.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_7-1750139502872.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274962i57E29FF0A05A0558/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_7-1750139502872.png" alt="akshaykhatri1992_7-1750139502872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_8-1750139502876.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274964iAE4E13CC93DB56B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_8-1750139502876.png" alt="akshaykhatri1992_8-1750139502876.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Parameters can be maintained here:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_9-1750139502879.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274966iF12627E678471E42/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_9-1750139502879.png" alt="akshaykhatri1992_9-1750139502879.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;SAC Story/Page for Execution &lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;I am taking an example of standalone story, but this can also be added to a new page of the same story that the user is viewing( like story in Sample Layout 1 shown above ).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_10-1750139502880.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274965i8E9031EC26BBBB5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_10-1750139502880.png" alt="akshaykhatri1992_10-1750139502880.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As it can be seen above, we are using radio button, input text fields to capture user inputs to be passed to multiaction parameters shown above.&lt;/P&gt;&lt;P&gt;Before we can call the multiaction in our story, we need to attach/combine &lt;STRONG&gt;"Test_Multiaction" &lt;/STRONG&gt;created above&amp;nbsp;it in the story.&amp;nbsp;Navigate to &lt;STRONG&gt;“Outline”&lt;/STRONG&gt; and use &lt;STRONG&gt;“Add Multiactions”&lt;/STRONG&gt; and follow screenshot below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_11-1750139502881.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274967iBD4807FED8BC7F59/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_11-1750139502881.png" alt="akshaykhatri1992_11-1750139502881.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_12-1750139502884.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274970iE65AE951CF55E51F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_12-1750139502884.png" alt="akshaykhatri1992_12-1750139502884.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Below is the&amp;nbsp;&lt;STRONG&gt;&lt;U&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-3"&gt;SAP Analytics Cloud&lt;/a&gt;&lt;/U&gt;&lt;/STRONG&gt;&amp;nbsp;script sample to set the parameters of Multiaction and also to call/execute the same. This will post the message to CPI&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_13-1750139502887.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274969i96F7253340139089/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_13-1750139502887.png" alt="akshaykhatri1992_13-1750139502887.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;On successful execution, we get the message as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_14-1750139502888.png" style="width: 491px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274968i4261DDD44AA27A4D/image-dimensions/491x221?v=v2" width="491" height="221" role="button" title="akshaykhatri1992_14-1750139502888.png" alt="akshaykhatri1992_14-1750139502888.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Monitor Job (MultiAction):&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We can also monitor the status of runs/jobs for the created multiAction to check history and failure details.&lt;/P&gt;&lt;P&gt;Goto “Job Monitor - Multiactions”&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_15-1750139502890.png" style="width: 509px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274972i1D2C4117522B468A/image-dimensions/509x159?v=v2" width="509" height="159" role="button" title="akshaykhatri1992_15-1750139502890.png" alt="akshaykhatri1992_15-1750139502890.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_16-1750139502893.png" style="width: 518px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274971iBB8A642D3B14638A/image-dimensions/518x149?v=v2" width="518" height="149" role="button" title="akshaykhatri1992_16-1750139502893.png" alt="akshaykhatri1992_16-1750139502893.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/send-data-from-sap-analytics-cloud-to-3rd-party-tools-using-cpi/ba-p/14129356"/>
    <published>2025-06-17T10:57:20.877000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/tree-view-in-rap/ba-p/14135071</id>
    <title>Tree view in RAP</title>
    <updated>2025-06-24T09:43:15.825000+02:00</updated>
    <author>
      <name>Vivek_Sahu_21</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451075</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;In this blog we will cover:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Introduction,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Architecture overview,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Scenario,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Procedure,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Conclusion.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Introduction:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in SAP ABAP is used to define &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;recursive, tree-like relationships&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in data directly within Core Data Services (CDS) views. It allows structured, hierarchical data (like manager-employee, material categories, sales orgs, BOMs, etc.) to be represented and consumed easily in UI applications and analytics tools.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;RAP (RESTful ABAP Programming Model)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tree View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; is used to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;visualize hierarchical (recursive) data structures&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the UI—typically in &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Fiori Elements&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; apps such as List Reports with tree tables.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Tree View allows end users to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;navigate data in a parent-child format&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (e.g., managers → employees, sales org → region → country).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;├── Region North America&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;│&amp;nbsp;&amp;nbsp; ├── Country USA&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;│&amp;nbsp;&amp;nbsp; └── Country Canada&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;└── Region Europe&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ├── Country Germany&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; └── Country France&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To enable a Tree View in a RAP app:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Model recursive data in a CDS view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (e.g., employee-manager, sales org tree)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (&lt;/SPAN&gt;&lt;SPAN&gt;define hierarchy&lt;/SPAN&gt;&lt;SPAN&gt;)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Use a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;C_ projection view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to expose the hierarchy using:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1599241"&gt;@odata&lt;/a&gt;.hierarchy.recursiveHierarchy: [ { entity.name: 'ZVS_I_SALES_ORG_HN' } ]&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Add your entity to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Definition&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Binding&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Run the Fiori app (it will automatically detect and display a tree)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Treeviews: Architecture Overview&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The implementation of a treeview in the ABAP RESTful Application Programming Model (RAP) requires different entities depending on whether the treeview should be read-only or editable.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Read-Only Treeview&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750743710426.jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277974i2891481FDCFB3EFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750743710426.jpeg" alt="Vivek_Sahu_21_0-1750743710426.jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Read-Only Tree View in CDS&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;To enable a read-only hierarchical display of data in the UI, the following CDS artifacts are used in combination:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Database Table&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;A custom database table holds the hierarchical data structure.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Interface View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This CDS view entity is built on top of the database table and defines the data model. It includes a self-association to represent the parent-child hierarchy within the same dataset.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS Hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;persistent CDS hierarchy&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; is created using the &lt;/SPAN&gt;&lt;SPAN&gt;DEFINE HIERARCHY&lt;/SPAN&gt;&lt;SPAN&gt; statement. It provides a hierarchical interpretation of the interface view, enabling the framework to understand how records are nested.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Projection View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This view projects the interface view and incorporates the CDS hierarchy to expose the structured, hierarchical data as required by the UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Definition and Service Binding&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;These are created to expose the CDS projection view as an OData service. This step enables the consumption of hierarchical data in SAP Fiori or other UI frameworks.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Editable Treeview with Draft&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750744114176.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277982i08F2A2C1F5D8F5DC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750744114176.png" alt="Vivek_Sahu_21_0-1750744114176.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Editable Tree View with Draft Enablement – Architecture Overview&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;To enable an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;editable tree view with draft functionality&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, the following key artifacts work together to define and expose the hierarchical data structure to the UI:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Database table:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Active and draft tables&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; store the hierarchical data and hierarchy directory separately, supporting draft-enabled transactional scenarios.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;CDS view Entities (Interface Views):&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Interface views reference the underlying database tables and act as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;first projection layer&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The CDS view for the hierarchical data must include:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;self-association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to represent the parent-child relationship within the same entity (enabling hierarchy logic).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;one-to-many association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to link with the hierarchy directory entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;CDS Hierarchy:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;persistent CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; is defined using &lt;/SPAN&gt;&lt;SPAN&gt;DEFINE HIERARCHY&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;It enables hierarchical interpretation for the data exposed by the first-layer CDS view.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Base CDS views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;These views enrich the model with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;compositional information&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;hierarchy directory view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; acts as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;composition root&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (parent).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;hierarchical data view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; acts as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;composition child&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Behaviour Definition for base views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Defines &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactional behavior&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, including:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Draft capability&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Editing operations required by the UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Projection views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Serve the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;consumption layer&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;For the hierarchy directory: A projection view supports transactional queries.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;For hierarchical data: A projection view combines interface view data with hierarchical logic using the &lt;/SPAN&gt;&lt;SPAN&gt;@OData.hierarchy.recursiveHierarchy&lt;/SPAN&gt;&lt;SPAN&gt; annotation (referring to the CDS hierarchy).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Projection behaviour definition:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Describes the behavior of projection views, allowing:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Custom logic&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; like determinations, validations, authorizations, numbering, etc.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Service Definition and Service Binding:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Finally, a &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;service definition&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; and &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;binding&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; are created to expose the hierarchy and its data structure to the UI layer via OData.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;===========================================================================&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Scenario for Tree view in RAP:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In large global companies, the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales &amp;amp; Distribution (SD) module&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; often reflects the company's organizational structure. Typically, &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Organizations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; are arranged in a multi-level hierarchy like this:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750746293329.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278000iA1D1A26B7D0A30E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750746293329.png" alt="Vivek_Sahu_21_0-1750746293329.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This kind of structure helps companies manage &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;sales performance, reporting, and operations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; more effectively.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, many systems don’t provide a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;read-only, easy-to-use view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; of this hierarchy — especially in a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;tree or drill-down format&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; that users can easily navigate.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we’ll walk through how to model and expose this Sales Org hierarchy using &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS Hierarchies&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, and finally expose it through an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;OData service&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to be consumed in a Fiori UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Procedure:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 1: Define the Base Table - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_DT_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This transparent table stores the core sales organization data including parent-child relationships.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Hierarchy: Read Only: Sales Organization'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zvs_dt_sales {

  key client       : abap.clnt not null;
  key sales_org_id : abap.char(6) not null;
  name             : abap.char(50);
  region           : abap.char(20);
  country          : abap.char(3);
  @Semantics.amount.currencyCode : 'zvs_dt_sales.currency'
  revenue          : abap.curr(21,2);
  currency         : /dmo/currency_code;
  parent_sales_org : abap.char(6);

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Note:&lt;/SPAN&gt;&lt;/STRONG&gt; &lt;SPAN&gt;parent_sales_org&lt;/SPAN&gt;&lt;SPAN&gt; is a self-referencing field to represent the hierarchy.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This table contain some records:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750746688733.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278008i35DB9521A7BF5906/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750746688733.png" alt="Vivek_Sahu_21_0-1750746688733.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 2: Interface View - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_I_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This CDS view represents the Sales Org data and defines a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;self-association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to establish the parent-child link.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface View: Sales Organization'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity zvs_i_sales as select from zvs_dt_sales
association to zvs_i_sales as _Parent on 
    $projection.ParentSalesOrg = _Parent.SalesOrgId
{
    key sales_org_id as SalesOrgId,
    name as Name,
    region as Region,
    country as Country,
    @Semantics.amount.currencyCode: 'Currency'
    revenue as Revenue,
    currency as Currency,
    parent_sales_org as ParentSalesOrg,
    
    _Parent
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 3: Define Hierarchy - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_I_SALES_HN&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using CDS hierarchy syntax, we now define a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;parent-child recursive hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label:'Sales Organization Hierarchy'

define hierarchy zvs_i_sales_hn
  as parent child hierarchy (
    source zvs_i_sales
    child to parent association _Parent
    start where ParentSalesOrg is initial
    siblings order by SalesOrgId ascending
  )
{
    key SalesOrgId,
      ParentSalesOrg
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;This is where the magic happens. This hierarchy enables a recursive structure that can be rendered in Fiori Tree controls.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 4: Projection View - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_C_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This is the final consumption layer that will be exposed as OData. The hierarchy is referenced using the &lt;/SPAN&gt;&lt;SPAN&gt;@OData.hierarchy.recursiveHierarchy&lt;/SPAN&gt;&lt;SPAN&gt; annotation.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Projection View: Sales Organization'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
  serviceQuality:#X,
  sizeCategory:#S,
  dataClass:#MIXED
}
@Metadata.allowExtensions:true
@Search.searchable:true

@OData.hierarchy.recursiveHierarchy: [{ entity.name: 'zvs_i_sales_hn' }]
define view entity zvs_c_sales as select from zvs_i_sales
association of many to one zvs_c_sales as _Parent
    on $projection.ParentSalesOrg = _Parent.SalesOrgId
{
    key SalesOrgId,
    @Search.defaultSearchElement: true
    Name,
    Region,
    Country,
    @Semantics.amount.currencyCode: 'Currency'
    Revenue,
    Currency,
    ParentSalesOrg,
    /* Associations */
    _Parent
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Screenshot:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_1-1750747123946.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278015iBDF0BBC47997F34B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_1-1750747123946.png" alt="Vivek_Sahu_21_1-1750747123946.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Metadata extension:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
annotate entity zvs_c_sales with
{
  @UI: {lineItem: [{ label: 'Sales org ID', position: 10 }],
        identification: [{ label: 'Sales org ID', position: 10 }]
  }
  SalesOrgId;

  @UI: {lineItem: [{ label: 'Sales org Name', position: 20 }],
    identification: [{ label: 'Sales org Name', position: 20 }]
  }
  Name;

  @UI: {lineItem: [{ label: 'Region', position: 30 }],
    identification: [{ label: 'Region', position: 30 }]
  }
  Region;

  @UI: {lineItem: [{ label: 'Country', position: 40 }],
    identification: [{ label: 'Country', position: 40 }]
  }
  Country;

  @UI: {lineItem: [{ label: 'Revenue', position: 50 }],
    identification: [{ label: 'Revenue', position: 50 }]
  }
  Revenue;

  @UI: {lineItem: [{ label: 'Currency', position: 60 }],
    identification: [{ label: 'Currency', position: 60 }]
  }
  Currency;

  @UI: {lineItem: [{ label: 'Parent Sales org ID', position: 70 }],
        identification: [{ label: 'Parent Sales org ID', position: 70 }]
  }
  ParentSalesOrg;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 6: Service Binding - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_C_SALES_ORG_V4&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;If you will choose service binding type as V2, So you will get one error:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750747822530.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278026iA1D4CE4AD614B646/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750747822530.png" alt="Vivek_Sahu_21_0-1750747822530.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;So select your Binding type as V4,&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750747270474.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278016iE5D2B66D56C3A4F5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750747270474.png" alt="Vivek_Sahu_21_0-1750747270474.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Now preview your application:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_1-1750747270475.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278018i775632EE7FE87274/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_1-1750747270475.png" alt="Vivek_Sahu_21_1-1750747270475.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_2-1750747270476.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278017i237BDF6C97864655/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_2-1750747270476.png" alt="Vivek_Sahu_21_2-1750747270476.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_3-1750747270477.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278019i79A479F9D5D0F6D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_3-1750747270477.png" alt="Vivek_Sahu_21_3-1750747270477.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;&lt;FONT size="6"&gt;Conclusion:&amp;nbsp;&lt;/FONT&gt;&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using CDS views and hierarchies in SAP S/4HANA is a simple and effective way to show the Sales Organization structure in a clear, tree-like format. It helps sales managers easily understand how different sales units are connected and how each one is performing. This setup is read-only, so the data stays safe, and it works well with Fiori apps for a smooth user experience.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Overall, this approach makes reporting and analysis easier without needing a lot of custom coding.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/tree-view-in-rap/ba-p/14135071"/>
    <published>2025-06-24T09:43:15.825000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/i-skipped-fiori-and-i-d-do-it-again/ba-p/14138288</id>
    <title>I Skipped Fiori (And I'd Do It Again)</title>
    <updated>2025-06-26T23:31:10.570000+02:00</updated>
    <author>
      <name>Alice_V</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/609259</uri>
    </author>
    <content>&lt;H3 id="ember576" id="toc-hId-1862449086"&gt;Or: How TRIZ Taught Me The Best UI Is No UI&lt;/H3&gt;&lt;P class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="Fiori-02-Untitled.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284552i9A02460A468C2F87/image-size/large?v=v2&amp;amp;px=999" role="button" title="Fiori-02-Untitled.png" alt="Fiori-02-Untitled.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Hey SAP folks! &lt;span class="lia-unicode-emoji" title=":waving_hand:"&gt;👋&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;Deep breath.&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;I have a confession: I skipped Fiori. Just like I skipped SAP Smart Forms (jumping straight from SAPscript to Adobe Forms) and WebDynpro (leaping from SAPGUI to Fiori). Before you assume I'm just another anti-Fiori rebel, hear me out.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;I loved Fiori when it launched in 2013. Finally, SAP that didn't look like Windows 95! Responsive design! Tiles! But it's 2025, and we're still... clicking... through... tiles... to... do... everything.&lt;/P&gt;&lt;P class=""&gt;After working with Fiori since 2015, I had an epiphany that would make any TRIZ (innovation theory) person weep with joy:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"The ideal system is one that doesn't exist but its function is performed."&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember583" id="toc-hId-1665935581"&gt;The "This Can't Be The Future" Moment&lt;/H3&gt;&lt;P class=""&gt;Picture this: &lt;STRONG&gt;9 AM Monday.&lt;/STRONG&gt; CFO pings you: &lt;EM&gt;"Need the latest P&amp;amp;L for company 1000 — compare this quarter to last, right now."&lt;/EM&gt;&lt;/P&gt;&lt;H3 id="ember585" id="toc-hId-1469422076"&gt;The Fiori Way™:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;Open Fiori Launchpad (wait for tiles to load)&lt;/LI&gt;&lt;LI&gt;Find "Financial Statement Analysis" app&lt;/LI&gt;&lt;LI&gt;Click tile (wait for app to load)&lt;/LI&gt;&lt;LI&gt;Select company code from dropdown&lt;/LI&gt;&lt;LI&gt;Choose fiscal period and year&lt;/LI&gt;&lt;LI&gt;Apply profit center filters&lt;/LI&gt;&lt;LI&gt;Navigate through multiple screens&lt;/LI&gt;&lt;LI&gt;Export to Excel for actual analysis&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;Time&lt;/STRONG&gt;: ~4 minutes · 23 clicks · 8 screens · &lt;STRONG&gt;Frustration&lt;/STRONG&gt;: Daily&lt;/P&gt;&lt;H3 id="toc-hId-1272908571"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="ember588" id="toc-hId-1076395066"&gt;The 2025 Way:&lt;/H3&gt;&lt;PRE&gt;Me: Show me P&amp;amp;L breakdown for company code 1000, 
    this quarter vs last quarter

Claude: Q4 2024 vs Q3 2024 analysis ready:
        Revenue: +12% ($2.4M → $2.7M)
        EBITDA margin improved 3.2% 
        (cost optimization in logistics)
        Key driver: 18% increase in Product Line A&lt;/PRE&gt;&lt;P class=""&gt;&lt;STRONG&gt;Time&lt;/STRONG&gt;: 8 seconds · Clicks: 0 · &lt;STRONG&gt;Sanity&lt;/STRONG&gt;: Preserved&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember1392" id="toc-hId-879881561"&gt;How I Built The Bridge to Skip Ahead&lt;/H3&gt;&lt;P class=""&gt;I knew exactly what I wanted to track. After years with Fiori, I understood the game. So I built a Chrome extension that captures:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Every click, input, form submission&lt;/LI&gt;&lt;LI&gt;Every OData request triggered by those clicks&lt;/LI&gt;&lt;LI&gt;Complete UI5 context and metadata&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Atomic action decomposition with parametrization&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;The pattern was always there:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&amp;nbsp; &amp;nbsp;User Action → UI Update &lt;/EM&gt;→ &lt;STRONG&gt;OData Call → Backend Logic&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;The TRIZ insight:&lt;/STRONG&gt; Why do we need the first two steps at all?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;OData Call → Backend Logic&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&amp;nbsp; &amp;nbsp;(Whisper: &lt;/EM&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/universal-odata-mcp-bridge-or-how-i-accidentally-made-15-000-enterprise/bc-p/14134777" target="_self"&gt;&lt;EM&gt;MCP - OData Bridge!)&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember598" id="toc-hId-683368056"&gt;The Shocking Truth: 80% Pure Waste&lt;/H3&gt;&lt;P class=""&gt;My extension analysed hundreds of Fiori sessions across different apps. The results?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Real data from "Manage Detection Methods":&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Duration: 27.7 seconds&lt;/LI&gt;&lt;LI&gt;Clicks: 10&lt;/LI&gt;&lt;LI&gt;OData requests: 15&lt;/LI&gt;&lt;LI&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;annotations involved: 23&lt;/LI&gt;&lt;LI&gt;Actual business logic: Update one field&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;Pattern discovery:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;UI Layer:&lt;/STRONG&gt; 80% overhead (pure translation)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Business Logic:&lt;/STRONG&gt; 20% actual work&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Innovation opportunity:&lt;/STRONG&gt; Eliminate the 80%&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember604" id="toc-hId-486854551"&gt;Liberation from &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt; Annotation Hell&lt;/H3&gt;&lt;P class=""&gt;Remember wrestling with cryptic &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt; annotations? Hours spent debugging why fields don't appear, fighting responsive design, calling consultants when layouts break.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;When you eliminate the UI, you eliminate the entire annotation ecosystem.&lt;/STRONG&gt; Clean CDS views with pure business logic. No more &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;.* black magic.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember1409" id="toc-hId-161258327"&gt;The Three Pillars That Let Me Skip Fiori&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Parametrized Automation&lt;/STRONG&gt;→ Record once, replay forever with different parameters&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Intelligent Test Generation&lt;/STRONG&gt; → Describe in English, auto-generate reliable tests&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;AI-Ready Business Tools&lt;/STRONG&gt; → Convert interactions to semantic tools Claude understands&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember609" id="toc-hId-93827541"&gt;The Transformation Results&lt;/H3&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-26_20-21-31.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279549iF2F58D3CD6857F2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-26_20-21-31.png" alt="2025-06-26_20-21-31.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;P class=""&gt;&lt;STRONG&gt;95% time reduction. 100% complexity elimination.&lt;/STRONG&gt;&lt;/P&gt;&lt;H2 id="ember612" id="toc-hId-115485674"&gt;The "But What About..." Section&lt;/H2&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about data visualization?"&lt;/STRONG&gt; Great question! Complex charts and graphs? Keep those Fiori apps. But for the 80% of interactions that are just CRUD operations? Dead.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about user permissions?"&lt;/STRONG&gt; The OData services already handle that. If you can't do something in Fiori, the AI can't do it either. Security preserved, clicking eliminated.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about complex workflows?"&lt;/STRONG&gt; You mean like "Create PO → Route for approval → Update inventory"? Watch this:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about mobile?"&lt;/STRONG&gt; You know what works great on mobile? Chat. You know what doesn't? Trying to click tiny Fiori tiles on a phone screen.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember617" id="toc-hId--374430838"&gt;What This Means For You&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;For Functional Consultants:&lt;/STRONG&gt; Demonstrate a process once, get automation forever. No coding required.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Developers:&lt;/STRONG&gt; Focus on business logic. Let AI handle the interaction layer.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Managers:&lt;/STRONG&gt; Measure ROI in seconds saved × transactions per day. The math is beautiful.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Everyone:&lt;/STRONG&gt; The future isn't better UIs — it's no UIs at all.&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember619" id="toc-hId--570944343"&gt;Your Turn&lt;/H3&gt;&lt;P class=""&gt;&lt;SPAN&gt;Ready to skip your own Fiori apps&lt;/SPAN&gt;? The extension turns any SAP professional into an automation architect.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;What's your most time-wasting Fiori workflow?&lt;/STRONG&gt; Comment below with your biggest pain point — I'll analyse the potential time savings and show you the elimination path.&lt;/P&gt;&lt;P class=""&gt;The ideal interface is one that doesn't exist but gets the job done.&lt;/P&gt;&lt;P class=""&gt;Time to evolve beyond clicking. &lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;Technical deep-dive and extension demo ➜ [Coming Soon]&lt;/STRONG&gt; &lt;STRONG&gt;Next week:&lt;/STRONG&gt; "How TRIZ Principle 13 Made SAP Read My Mind"&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember625" id="toc-hId--767457848"&gt;Quick Reference/Glossary: see in comments.&lt;/H3&gt;&lt;P class=""&gt;Let me know in comments what you want me to eliminate next &lt;span class="lia-unicode-emoji" title=":grinning_face_with_big_eyes:"&gt;😃&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/i-skipped-fiori-and-i-d-do-it-again/ba-p/14138288"/>
    <published>2025-06-26T23:31:10.570000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448</id>
    <title>General Data Splitter Tool for Optimized Efficient Data Processing and Scalable Integration</title>
    <updated>2025-07-02T14:22:03.206000+02:00</updated>
    <author>
      <name>ManaswiniPuli</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1940178</uri>
    </author>
    <content>&lt;P&gt;Struggling with handling massive data files in your integration flows? You're not alone! I'm Manaswini Puli , committed to break down complex integration challenges. In this hands-on guide, I'll walk you through using the&amp;nbsp;&lt;STRONG&gt;General Splitter tool&lt;/STRONG&gt;&amp;nbsp;in SAP Integration Suite to efficiently break down large messages into manageable segments—boosting processing speed and scalability while handling structured XML/JSON data with ease.&lt;/P&gt;&lt;P&gt;Follow along as we transform complex data streams into optimized, scalable workflows step by step. If this solves your data bottleneck challenges, I'd love to hear your thoughts in the comments.&lt;/P&gt;&lt;P&gt;Below is the complete&lt;STRONG&gt; iFlow&lt;/STRONG&gt;, featuring the use of a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; to process structured messages effectively, along with &lt;STRONG&gt;OData&lt;/STRONG&gt; integration for seamless data exchange.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_16-1750756348215.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278173iE626C00B60699642/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_16-1750756348215.png" alt="ManaswiniPuli_16-1750756348215.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1604196073"&gt;Step-by-Step Guide: General Data Splitter Tool for Optimized, Efficient Data Processing and Scalable Integration&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Access Integration Suite&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to &lt;STRONG&gt;SAP BTP Cockpit&lt;/STRONG&gt; using your registered email and password.&lt;/LI&gt;&lt;LI&gt;Go to your Subaccount and navigate to &lt;STRONG&gt;Subscriptions&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click on &lt;STRONG&gt;Integration Suite&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create a Package&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In Integration Suite, go to the &lt;STRONG&gt;Design&lt;/STRONG&gt; tab and click &lt;STRONG&gt;Packages&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create Package&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create an Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the package you created.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create&lt;/STRONG&gt;, select &lt;STRONG&gt;Integration Flow&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt; to open the editor.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Configure HTTPS Sender Adapter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_1-1750756263825.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278157i0EC4E6DDECD49BDC/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_1-1750756263825.png" alt="ManaswiniPuli_1-1750756263825.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;HTTPS sender&lt;/STRONG&gt; to receive incoming data.&lt;/LI&gt;&lt;LI&gt;Under the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Set the &lt;STRONG&gt;Address Path&lt;/STRONG&gt; to /Products/Details.&lt;/LI&gt;&lt;LI&gt;Set &lt;STRONG&gt;Authorization&lt;/STRONG&gt; to User Role.&lt;/LI&gt;&lt;LI&gt;Enter &lt;STRONG&gt;User Role&lt;/STRONG&gt;: ESBMessaging.send.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The Address Path defines the endpoint where the integration flow listens for incoming HTTPS requests, allowing external systems to send product data.&lt;/LI&gt;&lt;LI&gt;The ESBMessaging.send role ensures only authorized clients can access the endpoint.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Add General Splitter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_2-1750756263830.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278155iC925069B590AFE2B/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_2-1750756263830.png" alt="ManaswiniPuli_2-1750756263830.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. Add&amp;nbsp; a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; step after the HTTPS sender.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2.&amp;nbsp; Under the &lt;STRONG&gt;Processing tab&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Expression Type&lt;/STRONG&gt; to &lt;STRONG&gt;XPath&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;:&lt;SPAN&gt;The payload is in XML format, so setting the expression type to XPath enables precise navigation and extraction of relevant data elements.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;XPath Expression&lt;/STRONG&gt; to &lt;STRONG&gt;//productIdentifier&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: productIdentifier is the key element in the payload that uniquely identifies each product, enabling extraction and individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Grouping&lt;/STRONG&gt; to &lt;STRONG&gt;1&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Grouping controls how many split messages are processed together.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: The payload will be taking 3 product Identifiers, so the messages will be divided into 3 groups, each containing a single product Identifier for individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Add Content Modifier&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_3-1750756263836.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278158i5039FF91F5DCC591/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_3-1750756263836.png" alt="ManaswiniPuli_3-1750756263836.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Content Modifier&lt;/STRONG&gt; step after the HTTPS sender.&lt;/LI&gt;&lt;LI&gt;Go to the &lt;STRONG&gt;Message Header&lt;/STRONG&gt; section and click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Configure the header as follows:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Type&lt;/STRONG&gt;: XPath&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;: //productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;: java.lang.String&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;&lt;EM&gt;:&lt;/EM&gt; This extracts the productIdentifier value from the XML payload and stores it as a string in the message header for use in subsequent processing steps.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 7: Add OData Request-Reply&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;OData Request-Reply&lt;/STRONG&gt; step after the &lt;STRONG&gt;General Splitter&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab, configure the following:&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_4-1750756263842.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278159i1553BC749B29B9DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_4-1750756263842.png" alt="ManaswiniPuli_4-1750756263842.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Address&lt;/STRONG&gt;:&lt;A href="https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: This OData endpoint is used to retrieve product data based on the productIdentifier stored in the message header.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3.In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure the following&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_5-1750756263847.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278160i326B8121202D57A2/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_5-1750756263847.png" alt="ManaswiniPuli_5-1750756263847.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Set Operation Details&lt;/STRONG&gt; to &lt;STRONG&gt;Query (GET)&lt;/STRONG&gt; to retrieve data.&lt;BR /&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt; Using the GET query operation allows fetching specific data from the OData service efficiently based on defined query parameters.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Click Select&lt;/STRONG&gt; under &lt;STRONG&gt;Resource Path&lt;/STRONG&gt; to specify the data source:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 1: Connect to System&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_6-1750756263849.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278161i21860A4BCBC0DAF6/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_6-1750756263849.png" alt="ManaswiniPuli_6-1750756263849.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Choose &lt;STRONG&gt;Remote&lt;/STRONG&gt; as the connection source to connect to the external OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Step 2: Select Entity &amp;amp; Define Operation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_7-1750756263852.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278163i7502D56265537ACA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_7-1750756263852.png" alt="ManaswiniPuli_7-1750756263852.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;From the dropdown list, select the entity you want to query (for example, &lt;STRONG&gt;Products&lt;/STRONG&gt;).&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;After selecting the entity, specify the fields to optimize the data returned by the OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 3: Configure Filter &amp;amp; Sorting&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_8-1750756263855.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278162i56DB2BFC26951F92/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_8-1750756263855.png" alt="ManaswiniPuli_8-1750756263855.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Under &lt;STRONG&gt;Filter By&lt;/STRONG&gt;, set the filter condition:&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;productId equals ${header.productIdentifier}&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Click Finish&lt;/STRONG&gt; to complete the configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Add Gather &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_9-1750756263859.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278165iD7C0BE9EB3F7278D/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_9-1750756263859.png" alt="ManaswiniPuli_9-1750756263859.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Gather&lt;/STRONG&gt; step at the end of the flow, after the OData Request-Reply.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Incoming Format&lt;/STRONG&gt;: XML&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Aggregation Algorithm&lt;/STRONG&gt;: Combine&lt;BR /&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;:&lt;/STRONG&gt; The input messages are in XML format, and the Combine algorithm joins them into one XML message. This helps gather all individual responses into a single output.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 9: Deploy and Test Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Deploy&lt;/STRONG&gt; your integration flow from the editor.&lt;/LI&gt;&lt;LI&gt;After deployment, get the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; generated for the HTTPS sender adapter.&lt;/LI&gt;&lt;LI&gt;Open &lt;STRONG&gt;Postman&lt;/STRONG&gt; to test the integration flow.&lt;/LI&gt;&lt;LI&gt;Set the &lt;STRONG&gt;HTTP method&lt;/STRONG&gt; to &lt;STRONG&gt;POST&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Use the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; as the request URL.&lt;/LI&gt;&lt;LI&gt;Under &lt;STRONG&gt;Authorization&lt;/STRONG&gt;, select &lt;STRONG&gt;OAuth 2.0&lt;/STRONG&gt; and provide the following details from the service key created for the integration flow:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Client ID&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Client Secret&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token URL&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_17-1750756556074.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278174i70969EA3FCA5B331/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_17-1750756556074.png" alt="ManaswiniPuli_17-1750756556074.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;7.In the &lt;STRONG&gt;Body&lt;/STRONG&gt; tab, provide the XML payload or data you want to send.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;

&amp;lt;root&amp;gt;

  &amp;lt;record&amp;gt;

    &amp;lt;Products&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-2000&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1138&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1137&amp;lt;/productIdentifier

    &amp;lt;/Products&amp;gt;

  &amp;lt;/record&amp;gt;

&amp;lt;/root&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8.Send the request and verify the response.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 10: Check the Processed Output&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The input payload includes 3 productIdentifier entries.&lt;/LI&gt;&lt;LI&gt;With the General Splitter configured to group by 1, the message is split into 3 individual groups, each containing 1 product.&lt;/LI&gt;&lt;LI&gt;The following is Group 1, containing 1 productIdentifier as a result of the splitter configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_11-1750756263866.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278164i9B43F8BCD2767D5E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_11-1750756263866.png" alt="ManaswiniPuli_11-1750756263866.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-square"&gt;&lt;LI&gt;The following is&amp;nbsp; the OData response, which returns the &lt;STRONG&gt;product details&lt;/STRONG&gt; for that specific productIdentifier.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_12-1750756263873.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278169iCB80B0664EA864C0/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_12-1750756263873.png" alt="ManaswiniPuli_12-1750756263873.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;At the Gather step, these messages are reassembled into a single message that contains all 3 processed product entries.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_13-1750756263878.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278168iC873367E0AE90592/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_13-1750756263878.png" alt="ManaswiniPuli_13-1750756263878.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_14-1750756263883.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278167i0A50803457C44552/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_14-1750756263883.png" alt="ManaswiniPuli_14-1750756263883.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;All the views and opinions in this blog are my own and are made in my personal capacity. SAP shall not be responsible or liable for any of the contents published in this blog.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448"/>
    <published>2025-07-02T14:22:03.206000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/send-odata-batch-requests-in-sap-build-apps-json/ba-p/14146262</id>
    <title>Send OData Batch Requests in SAP Build Apps (JSON)</title>
    <updated>2025-07-07T17:43:44.496000+02:00</updated>
    <author>
      <name>Dan_Wroblewski</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/72</uri>
    </author>
    <content>&lt;P&gt;Many people have asked about sending &lt;A href="https://www.odata.org/documentation/odata-version-2-0/batch-processing/\" target="_self" rel="nofollow noopener noreferrer"&gt;OData batch requests&lt;/A&gt; via SAP Build Apps. It can be done, if your API accepts JSON-formatted payloads for batch requests.&lt;/P&gt;&lt;P&gt;Just use the &lt;STRONG&gt;HTTP Destination Request&lt;/STRONG&gt; flow function.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_1-1751902390476.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283554i8D15662D9C2687E2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Dan_Wroblewski_1-1751902390476.png" alt="Dan_Wroblewski_1-1751902390476.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then set the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Destination:&lt;/STRONG&gt; Create an integration with your destination that points to your API (no need to specify any entities).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; POST&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Body Type:&lt;/STRONG&gt; JSON&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Request Body:&lt;/STRONG&gt; Just define a page variable with the JSON schema you need, and set the values with a Set Page Variable flow function. More on this below.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Path:&lt;/STRONG&gt; /$batch&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Headers:&lt;/STRONG&gt; Content-Type = application/json&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_0-1751902345026.png" style="width: 343px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283553iBB0E1E2BA09DF0D8/image-dimensions/343x791?v=v2" width="343" height="791" role="button" title="Dan_Wroblewski_0-1751902345026.png" alt="Dan_Wroblewski_0-1751902345026.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1863312957"&gt;Request Body&lt;/H3&gt;&lt;P&gt;The request body would be something like this (here we are create new records):&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
    "requests": [
        {
            "id": "1",
            "method": "POST",
            "url": "/Orders",
            "headers": {
                "content-type": "application/json; odata.metadata=minimal; odata.streaming=true",
                "odata-version": "4.0"
            },
            "body": {
                "customer": "JSON1",
                "date": "2021-06-30T00:00:00Z",
                "status": "Initiated",
                "total": 99,
                "currency_code": "USD"
            }
        },
        {
            "id": "2",
            "method": "POST",
            "url": "/Orders",
            "headers": {
                "content-type": "application/json; odata.metadata=minimal; odata.streaming=true",
                "odata-version": "4.0"
            },
            "body": {
                "customer": "JSON2",
                "date": "2021-06-30T00:00:00Z",
                "status": "Initiated",
                "total": 100,
                "currency_code": "USD"
            }
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;For my test, I already had the JSON above so I just put it in a JavaScript component, parsed it, and output it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_2-1751902519819.png" style="width: 1188px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283556iFCB3B2EE2224F30E/image-dimensions/1188x369?v=v2" width="1188" height="369" role="button" title="Dan_Wroblewski_2-1751902519819.png" alt="Dan_Wroblewski_2-1751902519819.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But you could create a page variable, and in your app populate the variable with your data. Then you could use this page variable for the request body.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_3-1751902759936.png" style="width: 1240px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283557i6735CA49244725AF/image-dimensions/1240x561?v=v2" width="1240" height="561" role="button" title="Dan_Wroblewski_3-1751902759936.png" alt="Dan_Wroblewski_3-1751902759936.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Unfortunately, I could not find a way to use the more traditional multipart/mixed payload format from SAP Build Apps. If you can find a way, let us know.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_4-1751902871383.png" style="width: 1034px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283559i7C7CE92F1B97EE13/image-dimensions/1034x618?v=v2" width="1034" height="618" role="button" title="Dan_Wroblewski_4-1751902871383.png" alt="Dan_Wroblewski_4-1751902871383.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/send-odata-batch-requests-in-sap-build-apps-json/ba-p/14146262"/>
    <published>2025-07-07T17:43:44.496000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-s-4hana-cloud-data-via-sap-build-code-on-the-sap-btp-platform/ba-p/14146303</id>
    <title>Accessing S/4HANA Cloud Data via SAP Build Code on the SAP BTP Platform</title>
    <updated>2025-07-16T11:09:48.847000+02:00</updated>
    <author>
      <name>SubramaniyanVenkatraman</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1536504</uri>
    </author>
    <content>&lt;P&gt;Recently, I had the opportunity to contribute to the development of an agentic use case, where I need to fetch data from an S/4HANA Cloud system using existing OData services.&amp;nbsp;This experience gave me hands-on exposure to working with S/4HANA Cloud and understanding how to integrate its data seamlessly into an external application.&lt;/P&gt;&lt;P&gt;In this blog post, I’ll walk you through the step-by-step process of retrieving data from an S/4HANA Cloud system using OData.&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is SAP Business Technology Platform?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;SAP BTP (Business Technology Platform) is SAP’s unified platform-as-a-service (PaaS) offering that provides tools, services, and runtimes for building, integrating, and extending SAP and non-SAP applications in the cloud.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is SAP Cloud Connector?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;The SAP Cloud Connector is a key component in the SAP Business Technology Platform (BTP) landscape. It acts as a secure bridge between your on-premise systems (like SAP S/4HANA on-prem or other internal services) and SAP BTP or cloud-based applications.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is Destination Service?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;The SAP Destination Service is a managed service on SAP Business Technology Platform (BTP) that simplifies and secures how your cloud applications connect to remote systems such as SAP S/4HANA Cloud, on-premise systems, or third-party APIs.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;Instead of hardcoding URLs, credentials, and connection details inside your app, you create a destination configuration in BTP and refer to it in your code.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Download and Install SAP Cloud Connector&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;You can download the Cloud Connector compatible with your machine from the following link: &lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;https://tools.hana.ondemand.com/#cloud&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751905832976.png" style="width: 594px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283580iBD425B307D084A40/image-dimensions/594x220?v=v2" width="594" height="220" role="button" title="Subu1_0-1751905832976.png" alt="Subu1_0-1751905832976.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 1. Cloud Connector download&lt;/P&gt;&lt;P&gt;For Windows, you can choose between the ZIP archive and the MSI installer. The ZIP archive is suitable for development use cases, while the MSI installer is recommended for productive environments, as it installs the Cloud Connector as a service on the server.&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Initial Configuration&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;To configure the SCC, open a browser and navigate to:&lt;BR /&gt;https://&amp;lt;hostname&amp;gt;:8443&lt;/P&gt;&lt;P&gt;Replace &amp;lt;hostname&amp;gt; with the name of the machine where the connector is installed. The port number should match the one configured during installation, by default, it is &lt;STRONG&gt;8443&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;To find the hostname of your machine, open Command Prompt and enter:&lt;BR /&gt;hostname&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751906070203.png" style="width: 455px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283584iA7C98747F6067952/image-dimensions/455x281?v=v2" width="455" height="281" role="button" title="Subu1_0-1751906070203.png" alt="Subu1_0-1751906070203.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 2. Cloud Connector Login&amp;nbsp;&lt;/P&gt;&lt;P&gt;Enter the default credentials (case-sensitive) and click Login:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Username&lt;/STRONG&gt;: Administrator&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password&lt;/STRONG&gt;: manage&lt;/P&gt;&lt;P&gt;Upon your first login, you'll be prompted to change the password. After updating it, select Master as the installation type and click Save.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751906070207.png" style="width: 647px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283583iC2DF2AE585678D97/image-dimensions/647x189?v=v2" width="647" height="189" role="button" title="Subu1_1-1751906070207.png" alt="Subu1_1-1751906070207.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 3. Reset password for SCC&lt;/P&gt;&lt;P&gt;The next step is to add your BTP subaccount to the Cloud Connector.&lt;/P&gt;&lt;P&gt;Select &lt;STRONG&gt;"Choose Manually"&lt;/STRONG&gt; to enter your subaccount details manually.&lt;/P&gt;&lt;P&gt;On the following screen, provide the required information about your BTP subaccount. This is necessary to establish a secure tunnel between the Cloud Connector (SCC) and your SAP BTP subaccount.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Region:&lt;/STRONG&gt; The region where your subaccount was created (see the picture below).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Subaccount:&lt;/STRONG&gt; Your subaccount ID (see the picture below).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Login E-Mail:&lt;/STRONG&gt; The email address used when creating the BTP account.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password:&lt;/STRONG&gt; The password used when creating the BTP account.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_2-1751906070208.png" style="width: 647px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283582iBBB5E81F0FBE019B/image-dimensions/647x207?v=v2" width="647" height="207" role="button" title="Subu1_2-1751906070208.png" alt="Subu1_2-1751906070208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 4. Connect BTP Sub Account to SCC&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_3-1751906070210.png" style="width: 577px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283585i2B634AC444043702/image-dimensions/577x423?v=v2" width="577" height="423" role="button" title="Subu1_3-1751906070210.png" alt="Subu1_3-1751906070210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 5: Cloud Connector – BTP Sub Account Registration&lt;/P&gt;&lt;P&gt;Once successfully added your sub account you will see the screenshot as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_4-1751906070217.png" style="width: 653px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283586i9962B65516FCA896/image-dimensions/653x320?v=v2" width="653" height="320" role="button" title="Subu1_4-1751906070217.png" alt="Subu1_4-1751906070217.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 6. Successful Sub Account Registration&lt;/P&gt;&lt;P&gt;This shows that you have successfully connected your sub account with the cloud connector.&lt;/P&gt;&lt;P&gt;Now its time to connect your On-Premise system.&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Connecting “Cloud to On-Premise” Connection:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Connect your on-premise system to the cloud connector so that it can be access in Business Technology Platform.&lt;/P&gt;&lt;P&gt;Under the sub account ID in your cloud connector click on Cloud to On-Premise in the left menu and then click on ‘+’ sign to add the system.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_5-1751906070219.png" style="width: 654px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283587i38320B5D070D0339/image-dimensions/654x147?v=v2" width="654" height="147" role="button" title="Subu1_5-1751906070219.png" alt="Subu1_5-1751906070219.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 7. Add S/4 HANA Cloud System in SCC&lt;/P&gt;&lt;P&gt;In the pop up that open choose ABAP System as the backend type and choose protocol as HTTP.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_6-1751906070220.png" style="width: 594px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283588i08233CF834511404/image-dimensions/594x266?v=v2" width="594" height="266" role="button" title="Subu1_6-1751906070220.png" alt="Subu1_6-1751906070220.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 8. Add Back End system type&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_7-1751906070221.png" style="width: 575px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283589i90C980499D916BBB/image-dimensions/575x250?v=v2" width="575" height="250" role="button" title="Subu1_7-1751906070221.png" alt="Subu1_7-1751906070221.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 9: Define Protocol for Backend Connection&lt;/P&gt;&lt;P&gt;For the “internal host” use the hostname or the ip address of the ABAP system and its corresponding ICM port number.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_8-1751906070222.png" style="width: 570px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283590i9C96AB2604DBE652/image-dimensions/570x254?v=v2" width="570" height="254" role="button" title="Subu1_8-1751906070222.png" alt="Subu1_8-1751906070222.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 10: Configuring System Host Details&lt;/P&gt;&lt;P&gt;The “Virtual Host” is the hostname you'll use within BTP. You can either use the default value, which matches the Internal Host, or choose a different, less identifiable name.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_23-1751906803846.png" style="width: 589px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283613iB9477F9D55A9A81A/image-dimensions/589x258?v=v2" width="589" height="258" role="button" title="Subu1_23-1751906803846.png" alt="Subu1_23-1751906803846.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 11. Configuring Virtual Host&lt;/P&gt;&lt;P&gt;We'll leave the “Principal Type” set to “None” for now.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_24-1751906857120.png" style="width: 562px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283614iE8E706CF9446CAD2/image-dimensions/562x250?v=v2" width="562" height="250" role="button" title="Subu1_24-1751906857120.png" alt="Subu1_24-1751906857120.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 12. Configure Principal Propagation&lt;/P&gt;&lt;P&gt;Select to use virtual host for “Host in Request Header”.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_25-1751906921412.png" style="width: 572px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283615iCFF53A0C11EBF11C/image-dimensions/572x254?v=v2" width="572" height="254" role="button" title="Subu1_25-1751906921412.png" alt="Subu1_25-1751906921412.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 13: Selecting Virtual Host Option&lt;/P&gt;&lt;P&gt;Provide the SAP ABAP system name.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_12-1751906070226.png" style="width: 552px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283596i7EFA72A5119A333C/image-dimensions/552x243?v=v2" width="552" height="243" role="button" title="Subu1_12-1751906070226.png" alt="Subu1_12-1751906070226.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 14. Selecting ABAP System&amp;nbsp;&lt;/P&gt;&lt;P&gt;Check the summary and click on finish.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_13-1751906070227.png" style="width: 575px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283594i5E799C382D674F96/image-dimensions/575x257?v=v2" width="575" height="257" role="button" title="Subu1_13-1751906070227.png" alt="Subu1_13-1751906070227.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 15. Summary&lt;/P&gt;&lt;P&gt;After successfully creating mapping we need to create resource which is the actual service. Click on the ‘+’ sign under the resources section.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_14-1751906070230.png" style="width: 603px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283595iDFF1FCD9D6E57CBE/image-dimensions/603x175?v=v2" width="603" height="175" role="button" title="Subu1_14-1751906070230.png" alt="Subu1_14-1751906070230.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 16: Resource&amp;nbsp;&lt;/P&gt;&lt;P&gt;To grant the subaccount access to all services, enter &lt;STRONG&gt;/sap&lt;/STRONG&gt; in the URL path and choose &lt;STRONG&gt;"Path and All Sub-Paths"&lt;/STRONG&gt; under the Access Policy setting. This setup can be adjusted later to restrict access to specific resources, which is strongly advised for production environments.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_15-1751906070231.png" style="width: 553px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283597iEF74383BD358B23B/image-dimensions/553x336?v=v2" width="553" height="336" role="button" title="Subu1_15-1751906070231.png" alt="Subu1_15-1751906070231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 17: Adding a New Resource&lt;/P&gt;&lt;P&gt;Now check the resource available and ensure that the backend system is reachable as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_16-1751906070235.png" style="width: 595px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283598iBC0AE0FD4DA58552/image-dimensions/595x171?v=v2" width="595" height="171" role="button" title="Subu1_16-1751906070235.png" alt="Subu1_16-1751906070235.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 18. Check for connection status&lt;/P&gt;&lt;P&gt;Once the system is reachable you will see the status as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_17-1751906070238.png" style="width: 609px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283599i293D8DF11A6808FF/image-dimensions/609x186?v=v2" width="609" height="186" role="button" title="Subu1_17-1751906070238.png" alt="Subu1_17-1751906070238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 19: Verifying System Reachability&lt;/P&gt;&lt;P&gt;If you face some issues in reaching backend system maintain the below configurations at&lt;/P&gt;&lt;P&gt;“Run-&amp;gt;drivers-&amp;gt;Click on ok-&amp;gt; Go to etc folder-&amp;gt;edit hosts”&lt;/P&gt;&lt;P&gt;Add the host details at the bottom and click on SAVE as an example below:&lt;/P&gt;&lt;P&gt;&amp;nbsp;127.54.99.98&amp;nbsp; &amp;nbsp; test.com&lt;/P&gt;&lt;P&gt;If not able to edit copy paste in different location and then change and paste again.&lt;/P&gt;&lt;P&gt;Now you will be able to see the connected CC in your BTP account as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_18-1751906070243.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283602iF17E5BA900AD483A/image-dimensions/633x313?v=v2" width="633" height="313" role="button" title="Subu1_18-1751906070243.png" alt="Subu1_18-1751906070243.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 20. Cloud Connector status in BTP&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Create a Destination Service&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Now lets create a destination service.&lt;/P&gt;&lt;P&gt;BTP (Business Technology Platform) destinations serve as configuration endpoints that define how to establish secure connections with external systems or services. Commonly used in cloud environments, these destinations facilitate communication between different cloud-based applications by specifying connection parameters like endpoint URLs, authentication methods, and additional settings. You can create and manage BTP destinations through the SAP BTP Cockpit or by using the SAP Cloud SDK. They are applicable in various use cases, including accessing external data sources, calling third-party web services, or delivering notifications to external platforms.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_19-1751906070248.png" style="width: 598px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283601i72C5196420226574/image-dimensions/598x296?v=v2" width="598" height="296" role="button" title="Subu1_19-1751906070248.png" alt="Subu1_19-1751906070248.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 21: Creating a Destination in SAP BTP&lt;/P&gt;&lt;P&gt;Maintain the below configuration details:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: Name of your destination&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;: HTTP / HTTPS&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;URL&lt;/STRONG&gt;: Enter the virtual host name maintained in Cloud Connector&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;: Basic Authentication&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;User&lt;/STRONG&gt;: Enter the backend username&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password&lt;/STRONG&gt;: Enter the corresponding password&lt;/P&gt;&lt;P&gt;In the additional properties maintain the below pairs:&lt;/P&gt;&lt;P&gt;"WebIDEEnabled": "true"&lt;/P&gt;&lt;P&gt;“HTML5.DynamicDestination” :"true"&lt;/P&gt;&lt;P&gt;"AppgyverEnabled" :"true"&lt;/P&gt;&lt;P&gt;“sap-platform”:”ABAP”&lt;/P&gt;&lt;P&gt;“sap.build.usage”:”true”&lt;/P&gt;&lt;P&gt;“webIDEUsage”:”odata_gen”&lt;/P&gt;&lt;P&gt;“sap-client”:”000”&lt;/P&gt;&lt;P&gt;These parameters are mantatory in certain ways to consume the destination service via SAP Build Code.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_20-1751906070251.png" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283600i0B04CDAE458CE41B/image-dimensions/600x228?v=v2" width="600" height="228" role="button" title="Subu1_20-1751906070251.png" alt="Subu1_20-1751906070251.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 22. BTP Destination Service&lt;/P&gt;&lt;P&gt;Click on “Save” to save the destination and click on Check Destination to check if the connection is successful.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_21-1751906070255.png" style="width: 604px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283603iDC2D92901035ED43/image-dimensions/604x214?v=v2" width="604" height="214" role="button" title="Subu1_21-1751906070255.png" alt="Subu1_21-1751906070255.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 23. Check Connection&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;Create a SAP Build Code Project&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now lets create a SAP Build code project. Go to Instances and Subscription and click on SAP Build Code. Hope the SAP Build code is already subscribed to your sub account.&lt;/P&gt;&lt;P&gt;In the SAP Build Code click on Create to create a new project.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_22-1751906070263.png" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283604i124A998BDCA1F71F/image-dimensions/600x216?v=v2" width="600" height="216" role="button" title="Subu1_22-1751906070263.png" alt="Subu1_22-1751906070263.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 24. Create a SAP Build Code project&lt;/P&gt;&lt;P&gt;Click on Application -&amp;gt; Next -&amp;gt; Full Stack -&amp;gt; Next -&amp;gt; Full stack Node.JS&lt;/P&gt;&lt;P&gt;Enter the name of the project and click on Review to review the details and then click on Create to create the project.&lt;/P&gt;&lt;P&gt;Once the project is created copy paste the below code:&lt;/P&gt;&lt;P&gt;For demonstration purposes, I have used an example involving the retrieval and modification of Purchase Order data.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;from flask import Flask, request, jsonify
import os
import requests
import json
import base64

# ---------------------------------------------------------------------
# Application Initialization
# ---------------------------------------------------------------------
app = Flask(__name__)

# ---------------------------------------------------------------------
# Fetching port details
# ---------------------------------------------------------------------
cf_port = os.getenv("PORT")

# ---------------------------------------------------------------------
# Getting OAuth Token
# ---------------------------------------------------------------------
def get_oauth_token(destination_credentials):
    oauth_url = destination_credentials['url'] + "/oauth/token"
    client_id = destination_credentials['clientid']
    client_secret = destination_credentials['clientsecret']

    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    response = requests.post(oauth_url, data=data, headers=headers)

    if response.status_code == 200:
        return response.json()['access_token']
    else:
        raise Exception(f"Failed to get OAuth token: {response.status_code} - {response.text}")

# ---------------------------------------------------------------------
# Method to fetch records 
# ---------------------------------------------------------------------
def get_records(lv_dest, lv_string):
    # Get VCAP_SERVICES
    vcap_services = json.loads(os.getenv("VCAP_SERVICES"))

    # Get credentials for Destination service
    destination_credentials = vcap_services['destination'][0]['credentials']
    connectivity_credentials = vcap_services['connectivity'][0]['credentials']
    destination_name = lv_dest
    dest_token = get_oauth_token(destination_credentials)

    # Fetch destination config
    dest_url = f"{destination_credentials['uri']}/destination-configuration/v1/destinations/{destination_name}"
    headers = {"Authorization": f"Bearer {dest_token}"}
    dest_response = requests.get(dest_url, headers=headers)
    dest_response.raise_for_status()
    dest_config = dest_response.json()['destinationConfiguration']

    #  Build full URL
    target_url = dest_config['URL'] + lv_string

    # Token for Connectivity Proxy
    conn_token = get_oauth_token(connectivity_credentials)

    # Use Connectivity Proxy (Cloud Connector)
    proxies = {
        "http": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}",
        "https": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}"
    }

    backend_user = dest_config['User']
    backend_password = dest_config['Password']
    auth_string = f"{backend_user}:{backend_password}"
    auth_encoded = base64.b64encode(auth_string.encode()).decode()

    # Headers for proxy request
    headers = {
        "Accept": "application/json",
        "Proxy-Authorization": f"Bearer {conn_token}",
        "Authorization": f"Basic {auth_encoded}"
    }

    if 'CloudConnectorLocationId' in dest_config:
        headers['SAP-Connectivity-SCC-Location_ID'] = dest_config['CloudConnectorLocationId']

    # Make the proxied request
    response = requests.get(target_url, headers=headers, proxies=proxies)
    response.raise_for_status()
    print("Status:", response.status_code)
    print("Headers:", response.headers)
    print("Body:", response.text)
    return response.json()

# ---------------------------------------------------------------------
# Method to update a record
# ---------------------------------------------------------------------
def update_record(destination_name, path, payload):
    # Get VCAP_SERVICES
    vcap_services = json.loads(os.getenv("VCAP_SERVICES"))

    # Get credentials for Connectivity and Destination service
    destination_credentials = vcap_services['destination'][0]['credentials']
    connectivity_credentials = vcap_services['connectivity'][0]['credentials']
    dest_token = get_oauth_token(destination_credentials)

    # Destination config
    dest_url = f"{destination_credentials['uri']}/destination-configuration/v1/destinations/{destination_name}"
    headers = {"Authorization": f"Bearer {dest_token}"}
    dest_response = requests.get(dest_url, headers=headers)
    dest_response.raise_for_status()
    dest_config = dest_response.json()['destinationConfiguration']

    #  Build full URL
    target_url = dest_config['URL'] + path

    # Token for Connectivity Proxy
    conn_token = get_oauth_token(connectivity_credentials)

    # Use Connectivity Proxy (Cloud Connector)
    proxies = {
        "http": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}",
        "https": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}"
    }

    backend_user = dest_config['User']
    backend_password = dest_config['Password']
    auth_string = f"{backend_user}:{backend_password}"
    auth_encoded = base64.b64encode(auth_string.encode()).decode()

    # Headers for proxy request
    common_headers = {
        "Proxy-Authorization": f"Bearer {conn_token}",
        "Authorization": f"Basic {auth_encoded}",
        "Accept": "application/json"
    }

    if 'CloudConnectorLocationId' in dest_config:
        common_headers['SAP-Connectivity-SCC-Location_ID'] = dest_config['CloudConnectorLocationId']

    # Fetch CSRF Token and Cookies
    token_headers = common_headers.copy()
    token_headers["x-csrf-token"] = "Fetch"

    session = requests.Session()
    token_response = session.get(target_url, headers=token_headers, proxies=proxies)

    if token_response.status_code != 200:
        return token_response.status_code, token_response.text

    csrf_token = token_response.headers.get("x-csrf-token")
    if not csrf_token:
        return 403, "CSRF token not returned"

    # Send PATCH with token and cookies
    update_headers = common_headers.copy()
    update_headers["x-csrf-token"] = csrf_token
    update_headers["Content-Type"] = "application/json"

    # Use session to preserve cookies
    patch_response = session.patch(target_url, headers=update_headers, json=payload, proxies=proxies)

    return patch_response.status_code, patch_response.text

# ---------------------------------------------------------------------
# Update endpoint (POST or GET for testing)
# ---------------------------------------------------------------------
@app.route('/update_data', methods=['GET', 'POST'])
def update_data():
    if request.method == 'GET':
        purchase_order = "12345"
        item = "10"
        update_payload = {
            "DocumentCurrency": "EUR",
        }
    else:
        if not request.is_json:
            return jsonify({"error": "Request must be application/json"}), 415

        data = request.get_json()
        purchase_order = data.get("PurchaseOrder")
        item = data.get("PurchaseOrderItem")

        if not purchase_order or not item:
            return jsonify({"error": "Missing PurchaseOrder or PurchaseOrderItem"}), 400

        item = str(item).zfill(5)  # Pad item number to 5 digits

        update_payload = {
            "OrderQuantity": 15,
        }

    path = f"/sap/opu/odata4/sap/api_purchaseorder_2/srvd_a2x/sap/purchaseorder/0001/PurchaseOrderItem(PurchaseOrder='{purchase_order}',PurchaseOrderItem='{item}')?sap-client=001&amp;amp;$format=json" #Change the OData URL

    status_code, response_text = update_record('Destination_name', path, update_payload) #Modify Destination name

    return jsonify({
        "status_code": status_code,
        "response": response_text
    })

# ---------------------------------------------------------------------
# Fetch record endpoint
# ---------------------------------------------------------------------
@app.route('/fetch_data', methods=['GET'])
def fetch_data():
    lv_request = get_records('Destination_name', '/sap/opu/odata4/sap/api_purchaseorder_2/srvd_a2x/sap/purchaseorder/0001/PurchaseOrderItem?sap-client=001&amp;amp;$format=json') #Change Destination name and OData URL
    return jsonify(lv_request)

# ---------------------------------------------------------------------
# Home page
# ---------------------------------------------------------------------
@app.route('/', methods=['GET'])
def home():
    lv_return = {
        "result": [
            {
                'message':  'Welcome to the homepage!',
                'Fetch_data' : 'Use /fetch_data',
                'Update_data' : 'Use /update_data'
            }
        ]
    }
    return jsonify(status='200', replies=lv_return)


# ---------------------------------------------------------------------
# Main method
# ---------------------------------------------------------------------
if __name__ == '__main__':
# If the app is running locally
    if cf_port is None:
# Use port 5000
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
# Else use cloud foundry default port
        app.run(host='0.0.0.0', port=int(cf_port), debug=False)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Create a manifest.yml file and paste the below:&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;---
applications:
- name: data_read  #Replace with your app name
  random-route: true
  path: ./
  memory: 1028M
  buildpacks:
  - python_buildpack
  command: python backend.py  #Python file name
  services:
  - service_name_001
  env:
    PYTHON_VERSION: 3.11.10&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In the manifest.yml file above, most sections are self-explanatory and have been annotated with comments. The key part to focus on is the services section. To use the configured destination service, you need to create an instance of it. This service is crucial when your application needs to interact with remote systems, such as SAP S/4HANA Cloud, on-premise systems, or third-party APIs.&lt;/P&gt;&lt;P&gt;The destination service is bound to you app so that it can access the destination definition.&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;What happens behind the scene?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;When you bind the Destination Service to your app:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;BTP injects the credentials into your app's environment as VCAP_SERVICES&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Your app code can use a destination name to resolve:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;The target URL&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Authentication method (Basic, OAuth2, etc.)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Proxy type (Internet or OnPremise)&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;If you are connecting to an on-premise system, it routes through SAP Cloud Connector.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;How to create a service in BTP?&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-disc"&gt;&lt;LI&gt;Log in to SAP BTP Cockpit&lt;/LI&gt;&lt;LI&gt;Navigate to your subaccount → Cloud Foundry environment → Space.&lt;/LI&gt;&lt;LI&gt;Go to the Services -&amp;gt; Instances&amp;nbsp;section.&lt;/LI&gt;&lt;LI&gt;Click Create Instance.&lt;/LI&gt;&lt;LI&gt;Choose a Service&lt;SPAN&gt; (e.g.:&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;"Destination" for Destination Service&lt;/LI&gt;&lt;LI&gt;"Connectivity" for accessing on-premise systems&lt;/LI&gt;&lt;LI&gt;"xsuaa" for user authentication/authorization&lt;/LI&gt;&lt;LI&gt;"hana-cloud" or postgresql for databases&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Choose a plan (e.g. lite, standard, etc.)&lt;/LI&gt;&lt;LI&gt;Enter the name&lt;/LI&gt;&lt;LI&gt;Click Create&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751923651041.png" style="width: 593px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283657i69E3B1708C898F44/image-dimensions/593x555?v=v2" width="593" height="555" role="button" title="Subu1_0-1751923651041.png" alt="Subu1_0-1751923651041.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 25. Create a service&lt;/P&gt;&lt;P&gt;Alternatively you can also create a service using bash command as below:&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf create-service destination lite service_name_001 #Replace with your service name&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once the coding is complete, you can proceed with testing the functionality.&lt;/P&gt;&lt;P&gt;Using terminal login to cloud foundry, use the command&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf login&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751911193537.png" style="width: 574px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283623i457FA664D3A81A60/image-dimensions/574x158?v=v2" width="574" height="158" role="button" title="Subu1_1-1751911193537.png" alt="Subu1_1-1751911193537.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 26. Login to CF&lt;/P&gt;&lt;P&gt;Once the login is successful you will see the below message&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751923900662.png" style="width: 583px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283658iDFB1A4C327B6F3D9/image-dimensions/583x169?v=v2" width="583" height="169" role="button" title="Subu1_1-1751923900662.png" alt="Subu1_1-1751923900662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 27. CF login&lt;/P&gt;&lt;P&gt;After which you can deploy your app using the below command&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf push&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once the app is deployed navigate to the cloud foundry -&amp;gt; your space -&amp;gt; your app, get the application routes url for testing.&lt;/P&gt;&lt;P&gt;Use,&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;application_routes_url/&amp;nbsp; &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;application_routes_url/fetch_data&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;application_routes_url/update_data&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;Test results&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Home page&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_2-1751924285431.png" style="width: 524px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283661i0DD99C2D87ACB091/image-dimensions/524x309?v=v2" width="524" height="309" role="button" title="Subu1_2-1751924285431.png" alt="Subu1_2-1751924285431.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 28. Home page&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Fetch Data&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SubramaniyanVenkatraman_0-1752026985083.png" style="width: 618px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284347i95D36853D49AEA9B/image-dimensions/618x133?v=v2" width="618" height="133" role="button" title="SubramaniyanVenkatraman_0-1752026985083.png" alt="SubramaniyanVenkatraman_0-1752026985083.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 29. Fetch data via OData&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Integrating SAP BTP with SAP S/4HANA Cloud using the Destination Service and SAP Cloud Connector provides a secure and scalable way to extend your enterprise systems into the cloud. In this blog, we explored how to configure the necessary services, set up destinations, and connect a cloud application to S/4HANA Cloud to fetch and modify Purchase Order data using OData APIs.&lt;/P&gt;&lt;P&gt;Whether you're building a full-stack application or a lightweight service to automate business processes, understanding the role of Destination Service and Cloud Connector is critical to securely bridging the gap between your cloud apps and backend systems. This approach not only enhances flexibility but also ensures your architecture stays modular, maintainable, and cloud-ready.&lt;/P&gt;&lt;P&gt;I hope this blog serves as a helpful starting point for anyone new to SAP BTP and Destination service. Stay tuned for more hands-on insights and real-world examples from my journey with agentic use cases and enterprise integration!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-s-4hana-cloud-data-via-sap-build-code-on-the-sap-btp-platform/ba-p/14146303"/>
    <published>2025-07-16T11:09:48.847000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/demo-accessing-sap-with-generative-ai-in-microsoft-teams/ba-p/14150831</id>
    <title>Demo: Accessing SAP with Generative AI in Microsoft Teams</title>
    <updated>2025-07-21T03:13:01.221000+02:00</updated>
    <author>
      <name>prakashsaurav</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/12784</uri>
    </author>
    <content>&lt;P&gt;In this demo, we showcase how to bring SAP data closer to your teams by combining the power of Generative AI, Microsoft Copilot Studio, and Teams. Using SAP OData services exposed via SAP BTP Integration Suite, we build an intelligent Copilot agent that lets users retrieve sales orders, products, customers, and suppliers — all through simple natural language conversations. Whether it’s in Teams or Microsoft 365 Copilot, see how you can seamlessly access and interact with your SAP backend data, improving efficiency and transforming user experience.&lt;/P&gt;&lt;P&gt;&lt;A href="https://aditheos.com/2025/06/26/simplifying-sap-access-with-gen-ai-built-on-copilot-studio-integrated-via-sap-btp-azure-apim-delivered-in-teams-copilot/" target="_blank" rel="noopener nofollow noreferrer"&gt;Step by Step Implementation&lt;/A&gt;&amp;nbsp; &amp;nbsp;/&amp;nbsp;Access complete source code @&amp;nbsp;&lt;A href="https://github.com/aditheos/SalesAI" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FgdxKP7GCMn8%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DgdxKP7GCMn8&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgdxKP7GCMn8%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="486" height="273" scrolling="no" title="Simplifying SAP Access with Gen AI | SAP BTP + Microsoft Copilot Studio Demo" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/demo-accessing-sap-with-generative-ai-in-microsoft-teams/ba-p/14150831"/>
    <published>2025-07-21T03:13:01.221000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/step-by-step-guide-to-display-system-details-on-sap-fiori-launchpad-shell/ba-p/14150404</id>
    <title>Step-by-Step Guide to Display System Details on SAP Fiori Launchpad Shell</title>
    <updated>2025-07-30T07:08:44.361000+02:00</updated>
    <author>
      <name>RahulManchala</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/175552</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Use Case:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In this blog, I’ll demonstrate how to display system details—such as the System ID and Client—or any custom text directly on the SAP Fiori Launchpad Shell.&lt;/P&gt;&lt;P&gt;This is achieved by creating a simple OData service in the backend and integrating it into a Shell Plugin using SAP Business Application Studio.&lt;/P&gt;&lt;P&gt;It's a useful enhancement to clearly identify the system context on the launchpad.&lt;/P&gt;&lt;H3 id="toc-hId-1864059470"&gt;Steps to Implement:&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;Create an OData service in SEGW TCode.&lt;/LI&gt;&lt;LI&gt;Create a project in BAS and integrate OData service to your project.&lt;/LI&gt;&lt;LI&gt;Modify only the Component.js and manifest.json files.&lt;/LI&gt;&lt;LI&gt;Deploy the application.&lt;/LI&gt;&lt;LI&gt;Create a Catalog and Target mapping.&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;Go to SEGW TCode and click on Create Project button.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;After that, provide the necessary details such as Project, Description, and Package. If saving as a Local Object, the Package field is not required.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_0-1752235298699.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285463i84BED0858E59E0D6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_0-1752235298699.png" alt="RahulManchala_0-1752235298699.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After creating the project, the following folders will be generated within the project.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_1-1752235298700.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285461iFCE49BFB63360448/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_1-1752235298700.png" alt="RahulManchala_1-1752235298700.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After that click on Generate Runtime Objects button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_2-1752235298701.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285462i1008C3C07A1C4A99/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_2-1752235298701.png" alt="RahulManchala_2-1752235298701.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Some classes and services will be created. Click the Continue button to proceed.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_3-1752235298704.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285465iEFA7D498A40A53E4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_3-1752235298704.png" alt="RahulManchala_3-1752235298704.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Some class will be generated in Runtime Artifacts folder.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_4-1752235298705.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285466i346D9B346AA24F65/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_4-1752235298705.png" alt="RahulManchala_4-1752235298705.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Add the required properties in the Data Model folder.&lt;BR /&gt;To do this, right-click on the project and create an Entity Type.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_5-1752235298705.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285464i8C993AEA0B5123D9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_5-1752235298705.png" alt="RahulManchala_5-1752235298705.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Enter the Entity Type name, select 'Create Related Entity Set,' and click 'Continue'.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_6-1752235298706.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285469i97EC1AFC57082406/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_6-1752235298706.png" alt="RahulManchala_6-1752235298706.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Entity types is created in Data Model Folder.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_7-1752235298707.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285468i3883FCE4600DB477/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_7-1752235298707.png" alt="RahulManchala_7-1752235298707.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now double click on properties and Append SYSID and CLIENT in entity types.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_8-1752235298709.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285470iEA18507C30530693/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_8-1752235298709.png" alt="RahulManchala_8-1752235298709.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the Runtime Artifacts folder, right-click on DPC_EXT and select 'Go to ABAP Workbench'.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_9-1752235298710.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285471i43C87DACEE4E29A7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_9-1752235298710.png" alt="RahulManchala_9-1752235298710.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the Methods folder, expand the Inherited Methods folder. Right-click on the Get_EntitySet method and select 'Redefine' to override it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_10-1752235298714.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285473i23310EEE3AC77E05/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_10-1752235298714.png" alt="RahulManchala_10-1752235298714.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Go to redefined method and activate it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_11-1752235298716.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285472iCBF1CFF3C2CCD59F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_11-1752235298716.png" alt="RahulManchala_11-1752235298716.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Paste the following code into your Entity Set and activate it.&lt;/P&gt;&lt;P&gt;The RSAPI_CTC_GET_SYSTEM_DETAILS function module, provided by SAP, retrieves the System ID and Logon Client.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_12-1752235298719.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285475iC4A3A5EEE32201B6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_12-1752235298719.png" alt="RahulManchala_12-1752235298719.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now register and activate the service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_13-1752235298721.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285474i14F70FB636A8AE43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_13-1752235298721.png" alt="RahulManchala_13-1752235298721.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Create a project in BAS and integrate OData service to your project.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_14-1752235298726.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285476i1994F6512870FEC0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_14-1752235298726.png" alt="RahulManchala_14-1752235298726.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_15-1752235298729.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285479iAB5E873184AB06D0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_15-1752235298729.png" alt="RahulManchala_15-1752235298729.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Set the data source to 'Connect to System.' The systems added in the destination will be displayed here.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_16-1752235298732.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285478iC507ACC9694BED57/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_16-1752235298732.png" alt="RahulManchala_16-1752235298732.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here, I am selecting the S4 system.&lt;/P&gt;&lt;P&gt;Provide the service name and click on Next button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_18-1752235298736.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285481i825B182DDE48946E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_18-1752235298736.png" alt="RahulManchala_18-1752235298736.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Provide View Name and click on Next button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_19-1752235298739.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285480i4133DE90381E4934/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_19-1752235298739.png" alt="RahulManchala_19-1752235298739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Enter the Project Attributes such as Project Name, Application Title, and Namespace, then click the 'Finish' button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_20-1752235298743.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285482i9BE6BCA770266891/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_20-1752235298743.png" alt="RahulManchala_20-1752235298743.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;In the manifest.json file, change the type to "component".&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_21-1752235298744.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285483i8FBD8F80C0E3A8A0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_21-1752235298744.png" alt="RahulManchala_21-1752235298744.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Paste the following code inside the init function of the Component.js file and make the necessary changes based on your service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_22-1752235298745.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285484i629526D27F7136C5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_22-1752235298745.png" alt="RahulManchala_22-1752235298745.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_23-1752235298749.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285485i04E9509E96B8C027/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_23-1752235298749.png" alt="RahulManchala_23-1752235298749.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Run the application in local by using npm run start command.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Output:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_24-1752235298750.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285487iE4F7ED43BF505AE2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_24-1752235298750.png" alt="RahulManchala_24-1752235298750.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;After deploying the file to your system, I deployed my application to an on-premises system.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In Open Integrated Terminal.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Provide the Command npm run deploy-config and provide necessary details.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_25-1752235298751.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285486i36FAE202EFB38303/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_25-1752235298751.png" alt="RahulManchala_25-1752235298751.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;npm run build.&lt;/LI&gt;&lt;LI&gt;npm run deploy.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now you can see your application with BSP name in SE80 Tcode.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_26-1752235298754.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285488iE90F7C8389ACACED/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_26-1752235298754.png" alt="RahulManchala_26-1752235298754.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Next, create a Catalog ID in the designer URL and set up target mapping for that catalog. No need of creation Tile for catalog.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_27-1752235298757.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285489iA5EDD412824F5657/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_27-1752235298757.png" alt="RahulManchala_27-1752235298757.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The URL should be the SICF path of your deployed application.&lt;/LI&gt;&lt;LI&gt;The ID should be the manifest ID.&lt;/LI&gt;&lt;LI&gt;The Semantic Object should be Shell, and the Action should be Plugin.&lt;/LI&gt;&lt;LI&gt;Assign roles to users.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Output on FLP:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="RahulManchala_1-1753208374029.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289954iE6DC88C28F58D315/image-size/medium?v=v2&amp;amp;px=400" role="button" title="RahulManchala_1-1753208374029.png" alt="RahulManchala_1-1753208374029.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;By following the steps outlined in this blog, you’ve successfully built and deployed a &lt;STRONG&gt;Shell Plugin&lt;/STRONG&gt; that dynamically displays system-specific details like the &lt;STRONG&gt;System ID&lt;/STRONG&gt; and &lt;STRONG&gt;Client&lt;/STRONG&gt; on the &lt;STRONG&gt;Fiori Launchpad&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Thanks,&lt;/P&gt;&lt;P&gt;Venkata Rahul M.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/step-by-step-guide-to-display-system-details-on-sap-fiori-launchpad-shell/ba-p/14150404"/>
    <published>2025-07-30T07:08:44.361000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-community-escape-house-for-august-fiori-element-with-flexible/ba-p/14167685</id>
    <title>SAP Community Escape House for August - Fiori Element with Flexible Programming Model</title>
    <updated>2025-08-04T10:10:14.915000+02:00</updated>
    <author>
      <name>AmarUbhe</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/163102</uri>
    </author>
    <content>&lt;P&gt;The &lt;STRONG&gt;eighth edition of the SAP Developer Challenge 2025&lt;/STRONG&gt; has officially kicked off!&amp;nbsp; A brand-new room has opened its doors inside the &lt;A title="SAP Community Escape House" href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com/" target="_self" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP Community Escape House&lt;/STRONG&gt;&lt;/A&gt;.&amp;nbsp; Hope you all escaped alive from the SAP Application Event Hub room last month.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In this developer challenge, we are focusing on &lt;STRONG&gt;SAP Fiori&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Element&lt;/STRONG&gt; and the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt;. We are going to cover topics like:&lt;/P&gt;&lt;P&gt;FPM - Extension Points&lt;/P&gt;&lt;P&gt;FPM - Building Block&lt;/P&gt;&lt;P&gt;FPM - Controller Extension&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1607028261"&gt;Prerequisite&lt;/H1&gt;&lt;P&gt;You have to clone the repository from:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;A class="" href="https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam.git" target="_new" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam.git&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;For this challenge, you will be working in the &lt;FONT color="#0000FF"&gt;&lt;STRONG&gt;finished-bookshop&lt;/STRONG&gt;&lt;/FONT&gt; folder. This folder contains a completed CAP project that serves as the starting point for exploring extensibility using the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt; with &lt;STRONG&gt;SAP Fiori Elements&lt;/STRONG&gt;.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;All extension tasks, including UI enhancements and controller customizations, will be implemented on top of this &lt;STRONG&gt;CAP project&lt;/STRONG&gt;. Inside this project, there is an existing &lt;STRONG&gt;Fiori Elements List Report application&lt;/STRONG&gt; named &lt;FONT color="#0000FF"&gt;&lt;STRONG&gt;bookshop-ui&lt;/STRONG&gt;&lt;/FONT&gt;, which serves as the foundation for this challenge.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;You will extend this application using the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt;, applying techniques such as &lt;STRONG&gt;Fiori extension points&lt;/STRONG&gt;, &lt;STRONG&gt;building blocks&lt;/STRONG&gt;, and &lt;STRONG&gt;controller extensions&lt;/STRONG&gt; to tailor the UI and behavior according to developer challenge.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1604971530" id="toc-hId-1410514756"&gt;How to participate&lt;/H1&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Visit the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com/" target="_blank" rel="noopener noreferrer"&gt;SAP Community Escape House&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and enter your&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;numeric&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;SAP Community user ID.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SAP Community Escape House" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/294502iD7D2B0DE57B525D6/image-size/large?v=v2&amp;amp;px=999" role="button" title="EscapeHouseLogin.png" alt="SAP Community Escape House" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;SAP Community Escape House&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;If you're unsure of your user ID, you can find it on your user settings page url.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;Goto&amp;nbsp;&lt;A href="https://community.sap.com/" target="_blank"&gt;SAP Community Page.&amp;nbsp;&lt;/A&gt;Click on &lt;STRONG&gt;Account&lt;/STRONG&gt;&lt;SPAN&gt; and then select &lt;/SPAN&gt;&lt;STRONG&gt;My content&lt;/STRONG&gt;&lt;SPAN&gt;.&amp;nbsp;You can find the community user ID in the web page URL.&amp;nbsp;Once you see the SAP Community Escape House, select the SAP Fiori Element room and start exploring it.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-46-25.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295893i23ED69E595E5DFC1/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-46-25.png" alt="2025-08-04_12-46-25.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-52-54.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295894i166823321F4BC64A/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-52-54.png" alt="2025-08-04_12-52-54.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-57-20.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295895i1820808AC4717E2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-57-20.png" alt="2025-08-04_12-57-20.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The user interface of an escape room includes the room itself as well as a terminal. You can click the objects in the room to receive tips.&amp;nbsp;Like in a real (physical) escape room, you will have to try out a few things and explore the room until you receive helpful tips and, eventually, instructions. These tips and instructions are printed in the terminal next to the room.&amp;nbsp;The terminal is also used to submit solutions to tasks. Read the instructions you receive carefully to understand how.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AmarUbhe_0-1753958354704.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/294531i139DAD5126DEE294/image-size/large?v=v2&amp;amp;px=999" role="button" title="AmarUbhe_0-1753958354704.png" alt="AmarUbhe_0-1753958354704.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;If you successfully escape the room (you will know when that happens), you will receive a badge in the SAP Community.&amp;nbsp;We will assign the badges once the challenge closes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1408458025" id="toc-hId-1214001251"&gt;The schedule&lt;/H1&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;The SAP Fiori room will be unlocked on August 4th and will stay unlocked until the end of the year. However, the challenge closes on August 31st, so you must escape the room until then to qualify for a badge. Unlike the previous year, this SAP Developer Challenge does not consist of weekly sub-challenges. The next room (next challenge) will be unlocked in September.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1376249370" id="toc-hId-1017487746"&gt;Useful links for the challenge&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;Flexible Programming Model :&amp;nbsp;&lt;A title="Flexible Programming Model" href="https://sapui5.hana.ondemand.com/test-resources/sap/fe/core/fpmExplorer/index.html#/overview/introduction" target="_self" rel="nofollow noopener noreferrer"&gt;https://sapui5.hana.ondemand.com/test-resources/sap/fe/core/fpmExplorer/index.html#/overview/introduction&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Fiori Element OData V4 :&amp;nbsp;&lt;A href="https://developers.sap.com/group.fiori-tools-odata-v4-incident.html" target="_self" rel="noopener noreferrer"&gt;https://developers.sap.com/group.fiori-tools-odata-v4-incident.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;FPM Code Jam :&amp;nbsp;&lt;A href="https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam/tree/main?tab=readme-ov-file" target="_self" rel="nofollow noopener noreferrer"&gt;https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam/tree/main?tab=readme-ov-file&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Good luck and happy escaping!&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-community-escape-house-for-august-fiori-element-with-flexible/ba-p/14167685"/>
    <published>2025-08-04T10:10:14.915000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/api-to-delete-gos-attachment-from-transaction-code-amp-their-applications/ba-p/14170904</id>
    <title>API to Delete GOS Attachment from Transaction Code &amp; their Applications</title>
    <updated>2025-08-11T12:26:01.244000+02:00</updated>
    <author>
      <name>vikas_naikdesai</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/243708</uri>
    </author>
    <content>&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;This technical blog is subject to simplify process of attachment deletion and how best way it can be applicable to act as an API.&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We have come across multiple technical blogs on attachment( can be PDF, image or MS Office objects) in the specific T-Code of the Transactions, such as for Sales Order, Billing Invoice or other relevant business transactions.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here we will focus on the business requirement to delete an already enclosed/attached one of the attachment&amp;nbsp; in the Inspection Lot(QA03) Transaction and methods of implementations.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The solution is bifurcated in the simple &lt;STRONG&gt;3 steps and we will use a simple and straight standard class (&lt;STRONG&gt;CL_GOS_DOCUMENT_SERVICE) which will be generic to use for other transactions as well.&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Step 1. Pass Object Types Object Key along with Doc ID&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Step 2: Call DELETE_ATTACHMENT method of CL_GOS_DOCUMENT_SERVICE Class&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;Step 3: Commit and wait.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;P&gt;&lt;STRONG&gt;Code Snippet will give a complete solution&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;***************************************************************************************************&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;** Work area declare&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  DATA: LS_LPORB    TYPE SIBFLPORB,
        LS_LINK     TYPE OBL_S_LINK. 

DATA: LO_REF TYPE REF TO CL_GOS_DOCUMENT_SERVICE.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;************************* &lt;U&gt;Step 1 ***************************************&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/U&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;** Value assignment&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    LS_LPORB-INSTID = &amp;lt;Key Field&amp;gt; . "Pass Key field, in this case it can be Inspection Lot Number
    LS_LPORB-TYPEID = &amp;lt;Business Object&amp;gt;. "For Example 'BUS2045'Business Object of Inspection Lot
    LS_LPORB-CATID  = &amp;lt;Object Type&amp;gt;. " For Example'BO' Object Type
    LS_LINK-INSTID_B = &amp;lt;Doc ID&amp;gt;. “Pass Doc ID here  &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;*********************** &lt;U&gt;Step 2 *************************************&lt;/U&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;** Calling Standard Class&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CREATE OBJECT LO_REF.

  CALL METHOD LO_REF-&amp;gt;DELETE_ATTACHMENT
    EXPORTING
      IS_LPORB      = IS_LPORB
      IP_ATTACHMENT = IS_LINK-INSTID_B.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;*************************** &lt;U&gt;Step 3 ******************************&lt;/U&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  COMMIT WORK AND WAIT.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;***************************************************************************************************&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;U&gt;&lt;STRONG&gt;Application&lt;/STRONG&gt;&lt;/U&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Above Snippet can be fix in the below box, shows a simple Application approach interface with UI/BTP or any Non-SAP application sending request via any Interface or middle layer can be Odata service using SAP gateway using Client-Server response methodology.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Simple above code snippet can be placed as part of API logic which will perform its deletion operation in the SAP Transactions such as Inspection Lot/Sales Order/Billing Invoice.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;Deletion of attached document can be deleted by using simple standard class.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Will come up with another series technical developments around Inspection Lot.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vikas_naikdesai_0-1754305452490.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295967iA66A0C5D21EFE53A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vikas_naikdesai_0-1754305452490.png" alt="vikas_naikdesai_0-1754305452490.png" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/api-to-delete-gos-attachment-from-transaction-code-amp-their-applications/ba-p/14170904"/>
    <published>2025-08-11T12:26:01.244000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/behavior-illegal-statement-dump-technical-workarounds/ba-p/14174594</id>
    <title>BEHAVIOR_ILLEGAL_STATEMENT dump | Technical workarounds</title>
    <updated>2025-08-11T13:40:55.450000+02:00</updated>
    <author>
      <name>PranayGaroo</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2116915</uri>
    </author>
    <content>&lt;P&gt;If you're working with SAP RAP, you've probably encountered the infamous&amp;nbsp;&lt;FONT color="#FF0000"&gt;BEHAVIOR_ILLEGAL_STATEMENT&lt;/FONT&gt;&amp;nbsp;dump.&lt;/P&gt;&lt;P&gt;This dump could occur when the following statements are made in a RAP context:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Explicit use of COMMIT WORK or ROLLBACK WORK statements&lt;/STRONG&gt;&amp;nbsp;- the transaction handling and database commit is exclusively handled by RAP&lt;/LI&gt;&lt;/OL&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Calling update or enqueue functions&lt;/STRONG&gt;&amp;nbsp;that bypass RAP's controlled transaction flow&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Direct database modifications&lt;/STRONG&gt;&amp;nbsp;outside of RAP's managed approach.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Understanding the Core Challenge&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The core challenge lies in RAP’s approach to transaction management. The RAP transactional model is built on the concept of Logical Unit of Work (LUW), which ensures data consistency and integrity by treating all operations within a transaction as a single, indivisible unit. It includes a late-save phase followed by a cleanup. RAP follows a&amp;nbsp;&lt;STRONG&gt;controlled Logical Unit of Work (LUW)&lt;/STRONG&gt;&amp;nbsp;pattern with two distinct phases:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Interaction Phase&lt;/STRONG&gt;: Data modifications are stored in a transactional buffer&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Save Sequence&lt;/STRONG&gt;: Data is validated and persisted to the database&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;On the other hand, a COMMIT WORK statement that immediately persist changes to the database. When these two approaches collide, you get runtime errors that can halt your application.&lt;/P&gt;&lt;P&gt;&lt;BR /&gt;&lt;STRONG&gt;Available Solution or Workaround&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Our goal is to call our explicit commit or any other ‘Illegal statement’ in a different task. There are four ways to do that:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;BGPF (Background Processing Framework)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;SAP Documentation - : &lt;A href="https://help.sap.com/docs/abap-cloud/abap-concepts/background-processing-framework" target="_blank" rel="noopener noreferrer"&gt;Background Processing Framework | SAP Help Portal&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Parallel Processing &lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;Implementation Examples :- &lt;A href="https://software-heroes.com/en/blog/abap-cloud-parallel-processing" target="_blank" rel="noopener nofollow noreferrer"&gt;ABAP Cloud - Parallel processing&lt;/A&gt; , &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/two-different-types-of-parallel-processing-examples/ba-p/13247548" target="_blank"&gt;Two Different types of Parallel Processing example... - SAP Community&lt;/A&gt;&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Application Jobs for background Processing &lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;Implementation Examples :- &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/example-implementation-using-interfaces-if-apj-dt-exec-object-and-if-apj-rt-exec-object" target="_blank" rel="noopener noreferrer"&gt;Example Implementation Using Interfaces IF_APJ_DT_EXEC_OBJECT and IF_APJ_RT_EXEC_OBJECT | SAP Help Portal&lt;/A&gt; ,&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;&lt;A href="https://learning.sap.com/learning-journeys/administrating-the-sap-s-4hana-cloud-public-edition/introducing-application-jobs_cf77594e-9dd1-454b-b8d1-05079dfee508" target="_blank" rel="noopener noreferrer"&gt;Introducing Application Jobs&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;RFC Workaround (On-Premise Only)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;We can create a wrapper RFC FM with our logic and call that using DESTINATION 'NONE' statement. Which will be called in a different task.&lt;/P&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;&lt;U&gt;&lt;STRONG&gt;Note :&amp;nbsp;&lt;/STRONG&gt;&lt;/U&gt;This workaround are not supported by Cloud Environments.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/behavior-illegal-statement-dump-technical-workarounds/ba-p/14174594"/>
    <published>2025-08-11T13:40:55.450000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/pagination-concept-in-odata-ecc-for-sp-7-3/ba-p/14170923</id>
    <title>Pagination concept in OData - ECC for SP - 7.3</title>
    <updated>2025-08-12T08:07:32.133000+02:00</updated>
    <author>
      <name>vikas_naikdesai</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/243708</uri>
    </author>
    <content>&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;This technical blog will open option to include pagination concept in Odata Service running on ECC system.&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;This article is specific for developer who are still developing Odata Services on ECC on Pagination Concept.&lt;/P&gt;&lt;P&gt;There are multiple blogs available&amp;nbsp; on Pagination on S4 system but eventually same concept or logical approach is challenging while working in the ECC system.&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;How pagination works in S4 HANA system&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;Will talk on the existing solutioning part on S4 end before we come to ECC.&lt;/P&gt;&lt;P&gt;There are two keywords being used to restrict the count -&amp;nbsp;&lt;SPAN&gt;one is&amp;nbsp;&lt;STRONG&gt;$top&lt;SPAN&gt;&amp;nbsp;and the other is&amp;nbsp;&lt;STRONG&gt;$skip.&amp;nbsp;&amp;nbsp;Both of the them play roles to restrict the count. I will not go in details about their operations as there are already existing blogs on it.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;In S4, above keywords are used in the follows syntax to perform Pagination.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; SELECT &amp;lt;field1&amp;gt;,&lt;DIV&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;field2&amp;gt;,&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ,&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ,&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;fieldn&amp;gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; FROM &amp;lt;SAP DB table&amp;gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ORDER by &amp;lt;Key_field&amp;gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;INTO TABLE @&amp;lt;internal_table&amp;gt;&lt;DIV&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; OFFSET @paging-skip UP TO @paging-top ROWS.&lt;DIV&gt;&amp;nbsp;&lt;DIV&gt;&lt;U&gt;&lt;U&gt;&lt;STRONG&gt;Challenge in ECC system&lt;/STRONG&gt;&lt;/U&gt;&lt;/U&gt;&lt;DIV&gt;But when it comes to ECC, above syntax difficult to apply directly as SKIP &amp;amp; ROWS are being used with OFFSET and UPTO keywords, which are not applicable for SAP-ECC system.&lt;DIV&gt;&amp;nbsp;&lt;DIV&gt;&lt;U&gt;&lt;U&gt;&lt;STRONG&gt;Solution&lt;/STRONG&gt;&lt;/U&gt;&lt;/U&gt;&lt;DIV&gt;But, there are other approaches to handle paging in ECC. Here instead of restricting at the time of data fetch using SELECT query, will narrate how paging can be used using SAP standard class.&lt;DIV&gt;Below steps to follow to implement pagination in ECC system.&lt;DIV&gt;1. Pull&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;TOP&lt;SPAN&gt;&amp;nbsp;&amp;amp;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;SKIP&lt;SPAN&gt;&amp;nbsp;from&amp;nbsp;&lt;STRONG&gt;IO_TECH_REQUEST_CONTEXT&amp;nbsp;into work area.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;2. Use&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;PAGING&lt;SPAN&gt;&amp;nbsp;Method of SAP Utility Class -&amp;nbsp;&lt;STRONG&gt;/IWBEP/CL_MGW_DATA_UTIL.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;3. Pass work area with TOP &amp;amp; SKIP in&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;PAGING&lt;SPAN&gt;&amp;nbsp;method.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;DIV&gt;&amp;nbsp;&lt;DIV&gt;Working Code is below&lt;DIV&gt;******************Data Declaration ***************************&lt;DIV&gt;&lt;P&gt;DATA: WA_PAGING TYPE /IWBEP/S_MGW_PAGING.&lt;/P&gt;&lt;P&gt;******************Assign Top &amp;amp; Bottom***********************&lt;/P&gt;&lt;P&gt;WA_PAGING-TOP = IO_TECH_REQUEST_CONTEXT-&amp;gt;GET_TOP( ).&lt;BR /&gt;WA_PAGING-SKIP = IO_TECH_REQUEST_CONTEXT-&amp;gt;GET_SKIP( ).&lt;/P&gt;&lt;P&gt;****************Call Data Utility Class*************************&lt;BR /&gt;CALL METHOD /IWBEP/CL_MGW_DATA_UTIL=&amp;gt;PAGING&lt;BR /&gt;&amp;nbsp; EXPORTING&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;IS_PAGING = WA_PAGING&lt;BR /&gt;&amp;nbsp; CHANGING&lt;BR /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; CT_DATA = &amp;lt;ENTITY_SET&amp;gt;.&amp;nbsp; "This table can be EntitySet of Odata Service&lt;/P&gt;&lt;DIV&gt;&amp;nbsp;&lt;DIV&gt;&lt;U&gt;&lt;U&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/U&gt;&lt;/U&gt;&lt;DIV&gt;CT_DATA will have only specific number of counts (Skip &amp;amp; Top) as specified in the URI.&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/pagination-concept-in-odata-ecc-for-sp-7-3/ba-p/14170923"/>
    <published>2025-08-12T08:07:32.133000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-odata-v4-to-get-billing-document-price-elements/ba-p/14179370</id>
    <title>How to use oData V4 to get Billing Document Price Elements</title>
    <updated>2025-08-15T05:45:44.304000+02:00</updated>
    <author>
      <name>KeithZhou</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1762936</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1608008445"&gt;Prerequisites&lt;/H1&gt;&lt;P&gt;Your have created CC user with Scenrio ID ‘SAP_COM_0120’ &amp;nbsp;for API test.&lt;/P&gt;&lt;H1 id="toc-hId-1411494940"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-1214981435"&gt;Get Pricing Elements&lt;/H1&gt;&lt;P&gt;1.&amp;nbsp;Get url in Communication Arrangement, here we take CC3-702 as example&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="url.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/300805iEBFB447D58BA3C59/image-size/large?v=v2&amp;amp;px=999" role="button" title="url.png" alt="url.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.&amp;nbsp;Using Bruno to get pricing elements, take PricingDocumentElement as exmaple. URI: &lt;A href="https://cc3-702.devsys.net.sap/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90010713')/_PricingDocument/_PricingDocumentElement?$count=true" target="_blank" rel="noopener nofollow noreferrer"&gt;https://cc3-702.devsys.net.sap/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90010713')/_PricingDocument/_PricingDocumentElement?$count=true&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="bruno.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/300804iE6F689F295EC93DE/image-size/large?v=v2&amp;amp;px=999" role="button" title="bruno.png" alt="bruno.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3. Resonse result analysis.&lt;/P&gt;&lt;TABLE width="930"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PricingDocument(key)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Key that identifies a set of conditions that apply to the billing document.&lt;/P&gt;&lt;P&gt;Used to identify different conditions, for example, when the purchasing and sales departments want to use the same number for a document but different conditions apply in each area.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PrcgDocumentHostObjectNodeID(key)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Key that specifies the document number of the billing document containing the pricing elements. For example 91234567.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PrcgDocHostObjSONTInUppercase(key)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Specifies the SAP object node type.&lt;/P&gt;&lt;P&gt;In the context of the current API, the value is always&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;BILLINGDOCUMENT&lt;/STRONG&gt;&lt;/SPAN&gt;&amp;nbsp;(uppercase mandatory).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PricingProcedureStep(key)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Number in the header pricing procedure that identifies the sequence in which conditions (of a specific condition type) or subtotals are determined.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PricingDocumentElementCounter(key)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Access number of the conditions within a step in the header pricing procedure.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionType&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Key that uniquely identifies the condition type.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;PriceElementDescription&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Description of the pricing element.&lt;/P&gt;&lt;P&gt;A pricing element can be a price condition (when a condition type is specified) or a subtotal of various price conditions (when no condition type is specified).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionClass&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The preliminary structure of condition types.&lt;/P&gt;&lt;P&gt;Possible values:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;A&lt;/STRONG&gt;&lt;/SPAN&gt;: Discounts or Surcharges&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;B&lt;/STRONG&gt;&lt;/SPAN&gt;: Prices&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;C&lt;/STRONG&gt;&lt;/SPAN&gt;: Expense Reimbursement&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;D&lt;/STRONG&gt;&lt;/SPAN&gt;: Taxes&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;E&lt;/STRONG&gt;&lt;/SPAN&gt;: Extra Pay&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;F&lt;/STRONG&gt;&lt;/SPAN&gt;: Fees or Differential (only IS-OIL)&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;G&lt;/STRONG&gt;&lt;/SPAN&gt;: Tax Classification&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;H&lt;/STRONG&gt;&lt;/SPAN&gt;: Determining Sales Deal&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Q&lt;/STRONG&gt;&lt;/SPAN&gt;: Totals Record for Fees (only IS-OIL)&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;W&lt;/STRONG&gt;&lt;/SPAN&gt;: Wage Withholding Tax&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;P&lt;/STRONG&gt;&lt;/SPAN&gt;: Compare Price Protection&lt;/LI&gt;&lt;/UL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionCalculationType&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Determines how the system calculates prices, discounts, or surcharges in a condition.&lt;/P&gt;&lt;P&gt;To retrieve all code list values, you can use the SAP object node type&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;PriceConditionCalculationType&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionRateAmount&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The condition amount, that is, the rate of a condition based on an amount, such as a material price. The corresponding currency property is&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionCurrency&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionCurrency&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Currency for the condition amount.&lt;/P&gt;&lt;P&gt;To retrieve all code list values, you can use the SAP object node type&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;Currency&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionQuantity&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The condition pricing unit, which is a quantity on which the condition amount or the condition ratio is based.&lt;/P&gt;&lt;P&gt;For example, a customer and a supplier agree on a material price for 100 pieces. The quantity "100" is the condition pricing unit, the unit "pieces" is the condition unit, the combination “100 pieces” is the pricing unit.&lt;/P&gt;&lt;P&gt;The corresponding properties for the condition unit are&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionQuantitySAPUnit&lt;/STRONG&gt;&lt;/SPAN&gt;&amp;nbsp;and&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionQuantityISOUnit&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionBaseQuantity&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Quantity of a condition basis.&lt;/P&gt;&lt;P&gt;Depending on the calculation type, the system can calculate the condition value of a price condition by multiplying the condition amount with the condition basis that contains a quantity and a unit of measure.&lt;/P&gt;&lt;P&gt;The corresponding properties for the unit of measure are&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionQuantitySAPUnit&lt;/STRONG&gt;&lt;/SPAN&gt;&amp;nbsp;and&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionQuantityISOUnit&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionQuantityISOUnit&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The quantity unit to which the condition amount refers (ISO code).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionQuantitySAPUnit&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The quantity unit to which the condition amount refers (SAP code, the format found in the database without conversions).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionRateRatio&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The condition ratio, that is, the rate of a condition based on a ratio, such as percent or per mille.&lt;/P&gt;&lt;P&gt;The corresponding properties for the unit of measure are&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionRateRatioSAPUnit&lt;/STRONG&gt;&lt;/SPAN&gt;&amp;nbsp;and&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;ConditionRateRatioISOUnit&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionRateRatioISOUnit&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The unit of measure for the condition ratio (ISO code).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionRateRatioSAPUnit&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The unit of measure for the condition ratio (SAP code, the format found in the database without conversions).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionAmount&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The condition value for a particular condition, total, or subtotal.&lt;/P&gt;&lt;P&gt;The corresponding currency property is TransactionCurrency.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionBaseAmount&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Amount of a condition basis.&lt;/P&gt;&lt;P&gt;Depending on the calculation type, the system can calculate the condition value of a price condition by multiplying the condition ratio with the condition basis that contains an amount and a currency.&lt;/P&gt;&lt;P&gt;The corresponding currency property is&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;TransactionCurrency&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;TransactionCurrency&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;The document currency that applies to your billing document.&lt;/P&gt;&lt;P&gt;To retrieve all code list values, you can use the SAP object node type&amp;nbsp;&lt;SPAN&gt;&lt;STRONG&gt;Currency&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;TaxCode&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Represents a tax category that must be considered for tax reporting to the tax authorities.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;VariantCondition&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;A variant condition that determines the valid price components of a customizable product.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionOrigin&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Indicates where the condition originated, for example, whether you entered the condition manually or whether the system determined it automatically.&lt;/P&gt;&lt;P&gt;Possible values:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;A&lt;/STRONG&gt;&lt;/SPAN&gt;: Automatic Pricing&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;B&lt;/STRONG&gt;&lt;/SPAN&gt;:Duplicated from Main Item&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;C&lt;/STRONG&gt;&lt;/SPAN&gt;: Manually Entered&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;D&lt;/STRONG&gt;&lt;/SPAN&gt;: Header Condition&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;E&lt;/STRONG&gt;&lt;/SPAN&gt;: Item Total&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;F&lt;/STRONG&gt;&lt;/SPAN&gt;: Condition Supplement&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;G&lt;/STRONG&gt;&lt;/SPAN&gt;: Original Header Condition&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;H&lt;/STRONG&gt;&lt;/SPAN&gt;: Correction Rebate&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;I&lt;/STRONG&gt;&lt;/SPAN&gt;: Cost Correction&lt;/LI&gt;&lt;/UL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionInactiveReason&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Indicates whether the condition is active.&lt;/P&gt;&lt;P&gt;Possible values:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;A&lt;/STRONG&gt;&lt;/SPAN&gt;: Condition exclusion item&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;K&lt;/STRONG&gt;&lt;/SPAN&gt;: Inactive due to calculation basis/shipping material type&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;L&lt;/STRONG&gt;&lt;/SPAN&gt;: Condition exclusion header or inactive at header level&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;M&lt;/STRONG&gt;&lt;/SPAN&gt;: Inactive due to manual entry&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;T&lt;/STRONG&gt;&lt;/SPAN&gt;: Inactive at header level&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;W&lt;/STRONG&gt;&lt;/SPAN&gt;: The document item is statistical&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;X&lt;/STRONG&gt;&lt;/SPAN&gt;: Inactive via formulas or incorrect&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;STRONG&gt;Y&lt;/STRONG&gt;&lt;/SPAN&gt;: Inactive because of subsequent price&lt;/LI&gt;&lt;/UL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionIsManuallyChanged&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Indicates whether the condition has been manually or automatically changed or created.&lt;/P&gt;&lt;P&gt;Possible values:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;True&lt;/LI&gt;&lt;LI&gt;False&lt;/LI&gt;&lt;/UL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="296.188px"&gt;&lt;P&gt;ConditionIsForStatistics&lt;/P&gt;&lt;/TD&gt;&lt;TD width="532.812px"&gt;&lt;P&gt;Indicates whether a surcharge or discount is to be set in the business document statistically (that is, without altering the value).&lt;/P&gt;&lt;P&gt;Possible values:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;True&lt;/LI&gt;&lt;LI&gt;False&lt;/LI&gt;&lt;/UL&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H1 id="toc-hId-1018467930"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-821954425"&gt;Helpful Information&lt;/H1&gt;&lt;P&gt;&lt;A href="https://api.sap.com/api/sap-s4-CE_BILLINGDOCUMENT_0001-v1/resource/Header" target="_self" rel="noopener noreferrer"&gt;Billing Document API Hub&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-754523639"&gt;Pricing Document Elements URI&lt;/H2&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;&lt;STRONG&gt;URI&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get All&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90002126')/_PricingDocument/_PricingDocumentElement?$count=true&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get By Key&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90002126')/_PricingDocument/_PricingDocumentElement(PricingDocument='0000042797',PrcgDocumentHostObjectNodeID='0090002126',PrcgDocHostObjSONTInUppercase='BILLINGDOCUMENT',PricingProcedureStep='020',PricingDocumentElementCounter='001')&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get by filter&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90002126')/_PricingDocument/_PricingDocumentElement?$filter=ConditionType eq 'PPR0'&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get by expand&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90002126')?$expand=_PricingDocument($expand=_PricingDocumentElement)&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get by top/skip&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument('90002126')/_PricingDocument/_PricingDocumentElement?$top=1&amp;amp;$skip=6&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="100.75px"&gt;&lt;P&gt;Get multiple document, header elements by expand&lt;/P&gt;&lt;/TD&gt;&lt;TD width="2597.84px"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument?$filter=BillingDocument eq '90002134' or BillingDocument eq '90002126'&amp;amp;$expand=_PricingDocument($expand=_PricingDocumentElement)&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H2 id="toc-hId-558010134"&gt;Pricing Document Item Element URI&lt;/H2&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="115"&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="600"&gt;&lt;P&gt;&lt;STRONG&gt;URI&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="115"&gt;&lt;P&gt;Get All by item key&lt;/P&gt;&lt;/TD&gt;&lt;TD width="606"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem/0000042797/90002126/BILLINGDOCUMENT/10/_PricingDocumentItemElement&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="117"&gt;&lt;P&gt;Get doc items and elements by expand&lt;/P&gt;&lt;/TD&gt;&lt;TD width="604"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem?$expand=_PricingDocumentItemElement&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="117"&gt;&lt;P&gt;Get one item by filter and all elements by expand&lt;/P&gt;&lt;/TD&gt;&lt;TD width="604"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem?$filter=PricingDocumentItem eq '10' &amp;amp;$expand=_PricingDocumentItemElement&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="115"&gt;&lt;P&gt;Get one by element key&lt;/P&gt;&lt;/TD&gt;&lt;TD width="606"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem/0000042797/90002126/BILLINGDOCUMENT/10/_PricingDocumentItemElement/20/1&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="115"&gt;&lt;P&gt;Get one by filter&lt;/P&gt;&lt;/TD&gt;&lt;TD width="606"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem/0000042797/90002126/BILLINGDOCUMENT/10/_PricingDocumentItemElement?$filter=ConditionType eq 'PPR0'&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="115"&gt;&lt;P&gt;Get one by top/skip&lt;/P&gt;&lt;/TD&gt;&lt;TD width="606"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument/90002126/_PricingDocument/_PricingDocumentItem/0000042797/0090002126/BILLINGDOCUMENT/10/_PricingDocumentItemElement?$top=1&amp;amp;$skip=8&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="117"&gt;&lt;P&gt;Get multiple document, header elements, items, item elements by expand&lt;/P&gt;&lt;/TD&gt;&lt;TD width="605"&gt;&lt;P&gt;/sap/opu/odata4/sap/api_billingdocument/srvd_a2x/sap/billingdocument/0001/BillingDocument?$filter=BillingDocument eq '90002134' or BillingDocument eq '90002126'&amp;amp;$expand=_PricingDocument($expand=_PricingDocumentElement,_PricingDocumentItem($expand=_PricingDocumentItemElement))&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-odata-v4-to-get-billing-document-price-elements/ba-p/14179370"/>
    <published>2025-08-15T05:45:44.304000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/multi-origin-service-testing-and-troubleshooting-in-sap-gateway/ba-p/14179256</id>
    <title>Multi-Origin Service Testing and Troubleshooting in SAP Gateway</title>
    <updated>2025-08-19T11:39:24.298000+02:00</updated>
    <author>
      <name>Ravikumar_H1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1386926</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;In this blog, I’ll walk you through:&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;How to test multi-origin services in SAP Gateway&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;How to pass the correct system alias in requests&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;How to debug and troubleshoot common issues&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Real examples and outputs&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1866172866"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;1. Quick Refresher: What’s Multi-Origin in SAP Gateway?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Multi-origin lets you use a &lt;STRONG&gt;single OData service definition&lt;/STRONG&gt; and pull data from multiple backend systems.&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Which backend you hit is controlled by the System Alias in Gateway and selected by passing $system in the request.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;/sap/opu/odata/SAP/ZSALES_ORDER_SRV/$metadata?$system=ERPCLNT100&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Here, ERPCLNT100 is the &lt;STRONG&gt;system alias&lt;/STRONG&gt; defined in /IWFND/MAINT_SERVICE.&lt;/FONT&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1669659361"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;2. How I Test Multi-Origin OData Services&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;H4 id="toc-hId-1602228575"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Step 1 – Check the Aliases First&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Before sending any request, I always check if the right aliases are even there.&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;T-Code: /IWFND/MAINT_SERVICE → search for your service → open &lt;STRONG&gt;System Aliases&lt;/STRONG&gt; tab.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Example setup:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;If the alias isn’t listed here, $system won’t work — no matter how perfect your URL looks.Service Name Version System Alias Default&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Ravikumar_H1_0-1755081484695.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/300337i763C162CC714A87D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Ravikumar_H1_0-1755081484695.png" alt="Ravikumar_H1_0-1755081484695.png" /&gt;&lt;/span&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;If the alias isn’t listed here, $system won’t work — no matter how perfect your URL looks.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Step 2 – Use the Gateway Client&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;T-Code:&lt;/STRONG&gt; /IWFND/GW_CLIENT&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Service URL example:&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-swift"&gt;&lt;code&gt;/sap/opu/odata/SAP/ZSALES_ORDER_SRV/SalesOrders?$top=5&amp;amp;$system=S4HCLNT200&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;After execution, if the data comes from the intended backend, you’re good.&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Sample JSON snippet from my test:&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "d": {
    "results": [
      {
        "SalesOrder": "50001234",
        "CreatedBy": "USER1",
        "SalesOrg": "1000"
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1405715070"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Step 3 – Test Outside SAP&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;If the service is active, you can also test from a browser or Postman:&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-ruby"&gt;&lt;code&gt;https://&amp;lt;gateway_host&amp;gt;:&amp;lt;port&amp;gt;/sap/opu/odata/SAP/ZSALES_ORDER_SRV/SalesOrders?$system=ERPCLNT100&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;This is handy when you want to share the request with someone in another team.&lt;/FONT&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1080118846"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;3. Troubleshooting – Real Cases I’ve Faced&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Case 1 – $system Ignored&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Symptom: No matter what you pass, data always comes from the default system.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Fix: Ensure both aliases are active and $system exactly matches the alias name (not the RFC destination name).&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Case 2 – 500 Internal Server Error&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;I’ve hit this when the RFC destination wasn’t configured in SM59 or the backend service wasn’t active.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Fix: Activate the service in /IWBEP/REG_SERVICE in the backend and test the RFC destination.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Case 3 – 403 Forbidden&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Happens when the user has Gateway access but no backend role.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Fix: Assign the required /IWBEP/ authorizations in the backend.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-883605341"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;4. Debugging Multi-Origin Requests&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Option 1 – Gateway Side&lt;/STRONG&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;T-Code: /IWFND/TRACES → enable trace → run your request → check “System Alias Used”.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Sample trace output:&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;System Alias: S4HCLNT200
Backend RFC: SAP_S4H_200
Execution Time: 512 ms&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;Option 2 – Backend Side&lt;/STRONG&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Set an external breakpoint in your *_DPC_EXT class method in SE80/SE24.&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;When you call the service with $system, the debugger will trigger in the correct backend if the routing is working.&lt;/FONT&gt;&lt;/P&gt;&lt;H3 id="toc-hId-687091836"&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;&lt;STRONG&gt;5. My Go-To Best Practices&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Always test each alias separately before enabling multi-origin in production.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Keep alias names intuitive and consistent across landscapes.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Use Postman collections for each alias to speed up re-testing.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Keep an eye on performance — I’ve seen the same service respond in 200 ms from one backend and 3 seconds from another.&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT face="arial,helvetica,sans-serif"&gt;Conclusion:&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Testing and Troubleshooting multi-origin in OData is not just about passing $system in the URL — it’s about ensuring the entire connection chain works, from &lt;STRONG&gt;alias mapping&lt;/STRONG&gt; to &lt;STRONG&gt;backend service activation&lt;/STRONG&gt;. By combining SAP Gateway tools like /IWFND/GW_CLIENT, /IWFND/TRACES, and backend debugging, you can quickly pinpoint and resolve issue.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/multi-origin-service-testing-and-troubleshooting-in-sap-gateway/ba-p/14179256"/>
    <published>2025-08-19T11:39:24.298000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/consuming-the-parameterized-cds-view-using-odata-in-datasphere/ba-p/14185997</id>
    <title>Consuming the Parameterized CDS View using OData in Datasphere</title>
    <updated>2025-08-21T10:44:06.036000+02:00</updated>
    <author>
      <name>ankitsharma_71</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/371656</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1608818637"&gt;&lt;SPAN&gt;Introduction&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;Consuming a parameterized CDS view in SAP Datasphere requires a workaround due to the platform's current limitations. Parameters cannot be directly passed from Datasphere to CDS views.&lt;BR /&gt;&lt;BR /&gt;To address this, we use an OData service and configure a connection with Datasphere to replicate the data.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1412305132"&gt;&lt;SPAN&gt;Requirement and Solution Approach&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;We take the example of the standard CDS View **I_AssetBalanceCube**, which consists of Fiscal Year and Fiscal Period input parameters.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_0-1755758151201.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303352iEE69E35E00C6A3FA/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_0-1755758151201.png" alt="ansharm71_0-1755758151201.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;- The requirement is to calculate dynamic values for fiscal year/period based on the system date, pass them to input parameters, and extract the specific period data in Datasphere.&lt;BR /&gt;&lt;BR /&gt;- Another requirement is to extract data for any specific year and period using the TVARV table and passing the values to input parameters in the CDS view.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1215791627"&gt;&lt;SPAN&gt;Steps&lt;/SPAN&gt;&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Created an ABAP class **ZCLFI_ASSET_BALANCE_DATA** with method **GET_ASSET_BALANCE** to fetch the asset balance records. This class is passed to the OData section, which passes logic to the input parameter of **I_AssetBalanceCube**.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_0-1755760016577.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303371iD67380B994D48046/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_0-1755760016577.png" alt="ansharm71_0-1755760016577.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  METHOD get_asset_balance.

    DATA : lv_fiscalyear TYPE fis_gjahr,
           lv_fisperiod  TYPE fis_poper.

    DATA : v_year  TYPE fis_gjahr,
           v_month TYPE n LENGTH 2,
           v_day   TYPE n LENGTH 2,
           v_high  TYPE sydate,
           v_low   TYPE sydate.


    CONSTANTS : lc_keyfig                TYPE c LENGTH 10 VALUE 'AHS',
                lc_keyfig_plan           TYPE c LENGTH 10 VALUE 'AHS_PLAN',
                lc_fiscal_asst_balanc    TYPE c LENGTH 30 VALUE 'ZFI_DS_ABFISCALYEAR',
                lc_fisperiod_asst_balanc TYPE c LENGTH 30 VALUE 'ZFI_DS_FISCALPERIOD',
                lc_type                  TYPE c VALUE 'P'.

*--------------------------------------------------------------------*
* Get the fixed values from TVARVC
*--------------------------------------------------------------------*
* Get TVARV variable GJAHR - Fiscal Year
    zclca_utility_cloud=&amp;gt;get_tvarv( EXPORTING iv_name = lc_fiscal_asst_balanc iv_type = lc_type IMPORTING et_tvarv = DATA(lt_fiscal) ).

* Extract the year and the month from Sysdate
    v_month = sy-datum+4(2).

    lv_fiscalyear = VALUE #( lt_fiscal[ 1 ]-low OPTIONAL ).

    IF lv_fiscalyear IS INITIAL.

      CASE v_month.
        WHEN '10'.
          lv_fiscalyear =  sy-datum(4) + 1.
        WHEN '11'.
          lv_fiscalyear =  sy-datum(4) + 1.
        WHEN '12'.
          lv_fiscalyear =  sy-datum(4) + 1.
        WHEN OTHERS.
          lv_fiscalyear =  sy-datum(4).

      ENDCASE.
*      lv_fiscalyear =  sy-datum(4) - 1.
      v_low = |{ sy-datum(4) - 1 }| &amp;amp; |10| &amp;amp; |01|.   "For Asset Capitalization Date
    ELSE.
* If TVARV variable GJAHR - Fiscal Year is available then calculate Low value Capitalization Date
      v_low = |{ lv_fiscalyear - 1 }| &amp;amp; |10| &amp;amp; |01|.   "For Asset Capitalization Date

    ENDIF.

* Get TVARV variable POPER - Fiscal Period
    zclca_utility_cloud=&amp;gt;get_tvarv( EXPORTING iv_name = lc_fisperiod_asst_balanc iv_type = lc_type IMPORTING et_tvarv = DATA(lt_fisperiod) ).

    lv_fisperiod = VALUE #( lt_fisperiod[ 1 ]-low OPTIONAL ).
    IF lv_fisperiod IS INITIAL.
*      lv_fisperiod = sy-datum+4(2).
      CASE v_month.
        WHEN '10'.
          lv_fisperiod =  '001'.
        WHEN '11'.
          lv_fisperiod =  '002'.
        WHEN '12'.
          lv_fisperiod =  '003'.

      ENDCASE.

    ENDIF.

* Fetch the data based on TVARV table
* business required AssetAccountingKeyFigureSet 'AHS' and 'AHS_PLAN' data in single parameter
* So segregate the two select statement and combine both data in one final internal table it_asst_balance_data

    SELECT
      FROM I_AssetBalanceCube( P_AssetAccountingKeyFigureSet = _keyfig,
                                 P_FiscalYear = _fiscalyear,
                                 P_FiscalPeriod = _fisperiod,
                                 P_KeyDate =  )  WITH
      PRIVILEGED ACCESS
*                                      INTO TABLE (lt_data).
      FIELDS *
      WHERE AssetCapitalizationDate &amp;gt;= @v_low AND AssetCapitalizationDate &amp;lt;= 
      INTO TABLE (lt_data).
*this is AssetAccountingKeyFigureSet 'AHS_PLAN'
    SELECT
    FROM I_AssetBalanceCube( P_AssetAccountingKeyFigureSet = _keyfig_plan,
                               P_FiscalYear = _fiscalyear,
                               P_FiscalPeriod = _fisperiod,
                               P_KeyDate =  )  WITH
    PRIVILEGED ACCESS
    FIELDS *
    WHERE AssetCapitalizationDate &amp;gt;= @v_low AND AssetCapitalizationDate &amp;lt;= 
    APPENDING TABLE _data.


    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&amp;lt;lfs_data&amp;gt;).
      APPEND INITIAL LINE TO it_asst_balance_data ASSIGNING FIELD-SYMBOL(&amp;lt;lfs_asset&amp;gt;).

      &amp;lt;lfs_asset&amp;gt; = CORRESPONDING #( &amp;lt;lfs_data&amp;gt; ).

    ENDLOOP.


  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;Created an OData Project **ZFI_FOR_ASSET_BALANCE** and structure. **ZFIS_ASSET_BALANCE_ODATA**.&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_5-1755758745261.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303357i94BF22CDEBBFC35F/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_5-1755758745261.png" alt="ansharm71_5-1755758745261.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Generated OData service **ZFI_FOR_ASSET_BALANCE_SRV.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_6-1755758773720.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303358i2EEF9EEC04417121/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_6-1755758773720.png" alt="ansharm71_6-1755758773720.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Created the **DPC_EXT Class - ZCL_ZFI_FOR_ASSET_BALA_DPC_EXT** and redefined the method **ASSET_BALANCESET_GET_ENTITYSET**. This method calls the data provider class `zclfi_asset_balance_data=&amp;gt;get_asset_balance` and passes it to the OData exporting entity set.&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&amp;nbsp;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_15-1755759240016.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303368iCD2D7AB682573580/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_15-1755759240016.png" alt="ansharm71_15-1755759240016.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Generated OData URL for connection-&lt;SPAN&gt;&lt;A href="https://vhcuhs4xcs.sap.***.com.au:44300/sap/opu/odata/sap/ZFI_FOR_ASSET_BALANCE_SRV`" target="_blank" rel="noopener nofollow noreferrer"&gt;https://vhcuhs4xcs.sap.***.com.au:44300/sap/opu/odata/sap/ZFI_FOR_ASSET_BALANCE_SRV` &lt;/A&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Created and configured the OData connection in Datasphere and validated it.&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ansharm71_8-1755758803033.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303360i2CD076D3AF595BEC/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_8-1755758803033.png" alt="ansharm71_8-1755758803033.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;&lt;SPAN&gt;&lt;SPAN&gt;In the Data Builder, created a Dataflow to replicate data from the OData connection.&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ansharm71_0-1755764501015.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303401i70207A7B57D409C1/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_0-1755764501015.png" alt="ansharm71_0-1755764501015.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The flow was then executed. Data was loaded into a Datasphere local table based on the input parameter logic written in the ABAP class method.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ansharm71_12-1755758917943.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/303364iC52A826A44866864/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="ansharm71_12-1755758917943.png" alt="ansharm71_12-1755758917943.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1019278122"&gt;&lt;SPAN&gt;Output&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;The data is successfully replicated in the local Datasphere table.&lt;BR /&gt;You can also replicate data from the local table to a non-SAP target (such as ADLS) by creating a replication flow and using the local table as the source.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-822764617"&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;Using OData as a workaround enables the consumption of parameterized CDS views in SAP Datasphere. This approach ensures flexibility in handling dynamic and specific parameter values, allowing seamless integration with SAP and non-SAP targets.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/consuming-the-parameterized-cds-view-using-odata-in-datasphere/ba-p/14185997"/>
    <published>2025-08-21T10:44:06.036000+02:00</published>
  </entry>
</feed>
