<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/OData-blog-posts.xml</id>
  <title>SAP Community - OData</title>
  <updated>2025-07-21T11:11:26.455040+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/OData/pd-p/551580658536717501828021060147962" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>OData blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/end-to-end-guide-deploying-a-fiori-app-from-btp-destination-creation-to/ba-p/14038453</id>
    <title>End-to-End Guide: Deploying a Fiori App – From BTP Destination Creation to Public Cloud Deployment</title>
    <updated>2025-03-11T15:32:17.951000+01:00</updated>
    <author>
      <name>Karansakthivel</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1435759</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Overview&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Deploying an application in the public cloud requires a structured approach involving multiple configurations and integrations. This guide provides a detailed, step-by-step process to ensure a smooth deployment. The key steps include setting up destination connections, creating communication systems, building the app in Business Application Studio (BAS), deploying it, and configuring it in ABAP. This document also highlights important screenshot points to help visualize each step.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Set Up the Destination Connection&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Open BTP Cockpit and Login&lt;/STRONG&gt;: Access the BTP cockpit and log in to your account.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Navigate to Sub-Account&lt;/STRONG&gt;: Select and go to the relevant sub-account.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Go to Destinations&lt;/STRONG&gt;: Navigate to the "Destinations" section and create a new destination.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Configure Destination Settings&lt;/STRONG&gt;:&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;URL&lt;/STRONG&gt;: Copy the hostname URL from the Communication Systems app and paste it into the destination URL field. Make sure that to use the URL of the development client to build and deploy an application. If the URL of customizing client is used, then it will lead to issues while deploying application.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication Type&lt;/STRONG&gt;: Use SAMLAssertion.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Audience&lt;/STRONG&gt;: Retrieve the OAuth 2.0 SAML2 Audience from the technical data section in the Communication Systems app.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234843i396791B362853119/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 1.png" alt="Communication system 1.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;AuthnContextClassRef&lt;/STRONG&gt;: Set it to urn:oasis:names:tc:SAML:2.0:ac:classes:PreviousSession.&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;HTML5.DynamicDestination&lt;/STRONG&gt;: true&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;HTML5.Timeout&lt;/STRONG&gt;: 60000&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;nameIdFormat&lt;/STRONG&gt;: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;sap-client&lt;/STRONG&gt;: Specify your client (e.g., 100).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;WebIDEEnabled&lt;/STRONG&gt;: true&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;WebIDESystem&lt;/STRONG&gt;: Specify your system (e.g., KOE).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;WebIDEUsage&lt;/STRONG&gt;: dev_abap, odata_abap, bsp_execute_abap, ui5_execute_abap.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Destination.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234845i7EC10EB3D02B68D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Destination.png" alt="Destination.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Download Trust File&lt;/STRONG&gt;: Click on "Download Trust" to save the trust configuration locally.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create a Communication System in SAP S/4HANA Cloud&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Access the Communication Systems App&lt;/STRONG&gt;: Open the app in SAP S/4HANA Cloud.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 2.png" style="width: 601px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234819i6B28A1B5417CFC98/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 2.png" alt="Communication system 2.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Create a New Communication System&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Specify the system ID as BAS_&amp;lt;Subdomain Name&amp;gt; and provide a meaningful system name.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 3.png" style="width: 573px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234820iA10597CE04351EA8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 3.png" alt="Communication system 3.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Set Technical Data&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Go to the "Technical Data" section and select the checkbox for "Inbound Only".&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 4.png" style="width: 582px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234821i8EBFDE8028F7F2D1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 4.png" alt="Communication system 4.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Go to the identity provider and turn the SAML Bearer Assertion provider.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 6.png" style="width: 903px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234822iE6C5245F2E164A5F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 6.png" alt="Communication system 6.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Configure Identity Provider&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Enable the "SAML Bearer Assertion" provider.&lt;/LI&gt;&lt;LI&gt;Upload the trust file downloaded in the previous step.&lt;/LI&gt;&lt;LI&gt;After uploading the document fill the above &lt;STRONG&gt;SAML Bearer Issuer&lt;/STRONG&gt; field by coping the address from the &lt;STRONG&gt;Signing certificate Subject&lt;/STRONG&gt; from the “&lt;STRONG&gt;cfapps….&lt;/STRONG&gt;” to till the last.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Communication system 7.png" style="width: 903px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234823iCA5CC32E931F0FE9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Communication system 7.png" alt="Communication system 7.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create the Application in BAS&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Open BAS&lt;/STRONG&gt;: Access the SAP Business Application Studio.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Create Application Using Template&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Select the "&lt;STRONG&gt;SAP Fiori Generator&lt;/STRONG&gt;" template.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Configure Application&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Select the template as "&lt;STRONG&gt;List Report Page&lt;/STRONG&gt;" or required template.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Select template.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234825i8009CD7C59B78BDB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Select template.png" alt="Select template.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Choose the data source, system, and OData service.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Data Source.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234826iA8A9657C674B41E8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Data Source.png" alt="Data Source.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Select the main entity of the service.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Entity Selection.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234827i36A184CC74E4C91C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Entity Selection.png" alt="Entity Selection.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Add Project Attributes&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Provide details like project name, namespace, and deployment configurations.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Project attributes.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234856i5DC6552BFDB82D83/image-size/large?v=v2&amp;amp;px=999" role="button" title="Project attributes.png" alt="Project attributes.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Add Deployment Configuration&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Add the required details for deployment.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Deployment configuration.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234828i103030B1C3E261D4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Deployment configuration.png" alt="Deployment configuration.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Configure Fiori Launchpad&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Add the required details for the launchpad configuration.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Launchpad Configuration.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234829iD42147B1DDA7F701/image-size/large?v=v2&amp;amp;px=999" role="button" title="Launchpad Configuration.png" alt="Launchpad Configuration.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Finalize and Create Project&lt;/STRONG&gt;: Click "Next" and create the project.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Deploy the App from BAS&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Open Integrated Terminal&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Right-click on the project folder and open the terminal.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Run Deployment Command&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Execute "&lt;STRONG&gt;npm run deploy&lt;/STRONG&gt;" in the terminal.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Deploy terminal.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234830i6D9C04D654F14F62/image-size/large?v=v2&amp;amp;px=999" role="button" title="Deploy terminal.png" alt="Deploy terminal.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Verify details and confirm deployment by typing y.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Verify Deployment&lt;/STRONG&gt;: Ensure the deployment completes successfully.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Deployment.png" style="width: 945px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234833i617576E1F7242BDD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Deployment.png" alt="Deployment.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;After deploying the application, if you see the preview of the application, you will get a 404 error. That is because the deployed app should be configured and published in IAM apps in Eclipse.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Configure the App in ABAP (Eclipse)&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Open Eclipse&lt;/STRONG&gt;: Launch Eclipse and open the package used for deployment.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Create IAM App&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Right-click on the package and create an IAM app.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Eclipse package.jpg" style="width: 368px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234857i68D8E0554EAE177F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Eclipse package.jpg" alt="Eclipse package.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Provide name, description, and set Application Type to "External App".&lt;/LI&gt;&lt;LI&gt;Assign a transport request (TR) and finish the setup.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Iam app.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234834i7AFC52A558ACE735/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Iam app.jpg" alt="Iam app.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Add Fiori Launchpad App ID&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Locate the app ID under the package: Fiori User Interface &amp;gt; Launchpad App Descriptor Items.&lt;/LI&gt;&lt;LI&gt;Add this ID to the IAM app configuration.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Iam app 2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234835i23938AEB041FA7A5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Iam app 2.png" alt="Iam app 2.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Business Catalog&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Create and assign the app to a new business catalog.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Business Catalog.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234836i5646AA77B2CC6A89/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Business Catalog.jpg" alt="Business Catalog.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Click on next and select the TR and click on next.&lt;/LI&gt;&lt;LI&gt;Then the dialog opens for creating the Business catalog app assignment, set the name and description and select next and choose the TR.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Business Catalog App.jpg" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234837i7AEEB83335C9D530/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Business Catalog App.jpg" alt="Business Catalog App.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Publish the Catalog and App&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Publish the business catalog locally.&lt;/LI&gt;&lt;LI&gt;Publish the IAM app.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Check the preview of the application form the deployed link.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Assign the App to Users&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Verify Published IAM App and Catalog&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Open the "Display IAM App" to check the published app.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Iam app verify.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234839iDAF58178820EA01C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Iam app verify.png" alt="Iam app verify.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Verify the catalog in the "Business Catalogs" app.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Business Catalog verify.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234840iE1C6A5AB42AE6862/image-size/large?v=v2&amp;amp;px=999" role="button" title="Business Catalog verify.jpg" alt="Business Catalog verify.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Spaces and Pages&lt;/STRONG&gt;:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Define spaces and pages in the Fiori launchpad.&lt;/LI&gt;&lt;LI&gt;Assign the app to a role and add users to the role.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;Verify User Access&lt;/STRONG&gt;: Ensure the app is available on the user’s home screen.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Space.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/234858iB4955994974BEB72/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Space.png" alt="Space.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This guide walks you through deploying an SAP Fiori app in the public cloud, covering destination setup, BAS development, deployment, and ABAP configuration. Step-by-step instructions with screenshot placeholders ensure clarity. Following this process minimizes errors for a smooth deployment.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/end-to-end-guide-deploying-a-fiori-app-from-btp-destination-creation-to/ba-p/14038453"/>
    <published>2025-03-11T15:32:17.951000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/creating-odata-service-with-sap-bw-query-for-c4c-integration-via-cloud/ba-p/13854864</id>
    <title>Creating OData Service with SAP BW Query for C4C Integration via Cloud Platform Integration (CPI)</title>
    <updated>2025-03-20T18:32:15.806000+01:00</updated>
    <author>
      <name>ravikanth_indurthi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/211890</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;&lt;FONT color="#3366FF"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/FONT&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For the requirements such as sending the BW Data (Query) / OData&amp;nbsp; to any SAP cloud systems or third party systems using the Integration Platform process,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;I created OData Service using SAP BW Query outbound of BW system and send the data to SAP C4C system using SAP CPI (Cloud Platform Integration) by following steps.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#3366FF"&gt;&lt;STRONG&gt;&lt;U&gt;Step 1&lt;/U&gt;&amp;nbsp;Create a BW Report&lt;/STRONG&gt;&lt;/FONT&gt;:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Go to the required BW Query in BW Modeling Tools and enable the&amp;nbsp;option &lt;STRONG&gt;&lt;EM&gt;By OData&lt;/EM&gt;&lt;/STRONG&gt;&amp;nbsp;from BW Query Settings as shown below:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="BW Query.jpg" style="width: 443px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/238833iAD303EE4FD3B0E0F/image-dimensions/443x268?v=v2" width="443" height="268" role="button" title="BW Query.jpg" alt="BW Query.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Refer :&amp;nbsp;&lt;A href="https://help.sap.com/docs/SUPPORT_CONTENT/bwplaolap/3361385310.html" target="_blank" rel="noopener noreferrer"&gt;Steps to Create an ODATA service for a BW Query | SAP Help Portal&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;U&gt;Tip:&lt;/U&gt;&amp;nbsp;Sometimes, variables requiring mandatory user input may prevent the OData Service from enabling. Ideally, use optional or no variables and avoid authorization-relevant ones. However, this issue may not be relevant in the latest SP levels.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT color="#3366FF"&gt;&lt;STRONG&gt;&lt;U&gt;Step 2&lt;/U&gt;&amp;nbsp;Enable OData Service&lt;/STRONG&gt;&lt;/FONT&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;&lt;FONT color="#000000"&gt;2.1&lt;/FONT&gt;&lt;/STRONG&gt; Go to T-Code in BW system: &lt;/SPAN&gt;/n/IWFND/MAINT_SERVICE &lt;SPAN&gt;→ Select “&lt;EM&gt;Add Service&lt;/EM&gt;”&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Select the Service with Query Name&amp;nbsp;&lt;BR /&gt;For Ex: - Report Name: ZSALES_ODATA_BW_QUERY&lt;BR /&gt;Service generated: ZSALES_ODATA_BW_QUERY_SRV&lt;/P&gt;&lt;P&gt;Service is automatically created &amp;amp; Make sure to Enter your package to collect in a transport request.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="OData_Service.jpg" style="width: 758px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239174i7FC7B560E9EE2C20/image-dimensions/758x387?v=v2" width="758" height="387" role="button" title="OData_Service.jpg" alt="OData_Service.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.2&amp;nbsp;&lt;/STRONG&gt;Go back one step to the Service Catalog (Activate and Maintenance) screen:&lt;BR /&gt;Select the Service ZSALES_ODATA_BW_QUERY_SRV -&amp;gt; Call Browser to check the data.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.3&lt;/STRONG&gt; Go to SICF t-code to activate the service&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SICF2.jpg" style="width: 631px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239175i7D57EF15778AF3FE/image-dimensions/631x586?v=v2" width="631" height="586" role="button" title="SICF2.jpg" alt="SICF2.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.4&lt;/STRONG&gt; Check the URL and make sure the Query runs fine without any issues:&lt;/P&gt;&lt;P&gt;By default, the service is called with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/viewer/64e2cdef95134a2b8870ccfa29cbedc3/7.5.6/en-US/c9384c774bcc4837b84bee3679520fb4.html" target="_blank" rel="noopener noreferrer"&gt;parameter&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;'?$format=xml', the full URI is: /sap/opu/odata/sap/&amp;lt;query name&amp;gt;_SRV/?$format=xml&lt;/P&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="ODATA8.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239181i254B3DDFC38327D6/image-size/large?v=v2&amp;amp;px=999" role="button" title="ODATA8.jpg" alt="ODATA8.jpg" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;P&gt;&lt;BR /&gt;Here we can see, with parameter 'ZSALES_ODATA_BW_QUERYResults' we can access the data in the query result.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2.5&lt;/STRONG&gt; Below OData Service links can be useful to display Query Information:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Display Metadata&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;https://&amp;lt;BI Portal URL&amp;gt;/sap/opu/odata/sap/ZSALES_ODATA_BW_QUERY_SRV/$metadata&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Display Format&lt;/STRONG&gt;:&lt;BR /&gt;https://&amp;lt;BI Portal URL&amp;gt;/sap/opu/odata/sap/ZSALES_ODATA_BW_QUERY_SRV/?$format=xml&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Display Query Result&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;https://&amp;lt;BI Portal URL&amp;gt;/sap/opu/odata/sap/ZSALES_ODATA_BW_QUERY_SRV/ZSALES_ODATA_BW_QUERYResults&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Display Query Result with Filters&lt;/STRONG&gt;:&lt;BR /&gt;https://&amp;lt;BI Portal URL&amp;gt;/sap/opu/odata/sap/ZSALES_ODATA_BW_QUERY_SRV/ZSALES_ODATA_BW_QUERYResults?$filter= 0CALMONTH eq '04.2025'&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#3366FF"&gt;&lt;STRONG&gt;&lt;U&gt;Step3&lt;/U&gt;&amp;nbsp;Login to the SAP CPI (Cloud Platform Integration) system&lt;/STRONG&gt;&lt;/FONT&gt;:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3.1&lt;/STRONG&gt;&amp;nbsp;Field mapping between the BW Query and&amp;nbsp;C4C in CPI system.&lt;/P&gt;&lt;P&gt;Map the BW Query Result (Fields from left side of below mapping) with the C4C OData API (Cloud Data Source) from C4C system as shown below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="CPI_Mapping02.jpg" style="width: 756px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/239180iD0B4A7D21A5B4F57/image-dimensions/756x380?v=v2" width="756" height="380" role="button" title="CPI_Mapping02.jpg" alt="CPI_Mapping02.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note: C4C OData API (Cloud Data Source) is created in C4C system and the BW Query fields are mapped in CPI system.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3.2&lt;/STRONG&gt; A daily job can be scheduled to load the data from SAP BW Query OData service to SAP C4C Cloud data source using CPI system. A defined period and time can also be set similar to process chains and update the data regularly.&lt;/P&gt;&lt;P&gt;Please Refer:&amp;nbsp;&lt;A href="https://community.sap.com/t5/crm-and-cx-blogs-by-sap/sap-cloud-for-customer-integration-to-central-analytics-sap-bw-bi-via/ba-p/13366792" target="_blank"&gt;SAP Cloud for Customer - Integration to Central An... - SAP Community&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Also Please refer to below Links for more SAP insights on OData Service Enabling:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A href="https://wiki.scn.sap.com/wiki/display/BI/Steps+to+Create+an+ODATA+service+for+a+BW+Query" target="_blank" rel="noopener noreferrer"&gt;Steps to Create an ODATA service for a BW Query - SAP NetWeaver Business Warehouse - Community Wiki&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A href="https://blogs.sap.com/2019/02/19/how-to-do-odata-services-from-bex-query/" target="_blank" rel="noopener noreferrer"&gt;How to do Odata Services from BEx Query | SAP Blogs&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A href="https://blogs.sap.com/2012/12/08/transform-sap-bw-queries-into-odata-service-generation-and-activation/" target="_blank" rel="noopener noreferrer"&gt;Transform SAP BW Queries into OData Service: Part 1 – Generation and Activation | SAP Blogs&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A href="https://help.sap.com/viewer/107a6e8a38b74ede94c833ca3b7b6f51/2.0.7/en-US/11853413cf124dde91925284133c007d.html" target="_blank" rel="noopener noreferrer"&gt;ODP-Based Data Extraction via OData - SAP Help Portal&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-odata-service-with-sap-bw-query-for-c4c-integration-via-cloud/ba-p/13854864"/>
    <published>2025-03-20T18:32:15.806000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/supply-chain-management-blog-posts-by-members/transferring-master-data-from-sap-ibp-to-sap-ecc-best-integration-methods/ba-p/14059801</id>
    <title>Transferring Master Data from SAP IBP to SAP ECC: Best Integration Methods</title>
    <updated>2025-03-28T12:39:57.732000+01:00</updated>
    <author>
      <name>pushkar_dhale</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/180011</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;SAP Integrated Business Planning (IBP)&lt;/STRONG&gt; is a powerful tool for supply chain planning, but seamless integration with SAP ECC (or SAP S/4HANA) is crucial for end-to-end business processes. A key challenge for organizations is &lt;STRONG&gt;transferring master data&lt;/STRONG&gt; (such as product, location, and BOM data) from SAP IBP to SAP ECC efficiently. In this blog, we will explore the best solutions to achieve this integration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why is Master Data Integration Important?&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Master data consistency across SAP IBP and SAP ECC ensures that planning and execution processes are aligned. A well-integrated system leads to &lt;STRONG&gt;better decision-making, improved operational efficiency, and reduced data discrepancies&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Solutions for Transferring Master Data from SAP IBP to SAP ECC&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP provides multiple integration options based on the complexity and frequency of data transfer needs. Below are the key solutions:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;1. SAP Cloud Integration for data services&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP Cloud Integration for Data Services (SCI/CI-DS) is a middleware solution designed to transfer data between SAP IBP and SAP ECC.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How It Works:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Extracts master data from IBP and pushes it to ECC via &lt;STRONG&gt;IDocs&lt;/STRONG&gt;, &lt;STRONG&gt;BAPIs&lt;/STRONG&gt;, or direct &lt;STRONG&gt;table updates&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Supports scheduling and transformation of data before sending it to ECC.&lt;/LI&gt;&lt;LI&gt;Provides pre-built &lt;STRONG&gt;integration templates&lt;/STRONG&gt; for standard IBP-to-ECC data flow.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best For:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;✔ Standard IBP-ECC integrations&lt;BR /&gt;✔ Scheduled data transfer&lt;BR /&gt;✔ Scenarios where transformation of data is needed&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2. SAP IBP Application Jobs (Excel UI + Web UI)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP IBP provides an &lt;STRONG&gt;export job feature&lt;/STRONG&gt; that allows users to extract master data and upload it to ECC manually or through automation.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How It Works:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;IBP application jobs export master data in a &lt;STRONG&gt;CSV or XML file&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;ECC can consume this file using an &lt;STRONG&gt;ABAP program&lt;/STRONG&gt; that updates the relevant master data tables.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best For:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;✔ Simple and periodic data transfers&lt;BR /&gt;✔ Ad-hoc updates without middleware&lt;BR /&gt;✔ Organizations looking for a cost-effective approach&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3. SAP API Management (OData or REST APIs)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP provides &lt;STRONG&gt;OData and REST APIs&lt;/STRONG&gt; that enable IBP and ECC to communicate in real-time.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How It Works:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;IBP exposes &lt;STRONG&gt;OData APIs&lt;/STRONG&gt; to fetch master data.&lt;/LI&gt;&lt;LI&gt;SAP ECC consumes this data using &lt;STRONG&gt;ABAP programs&lt;/STRONG&gt; or &lt;STRONG&gt;middleware&lt;/STRONG&gt; (SAP PO, SAP CPI).&lt;/LI&gt;&lt;LI&gt;The data is inserted into ECC via &lt;STRONG&gt;BAPIs&lt;/STRONG&gt; or &lt;STRONG&gt;direct table updates&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best For:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;✔ Real-time integration needs&lt;BR /&gt;✔ Event-driven updates&lt;BR /&gt;✔ Organizations using API-based architecture&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;4. SAP BTP (Business Technology Platform) with Custom Middleware&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP Business Technology Platform (BTP) provides a flexible way to integrate IBP with ECC.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How It Works:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SAP BTP extracts master data from IBP.&lt;/LI&gt;&lt;LI&gt;The data is processed or enriched before being sent to ECC using &lt;STRONG&gt;IDocs&lt;/STRONG&gt; or &lt;STRONG&gt;BAPIs&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Can be used with &lt;STRONG&gt;SAP HANA Cloud&lt;/STRONG&gt;, &lt;STRONG&gt;SAP CPI&lt;/STRONG&gt;, or other middleware solutions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best For:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;✔ Custom integration scenarios&lt;BR /&gt;✔ Businesses requiring additional data processing&lt;BR /&gt;✔ Hybrid cloud environments&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;5. SAP Data Intelligence&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;SAP Data Intelligence (DI) is a powerful tool for data integration, orchestration, and analytics.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How It Works:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Uses AI/ML-based pipelines to extract, transform, and load master data.&lt;/LI&gt;&lt;LI&gt;Can connect SAP IBP, SAP ECC, and third-party applications.&lt;/LI&gt;&lt;LI&gt;Offers advanced data governance and monitoring.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Best For:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;✔ Enterprise-wide integration with analytics&lt;BR /&gt;✔ Businesses looking for &lt;STRONG&gt;AI-driven&lt;/STRONG&gt; data transfers&lt;BR /&gt;✔ Scenarios involving multiple data sources&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Comparison of Integration Methods&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Solution&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Best For&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Integration Type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SCI (CPI-DS)&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Standard IBP-to-ECC integration&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Scheduled batch processing&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;IBP Application Jobs&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Simple, ad-hoc exports&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;File-based transfer&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SAP API Management&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Real-time data transfer&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;OData/REST APIs&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SAP BTP (Middleware)&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Custom integration needs&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;IDocs, BAPIs, or direct updates&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SAP Data Intelligence&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Advanced analytics-driven transfers&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;AI &amp;amp; ML-based pipelines&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The choice of &lt;STRONG&gt;integration method&lt;/STRONG&gt; depends on factors like &lt;STRONG&gt;real-time vs. batch processing, data transformation needs, and existing system landscape&lt;/STRONG&gt;.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If &lt;STRONG&gt;real-time updates&lt;/STRONG&gt; are required, &lt;STRONG&gt;API-based integration&lt;/STRONG&gt; is the best choice.&lt;/LI&gt;&lt;LI&gt;For &lt;STRONG&gt;scheduled updates&lt;/STRONG&gt;, &lt;STRONG&gt;SAP CPI-DS&lt;/STRONG&gt; or &lt;STRONG&gt;IBP export jobs&lt;/STRONG&gt; are ideal.&lt;/LI&gt;&lt;LI&gt;If your organization needs &lt;STRONG&gt;customized&lt;/STRONG&gt; or &lt;STRONG&gt;hybrid&lt;/STRONG&gt; integration, &lt;STRONG&gt;SAP BTP or SAP Data Intelligence&lt;/STRONG&gt; can be explored.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;By selecting the right integration approach, businesses can ensure seamless master data synchronization between &lt;STRONG&gt;SAP IBP and SAP ECC&lt;/STRONG&gt;, leading to more efficient supply chain operations.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;What’s Next?&lt;/STRONG&gt; If you’re looking to implement an IBP-ECC integration strategy, consider evaluating your business needs, existing infrastructure, and long-term goals.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/supply-chain-management-blog-posts-by-members/transferring-master-data-from-sap-ibp-to-sap-ecc-best-integration-methods/ba-p/14059801"/>
    <published>2025-03-28T12:39:57.732000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/connecting-multiple-databases-and-odata-services-to-sap-btp-using-bas/ba-p/14063092</id>
    <title>Connecting Multiple Databases and OData Services to SAP BTP using BAS</title>
    <updated>2025-04-03T15:51:13.956000+02:00</updated>
    <author>
      <name>Akshay_Anil</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1385603</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1707356927"&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;Introduction&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H2&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;In this post, I will explain how to connect multiple databases and OData services to SAP BTP using BAS . This guide covers configuring UI5 applications to consume multiple OData services from both &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;SAP S/4HANA (on-premise)&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;SAP BTP ABAP environment&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;, ensuring seamless data integration.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1510843422"&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;Summary&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H2&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;I aim to integrate three different OData services from different database sources :&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;&lt;STRONG&gt;On-Premise S/4HANA OData V2 Services&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#003366"&gt;&lt;STRONG&gt;ZPR_EMP_DETAILS_SRV&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;: &lt;FONT color="#000000"&gt;Fetches employee details.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;&lt;FONT color="#000000"&gt;&lt;BR /&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#003366"&gt;&lt;STRONG&gt;ZFI_TEST_ODATA_SRV&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;: &lt;FONT color="#000000"&gt;Fetches financial data.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;SAP BTP ABAP Environment OData V4 Service&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#003366"&gt;&lt;STRONG&gt;ZUI_TAB_TRAVDAT_O4_AKS_001&lt;/STRONG&gt;&lt;SPAN&gt;: &lt;FONT color="#000000"&gt;Fetches travel-related data using the RAP Model.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1314329917"&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;Steps to Connect Multiple OData Services&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H2&gt;&lt;H3 id="toc-hId-1246899131"&gt;&lt;SPAN&gt;Step 1: Add Data Sources in UI5 Application&lt;/SPAN&gt;&lt;/H3&gt;&lt;OL class="lia-align-justify" style="text-align : justify;"&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Create a &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;UI5 application&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; in &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;VS Code&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;While creating the application, provide the service URL to configure an &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;OData service automatically&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Navigate to &lt;/SPAN&gt;&lt;SPAN&gt;webapp/manifest.json&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Modify the &lt;/SPAN&gt;&lt;SPAN&gt;dataSources&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN&gt;&lt;FONT color="#000000"&gt; section to include multiple OData services as follows:&lt;/FONT&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"dataSources": {
  "mainService": {
    "uri": "/sap/opu/odata/sap/ZPR_EMP_DETAILS_SRV/",
    "type": "OData",
    "settings": {
      "odataVersion": "2.0"
    }
  },
  "subService": {
    "uri": "/sap/opu/odata/sap/ZFI_TEST_ODATA_SRV/",
    "type": "OData",
    "settings": {
      "odataVersion": "2.0"
    }
  },
  "rapService": {
    "uri": "/sap/opu/odata4/sap/zui_tab_travdat_o4_aks_001/",
    "type": "OData",
    "settings": {
      "odataVersion": "4.0"
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1050385626"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Step 2: Configure Models in &lt;/SPAN&gt;&lt;SPAN&gt;manifest.json&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Each model corresponds to an OData service:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"models": {
  "": {
    "dataSource": "mainService",
    "preload": true,
    "settings": {}
  },
  "subModel": {
    "dataSource": "subService",
    "preload": true,
    "settings": {}
  },
  "rapModel": {
    "dataSource": "rapService",
    "preload": true,
    "settings": {
      "operationMode": "Server",
      "autoExpandSelect": true,
      "earlyRequests": true
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-853872121"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Step 3: Configure &lt;/SPAN&gt;&lt;SPAN&gt;ui5.yaml&lt;/SPAN&gt;&lt;SPAN&gt; for Backend Connections&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;In &lt;/SPAN&gt;&lt;SPAN&gt;ui5.yaml&lt;/SPAN&gt;&lt;SPAN&gt;, configure the destinations for OData services:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;server:
  customMiddleware:
    - name: ui5-middleware-simpleproxy
      afterMiddleware: compression
      configuration:
      ui5:
          path:
            - /resources
            - /test-resources
          url: https://ui5.sap.com
        backend:
# On-premise SAP System Destination 1 - Replace with your URL
        - scp: true
        path: /sap/opu/odata/sap/ZPR_EMP_DETAILS_SRV/
        url: https://your-onpremise-system-hostname:port/
        destination: SAHANA_CONN
        client: 'your client ID'
        authenticationType: BasicAuthentication

  # On-premise SAP System Destination 2 - Replace with your URL  
        - scp: true
        path: /sap/opu/odata/sap/ZFI_TEST_ODATA_SRV
        url: https://your-onpremise-system-hostname:port/
        destination: SAHANA_CONN
        client: 'your client ID'
        authenticationType: BasicAuthentication

  # SAP BTP ABAP Environment Destination - Replace with your instance URL
        - scp: true
        path: /sap/opu/odata/sap/zui_tab_travdat_o4_aks_001/
        url: https://your-abap-instance-guid.abap.region.hana.ondemand.com
        destination: abap-cloud-default_abap-trial-9a87acc7trial-dev
        client: 'your client ID'
        authenticationType: OAuth2UserTokenExchange&lt;/code&gt;&lt;/pre&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;Note :&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Destination :&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;&lt;STRONG&gt;S4HANA_CONN&lt;/STRONG&gt; is used for two &lt;STRONG&gt;OData V2&lt;/STRONG&gt; services hosted in the on-premise &lt;STRONG&gt;S/4HANA&lt;/STRONG&gt; system&amp;nbsp;as shown in below screenshot.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-01-26 181350.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/245306iBB0DEADB0F95BEE4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Screenshot 2025-01-26 181350.png" alt="Screenshot 2025-01-26 181350.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;abap-cloud-default_abap-trial-9a87ace7trial-dev&lt;/STRONG&gt;&lt;SPAN&gt; is for the &lt;/SPAN&gt;&lt;STRONG&gt;RAP-based OData V4&lt;/STRONG&gt;&lt;SPAN&gt; service hosted on SAP BTP as shown in below screenshot.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-01-26 181306.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/245307iFD597DFA9D8D40F6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Screenshot 2025-01-26 181306.png" alt="Screenshot 2025-01-26 181306.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Authentication Types&lt;/STRONG&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;On-premise S/4HANA services use &lt;/SPAN&gt;&lt;STRONG&gt;BasicAuthentication&lt;/STRONG&gt;&lt;SPAN&gt;, which is simpler but less secure for cloud-based scenarios.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#000000"&gt;The SAP BTP service uses &lt;STRONG&gt;OAuth2UserTokenExchange&lt;/STRONG&gt;&lt;SPAN&gt;, enabling secure token-based communication.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;All the Connected OData will be Listed in Service Manager&amp;nbsp;&lt;/STRONG&gt;as shown in below screenshot.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-01-26 191910.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/245294i7655AA2705E5892B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Screenshot 2025-01-26 191910.png" alt="Screenshot 2025-01-26 191910.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#800000"&gt;&lt;STRONG&gt;Important Note on OData Connection Methods:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;Avoid connecting directly to OData services via the Service Manager, as it can lead to data inconsistency issues (e.g., all requests may unintentionally retrieve only the last edited destination). Instead,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;I prefer using the Destination Service&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(as shown in the configuration above) for:&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Stable &amp;amp; secure connections&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Proper authentication handling&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(Basic/OAuth2)&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#000000"&gt;&lt;STRONG&gt;Consistent data retrieval&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(prevents mixing/overwriting datasets).&lt;/FONT&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-528275897"&gt;&lt;FONT color="#003366"&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;By following these steps, you can successfully integrate multiple OData services in a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;SAP BTP-based Fiori application&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. This setup allows seamless data flow between &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;on-premise S/4HANA&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;cloud-based SAP BTP ABAP environment&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, ensuring a modern, scalable architecture.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I hope this helps! Let me know your thoughts or if you have any questions.&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Thanks,&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#003366"&gt;&lt;SPAN&gt;&lt;STRONG&gt;Akshay Anil&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp;&lt;FONT size="2"&gt;&lt;A title="Click Here to Follow me on Linkedin" href="https://www.linkedin.com/in/akshayanil919/" target="_blank" rel="noopener nofollow noreferrer"&gt;Linkedin Profile&lt;/A&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;FONT color="#000000"&gt;&lt;SPAN&gt;Technical Consultant, SAP ABAP | BTP | Fiori | Ui5&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Application+Studio/pd-p/67837800100800007077" class="lia-product-mention" data-product="13-1"&gt;SAP Business Application Studio&lt;/a&gt;&amp;nbsp; &lt;a href="https://community.sap.com/t5/c-khhcw49343/OData/pd-p/551580658536717501828021060147962" class="lia-product-mention" data-product="323-1"&gt;OData&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/connecting-multiple-databases-and-odata-services-to-sap-btp-using-bas/ba-p/14063092"/>
    <published>2025-04-03T15:51:13.956000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/ba-p/14078591</id>
    <title>SAP Datasphere External Access Overview: APIs, CLI and SQL</title>
    <updated>2025-04-22T10:55:27.647000+02:00</updated>
    <author>
      <name>henri_hosang</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1395426</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1579351488"&gt;&lt;FONT color="#808080"&gt;&lt;STRONG&gt;Querying and Managing SAP Datasphere with Python, Postman, Open SQL and the Command Line Interface&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983"&gt;Introduction&lt;/H1&gt;&lt;P&gt;This blog post aims to provide an overview of different external tooling options for SAP Datasphere as these resources are scattered across different Help pages, the Business Accelerator Hub and other community Blogs. This blog post does not aim to be exhaustive or cover every detail, but lists the different possibilities to perform actions in Datasphere or create, read, update or delete objects and data using external tools like Postman, Python, the CLI or open SQL.&lt;/P&gt;&lt;P&gt;Here is an overview of Topics covered in the Blog Post:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Rest API: TLS server certificates API; Connections API; Data Sharing Cockpit API and SCIM 2.0 API for user management&lt;/LI&gt;&lt;LI&gt;Command Line Interface: Manage User Access, Spaces, Modeling Objects, the Data Marketplace, Tasks and Task Chains as well as Connectivity&lt;/LI&gt;&lt;LI&gt;OData API: Get assets from the SAP Datasphere Catalog; Consume the datasets and metadata from consumable data assets.&lt;/LI&gt;&lt;LI&gt;Open SQL schema and ODBC/JDBC: Query the SAP HANA Cloud database with database users using SQL Statements like SELECT; CREATE; UPDATE; INSERT and ALTER Tables and Views.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Every Agenda Item is split into two sections: What? and How? The first section explains which use cases are supported by the shown technology and provides links to the relevant documentation. Second, a simple example is shown for each technology using the appropriate tools like Postman, Python, SQL or the CLI. This example can then easily be adapted and extended for future options explained in the What? section following the documentation. Additionally further links are provided to gain a deeper understanding of possible use case scenarios. Often the same action can be achieved by multiple options. E.g. It is possible to create and list connections via the CLI or via the REST API.&lt;/P&gt;&lt;P&gt;Of course, there is also the option to integrate SAP Datasphere directly with third party applications via e.g. OData or ODBC/JDBC connections or pushing the data to target systems like AWS S3 or GCP Cloud Storage using Replication Flows. However, these options are not part of this blog post, because application specific scenarios must be considered.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1186324478"&gt;REST API&lt;/H1&gt;&lt;P&gt;REST APIs are based on a standard architecture that uses HTTP methods like GET, POST, PUT, and DELETE. They allow you to perform actions in Datasphere regarding User &amp;amp; Role Management, Connection &amp;amp; Certificate Management and the usage of the Data Sharing Cockpit. You can call them via an API Platform such as Postman or via Programming Languages like Python or Type Script.&lt;/P&gt;&lt;H2 id="toc-hId-1118893692"&gt;&lt;STRONG&gt;What?&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Use the Certificates API to create, read and delete TLS server certificates to Datasphere - &lt;A href="https://api.sap.com/api/CertificateManagement/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/CertificateManagement/overview&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Use the Connections API to list, validate, delete, update or create connections in a space - &lt;A href="https://api.sap.com/api/ConnectionManagement/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/ConnectionManagement/overview&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Use the Data Sharing Cockpit API to maintain your data provider profile; create and edit data product; manage licenses; create and publish releases and manage contexts - &lt;A href="https://api.sap.com/api/DataSharingCockpit/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/DataSharingCockpit/overview&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Use the SCIM 2.0 API to create, read, modify and delete users; add roles and get information on the identity provider - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/9f804b8efa8043539289f42f372c4862/1ca8c4a9467f43df9ae6d4ed3734f05a.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/9f804b8efa8043539289f42f372c4862/1ca8c4a9467f43df9ae6d4ed3734f05a.html&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-922380187"&gt;&lt;STRONG&gt;How?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Using the REST API involves generally two steps.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Creating an OAuth 2.0 Client to Authenticate Against SAP Datasphere&lt;/LI&gt;&lt;LI&gt;Using Postman or another technology to obtain an access token and then calling the REST API with the access token&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId-854949401"&gt;1 Creating an OAuth 2.0 Client to Authenticate Against SAP Datasphere&lt;/H3&gt;&lt;P&gt;To create an OAuth2.0 Client users need the DW Administrator role. Under System -&amp;gt; Administration -&amp;gt; App Integration a new OAuth Client can be added.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_0-1744874906487.png" style="width: 593px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251773iA167760436FF3ABA/image-dimensions/593x304?v=v2" width="593" height="304" role="button" title="henri_hosang_0-1744874906487.png" alt="henri_hosang_0-1744874906487.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the OAuth Client configuration enter a name and choose the following settings:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Purpose: API Access&lt;/LI&gt;&lt;LI&gt;Access: Select the appropriate access (e.g. User Provisioning if you want to use the SCIM 2.0 API)&lt;/LI&gt;&lt;LI&gt;Security: Client Credentials&lt;/LI&gt;&lt;LI&gt;Token Lifetime&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Click Add and copy the Client ID and Client Secret from the next screen (the client secret can only be copied now and you need to create a new client if you lose it!).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_1-1744874906492.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251772iC1BB70D5DED411B8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="henri_hosang_1-1744874906492.png" alt="henri_hosang_1-1744874906492.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Additionally, please copy the Authorization URL and Token URL from the App Integration overview as they are needed later to authenticate.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_2-1744874906497.png" style="width: 737px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251774iAC8248F25411BEFD/image-dimensions/737x232?v=v2" width="737" height="232" role="button" title="henri_hosang_2-1744874906497.png" alt="henri_hosang_2-1744874906497.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-658435896"&gt;2 Using Postman or another technology to obtain an access token and calling the REST API&lt;/H3&gt;&lt;P&gt;Now we can use the Authorization URL, Token URL, Client ID and Client Secret to first obtain an access token and then call the REST API that we need.&lt;/P&gt;&lt;P&gt;The next steps will be shown in (1) &lt;STRONG&gt;Postman&lt;/STRONG&gt; and (2) &lt;STRONG&gt;Python&lt;/STRONG&gt; as two alternative approaches&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(1) Postman&lt;/STRONG&gt;: Create a collection and a new GET request within that collection. Provide the copied token URL and add grant_type=client_credentials in the Parameters.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_3-1744874906500.png" style="width: 781px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251776i61D60BEBFFD8C848/image-dimensions/781x186?v=v2" width="781" height="186" role="button" title="henri_hosang_3-1744874906500.png" alt="henri_hosang_3-1744874906500.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then switch to the Authorization tab use Authorization type Basic Auth and enter the Client ID as username and the client secret as password. You can now send the request and get the access_token with its lifetime as result. Copy the token for the next step.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_4-1744874906512.png" style="width: 786px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251777iDE72C8AE7699B052/image-dimensions/786x408?v=v2" width="786" height="408" role="button" title="henri_hosang_4-1744874906512.png" alt="henri_hosang_4-1744874906512.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now we can call the REST API endpoint as documented in the resources linked in the &lt;STRONG&gt;What?&lt;/STRONG&gt; Section (mainly &lt;A href="https://api.sap.com/package/sapdatasphere/rest" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/package/sapdatasphere/rest&lt;/A&gt;). For this simple example we will just get a list of connections from one of the Datasphere space by calling this endpoint:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_5-1744874906513.png" style="width: 767px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251775iF6CEF9816AAA8682/image-dimensions/767x46?v=v2" width="767" height="46" role="button" title="henri_hosang_5-1744874906513.png" alt="henri_hosang_5-1744874906513.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Follow these steps:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a new GET request in Postman&lt;/LI&gt;&lt;LI&gt;Enter the URL &lt;SPAN&gt;&lt;A target="_blank" rel="noopener"&gt;https://&amp;lt;host&amp;gt;/api/v1/datasphere/spaces/&amp;lt;spaceId&amp;gt;/connections&lt;/A&gt;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;Host refers to the URL of your Datasphere Host; it can be copied from the browser. Copy everything until the first “/”&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_6-1744874906515.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251778iF0DDCD5226D21DBA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="henri_hosang_6-1744874906515.png" alt="henri_hosang_6-1744874906515.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;LI&gt;The space ID is the ID of the space from which you want to get the connections. You can see available spaces if you navigate to Space Management in Datasphere.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Add x-sap-sac-custom-auth=true in the Headers section in Postman&lt;/LI&gt;&lt;LI&gt;Specify the Auth Type as Bearer Token by using the Token from the previous step.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_7-1744874906519.png" style="width: 759px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251779iE43A99626A53A4F9/image-dimensions/759x184?v=v2" width="759" height="184" role="button" title="henri_hosang_7-1744874906519.png" alt="henri_hosang_7-1744874906519.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once you send the request you get a list of all connections from that space returned. You can now adapt this example to use any other REST API mentioned above by simply changing the URL + HTTP Method to the one specified in the documentation and adding relevant parameters.&lt;/P&gt;&lt;P&gt;Note: If you want to use the SCIM 2.0 API to create, modify or delete users you also need a so called CSRF Token by calling &lt;SPAN&gt;&lt;A target="_blank" rel="noopener"&gt;https://&amp;lt;host&amp;gt;/api/v1/csrf&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;with the obtained access token and x-sap-sac-custom-auth=true and x-csrf-token=fetch as Headers.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;(2) Python&lt;/STRONG&gt;: The steps in Python are like the ones in Postman, using the same credentials and parameters. First an access_token needs to be obtained and then the connections API is called.&lt;/P&gt;&lt;P&gt;To simplify the scenario the Authorization URL, Token URL, Client ID and Client Secret are stored in global variables. However, in a productive scenario a secret store or environment variables should be used instead.&lt;/P&gt;&lt;P&gt;For this demonstration Python 3.9 is used. The only import that is needed is the requests library to make the API calls. Additionally, the credentials are stored as variables as mentioned. That is all for the setup.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import requests

token_url = xxx
username = xxx
password = xxx&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;To get the list of connections again two calls are made. (1) to get the access_token and (2) to the actual connections API endpoint. Each call is a function.&lt;/P&gt;&lt;P&gt;The get_token function specifies the authentication context using the client ID as username and the client secret as password. Via the request library the token_url is called with the defined authentication context. If the call was successful (code 200) the access_token is read from the API response.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def get_token():
    
    # Use basic authentication with username and password
    auth = requests.auth.HTTPBasicAuth(username, password)
    
    # API call
    response = requests.get(token_url, auth=auth)
    
    # Check result and return
    if response.status_code == 200:
        return response.json()['access_token']
    else:
        print("HTTP Error occurred", response.status_code)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In the second function the first function is called to get the access_token. Then it is passed on with the header x-sap-sac-custom-auth=true to the URL &lt;SPAN&gt;&lt;A target="_blank" rel="noopener"&gt;https://&amp;lt;host&amp;gt;/api/v1/datasphere/spaces/&amp;lt;spaceId&amp;gt;/connections&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;as shown in the postman section.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def get_connections():
    connection_url = xxx

    # Get Token
    bearer_token = get_token()
    
    # Define headers and use bearer  token as authentication method
    headers = {
        "Authorization" : f"Bearer {bearer_token}",
        "x-sap-sac-custom-auth" : "true",
        "Content-Type": "application/json"
    }
    
    # API call
    response = requests.get(connection_url, headers=headers)
    
    # Check result and return
    if response.status_code == 200:
        return response.json()
    else:
        print("HTTP Error occurred", response.reason)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;As with the Postman option you can now adapt this example to use any other REST API mentioned above by simply changing the URL + HTTP Method to the one specified in the documentation and adding relevant parameters.&lt;/P&gt;&lt;P&gt;To use the SCIM API, first a csrf token needs to be generated and then send in combination with the bearer token as headers to the Endpoint for deleting, modifying or creating users in the system. Instead of calling the API Endpoints directly from requests, a session needs to be created via &lt;EM&gt;requests.Session()&lt;/EM&gt; to obtain the csrf token and call the create user Endpoint from one session.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-203756953"&gt;Command Line Interface (CLI)&lt;/H1&gt;&lt;P&gt;The Command Line Interface is a business user friendly toolset to achieve a variety of tasks in Datasphere without needing to write any code or use API platforms. Datasphere end users can run simple one-line statements in the command line after authenticating to perform admin tasks as well as to work with modeling objects in Datasphere.&lt;/P&gt;&lt;H2 id="toc-hId-136326167"&gt;&lt;STRONG&gt;What?&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Work with Global &amp;amp; Scoped Roles; List, Add, Remove Users from Global and Scoped Roles; Manage Users&amp;nbsp;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/3a3d0ef3d4954797acac12afbcf9ab5d.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/3a3d0ef3d4954797acac12afbcf9ab5d.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;List, Read, Create, Update and Delete Spaces; Manage Space Users and Database Users; Set Space Priorities and Statement Limits - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/5eac5b71e2d34c32b63f3d8d47a0b1d0.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/5eac5b71e2d34c32b63f3d8d47a0b1d0.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;List, Read, Create, Update and Delete Modeling Objects via the Command Line - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/6f5c65f209004751aa48f9682ee2ec45.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/6f5c65f209004751aa48f9682ee2ec45.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Manage the Data Providers, Products, Licenses, Releases and Contexts of the Data Marketplace via the Command Line - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/5a815f6c21e9468eb96d0be95b9d2def.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/5a815f6c21e9468eb96d0be95b9d2def.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Manage Tasks and Task Chains via the Command Line - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/2b26a31f197444dea314495bc0008eae.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/2b26a31f197444dea314495bc0008eae.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;List, Upload and Delete TLS Certificates; List, Read, Create, Validate, Edit and Delete Connections - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/8eb811898d1049fbb426339e44a2eb70.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/8eb811898d1049fbb426339e44a2eb70.html&lt;/A&gt;&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--60187338"&gt;&lt;STRONG&gt;How?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;To use the command line with SAP Datasphere it is recommended to use an OAuth 2.0 Client with interactive usage. The setup is quite similar to the one shown above for REST API, but some parameters have to be set up differently.&lt;/P&gt;&lt;P&gt;Again, to create an OAuth2.0 Client users need the DW Administrator role. Under System -&amp;gt; Administration -&amp;gt; App Integration a new OAuth Client can be added.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_8-1744874906534.png" style="width: 749px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251780i5249284A563C7866/image-dimensions/749x384?v=v2" width="749" height="384" role="button" title="henri_hosang_8-1744874906534.png" alt="henri_hosang_8-1744874906534.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the OAuth Client configuration different settings are used to use that Client with the CLI instead of REST API:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Purpose: Interactive Usage&lt;/LI&gt;&lt;LI&gt;Authorization Grant: Authorization Code&lt;/LI&gt;&lt;LI&gt;Redirect URI: This is the URI the user will be redirected to after authorization. For the Command Line Interface, you can simply start a localhost server on your machine using &lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;EM&gt;http://localhost:8080&lt;/EM&gt;&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Token Lifetime&lt;/LI&gt;&lt;LI&gt;Refresh Token Lifetime&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Click Add and copy the Client ID and Client Secret from the next screen (the client secret can only be copied now and you need to create a new client if you lose it!).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_9-1744874906538.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251782i44B6025DDA336E0E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="henri_hosang_9-1744874906538.png" alt="henri_hosang_9-1744874906538.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Additionally, please copy the Authorization URL and Token URL from the App Integration overview as they are needed later to authenticate.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_10-1744874906544.png" style="width: 569px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251783i8FA0E5D8D1E68C76/image-dimensions/569x179?v=v2" width="569" height="179" role="button" title="henri_hosang_10-1744874906544.png" alt="henri_hosang_10-1744874906544.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--202849493"&gt;Using the Command Line Interface directly&lt;/H3&gt;&lt;P&gt;To use the CLI for Datasphere Node.js &amp;gt;= 18 and &amp;lt;= 22 as well as npm &amp;gt;= 8 and &amp;lt;= 10 need to be installed. Npm is automatically installed with Node.js. Node.js can be downloaded from &lt;A href="https://nodejs.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://nodejs.org/&lt;/A&gt;&lt;/P&gt;&lt;P&gt;You can test the installation by running the following commands in your command line&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ node -v
$ npm -v&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Then run the following command to install the datasphere related commands:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ npm install -g /datasphere-cli&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Some packages will be installed and you can check the successful installation by running&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere –version&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Here is the summary of the installation commands:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="henri_hosang_11-1744874906546.png" style="width: 470px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251781i94A932B6BEC496A9/image-dimensions/470x167?v=v2" width="470" height="167" role="button" title="henri_hosang_11-1744874906546.png" alt="henri_hosang_11-1744874906546.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Next step is to log in to Datasphere. As a best practice, make sure to always clean host, cache and secrets before logging in again. However, if this is the first time you are using the CLI no credentials will be available. Run these commands&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere config host clean
$ datasphere config cache clean
$ datasphere config secrets reset&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Then log in to Datasphere using the &lt;EM&gt;datasphere login&lt;/EM&gt; command. You will be prompted with the necessary credentials for log in. For this step you need the host URL you see when opening Datasphere in your browser (see above). Additionally, client ID and client secret that are copied from the OAuth client are needed.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere login
✔ URL of the system to connect to: … &amp;lt;host&amp;gt;
✔ Please enter your client ID: … &amp;lt;client ID&amp;gt;
✔ Please enter your client secret: … &amp;lt;client secret&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;After entering the client secret a browser window to the redirect URI provided in the OAuth Client will open and the log in will be automatically handled. You can continue in the CLI, where you are logged in now. Just start running commands to Datasphere documented in the What? Section above. Here is a simple example to get all the spaces in your Datasphere Tenant.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere spaces list -H &amp;lt;host&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Here are all commands:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="henri_hosang_12-1744874906548.png" style="width: 505px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251784i0ADF8C3DEEE52F4F/image-dimensions/505x192?v=v2" width="505" height="192" role="button" title="henri_hosang_12-1744874906548.png" alt="henri_hosang_12-1744874906548.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note: For now you need to provide the host URL of the Datasphere Tenant via the -H option in every command. But the host can also be set as default and then it must not be used in every statement:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere config host set &amp;lt;host&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;And now you can run&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere spaces list&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once you are done, log out from Datasphere again&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ datasphere logout&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="henri_hosang_13-1744874906549.png" style="width: 563px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251787iCFEDD262AD7F4680/image-dimensions/563x152?v=v2" width="563" height="152" role="button" title="henri_hosang_13-1744874906549.png" alt="henri_hosang_13-1744874906549.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;There are many more options when using the CLI to work with Datasphere. E.g. the credentials can be stored in a secrets file, so you don’t have to paste them every time you log in. Additionally, a refresh token can be extracted once you are logged in and passed on when running a command, so you do not have to log in at the beginning of every session. Please refer to the documentation for more details.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--399362998"&gt;Using the Command Line Interface within a scripting language&lt;/H3&gt;&lt;P&gt;While this introduction uses the CLI directly, it should be mentioned that users can also use scripting languages like Python to automate the CLI usage by calling the commands directly from their code. In Python, the &lt;EM&gt;subprocess&lt;/EM&gt; library is used to call CLI commands from code. This is a simple example to log in and list all available spaces in Datasphere. The credentials are stored in a JSON file:&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import subprocess

subprocess.run("datasphere config host clean", shell=True)
subprocess.run("datasphere config cache clean", shell=True)
subprocess.run("datasphere config secrets reset", shell=True)

subprocess.run("datasphere login --host &amp;lt;host&amp;gt; --options-file ./dsp_cli_secrets.json", shell=True)

subprocess.run("datasphere spaces list -H &amp;lt;host&amp;gt;", shell=True)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Using this option is handy if you want to automate running CLI commands and chaining multiple commands together. An example would be to first get all spaces, then use a for loop to get all connections per space and use another command to validate all the connections.&lt;/P&gt;&lt;P&gt;Here is a great blog post that shows how you can combine the power of CLI and Python to generate views in Datasphere: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-view-generation-with-python-and-the-command-line-interface/ba-p/13558181" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-view-generation-with-python-and-the-command-line-interface/ba-p/13558181&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--9070489"&gt;OData API&lt;/H1&gt;&lt;P&gt;So far REST APIs and the CLI are shown to perform certain actions in Datasphere. But what if you want to consume and report on data within the Datasphere Tenant? In that case, you can use the next two options: OData API and the OpenSQL schema can be used.&lt;/P&gt;&lt;H2 id="toc-hId--498987001"&gt;&lt;STRONG&gt;What?&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Catalog: List Spaces and Assets exposed for consumption&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/7a453609c8694b029493e7d87e0de60a.html#loio7a453609c8694b029493e7d87e0de60a__section_catalog_service" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/7a453609c8694b029493e7d87e0de60a.html#loio7a453609c8694b029493e7d87e0de60a__section_catalog_service&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://api.sap.com/api/DatasphereCatalog/resource/SAP_Datasphere_Consumption_Catalog" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/DatasphereCatalog/resource/SAP_Datasphere_Consumption_Catalog&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Consumption: Retrieve Analytic Models, retrieve views exposed for consumption, retrieve metadata of Assets&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/7a453609c8694b029493e7d87e0de60a.html#loio7a453609c8694b029493e7d87e0de60a__section_analytical_data" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/7a453609c8694b029493e7d87e0de60a.html#loio7a453609c8694b029493e7d87e0de60a__section_analytical_data&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://api.sap.com/api/DatasphereConsumption/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/DatasphereConsumption/overview&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--695500506"&gt;&lt;STRONG&gt;How?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;As mentioned, the OData API is mainly used to consume objects from Datasphere. It can be accessed directly from the browser, via an API Platform like Postman, a scripting language like Python or it can be used by 3rd party applications like SAP Analytics Cloud and PowerBI to consume data from Datasphere in a reporting scenario.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;H3 id="toc-hId--1185417018"&gt;Using the Browser to consume OData Requests&lt;/H3&gt;&lt;P&gt;If you are privileged to see objects in Datasphere you can directly access the OData API from the browser, you are already logged in to Datasphere, since the log in context is just reused for the OData API without any additional setup. If there is e.g. an analytic model that you build and want to consume via OData, you can directly do so by just opening a new window in the browser and pasting the OData request URL. The OData request URL can be crafted yourself by referring to the documentation or you can use the Generate OData request available from the Datasphere UI for all objects exposed for consumption.&lt;/P&gt;&lt;P&gt;To generate the OData request, open the asset from the data builder. If it is exposed for consumption (Analytic Models are exposed by default; Views have a switch in the details pane to expose them) an icon appears in the header section under “Tools” to generate the OData request.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_14-1744874906550.png" style="width: 488px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251786i2DD050F41A39EB8A/image-dimensions/488x76?v=v2" width="488" height="76" role="button" title="henri_hosang_14-1744874906550.png" alt="henri_hosang_14-1744874906550.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;A pop-up opens to customize the OData URL. In the top, there is a selection if the actual data of the object should be received or its metadata. Additionally, variables and query parameters can be defined – as shown below. If the generate OData request is opened to retrieve data and the default settings are used the OData request URL look like this:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Exposed Views: &amp;lt;host&amp;gt;/api/v1/dwc/consumption/&lt;STRONG&gt;relational&lt;/STRONG&gt;/&amp;lt;space Id&amp;gt;/&amp;lt;object technical name&amp;gt;/&amp;lt;object technical name&amp;gt;&lt;/LI&gt;&lt;LI&gt;Exposed Analytic Models: &amp;lt;host&amp;gt;/api/v1/dwc/consumption/&lt;STRONG&gt;analytical&lt;/STRONG&gt;/&amp;lt;space Id&amp;gt;/&amp;lt;object technical name&amp;gt;/&amp;lt;object technical name&amp;gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;As one can see the relational URL is used for views while the analytical is used for analytic models. This is because analytic models allow for more features like restricted measures and exception aggregations that are processed like a multidimensional statement and are dependent on the aggregation state defined via the variables and parameters. The relational URL for views just receives the result in a row-by-row fashion. Here is a Blog post exploring the differences in more detail: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-analytical-and-relational-odata-apis/ba-p/13573797" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-analytical-and-relational-odata-apis/ba-p/13573797&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Changes you do to the variables and query parameters are reflected in the OData request URL. Variables are defined during the objects modeling process. If a default value is set for a variable it is used by default. If no default value is set, you must set a value for the variable to call the OData request. On the other hand, query parameters are not defined in the modeling process but are used in only that specific OData request. Query parameters are standard URL parameters used to filter, sort and limit the result set. Here is an overview of the usable query parameters&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;$select – return only specified columns&lt;/LI&gt;&lt;LI&gt;$filter – restrict result according to the provided criteria&lt;/LI&gt;&lt;LI&gt;$orderby – sorts the result by the specified column&lt;/LI&gt;&lt;LI&gt;$count – returns the count of the number of records&lt;/LI&gt;&lt;LI&gt;$top – limits the number of returned records to &amp;lt;n&amp;gt;&lt;/LI&gt;&lt;LI&gt;$skip – excludes the first &amp;lt;n&amp;gt; items&lt;/LI&gt;&lt;LI&gt;sap-language – returns the data in the specified language (if available)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In this example an analytic model to monitor task chain runs is shown. It has one variable INCLUDE_FAILURES_ONLY with the default value YES and query parameters are set to show only task chain steps with replication flows, ordered by the end date of the task chain run and limited to show only the last 100 results.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_15-1744874906554.png" style="width: 562px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251788i1838F24C782DFE88/image-dimensions/562x538?v=v2" width="562" height="538" role="button" title="henri_hosang_15-1744874906554.png" alt="henri_hosang_15-1744874906554.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To see the result of the OData request you can click Preview or copy the URL to a new browser window. If everything is configured correctly a value array of objects is shown, where each object is one result row. As mentioned, this works without any additional setup since the log in context from your browser is reused.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_16-1744874906562.png" style="width: 754px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251789iD60DCF01B58DA842/image-dimensions/754x328?v=v2" width="754" height="328" role="button" title="henri_hosang_16-1744874906562.png" alt="henri_hosang_16-1744874906562.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note: There is the limitation, that a user can send a maximum of 300 OData requests per minute. Pagination is used by default with 50.000 records per page. Via $skip and $top parameters client-side pagination can be implemented.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--1381930523"&gt;Using Postman to consume OData Requests&lt;/H3&gt;&lt;P&gt;So far, we have seen, how to consume data in Datasphere via the OData API directly from the browser without any additional setup. However, if you want to use a 3rd party tool like Postman or Python to call OData requests you have to setup an OAuth client under System -&amp;gt; Administration -&amp;gt; App Integration with Interactive usage and a redirect URI. &lt;STRONG&gt;Please refer to the How? section under Command Line Interface (CLI) as the setup is the same&lt;/STRONG&gt;. Once you got the client id, client secret, authentication and token URL you can continue in Postman by creating a new GET request. Copy &amp;amp; Paste the URL that you generated via the generate OData request function in Datasphere. You will see that the query parameters are automatically shown in the Parameters section of Postman.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_17-1744874906570.png" style="width: 743px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251790i8BF42724E27B3125/image-dimensions/743x221?v=v2" width="743" height="221" role="button" title="henri_hosang_17-1744874906570.png" alt="henri_hosang_17-1744874906570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The main step to use OData from Postman is to setup the Authorization correctly. Use Auth Type = OAuth 2.0 and header Prefix = Bearer (default).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_18-1744874906580.png" style="width: 706px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251793i869B37D4BC8D349D/image-dimensions/706x293?v=v2" width="706" height="293" role="button" title="henri_hosang_18-1744874906580.png" alt="henri_hosang_18-1744874906580.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then configure a New Token in the section below.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Grant type = Authorization Code&lt;/LI&gt;&lt;LI&gt;Callback URL = &amp;lt;Your Callback URL set in the OAuth client (&lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080&lt;/A&gt;)&amp;gt;&lt;/LI&gt;&lt;LI&gt;Auth URL = &amp;lt;Authorization URL copied from System -&amp;gt; Administration -&amp;gt; App Integration&amp;gt;&lt;/LI&gt;&lt;LI&gt;Access Token URL = &amp;lt;Token URL copied from System -&amp;gt; Administration -&amp;gt; App Integration&amp;gt;&lt;/LI&gt;&lt;LI&gt;Client ID = &amp;lt;Client ID copied from the OAuth client&amp;gt;&lt;/LI&gt;&lt;LI&gt;Client Secret = &amp;lt;Client secret copied from the OAuth client&amp;gt;&lt;/LI&gt;&lt;LI&gt;Client Authentication = Send as Basic Auth Header.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Then you have to click on “Get New Access Token”.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_19-1744874906594.png" style="width: 685px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251792i9A1DF676FF44E47B/image-dimensions/685x428?v=v2" width="685" height="428" role="button" title="henri_hosang_19-1744874906594.png" alt="henri_hosang_19-1744874906594.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Postman automatically handles the redirect and opens an embedded browser where you need to log in with your business user, using your normal Datasphere credentials. If the log in is successful, an Access Token Is generated, and you can click on Use Token.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_20-1744874906601.png" style="width: 497px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251791iA88BD31C62D3BF13/image-dimensions/497x266?v=v2" width="497" height="266" role="button" title="henri_hosang_20-1744874906601.png" alt="henri_hosang_20-1744874906601.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The Token has the lifetime defined in the OAuth client. After it is expired you just click on get new access Token again and use the new Token. Having the Token, you can now send the API request to consume an analytic model or exposed view. Here we consume the same analytic model as we did when we generated the OData request and opened the URL in the browser.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_21-1744874906619.png" style="width: 639px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251797i908B7AE4237050D8/image-dimensions/639x372?v=v2" width="639" height="372" role="button" title="henri_hosang_21-1744874906619.png" alt="henri_hosang_21-1744874906619.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;That’s it for consuming data via OData in the browser and via Postman. Of course, you can also use Python or another language to replicate Postman’s behavior in handling the redirect URI and authorization against Datasphere by calling the authorization URL and handling the callback via the redirect URI. Since this approach involves a bit more coding than the other consumption options, I will publish the scenario in a separate Blog post. Please see my upcoming blog post [TBD].&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--991638014"&gt;HANA Database Explorer &amp;amp; Open SQL Schema&lt;/H1&gt;&lt;P&gt;The last option to consume data from Datasphere via external tools is using SQL Statements to access the HANA Cloud Database underneath Datasphere directly instead of querying the objects in the modeling UI of Datasphere. Because SQL provides two-dimensional results in a row-by-row fashion, only views and tables can be consumed. Analytic models are multidimensional statements, so the OData API should be used to consume them instead. Third party tools like Tableau and Power BI use a JDBC/ODBC connection to the HANA Cloud to report on data exposed in views. This section shows how you can use this connection to consume and create objects of the HANA Cloud via the HANA Database Explorer and via Python.&lt;/P&gt;&lt;H2 id="toc-hId--1481554526"&gt;&lt;STRONG&gt;What?&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Access the space schema and read data from the space using SQL SELECT statements and&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/3de55a78a4614deda589633baea28645.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/3de55a78a4614deda589633baea28645.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://userapps.support.sap.com/sap/support/knowledge/en/3428316" target="_blank" rel="noopener noreferrer"&gt;https://userapps.support.sap.com/sap/support/knowledge/en/3428316&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Create Tables and Views to write data to a space&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/3de55a78a4614deda589633baea28645.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/3de55a78a4614deda589633baea28645.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://userapps.support.sap.com/sap/support/knowledge/en/3428316" target="_blank" rel="noopener noreferrer"&gt;https://userapps.support.sap.com/sap/support/knowledge/en/3428316&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Write SQL Script Procedures and add them to a task chain - &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/59b9c773035a48c5beb54ce9bb29f1d8.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/59b9c773035a48c5beb54ce9bb29f1d8.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Run Machine Learning Algorithms from HANA APL &amp;amp; PAL via open SQL&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/b78ad208f8c4494489aabf97284679b6.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/be5967d099974c69b77f4549425ca4c0/b78ad208f8c4494489aabf97284679b6.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/9f804b8efa8043539289f42f372c4862/287194276a7d4d778ec98fdde5f61335.html?q=PAL+APL" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/9f804b8efa8043539289f42f372c4862/287194276a7d4d778ec98fdde5f61335.html?q=PAL+APL&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/artificial-intelligence-and-machine-learning-blogs/hands-on-tutorial-machine-learning-with-sap-datasphere/ba-p/13796417" target="_blank"&gt;https://community.sap.com/t5/artificial-intelligence-and-machine-learning-blogs/hands-on-tutorial-machine-learning-with-sap-datasphere/ba-p/13796417&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--1678068031"&gt;&lt;STRONG&gt;How?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;To consume data via ODBC/JDBC you need either a database user or a database analysis user. The database user is limited to read from and/or write to an Open SQL schema with restricted access to the space schema whereas the Database analysis users have read only access to all space schemas (if configured).&lt;/P&gt;&lt;P&gt;To simplify the scenario, we will use a database analysis user for this introduction, because this user has default access to all the objects in Datasphere. To create a database analysis user, you need to be an administrator. Go to System -&amp;gt; Configuration -&amp;gt; Database Access -&amp;gt; Database Analysis User. Then click create to create a new user.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_22-1744874906627.png" style="width: 691px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251796i2E238D0353BFEA2F/image-dimensions/691x533?v=v2" width="691" height="533" role="button" title="henri_hosang_22-1744874906627.png" alt="henri_hosang_22-1744874906627.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The Database Analysis User starts with “DWCDBUSER#” and you have to provide a custom suffix for the user. Additionally enable Space Schema Access to also consume data that is available in the spaces of your datasphere tenant. Click Create&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_23-1744874906629.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251795i674753DA0E6C5D3E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="henri_hosang_23-1744874906629.png" alt="henri_hosang_23-1744874906629.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After the user is created the database Host Name, Port, Password and Username are displayed. Copy all four credentials, as they are needed to log into the HANA cloud. In difference to OAuth Client used for the CLI and OData API you can simply request a new password for this user if you lose the old one.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_24-1744874906631.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251798i437E808F6798C8E6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="henri_hosang_24-1744874906631.png" alt="henri_hosang_24-1744874906631.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;That is the setup for now if you want to access the HANA Cloud via the HANA Cockpit or HANA Database Explorer. To consume data in Datasphere, the HANA Database Explorer can be used. Open your HANA Database explorer (e.g. via Space Management -&amp;gt; Edit -&amp;gt; Database Access -&amp;gt; Select a Database User -&amp;gt; Open Database Explorer). To use the created Database Analysis user the HANA Database Instance has to be added again with the analysis user. Click on the “+” sign in the upper left corner, select SAP HANA Database as Instance type and paste the credentials from the user creation.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_25-1744874906637.png" style="width: 781px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251799iC5DDD10759A9206F/image-dimensions/781x603?v=v2" width="781" height="603" role="button" title="henri_hosang_25-1744874906637.png" alt="henri_hosang_25-1744874906637.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You see the added connection in the upper left section of the HANA Database Explorer. The explorer helps you by automatically creating Select statements. To find an element to consume open the Instance and the Catalog Option. Choose Tables to consume Tables or Views to consume Views. By default, all Tables / Views from all schemas are shown. You can search for a specific Table / View or filter by schema. The schema option shows all schemas available on the HANA Cloud, but you can simply search for the name of one of your spaces that holds the object you want to consume.&lt;/P&gt;&lt;P&gt;In this example I select the table SalesOrders_TestUpload by selecting Tables from the catalog and filtering for my Space schema COE_EMEA_DW_DM and searching for test. By right clicking the table you have multiple options. To just consume the data via OpenSQL click “Generate SELECT Statement” and execute the statement. Data will be shown.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_26-1744874906648.png" style="width: 725px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251800iC069FFC73A363BED/image-dimensions/725x560?v=v2" width="725" height="560" role="button" title="henri_hosang_26-1744874906648.png" alt="henri_hosang_26-1744874906648.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Instead of using the HANA Database Explorer you can also consume data in the HANA Cloud from any other Database client (e.g. DBeaver) or from a scripting language like Python by defining a connection to that HANA Database. To consume assets from Python you first need to allowlist your environment’s external IP address. Go to System -&amp;gt; Configuration -&amp;gt; IP Allowlist -&amp;gt; Trusted IPs and add your external IP address. You can get your external IP Address by running the command &lt;EM&gt;curl ifconfig.me&lt;/EM&gt; on Linux/macOS or opening a website like &lt;A href="https://ifconfig.me/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://ifconfig.me/&lt;/A&gt;. If you are using a VPN client, investigate the settings of your client and check if the external IP address is provided there. For testing IP range 0.0.0.0/0 can be used.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="henri_hosang_27-1744874906661.png" style="width: 728px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251801i557AF390F7D20854/image-dimensions/728x562?v=v2" width="728" height="562" role="button" title="henri_hosang_27-1744874906661.png" alt="henri_hosang_27-1744874906661.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then install the hdbcli extension module for Python. This defines the necessary API specification to directly send SQL queries to the HANA Cloud. You can find the documentation here: &lt;A href="https://pypi.org/project/hdbcli/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://pypi.org/project/hdbcli/&lt;/A&gt; and install it in the command line via the command:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;$ pip install hdbcli&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In a new Python file import the dbapi from hdbcli and define the connection with the four credentials from the Database Analysis user similarly to the HANA Database Explorer. Write a SQL command or copy the one generated from the HANA Database Explorer and execute it. Finally, run &lt;EM&gt;cursor.fetchall()&lt;/EM&gt; to get a row-by-row result. Here is the full code&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;from hdbcli import dbapi	

conn = dbapi.connect(
    address="&amp;lt;HANA host&amp;gt;", 
    port=443, 
    user="DWCDBUSER#&amp;lt;suffix&amp;gt;", 
    password="&amp;lt;DB Analysis User Password&amp;gt;",
)

sql = 'SELECT * FROM "COE_EMEA_DW_DM"."SalesOrders_TestUpload"'
cursor = conn.cursor()
cursor.execute(sql)
cursor.fetchall()&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Certainly, you can now start creating more complex SQL statements or working with the result set by e.g. passing the &lt;EM&gt;fetchall()&lt;/EM&gt; command into a pandas DataFrame. As shown in the What? Section there are many more possibilities when working with the HANA Open SQL schema, like running SQL script procedures in Task Chains or executing HANA machine learning algorithms that are beyond this introductory blog post. Take a look at the articles linked in the What? Section to get you started with additional scenarios.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--1412994838"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;That’s it for this introduction to external access to Datasphere. By now you should have a good understanding of all the major ways to interact with Datasphere from tools like the CLI; Postman and Python. As mentioned in the beginning Replication Flows, OData and the ODBC/JDBC connection can also directly be used by 3rd party application to retrieve data from Datasphere. This was not part of this blog post as the configuration differs between all the possible targets. There is extensive documentation and there are many community blogs available to explain application specific setups.&lt;/P&gt;&lt;P&gt;If you have questions or noticed a scenario I didn’t cover, feel free to leave a comment below the blog post.&lt;/P&gt;&lt;P&gt;Cheers, Henri&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/ba-p/14078591"/>
    <published>2025-04-22T10:55:27.647000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-standard-api-post-vs-patch/ba-p/14084248</id>
    <title>SAP Standard API POST vs PATCH</title>
    <updated>2025-04-24T13:35:36.333000+02:00</updated>
    <author>
      <name>D1V4KAR</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1887278</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1838318252"&gt;Integrating Business Partner Data: When to POST vs PATCH in SAP Standard APIs&lt;/H3&gt;&lt;P class=""&gt;In the world of SAP S/4HANA integrations, the Business Partner (BP) object plays a crucial role. It acts as a unified master data hub, representing entities like customers, vendors, and contacts — combining roles, addresses, communication details, and more into a single, streamlined structure.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="D1V4KAR_0-1745394556054.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/253895i259430A8D2D0CC5B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="D1V4KAR_0-1745394556054.png" alt="D1V4KAR_0-1745394556054.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;In our scenario, Business Partner data is sourced from an external MDM system (like MDMHUB) and sent to SAP S/4HANA using standard OData APIs. The goal? Seamlessly support both the creation of new BP entities and updates to existing ones — using &lt;STRONG&gt;POST&lt;/STRONG&gt; and &lt;STRONG&gt;PATCH&lt;/STRONG&gt; respectively.&lt;/P&gt;&lt;H3 id="toc-hId-1641804747"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-1445291242"&gt;So, what's the challenge?&lt;/H3&gt;&lt;P class=""&gt;With PATCH, things get a bit more complex. Unlike POST, where you're simply creating new records, PATCH allows for partial updates — and each segment of the Business Partner (e.g., address, role, bank data) can require a &lt;STRONG&gt;different operation&lt;/STRONG&gt;. That means the integration logic has to decide &lt;STRONG&gt;at runtime&lt;/STRONG&gt; whether to create or update each part of the BP structure&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="D1V4KAR_1-1745394627064.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/253896iC82917971E9F64BB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="D1V4KAR_1-1745394627064.png" alt="D1V4KAR_1-1745394627064.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1248777737"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-1052264232"&gt;Handling Operations Dynamically&lt;/H3&gt;&lt;P class=""&gt;To make this work smoothly, the integration begins by looking up the current state of the Business Partner in SAP. Based on that, a hashset is built — capturing existing entities and their attributes. This acts as a reference point to determine whether incoming data from MDM should trigger a POST (create) or PATCH (update) operation.&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;Below is the code for creating the HashSet and saving it as a property:&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;def void setHash(String[] input,String[] setName, Output output, MappingContext context) {
        HashSet&amp;lt;String&amp;gt; localSet = new HashSet&amp;lt;&amp;gt;();
        
        for(String inp:input){
            localSet.add(inp);
        }
        context.setProperty(setName[0],localSet);
        output.addValue("0");
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="D1V4KAR_2-1745395055941.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/253907iA446BE3DC40EF033/image-size/medium?v=v2&amp;amp;px=400" role="button" title="D1V4KAR_2-1745395055941.png" alt="D1V4KAR_2-1745395055941.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-855750727"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-659237222"&gt;Keeping it clean with batch processing&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="D1V4KAR_4-1745395124862.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/253910iA4AB2C9243A6FA66/image-size/medium?v=v2&amp;amp;px=400" role="button" title="D1V4KAR_4-1745395124862.png" alt="D1V4KAR_4-1745395124862.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;All of this is wrapped into a single batch request using change sets. This approach offers a few big wins:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;Groups related operations into one transactional unit&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Reduces the number of API calls&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Simplifies error handling by tying related updates together&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-462723717"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-266210212"&gt;POST vs PATCH&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="D1V4KAR_5-1745395224311.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/253911i4DF05AF268B0EAC2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="D1V4KAR_5-1745395224311.png" alt="D1V4KAR_5-1745395224311.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In complex data structures like SAP Business Partner, entities are often interdependent—such as roles, addresses, and contact details. A static approach to handling operations could lead to duplicate records, update failures, or inconsistent data states. Implementing dynamic method determination using lookups and hashsets ensures that only necessary changes are made, reduces load on the system, and prevents unnecessary API failures. This handling becomes especially important when processing high volumes of data or when operating in real-time scenarios.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Divakar.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-standard-api-post-vs-patch/ba-p/14084248"/>
    <published>2025-04-24T13:35:36.333000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-data-flow-scripts-and-generic-odata-unpacking-nested-values/ba-p/14085615</id>
    <title>SAP Datasphere - Data flow scripts and generic OData - Unpacking nested values</title>
    <updated>2025-04-29T18:56:12.923000+02:00</updated>
    <author>
      <name>clsorensen911</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/768390</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1580186353"&gt;Introduction&lt;/H1&gt;&lt;P&gt;SAP Datasphere is subset of the new SAP Business Data Cloud offering, which aims to&amp;nbsp;&lt;SPAN&gt;enables every data professional to deliver seamless and scalable access to mission-critical business data.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Datasphere offers a host of connectors to all kinds of sources, SAP and non-SAP alike. One of the most versatile is the "Generic OData" connection, which allows consumption of a wide range of sources.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In this blog, we will see how we can utilize the Data Flow feature to consume complex OData responses.&amp;nbsp;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: This is a rather niche guide to the Script Operator in Data Flows. If you were looking for more high-level information, I would recommend the official &lt;A title="SAP Datasphere" href="https://help.sap.com/docs/SAP_DATASPHERE?locale=en-US&amp;amp;state=PRODUCTION&amp;amp;version=cloud" target="_self" rel="noopener noreferrer"&gt;SAP Datasphere Documents&lt;/A&gt;, or the &lt;A title="Datasphere Blogs" href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" target="_blank"&gt;Datasphere tag&lt;/A&gt; to browse blog posts.&lt;/P&gt;&lt;H2 id="toc-hId-1512755567"&gt;Summary&lt;/H2&gt;&lt;P&gt;The Generic OData connector in Datasphere can't "flatten" a nest structure, and will end up storing nested structures as strings. The script operator in Data Flows allows developers to handle complex OData entities with Python, but can be an cumbersome to say the least.&lt;/P&gt;&lt;P&gt;Your best option is to consider some sort of middleware or integration platform between the source and Datasphere, that better allows you to handle OData entities better.&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1316242062"&gt;Prerequisites&amp;nbsp;&lt;/H2&gt;&lt;P&gt;If you want to follow along, you will need:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Access to a Datasphere Tenant&lt;/LI&gt;&lt;LI&gt;Access to a development space, and the correct authorizations.&lt;/LI&gt;&lt;LI&gt;A basic idea of Datasphere objects: &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/e30fd1417e954577baae3246ea470c3f.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Data Flows&lt;/A&gt; and &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/2509fe4d86aa472b9858164b55b38077.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Local Tables&lt;/A&gt;&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;An OData source (I will use the &lt;A href="https://www.odata.org/odata-services/" target="_self" rel="nofollow noopener noreferrer"&gt;OData.org reference services&lt;/A&gt;, so you should be able to reproduce the results)&lt;/LI&gt;&lt;LI&gt;An understanding of the Python module Pandas, and dataframes&lt;/LI&gt;&lt;LI&gt;A deep and seething hate for &lt;A href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener nofollow noreferrer"&gt;Regular Expressions&lt;/A&gt;, but still see their value. I also hate regular expressions.&amp;nbsp;&amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-1119728557"&gt;Disclaimer: I don't like this solution any more than you do&lt;/H2&gt;&lt;P&gt;I want to be transparent going into this: I don't think this is a very good or elegant solution.&amp;nbsp;&lt;BR /&gt;In an ideal world, I would prefer some sort of integration platform, CIP or something else, between the OData service and Datasphere to correctly unpack and transform the data.&lt;/P&gt;&lt;P&gt;If you don't have that, you may consider the following.&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1052297771"&gt;Step 1: Establish the connections&lt;/H3&gt;&lt;P&gt;In your development space, you can set up a connection to the services.&lt;BR /&gt;OData.org exposes both V2 and V4 OData services.&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.odata.org/odata-services/" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_4-1745567846542.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254591i969AF0AB2B35924E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1745567846542.png" alt="clsorensen911_4-1745567846542.png" /&gt;&lt;/span&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Clicking on the service will provide you with the service URL:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1745567909646.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254593iE44C15201DAC008C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_5-1745567909646.png" alt="clsorensen911_5-1745567909646.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In Datasphere, create a Generic OData Connection:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_6-1745567997899.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254594i86FCC2E74E0FD386/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_6-1745567997899.png" alt="clsorensen911_6-1745567997899.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-855784266"&gt;Step 2: Consume /Suppliers in a Data Flow&lt;/H3&gt;&lt;P&gt;Add the /Suppliers to a new Data Flow and preview the data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_8-1745568141294.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254604i6ED788F3A604C5B8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_8-1745568141294.png" alt="clsorensen911_8-1745568141294.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; You may get an error, that the source tables is not "Deployed".&amp;nbsp;&lt;BR /&gt;If you do, deploy the table and preview the data again.&lt;/P&gt;&lt;H3 id="toc-hId-659270761"&gt;Step 3 (Optional) : Understanding the problem&lt;/H3&gt;&lt;P&gt;If you try to consume the service in a service like postman, or just through a Python request, you will get the following JSON response:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_9-1745569294082.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254617iFF6ADE4266634691/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_9-1745569294082.png" alt="clsorensen911_9-1745569294082.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You can see that there are two dictionaries here. &lt;STRONG&gt;Properties&lt;/STRONG&gt;, which contain the keys (1) ID, (2) Name, (3) Address, and (4) Concurrency, and&amp;nbsp;then another under&amp;nbsp;&lt;STRONG&gt;Address&lt;/STRONG&gt;, which contains Street, City, State, ZipCode and Country.&amp;nbsp;&lt;/P&gt;&lt;P&gt;There are many ways to interpret this data, but the easiest would be to unpack it into the following table:&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;ID&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_Street&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_City&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_State&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_ZipCode&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Country&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Concurrency&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="12.5%"&gt;0&lt;/TD&gt;&lt;TD width="12.5%"&gt;Exotic Liquids&lt;/TD&gt;&lt;TD width="12.5%"&gt;NE 228th&lt;/TD&gt;&lt;TD width="12.5%"&gt;Sammamish&lt;/TD&gt;&lt;TD width="12.5%"&gt;WA&lt;/TD&gt;&lt;TD width="12.5%"&gt;98074&lt;/TD&gt;&lt;TD width="12.5%"&gt;USA&lt;/TD&gt;&lt;TD width="12.5%"&gt;0&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;As you can see,&amp;nbsp;&lt;STRONG&gt;Address&lt;/STRONG&gt; is unpacked into it's four columns, and we get a lovely, simple table.&amp;nbsp;&lt;/P&gt;&lt;P&gt;However, the table deployed in Step 2, in Datasphere looks like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_10-1745569839164.png" style="width: 661px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254625i429F5CFCFAA5878F/image-dimensions/661x76?v=v2" width="661" height="76" role="button" title="clsorensen911_10-1745569839164.png" alt="clsorensen911_10-1745569839164.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Which is an absolute nightmare. Extracting the data in SQL views (graphical or otherwise) will be substring-hell, as there are no JSON interpreters in the &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/6d624a1956234d818d0bfdc77cbd0e09.html" target="_blank" rel="noopener noreferrer"&gt;HANA SQLScript&lt;/A&gt;.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-462757256"&gt;Step 4: Add a Script Operator&lt;/H3&gt;&lt;P&gt;Alright, now let's transform the data with a Python Script.&lt;/P&gt;&lt;P&gt;Firstly, add a script to your canvas and connect the source.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_11-1745570218358.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254627i1918836127D4C53D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_11-1745570218358.png" alt="clsorensen911_11-1745570218358.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-266243751"&gt;Step 5: Add the new columns to the script operator&lt;/H3&gt;&lt;P&gt;The schema of the script operator is not dynamic. That means you will need to manually add the required columns to the operator:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_12-1745570438828.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254629i7F58289C817D7A75/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_12-1745570438828.png" alt="clsorensen911_12-1745570438828.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-69730246"&gt;Step 6: Reorder the columns&lt;/H3&gt;&lt;P&gt;The absolute 'funniest' quirk is that the output of the script is based on the order of the columns, not the names / keys.&lt;/P&gt;&lt;P&gt;That means, if your resulting DataFrame has this schema:&lt;/P&gt;&lt;TABLE border="1"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;ID&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_Street&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_City&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_State&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Address_ZipCode&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Country&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.5%"&gt;&lt;STRONG&gt;Concurrency&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;The columns must be in the same order.&lt;BR /&gt;Otherwise the value of ID will be written to the "State" column.&lt;BR /&gt;Fun stuff &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Drag and drop until your columns are in the required order:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_13-1745570864565.png" style="width: 312px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254631i622C8396EE452FF3/image-dimensions/312x255?v=v2" width="312" height="255" role="button" title="clsorensen911_13-1745570864565.png" alt="clsorensen911_13-1745570864565.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; This problem may very well be solved in the future, or it may be working-as-designed and always just be a massive pain in the donkey.&lt;/P&gt;&lt;H3 id="toc-hId--202014628"&gt;Step 7: Let's code away!&lt;/H3&gt;&lt;P&gt;Alrighty, so now we have the setup in place, we can begin to create a &lt;A title="SAP Documentation - Python Script in Data Flows" href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/f3e2570966ac4036b552ebd998274af1.html" target="_blank" rel="noopener noreferrer"&gt;Python script&lt;/A&gt; to solve our problem.&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--691931140"&gt;Script goals&lt;/H4&gt;&lt;P&gt;The Script, in simple terms, have to do two things:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Take the JSON string from the input, and convert it to a dictionary or a list of dictionaries.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Read the values from the result of step 1 and write them to the dataframe.&amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;H4 id="toc-hId--888444645"&gt;Limitations&lt;/H4&gt;&lt;P&gt;However, the Python Environment in Datasphere is highly restricted and does not allow for additional imports.&amp;nbsp;&lt;BR /&gt;At the time of writing, the following libraries are supported:&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;time&lt;/LI&gt;&lt;LI&gt;dateutil.parser&lt;/LI&gt;&lt;LI&gt;datetime&lt;/LI&gt;&lt;LI&gt;calendar&lt;/LI&gt;&lt;LI&gt;random&lt;/LI&gt;&lt;LI&gt;math&lt;/LI&gt;&lt;LI&gt;re&lt;/LI&gt;&lt;LI&gt;Pandas (except I/O, like read_csv, write csv, ect.)&lt;/LI&gt;&lt;LI&gt;Numpy (Except I/O like read_file, from_file ect.)&lt;/LI&gt;&lt;LI&gt;buildints (Except I/O like print, breakpoint, input, open, import, exec, eval, ect.)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;You can see the full list of supported and disabled features in &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/c8a54ee704e94e15926551293243fd1d/73e8ba1a69cd4eeba722b458a253779d.html" target="_blank" rel="noopener noreferrer"&gt;the documentation&lt;/A&gt;.&lt;/P&gt;&lt;H4 id="toc-hId--1084958150"&gt;Step 7.1: The code editor&lt;/H4&gt;&lt;P&gt;The base code editor looks like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1745572477575.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254646i440F7E2DC8917AAD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1745572477575.png" alt="clsorensen911_0-1745572477575.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As your may notice, the script takes the form of a function - Transform - that takes one variable: data. The source data will be read just like you see it in the Data Preview, as a Pandas DataFrame called 'data'.&amp;nbsp;&lt;BR /&gt;A section has been marked in two strings of #, which is where you will add your code.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&amp;nbsp;&lt;/STRONG&gt;At the time of writing, the editor has no code-completion, any sort of help or utilities, and does not allow you to place breakpoints or write an output to the console - or anywhere.&amp;nbsp;&lt;BR /&gt;This makes debugging extremely tedious.&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--1281471655"&gt;Step 7.2: Script - Convert string to a Dictionary or List object.&lt;/H4&gt;&lt;P&gt;The JSON data is stored in Datasphere as a string, and we have to transform that without the JSON module, which would make the exercise trivial.&amp;nbsp;&lt;/P&gt;&lt;P&gt;So, will do the following:&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Find all the 'key' : 'value' pairs in the data - make sure we can also handle nested dictionaries.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Loop through the pairs and add them to a dictionary.&amp;nbsp;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;To accomplish step 1, we will use regular expressions that can identify the pairs. The following formats are supported:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;'Key' : 'Value' (both with and without whitespaces around the : is supported)&lt;/LI&gt;&lt;LI&gt;"key" : "Value"&amp;nbsp;(both with and without whitespaces around the : is supported)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;That is, whether your data uses ' or " is okay.&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;r'["\'](\w+)["\']\s*:\s*(\{.*?\}|["\'].*?["\']|\d+)'&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Yes, I know it looks like a pocket-calculator having a stroke, but it works.&amp;nbsp;&lt;BR /&gt;You can use the &lt;A title="Test the Regex for yourself" href="https://www.regextester.com/?fam=155663#" target="_blank" rel="noopener nofollow noreferrer"&gt;regex-tester&lt;/A&gt; to play around with it for yourself.&lt;/P&gt;&lt;P&gt;Python allows a function to be defined within another function, so we can begin to package our logic into a function.&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def process_dict(dict_str):
    # Assume the input string is a dictionary and parse it
    key_val_pattern = r'["\'](\w+)["\']\s*:\s*(\{.*?\}|["\'].*?["\']|\d+)'  # Matches key-value pairs, supporting ' and "
    matches = re.findall(key_val_pattern, dict_str)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The Variable "matches" will contain a list of all the pairs in the input.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Now, we can loop through the matches and create our dictionary:&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def process_dict(dict_str) -&amp;gt; dict:
    # Assume the input string is a dictionary and parse it
    key_val_pattern = r'["\'](\w+)["\']\s*:\s*(\{.*?\}|["\'].*?["\']|\d+)'  # Matches key-value pairs, supporting ' and "
    matches = re.findall(key_val_pattern, dict_str)
    
    parsed_dict = {}
    for key, value in matches:
        # Loop through and sotres keys as lower case, to support case-sentitivity. 
        if value.startswith('{'):  # If the value is a nested dictionary
            # Recursively process the nested dictionary
            parsed_dict[str(key).lower()] = process_dict(value)
        elif value.startswith('"') or value.startswith("'"):  # If the value is a string. 
            parsed_dict[str(key).lower()] = value.strip('"').strip("'")  # Remove quotes (either ' or ")
    
    return parsed_dict&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt; in line 9, we which for a nested dictionary and recursively handle that.&amp;nbsp;&lt;/P&gt;&lt;P&gt;If we pass this string&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;"{'ID': 0, 'Name': 'Exotic Liquids', 'Address': { 'Street': 'NE 228th', 'City': 'Sammamish', 'State':  WA', 'ZipCode': 98074, 'Country': 'USA' }, 'Concurrency': 0 }"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;We will get the following result:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{'id': 0, 'name': 'Exotic Liquids', 'address': { 'street': 'NE 228th', 'city': 'Sammamish', 'state':  WA', 'zipcode': 98074, 'country': 'USA' }, 'concurrency': 0 }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Which we can then use to get the data we need.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The full script also contains handling for a list of dictionaries.&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId--1477985160"&gt;Step 7.3: Add the data to the DataFrame&lt;/H4&gt;&lt;P&gt;Now that you have your data in a variable, you can manipulate the DataFrame.&lt;/P&gt;&lt;P&gt;There is an infinite way of implementing this, but the most readable is a new function that uses the one above, and extracts the required info column by column.&amp;nbsp;&lt;BR /&gt;There are faster ways, but for the sake of the example, readability &amp;gt; speed.&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def get_address_data(row, newcolumn : str):
    address = row["Address"]
    address_info = process_dict(address)
    return_value = address_info["address"].get(newcolumn.lower(),'')
    return return_value

data["State"] = data.apply(lambda row: get_address_data(row, "State"), axis = 1)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In line 7, we create a new column, State and pass the entire row, and a value we want out.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Python now&amp;nbsp;iterates through the dataframe and applies the function.&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--1381095658"&gt;Step 8: The full script&lt;/H3&gt;&lt;P&gt;The full script will then look like this.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;def transform(data):
    """
    This function body should contain all the desired transformations on incoming DataFrame. Permitted builtin functions
    as well as permitted NumPy and Pandas objects and functions are available inside this function.
    Permitted NumPy and Pandas objects and functions can be used with aliases 'np' and 'pd' respectively.
    This function executes in a sandbox mode. Please refer the documentation for permitted objects and functions. Using
    any restricted functions or objects would cause an internal exception and result in a pipeline failure.
    Any code outside this function body will not be executed and inclusion of such code is discouraged.
    :param data: Pandas DataFrame
    :return: Pandas DataFrame
    """
    #####################################################
    def parse_string_to_list(data_str):
        result_list = []
        if ( data_str in ['','-','NULL',None] ):
            return result_list
        # Check if the string represents a list
        if data_str.startswith('['):
            # Extract individual elements of the list using regex
            # Matches nested dictionaries or flat dictionaries
            list_pattern = r'\{[^{}]*\{[^{}]*\}[^{}]*\}|\{[^{}]*\}'  
            list_items = re.findall(list_pattern, data_str)
        else:  
        # If it's not a list, treat the whole string as a single dictionary
            list_items = [data_str]

        # Step 2: Process each item in the list (or the single string)
        for item in list_items:
            result_list.append(process_dict(item))

        return result_list

    def process_dict(dict_str) -&amp;gt; dict:
        # Assume the input string is a dictionary and parse it
        key_val_pattern = r'["\'](\w+)["\']\s*:\s*(\{.*?\}|["\'].*?["\']|\d+)'  # Matches key-value pairs, supporting ' and "
        matches = re.findall(key_val_pattern, dict_str)
        
        parsed_dict = {}
        for key, value in matches:
            # Loop through and sotres keys as lower case, to support case-sentitivity. 
            if value.startswith('{'):  # If the value is a nested dictionary
                # Recursively process the nested dictionary
                parsed_dict[str(key).lower()] = process_dict(value)
            elif value.startswith('"') or value.startswith("'"):  # If the value is a string. 
                parsed_dict[str(key).lower()] = value.strip('"').strip("'")  # Remove quotes (either ' or ")
        
        return parsed_dict

    def get_address_data(row, newcolumn : str):
        # Get the value of the "Address" column
        address = row["Address"]
        # Process the input and read the first element of the list
        address_info = parse_string_to_list(address)[0]
        # get the requested value, and return an empty-string 
        return_value = address_info["address"].get(newcolumn.lower(),'')
        
        return return_value

    data["State"] = data.apply(lambda row: get_address_data(row, "State"), axis = 1)
    data["Zip"] = data.apply(lambda row: get_address_data(row, "zipcode"), axis = 1)
    data["Street"] = data.apply(lambda row: get_address_data(row, "Street"), axis = 1)
    data["Country"] = data.apply(lambda row: get_address_data(row, "Country"), axis = 1)
    data["City"] = data.apply(lambda row: get_address_data(row, "City"), axis = 1)
    #####################################################
    return data&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId--1577609163"&gt;Step 9: Add or select target table and run the Data Flow&lt;/H3&gt;&lt;P&gt;When you've added a target local table, you can run the data flow, and you should get the following result:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_2-1745577716495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/254682iEFC7984C2BFEDC4C/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_2-1745577716495.png" alt="clsorensen911_2-1745577716495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--1480719661"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;The support for nested OData entities, and python code, in Datasphere is lacking, and will hopefully be expanded greatly in the future.&amp;nbsp;&lt;BR /&gt;Whether you have the option to directly change the OData source, or you are using a public service, you should really consider some sort of middleware between the source and Datasphere.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Until then, you do have the option to manually transform JSON, stored as strings, in Datasphere, but this can be a massive headache.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-data-flow-scripts-and-generic-odata-unpacking-nested-values/ba-p/14085615"/>
    <published>2025-04-29T18:56:12.923000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-exporting-modeling-objects-to-csv-files-for/ba-p/14087080</id>
    <title>SAP Datasphere CLI &amp; Python: Exporting Modeling Objects to CSV Files for Each Artifact</title>
    <updated>2025-04-29T18:57:17.498000+02:00</updated>
    <author>
      <name>vikasparmar88</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1528256</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1382837983" id="toc-hId-1580240381"&gt;Introduction&lt;/H1&gt;&lt;P&gt;In this blog post, we'll explore how to use Python alongside SAP Datasphere CLI to extract modeling objects and export them to CSV files. The script allows users to handle artifacts such as remote tables, views, replication flows, and more, for each space in SAP Datasphere.&lt;BR /&gt;This solution is particularly useful for automating repetitive tasks and ensuring structured data handling across different modeling objects&lt;/P&gt;&lt;P&gt;&lt;FONT size="5" color="#000000"&gt;&lt;STRONG&gt;Prerequisites&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Steps to install SAP Datasphere CLI:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/bc-p/14086942#M180986/" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/bc-p/14086942#M180986/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5" color="#000000"&gt;&lt;STRONG&gt;Step-by-Step Process&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Prepare Login.Json file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create OAuth Client with Purpose as Interactive Usage and Redirect URL as &lt;EM&gt;&lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Retrieve the necessary field values for the secret JSON file by running the following command.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;datasphere config secrets show&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Prepare the Login_&amp;lt;TENANT&amp;gt;_DSP.json file for both DEV and PRD Tenants.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "client_id": "",
    "client_secret": "",
    "authorization_url": "",
    "token_url": "",
    "access_token": "",
    "refresh_token": "",
    "host": "",
    "browser": ""
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;Step 2: Create Model_Object.py file with below code&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;!--  StartFragment   --&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;dsp_host&lt;/STRONG&gt; – Provide the URL for both DEV and PRD Datasphere tenants.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;secrets_file&lt;/STRONG&gt; – Specify the path to the Login_&amp;lt;TENANT&amp;gt;_DSP.json file.&lt;!--  EndFragment   --&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import subprocess
import pandas as pd
import sys
import json

def login_to_datasphere(Tenant):
    """
    Step 1: Logs into Datasphere using the appropriate credentials based on the tenant.
    - If `Tenant` is 'PRD', it uses production credentials.
    - Otherwise, it uses quality assurance credentials.
    - It also ensures the session is fresh by logging out first.
    """
    if Tenant == 'PRD':
        dsp_host = '&amp;lt;PRD URL&amp;gt;'
        secrets_file = '&amp;lt;PATH&amp;gt;/Login_PRD_DSP.json'
    else:
        dsp_host = '&amp;lt;DEV URL&amp;gt;'
        secrets_file = '&amp;lt;PATH&amp;gt;/Login_Q_DSP.json'

    # Logout first to ensure a fresh session
    subprocess.run("datasphere logout", shell=True)
    print(f'Set Host : datasphere config host set {dsp_host}')
    
    # Configure the Datasphere host based on the environment
    subprocess.run(f'datasphere config host set {dsp_host}', shell=True)
    
    # Perform login using the secrets file
    print(f'Login : datasphere login --host {dsp_host} --secrets-file {secrets_file}')
    subprocess.run(f'datasphere login --host {dsp_host} --secrets-file {secrets_file}', shell=True)
    
    print("Login to "+Tenant+" is successful")
        
    # Step 2: Retrieve and manage predefined modeling objects
    manage_Modeling_Object('spaces')
    manage_Modeling_Object('local-tables')
    manage_Modeling_Object('views')
    manage_Modeling_Object('analytic-models')
    manage_Modeling_Object('replication-flows')
    manage_Modeling_Object('remote-tables')
    manage_Modeling_Object('task-chains')
    manage_Modeling_Object('transformation-flows')
    manage_Modeling_Object('data-flows')
    manage_Modeling_Object('intelligent-lookups')
    manage_Modeling_Object('data-access-controls')

    return dsp_host  # Returning host info if needed in other operations


def fetch_modeling_objects(space_id, modeling_object="views", batch_size=200):
    """
    Step 4: Retrieves modeling objects using pagination.
    - Loops through available objects in batches of `batch_size` (default 200).
    - Uses Datasphere CLI commands to retrieve data dynamically.
    """

    all_objects = []  # List to store all retrieved modeling objects.
    skip = 0  # Offset for pagination, increasing in multiples of 200 to retrieve objects in batches.
    print(f"Checking {modeling_object.upper()} for space: {space_id.replace('"', '').replace(',', '')}")
    
    # Keep checking for objects unitil it return blank data
    while True:
       
        # Fetch modeling objects in batches using CLI
        command = f'datasphere objects {modeling_object} list --space {space_id} --top {batch_size} --skip {skip}'
        subprocess.run(command, capture_output=True, shell=True, text=True)
        result = subprocess.run(command, capture_output=True, shell=True, text=True)

        try:
            output = json.loads(result.stdout)
        except json.JSONDecodeError:
            print(f"Error decoding JSON: {result.stdout}")
            break

        if not output:
            break # Stop when no more objects are found
        
        # Clean the fetched data to write in csv file
        for obj in output:
            cleaned_flow = obj.get("technicalName", "").strip()
            all_objects.append({
                'Space ID': space_id,
                'Technical Name': cleaned_flow,
                'TYPE': modeling_object[:-1].upper()
            })

        skip += batch_size # Increment batch offset

    return all_objects

def manage_Modeling_Object(Modeling_Object):
    """
    Step 3: Retrieves all spaces in tenant.
    - Loops through available spaces and get the models for each space.
    - prepate csv file with all retrived data.
    """
    
    # Retrieve a list of all spaces in JSON format
    command = ['datasphere', 'spaces', 'list', '--json']
    result_spaces = subprocess.run(command, capture_output=True, shell=True, text=True)  # Run the command and capture output
    
    # Parse the list of spaces from the command's output
    spaces = result_spaces.stdout.splitlines()  # Split output into individual lines
    
    ModelingObject_data = []  # Initialize a list to store Modeling Object data
    
    # Check if the Modeling Object is 'spaces'
    if Modeling_Object == 'spaces':
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip().replace('"', '').replace(',', '')  # Extract space ID
            
            # Add space details to the data list
            ModelingObject_data.append({
                'Space ID': space_id.replace('"', '').replace(',', ''),
                'Technical Name': space_id.replace('"', '').replace(',', ''),
                'TYPE': Modeling_Object[:-1].upper()  # Set the TYPE as uppercase version of the input Modeling Object name
            })
    
    # Process Modeling Objects for each space
    else:
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip().replace('"', '').replace(',', '')  # Extract space ID
            
            # Get all the objects from the given space
            objects = fetch_modeling_objects(space_id, Modeling_Object)
            ModelingObject_data.extend(objects)
    
    # Write the collected data into a CSV file
    if ModelingObject_data:
        df = pd.DataFrame(ModelingObject_data)  # Create a DataFrame from the data list
        df.to_csv(Modeling_Object.upper()+'.csv', index=False)  # Save the DataFrame to a CSV file without the index
        print("Space vise all "+Modeling_Object.upper()+" have been written to "+Modeling_Object.upper()+".csv.")  # Log success message
    else:
        print("No Modeling Objects found.")  # Log message if no data was collected
    
    print('------------------------------------------------------------------------------------------------------------------------------------')  # Separator for readability
        
if __name__ == "__main__":
    # Check if two arguments are provided via the command line
    if len(sys.argv) &amp;gt; 1:
        Tenant = sys.argv[1]
        login_to_datasphere(Tenant)
    else:
        print("Please provide Tenant as argument.")  # Log error message if argument is missing&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Open command prompt and execute the Model_Objects.py file&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;python Model_Objects.py DEV&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vikasparmar88_0-1748408323008.png" style="width: 635px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/266738iDB3D90E2D1BE6874/image-dimensions/635x246?v=v2" width="635" height="246" role="button" title="vikasparmar88_0-1748408323008.png" alt="vikasparmar88_0-1748408323008.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the program execution is done it will generate CSV files for all the Datasphere artifactes mention in python code&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vikasparmar88_1-1745646877909.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/255124i2D0343903B2ECFC7/image-dimensions/633x280?v=v2" width="633" height="280" role="button" title="vikasparmar88_1-1745646877909.png" alt="vikasparmar88_1-1745646877909.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;!--  StartFragment   --&gt;&lt;/P&gt;&lt;P&gt;Each generated CSV file will contain three columns:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Space ID&lt;/STRONG&gt; – The name of the space.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Technical Name&lt;/STRONG&gt; – The exact technical name of the object.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt; – The category of the object (e.g., view, local-table, remote-table, replication flow, etc.)&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1383726876"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;This script demonstrates how Python and SAP Datasphere CLI can collaborate to streamline artifact management and export data systematically. By following the steps provided, users can extend or adapt the code to suit their requirements.&lt;/P&gt;&lt;P&gt;Best regards,&lt;BR /&gt;Vikas Parmar&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-exporting-modeling-objects-to-csv-files-for/ba-p/14087080"/>
    <published>2025-04-29T18:57:17.498000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/consuming-complex-datasphere-models/ba-p/14091196</id>
    <title>Consuming complex Datasphere models</title>
    <updated>2025-05-02T15:34:21.742000+02:00</updated>
    <author>
      <name>clsorensen911</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/768390</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1580986154"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp;is a part of the new &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Data+Cloud/pd-p/73554900100700003531" class="lia-product-mention" data-product="1249-1"&gt;SAP Business Data Cloud&lt;/a&gt;&amp;nbsp;offering, which&amp;nbsp;&lt;SPAN&gt;enables a business data fabric architecture that uniquely harmonizes mission-critical data across the organization.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;One prime feature of Datasphere is the semantically rich data model, that allows for deep structures of dimensions, hierarchies and transactional data.&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;The data models created in Datasphere can then be consumed for reporting by various tools, both SAP and non-SAP tools and used as the basis of reporting.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And while the "Single source of truth" is the cornerstone of enterprise reporting, the individual tools may interpret the data models differently.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1384472649"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-1187959144"&gt;Purpose&lt;/H1&gt;&lt;P&gt;My main objective in this blog is to show how different tools interprets an Analytical Model and what you may want to consider when building models.&amp;nbsp;&lt;/P&gt;&lt;P&gt;I will focus on the Analytical Model, rather than consumption models / perspective in this blog, because the end-result is the same, and the Analytical Model is the object that most people will first try to consume for reporting.&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-991445639"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-794932134"&gt;Basic concepts&lt;/H1&gt;&lt;P&gt;Before we dive in, I want to outline a few basic concepts that is important to understand the mechanisms at play. If you are already familiar with the concepts, you can skip this section.&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-727501348"&gt;Annotations&lt;/H2&gt;&lt;P&gt;With the introduction of CDS views, SAP introduced Annotations, which is a tool to semantically enri&lt;/P&gt;&lt;P&gt;ch a table or view with instructions for the analytical engine to interpret the data.&amp;nbsp;&lt;BR /&gt;While there are many, many different types of annotations, Datasphere primarily uses Consumption and Semantics.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Take the below, very simple table&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Material&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Quantity&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Sales Unit&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;MAT1&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;100&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;KG&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;MAT2&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;50&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;TON&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;We can add the following annotations to the table:&lt;/P&gt;&lt;TABLE border="1" width="44.44399699312715%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Column&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;CDS Annotation&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;Material&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;none&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;Quantity&lt;/TD&gt;&lt;TD width="33.333333333333336%"&gt;&lt;SPAN&gt;@Semantics.quantity.unitOfMeasure: 'Sales Unit'&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Sales Unit&lt;/TD&gt;&lt;TD&gt;&lt;SPAN&gt;@Semantics.unitOfMeasure: true&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;Which does nothing to the table definition itself, but we've told the engine that 'Quantity' and 'Unit' belong together.&lt;/P&gt;&lt;H2 id="toc-hId-530987843"&gt;Associations&lt;/H2&gt;&lt;P&gt;One of the, at least to me, best things that came with CDS views was 'associations'.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In short, an association between two tables allows the engine to fine-tune the query, based on what you need, without you having to join tables together.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Based on the associations and annotations, the analytical engine can dynamically navigate the underlaying objects to fit the demands of the user at runtime.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can read more about associations in the &lt;A href="https://help.sap.com/docs/SAP_HANA_PLATFORM/09b6623836854766b682356393c6c416/6fcd6e5883f04de5b618a6d91141afb4.html" target="_blank" rel="noopener noreferrer"&gt;SAP documentation&lt;/A&gt; or one of the many blog posts.&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-334474338"&gt;Semantic usage&lt;/H2&gt;&lt;P&gt;When modelling objects in Datasphere, you will have the option to mark a table or view with a semantic usage, which provides some higher level annotations to the object.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Datasphere allows for the following options&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Fact&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains one or more measures and attributes. A fact typically has associations pointing to one or more dimensions and is consumed by analytic models (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/30089bd2aa754ab996a62cf5842ae60a.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Fact to Contain Measurable Data&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Dimension&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes containing master data like a product list or store directory, and supporting hierarchies (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/5aae0e95361a4a4c964e69c52eada87d.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Dimension to Categorize Data&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Hierarchy&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes defining a parent-child hierarchy (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/dbac7a862b3744d8a71d268644aac389.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create an External Hierarchy for Drill-Down&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Hierarchy with Directory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;- Contains one or more parent-child hierarchies (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/36c39eee184c485a80ebce9d0fec49ec.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Hierarchy with Directory&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Text&lt;/SPAN&gt;&amp;nbsp;&lt;/STRONG&gt;- Contains attributes used to provide textual content in one or more languages (see&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://help.sap.com/doc/08efa53381dd4df397d2d97bc54aaa3b-ba1b1ae376294128866dbe95ef9d8f74/2025.8/en-US/b25726df116b463e97435ba720e48ac9.html?source=productlink-webassistant" target="_blank" rel="noopener noreferrer"&gt;Create a Text Entity for Attribute Translation&lt;/A&gt;).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Relational Dataset&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;- [default] Contains columns with no specific analytical purpose.&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-8878114"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId--187635391"&gt;Creating a complex data model&lt;/H1&gt;&lt;P&gt;When I use the word "complex", I don't mean&amp;nbsp;&lt;EM&gt;big&lt;/EM&gt; but&amp;nbsp;&lt;EM&gt;deep&lt;/EM&gt;. A data model can have a hundred dimensions, and still be pretty simple.&lt;/P&gt;&lt;P&gt;In this example, I've created a straight forward data model, which the following objects:&lt;/P&gt;&lt;TABLE border="1" width="66.66666666666667%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="30px"&gt;&lt;STRONG&gt;Semantic Usage&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Employee&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Fact&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Department&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Education&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Job Function&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Job Level&lt;/P&gt;&lt;/TD&gt;&lt;TD width="33.333333333333336%" height="50px"&gt;&lt;P&gt;Dimension&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;The main object in this data model is the employee, which has several attributes: (1) They belong to a&amp;nbsp;&lt;STRONG&gt;department&lt;/STRONG&gt;, have an (2)&amp;nbsp;&lt;STRONG&gt;education&lt;/STRONG&gt;, and a (3)&amp;nbsp;&lt;STRONG&gt;job function&lt;/STRONG&gt;.&amp;nbsp;&lt;BR /&gt;In addition, each job function has another property: (4) &lt;STRONG&gt;job level&lt;/STRONG&gt;, which indicates if it is a management position.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can see the relationship in a graphical representation here:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746097686600.png" style="width: 615px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256833i1995603F9A6BC3DE/image-dimensions/615x288?v=v2" width="615" height="288" role="button" title="clsorensen911_0-1746097686600.png" alt="clsorensen911_0-1746097686600.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When I say "complex" data model, this is what I mean: Some dimensions have no direct link to the main object - as you might have in a star schema - but can still be consumed.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In a real world scenario, you can imagine an almost infinite amount of levels and data links.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Imagine, for instance that we extended the "Education" dimension with the following extra fields: (1) Level (Bachelor, master, PhD, ect.) which also needs it one text, (2) area of study (such as engineering, finance, accounting, etc.), (3) completion date, (4) school of graduation, which may be a whole other dimension all by itself.&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can imagine how quickly we can add layers to a data model, which might technically be "correct" in a data modelling sense, but can present other problems, as we can see shortly.&amp;nbsp;&lt;/P&gt;&lt;P&gt;When we create our Analytical Model, we have the option to select the associations we want from our "Fact" object.&lt;/P&gt;&lt;P&gt;Take note of a few things here:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Some of the fields are marked with a cube, which marks them as a Dimension (See the red squares).&lt;/LI&gt;&lt;LI&gt;All the dimensions have a "T" on their line, meaning that the dimension contains both key and text&lt;/LI&gt;&lt;LI&gt;Notice the "Date" dimension has a little stair / hierarchy icon as well, meaning that the association also comes with a hierarchy.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746098768582.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256835iD3CEE4C46971AC04/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746098768582.png" alt="clsorensen911_0-1746098768582.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you saw above, our "Job Function" dimension have attributes of it's own, so we can choose that and see that it has two attributes, but only one of them is a dimension:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_1-1746099009858.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256836i720DC42D6445FA0C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_1-1746099009858.png" alt="clsorensen911_1-1746099009858.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The final analytical model looks like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746098503796.png" style="width: 584px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256834iA7E7BDC0A8EBAE30/image-dimensions/584x333?v=v2" width="584" height="333" role="button" title="clsorensen911_0-1746098503796.png" alt="clsorensen911_0-1746098503796.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-385591187"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId-189077682"&gt;Consuming the Analytical Model&lt;/H1&gt;&lt;P&gt;As promised, we shall now see how the Analytical model can be consumed with all the semantic enrichment. I will go through the following tools:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;SAP Analytics Cloud via a Live Connection&lt;/LI&gt;&lt;LI&gt;Microsoft Excel via an SAP Add-In&lt;/LI&gt;&lt;LI&gt;3rd Party tools via OData&lt;/LI&gt;&lt;/OL&gt;&lt;H3 id="toc-hId--594241837"&gt;Consumption in general&lt;/H3&gt;&lt;P&gt;I have skipped over a lot of different topics, so I would absolutely recommend the &lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/43509d67b8b84e66a30851e832f66911/d7d56284bb5148c887ac4054689bfbca.html" target="_blank" rel="noopener noreferrer"&gt;official documentation on consumption&lt;/A&gt; to see in more detail.&amp;nbsp;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--497352335"&gt;&lt;SPAN class=""&gt;SAP Analytics Cloud&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;via a Live Connection&lt;/H2&gt;&lt;P&gt;To be able to use this connection, you must have a user in both Datasphere and SAC, and have a working live connection &lt;SPAN&gt;(see&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" title="https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/ad4281e2875949f0b4d45d1072ff4c38.html" href="https://help.sap.com/docs/SAP_ANALYTICS_CLOUD/00f68c2e08b941f081002fd3691d86a7/ad4281e2875949f0b4d45d1072ff4c38.html" target="_blank" rel="noopener noreferrer"&gt;Live Data Connections to&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Datasphere&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;in the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Analytics Cloud&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;documentation)&lt;/SPAN&gt;.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When you create a story in SAC, or just edit an existing one, you have the option to add a data source:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746099574810.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256838i75B933D1157BFCFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_0-1746099574810.png" alt="clsorensen911_0-1746099574810.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;From here, you can see a subfolder called Datasphere. Select the correct Datasphere and Space:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_3-1746099689403.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256842i2468F722A1AADF05/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_3-1746099689403.png" alt="clsorensen911_3-1746099689403.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;And select your Model:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Choose Analytical Model" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256843iE60408AACC61B989/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746099789996.png" alt="Choose Analytical Model" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Choose Analytical Model&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You can now consume the model including all associations and metadata.&lt;BR /&gt;While there are a lot to explore, consider these two points:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746099862124.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256844iB3C3BEDBBB1DE98F/image-size/large?v=v2&amp;amp;px=999" role="button" title="clsorensen911_5-1746099862124.png" alt="clsorensen911_5-1746099862124.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;The attribute “Management” is available as a property under Job Function and can be used in modelling&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;While the actual data only contains 1, 2, 3 in the “Department” column, because we have created the association to texts in Datasphere, we can use the texts with no extra work.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Additionally, take note of the "Date" column, where we have both attributes&amp;nbsp;&lt;EM&gt;and&lt;/EM&gt; the hierarchy:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_6-1746100092211.png" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256845iFC5F35D9579CA5AF/image-size/small?v=v2&amp;amp;px=200" role="button" title="clsorensen911_6-1746100092211.png" alt="clsorensen911_6-1746100092211.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Which is absolutely fantastic!&amp;nbsp;&lt;BR /&gt;No objects are transferred to SAC, it just acts as a tunnel between Datasphere and the end-user.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, there is one problem. As you may have noticed, &lt;STRONG&gt;Job Level&lt;/STRONG&gt; is not visible as a property of "Job Function", whereas "Management" is.&amp;nbsp;"Job Level" appears as it's own dimension.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746100780173.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256847i0AF0430144C9131A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746100780173.png" alt="clsorensen911_0-1746100780173.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;SAC displays nested dimensions as their own entity, rather than related to "Job Function". Which may be perfectly alright, but might cause confusion for the people building the reports, that might not know the underlaying data model.&amp;nbsp;&lt;BR /&gt;Imagine you have some sales data with a ship-to and ship-from columns. Both of these might have an "Address" dimension, and may cause confusion.&amp;nbsp;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--693865840"&gt;Microsoft Excel via an SAP Add-In&lt;/H2&gt;&lt;P&gt;The SAP Analytics Cloud add-in (which is&amp;nbsp;&lt;EM&gt;not&lt;/EM&gt; the same as Analysis for Office), can simply be downloaded from the Microsoft Store.&amp;nbsp;&lt;/P&gt;&lt;P&gt;After installing, you can add the model to Excel, very similar to SAC:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_1-1746101662053.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256852i13EABEA5D5D9920B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_1-1746101662053.png" alt="clsorensen911_1-1746101662053.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And will interpret the metadata in the exact same way SAC does:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_2-1746101749130.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256854i72AFBF6E5EC58321/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_2-1746101749130.png" alt="clsorensen911_2-1746101749130.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="topic-title" id="toc-hId--890379345"&gt;3rd Party tools via an OData Service&lt;/H2&gt;&lt;P&gt;Non-SAP products, such as Power BI or Tableau, can consume the data from Datasphere through an OData service.&lt;/P&gt;&lt;H3 id="toc-hId--1380295857"&gt;Setup&lt;/H3&gt;&lt;P&gt;You can find other guides to help you set up a connection for your service of choice, but the setup in Datasphere is the same for all tools.&amp;nbsp;&lt;BR /&gt;I highly recommend&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/513684"&gt;@gustavokath&lt;/a&gt;&amp;nbsp;&lt;SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/connecting-sap-data-warehouse-cloud-odata-api-with-powerbi-via-a-blank/ba-p/13546615" target="_self"&gt;blogpost&lt;/A&gt; on the topic, which has all the information you need to set up your client.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId--1576809362"&gt;The OData request&lt;/H3&gt;&lt;P&gt;Datasphere allows you to build and preview an OData request from the Analytical Model builder:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_4-1746104214363.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256857i72AA5DA928112E82/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746104214363.png" alt="clsorensen911_4-1746104214363.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Which allows you to play and and configure the request and will generate a URL for you:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746104337134.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256858iF8B3CA51C3A5F4B5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_5-1746104337134.png" alt="clsorensen911_5-1746104337134.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you preview the data, you can see what kind of response it will generate.&amp;nbsp;&lt;BR /&gt;However, there are a lot of things to note here, so let's take them one at a time.&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;1. Datasphere completely flattens the data before it sends it:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_7-1746104578440.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256860iF3A46F7382510A05/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_7-1746104578440.png" alt="clsorensen911_7-1746104578440.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The dimensions are served as both the key, and the text.&amp;nbsp;&lt;BR /&gt;Note that the "Dimension" is served as the technical name of the dimension.&lt;BR /&gt;All Text fields added this way will have the suffix "_T", but uses the technical name of the field in the annotation:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_0-1746104857730.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256861i22F0BFBD4AFE04AD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_0-1746104857730.png" alt="clsorensen911_0-1746104857730.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Which can make the output difficult to read.&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;2. All data is served as either string or number (decimal, integer ect).&lt;/P&gt;&lt;P&gt;This may not seem as such a big deal, until you consider the dates:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_2-1746105201519.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256863i2B5626708101A57A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_2-1746105201519.png" alt="clsorensen911_2-1746105201519.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And while it can seem like a non-issue, the data itself contains no hint as to the format.&amp;nbsp;&lt;BR /&gt;You can request the metadata and see the type of the field is Edm.Date, which is a nice standard format:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_3-1746105339985.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256865i47E8439A81CB5F24/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_3-1746105339985.png" alt="clsorensen911_3-1746105339985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But that only happens because we've specified the column as a Date:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_4-1746105395091.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256867iB8AB20834455E9F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_4-1746105395091.png" alt="clsorensen911_4-1746105395091.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But you can imagine different sources serving data in different formats, which can make consumption and modelling a nightmare, unless you enforce strict data harmonization in Datasphere - which you should obviously do - but mistakes happen.&amp;nbsp;&lt;/P&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;3. Nested dimensions are flattened with the business name, not technical name.&lt;/P&gt;&lt;P&gt;There is, however, one absolutely brain-melting thing that I personally foresee causing endless amounts of confusion.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The nested dimension M_LEVEL, seen above as "Job Level" is a part of the data, but it is represented by the description of the parent dimension:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="clsorensen911_5-1746105736726.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256869i0CAAD9E6E4B2CD10/image-size/medium?v=v2&amp;amp;px=400" role="button" title="clsorensen911_5-1746105736726.png" alt="clsorensen911_5-1746105736726.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Just looking at this output, you have a ice cube's chance in hell to deduce which fields belong together.&amp;nbsp;&lt;BR /&gt;Again, you can query the metadata and see the relationship, but you know as well as I do, that at some point, the data is going to end up in the hands of a super-user who has&amp;nbsp;a very specific use case, and will be absolutely floored.&amp;nbsp;&lt;/P&gt;&lt;P&gt;And yes - you are correct. If I had named my dimensions and fields better, a lot of the confusion could be avoided. Absolutely. That is kind of the point &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--1186516853"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId--1383030358"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;The ability to consume Analytical Models build in Datasphere is an absolute godsend.&amp;nbsp;&lt;BR /&gt;It allows you to build central complex, semantically rich data model and allow your users to build their own reports, with whatever tools - to an extent - they prefer.&amp;nbsp;&lt;/P&gt;&lt;P&gt;However, you as the data engineer have a responsibility to find the sweet spot between a model that contains 'enough', without it becoming too complicated.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Sometimes, two models might be better than one.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/consuming-complex-datasphere-models/ba-p/14091196"/>
    <published>2025-05-02T15:34:21.742000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/creating-your-custom-validation-in-cap-java-messagetargets-for-composition/ba-p/14090235</id>
    <title>Creating your custom validation in CAP (JAVA) + MessageTargets for composition associations</title>
    <updated>2025-05-05T10:37:38.704000+02:00</updated>
    <author>
      <name>NicholasArefta</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/876567</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1710039856"&gt;Objective&lt;/H2&gt;&lt;P&gt;Implement dynamic field control on a chosen field, add our own validation along with an error message that targets that field when the validation fails.&lt;/P&gt;&lt;P&gt;Source code: &lt;SPAN class=""&gt;&lt;A href="https://github.com/nickcantstop/SchoolExample" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/nickcantstop/SchoolExample&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;As per capire documentation when using dynamic field control, it forces you to create your custom validations.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="capire fieldcontrol" style="width: 784px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/247819iAC31A3AFAF62BDC2/image-size/large?v=v2&amp;amp;px=999" role="button" title="capire field control.png" alt="capire fieldcontrol" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;capire fieldcontrol&lt;/span&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;Available field control options.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;STRONG&gt;Number Key&lt;/STRONG&gt;&lt;STRONG&gt;Field Control&lt;/STRONG&gt;&lt;SPAN&gt; &lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-05-01 at 4.38.49 pm.png" style="width: 305px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256753iF47DA34EFEE7568E/image-dimensions/305x217?v=v2" width="305" height="217" role="button" title="Screenshot 2025-05-01 at 4.38.49 pm.png" alt="Screenshot 2025-05-01 at 4.38.49 pm.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;SPAN&gt;In our example we want the field averageGrade to be (Read Only) when firstName is null and then Mandatory when firstName has a value.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;P&gt;We will use &lt;SPAN class=""&gt;averageGradeFC&lt;/SPAN&gt; field to store and also annotate our &lt;SPAN class=""&gt;averageGrade&lt;/SPAN&gt; field.&lt;/P&gt;&lt;P&gt;(./db/school.cds)&lt;/P&gt;&lt;P&gt;The composition associations are included purely for illustrative purposes&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;&lt;PRE&gt;namespace my.domain.education;

entity School {
    key ID      : Integer;
        name    : String;
        address : String;
        classes : Composition of many School.Classes
                      on classes.parent = $self;
}

entity School.Classes {
    key ID       : Integer;
    key parent   : Association to School;
        subject  : String;
        students : Composition of many School.Classes.Students
                       on students.parent = $self;
}

entity School.Classes.Students {
    key ID             : Integer;
    key parent         : Association to School.Classes;
        firstName      : String;
        lastName       : String;
        averageGrade   : String;
        averageGradeFC : Integer default 1;
}&lt;/PRE&gt;&lt;P&gt;Service Layer (./srv/schoolService.cds)&lt;/P&gt;&lt;PRE&gt;using {my.domain.education as education} from '../db/school';

service SchoolService {
    @odata.draft.enabled
    entity School                as projection on education.School;

    @cds.redirection.target: true
    entity SchoolClasses         as projection on education.School.Classes;

    @cds.redirection.target: true
    entity SchoolClassesStudents as projection on education.School.Classes.Students;
}&lt;/PRE&gt;&lt;P&gt;In annotations file (./app/school/annotations.cds)&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;annotate service.SchoolClassesStudents with @(Common : { SideEffects #averageGradeSideEffect : {
    SourceProperties: [firstName],
    TargetProperties: ['averageGradeFC']
}}) {
    averageGrade @Common.FieldControl : averageGradeFC;
};&lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;Using the target method as seen here &lt;SPAN class=""&gt;messages.error(“Error”).target()&lt;/SPAN&gt; can help us indicate to the user which field needs attention, in our example we are throwing an error for each averageGrade field that does not pass the validation in the existing School entity.&lt;/P&gt;&lt;P&gt;If we use the following code snippet &lt;SPAN class=""&gt;averageGrade &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1648847"&gt;@Common&lt;/a&gt;.FieldControl : 7;&amp;nbsp;&lt;/SPAN&gt;the framework will append a red asterisk (*) next to the annotated field, to signal that this field is mandatory, but it does not enforce that mandatory rule.&lt;/P&gt;&lt;P&gt;The following handler provides us the validation needed to enforce our mandatory field.&lt;/P&gt;&lt;P&gt;SchoolHandler - validation on when School entity is updated&lt;/P&gt;&lt;DIV class=""&gt;&lt;PRE&gt;@Component
@ServiceName(SchoolService_.CDS_NAME)
public class SchoolHandler implements EventHandler {

    @Autowired
    Messages messages;

    SchoolHandler(Messages messages) {
        messages = this.messages;
    }

    @Before(entity = School_.CDS_NAME, event = CqnService.EVENT_UPDATE)
    public void onSchoolUpdate(School school) {
        school.getClasses().forEach(classes -&amp;gt; classes.getStudents().forEach(students -&amp;gt; {
            if (Objects.isNull(students.getAverageGrade())) {
                messages.error("Average Grade cannot be null.").target(School_.class,
                        sc -&amp;gt; sc.classes(
                                cl -&amp;gt; cl.ID().eq(classes.getId())
                                        .and(cl.parent_ID().eq(classes.getParentId())
                                                .and(cl.IsActiveEntity().eq(false))))
                                .students(
                                        stu -&amp;gt; stu.ID().eq(students.getId())
                                                .and(stu.parent_ID().eq(students.getParentId()))
                                                .and(stu.parent_parent_ID().eq(students.getParentParentId()))
                                                .and(stu.IsActiveEntity().eq(false)))
                                .averageGrade());
            }
        }));
        messages.throwIfError();
    }

    @Before(entity = SchoolClassesStudents_.CDS_NAME, event = DraftService.EVENT_DRAFT_PATCH)
    public void onStudentSideEffect(SchoolClassesStudents students) {
        if (Objects.isNull(students.getFirstName())) {
            students.setAverageGradeFC(1);
        } else {
            students.setAverageGradeFC(7);
        }
    }
}&lt;/PRE&gt;&lt;/DIV&gt;&lt;P&gt;With this code if I leave the field averageGrade as null when it is set to mandatory in the field control, I am met with this error when saving the draft.&lt;/P&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="error highlighted.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/247820i9ACD8FFC6F8024F2/image-size/large?v=v2&amp;amp;px=999" role="button" title="error highlighted.png" alt="error highlighted.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;DIV&gt;The following error message is returned in the backend, it depicts the target as the odata path to the corresponding field.&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV class=""&gt;&lt;PRE&gt;{
    "error": {
        "code": "400",
        "message": "Average Grade cannot be null.",
        "target": "in/classes(ID=2,parent_ID=1,IsActiveEntity=false)/students(ID=3,parent_ID=2,parent_parent_ID=1,IsActiveEntity=false)/averageGrade"
    }
}&lt;/PRE&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/creating-your-custom-validation-in-cap-java-messagetargets-for-composition/ba-p/14090235"/>
    <published>2025-05-05T10:37:38.704000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-extract-all-artifacts-of/ba-p/14087857</id>
    <title>SAP Datasphere CLI &amp; Python Automation : Extract All Artifacts of Datasphere in CSV files.</title>
    <updated>2025-05-05T10:47:20.047000+02:00</updated>
    <author>
      <name>VikasParmar055</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1716232</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1382837983" id="toc-hId-1580247983"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&lt;BR /&gt;In this post, we'll look at how to use Python with SAP Datasphere CLI to extract data objects and save them as CSV files. The script helps you manage items like remote tables, views, replication flows, and more for every space in SAP Datasphere. It's a great tool for automating repeated tasks and keeping data organized across different objects.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1383734478"&gt;Usecases:&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;1. &lt;STRONG&gt;Validate Namig Convesion&lt;/STRONG&gt; : Generated files can be used as source in Datasphere to validate the naming convension for all artifactes&lt;/SPAN&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;2. Identify and Delete unncessary objects from Datasphere Tenant.&lt;/SPAN&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1187220973"&gt;&lt;STRONG&gt;Prerequisites&lt;/STRONG&gt;&lt;/H1&gt;&lt;P&gt;Steps to install SAP Datasphere CLI:&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68...&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cli-and-sql/bc-p/14086942#M180986/" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-datasphere-external-access-overview-apis-cl...&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5" color="#000000"&gt;&lt;STRONG&gt;Step-by-Step Process&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Prepare Login.Json file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create OAuth Client with Purpose as Interactive Usage and Redirect URL as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="http://localhost:8080/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;EM&gt;http://localhost:8080&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Get the value of all below fields from the OAuth Client and prepare the Login.json file.&lt;/P&gt;&lt;PRE&gt;{
"client_id": "",
"client_secret": "",
"authorization_url": "",
"token_url": "",
"access_token": "",
"refresh_token": ""
}&lt;/PRE&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;Step 2: Create Model_Object.py file with below code&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;dsp host&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: give URL of Datasphere Tenant.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;secrets_file&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: Give Path of Login.json file.&lt;/P&gt;&lt;PRE&gt;import subprocess
import pandas as pd
import sys

def manage_Modeling_Object(Modeling_Object):
    # Step 1: Login to Datasphere using host and secrets file
    dsp_host = '&amp;lt;URL of Datasphere&amp;gt;'
    secrets_file = '&amp;lt;path&amp;gt;/Login.json'
    command = f'datasphere login --host {dsp_host} --secrets-file {secrets_file}'
    subprocess.run(command, shell=True)  # Execute the login command
    
    # Step 2: Retrieve a list of all spaces in JSON format
    command = ['datasphere', 'spaces', 'list', '--json']
    result_spaces = subprocess.run(command, capture_output=True, shell=True, text=True)  # Run the command and capture output
    
    # Step 3: Parse the list of spaces from the command's output
    spaces = result_spaces.stdout.splitlines()  # Split output into individual lines
    
    ModelingObject_data = []  # Initialize a list to store Modeling Object data
    
    # Step 4: Check if the Modeling Object is 'spaces'
    if Modeling_Object == 'spaces':
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip()  # Extract space ID
            
            # Add space details to the data list
            ModelingObject_data.append({
                'Space ID': space_id.replace('"', '').replace(',', ''),
                'Technical Name': space_id.replace('"', '').replace(',', ''),
                'TYPE': Modeling_Object[:-1].upper()  # Set the TYPE as uppercase version of the input Modeling Object name
            })
    
    # Step 5: Process Modeling Objects for each space
    else:
        for space in spaces:
            if space == "[" or space == "]":
                continue  # Skip brackets in the JSON output
            space_id = space.strip()  # Extract space ID
            
            # Step 6: Retrieve Modeling Objects for the current space
            command = ['datasphere', 'objects', Modeling_Object, 'list', '--space', space_id.replace('"', '').replace(',', '')]
            result_ModelingObject = subprocess.run(command, capture_output=True, shell=True, text=True)  # Run the command
            
            # Step 7: Parse the Modeling Object data from the output
            ModelingObject_info = result_ModelingObject.stdout.splitlines()  # Split output into individual lines
            print("Checking "+Modeling_Object.upper()+" for space : "+space_id.replace('"', '').replace(',', ''))  # Log the space being checked
            
            # Step 8: Process each Modeling Object
            if len(ModelingObject_info) &amp;gt; 1:
                for flow in ModelingObject_info:
                    if '{' in flow or '}' in flow or '[' in flow or ']' in flow:
                        continue  # Skip brackets or braces in the output
                    cleaned_flow = flow.replace('"technicalName":', '').replace('"', '').strip()  # Clean up the output
                    
                    # Step 9: Add Modeling Object details to the data list
                    ModelingObject_data.append({
                        'Space ID': space_id.replace('"', '').replace(',', ''),
                        'Technical Name': cleaned_flow,
                        'TYPE': Modeling_Object[:-1].upper()  # Set the TYPE as uppercase version of the input Modeling Object name
                    })
    
    # Step 10: Write the collected data into a CSV file
    if ModelingObject_data:
        df = pd.DataFrame(ModelingObject_data)  # Create a DataFrame from the data list
        df.to_csv(Modeling_Object.upper()+'.csv', index=False)  # Save the DataFrame to a CSV file without the index
        print("Space vise all "+Modeling_Object.upper()+" have been written to "+Modeling_Object.upper()+".csv.")  # Log success message
    else:
        print("No Modeling Objects found.")  # Log message if no data was collected
    
    print('------------------------------------------------------------------------------------------------------------------------------------')  # Separator for readability
        
if __name__ == "__main__":
    # Check if an argument is provided via the command line
    if len(sys.argv) &amp;gt; 1:
        # Pass the first argument to the method
        manage_Modeling_Object(sys.argv[1])
    else:
        print("Please provide a Modeling Object name as an argument.")  # Log error message if no argument is provided
        
# Execute for predefined Modeling Objects
manage_Modeling_Object('remote-tables')
manage_Modeling_Object('local-tables')
manage_Modeling_Object('views')
manage_Modeling_Object('intelligent-lookups')
manage_Modeling_Object('data-flows')
manage_Modeling_Object('replication-flows')
manage_Modeling_Object('transformation-flows')
manage_Modeling_Object('task-chains')
manage_Modeling_Object('analytic-models')
manage_Modeling_Object('data-access-controls')&lt;/PRE&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Open command prompt and execute the Model_Objects.py file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VikasParmar055_0-1745819896727.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/255331iD13C18E5F83CA56D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VikasParmar055_0-1745819896727.png" alt="VikasParmar055_0-1745819896727.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Once the program execution is done it will generate CSV files for all the Datasphere artifactes mention in python code&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VikasParmar055_1-1745819896735.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/255332iD2C8108036EAC9AD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VikasParmar055_1-1745819896735.png" alt="VikasParmar055_1-1745819896735.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;each CSV file will have 3 columns :&amp;nbsp;&lt;/P&gt;&lt;P&gt;1) Space ID : Name of the space&lt;/P&gt;&lt;P&gt;2) Technical Name : Exact Technical Name of Object&amp;nbsp;&lt;/P&gt;&lt;P&gt;3) Type : Type of Object&amp;nbsp;( i.e view, local-table, remote-table, replication flw etc)&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-990707468"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;This script demonstrates how Python and SAP Datasphere CLI can collaborate to streamline artifact management and export data systematically. By following the steps provided, users can extend or adapt the code to suit their requirements.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-extract-all-artifacts-of/ba-p/14087857"/>
    <published>2025-05-05T10:47:20.047000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-add-1000-users-in-datasphere-space/ba-p/14101128</id>
    <title>SAP Datasphere CLI &amp; Python Automation : ADD 1000+ Users in Datasphere space in few seconds</title>
    <updated>2025-05-16T09:59:17.308000+02:00</updated>
    <author>
      <name>vikasparmar88</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1528256</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;This blog is part of a blog series from SAP Datasphere CLI &amp;amp; Python Automation with the focus on SAP Datasphere &amp;amp; Python capabilities:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT size="4"&gt;&lt;A class="" href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-extract-all-artifacts-of/ba-p/14087857" target="_blank"&gt;SAP Datasphere CLI &amp;amp; Python Automation : Extract All Artifacts of Datasphere in CSV files.&lt;/A&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1601303401"&gt;&lt;FONT size="6"&gt;Introduction&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;Managing users in SAP Datasphere can take a lot of time, especially when there are hundreds or thousands of users. Adding them one by one is slow and tiring. This blog explains an easy way to automate the process using Python and SAP Datasphere CLI. With this method, you can add over 1000 users in just a few seconds, saving time and effort.&lt;/P&gt;&lt;H1 id="topic-title" id="toc-hId-1404789896"&gt;Install or Update the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Datasphere&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;Command Line Interface&lt;/H1&gt;&lt;P&gt;&lt;A href="https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/SAP_DATASPHERE/d0ecd6f297ac40249072a44df0549c1a/f7d5eddf20a34a1aa48d8e2c68a44e28.html/&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1208276391"&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Step-by-Step Process&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Prepare Login.Json file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Create OAuth Client with Purpose as Interactive Usage and Redirect URL as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;&lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Get the Refresh Token and access Token by executing below command&amp;nbsp;&lt;/EM&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;datasphere config secrets show&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Get the value of all below fields from the OAuth Client and prepare the Login.json file.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
"client_id": "",
"client_secret": "",
"authorization_url": "",
"token_url": "",
"access_token": "",
"refresh_token": ""
}&lt;/code&gt;&lt;/pre&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-1011762886"&gt;&lt;FONT size="4"&gt;Step-2: Prepare USERS.CSV File for Input:&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;FONT size="4"&gt;There are 3 columns in CSV file.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;1) &lt;STRONG&gt;Space&lt;/STRONG&gt; : Space Name&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;2) &lt;STRONG&gt;User&lt;/STRONG&gt; : User ID in Datasphere&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;3) &lt;STRONG&gt;Role&lt;/STRONG&gt; : Scope Role name, required for user.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;As shown below, There are 1357 users need to be assigned to Datasphere space with given role in Datasphere.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-05-14 132712.png" style="width: 361px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/260915iC37BF11D608DEDB0/image-dimensions/361x385?v=v2" width="361" height="385" role="button" title="Screenshot 2025-05-14 132712.png" alt="Screenshot 2025-05-14 132712.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-815249381"&gt;&lt;FONT size="4"&gt;Step-3:&amp;nbsp;Space_User_Role_Json&lt;STRONG&gt;.py file with below code&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;The Code: Automating User Assignments&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The following Python script simplifies bulk user assignments by:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Reading user-role mappings from a CSV file.&lt;/LI&gt;&lt;LI&gt;Dynamically creating JSON files containing space-user-role mappings.&lt;/LI&gt;&lt;LI&gt;Executing SAP Datasphere CLI commands to automate user additions.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;dsp host&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: give URL of Datasphere Tenant.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;secrets_file&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;: Give Path of Login.json file.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;import subprocess  # For OS commands on DSP CLI
import json  # For handling the JSON file format
import pandas as pd  # For reading the CSV file
import os  # For creating directories dynamically
import sys  # For accessing command-line arguments

def create_json_file(space_name, user_role_data, directory):
    """
    Create a JSON file for the given space name and associated user-role data, saving it to the specified directory.

    Args:
        space_name (str): The name of the space.
        user_role_data (list): A list of dictionaries containing user and role mappings.
        directory (str): The directory where the file should be saved.
    """
    # Define the JSON structure
    data = [
        {
            "id": user_role["User"],
            "roles": [user_role["Role"]]  # Roles are explicitly wrapped in a list
        }
        for user_role in user_role_data
    ]


    # Specify the file name and path
    file_name = f"{space_name}.json"
    file_path = os.path.join(directory, file_name)

    # Ensure the directory exists
    os.makedirs(directory, exist_ok=True)

    # Convert `data` to a JSON string with the desired format
    json_content = json.dumps(data, indent=2, separators=(',', ': '))

    # Remove unncessary new lines and spaces for Role
    json_content = json_content.replace("[\n", "[").replace("\n    ]","]").replace("[      ","[")

    # Create the JSON file with the updated content
    with open(file_path, "w") as json_file:
        json_file.write(json_content)

    print(f"JSON file created successfully for space : {space_name}")
    return file_path

def manage_spaces(csv_file_path):
    """
    Reads a CSV file to verify columns, then processes spaces, users, and roles to create JSON files
    and execute Datasphere CLI commands.

    Args:
        csv_file_path (str): The path to the CSV file containing Space, User, and Role columns.
    """
    try:
        # Check if the argument is passed
        if not csv_file_path:
            raise ValueError("csv_file_path argument is required.")
        
        # Check if the argument is a string and contains ".csv"
        if not isinstance(csv_file_path, str) or not csv_file_path.endswith(".csv"):
            raise ValueError("The csv_file_path must be a string and end with '.csv'.")
        
        print(f"Argument received: {csv_file_path}")
        
        # Login to Datasphere using host and secrets file
        dsp_host = '&amp;lt;DATASPHERE URL&amp;gt;'
        secrets_file = '&amp;lt;PATH&amp;gt;/Login.json'
        command = f'datasphere login --host {dsp_host} --secrets-file {secrets_file}'
        subprocess.run(command, shell=True)  # Execute the login command

        # Replace forward slashes with backslashes for consistency
        csv_file_path = csv_file_path.replace("/", "\\")
        print(f"Formatted csv_file_path: {csv_file_path}")
        
        # Read the CSV file
        data = pd.read_csv(csv_file_path)

        # Validate columns
        required_columns = ['Space', 'User', 'Role']
        if not set(required_columns).issubset(data.columns):
            raise ValueError("CSV file must contain 'Space', 'User', and 'Role' columns.")

        # Extract unique spaces
        spaces = data['Space'].unique()

        # Process each space
        for space in spaces:
            
            #For each space find users and their role given in csv file
            space_data = data[data['Space'] == space]
            user_role_data = space_data[['User', 'Role']].to_dict(orient='records')
            
            # Check if the space exists
            check_space_command = f'datasphere spaces read --space {space}'
            result = subprocess.run(check_space_command, shell=True, capture_output=True, text=True)
            
            # Create JSON file for each space
            path = csv_file_path.rsplit('\\', 1)[0] + "\\"
            json_file_path = create_json_file(space, user_role_data, path)
              
            # Add users to the space using the generated JSON file
            add_users_command = f'datasphere spaces users add --space "{space}" --file-path "{json_file_path}"'
            print(f"Adding Users to {space} space now...")
            try:
                result = subprocess.run(add_users_command, shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"Successfully added users to space '{space}' using file '{json_file_path}'.")
                else:
                    print(f"Failed to add users to space '{space}'. Error: {result.stderr}")
            except Exception as e:
                print(f"An error occurred while adding users to space '{space}': {e}")

    except FileNotFoundError:
        print(f"CSV file '{csv_file_path}' not found.")
    except ValueError as ve:
        print(f"Argument error: {ve}")
    except Exception as e:
        print(f"An error occurred: {e}")

# Check if the script is run with the required argument
if len(sys.argv) &amp;gt; 1:
    manage_spaces(sys.argv[1])
else:
    print("Please provide the CSV file path as an argument when running the script.")&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Open command prompt and execute the&amp;nbsp;&lt;FONT size="4"&gt;Space_User_Role_Json.py&amp;nbsp;&lt;/FONT&gt;file&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Give the path of USERS.csv file as argument&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;python Space_User_Role_Json.py('C:/DataSphere/USERS.csv')&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Execution will take few seconds to complete and Once it's done you can see all users ( User count 1356 in my case ) are added to respective space with role assigned in USERS.csv file.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vikasparmar88_2-1747214928113.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/260980iACEA161A6FA8D830/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vikasparmar88_2-1747214928113.png" alt="vikasparmar88_2-1747214928113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;!--    StartFragment     --&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382837983" id="toc-hId-618735876"&gt;&lt;FONT size="6"&gt;Conculsion&lt;/FONT&gt;&lt;/H1&gt;&lt;P&gt;With this automation, SAP Datasphere user management becomes seamless and scalable. Python scripting combined with Datasphere CLI simplifies user assignments and minimizes human effort. Whether managing hundreds or thousands of users, this method enhances efficiency while maintaining structured access control.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you have questions or noticed a scenario I didn’t cover, feel free to leave a comment below the blog post.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Thank&lt;/P&gt;&lt;P&gt;Vikas Parmar&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp; &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+HANA/pd-p/73554900100700000996" class="lia-product-mention" data-product="639-1"&gt;SAP HANA&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/OData/pd-p/551580658536717501828021060147962" class="lia-product-mention" data-product="323-1"&gt;OData&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SQL/pd-p/122888716930844301706258287775555" class="lia-product-mention" data-product="326-1"&gt;SQL&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/Python/pd-p/f220d74d-56e2-487e-8e6c-a8cb3def2378" class="lia-product-mention" data-product="126-1"&gt;Python&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;!--    EndFragment     --&gt;&lt;/P&gt;&lt;P&gt;&lt;!--    EndFragment     --&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-datasphere-cli-amp-python-automation-add-1000-users-in-datasphere-space/ba-p/14101128"/>
    <published>2025-05-16T09:59:17.308000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/updating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/14109511</id>
    <title>Updating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter</title>
    <updated>2025-05-22T18:35:37.307000+02:00</updated>
    <author>
      <name>jirifridrich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/146600</uri>
    </author>
    <content>&lt;P&gt;In my &lt;A title="Create customer in S4" href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/13953228" target="_blank"&gt;previous blog&lt;/A&gt; I describe how to create Customer in SAP S/4HANA Public Cloud via HTTP adapter. In this post we will explore the UPDATE possibilities.&amp;nbsp;&lt;/P&gt;&lt;P&gt;I will skip the authentication part, as that is desribed in the mention blog and it follows the same pattern.&lt;/P&gt;&lt;P&gt;We'll again focus on the API_BUSINESS_PARTNER service, your go-to resource for all things related to business partners (which is how customers are represented in S/4HANA). The PATCH method will be our primary tool for making targeted updates.&lt;/P&gt;&lt;P&gt;The official documentation, which will be your good companion is provided at the &lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;SAP Business Accelerator Hub&lt;/A&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-1859710973"&gt;1. Updating Core Business Partner Information&lt;/H3&gt;&lt;P&gt;This is where you'll modify fundamental details about your customer, such as their name.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('&amp;lt;CUSTOMER-NUMBER&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Replace&lt;EM&gt; &amp;lt;CUSTOMER-NUMBER&amp;gt;&lt;/EM&gt; with the actual customer ID you wish to update.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;Let's say we want to update the customer's first name or last name. Then the request body will be as follows. General rule is that we are sending only data which we want to change. The rest remains intact.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "FirstName": "FIRST NAME",
    "LastName": "LAST NAME"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1663197468"&gt;2. Updating Sales Area Data&lt;/H3&gt;&lt;P&gt;Sales area data is crucial for sales processes, defining how a customer interacts with your sales organization, distribution channel, and division.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_CustomerSalesArea(Customer='&amp;lt;CUSTOMER-NUMBER&amp;gt;',SalesOrganization='&amp;lt;SALES-ORG&amp;gt;',DistributionChannel='&amp;lt;DISTR-CHANNEL&amp;gt;',Division='&amp;lt;DIVISION&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example (with placeholders replaced):&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_CustomerSalesArea(Customer='1000010',SalesOrganization='1000',DistributionChannel='01',Division='01')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Remember to replace &amp;lt;CUSTOMER-NUMBER&amp;gt;, &amp;lt;SALES-ORG&amp;gt;, &amp;lt;DISTR-CHANNEL&amp;gt;, and &amp;lt;DIVISION&amp;gt; with the specific values for the sales area you want to modify.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;For example we want to update the Customer Group for a specific customer.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "CustomerGroup": "&amp;lt;CUSTOMER-GROUP&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1466683963"&gt;3. Updating Customer Address&lt;/H3&gt;&lt;P&gt;Updating addresses is a two-step process: first, you need to retrieve the AddressID, and then you can perform the update. This ensures you're targeting the correct address record, as a business partner can have multiple addresses.&lt;/P&gt;&lt;H4 id="toc-hId-1399253177"&gt;Step 3a: Get Address to Extract Address ID&lt;/H4&gt;&lt;P&gt;You'll need to query the business partner to retrieve the associated address ID.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint (GET Request):&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('&amp;lt;CUSTOMER-NUMBER&amp;gt;')$expand=to_BusinessPartnerAddress&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Replace &amp;lt;CUSTOMER-NUMBER&amp;gt; with the relevant customer ID. Notice the 'expand' in the query. Without it the system would not return the address details, as it can contain a lot of data. If we want address details, we have to ask for it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; GET&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Explanation:&lt;/STRONG&gt; This GET request will retrieve the business partner details. Within the response, you'll find the AddressID for each address record linked to the business partner. You'll need to parse this response to extract the correct AddressID for the address you intend to update.&lt;/P&gt;&lt;H4 id="toc-hId-1202739672"&gt;Step 3b: Update Address&lt;/H4&gt;&lt;P&gt;Once you have the AddressID, you can proceed with the PATCH request to update the address details.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;/STRONG&gt; &lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartnerAddress(BusinessPartner='&amp;lt;CUSTOMER-NUMBER&amp;gt;',AddressID=&amp;lt;ADDRESS-ID&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;Again, we are sending only data which we want to change. Notice that we are calling different API (&lt;EM&gt;A_BusinessPartnerAddress&lt;/EM&gt;) than when we were requesting the address object (&lt;EM&gt;A_BusinessPartner&lt;/EM&gt;). This can be misleading and one of the reasons I am writing this blog to clarify it.&lt;BR /&gt;The body to change the whole address can look like this.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "Country": "&amp;lt;COUNTRY&amp;gt;",
    "CityName": "&amp;lt;CITY&amp;gt;",
    "StreetName": "&amp;lt;STREET&amp;gt;",
    "HouseNumber": "&amp;lt;HOUSE-NUMBER&amp;gt;",
    "PostalCode": "&amp;lt;ZIP-CODE&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-877143448"&gt;4. Updating Customer Email&lt;/H3&gt;&lt;P&gt;Updating email is again a two-step process similar to address update, but it gets even trickier, that's why I want to demonstrate it as well.&lt;/P&gt;&lt;H4 id="toc-hId-809712662"&gt;Step 4a: Get Current Email Address&amp;nbsp;&lt;/H4&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint&lt;BR /&gt;&lt;/STRONG&gt;&lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner('${property._CustomerNumber}')$expand=to_BusinessPartnerAddress/to_EmailAddress&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Notice that we are again expanding the query, but this time even furhter, as we need the email address, which is nested under the general address.&lt;BR /&gt;This time we need to extract more parameters - AddressID, Person and OrdinalNumber !&lt;/P&gt;&lt;H4 id="toc-hId-613199157"&gt;Step 4b: Update Email Address&lt;/H4&gt;&lt;P&gt;With all this data, we can finally run our update query.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;API Endpoint:&lt;BR /&gt;&lt;/STRONG&gt;&lt;EM&gt;/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_AddressEmailAddress(AddressID='&amp;lt;ADDRESS-ID&amp;gt;',Person='&amp;lt;PERSON&amp;gt;',OrdinalNumber='&amp;lt;ORDINAL-NUMBER&amp;gt;')&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; PATCH&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Request Body (JSON):&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "EmailAddress": "NEW@EMAIL.COM"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;That's it&lt;/P&gt;&lt;P&gt;Similarly, we can update phone or any other business partner object. Always ensure that you are expanding properly when calling the GET query, so that the object you want to get is listed in the response.&lt;/P&gt;&lt;P&gt;Recommendable is also to handle the response to the PATCH request, the desirable response code is 204. Anything else we can route as an exception in our iflow, as the update did not go through.&lt;/P&gt;&lt;P&gt;See also&amp;nbsp;&lt;A title="Creating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter" href="https://community.sap.com/t5/technology-blog-posts-by-members/creating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/13953228" target="_blank"&gt;Creating Customer in SAP S/4 HANA Public Cloud via OData HTTP Adapter&lt;/A&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/updating-customer-in-sap-s-4-hana-public-cloud-via-odata-http-adapter/ba-p/14109511"/>
    <published>2025-05-22T18:35:37.307000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/send-data-from-sap-analytics-cloud-to-3rd-party-tools-using-cpi/ba-p/14129356</id>
    <title>Send data from SAP Analytics Cloud to 3rd Party tools using CPI</title>
    <updated>2025-06-17T10:57:20.877000+02:00</updated>
    <author>
      <name>akshaykhatri1992</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/778666</uri>
    </author>
    <content>&lt;P&gt;Requirement from customer:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Customer checks the financial values on SAC story and is ok with the KPIs.&lt;/LI&gt;&lt;LI&gt;Customer needs a &lt;STRONG&gt;button&lt;/STRONG&gt; in SAC to send the KPIs to 3rd party system in a format different from what we have in Step 1.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample Layout of Report for 1:&amp;nbsp;&lt;/U&gt;&lt;/STRONG&gt;Format of report to validate KPI values, Accounts on rows and Period Amounts in columns.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_0-1750139502848.png" style="width: 640px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274957i00BE7E2542B0130A/image-dimensions/640x76?v=v2" width="640" height="76" role="button" title="akshaykhatri1992_0-1750139502848.png" alt="akshaykhatri1992_0-1750139502848.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample Layout of Report for 2:&amp;nbsp;&lt;/U&gt;&lt;/STRONG&gt;Format of data to be send outside of SAC using Button Script:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_1-1750139502849.png" style="width: 644px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274956i3F260978BA99571B/image-dimensions/644x71?v=v2" width="644" height="71" role="button" title="akshaykhatri1992_1-1750139502849.png" alt="akshaykhatri1992_1-1750139502849.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Here we will not cover Analytic Model development on &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Datasphere/pd-p/73555000100800002141" class="lia-product-mention" data-product="16-1"&gt;SAP Datasphere&lt;/a&gt;&amp;nbsp;end to end, below is how we take the oData request of Analytic model&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_2-1750139502852.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274958i8B285EE859786985/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_2-1750139502852.png" alt="akshaykhatri1992_2-1750139502852.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Copy URL and adjust the URL depending on fields required and additional operators like sort, filter etc. This URL will contain the fields that need to be sent outside SAC, hence needs to be accurate.&lt;/P&gt;&lt;P&gt;Example:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_3-1750139502864.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274961i7C14996EEF2DD1E3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_3-1750139502864.png" alt="akshaykhatri1992_3-1750139502864.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The above URL can be shared with &lt;a href="https://community.sap.com/t5/c-khhcw49343/Cloud+Integration/pd-p/67837800100800006801" class="lia-product-mention" data-product="361-1"&gt;Cloud Integration&lt;/a&gt;&amp;nbsp;(CPI), to be maintained in HTTP Adapter, also can be made dynamic with placeholders/filters. ( In our case w e are passing fiscal year, Period, company code etc. and the same is changed dynamically at CPI end.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Sample IFLOW from CPI ( HTTP Adapter)&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_4-1750139502868.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274960i998DE03D8D3357CA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_4-1750139502868.png" alt="akshaykhatri1992_4-1750139502868.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Create a connection in &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-1"&gt;SAP Analytics Cloud&lt;/a&gt;&amp;nbsp;with CPI ( HTTP Connection ) :&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This will be used to POST the data from SAC to the endpoint of CPI tenant(S).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_5-1750139502870.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274959i6D058F1CED2C7224/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_5-1750139502870.png" alt="akshaykhatri1992_5-1750139502870.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Create MultiAction in &lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-2"&gt;SAP Analytics Cloud&lt;/a&gt;&amp;nbsp;with API&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;“Test_Multiaction”&lt;/STRONG&gt; created&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_6-1750139502872.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274963iAD26D6A984242D6D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_6-1750139502872.png" alt="akshaykhatri1992_6-1750139502872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;HTTP API Connection is selected that was created in above step.&lt;/P&gt;&lt;P&gt;Message body can have fixed message, also can pass Parameters as in our case.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_7-1750139502872.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274962i57E29FF0A05A0558/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_7-1750139502872.png" alt="akshaykhatri1992_7-1750139502872.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_8-1750139502876.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274964iAE4E13CC93DB56B4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_8-1750139502876.png" alt="akshaykhatri1992_8-1750139502876.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Parameters can be maintained here:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_9-1750139502879.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274966iF12627E678471E42/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_9-1750139502879.png" alt="akshaykhatri1992_9-1750139502879.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;SAC Story/Page for Execution &lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;I am taking an example of standalone story, but this can also be added to a new page of the same story that the user is viewing( like story in Sample Layout 1 shown above ).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_10-1750139502880.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274965i8E9031EC26BBBB5E/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_10-1750139502880.png" alt="akshaykhatri1992_10-1750139502880.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As it can be seen above, we are using radio button, input text fields to capture user inputs to be passed to multiaction parameters shown above.&lt;/P&gt;&lt;P&gt;Before we can call the multiaction in our story, we need to attach/combine &lt;STRONG&gt;"Test_Multiaction" &lt;/STRONG&gt;created above&amp;nbsp;it in the story.&amp;nbsp;Navigate to &lt;STRONG&gt;“Outline”&lt;/STRONG&gt; and use &lt;STRONG&gt;“Add Multiactions”&lt;/STRONG&gt; and follow screenshot below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_11-1750139502881.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274967iBD4807FED8BC7F59/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_11-1750139502881.png" alt="akshaykhatri1992_11-1750139502881.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_12-1750139502884.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274970iE65AE951CF55E51F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_12-1750139502884.png" alt="akshaykhatri1992_12-1750139502884.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Below is the&amp;nbsp;&lt;STRONG&gt;&lt;U&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" class="lia-product-mention" data-product="3-3"&gt;SAP Analytics Cloud&lt;/a&gt;&lt;/U&gt;&lt;/STRONG&gt;&amp;nbsp;script sample to set the parameters of Multiaction and also to call/execute the same. This will post the message to CPI&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_13-1750139502887.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274969i96F7253340139089/image-size/medium?v=v2&amp;amp;px=400" role="button" title="akshaykhatri1992_13-1750139502887.png" alt="akshaykhatri1992_13-1750139502887.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;On successful execution, we get the message as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_14-1750139502888.png" style="width: 491px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274968i4261DDD44AA27A4D/image-dimensions/491x221?v=v2" width="491" height="221" role="button" title="akshaykhatri1992_14-1750139502888.png" alt="akshaykhatri1992_14-1750139502888.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Monitor Job (MultiAction):&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We can also monitor the status of runs/jobs for the created multiAction to check history and failure details.&lt;/P&gt;&lt;P&gt;Goto “Job Monitor - Multiactions”&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_15-1750139502890.png" style="width: 509px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274972i1D2C4117522B468A/image-dimensions/509x159?v=v2" width="509" height="159" role="button" title="akshaykhatri1992_15-1750139502890.png" alt="akshaykhatri1992_15-1750139502890.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="akshaykhatri1992_16-1750139502893.png" style="width: 518px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/274971iBB8A642D3B14638A/image-dimensions/518x149?v=v2" width="518" height="149" role="button" title="akshaykhatri1992_16-1750139502893.png" alt="akshaykhatri1992_16-1750139502893.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/send-data-from-sap-analytics-cloud-to-3rd-party-tools-using-cpi/ba-p/14129356"/>
    <published>2025-06-17T10:57:20.877000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/tree-view-in-rap/ba-p/14135071</id>
    <title>Tree view in RAP</title>
    <updated>2025-06-24T09:43:15.825000+02:00</updated>
    <author>
      <name>Vivek_Sahu_21</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1451075</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;In this blog we will cover:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Introduction,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Architecture overview,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Scenario,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Procedure,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Conclusion.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Introduction:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in SAP ABAP is used to define &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;recursive, tree-like relationships&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in data directly within Core Data Services (CDS) views. It allows structured, hierarchical data (like manager-employee, material categories, sales orgs, BOMs, etc.) to be represented and consumed easily in UI applications and analytics tools.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;RAP (RESTful ABAP Programming Model)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tree View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; is used to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;visualize hierarchical (recursive) data structures&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the UI—typically in &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Fiori Elements&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; apps such as List Reports with tree tables.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Tree View allows end users to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;navigate data in a parent-child format&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (e.g., managers → employees, sales org → region → country).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;├── Region North America&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;│&amp;nbsp;&amp;nbsp; ├── Country USA&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;│&amp;nbsp;&amp;nbsp; └── Country Canada&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;└── Region Europe&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ├── Country Germany&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; └── Country France&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To enable a Tree View in a RAP app:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Model recursive data in a CDS view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (e.g., employee-manager, sales org tree)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (&lt;/SPAN&gt;&lt;SPAN&gt;define hierarchy&lt;/SPAN&gt;&lt;SPAN&gt;)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Use a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;C_ projection view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to expose the hierarchy using:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1599241"&gt;@odata&lt;/a&gt;.hierarchy.recursiveHierarchy: [ { entity.name: 'ZVS_I_SALES_ORG_HN' } ]&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Add your entity to &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Definition&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Binding&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Run the Fiori app (it will automatically detect and display a tree)&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Treeviews: Architecture Overview&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The implementation of a treeview in the ABAP RESTful Application Programming Model (RAP) requires different entities depending on whether the treeview should be read-only or editable.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Read-Only Treeview&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750743710426.jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277974i2891481FDCFB3EFE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750743710426.jpeg" alt="Vivek_Sahu_21_0-1750743710426.jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Read-Only Tree View in CDS&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;To enable a read-only hierarchical display of data in the UI, the following CDS artifacts are used in combination:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Database Table&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;A custom database table holds the hierarchical data structure.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Interface View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This CDS view entity is built on top of the database table and defines the data model. It includes a self-association to represent the parent-child hierarchy within the same dataset.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS Hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;persistent CDS hierarchy&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt; is created using the &lt;/SPAN&gt;&lt;SPAN&gt;DEFINE HIERARCHY&lt;/SPAN&gt;&lt;SPAN&gt; statement. It provides a hierarchical interpretation of the interface view, enabling the framework to understand how records are nested.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Projection View&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This view projects the interface view and incorporates the CDS hierarchy to expose the structured, hierarchical data as required by the UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Service Definition and Service Binding&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;These are created to expose the CDS projection view as an OData service. This step enables the consumption of hierarchical data in SAP Fiori or other UI frameworks.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Architecture Overview: Editable Treeview with Draft&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750744114176.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277982i08F2A2C1F5D8F5DC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750744114176.png" alt="Vivek_Sahu_21_0-1750744114176.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Editable Tree View with Draft Enablement – Architecture Overview&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;To enable an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;editable tree view with draft functionality&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, the following key artifacts work together to define and expose the hierarchical data structure to the UI:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Database table:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Active and draft tables&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; store the hierarchical data and hierarchy directory separately, supporting draft-enabled transactional scenarios.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;CDS view Entities (Interface Views):&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Interface views reference the underlying database tables and act as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;first projection layer&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The CDS view for the hierarchical data must include:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;self-association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to represent the parent-child relationship within the same entity (enabling hierarchy logic).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;one-to-many association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to link with the hierarchy directory entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;CDS Hierarchy:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;A &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;persistent CDS hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; is defined using &lt;/SPAN&gt;&lt;SPAN&gt;DEFINE HIERARCHY&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;It enables hierarchical interpretation for the data exposed by the first-layer CDS view.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Base CDS views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;These views enrich the model with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;compositional information&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;hierarchy directory view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; acts as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;composition root&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; (parent).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;hierarchical data view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; acts as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;composition child&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Behaviour Definition for base views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Defines &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;transactional behavior&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, including:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Draft capability&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Editing operations required by the UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Projection views:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Serve the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;consumption layer&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;For the hierarchy directory: A projection view supports transactional queries.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;For hierarchical data: A projection view combines interface view data with hierarchical logic using the &lt;/SPAN&gt;&lt;SPAN&gt;@OData.hierarchy.recursiveHierarchy&lt;/SPAN&gt;&lt;SPAN&gt; annotation (referring to the CDS hierarchy).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Projection behaviour definition:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Describes the behavior of projection views, allowing:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;Custom logic&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; like determinations, validations, authorizations, numbering, etc.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Service Definition and Service Binding:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Finally, a &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;service definition&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; and &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;binding&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; are created to expose the hierarchy and its data structure to the UI layer via OData.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;===========================================================================&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Scenario for Tree view in RAP:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In large global companies, the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales &amp;amp; Distribution (SD) module&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; often reflects the company's organizational structure. Typically, &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Organizations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; are arranged in a multi-level hierarchy like this:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750746293329.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278000iA1D1A26B7D0A30E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750746293329.png" alt="Vivek_Sahu_21_0-1750746293329.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This kind of structure helps companies manage &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;sales performance, reporting, and operations&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; more effectively.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, many systems don’t provide a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;read-only, easy-to-use view&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; of this hierarchy — especially in a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;tree or drill-down format&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; that users can easily navigate.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we’ll walk through how to model and expose this Sales Org hierarchy using &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CDS Hierarchies&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, and finally expose it through an &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;OData service&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to be consumed in a Fiori UI.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;U&gt;&lt;STRONG&gt;&lt;FONT size="6"&gt;Procedure:&amp;nbsp;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/U&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 1: Define the Base Table - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_DT_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This transparent table stores the core sales organization data including parent-child relationships.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'Hierarchy: Read Only: Sales Organization'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zvs_dt_sales {

  key client       : abap.clnt not null;
  key sales_org_id : abap.char(6) not null;
  name             : abap.char(50);
  region           : abap.char(20);
  country          : abap.char(3);
  @Semantics.amount.currencyCode : 'zvs_dt_sales.currency'
  revenue          : abap.curr(21,2);
  currency         : /dmo/currency_code;
  parent_sales_org : abap.char(6);

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Note:&lt;/SPAN&gt;&lt;/STRONG&gt; &lt;SPAN&gt;parent_sales_org&lt;/SPAN&gt;&lt;SPAN&gt; is a self-referencing field to represent the hierarchy.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This table contain some records:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750746688733.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278008i35DB9521A7BF5906/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750746688733.png" alt="Vivek_Sahu_21_0-1750746688733.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 2: Interface View - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_I_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This CDS view represents the Sales Org data and defines a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;self-association&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to establish the parent-child link.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Interface View: Sales Organization'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity zvs_i_sales as select from zvs_dt_sales
association to zvs_i_sales as _Parent on 
    $projection.ParentSalesOrg = _Parent.SalesOrgId
{
    key sales_org_id as SalesOrgId,
    name as Name,
    region as Region,
    country as Country,
    @Semantics.amount.currencyCode: 'Currency'
    revenue as Revenue,
    currency as Currency,
    parent_sales_org as ParentSalesOrg,
    
    _Parent
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 3: Define Hierarchy - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_I_SALES_HN&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using CDS hierarchy syntax, we now define a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;parent-child recursive hierarchy&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label:'Sales Organization Hierarchy'

define hierarchy zvs_i_sales_hn
  as parent child hierarchy (
    source zvs_i_sales
    child to parent association _Parent
    start where ParentSalesOrg is initial
    siblings order by SalesOrgId ascending
  )
{
    key SalesOrgId,
      ParentSalesOrg
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;This is where the magic happens. This hierarchy enables a recursive structure that can be rendered in Fiori Tree controls.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 4: Projection View - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_C_SALES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This is the final consumption layer that will be exposed as OData. The hierarchy is referenced using the &lt;/SPAN&gt;&lt;SPAN&gt;@OData.hierarchy.recursiveHierarchy&lt;/SPAN&gt;&lt;SPAN&gt; annotation.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Projection View: Sales Organization'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
  serviceQuality:#X,
  sizeCategory:#S,
  dataClass:#MIXED
}
@Metadata.allowExtensions:true
@Search.searchable:true

@OData.hierarchy.recursiveHierarchy: [{ entity.name: 'zvs_i_sales_hn' }]
define view entity zvs_c_sales as select from zvs_i_sales
association of many to one zvs_c_sales as _Parent
    on $projection.ParentSalesOrg = _Parent.SalesOrgId
{
    key SalesOrgId,
    @Search.defaultSearchElement: true
    Name,
    Region,
    Country,
    @Semantics.amount.currencyCode: 'Currency'
    Revenue,
    Currency,
    ParentSalesOrg,
    /* Associations */
    _Parent
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Screenshot:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_1-1750747123946.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278015iBDF0BBC47997F34B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_1-1750747123946.png" alt="Vivek_Sahu_21_1-1750747123946.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Metadata extension:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Metadata.layer: #CORE
annotate entity zvs_c_sales with
{
  @UI: {lineItem: [{ label: 'Sales org ID', position: 10 }],
        identification: [{ label: 'Sales org ID', position: 10 }]
  }
  SalesOrgId;

  @UI: {lineItem: [{ label: 'Sales org Name', position: 20 }],
    identification: [{ label: 'Sales org Name', position: 20 }]
  }
  Name;

  @UI: {lineItem: [{ label: 'Region', position: 30 }],
    identification: [{ label: 'Region', position: 30 }]
  }
  Region;

  @UI: {lineItem: [{ label: 'Country', position: 40 }],
    identification: [{ label: 'Country', position: 40 }]
  }
  Country;

  @UI: {lineItem: [{ label: 'Revenue', position: 50 }],
    identification: [{ label: 'Revenue', position: 50 }]
  }
  Revenue;

  @UI: {lineItem: [{ label: 'Currency', position: 60 }],
    identification: [{ label: 'Currency', position: 60 }]
  }
  Currency;

  @UI: {lineItem: [{ label: 'Parent Sales org ID', position: 70 }],
        identification: [{ label: 'Parent Sales org ID', position: 70 }]
  }
  ParentSalesOrg;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 6: Service Binding - &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZVS_C_SALES_ORG_V4&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;If you will choose service binding type as V2, So you will get one error:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750747822530.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278026iA1D4CE4AD614B646/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750747822530.png" alt="Vivek_Sahu_21_0-1750747822530.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;So select your Binding type as V4,&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_0-1750747270474.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278016iE5D2B66D56C3A4F5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_0-1750747270474.png" alt="Vivek_Sahu_21_0-1750747270474.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Now preview your application:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_1-1750747270475.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278018i775632EE7FE87274/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_1-1750747270475.png" alt="Vivek_Sahu_21_1-1750747270475.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_2-1750747270476.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278017i237BDF6C97864655/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_2-1750747270476.png" alt="Vivek_Sahu_21_2-1750747270476.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Vivek_Sahu_21_3-1750747270477.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278019i79A479F9D5D0F6D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Vivek_Sahu_21_3-1750747270477.png" alt="Vivek_Sahu_21_3-1750747270477.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;&lt;FONT size="6"&gt;Conclusion:&amp;nbsp;&lt;/FONT&gt;&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using CDS views and hierarchies in SAP S/4HANA is a simple and effective way to show the Sales Organization structure in a clear, tree-like format. It helps sales managers easily understand how different sales units are connected and how each one is performing. This setup is read-only, so the data stays safe, and it works well with Fiori apps for a smooth user experience.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Overall, this approach makes reporting and analysis easier without needing a lot of custom coding.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/tree-view-in-rap/ba-p/14135071"/>
    <published>2025-06-24T09:43:15.825000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/i-skipped-fiori-and-i-d-do-it-again/ba-p/14138288</id>
    <title>I Skipped Fiori (And I'd Do It Again)</title>
    <updated>2025-06-26T23:31:10.570000+02:00</updated>
    <author>
      <name>Alice_V</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/609259</uri>
    </author>
    <content>&lt;H3 id="ember576" id="toc-hId-1862449086"&gt;Or: How TRIZ Taught Me The Best UI Is No UI&lt;/H3&gt;&lt;P class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="Fiori-02-Untitled.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284552i9A02460A468C2F87/image-size/large?v=v2&amp;amp;px=999" role="button" title="Fiori-02-Untitled.png" alt="Fiori-02-Untitled.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Hey SAP folks! &lt;span class="lia-unicode-emoji" title=":waving_hand:"&gt;👋&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;Deep breath.&lt;/EM&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;I have a confession: I skipped Fiori. Just like I skipped SAP Smart Forms (jumping straight from SAPscript to Adobe Forms) and WebDynpro (leaping from SAPGUI to Fiori). Before you assume I'm just another anti-Fiori rebel, hear me out.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;I loved Fiori when it launched in 2013. Finally, SAP that didn't look like Windows 95! Responsive design! Tiles! But it's 2025, and we're still... clicking... through... tiles... to... do... everything.&lt;/P&gt;&lt;P class=""&gt;After working with Fiori since 2015, I had an epiphany that would make any TRIZ (innovation theory) person weep with joy:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"The ideal system is one that doesn't exist but its function is performed."&lt;/STRONG&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember583" id="toc-hId-1665935581"&gt;The "This Can't Be The Future" Moment&lt;/H3&gt;&lt;P class=""&gt;Picture this: &lt;STRONG&gt;9 AM Monday.&lt;/STRONG&gt; CFO pings you: &lt;EM&gt;"Need the latest P&amp;amp;L for company 1000 — compare this quarter to last, right now."&lt;/EM&gt;&lt;/P&gt;&lt;H3 id="ember585" id="toc-hId-1469422076"&gt;The Fiori Way™:&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;Open Fiori Launchpad (wait for tiles to load)&lt;/LI&gt;&lt;LI&gt;Find "Financial Statement Analysis" app&lt;/LI&gt;&lt;LI&gt;Click tile (wait for app to load)&lt;/LI&gt;&lt;LI&gt;Select company code from dropdown&lt;/LI&gt;&lt;LI&gt;Choose fiscal period and year&lt;/LI&gt;&lt;LI&gt;Apply profit center filters&lt;/LI&gt;&lt;LI&gt;Navigate through multiple screens&lt;/LI&gt;&lt;LI&gt;Export to Excel for actual analysis&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;Time&lt;/STRONG&gt;: ~4 minutes · 23 clicks · 8 screens · &lt;STRONG&gt;Frustration&lt;/STRONG&gt;: Daily&lt;/P&gt;&lt;H3 id="toc-hId-1272908571"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="ember588" id="toc-hId-1076395066"&gt;The 2025 Way:&lt;/H3&gt;&lt;PRE&gt;Me: Show me P&amp;amp;L breakdown for company code 1000, 
    this quarter vs last quarter

Claude: Q4 2024 vs Q3 2024 analysis ready:
        Revenue: +12% ($2.4M → $2.7M)
        EBITDA margin improved 3.2% 
        (cost optimization in logistics)
        Key driver: 18% increase in Product Line A&lt;/PRE&gt;&lt;P class=""&gt;&lt;STRONG&gt;Time&lt;/STRONG&gt;: 8 seconds · Clicks: 0 · &lt;STRONG&gt;Sanity&lt;/STRONG&gt;: Preserved&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember1392" id="toc-hId-879881561"&gt;How I Built The Bridge to Skip Ahead&lt;/H3&gt;&lt;P class=""&gt;I knew exactly what I wanted to track. After years with Fiori, I understood the game. So I built a Chrome extension that captures:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Every click, input, form submission&lt;/LI&gt;&lt;LI&gt;Every OData request triggered by those clicks&lt;/LI&gt;&lt;LI&gt;Complete UI5 context and metadata&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Atomic action decomposition with parametrization&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;The pattern was always there:&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&amp;nbsp; &amp;nbsp;User Action → UI Update &lt;/EM&gt;→ &lt;STRONG&gt;OData Call → Backend Logic&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;The TRIZ insight:&lt;/STRONG&gt; Why do we need the first two steps at all?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp;OData Call → Backend Logic&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;EM&gt;&amp;nbsp; &amp;nbsp;(Whisper: &lt;/EM&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/universal-odata-mcp-bridge-or-how-i-accidentally-made-15-000-enterprise/bc-p/14134777" target="_self"&gt;&lt;EM&gt;MCP - OData Bridge!)&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember598" id="toc-hId-683368056"&gt;The Shocking Truth: 80% Pure Waste&lt;/H3&gt;&lt;P class=""&gt;My extension analysed hundreds of Fiori sessions across different apps. The results?&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Real data from "Manage Detection Methods":&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Duration: 27.7 seconds&lt;/LI&gt;&lt;LI&gt;Clicks: 10&lt;/LI&gt;&lt;LI&gt;OData requests: 15&lt;/LI&gt;&lt;LI&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;annotations involved: 23&lt;/LI&gt;&lt;LI&gt;Actual business logic: Update one field&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;Pattern discovery:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;UI Layer:&lt;/STRONG&gt; 80% overhead (pure translation)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Business Logic:&lt;/STRONG&gt; 20% actual work&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Innovation opportunity:&lt;/STRONG&gt; Eliminate the 80%&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember604" id="toc-hId-486854551"&gt;Liberation from &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt; Annotation Hell&lt;/H3&gt;&lt;P class=""&gt;Remember wrestling with cryptic &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt; annotations? Hours spent debugging why fields don't appear, fighting responsive design, calling consultants when layouts break.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;When you eliminate the UI, you eliminate the entire annotation ecosystem.&lt;/STRONG&gt; Clean CDS views with pure business logic. No more &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;.* black magic.&lt;/P&gt;&lt;HR /&gt;&lt;H2 id="ember1409" id="toc-hId-161258327"&gt;The Three Pillars That Let Me Skip Fiori&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Parametrized Automation&lt;/STRONG&gt;→ Record once, replay forever with different parameters&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Intelligent Test Generation&lt;/STRONG&gt; → Describe in English, auto-generate reliable tests&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;AI-Ready Business Tools&lt;/STRONG&gt; → Convert interactions to semantic tools Claude understands&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember609" id="toc-hId-93827541"&gt;The Transformation Results&lt;/H3&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-26_20-21-31.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279549iF2F58D3CD6857F2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-26_20-21-31.png" alt="2025-06-26_20-21-31.png" /&gt;&lt;/span&gt;&lt;/DIV&gt;&lt;P class=""&gt;&lt;STRONG&gt;95% time reduction. 100% complexity elimination.&lt;/STRONG&gt;&lt;/P&gt;&lt;H2 id="ember612" id="toc-hId-115485674"&gt;The "But What About..." Section&lt;/H2&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about data visualization?"&lt;/STRONG&gt; Great question! Complex charts and graphs? Keep those Fiori apps. But for the 80% of interactions that are just CRUD operations? Dead.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about user permissions?"&lt;/STRONG&gt; The OData services already handle that. If you can't do something in Fiori, the AI can't do it either. Security preserved, clicking eliminated.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about complex workflows?"&lt;/STRONG&gt; You mean like "Create PO → Route for approval → Update inventory"? Watch this:&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;"But what about mobile?"&lt;/STRONG&gt; You know what works great on mobile? Chat. You know what doesn't? Trying to click tiny Fiori tiles on a phone screen.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember617" id="toc-hId--374430838"&gt;What This Means For You&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;For Functional Consultants:&lt;/STRONG&gt; Demonstrate a process once, get automation forever. No coding required.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Developers:&lt;/STRONG&gt; Focus on business logic. Let AI handle the interaction layer.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Managers:&lt;/STRONG&gt; Measure ROI in seconds saved × transactions per day. The math is beautiful.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;For Everyone:&lt;/STRONG&gt; The future isn't better UIs — it's no UIs at all.&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="ember619" id="toc-hId--570944343"&gt;Your Turn&lt;/H3&gt;&lt;P class=""&gt;&lt;SPAN&gt;Ready to skip your own Fiori apps&lt;/SPAN&gt;? The extension turns any SAP professional into an automation architect.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;What's your most time-wasting Fiori workflow?&lt;/STRONG&gt; Comment below with your biggest pain point — I'll analyse the potential time savings and show you the elimination path.&lt;/P&gt;&lt;P class=""&gt;The ideal interface is one that doesn't exist but gets the job done.&lt;/P&gt;&lt;P class=""&gt;Time to evolve beyond clicking. &lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;&lt;/P&gt;&lt;HR /&gt;&lt;P class=""&gt;&lt;STRONG&gt;Technical deep-dive and extension demo ➜ [Coming Soon]&lt;/STRONG&gt; &lt;STRONG&gt;Next week:&lt;/STRONG&gt; "How TRIZ Principle 13 Made SAP Read My Mind"&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="ember625" id="toc-hId--767457848"&gt;Quick Reference/Glossary: see in comments.&lt;/H3&gt;&lt;P class=""&gt;Let me know in comments what you want me to eliminate next &lt;span class="lia-unicode-emoji" title=":grinning_face_with_big_eyes:"&gt;😃&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/i-skipped-fiori-and-i-d-do-it-again/ba-p/14138288"/>
    <published>2025-06-26T23:31:10.570000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448</id>
    <title>General Data Splitter Tool for Optimized Efficient Data Processing and Scalable Integration</title>
    <updated>2025-07-02T14:22:03.206000+02:00</updated>
    <author>
      <name>ManaswiniPuli</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1940178</uri>
    </author>
    <content>&lt;P&gt;Struggling with handling massive data files in your integration flows? You're not alone! I'm Manaswini Puli , committed to break down complex integration challenges. In this hands-on guide, I'll walk you through using the&amp;nbsp;&lt;STRONG&gt;General Splitter tool&lt;/STRONG&gt;&amp;nbsp;in SAP Integration Suite to efficiently break down large messages into manageable segments—boosting processing speed and scalability while handling structured XML/JSON data with ease.&lt;/P&gt;&lt;P&gt;Follow along as we transform complex data streams into optimized, scalable workflows step by step. If this solves your data bottleneck challenges, I'd love to hear your thoughts in the comments.&lt;/P&gt;&lt;P&gt;Below is the complete&lt;STRONG&gt; iFlow&lt;/STRONG&gt;, featuring the use of a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; to process structured messages effectively, along with &lt;STRONG&gt;OData&lt;/STRONG&gt; integration for seamless data exchange.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_16-1750756348215.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278173iE626C00B60699642/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_16-1750756348215.png" alt="ManaswiniPuli_16-1750756348215.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1604196073"&gt;Step-by-Step Guide: General Data Splitter Tool for Optimized, Efficient Data Processing and Scalable Integration&lt;/H1&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: Access Integration Suite&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to &lt;STRONG&gt;SAP BTP Cockpit&lt;/STRONG&gt; using your registered email and password.&lt;/LI&gt;&lt;LI&gt;Go to your Subaccount and navigate to &lt;STRONG&gt;Subscriptions&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click on &lt;STRONG&gt;Integration Suite&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Create a Package&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In Integration Suite, go to the &lt;STRONG&gt;Design&lt;/STRONG&gt; tab and click &lt;STRONG&gt;Packages&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create Package&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Create an Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Open the package you created.&lt;/LI&gt;&lt;LI&gt;Click &lt;STRONG&gt;Create&lt;/STRONG&gt;, select &lt;STRONG&gt;Integration Flow&lt;/STRONG&gt;, enter a valid name and description, then click &lt;STRONG&gt;Create&lt;/STRONG&gt; to open the editor.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: Configure HTTPS Sender Adapter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_1-1750756263825.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278157i0EC4E6DDECD49BDC/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_1-1750756263825.png" alt="ManaswiniPuli_1-1750756263825.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;HTTPS sender&lt;/STRONG&gt; to receive incoming data.&lt;/LI&gt;&lt;LI&gt;Under the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Set the &lt;STRONG&gt;Address Path&lt;/STRONG&gt; to /Products/Details.&lt;/LI&gt;&lt;LI&gt;Set &lt;STRONG&gt;Authorization&lt;/STRONG&gt; to User Role.&lt;/LI&gt;&lt;LI&gt;Enter &lt;STRONG&gt;User Role&lt;/STRONG&gt;: ESBMessaging.send.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The Address Path defines the endpoint where the integration flow listens for incoming HTTPS requests, allowing external systems to send product data.&lt;/LI&gt;&lt;LI&gt;The ESBMessaging.send role ensures only authorized clients can access the endpoint.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Add General Splitter&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_2-1750756263830.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278155iC925069B590AFE2B/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_2-1750756263830.png" alt="ManaswiniPuli_2-1750756263830.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. Add&amp;nbsp; a &lt;STRONG&gt;General Splitter&lt;/STRONG&gt; step after the HTTPS sender.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2.&amp;nbsp; Under the &lt;STRONG&gt;Processing tab&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Expression Type&lt;/STRONG&gt; to &lt;STRONG&gt;XPath&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;:&lt;SPAN&gt;The payload is in XML format, so setting the expression type to XPath enables precise navigation and extraction of relevant data elements.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;XPath Expression&lt;/STRONG&gt; to &lt;STRONG&gt;//productIdentifier&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: productIdentifier is the key element in the payload that uniquely identifies each product, enabling extraction and individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;Set &lt;STRONG&gt;Grouping&lt;/STRONG&gt; to &lt;STRONG&gt;1&lt;/STRONG&gt;.&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;Grouping controls how many split messages are processed together.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: The payload will be taking 3 product Identifiers, so the messages will be divided into 3 groups, each containing a single product Identifier for individual processing.&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 6: Add Content Modifier&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_3-1750756263836.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278158i5039FF91F5DCC591/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_3-1750756263836.png" alt="ManaswiniPuli_3-1750756263836.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Content Modifier&lt;/STRONG&gt; step after the HTTPS sender.&lt;/LI&gt;&lt;LI&gt;Go to the &lt;STRONG&gt;Message Header&lt;/STRONG&gt; section and click &lt;STRONG&gt;Add&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Configure the header as follows:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Type&lt;/STRONG&gt;: XPath&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;: //productIdentifier&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;: java.lang.String&lt;/LI&gt;&lt;/UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;&lt;EM&gt;:&lt;/EM&gt; This extracts the productIdentifier value from the XML payload and stores it as a string in the message header for use in subsequent processing steps.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 7: Add OData Request-Reply&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add an &lt;STRONG&gt;OData Request-Reply&lt;/STRONG&gt; step after the &lt;STRONG&gt;General Splitter&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Connection&lt;/STRONG&gt; tab, configure the following:&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_4-1750756263842.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278159i1553BC749B29B9DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_4-1750756263842.png" alt="ManaswiniPuli_4-1750756263842.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Address&lt;/STRONG&gt;:&lt;A href="https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc" target="_blank" rel="noopener nofollow noreferrer"&gt;https://refapp-espm-ui-cf.cfapps.eu10.hana.ondemand.com/espm-cloud-web/espm.svc&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;&lt;/STRONG&gt;: This OData endpoint is used to retrieve product data based on the productIdentifier stored in the message header.&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3.In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure the following&lt;STRONG&gt;:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_5-1750756263847.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278160i326B8121202D57A2/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_5-1750756263847.png" alt="ManaswiniPuli_5-1750756263847.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Set Operation Details&lt;/STRONG&gt; to &lt;STRONG&gt;Query (GET)&lt;/STRONG&gt; to retrieve data.&lt;BR /&gt;&lt;STRONG&gt;Reason:&lt;/STRONG&gt; Using the GET query operation allows fetching specific data from the OData service efficiently based on defined query parameters.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Click Select&lt;/STRONG&gt; under &lt;STRONG&gt;Resource Path&lt;/STRONG&gt; to specify the data source:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 1: Connect to System&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_6-1750756263849.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278161i21860A4BCBC0DAF6/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_6-1750756263849.png" alt="ManaswiniPuli_6-1750756263849.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Choose &lt;STRONG&gt;Remote&lt;/STRONG&gt; as the connection source to connect to the external OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Step 2: Select Entity &amp;amp; Define Operation&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_7-1750756263852.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278163i7502D56265537ACA/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_7-1750756263852.png" alt="ManaswiniPuli_7-1750756263852.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;From the dropdown list, select the entity you want to query (for example, &lt;STRONG&gt;Products&lt;/STRONG&gt;).&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;After selecting the entity, specify the fields to optimize the data returned by the OData service.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Step 3: Configure Filter &amp;amp; Sorting&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_8-1750756263855.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278162i56DB2BFC26951F92/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_8-1750756263855.png" alt="ManaswiniPuli_8-1750756263855.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Under &lt;STRONG&gt;Filter By&lt;/STRONG&gt;, set the filter condition:&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;productId equals ${header.productIdentifier}&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Click Finish&lt;/STRONG&gt; to complete the configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Step 8: Add Gather &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_9-1750756263859.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278165iD7C0BE9EB3F7278D/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_9-1750756263859.png" alt="ManaswiniPuli_9-1750756263859.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Add a &lt;STRONG&gt;Gather&lt;/STRONG&gt; step at the end of the flow, after the OData Request-Reply.&lt;/LI&gt;&lt;LI&gt;In the &lt;STRONG&gt;Processing&lt;/STRONG&gt; tab, configure:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Incoming Format&lt;/STRONG&gt;: XML&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Aggregation Algorithm&lt;/STRONG&gt;: Combine&lt;BR /&gt;&lt;STRONG&gt;&lt;EM&gt;Reason&lt;/EM&gt;:&lt;/STRONG&gt; The input messages are in XML format, and the Combine algorithm joins them into one XML message. This helps gather all individual responses into a single output.&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;STRONG&gt;Step 9: Deploy and Test Integration Flow&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Deploy&lt;/STRONG&gt; your integration flow from the editor.&lt;/LI&gt;&lt;LI&gt;After deployment, get the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; generated for the HTTPS sender adapter.&lt;/LI&gt;&lt;LI&gt;Open &lt;STRONG&gt;Postman&lt;/STRONG&gt; to test the integration flow.&lt;/LI&gt;&lt;LI&gt;Set the &lt;STRONG&gt;HTTP method&lt;/STRONG&gt; to &lt;STRONG&gt;POST&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Use the &lt;STRONG&gt;endpoint URL&lt;/STRONG&gt; as the request URL.&lt;/LI&gt;&lt;LI&gt;Under &lt;STRONG&gt;Authorization&lt;/STRONG&gt;, select &lt;STRONG&gt;OAuth 2.0&lt;/STRONG&gt; and provide the following details from the service key created for the integration flow:&lt;/LI&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Client ID&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Client Secret&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Token URL&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_17-1750756556074.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278174i70969EA3FCA5B331/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_17-1750756556074.png" alt="ManaswiniPuli_17-1750756556074.png" /&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;7.In the &lt;STRONG&gt;Body&lt;/STRONG&gt; tab, provide the XML payload or data you want to send.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;

&amp;lt;root&amp;gt;

  &amp;lt;record&amp;gt;

    &amp;lt;Products&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-2000&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1138&amp;lt;/productIdentifier&amp;gt;

      &amp;lt;productIdentifier&amp;gt;HT-1137&amp;lt;/productIdentifier

    &amp;lt;/Products&amp;gt;

  &amp;lt;/record&amp;gt;

&amp;lt;/root&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 8.Send the request and verify the response.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 10: Check the Processed Output&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The input payload includes 3 productIdentifier entries.&lt;/LI&gt;&lt;LI&gt;With the General Splitter configured to group by 1, the message is split into 3 individual groups, each containing 1 product.&lt;/LI&gt;&lt;LI&gt;The following is Group 1, containing 1 productIdentifier as a result of the splitter configuration.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_11-1750756263866.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278164i9B43F8BCD2767D5E/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_11-1750756263866.png" alt="ManaswiniPuli_11-1750756263866.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-square"&gt;&lt;LI&gt;The following is&amp;nbsp; the OData response, which returns the &lt;STRONG&gt;product details&lt;/STRONG&gt; for that specific productIdentifier.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_12-1750756263873.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278169iCB80B0664EA864C0/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_12-1750756263873.png" alt="ManaswiniPuli_12-1750756263873.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;At the Gather step, these messages are reassembled into a single message that contains all 3 processed product entries.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_13-1750756263878.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278168iC873367E0AE90592/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_13-1750756263878.png" alt="ManaswiniPuli_13-1750756263878.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ManaswiniPuli_14-1750756263883.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278167i0A50803457C44552/image-size/large?v=v2&amp;amp;px=999" role="button" title="ManaswiniPuli_14-1750756263883.png" alt="ManaswiniPuli_14-1750756263883.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Disclaimer:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;All the views and opinions in this blog are my own and are made in my personal capacity. SAP shall not be responsible or liable for any of the contents published in this blog.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/general-data-splitter-tool-for-optimized-efficient-data-processing-and/ba-p/14135448"/>
    <published>2025-07-02T14:22:03.206000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/send-odata-batch-requests-in-sap-build-apps-json/ba-p/14146262</id>
    <title>Send OData Batch Requests in SAP Build Apps (JSON)</title>
    <updated>2025-07-07T17:43:44.496000+02:00</updated>
    <author>
      <name>Dan_Wroblewski</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/72</uri>
    </author>
    <content>&lt;P&gt;Many people have asked about sending &lt;A href="https://www.odata.org/documentation/odata-version-2-0/batch-processing/\" target="_self" rel="nofollow noopener noreferrer"&gt;OData batch requests&lt;/A&gt; via SAP Build Apps. It can be done, if your API accepts JSON-formatted payloads for batch requests.&lt;/P&gt;&lt;P&gt;Just use the &lt;STRONG&gt;HTTP Destination Request&lt;/STRONG&gt; flow function.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_1-1751902390476.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283554i8D15662D9C2687E2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Dan_Wroblewski_1-1751902390476.png" alt="Dan_Wroblewski_1-1751902390476.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Then set the following:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Destination:&lt;/STRONG&gt; Create an integration with your destination that points to your API (no need to specify any entities).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Method:&lt;/STRONG&gt; POST&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Body Type:&lt;/STRONG&gt; JSON&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Request Body:&lt;/STRONG&gt; Just define a page variable with the JSON schema you need, and set the values with a Set Page Variable flow function. More on this below.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Path:&lt;/STRONG&gt; /$batch&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Headers:&lt;/STRONG&gt; Content-Type = application/json&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_0-1751902345026.png" style="width: 343px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283553iBB0E1E2BA09DF0D8/image-dimensions/343x791?v=v2" width="343" height="791" role="button" title="Dan_Wroblewski_0-1751902345026.png" alt="Dan_Wroblewski_0-1751902345026.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1863312957"&gt;Request Body&lt;/H3&gt;&lt;P&gt;The request body would be something like this (here we are create new records):&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
    "requests": [
        {
            "id": "1",
            "method": "POST",
            "url": "/Orders",
            "headers": {
                "content-type": "application/json; odata.metadata=minimal; odata.streaming=true",
                "odata-version": "4.0"
            },
            "body": {
                "customer": "JSON1",
                "date": "2021-06-30T00:00:00Z",
                "status": "Initiated",
                "total": 99,
                "currency_code": "USD"
            }
        },
        {
            "id": "2",
            "method": "POST",
            "url": "/Orders",
            "headers": {
                "content-type": "application/json; odata.metadata=minimal; odata.streaming=true",
                "odata-version": "4.0"
            },
            "body": {
                "customer": "JSON2",
                "date": "2021-06-30T00:00:00Z",
                "status": "Initiated",
                "total": 100,
                "currency_code": "USD"
            }
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;For my test, I already had the JSON above so I just put it in a JavaScript component, parsed it, and output it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_2-1751902519819.png" style="width: 1188px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283556iFCB3B2EE2224F30E/image-dimensions/1188x369?v=v2" width="1188" height="369" role="button" title="Dan_Wroblewski_2-1751902519819.png" alt="Dan_Wroblewski_2-1751902519819.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But you could create a page variable, and in your app populate the variable with your data. Then you could use this page variable for the request body.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_3-1751902759936.png" style="width: 1240px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283557i6735CA49244725AF/image-dimensions/1240x561?v=v2" width="1240" height="561" role="button" title="Dan_Wroblewski_3-1751902759936.png" alt="Dan_Wroblewski_3-1751902759936.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Unfortunately, I could not find a way to use the more traditional multipart/mixed payload format from SAP Build Apps. If you can find a way, let us know.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_4-1751902871383.png" style="width: 1034px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283559i7C7CE92F1B97EE13/image-dimensions/1034x618?v=v2" width="1034" height="618" role="button" title="Dan_Wroblewski_4-1751902871383.png" alt="Dan_Wroblewski_4-1751902871383.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/send-odata-batch-requests-in-sap-build-apps-json/ba-p/14146262"/>
    <published>2025-07-07T17:43:44.496000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-s-4hana-cloud-data-via-sap-build-code-on-the-sap-btp-platform/ba-p/14146303</id>
    <title>Accessing S/4HANA Cloud Data via SAP Build Code on the SAP BTP Platform</title>
    <updated>2025-07-16T11:09:48.847000+02:00</updated>
    <author>
      <name>SubramaniyanVenkatraman</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1536504</uri>
    </author>
    <content>&lt;P&gt;Recently, I had the opportunity to contribute to the development of an agentic use case, where I need to fetch data from an S/4HANA Cloud system using existing OData services.&amp;nbsp;This experience gave me hands-on exposure to working with S/4HANA Cloud and understanding how to integrate its data seamlessly into an external application.&lt;/P&gt;&lt;P&gt;In this blog post, I’ll walk you through the step-by-step process of retrieving data from an S/4HANA Cloud system using OData.&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is SAP Business Technology Platform?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;SAP BTP (Business Technology Platform) is SAP’s unified platform-as-a-service (PaaS) offering that provides tools, services, and runtimes for building, integrating, and extending SAP and non-SAP applications in the cloud.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is SAP Cloud Connector?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;The SAP Cloud Connector is a key component in the SAP Business Technology Platform (BTP) landscape. It acts as a secure bridge between your on-premise systems (like SAP S/4HANA on-prem or other internal services) and SAP BTP or cloud-based applications.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;What is Destination Service?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;The SAP Destination Service is a managed service on SAP Business Technology Platform (BTP) that simplifies and secures how your cloud applications connect to remote systems such as SAP S/4HANA Cloud, on-premise systems, or third-party APIs.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="3"&gt;Instead of hardcoding URLs, credentials, and connection details inside your app, you create a destination configuration in BTP and refer to it in your code.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Download and Install SAP Cloud Connector&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;You can download the Cloud Connector compatible with your machine from the following link: &lt;A href="https://tools.hana.ondemand.com/#cloud" target="_blank" rel="noopener nofollow noreferrer"&gt;https://tools.hana.ondemand.com/#cloud&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751905832976.png" style="width: 594px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283580iBD425B307D084A40/image-dimensions/594x220?v=v2" width="594" height="220" role="button" title="Subu1_0-1751905832976.png" alt="Subu1_0-1751905832976.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 1. Cloud Connector download&lt;/P&gt;&lt;P&gt;For Windows, you can choose between the ZIP archive and the MSI installer. The ZIP archive is suitable for development use cases, while the MSI installer is recommended for productive environments, as it installs the Cloud Connector as a service on the server.&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Initial Configuration&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;To configure the SCC, open a browser and navigate to:&lt;BR /&gt;https://&amp;lt;hostname&amp;gt;:8443&lt;/P&gt;&lt;P&gt;Replace &amp;lt;hostname&amp;gt; with the name of the machine where the connector is installed. The port number should match the one configured during installation, by default, it is &lt;STRONG&gt;8443&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;To find the hostname of your machine, open Command Prompt and enter:&lt;BR /&gt;hostname&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751906070203.png" style="width: 455px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283584iA7C98747F6067952/image-dimensions/455x281?v=v2" width="455" height="281" role="button" title="Subu1_0-1751906070203.png" alt="Subu1_0-1751906070203.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 2. Cloud Connector Login&amp;nbsp;&lt;/P&gt;&lt;P&gt;Enter the default credentials (case-sensitive) and click Login:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Username&lt;/STRONG&gt;: Administrator&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password&lt;/STRONG&gt;: manage&lt;/P&gt;&lt;P&gt;Upon your first login, you'll be prompted to change the password. After updating it, select Master as the installation type and click Save.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751906070207.png" style="width: 647px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283583iC2DF2AE585678D97/image-dimensions/647x189?v=v2" width="647" height="189" role="button" title="Subu1_1-1751906070207.png" alt="Subu1_1-1751906070207.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 3. Reset password for SCC&lt;/P&gt;&lt;P&gt;The next step is to add your BTP subaccount to the Cloud Connector.&lt;/P&gt;&lt;P&gt;Select &lt;STRONG&gt;"Choose Manually"&lt;/STRONG&gt; to enter your subaccount details manually.&lt;/P&gt;&lt;P&gt;On the following screen, provide the required information about your BTP subaccount. This is necessary to establish a secure tunnel between the Cloud Connector (SCC) and your SAP BTP subaccount.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Region:&lt;/STRONG&gt; The region where your subaccount was created (see the picture below).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Subaccount:&lt;/STRONG&gt; Your subaccount ID (see the picture below).&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Login E-Mail:&lt;/STRONG&gt; The email address used when creating the BTP account.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password:&lt;/STRONG&gt; The password used when creating the BTP account.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_2-1751906070208.png" style="width: 647px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283582iBBB5E81F0FBE019B/image-dimensions/647x207?v=v2" width="647" height="207" role="button" title="Subu1_2-1751906070208.png" alt="Subu1_2-1751906070208.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 4. Connect BTP Sub Account to SCC&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_3-1751906070210.png" style="width: 577px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283585i2B634AC444043702/image-dimensions/577x423?v=v2" width="577" height="423" role="button" title="Subu1_3-1751906070210.png" alt="Subu1_3-1751906070210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 5: Cloud Connector – BTP Sub Account Registration&lt;/P&gt;&lt;P&gt;Once successfully added your sub account you will see the screenshot as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_4-1751906070217.png" style="width: 653px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283586i9962B65516FCA896/image-dimensions/653x320?v=v2" width="653" height="320" role="button" title="Subu1_4-1751906070217.png" alt="Subu1_4-1751906070217.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 6. Successful Sub Account Registration&lt;/P&gt;&lt;P&gt;This shows that you have successfully connected your sub account with the cloud connector.&lt;/P&gt;&lt;P&gt;Now its time to connect your On-Premise system.&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Connecting “Cloud to On-Premise” Connection:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Connect your on-premise system to the cloud connector so that it can be access in Business Technology Platform.&lt;/P&gt;&lt;P&gt;Under the sub account ID in your cloud connector click on Cloud to On-Premise in the left menu and then click on ‘+’ sign to add the system.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_5-1751906070219.png" style="width: 654px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283587i38320B5D070D0339/image-dimensions/654x147?v=v2" width="654" height="147" role="button" title="Subu1_5-1751906070219.png" alt="Subu1_5-1751906070219.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 7. Add S/4 HANA Cloud System in SCC&lt;/P&gt;&lt;P&gt;In the pop up that open choose ABAP System as the backend type and choose protocol as HTTP.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_6-1751906070220.png" style="width: 594px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283588i08233CF834511404/image-dimensions/594x266?v=v2" width="594" height="266" role="button" title="Subu1_6-1751906070220.png" alt="Subu1_6-1751906070220.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 8. Add Back End system type&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_7-1751906070221.png" style="width: 575px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283589i90C980499D916BBB/image-dimensions/575x250?v=v2" width="575" height="250" role="button" title="Subu1_7-1751906070221.png" alt="Subu1_7-1751906070221.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 9: Define Protocol for Backend Connection&lt;/P&gt;&lt;P&gt;For the “internal host” use the hostname or the ip address of the ABAP system and its corresponding ICM port number.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_8-1751906070222.png" style="width: 570px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283590i9C96AB2604DBE652/image-dimensions/570x254?v=v2" width="570" height="254" role="button" title="Subu1_8-1751906070222.png" alt="Subu1_8-1751906070222.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 10: Configuring System Host Details&lt;/P&gt;&lt;P&gt;The “Virtual Host” is the hostname you'll use within BTP. You can either use the default value, which matches the Internal Host, or choose a different, less identifiable name.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_23-1751906803846.png" style="width: 589px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283613iB9477F9D55A9A81A/image-dimensions/589x258?v=v2" width="589" height="258" role="button" title="Subu1_23-1751906803846.png" alt="Subu1_23-1751906803846.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 11. Configuring Virtual Host&lt;/P&gt;&lt;P&gt;We'll leave the “Principal Type” set to “None” for now.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_24-1751906857120.png" style="width: 562px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283614iE8E706CF9446CAD2/image-dimensions/562x250?v=v2" width="562" height="250" role="button" title="Subu1_24-1751906857120.png" alt="Subu1_24-1751906857120.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 12. Configure Principal Propagation&lt;/P&gt;&lt;P&gt;Select to use virtual host for “Host in Request Header”.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_25-1751906921412.png" style="width: 572px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283615iCFF53A0C11EBF11C/image-dimensions/572x254?v=v2" width="572" height="254" role="button" title="Subu1_25-1751906921412.png" alt="Subu1_25-1751906921412.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 13: Selecting Virtual Host Option&lt;/P&gt;&lt;P&gt;Provide the SAP ABAP system name.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_12-1751906070226.png" style="width: 552px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283596i7EFA72A5119A333C/image-dimensions/552x243?v=v2" width="552" height="243" role="button" title="Subu1_12-1751906070226.png" alt="Subu1_12-1751906070226.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 14. Selecting ABAP System&amp;nbsp;&lt;/P&gt;&lt;P&gt;Check the summary and click on finish.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_13-1751906070227.png" style="width: 575px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283594i5E799C382D674F96/image-dimensions/575x257?v=v2" width="575" height="257" role="button" title="Subu1_13-1751906070227.png" alt="Subu1_13-1751906070227.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 15. Summary&lt;/P&gt;&lt;P&gt;After successfully creating mapping we need to create resource which is the actual service. Click on the ‘+’ sign under the resources section.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_14-1751906070230.png" style="width: 603px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283595iDFF1FCD9D6E57CBE/image-dimensions/603x175?v=v2" width="603" height="175" role="button" title="Subu1_14-1751906070230.png" alt="Subu1_14-1751906070230.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 16: Resource&amp;nbsp;&lt;/P&gt;&lt;P&gt;To grant the subaccount access to all services, enter &lt;STRONG&gt;/sap&lt;/STRONG&gt; in the URL path and choose &lt;STRONG&gt;"Path and All Sub-Paths"&lt;/STRONG&gt; under the Access Policy setting. This setup can be adjusted later to restrict access to specific resources, which is strongly advised for production environments.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_15-1751906070231.png" style="width: 553px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283597iEF74383BD358B23B/image-dimensions/553x336?v=v2" width="553" height="336" role="button" title="Subu1_15-1751906070231.png" alt="Subu1_15-1751906070231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 17: Adding a New Resource&lt;/P&gt;&lt;P&gt;Now check the resource available and ensure that the backend system is reachable as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_16-1751906070235.png" style="width: 595px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283598iBC0AE0FD4DA58552/image-dimensions/595x171?v=v2" width="595" height="171" role="button" title="Subu1_16-1751906070235.png" alt="Subu1_16-1751906070235.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 18. Check for connection status&lt;/P&gt;&lt;P&gt;Once the system is reachable you will see the status as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_17-1751906070238.png" style="width: 609px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283599i293D8DF11A6808FF/image-dimensions/609x186?v=v2" width="609" height="186" role="button" title="Subu1_17-1751906070238.png" alt="Subu1_17-1751906070238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 19: Verifying System Reachability&lt;/P&gt;&lt;P&gt;If you face some issues in reaching backend system maintain the below configurations at&lt;/P&gt;&lt;P&gt;“Run-&amp;gt;drivers-&amp;gt;Click on ok-&amp;gt; Go to etc folder-&amp;gt;edit hosts”&lt;/P&gt;&lt;P&gt;Add the host details at the bottom and click on SAVE as an example below:&lt;/P&gt;&lt;P&gt;&amp;nbsp;127.54.99.98&amp;nbsp; &amp;nbsp; test.com&lt;/P&gt;&lt;P&gt;If not able to edit copy paste in different location and then change and paste again.&lt;/P&gt;&lt;P&gt;Now you will be able to see the connected CC in your BTP account as below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_18-1751906070243.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283602iF17E5BA900AD483A/image-dimensions/633x313?v=v2" width="633" height="313" role="button" title="Subu1_18-1751906070243.png" alt="Subu1_18-1751906070243.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 20. Cloud Connector status in BTP&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Create a Destination Service&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Now lets create a destination service.&lt;/P&gt;&lt;P&gt;BTP (Business Technology Platform) destinations serve as configuration endpoints that define how to establish secure connections with external systems or services. Commonly used in cloud environments, these destinations facilitate communication between different cloud-based applications by specifying connection parameters like endpoint URLs, authentication methods, and additional settings. You can create and manage BTP destinations through the SAP BTP Cockpit or by using the SAP Cloud SDK. They are applicable in various use cases, including accessing external data sources, calling third-party web services, or delivering notifications to external platforms.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_19-1751906070248.png" style="width: 598px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283601i72C5196420226574/image-dimensions/598x296?v=v2" width="598" height="296" role="button" title="Subu1_19-1751906070248.png" alt="Subu1_19-1751906070248.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 21: Creating a Destination in SAP BTP&lt;/P&gt;&lt;P&gt;Maintain the below configuration details:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;: Name of your destination&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;: HTTP / HTTPS&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;URL&lt;/STRONG&gt;: Enter the virtual host name maintained in Cloud Connector&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;: Basic Authentication&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;User&lt;/STRONG&gt;: Enter the backend username&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Password&lt;/STRONG&gt;: Enter the corresponding password&lt;/P&gt;&lt;P&gt;In the additional properties maintain the below pairs:&lt;/P&gt;&lt;P&gt;"WebIDEEnabled": "true"&lt;/P&gt;&lt;P&gt;“HTML5.DynamicDestination” :"true"&lt;/P&gt;&lt;P&gt;"AppgyverEnabled" :"true"&lt;/P&gt;&lt;P&gt;“sap-platform”:”ABAP”&lt;/P&gt;&lt;P&gt;“sap.build.usage”:”true”&lt;/P&gt;&lt;P&gt;“webIDEUsage”:”odata_gen”&lt;/P&gt;&lt;P&gt;“sap-client”:”000”&lt;/P&gt;&lt;P&gt;These parameters are mantatory in certain ways to consume the destination service via SAP Build Code.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_20-1751906070251.png" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283600i0B04CDAE458CE41B/image-dimensions/600x228?v=v2" width="600" height="228" role="button" title="Subu1_20-1751906070251.png" alt="Subu1_20-1751906070251.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 22. BTP Destination Service&lt;/P&gt;&lt;P&gt;Click on “Save” to save the destination and click on Check Destination to check if the connection is successful.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_21-1751906070255.png" style="width: 604px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283603iDC2D92901035ED43/image-dimensions/604x214?v=v2" width="604" height="214" role="button" title="Subu1_21-1751906070255.png" alt="Subu1_21-1751906070255.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 23. Check Connection&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;Create a SAP Build Code Project&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Now lets create a SAP Build code project. Go to Instances and Subscription and click on SAP Build Code. Hope the SAP Build code is already subscribed to your sub account.&lt;/P&gt;&lt;P&gt;In the SAP Build Code click on Create to create a new project.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_22-1751906070263.png" style="width: 600px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283604i124A998BDCA1F71F/image-dimensions/600x216?v=v2" width="600" height="216" role="button" title="Subu1_22-1751906070263.png" alt="Subu1_22-1751906070263.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 24. Create a SAP Build Code project&lt;/P&gt;&lt;P&gt;Click on Application -&amp;gt; Next -&amp;gt; Full Stack -&amp;gt; Next -&amp;gt; Full stack Node.JS&lt;/P&gt;&lt;P&gt;Enter the name of the project and click on Review to review the details and then click on Create to create the project.&lt;/P&gt;&lt;P&gt;Once the project is created copy paste the below code:&lt;/P&gt;&lt;P&gt;For demonstration purposes, I have used an example involving the retrieval and modification of Purchase Order data.&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;from flask import Flask, request, jsonify
import os
import requests
import json
import base64

# ---------------------------------------------------------------------
# Application Initialization
# ---------------------------------------------------------------------
app = Flask(__name__)

# ---------------------------------------------------------------------
# Fetching port details
# ---------------------------------------------------------------------
cf_port = os.getenv("PORT")

# ---------------------------------------------------------------------
# Getting OAuth Token
# ---------------------------------------------------------------------
def get_oauth_token(destination_credentials):
    oauth_url = destination_credentials['url'] + "/oauth/token"
    client_id = destination_credentials['clientid']
    client_secret = destination_credentials['clientsecret']

    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    response = requests.post(oauth_url, data=data, headers=headers)

    if response.status_code == 200:
        return response.json()['access_token']
    else:
        raise Exception(f"Failed to get OAuth token: {response.status_code} - {response.text}")

# ---------------------------------------------------------------------
# Method to fetch records 
# ---------------------------------------------------------------------
def get_records(lv_dest, lv_string):
    # Get VCAP_SERVICES
    vcap_services = json.loads(os.getenv("VCAP_SERVICES"))

    # Get credentials for Destination service
    destination_credentials = vcap_services['destination'][0]['credentials']
    connectivity_credentials = vcap_services['connectivity'][0]['credentials']
    destination_name = lv_dest
    dest_token = get_oauth_token(destination_credentials)

    # Fetch destination config
    dest_url = f"{destination_credentials['uri']}/destination-configuration/v1/destinations/{destination_name}"
    headers = {"Authorization": f"Bearer {dest_token}"}
    dest_response = requests.get(dest_url, headers=headers)
    dest_response.raise_for_status()
    dest_config = dest_response.json()['destinationConfiguration']

    #  Build full URL
    target_url = dest_config['URL'] + lv_string

    # Token for Connectivity Proxy
    conn_token = get_oauth_token(connectivity_credentials)

    # Use Connectivity Proxy (Cloud Connector)
    proxies = {
        "http": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}",
        "https": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}"
    }

    backend_user = dest_config['User']
    backend_password = dest_config['Password']
    auth_string = f"{backend_user}:{backend_password}"
    auth_encoded = base64.b64encode(auth_string.encode()).decode()

    # Headers for proxy request
    headers = {
        "Accept": "application/json",
        "Proxy-Authorization": f"Bearer {conn_token}",
        "Authorization": f"Basic {auth_encoded}"
    }

    if 'CloudConnectorLocationId' in dest_config:
        headers['SAP-Connectivity-SCC-Location_ID'] = dest_config['CloudConnectorLocationId']

    # Make the proxied request
    response = requests.get(target_url, headers=headers, proxies=proxies)
    response.raise_for_status()
    print("Status:", response.status_code)
    print("Headers:", response.headers)
    print("Body:", response.text)
    return response.json()

# ---------------------------------------------------------------------
# Method to update a record
# ---------------------------------------------------------------------
def update_record(destination_name, path, payload):
    # Get VCAP_SERVICES
    vcap_services = json.loads(os.getenv("VCAP_SERVICES"))

    # Get credentials for Connectivity and Destination service
    destination_credentials = vcap_services['destination'][0]['credentials']
    connectivity_credentials = vcap_services['connectivity'][0]['credentials']
    dest_token = get_oauth_token(destination_credentials)

    # Destination config
    dest_url = f"{destination_credentials['uri']}/destination-configuration/v1/destinations/{destination_name}"
    headers = {"Authorization": f"Bearer {dest_token}"}
    dest_response = requests.get(dest_url, headers=headers)
    dest_response.raise_for_status()
    dest_config = dest_response.json()['destinationConfiguration']

    #  Build full URL
    target_url = dest_config['URL'] + path

    # Token for Connectivity Proxy
    conn_token = get_oauth_token(connectivity_credentials)

    # Use Connectivity Proxy (Cloud Connector)
    proxies = {
        "http": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}",
        "https": f"http://{connectivity_credentials['onpremise_proxy_host']}:{connectivity_credentials['onpremise_proxy_port']}"
    }

    backend_user = dest_config['User']
    backend_password = dest_config['Password']
    auth_string = f"{backend_user}:{backend_password}"
    auth_encoded = base64.b64encode(auth_string.encode()).decode()

    # Headers for proxy request
    common_headers = {
        "Proxy-Authorization": f"Bearer {conn_token}",
        "Authorization": f"Basic {auth_encoded}",
        "Accept": "application/json"
    }

    if 'CloudConnectorLocationId' in dest_config:
        common_headers['SAP-Connectivity-SCC-Location_ID'] = dest_config['CloudConnectorLocationId']

    # Fetch CSRF Token and Cookies
    token_headers = common_headers.copy()
    token_headers["x-csrf-token"] = "Fetch"

    session = requests.Session()
    token_response = session.get(target_url, headers=token_headers, proxies=proxies)

    if token_response.status_code != 200:
        return token_response.status_code, token_response.text

    csrf_token = token_response.headers.get("x-csrf-token")
    if not csrf_token:
        return 403, "CSRF token not returned"

    # Send PATCH with token and cookies
    update_headers = common_headers.copy()
    update_headers["x-csrf-token"] = csrf_token
    update_headers["Content-Type"] = "application/json"

    # Use session to preserve cookies
    patch_response = session.patch(target_url, headers=update_headers, json=payload, proxies=proxies)

    return patch_response.status_code, patch_response.text

# ---------------------------------------------------------------------
# Update endpoint (POST or GET for testing)
# ---------------------------------------------------------------------
@app.route('/update_data', methods=['GET', 'POST'])
def update_data():
    if request.method == 'GET':
        purchase_order = "12345"
        item = "10"
        update_payload = {
            "DocumentCurrency": "EUR",
        }
    else:
        if not request.is_json:
            return jsonify({"error": "Request must be application/json"}), 415

        data = request.get_json()
        purchase_order = data.get("PurchaseOrder")
        item = data.get("PurchaseOrderItem")

        if not purchase_order or not item:
            return jsonify({"error": "Missing PurchaseOrder or PurchaseOrderItem"}), 400

        item = str(item).zfill(5)  # Pad item number to 5 digits

        update_payload = {
            "OrderQuantity": 15,
        }

    path = f"/sap/opu/odata4/sap/api_purchaseorder_2/srvd_a2x/sap/purchaseorder/0001/PurchaseOrderItem(PurchaseOrder='{purchase_order}',PurchaseOrderItem='{item}')?sap-client=001&amp;amp;$format=json" #Change the OData URL

    status_code, response_text = update_record('Destination_name', path, update_payload) #Modify Destination name

    return jsonify({
        "status_code": status_code,
        "response": response_text
    })

# ---------------------------------------------------------------------
# Fetch record endpoint
# ---------------------------------------------------------------------
@app.route('/fetch_data', methods=['GET'])
def fetch_data():
    lv_request = get_records('Destination_name', '/sap/opu/odata4/sap/api_purchaseorder_2/srvd_a2x/sap/purchaseorder/0001/PurchaseOrderItem?sap-client=001&amp;amp;$format=json') #Change Destination name and OData URL
    return jsonify(lv_request)

# ---------------------------------------------------------------------
# Home page
# ---------------------------------------------------------------------
@app.route('/', methods=['GET'])
def home():
    lv_return = {
        "result": [
            {
                'message':  'Welcome to the homepage!',
                'Fetch_data' : 'Use /fetch_data',
                'Update_data' : 'Use /update_data'
            }
        ]
    }
    return jsonify(status='200', replies=lv_return)


# ---------------------------------------------------------------------
# Main method
# ---------------------------------------------------------------------
if __name__ == '__main__':
# If the app is running locally
    if cf_port is None:
# Use port 5000
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
# Else use cloud foundry default port
        app.run(host='0.0.0.0', port=int(cf_port), debug=False)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Create a manifest.yml file and paste the below:&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;---
applications:
- name: data_read  #Replace with your app name
  random-route: true
  path: ./
  memory: 1028M
  buildpacks:
  - python_buildpack
  command: python backend.py  #Python file name
  services:
  - service_name_001
  env:
    PYTHON_VERSION: 3.11.10&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In the manifest.yml file above, most sections are self-explanatory and have been annotated with comments. The key part to focus on is the services section. To use the configured destination service, you need to create an instance of it. This service is crucial when your application needs to interact with remote systems, such as SAP S/4HANA Cloud, on-premise systems, or third-party APIs.&lt;/P&gt;&lt;P&gt;The destination service is bound to you app so that it can access the destination definition.&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;What happens behind the scene?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;When you bind the Destination Service to your app:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;BTP injects the credentials into your app's environment as VCAP_SERVICES&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Your app code can use a destination name to resolve:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;The target URL&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Authentication method (Basic, OAuth2, etc.)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Proxy type (Internet or OnPremise)&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;If you are connecting to an on-premise system, it routes through SAP Cloud Connector.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;How to create a service in BTP?&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL class="lia-list-style-type-disc"&gt;&lt;LI&gt;Log in to SAP BTP Cockpit&lt;/LI&gt;&lt;LI&gt;Navigate to your subaccount → Cloud Foundry environment → Space.&lt;/LI&gt;&lt;LI&gt;Go to the Services -&amp;gt; Instances&amp;nbsp;section.&lt;/LI&gt;&lt;LI&gt;Click Create Instance.&lt;/LI&gt;&lt;LI&gt;Choose a Service&lt;SPAN&gt; (e.g.:&lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;"Destination" for Destination Service&lt;/LI&gt;&lt;LI&gt;"Connectivity" for accessing on-premise systems&lt;/LI&gt;&lt;LI&gt;"xsuaa" for user authentication/authorization&lt;/LI&gt;&lt;LI&gt;"hana-cloud" or postgresql for databases&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Choose a plan (e.g. lite, standard, etc.)&lt;/LI&gt;&lt;LI&gt;Enter the name&lt;/LI&gt;&lt;LI&gt;Click Create&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_0-1751923651041.png" style="width: 593px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283657i69E3B1708C898F44/image-dimensions/593x555?v=v2" width="593" height="555" role="button" title="Subu1_0-1751923651041.png" alt="Subu1_0-1751923651041.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 25. Create a service&lt;/P&gt;&lt;P&gt;Alternatively you can also create a service using bash command as below:&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf create-service destination lite service_name_001 #Replace with your service name&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once the coding is complete, you can proceed with testing the functionality.&lt;/P&gt;&lt;P&gt;Using terminal login to cloud foundry, use the command&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf login&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751911193537.png" style="width: 574px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283623i457FA664D3A81A60/image-dimensions/574x158?v=v2" width="574" height="158" role="button" title="Subu1_1-1751911193537.png" alt="Subu1_1-1751911193537.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Fig 26. Login to CF&lt;/P&gt;&lt;P&gt;Once the login is successful you will see the below message&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_1-1751923900662.png" style="width: 583px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283658iDFB1A4C327B6F3D9/image-dimensions/583x169?v=v2" width="583" height="169" role="button" title="Subu1_1-1751923900662.png" alt="Subu1_1-1751923900662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 27. CF login&lt;/P&gt;&lt;P&gt;After which you can deploy your app using the below command&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;cf push&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once the app is deployed navigate to the cloud foundry -&amp;gt; your space -&amp;gt; your app, get the application routes url for testing.&lt;/P&gt;&lt;P&gt;Use,&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;application_routes_url/&amp;nbsp; &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;application_routes_url/fetch_data&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;application_routes_url/update_data&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;Test results&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Home page&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Subu1_2-1751924285431.png" style="width: 524px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283661i0DD99C2D87ACB091/image-dimensions/524x309?v=v2" width="524" height="309" role="button" title="Subu1_2-1751924285431.png" alt="Subu1_2-1751924285431.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 28. Home page&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Fetch Data&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SubramaniyanVenkatraman_0-1752026985083.png" style="width: 618px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284347i95D36853D49AEA9B/image-dimensions/618x133?v=v2" width="618" height="133" role="button" title="SubramaniyanVenkatraman_0-1752026985083.png" alt="SubramaniyanVenkatraman_0-1752026985083.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Fig 29. Fetch data via OData&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Integrating SAP BTP with SAP S/4HANA Cloud using the Destination Service and SAP Cloud Connector provides a secure and scalable way to extend your enterprise systems into the cloud. In this blog, we explored how to configure the necessary services, set up destinations, and connect a cloud application to S/4HANA Cloud to fetch and modify Purchase Order data using OData APIs.&lt;/P&gt;&lt;P&gt;Whether you're building a full-stack application or a lightweight service to automate business processes, understanding the role of Destination Service and Cloud Connector is critical to securely bridging the gap between your cloud apps and backend systems. This approach not only enhances flexibility but also ensures your architecture stays modular, maintainable, and cloud-ready.&lt;/P&gt;&lt;P&gt;I hope this blog serves as a helpful starting point for anyone new to SAP BTP and Destination service. Stay tuned for more hands-on insights and real-world examples from my journey with agentic use cases and enterprise integration!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-s-4hana-cloud-data-via-sap-build-code-on-the-sap-btp-platform/ba-p/14146303"/>
    <published>2025-07-16T11:09:48.847000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/demo-accessing-sap-with-generative-ai-in-microsoft-teams/ba-p/14150831</id>
    <title>Demo: Accessing SAP with Generative AI in Microsoft Teams</title>
    <updated>2025-07-21T03:13:01.221000+02:00</updated>
    <author>
      <name>prakashsaurav</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/12784</uri>
    </author>
    <content>&lt;P&gt;In this demo, we showcase how to bring SAP data closer to your teams by combining the power of Generative AI, Microsoft Copilot Studio, and Teams. Using SAP OData services exposed via SAP BTP Integration Suite, we build an intelligent Copilot agent that lets users retrieve sales orders, products, customers, and suppliers — all through simple natural language conversations. Whether it’s in Teams or Microsoft 365 Copilot, see how you can seamlessly access and interact with your SAP backend data, improving efficiency and transforming user experience.&lt;/P&gt;&lt;P&gt;&lt;A href="https://aditheos.com/2025/06/26/simplifying-sap-access-with-gen-ai-built-on-copilot-studio-integrated-via-sap-btp-azure-apim-delivered-in-teams-copilot/" target="_blank" rel="noopener nofollow noreferrer"&gt;Step by Step Implementation&lt;/A&gt;&amp;nbsp; &amp;nbsp;&lt;BR /&gt;Access complete source code @&amp;nbsp;&lt;A href="https://github.com/aditheos/SalesAI" target="_blank" rel="noopener nofollow noreferrer"&gt;GitHub&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FgdxKP7GCMn8%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DgdxKP7GCMn8&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgdxKP7GCMn8%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="486" height="273" scrolling="no" title="Simplifying SAP Access with Gen AI | SAP BTP + Microsoft Copilot Studio Demo" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/demo-accessing-sap-with-generative-ai-in-microsoft-teams/ba-p/14150831"/>
    <published>2025-07-21T03:13:01.221000+02:00</published>
  </entry>
</feed>
