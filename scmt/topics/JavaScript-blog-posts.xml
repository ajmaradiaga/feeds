<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/JavaScript-blog-posts.xml</id>
  <title>SAP Community - JavaScript</title>
  <updated>2025-08-01T23:10:46.366882+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/JavaScript/pd-p/506421944534752500398156104608974" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>JavaScript blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/3-3-from-javascript-to-typescript-the-shocking-results-of-our-sapui5/ba-p/13984355</id>
    <title>3/3 From JavaScript to TypeScript: The Shocking Results of Our SAPUI5 Transformation</title>
    <updated>2025-01-14T16:25:23.164000+01:00</updated>
    <author>
      <name>PetrBecka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152296</uri>
    </author>
    <content>&lt;P&gt;In the first two parts of this series, we explored &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/1-3-from-javascript-to-typescript-how-we-enhanced-code-reliability-in/ba-p/13878726" target="_self"&gt;why we transitioned to TypeScript&lt;/A&gt; and &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/2-3-from-javascript-to-typescript-how-we-enhanced-code-reliability-in/ba-p/13925918" target="_self"&gt;how we structured the adoption process&lt;/A&gt; for our SAPUI5 applications. Now, in this final part, we’ll evaluate the results of this shift and discuss how TypeScript has fundamentally transformed not only the quality of our applications but also the efficiency and productivity of our development team.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1208477919"&gt;What TypeScript Has Brought to Our Development Process&lt;/H3&gt;&lt;P&gt;The transition to TypeScript has proven to be a game changer, delivering improvements on multiple fronts. Let’s break down the key areas where we’ve seen tangible benefits:&lt;/P&gt;&lt;H4 id="toc-hId-1141047133"&gt;1. &lt;STRONG&gt;Dramatic Reduction in Bugs&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;With TypeScript’s static typing and robust type checking, we’ve eliminated 35–45% of errors in our applications. These were primarily the kinds of technical bugs that often led to runtime crashes, frozen interfaces, or non-functional features. Now, the vast majority of reported issues pertain to business logic, such as missing inputs or incomplete processes, rather than underlying technical faults.&lt;/P&gt;&lt;P&gt;This shift allows us to focus our efforts on collaborating with clients to refine their workflows rather than troubleshooting application failures.&lt;/P&gt;&lt;H4 id="toc-hId-944533628"&gt;2. &lt;STRONG&gt;Increased Team Efficiency&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;One of the most immediate and measurable impacts of adopting TypeScript has been the boost in our team’s efficiency. Here’s why:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Autocomplete and IntelliSense:&lt;/STRONG&gt; Developers now benefit from features like autocomplete, which provide instant suggestions for available properties, methods, and data types. This not only reduces the time spent referencing documentation but also ensures that the code being written is accurate and complete.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const user: User = {
  id: 1,
  name: "John Doe",
  email: "john.doe@example.com",
};

// Autocomplete helps ensure property names and methods are correctly used:
console.log(user.email); // Suggestions for 'id', 'name', 'email' appear instantly.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Faster Development:&lt;/STRONG&gt; With TypeScript guiding developers and preventing many errors at compile time, the need for extensive debugging is reduced. This means more time spent on new features and improvements, rather than firefighting bugs.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Simplified Maintenance:&lt;/STRONG&gt; TypeScript’s stricter structure makes the codebase more predictable and easier to navigate. As a result, maintaining and extending our applications has become far less time-consuming.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-748020123"&gt;3. &lt;STRONG&gt;Improved Application Architecture&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;TypeScript encourages a more thoughtful approach to designing applications. With tools like interfaces, enums, and generics, we can define clear data models and relationships, making our applications more robust and easier to extend in the future. For example:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Better modularity:&lt;/STRONG&gt; We’ve been able to break down applications into smaller, reusable modules.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Scalability:&lt;/STRONG&gt; The strong typing system ensures that as our applications grow, the structure remains sound and consistent.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-422423899"&gt;Practices That Ensure Long-Term Success with TypeScript&lt;/H3&gt;&lt;P&gt;To maximize the benefits of TypeScript, we’ve implemented several key practices:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Centralized Declarations:&lt;/STRONG&gt; All type definitions, enums, and interfaces are stored in a single declarations file to maintain consistency and ensure changes propagate across the codebase.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Avoid Overusing Type Assertions:&lt;/STRONG&gt; We explicitly account for undefined or null values, preventing errors caused by assumptions about data availability.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Ban on the any Type:&lt;/STRONG&gt; Using any is strictly prohibited as it negates the advantages of static typing. Instead, we leverage generics and proper type definitions to ensure flexibility without compromising safety.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Thoughtful Code Reviews:&lt;/STRONG&gt; Our reviews now emphasize adherence to TypeScript’s principles, such as avoiding unnecessary complexity in type definitions or ensuring proper handling of edge cases.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="OpenAI. (2025). A cartoon illustration of a software web developers avoiding any keyword in TypeScript [AI-generated image]. DALL-E" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211561iC0008D2BE15DA836/image-size/large?v=v2&amp;amp;px=999" role="button" title="ANY.jpg" alt="OpenAI. (2025). A cartoon illustration of a software web developers avoiding any keyword in TypeScript [AI-generated image]. DALL-E" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;OpenAI. (2025). A cartoon illustration of a software web developers avoiding any keyword in TypeScript [AI-generated image]. DALL-E&lt;/span&gt;&lt;/span&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-225910394"&gt;General Outcomes: A More Effective and Resilient Team&lt;/H3&gt;&lt;P&gt;The move to TypeScript has had a profound impact on how our team works. Here’s a summary of the key outcomes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Higher Productivity:&lt;/STRONG&gt; By eliminating many common sources of bugs, our team spends significantly less time on reactive tasks like debugging and maintenance. This allows us to focus on proactive work, such as new feature development and optimizing business processes.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Faster Development Cycles:&lt;/STRONG&gt; Autocomplete and intelligent type checking accelerate coding, even if TypeScript’s syntax is occasionally more verbose. This faster pace has enabled us to deliver solutions more quickly and with greater confidence.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Better Client Collaboration:&lt;/STRONG&gt; With fewer technical issues to address, we can work more closely with clients on refining their requirements and ensuring our applications align with their business goals. This has strengthened relationships and opened doors to new opportunities.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Future-Proof Applications:&lt;/STRONG&gt; TypeScript has made our applications more robust and scalable. Its strong typing system ensures that as our solutions evolve, they remain easier to maintain and extend.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-29396889"&gt;Conclusion: A Transformative Shift for SAPUI5 Development&lt;/H3&gt;&lt;P&gt;Transitioning to TypeScript has fundamentally transformed our approach to development. By reducing errors, improving productivity, and fostering a more resilient architecture, we’ve not only improved the quality of our applications but also elevated our team’s effectiveness.&lt;/P&gt;&lt;P&gt;This journey has shown us that adopting modern tools like TypeScript is more than just a technical upgrade—it’s an investment in the long-term success of our team and our solutions. The efficiency gains, combined with the trust and confidence we’ve built with our clients, have set the stage for continued growth and innovation.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="OpenAI. (2025). A cartoon illustration of a software web developer handing over application created in TypeScript technology [AI-generated image]. DALL-E" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/211562iF24140239E31DBA3/image-size/large?v=v2&amp;amp;px=999" role="button" title="hadshake.jpg" alt="OpenAI. (2025). A cartoon illustration of a software web developer handing over application created in TypeScript technology [AI-generated image]. DALL-E" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;OpenAI. (2025). A cartoon illustration of a software web developer handing over application created in TypeScript technology [AI-generated image]. DALL-E&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--167116616"&gt;Join the Discussion&lt;/H3&gt;&lt;P&gt;Have you implemented TypeScript in your projects? How has it influenced your team’s workflow and application quality? Share your experiences in the comments — we’d love to hear your insights and ideas as we continue to learn and improve together. Let’s shape the future of SAPUI5 development as a community!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/3-3-from-javascript-to-typescript-the-shocking-results-of-our-sapui5/ba-p/13984355"/>
    <published>2025-01-14T16:25:23.164000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/should-we-use-promises/ba-p/13997662</id>
    <title>Should we use promises ?</title>
    <updated>2025-01-28T10:29:16.851000+01:00</updated>
    <author>
      <name>Nolan910</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1752575</uri>
    </author>
    <content>&lt;H1 id="toc-hId-951328286"&gt;Introduction&lt;/H1&gt;&lt;P&gt;In the development of SAPUI5 Fiori applications, managing asynchronous operations is essential for providing a smooth and responsive user experience. Whether it's retrieving data from an OData service or making API calls, asynchrony is at the core of the logic in these applications. However, managing it can quickly become complex and difficult to maintain if not properly handled.&lt;/P&gt;&lt;P&gt;In this article, we will review the main concepts of asynchrony in JavaScript and explore best practices, as well as common mistakes to avoid, to simplify and improve the management of asynchronous operations in your SAPUI5 projects.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-754814781"&gt;Introduction to Asynchrony and Promises in JS&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Simple explanation of the concept of asynchrony in JS (blocking vs non-blocking)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Traditionally, JavaScript code runs synchronously, executing line by line, with each statement blocking the execution of the rest of the code until it is completed. However, with long operations like network requests, this can become a problem. Asynchrony allows us to avoid blocking the main execution thread by processing long tasks in the background, while letting the rest of the code continue running.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Definition and role of promises&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Promises allow for handling asynchrony in JavaScript; they represent the result or failure of an asynchronous operation. A promise has three states :&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;Pending: initial state, the promise is neither fulfilled nor rejected.&lt;/LI&gt;&lt;LI&gt;Fulfilled: the operation was successful.&lt;/LI&gt;&lt;LI&gt;Rejected: the operation failed.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-558301276"&gt;Why is it widely used in Fiori?&lt;/H1&gt;&lt;P&gt;The SAPUI5 component library encapsulates these concepts within callbacks.&lt;/P&gt;&lt;P&gt;Indeed, the “success” and “error” callback functions are derived from promises managed within the SAPUI5 framework. In most cases, we can simply implement these two methods.&lt;/P&gt;&lt;P&gt;However, some situations require manual management of promises.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Parallelization of callbacks (Promise.all)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;When there are several asynchronous calls to make simultaneously, Promise.all&amp;nbsp; allows them to be executed in parallel. This reduces the total waiting time by launching all the requests at once and waiting for their collective resolution.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;_getProducts: function () {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read("/Products", {
      success: function (oData, oResponse) {
        resolve(oData, oResponse);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

_getSites: function () {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read("/Sites", {
      success: function (oData, oResponse) {
        resolve(oData, oResponse);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

_getProductsBySites: function () {
  Promise.all([
    this._getProducts(),
    this._getSites()
  ])
  .then((results) =&amp;gt; {
    // do something with products and sites
  })
  .catch((error) =&amp;gt; {
    // error retrieving products or sites
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Using an asynchronous function with different outcomes&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The “success” function provided by SAPUI5 allows for implementing a single logic to be executed after an asynchronous function. However, sometimes we want to reuse the same function in different scenarios, and in such cases, using a promise with its “then” is more practical.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;_getProductsPrices: function () {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read("/ProductsPrices", {
      success: function (oData, oResponse) {
        resolve(oData, oResponse);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

_computeTotalPrice: function () {
  this._getProductsPrices().then((oData, oResponse) =&amp;gt; {
    // sum products prices for example
  });
},

_getMostExpensiveProduct: function () {
  this._getProductsPrices().then((oData, oResponse) =&amp;gt; {
    // search for the highest price for example
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Managing data state and application state (UX, loading indicators, etc.)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Asynchrony also helps better manage the application state, particularly by displaying loading indicators (e.g., spinners) while data is being retrieved. This informs the user about the application’s status and enhances their experience.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-361787771"&gt;What are the best practices and things to avoid?&lt;/H1&gt;&lt;P&gt;Best practices :&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;Handle errors properly to catch all potential exceptions.&lt;/LI&gt;&lt;LI&gt;Use Promise.all() to make parallel calls when necessary.&lt;/LI&gt;&lt;LI&gt;Use promises instead of duplicating code.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Things to avoid:&lt;/P&gt;&lt;UL class="lia-list-style-type-circle"&gt;&lt;LI&gt;Using nested callbacks, which make the code difficult to maintain and debug.&lt;/LI&gt;&lt;LI&gt;Overloading the main thread with too many heavy operations in parallel without limiting the load.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Comparison between older techniques like callbacks and newer approaches based on promises (async/await)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;With the advent of promises and later async/await, based on promises, the code has become much more linear and easier to read. async/await allows asynchronous code to be written as if it were synchronous, making it even more readable and reducing the risk of errors.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// Example using promises with async/await
function task1() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log("Task 1 completed");
      resolve();
    }, 1000);
  });
}

function task2() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log("Task 2 completed");
      resolve();
    }, 1000);
  });
}

function task3() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log("Task 3 completed");
      resolve();
    }, 1000);
  });
}

// Using async/await to handle async tasks in a more readable way
async function executeTasks() {
  await task1();
  await task2();
  await task3();
  console.log("All tasks completed");
}

executeTasks();&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Improvement of readability and error management compared to nested callbacks (pyramid of doom)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Before the introduction of promises, asynchrony management was often done with callbacks, but this led to readability issues and made code maintenance difficult. Nesting functions within each other created a real pyramid of code, hard to follow (callback hell).&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// Fonction pour obtenir les données du client
_getCustomerData: function () {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read("/CustomerSet", {
      success: function (oData, oResponse) {
        console.log("Customer data retrieved successfully");
        resolve(oData);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

// Fonction pour obtenir les commandes d'un client
_getOrderData: function (customerId) {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read(`/OrderSet(CustomerID='${customerId}')`, {
      success: function (oData, oResponse) {
        console.log("Order data retrieved successfully");
        resolve(oData);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

// Fonction pour obtenir les produits d'une commande
_getProductData: function (orderId) {
  return new Promise((resolve, reject) =&amp;gt; {
    oDataModel.read(`/ProductSet(OrderID='${orderId}')`, {
      success: function (oData, oResponse) {
        console.log("Product data retrieved successfully");
        resolve(oData);
      },
      error: function (oError) {
        reject(oError);
      }
    });
  });
},

// Exemple de .then() imbriqué
_getCustomerOrderProductData: function () {
  this._getCustomerData()
    .then((customerData) =&amp;gt; {
      // Imbriquer un autre .then() pour récupérer les commandes du client
      return this._getOrderData(customerData.CustomerID)
        .then((orderData) =&amp;gt; {
          // Imbriquer un autre .then() pour récupérer les produits de la commande
          return this._getProductData(orderData.OrderID)
            .then((productData) =&amp;gt; {
              console.log("Final product data:", productData);
            })
            .catch((error) =&amp;gt; {
              console.error("Error retrieving product data:", error);
            });
        })
        .catch((error) =&amp;gt; {
          console.error("Error retrieving order data:", error);
        });
    })
    .catch((error) =&amp;gt; {
      console.error("Error retrieving customer data:", error);
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-165274266"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;Proper management of asynchronous operations in SAPUI5 Fiori application development is crucial to ensure an optimal and responsive user experience. By mastering the fundamental concepts of asynchrony in JavaScript and applying best practices, you can accelerate performance, simplify network call management, and improve code readability. The appropriate use of mechanisms such as promises, Promise.all, and the new async/await syntax helps make your code more robust and easier to maintain. By applying these principles to your SAPUI5 projects, you will not only deliver high-performance applications but also facilitate the management and evolution of your solutions in the long term.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/should-we-use-promises/ba-p/13997662"/>
    <published>2025-01-28T10:29:16.851000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929</id>
    <title>SAP BTP: Cloud Application Programming Model</title>
    <updated>2025-03-04T07:09:41.141000+01:00</updated>
    <author>
      <name>SekhuteTK</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/15314</uri>
    </author>
    <content>&lt;P&gt;SAP Cloud Application Programming (CAP) Model exposes the ability to extend standard Cloud, on-premises and hybrid application functionality with flexible custom business logic scripted using the developer’s choice of programing language (SQL, SQL Script, Python, Node.js and JavaScript) and exposing the functionality to various user interfaces (UIs) e.g. Microsoft Power Bi, SAP Fiori, Dataiku and Google Big Query using various integration frameworks e.g. OData v4,JDBC/ODBC depending on the case study.&lt;/P&gt;&lt;P&gt;The developer takes pride in delivering a scalable extended functionality, embedding robust real-time monitoring capabilities to ensure a health life cycle and protecting the functionality with secure authentication protocols e.g. OAuth 2.0, JWT Bearer, SAML version 2.0 and RFC Specification.&lt;/P&gt;&lt;P&gt;Furthermore, the developer ensures a reliable and robust solutions by implementing continuous integration and continuous delivery CI/CD pipelines that automates testing, building and deployment of code changes this strategy ensures a speedy development and delivery cycle.&lt;/P&gt;&lt;P&gt;Traditionally developers extended business logic directly on-premises on the ABAP application server. With the ever-changing world of technology, digital transformation has become essential for organization to say afloat of competitors and therefore the programming model paradigms and capabilities of extending SAP solutions have evolved drastically and provides a seamless experience into the cloud.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Programming model.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232631i560CE0B01EB4E6CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Programming model.png" alt="Programming model.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 1: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Architectural Paradigm Shift from Classic ABAP App server to CAP App server&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Thomas Jung, &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426" target="_blank"&gt;&lt;STRONG&gt;SAP HANA Extended Application Services&lt;/STRONG&gt;&lt;/A&gt; blog, URL: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;The SAP Cloud Application model comes with a rich set of languages, libraries, and tools for building enterprise-grade services and applications. It guides developers along a 'golden path' of proven&amp;nbsp;best practices&amp;nbsp;&amp;nbsp;and a great wealth of&amp;nbsp;out-of-the-box solutions&amp;nbsp;&amp;nbsp;to recurring tasks:&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="cap.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232633i1EC9379A4BB0DAA1/image-size/large?v=v2&amp;amp;px=999" role="button" title="cap.png" alt="cap.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 2: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;SAP Cloud Application Model Architecture&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source &lt;A href="HTTPS://Cap.cloud.sap" target="_blank" rel="nofollow noopener noreferrer"&gt;HTTPS://Cap.cloud.sap&lt;/A&gt; , U&lt;/EM&gt;&lt;EM&gt;RL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://cap.cloud.sap/docs/about/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://cap.cloud.sap/docs/about/&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The below diagram categories the skill set of SAP Cloud Developer based on the scope of the development either being ABAP or Non-ABAP. Each with its unique set of tools and methodologies:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ABAP VS NON.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232635i61C63058B7D72485/image-size/large?v=v2&amp;amp;px=999" role="button" title="ABAP VS NON.png" alt="ABAP VS NON.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 3:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;&amp;nbsp;SAP Cloud Developer skill set&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Building side-by-side extensions on SAP BTP, URL: &lt;A href="https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0" target="_blank" rel="noopener noreferrer"&gt;https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The Cloud Application Programming model enables a collaboration of agile cross functional teams inclusive of but not limited, depending on the scope of the development: &amp;nbsp;citizen developers (low-code/no-code), Professional developers (Scripting, OOP), business analysts, data engineers and application specialists to model robust data models:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Cross functional.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232636i237D8D5BBD7CB069/image-size/large?v=v2&amp;amp;px=999" role="button" title="Cross functional.png" alt="Cross functional.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 4:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Agile cross functional team&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: &lt;STRONG&gt;Investigating the Impact of Cross-Functional Teams on Business Success&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;URL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://www.iienstitu.com/en/blog/cross-functional-teams" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.iienstitu.com/en/blog/cross-functional-teams&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;SAP Cloud Application Programming (CAP) Model enables a culture where people regardless of their title or background, work together to imagine, develop, deploy, and operate a solution. This strengthens the trust between employees and authentic healthy work relationships.&lt;/P&gt;&lt;P&gt;Thank you all for taking a glimpse into the above Content. Please don’t for get to like, comment and share.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Abbreviations:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;APP: &lt;/STRONG&gt;Application&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CAP: &lt;/STRONG&gt;Cloud Application Programing&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CDS&lt;/STRONG&gt;: Core Data Services&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CI/CD:&lt;/STRONG&gt; Continuous Integration and Continuous Delivery&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;JWT&lt;/STRONG&gt;: JSON Web token&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;OData: &lt;/STRONG&gt;Open Data Protocol&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;RFC&lt;/STRONG&gt;: Remote Function Call&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SAML&lt;/STRONG&gt;: Security Assertion Markup Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SQL:&lt;/STRONG&gt; Structured Query Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;UIs:&lt;/STRONG&gt; User Interfaces&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929"/>
    <published>2025-03-04T07:09:41.141000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sapui5-to-excel-no-odata-almost-needed/ba-p/14032734</id>
    <title>SAPUI5 to Excel: No OData (almost) Needed!</title>
    <updated>2025-03-04T09:21:08.814000+01:00</updated>
    <author>
      <name>PetrBecka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152296</uri>
    </author>
    <content>&lt;P&gt;In this blog post, we will focus on scenarios where our SAPUI5 application does not have its own OData service available – typically when extending SAP SuccessFactors, which provides a single general OData service. Even though this scenario is not as straightforward as with applications that have a dedicated OData service, there is a quick and elegant solution for exporting data to Excel, leveraging &lt;STRONG&gt;sap.ui.export.Spreadsheet&lt;/STRONG&gt;.&lt;/P&gt;&lt;H4 id="toc-hId-1962728554"&gt;Where this is useful:&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Extensions of existing cloud applications (e.g., SuccessFactors, Ariba) where a dedicated OData service is missing.&lt;/LI&gt;&lt;LI&gt;Applications with their own filters and selection screens where we need to dynamically export selected data.&lt;/LI&gt;&lt;LI&gt;Scenarios where we do not want or cannot generate a specific backend service but have access to a generic OData endpoint.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1637132330"&gt;Basic Concept&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Capturing filters and selected fields&lt;/STRONG&gt;: By using the beforeRebindTable event on the SmartTable control, we learn which filters and columns (select) the user has currently set.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Retrieving actual data&lt;/STRONG&gt;: After clicking on the export button, we use the captured filters and selection to call the generic OData service that returns the required data.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Storing the data in a JSONModel&lt;/STRONG&gt;: We store the retrieved data in a JSONModel, which is compatible with &lt;STRONG&gt;sap.ui.export.Spreadsheet&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Generating the Excel file&lt;/STRONG&gt;: The final export, in which we define columns, format, and other parameters, is carried out using &lt;STRONG&gt;sap.ui.export.Spreadsheet&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;This approach is suitable for &lt;STRONG&gt;all scenarios&lt;/STRONG&gt; where we can filter and download data from one general service and then present it to the user in Excel format in a clear manner.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1440618825"&gt;Detailed Step-by-Step Procedure&lt;/H3&gt;&lt;H4 id="toc-hId-1373188039"&gt;Capturing filters and selection in beforeRebindTable&lt;/H4&gt;&lt;P&gt;In the component where we have the SmartTable, we subscribe to the beforeRebindTable event:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;onBeforeRebindTable: function (oEvent) {
    var oBindingParams = oEvent.getParameter("bindingParams");
    // These parameters contain filters, sorting, and the definition of select columns
    this._oFilters = oBindingParams.filters;     // Store the filters
    this._oSelect = oBindingParams.parameters.select; // Store the list of selected columns
    
    // If necessary, we can further adjust filters or select before the OData call
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;oBindingParams.filters: Contains the filter conditions.&lt;/LI&gt;&lt;LI&gt;oBindingParams.parameters.select: Determines which columns are selected from the OData.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;With this, we can later use the same filters and the select statement— for example, upon clicking the export button — for our own data query.&lt;/P&gt;&lt;H4 id="toc-hId-1176674534"&gt;Export logic implementation&lt;/H4&gt;&lt;P&gt;For instance, if we have an “Export to Excel” button on the page, we add logic to its press event:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;onExportPress: function() {
    // 1) Create a query with filters and select parameters
    var aFilters = this._oFilters;
    var sSelect = this._oSelect;
    
    // 2) Call the OData service to get the data (generic OData from SuccessFactors)
    var sUrl = "/sap/opu/odata/successfactors_service/GenericEntitySet";
    // For simplicity, we use the ODataModel defined in manifest.json
    var oModel = this.getView().getModel();
    
    oModel.read("/GenericEntitySet", {
        filters: aFilters,
        urlParameters: {
            "$select": sSelect
        },
        success: function(oData) {
            // 3) Store the data in a temporary JSONModel
            var oJSONModel = new sap.ui.model.json.JSONModel();
            oJSONModel.setData(oData.results);
            
            // 4) Run the Excel export
            this._generateExcel(oJSONModel);
        }.bind(this),
        error: function(oError) {
            // Handle possible errors here
        }
    });
},&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This way, we dynamically obtain data based on the current filter settings and the columns the user sees in the SmartTable.&lt;/P&gt;&lt;H4 id="toc-hId-980161029"&gt;Generating Excel with sap.ui.export.Spreadsheet&lt;/H4&gt;&lt;P&gt;Now we use the export API:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;_generateExcel: function(oJSONModel) {
    // Define columns
    var aColumns = [
        {
            label: "Column 1 Name",
            property: "Column1", // The name of the field in the JSONModel
            type: "string"
        },
        {
            label: "Column 2 Name",
            property: "Column2",
            type: "string"
        },
        // More columns as needed...
    ];
    
    // Create the actual export
    var oSettings = {
        workbook: {
            columns: aColumns
        },
        dataSource: oJSONModel.getData(), // Data from the JSONModel
        fileName: "ExportedData.xlsx"
    };
    
    var oSpreadsheet = new sap.ui.export.Spreadsheet(oSettings);
    oSpreadsheet.build().then(function() {
        sap.m.MessageToast.show("The export was generated successfully.");
    }).finally(function() {
        oSpreadsheet.destroy();
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;label: The displayed column name in Excel.&lt;/LI&gt;&lt;LI&gt;property: The key under which the data is stored in the JSONModel.&lt;/LI&gt;&lt;LI&gt;type: The data type (string, date, number, etc.), which is also reflected in Excel.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-654564805"&gt;Extensions and Improvements&lt;/H3&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Dynamic column definitions&lt;/STRONG&gt;: If you do not want to define columns statically, you can build them from the information provided by SmartTable (for instance, from the metadata in the rebind parameters).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Displaying icons or cell formatting&lt;/STRONG&gt;: sap.ui.export supports advanced formatting, though it is not as straightforward to display icons as it is in a UI5 table.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Paging&lt;/STRONG&gt;: If the dataset is too large, consider paging or asynchronous data downloading to avoid overloading the service.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Connecting additional filters&lt;/STRONG&gt;: Besides the filter conditions directly in the SmartTable, you can also consider custom filters outside the table (e.g., in a panel containing more filters).&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-458051300"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;This approach illustrates how to &lt;STRONG&gt;bridge the absence of a dedicated OData service&lt;/STRONG&gt; while still preserving Excel export functionality. The method relies on a &lt;STRONG&gt;generic OData service&lt;/STRONG&gt; (e.g., in SuccessFactors), combined with intercepting the &lt;STRONG&gt;beforeRebindTable&lt;/STRONG&gt; event to capture and reuse filter and selection parameters.&lt;/P&gt;&lt;P&gt;In practice, this solution improves efficiency when working with data across various cloud and on-premise applications while also saving developers time, as there is no need to create a dedicated OData service for every scenario. Additionally, it gives users the ability to &lt;STRONG&gt;export exactly the data&lt;/STRONG&gt; they are currently viewing, with minimal configuration logic on the frontend side.&lt;/P&gt;&lt;BLOCKQUOTE&gt;&lt;P&gt;&lt;STRONG&gt;Tip&lt;/STRONG&gt;: If you plan to extend this concept further, also look into language settings, number and date formats for different locales, or the use of lazy loading for extremely large datasets.&lt;/P&gt;&lt;/BLOCKQUOTE&gt;&lt;P&gt;Thanks to this method, we have a relatively universal tool for exporting table data in a SAPUI5 application, without being limited by the lack of a specific OData service.&lt;/P&gt;&lt;P&gt;I look forward to any discussions and questions — whether about specific implementation details, performance considerations, or other interesting uses in SAPUI5 projects!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sapui5-to-excel-no-odata-almost-needed/ba-p/14032734"/>
    <published>2025-03-04T09:21:08.814000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/improving-sap-integration-suite-2-pdetective-browser-extension-where-used/ba-p/14077299</id>
    <title>Improving SAP Integration Suite #2 - PDetective Browser Extension -  Where Used for ProcessDirect</title>
    <updated>2025-04-17T16:29:59.322000+02:00</updated>
    <author>
      <name>MarianVatafu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/864725</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1579318822"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Coming back with episode two of my personal series - Improving SAP Integration Suite. &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/improving-sap-integration-suite-with-a-sorting-mechanism-for-datastore/ba-p/14052939" target="_self"&gt;In the first episode&lt;/A&gt;, we presented a sorting mechanism for selecting entries from the &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/define-data-store-operations?q=Select+operator" target="_self" rel="noopener noreferrer"&gt;Datastore&lt;/A&gt;. In this second episode, I joined forces with &lt;A href="https://profile.sap.com/profile/idc92799b6bc21571586b5971343fbcede97957cbfcf32d0bb58c7f7d490a4c4c9" target="_self" rel="noopener noreferrer"&gt;Adrian Cucui&lt;/A&gt; and &lt;A href="https://profile.sap.com/profile/id3adee2101cfe236c31cd8c25fb228c10b2bdaf33adcee9eaf541a80e4c2935ab" target="_self" rel="noopener noreferrer"&gt;Eduard Popescu&lt;/A&gt;, and together we created a browser extension for &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/sap-cloud-integration" target="_self" rel="noopener noreferrer"&gt;SAP Integration Suite&lt;/A&gt;.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The main functionality is to provide the user something similar to the Where Used for &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/jms-adapter?q=JMS+queues" target="_self" rel="noopener noreferrer"&gt;JMS queues&lt;/A&gt;, but for &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/processdirect-adapter" target="_self" rel="noopener noreferrer"&gt;ProcessDirect&lt;/A&gt; links.&lt;/P&gt;&lt;P&gt;The idea behind the extension was to close a gap we had for quite a while, especially when going through large architectures where sometimes, we saw that the message go using ProcessDirect through several flows, and without knowing the flow names it was pretty difficult to debug issues.&lt;/P&gt;&lt;P&gt;We found it especially useful when onboarding new projects, when you're not really that familiar with the order or sequence of the flows, and being able to see where exactly it is being used helped us a lot.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_12-1744786249919.png" style="width: 338px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251243iFE9AB21EC2466D97/image-dimensions/338x227?v=v2" width="338" height="227" role="button" title="MarianVatafu_12-1744786249919.png" alt="MarianVatafu_12-1744786249919.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1382805317"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_13-1744786259849.png" style="width: 322px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251244i07EDBCB5A4E584BB/image-dimensions/322x234?v=v2" width="322" height="234" role="button" title="MarianVatafu_13-1744786259849.png" alt="MarianVatafu_13-1744786259849.png" /&gt;&lt;/span&gt;&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1186291812"&gt;Functionalities&lt;/H1&gt;&lt;P&gt;The main functionality is of course, the ProcessDirect address search. We tried to make it as easy to use, so the only thing that you need to do is to highlight a text in your flow and hit a button.&lt;/P&gt;&lt;H3 id="toc-hId-1247943745"&gt;Searching for ProcessDirect addresses&lt;/H3&gt;&lt;P&gt;While on an integration artifact page, highlight any ProcessDirect address. No need to copy, just select it, along with the slash.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_11-1744786212195.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251242i88E09ACC206FF32E/image-size/large?v=v2&amp;amp;px=999" role="button" title="MarianVatafu_11-1744786212195.png" alt="MarianVatafu_11-1744786212195.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Click on the extension. On the pop-up, click the button ‘Search PD’. A text box will appear, with all the details of the flows that contain that ProcessDirect address.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_10-1744786178066.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251241i5743443BDB1F63C3/image-size/large?v=v2&amp;amp;px=999" role="button" title="MarianVatafu_10-1744786178066.png" alt="MarianVatafu_10-1744786178066.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1051430240"&gt;Displaying a visual map&lt;/H3&gt;&lt;P&gt;By clicking the ‘&lt;STRONG&gt;Show map’&lt;/STRONG&gt; button, you will be able to see a visual map of the integration artifact links.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_9-1744786118453.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251240i3DEB9BB768912819/image-size/large?v=v2&amp;amp;px=999" role="button" title="MarianVatafu_9-1744786118453.png" alt="MarianVatafu_9-1744786118453.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-854916735"&gt;Initial loading&lt;/H3&gt;&lt;P&gt;A first step would be to do an initial load of all the artifacts. Click on the extension. On the pop-up, go to the Main tab. Click Initial Load. – Bear in mind that it might take a while to do the initial load, depending on how many resources you have on the tenant.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_8-1744786024147.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251239iFD6C383922CB0B97/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarianVatafu_8-1744786024147.png" alt="MarianVatafu_8-1744786024147.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;At the end, you will be able to see all the details of the process in the same pop-up.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="MarianVatafu_7-1744785883877.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/251238i8B0BCDF935C647B7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MarianVatafu_7-1744785883877.png" alt="MarianVatafu_7-1744785883877.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-658403230"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-461889725"&gt;Scheduling recurring poll jobs&lt;/H3&gt;&lt;P&gt;Of course, there are scenarios where ProcessDirect links change, get renamed, or even removed. By having the possibility to reload all the metadata on a given interval is the way to go. If addresses get renamed, the extension will rename as well, if the addresses get deleted or new ones get added, the extension will do the same thing, so at all time you will have the correct metadata to check. By default, the extension should set the interval to 1440 minutes - 24 hours, but make sure that you do set it yourself at installation.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-7210782"&gt;F.A.Q&lt;/H1&gt;&lt;H4 id="toc-hId-197945434"&gt;How does it work ?&lt;/H4&gt;&lt;P&gt;Similar to other SAP Integration Suite extensions, this one will use your active session and similar to what you would be doing, it's using the platform APIs to get the packages, integration artifacts and their metadata. In order to persist the data, we tried to mimick what SAP Integration Suite does for JMS queues - basically stores the metadata somewhere in the backend and it's accessible via the Where Used functionality. Now, because we don't have the possibility to access the backend, we used the browser local storage, the advantages being :&lt;/P&gt;&lt;P&gt;Persistent storage across sessions and tabs&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Keeps data even if the user closes and reopens the browser.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Extension-wide access&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Unlike localStorage, which is tab-specific (per origin), chrome.storage.local is accessible from anywhere in the extension - background scripts, popups, etc.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Asynchronous, non-blocking API&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Especially important in our case, where you don’t want to freeze the UI or block the background script, for example the recurring jobs.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Good capacity (5MB limit)&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Plenty for what we’re doing — storing timestamps and intervals per tenant will take kilobytes at most.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Isolation from page scripts&lt;/P&gt;&lt;P&gt;&lt;EM&gt;A big security win: web pages cannot access your&lt;STRONG&gt;chrome.storage.local&lt;/STRONG&gt;.&lt;/EM&gt;&lt;/P&gt;&lt;H4 id="toc-hId--496285166"&gt;Do I really need to set a refresh interval after installing the extension ?&lt;/H4&gt;&lt;P&gt;&lt;EM&gt;In theory no, because we have a default interval of 1440 minutes set, but since this is the initial version, we would recommend setting one.&lt;/EM&gt;&lt;/P&gt;&lt;H4 id="toc-hId--692798671"&gt;What happens at the initial load ?&lt;/H4&gt;&lt;P&gt;The script will iterate through your packages and each integration artifact, search for ProcessDirect links and save them in your browser in-memory storage.&lt;/P&gt;&lt;H4 id="toc-hId--889312176"&gt;What happens when the schedule auto-refresh happens?&lt;/H4&gt;&lt;P&gt;Same thing, only that you won’t get bothered by the logs, since it will be done in the background. You could still see the logs in the browser Console.&lt;/P&gt;&lt;H4 id="toc-hId--1085825681"&gt;What happens if I close the pop-up when the initial load is running ?&lt;/H4&gt;&lt;P&gt;Process should still run, and if you re-open the extension, you should be able the logs flowing through, if the process has not ended yet.&lt;/P&gt;&lt;H4 id="toc-hId--1282339186"&gt;What if a flow gets an update and the addresses changes or the flow step gets completely deleted ?&lt;/H4&gt;&lt;P&gt;The extension will remove old values and add the new ones.&lt;/P&gt;&lt;H4 id="toc-hId--1478852691"&gt;Is any personal data accessed &amp;amp; shared ?&lt;/H4&gt;&lt;P&gt;No and no. Only you will be able to see the logs/saved values.&lt;/P&gt;&lt;H4 id="toc-hId--1675366196"&gt;What if I want to suggest improvements/report a bug ?&lt;/H4&gt;&lt;P&gt;Currently we have a form created, and it's accessible via a link added in the extension. Of course, you can message us in private, comment here, doesn't matter. As long as we get feedbacks, we will try to make it as better as possible.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--991670680"&gt;Planned future improvements&lt;/H1&gt;&lt;P&gt;We are looking into multiple options to extend the current functionalities, like :&lt;/P&gt;&lt;P&gt;- WhereUsed for security artifact names found in flows.&lt;/P&gt;&lt;P&gt;- Extending the visual map to highlight the whole process chain, so not for the ones that share the same ProcessDirect address, but from start to the end.&lt;/P&gt;&lt;P&gt;- Reports on unused ProcessDirect addresses.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--1188184185"&gt;Downloading the extension&lt;/H1&gt;&lt;P&gt;The extension is available currently only on &lt;A href="https://chromewebstore.google.com/detail/pdetective/idcplelnjegoabidieecncchdijgglfc?hl=ro&amp;amp;authuser=0" target="_self" rel="nofollow noopener noreferrer"&gt;Chrome extension store&lt;/A&gt;, so you can go ahead and get it from there. In the future, we will publish the project to Github as well.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Bear in mind that the extension shares absolutely no data, does not collect anything and it is not monetized. It is created strictly for the benefit of the integration developers and will always stay like this.&lt;/P&gt;&lt;P&gt;If you have any questions, feel free to reply here, or even go to the dedicated&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/forums/searchpage/tab/message?filter=includeQandA&amp;amp;q=SAP%20Integration%20Suite&amp;amp;include_qanda=true&amp;amp;collapse_discussion=true" target="_self"&gt;Q&amp;amp;A Section&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for SAP Integration Suite.&lt;/P&gt;&lt;P&gt;Thank you for your time !&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/improving-sap-integration-suite-2-pdetective-browser-extension-where-used/ba-p/14077299"/>
    <published>2025-04-17T16:29:59.322000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/text-automation-for-sap-product-managers-with-sap-ai-launchpad-and/ba-p/14102228</id>
    <title>Text Automation for SAP Product Managers with SAP AI Launchpad and JavaScript (JXA)</title>
    <updated>2025-05-15T11:04:12.708000+02:00</updated>
    <author>
      <name>JonathanWieder</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1610905</uri>
    </author>
    <content>&lt;P&gt;My name is Jonathan Wieder, I am a dual student at SAP SE studying Business Informatics at DHBW Mannheim. During my practical phase in the product management for Enterprise Asset Management – supervised by Raik Kulinna, I worked on a project that aimed to optimize internal product management processes at SAP through the integration of generative AI — and I’m excited to share the outcome with you.&lt;/P&gt;&lt;P&gt;In this blog post, I will take you through the development of a macOS-based prototype that enables product managers to automate text-based tasks — such as rewriting, translating, summarizing, and generating user stories — using Apple Shortcuts and SAP Business AI. The goal was to embed generative AI seamlessly into the daily workflow of product managers while ensuring SAP’s high compliance standards for AI usage.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="rewrite2.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/261462i76436259A041EA7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="rewrite2.gif" alt="rewrite2.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1859499591"&gt;Motivation&lt;/H3&gt;&lt;P&gt;At SAP, product managers work in a dynamic international environment, balancing tasks such as defining user stories, developing personas, and tailoring communication for diverse stakeholders. While generative AI holds significant promise for accelerating these activities, strict internal data and compliance policies prohibit the use of external AI tools.&lt;/P&gt;&lt;P&gt;To address this challenge, SAP AI Launchpad turned out to be the ideal solution. It offers secure, OAuth2-authenticated access to internal large language models (LLMs), including OpenAI’s GPT-4o, ensuring compliance with internal data protection standards. The solution had to be fast, seamlessly integrable into macOS workflows, and fully compliant with SAP’s internal security requirements—making SAP AI Launchpad the best fit for the job.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;Component&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;Technology&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;Interface&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;Apple Shortcuts (macOS context menu)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;Authentication&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;OAuth2 Client Credentials Flow&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;AI Engine&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;SAP AI Launchpad with e.g. GPT-4o&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;Script Layer&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;JavaScript for Automation (Apple JXA)&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="57px"&gt;Tested Use Cases&lt;/TD&gt;&lt;TD width="50%" height="57px"&gt;Rewrite, Translate, Summarize, Persona &amp;amp; User Story Generation&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1662986086"&gt;&lt;STRONG&gt;Core Capabilities: What Can the Shortcut Do?&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;Each functionality is triggered via macOS context menu on selected text:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp; &lt;span class="lia-unicode-emoji" title=":writing_hand:"&gt;✍️&lt;/span&gt; Rewrite in Professional Tone:&amp;nbsp;Choose between Internal, Business, or Customer-facing voice.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; &lt;span class="lia-unicode-emoji" title=":globe_showing_europe_africa:"&gt;🌍&lt;/span&gt; Translate Text: Translate text into English, German, or configure other languages.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; &lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt; Grammar Correction: Proofread for spelling and grammar.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; 🧑‍&lt;span class="lia-unicode-emoji" title=":briefcase:"&gt;💼&lt;/span&gt; Generate Personas: Use bullet points to create structured personas.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; &lt;span class="lia-unicode-emoji" title=":clipboard:"&gt;📋&lt;/span&gt; Create User Stories: Transform bullet points into user stories for agile product management.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; 🧠 Smart Summary: Summarize long text into 3–5 concise sentences.&lt;/LI&gt;&lt;LI&gt;&amp;nbsp; 🧪 Custom Prompt: Enter your own instruction to experiment with the AI.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="proof-read2.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/261468iAC2DD10DDCE71696/image-size/large?v=v2&amp;amp;px=999" role="button" title="proof-read2.gif" alt="proof-read2.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Each request is authenticated via OAuth2&amp;nbsp;and sent to the SAP AI Launchpad&amp;nbsp;via HTTP POST, with responses returned and optionally inserted back into the original app context.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1466472581"&gt;Code Example: Calling SAP AI Launchpad API via JavaScript and CURL&lt;/H3&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;var aiRequestBody = {
  "model": "gpt-4o",
  "messages": [{ "role": "user", "content": prompt }]
};
var aiCommand = `
  curl -s -X POST \\
    -H "Content-Type: application/json" \\
    -H "Authorization: Bearer ${accessToken}" \\
    -d '${JSON.stringify(aiRequestBody)}' \\
    '${aiUrl}'
`;
var aiResponse = app.doShellScript(aiCommand);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1269959076"&gt;Deep Integration into Apple macOS&lt;/H3&gt;&lt;P&gt;The AI shortcut can be accessed via the context menu. This menu is By right-clicking on a text, the context menu opens, where all shortcuts within the service submenu are displayed. Apple provides a native way to handle menu input and pass text between steps.&lt;/P&gt;&lt;P&gt;Example Workflow:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Right-click → “SAP Text Assistant”&lt;/LI&gt;&lt;LI&gt;Choose action (e.g. “Translate”)&lt;/LI&gt;&lt;LI&gt;Paste or confirm input text&lt;/LI&gt;&lt;LI&gt;View AI response and insert result&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The distribution of shortcuts is also simple:&amp;nbsp; via sharing of a link or through an exported file.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1073445571"&gt;Results &amp;amp; Evaluation&lt;/H3&gt;&lt;P&gt;The prototype was validated against seven user stories defined via a Value Proposition Canvas. All functional requirements were fully met. The solution:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Is deeply embedded into existing macOS workflows&lt;/LI&gt;&lt;LI&gt;Uses compliant internal AI based on SAP business AI&lt;/LI&gt;&lt;LI&gt;Enables real-time text assistance&lt;/LI&gt;&lt;LI&gt;Is modular and expandable for future needs&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vpc_ai_text_assistant_engl.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/261475i2858BE0D5948E786/image-size/large?v=v2&amp;amp;px=999" role="button" title="vpc_ai_text_assistant_engl.png" alt="vpc_ai_text_assistant_engl.png" /&gt;&lt;/span&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-876932066"&gt;Summary&lt;/H3&gt;&lt;P&gt;This project demonstrates how product managers at SAP can benefit from embedded generative AI without leaving their tools or violating AI policies. Using Apple Shortcuts and SAP AI Launchpad, a lightweight yet powerful assistant can support everyday work from writing user stories to translating documentation.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/text-automation-for-sap-product-managers-with-sap-ai-launchpad-and/ba-p/14102228"/>
    <published>2025-05-15T11:04:12.708000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-application-programming-model-cap-customer-roundtable-june-2025/ba-p/14103224</id>
    <title>SAP Cloud Application Programming Model (CAP) | Customer Roundtable | June 2025</title>
    <updated>2025-05-16T10:27:51.756000+02:00</updated>
    <author>
      <name>TheSebastian</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/142742</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1730446659"&gt;Update: Slides &amp;amp; Recording&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://cap.cloud.sap/resources/events/SAP_CAP_Roundtable_June_2025.pdf" target="_self" rel="nofollow noopener noreferrer"&gt;Slides&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A href="https://drive.google.com/file/d/1HOA4neAj8HozB8-QCE-6blRv4c6I24Nk/view?usp=sharing" target="_self" rel="nofollow noopener noreferrer"&gt;Recording&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1533933154"&gt;Customer Roundtable&lt;/H2&gt;&lt;P&gt;It's been some time since the last &lt;STRONG&gt;CAP Customer &amp;amp; Partner Roundtable&lt;/STRONG&gt;, so it's time for a new edition before our highlight of the year - &lt;A href="https://recap-conf.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;re&amp;gt;≡CAP 2025&lt;/A&gt;&amp;nbsp;in July.&lt;/P&gt;&lt;P&gt;As always we will go for a mix of recent announcements, demo, presentations as well as topics and questions raised by the CAP community.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Do you have CAP related insights, requirements, issues, challenges, topics… that you would like to share and discuss in the upcoming meeting?&lt;FONT color="#3366FF"&gt;&amp;nbsp;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;FONT color="#3366FF"&gt;&lt;STRONG&gt;&lt;SPAN&gt;If yes, please reach-out to us so that we can add it to the agenda.&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="CAP_Roundtable.png" style="width: 734px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/261956i19B673F3858FB90E/image-size/large?v=v2&amp;amp;px=999" role="button" title="CAP_Roundtable.png" alt="CAP_Roundtable.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1337419649"&gt;&lt;STRONG&gt;&amp;nbsp;Agenda&lt;/STRONG&gt;&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://recap-conf.dev/" target="_self" rel="nofollow noopener noreferrer"&gt;re&amp;gt;≡CAP&lt;/A&gt; &amp;amp; &lt;A href="https://code-connect.dev/" target="_self" rel="nofollow noopener noreferrer"&gt;Code Connect&lt;/A&gt; 2025&lt;UL&gt;&lt;LI&gt;&lt;A href="https://recap-conf.dev/program.html" target="_self" rel="nofollow noopener noreferrer"&gt;Agenda&lt;/A&gt; is released!&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Updates from CAP Team&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;CAP's new major release&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Improved UX with Draft Messages - Marc Becker&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Fiori Tree Tables - David Kunz, Olena Timrova&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;New CAP license - Michael Hellenschmidt, Sebastian Schmidt&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Task Queues (sneak peek) - David Kunz&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Q&amp;amp;A / Topics by the Community&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-1140906144"&gt;&lt;FONT size="5"&gt;Meeting Information&lt;/FONT&gt;&lt;/H2&gt;&lt;P data-unlink="true"&gt;&lt;STRONG&gt;When:&amp;nbsp;&lt;/STRONG&gt;Wednesday,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;June 04th&lt;/STRONG&gt;, 2025, 11 AM EST | 5 PM CE(S)T&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Where:&amp;nbsp;&lt;A href="https://teams.microsoft.com/l/meetup-join/19%3ameeting_MjhlMDRhZTAtOWEyYi00MzJmLThmOGItMDBkM2Q3YzY0Njhl%40thread.v2/0?context=%7b%22Tid%22%3a%2242f7676c-f455-423c-82f6-dc2d99791af7%22%2c%22Oid%22%3a%223d4d6882-45a1-41ce-9418-35a35744348f%22%7d" target="_blank" rel="nofollow noopener noreferrer"&gt;Teams Meeting&lt;/A&gt;&lt;/STRONG&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Meeting Request Download&lt;/STRONG&gt;:&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://cap.cloud.sap/resources/events/CAP_Customer_Roundtable_June_2025.ics" target="_self" rel="nofollow noopener noreferrer"&gt;&lt;STRONG&gt;link&lt;/STRONG&gt;&lt;/A&gt;&lt;/SPAN&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Who: &amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;All interested&amp;nbsp;&lt;STRONG&gt;partners and stakeholders&lt;/STRONG&gt;&amp;nbsp;are invited to join: developers, enterprise architects, technical consultants…&lt;/LI&gt;&lt;LI&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP Cloud Application Programming Model&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;team&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Anyone interested&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in learning about the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP Cloud Application Programming Model&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and exchange your ideas and feedback with other users and the product team&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;P&gt;Looking forward to seeing you there!&lt;BR /&gt;Check also out the new&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/resources/events" target="_blank" rel="nofollow noopener noreferrer"&gt;Events&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;page in our&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/" target="_blank" rel="nofollow noopener noreferrer"&gt;documentation&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and our&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/topics/cloud-application-programming" target="_blank"&gt;Community page&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for updates on upcoming events.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-cloud-application-programming-model-cap-customer-roundtable-june-2025/ba-p/14103224"/>
    <published>2025-05-16T10:27:51.756000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/interlinked-dropdown-filters-using-script-in-sap-analytics-cloud-sac-story/ba-p/14103275</id>
    <title>Interlinked Dropdown Filters Using Script in SAP Analytics Cloud (SAC Story)</title>
    <updated>2025-05-20T16:07:58.157000+02:00</updated>
    <author>
      <name>pratyushg13</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/126076</uri>
    </author>
    <content>&lt;P&gt;In SAP Analytics Cloud (SAC) stories, dynamic and interactive filtering helps users navigate data more effectively. One such powerful interaction is&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;interlinked dropdowns&lt;/STRONG&gt;, where the selection in one dropdown automatically updates the other, and both together filter a linked table.&lt;/P&gt;&lt;P&gt;In this post, I will walk you through how to create&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;two interlinked dropdown filters&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in SAC using scripting, where:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Dropdown 1&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;contains a dimension (Version).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Dropdown 2&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;contains a measure (Measure).&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The requirement is such that:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Selecting a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;should automatically select its associated&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Measure&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Selecting a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Measure&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;should automatically select its associated&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;The table will be filtered accordingly.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Scenario&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;We will use the following example:&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;&lt;STRONG&gt;Version&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;&lt;STRONG&gt;Measure&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;Actual&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;M1&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;Forecast&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;M2&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;Version3&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;M3&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;Version4&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;M4&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="71.6016px" height="50px"&gt;&lt;P&gt;Version5&lt;/P&gt;&lt;/TD&gt;&lt;TD width="75.2995px" height="50px"&gt;&lt;P&gt;M5&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;If the user selects&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Actual&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;M1&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will be automatically selected, and the table will show data for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Actual &amp;amp; M1&lt;/STRONG&gt;.&lt;BR /&gt;Similarly, if the user selects&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;M3&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version3&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will be selected, and the table will filter accordingly.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;diagram for the interaction flow&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="pratyushg13_0-1747385774765.png" style="width: 513px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/261985iA5D534BDF0A299C6/image-dimensions/513x341?v=v2" width="513" height="341" role="button" title="pratyushg13_0-1747385774765.png" alt="pratyushg13_0-1747385774765.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Steps to Implement Interlinked Dropdowns&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;1. Insert the Dropdowns and Table&lt;/STRONG&gt;&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;From the Insert menu in your story, insert&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;two Dropdowns and a Table&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Ensure the Table has both the Version and Measure fields you want to display and filter.&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;2. Prepare a Mapping Table (Optional but Helpful)&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;It’s a good practice to create a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;mapping table in your model or story&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that clearly defines the relationship between Version and Measure. This simplifies scripting.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3. Script for the Dimension (&lt;/STRONG&gt;&lt;STRONG&gt;Version&lt;/STRONG&gt;&lt;STRONG&gt;) Dropdown&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Select the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version Dropdown&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Open the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Outline&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;panel and select the dropdown widget.&lt;/LI&gt;&lt;LI&gt;Click on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;fx (Script)&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for onSelect() event.&lt;/LI&gt;&lt;LI&gt;Use the following example script (modify based on your model):&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;var selectedVersion =  Dropdown_1.getSelectedKey();

var measureMap = {
    "public.Actual": "M1",
    "public.Forecast": "M2",
    "public.Version3": "M3",
    "public.Version4": "M4",
    "public.Version5": "M5"
};

var associatedMeasure = measureMap[selectedVersion];

Dropdown_2.setSelectedKey(associatedMeasure);

Table_7.getDataSource().setDimensionFilter("Version", selectedVersion);
Table_7.getDataSource().setDimensionFilter(Alias.MeasureDimension,[associatedMeasure]);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;4. Script for the Measure Dropdown&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Select the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Measure Dropdown&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Open&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;fx (Script)&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for onSelect() event.&lt;/LI&gt;&lt;LI&gt;Use the following example script:&lt;/LI&gt;&lt;/OL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;var selectedMeasure = Dropdown_2.getSelectedKey();

var versionMap = {
    "M1": "public.Actual",
    "M2": "public.Forecast",
    "M3": "public.Version3",
    "M4": "public.Version4",
    "M5": "public.Version5"
};

var associatedVersion = versionMap[selectedMeasure];

Dropdown_1.setSelectedKey(associatedVersion);

Table_7.getDataSource().setDimensionFilter("Version", associatedVersion);
Table_7.getDataSource().setDimensionFilter(Alias.MeasureDimension,[selectedMeasure]);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;5. Initialize the Dropdowns on Page Load&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Outline Panel&lt;/STRONG&gt;, select the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Page&lt;/STRONG&gt;, and in the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;onInitialization()&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;event, add the script to populate the dropdowns:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;var version_list = Table_7.getDataSource().getResultSet();

var i=0;

for ( i=0; i&amp;lt;version_list.length; i++)
{
    Dropdown_1.addItem (version_list[i]["Version"].id, version_list[i]["Version"].description);
}

var measure = Table_7.getDataSource().getMeasures();

var measure_list = ["M1","M2","M3","M4","M5"];

var j=0;

for (j=0;j&amp;lt;measure.length;j++)
{
    if(measure_list.indexOf(measure[j].id) !== -1 &amp;amp;&amp;amp; measure[j].id)
    {
        Dropdown_2.addItem(measure[j].id,measure[j].description);
    }
};

Dropdown_1.setSelectedKey("public.Actual");
Dropdown_2.setSelectedKey("M1");

Table_7.getDataSource().setDimensionFilter("Version", "public.Actual");
Table_7.getDataSource().setDimensionFilter(Alias.MeasureDimension,["M1"]);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;End Result&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Selecting&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;M1&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will automatically select&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Actual&lt;/STRONG&gt;, and the table filters accordingly.&lt;/LI&gt;&lt;LI&gt;Selecting&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version4&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will select&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;M4&lt;/STRONG&gt;, and the table will show data only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Version4 &amp;amp; M4&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This interlinked dropdown logic can be extended to many use cases where your business requirement demands a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;dependent filter mechanism&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in SAC stories. This not only improves user experience but ensures the right data context is always displayed.&lt;/P&gt;&lt;P&gt;Try adapting this pattern to your scenarios such as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Region-Product&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Category-Metric&lt;/STRONG&gt;, etc.&lt;/P&gt;&lt;P&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud/pd-p/67838200100800006884" target="_blank"&gt;SAP Analytics Cloud&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud%25252C+analytics+designer/pd-p/3f33380c-8914-4b7a-af00-0e9a70705a32" target="_blank"&gt;SAP Analytics Cloud, analytics designer&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/JavaScript/pd-p/506421944534752500398156104608974" target="_blank"&gt;JavaScript&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A class="" href="https://community.sap.com/t5/c-khhcw49343/SAP+Analytics+Cloud+for+planning/pd-p/819703369010316911100650199149950" target="_blank"&gt;SAP Analytics Cloud for planning&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/interlinked-dropdown-filters-using-script-in-sap-analytics-cloud-sac-story/ba-p/14103275"/>
    <published>2025-05-20T16:07:58.157000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/why-textpool-is-better-than-script-variables-in-sap-analytics-cloud/ba-p/14108664</id>
    <title>Why TextPool is Better Than Script Variables in SAP Analytics Cloud</title>
    <updated>2025-05-22T05:44:21.642000+02:00</updated>
    <author>
      <name>rohitchouhan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/782213</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Frame 1 (1).png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264735i8F1BFF212D6389F1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Frame 1 (1).png" alt="Frame 1 (1).png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;If you're working with &lt;STRONG&gt;SAP Analytics Cloud (SAC)&lt;/STRONG&gt;, you've probably used &lt;STRONG&gt;script variables&lt;/STRONG&gt; to manage global values in your stories or applications. But there’s a new object in town called &lt;STRONG&gt;TextPool&lt;/STRONG&gt;, and it might just make your life easier in certain situations.&lt;/P&gt;&lt;P&gt;Let’s break down what TextPool is, how it's different from script variables, and when you should consider using it.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1859682301"&gt;What is TextPool in SAP Analytics Cloud?&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;TextPool&lt;/STRONG&gt; is a relatively new scripting object in SAC that allows you to store and manage &lt;STRONG&gt;string values&lt;/STRONG&gt; centrally in your stories or analytic applications. Think of it as a global string manager — you define it once and use it wherever you need it.&lt;/P&gt;&lt;P&gt;You might be thinking, “We already have script variables for that.” And yes, script variables can also store values globally. But TextPool is &lt;STRONG&gt;designed specifically for constant strings&lt;/STRONG&gt; — meaning values that shouldn’t change once defined.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1663168796"&gt;Why Should You Use TextPool Instead of Script Variables?&lt;/H3&gt;&lt;P&gt;Here are a few reasons why TextPool can be a better choice in specific scenarios:&lt;/P&gt;&lt;H4 id="toc-hId-1595738010"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;1. Constant String Protection&lt;/H4&gt;&lt;P&gt;With script variables, even after setting a value, there’s always a risk of accidentally updating it somewhere in the story. TextPool avoids that because the values are &lt;STRONG&gt;not meant to be changed dynamically&lt;/STRONG&gt;.&lt;/P&gt;&lt;H4 id="toc-hId-1399224505"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;2. Cleaner Reusability Across Objects&lt;/H4&gt;&lt;P&gt;Let’s say you’re working on an API-based project and you need to reuse your &lt;STRONG&gt;API key&lt;/STRONG&gt; across multiple widgets — buttons, input fields, etc.&lt;BR /&gt;With script variables, you’d have to initialize the value during onInitialization, and the value could still potentially change.&lt;BR /&gt;But with TextPool, you define your string once and use it &lt;STRONG&gt;as-is&lt;/STRONG&gt; anywhere in your story.&lt;/P&gt;&lt;H4 id="toc-hId-1202711000"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;3. Faster Access and Less Overhead&lt;/H4&gt;&lt;P&gt;TextPool values load faster compared to variables initialized at runtime. This is helpful especially in large-scale applications with many dependencies.&lt;/P&gt;&lt;H4 id="toc-hId-1006197495"&gt;&lt;span class="lia-unicode-emoji" title=":white_heavy_check_mark:"&gt;✅&lt;/span&gt;4. Grouping Values Like an Array&lt;/H4&gt;&lt;P&gt;You can add &lt;STRONG&gt;multiple text entries&lt;/STRONG&gt; in a single TextPool — sort of like storing key-value pairs. This helps keep things organized and avoids confusion when you’re managing many string constants.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-680601271"&gt;Example Use Case&lt;/H3&gt;&lt;P&gt;Imagine you’re building an app where you don’t want certain strings like "API_KEY" or "DEFAULT_ERROR_MESSAGE" to change accidentally. Using a script variable may lead to someone overwriting them later. But with TextPool, once you’ve defined them, they’re safe — no accidental updates.&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-484087766"&gt;How to Create a TextPool in SAC&lt;/H3&gt;&lt;P&gt;Creating a TextPool is simple:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="How to Create a TextPool in SAC.PNG" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264715i885A64F503A5E89B/image-size/large?v=v2&amp;amp;px=999" role="button" title="How to Create a TextPool in SAC.PNG" alt="How to Create a TextPool in SAC.PNG" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Open your Story&lt;/STRONG&gt; in SAP Analytics Cloud.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Go to the &lt;STRONG&gt;Outline tab&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Under the &lt;STRONG&gt;Scripting&lt;/STRONG&gt; section, click the &lt;STRONG&gt;plus (+)&lt;/STRONG&gt; icon.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Select &lt;STRONG&gt;TextPool&lt;/STRONG&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Give your TextPool a name.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Add text entries by clicking the &lt;STRONG&gt;plus (+)&lt;/STRONG&gt; icon inside the TextPool panel.&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="How to Create a TextPool in SAC.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264716i19A7CED29228DB7D/image-size/large?v=v2&amp;amp;px=999" role="button" title="How to Create a TextPool in SAC.png" alt="How to Create a TextPool in SAC.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You can add multiple key-value pairs like:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;"api_key" = "1234-xyz"&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;"error_msg" = "Something went wrong!"&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-287574261"&gt;How to Use TextPool in Your Scripts&lt;/H3&gt;&lt;P&gt;To retrieve a value from TextPool, use the &lt;A href="https://help.sap.com/doc/1639cb9ccaa54b2592224df577abe822/release/en-US/index.html#TextPool_MgetText" target="_blank" rel="noopener noreferrer"&gt;getText()&lt;/A&gt; method like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="How to Use a TextPool in SAC.PNG" style="width: 782px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264718i71C706A69E2B82FF/image-size/large?v=v2&amp;amp;px=999" role="button" title="How to Use a TextPool in SAC.PNG" alt="How to Use a TextPool in SAC.PNG" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This always returns a &lt;/SPAN&gt;&lt;STRONG&gt;string&lt;/STRONG&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;If you need it in another format (like a number or boolean), you can &lt;STRONG&gt;cast it manually&lt;/STRONG&gt; after retrieving it.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-91060756"&gt;Final Thoughts&lt;/H3&gt;&lt;P&gt;TextPool may seem like a small feature, but it’s &lt;STRONG&gt;incredibly handy&lt;/STRONG&gt; in large applications or when you want to store &lt;STRONG&gt;static string values&lt;/STRONG&gt; safely and efficiently. While script variables still have their place, using TextPool gives you that extra control and clarity in your code.&lt;/P&gt;&lt;P&gt;I personally use TextPool whenever I’m working on a big project and want my constants to be &lt;STRONG&gt;uneditable, consistent, and easily reusable&lt;/STRONG&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/why-textpool-is-better-than-script-variables-in-sap-analytics-cloud/ba-p/14108664"/>
    <published>2025-05-22T05:44:21.642000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-analytics-cloud-pong-game-a-fun-fusion-of-custom-widgets-and-standard/ba-p/14108951</id>
    <title>SAP Analytics Cloud Pong Game - A Fun Fusion of Custom Widgets and Standard Functionalities</title>
    <updated>2025-05-27T09:01:11.278000+02:00</updated>
    <author>
      <name>TimKestler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/16393</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1730602431"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Have you ever wondered what happens when the worlds of gaming and business analytics collide? Well, today, I am about to take you on an exciting journey where we’ll explore just that. In this blog, I’ll demonstrate a Pong game in SAP Analytics Cloud (SAC) which combines the power of custom widgets and standard functionalities.&lt;/P&gt;&lt;P&gt;Are you ready to spice up your analytics environment? Let’s dive into it!&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="p1 - full view.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264880iDCEA05738D991CE5/image-size/large?v=v2&amp;amp;px=999" role="button" title="p1 - full view.png" alt="p1 - full view.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="GIF Pong Game Zoom.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264943i061DAF4E276815CD/image-size/large?v=v2&amp;amp;px=999" role="button" title="GIF Pong Game Zoom.gif" alt="GIF Pong Game Zoom.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1534088926"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-1337575421"&gt;&lt;STRONG&gt;Why Build a Pong Game in SAP Analytics Cloud?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;You might be wondering, 'Why a Pong Game?'. Pong is a classic game, known for its simple mechanics and fun appeal. Furthermore, think about the broad insights you can gain by combining it with a powerful analytics platform like SAP Analytics Cloud. In the end, we want to embed the Pong Game into a SAC story, allowing users to play the game and then review simple statistics. This dynamic interaction should showcase the wide-ranging possibilities with custom widgets and create an engaging experience that might be perfect for some meetings, team-building activities, sales demos, or just making your analytics environment more interactive and fun.&lt;/P&gt;&lt;P&gt;Within this project, we can explore:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Widgets:&lt;BR /&gt;&lt;/STRONG&gt;Extends SAP Analytics Cloud beyond its standard capabilities by embedding custom visualizations and interactive elements.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Planning/Reporting:&lt;BR /&gt;&lt;/STRONG&gt;Use SAP’s built-in functionalities to store and track your gaming stats&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1141061916"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-944548411"&gt;&lt;STRONG&gt;Architecture&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Architecture.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264955i80DFA24DBB038780/image-size/large?v=v2&amp;amp;px=999" role="button" title="Architecture.png" alt="Architecture.png" /&gt;&lt;/span&gt;&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-748034906"&gt;&lt;STRONG&gt;Building the Pong Game&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;To play the Pong game within SAP Analytics Cloud, you’ll need to develop a custom widget using at least two components:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;JavaScript File for Game Logic (Main.js)&lt;/STRONG&gt;:&lt;BR /&gt;Write a script to control the movement of the ball and the paddles, handle collision detection and much more. This code will define the game's behavior and interactivity.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="main js example.png" style="width: 548px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264957iB4142516A6A2F018/image-size/large?v=v2&amp;amp;px=999" role="button" title="main js example.png" alt="main js example.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;JSON File (Index.json)&lt;/STRONG&gt;:&lt;BR /&gt;This file specifies the custom widget, defining details such as its name, description, and version. It also allows you to define properties, methods, and events, which store game-related data at runtime like player scores or ball speed. You can reference this JSON file in your JavaScript to adjust game settings dynamically based on user interaction.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="json file example.jpg" style="width: 873px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/265003i3ACA91357226D0CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="json file example.jpg" alt="json file example.jpg" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;With these components, you'll be able to create the core functionality of the game. I used Visual Studio Code as development environment but feel free to use a code editor of your choice. In the end you will just upload the mentioned files in SAC, where they’ll be hosted.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="custom widget sac upload.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264961i70E15A0B501C5BA2/image-size/large?v=v2&amp;amp;px=999" role="button" title="custom widget sac upload.jpg" alt="custom widget sac upload.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-551521401"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-355007896"&gt;&lt;STRONG&gt;Storing Custom Widget Game Results in SAC&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Unfortunately, there is currently no possibility to directly write data with custom widgets into SAC models. Although there are open APIs like the PUSH based Data Import Service which allows you to import fact and master data to&amp;nbsp;SAP Analytics Cloud, I chose a simpler approach to avoid unnecessary complexity and efforts required to set up such integrations.&lt;/P&gt;&lt;P&gt;Let’s combine the custom widget with SAC’s standard functionalities.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Prerequisites&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Widget Properties:&amp;nbsp;&lt;BR /&gt;&lt;/STRONG&gt;Define properties in the custom widget to hold and update the data dynamically, such as the scores for Player 1 and Player 2. I set the default value to -1 so you can easily identify if a score wasn’t set correctly.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="cw properties.png" style="width: 396px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264964iDD0DA21DC79BB74A/image-size/large?v=v2&amp;amp;px=999" role="button" title="cw properties.png" alt="cw properties.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Widget Methods:&amp;nbsp;&lt;/STRONG&gt;Next, we define a getter method that allow us to retrieve the values of these properties within SAC.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="cw methods.png" style="width: 963px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264965iAE967746C96CB705/image-size/large?v=v2&amp;amp;px=999" role="button" title="cw methods.png" alt="cw methods.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Model &amp;amp; Data Action:&amp;nbsp;&lt;/STRONG&gt;Now we just need a model in the SAC to store the game-related data from the widget and set up a data action to push the data into the model.&amp;nbsp;We’ll use a basic model with relevant dimensions and measures to store game data.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="model overview.png" style="width: 965px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264966i4A728EB0990472A7/image-size/large?v=v2&amp;amp;px=999" role="button" title="model overview.png" alt="model overview.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;SAC Story (Optimized Design Experience)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-158494391"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId--38019114"&gt;&lt;STRONG&gt;Workflow overview&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="workflow.png" style="width: 971px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264967i81E13427AAB6F170/image-size/large?v=v2&amp;amp;px=999" role="button" title="workflow.png" alt="workflow.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;There are two main game modes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Single Player&lt;/STRONG&gt;: Play against a basic, rule-based AI bot (no fancy learning algorithms here, just a classic bot minding its own business).&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Multiplayer&lt;/STRONG&gt;: Play against a colleague on the same keyboard using simple controls like ‘W’ and ‘S’ for Player 1 and the ‘Up’ and ‘Down’ arrow keys for Player 2.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;While it would have been possible to manage game IDs and players entirely within the custom widget, I chose to use standard elements to reduce widget complexity and test the integration capability. In the end, both ways lead to sufficient results.&lt;/P&gt;&lt;P&gt;But enough talk - A picture is worth a thousand words. A GIF even more. Let's illustrate the workflow with a practical example of the implementation:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Single Player&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Singleplayer Workflow.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264970i18F385F756260DC8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Singleplayer Workflow.gif" alt="Singleplayer Workflow.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Multi Player&lt;/STRONG&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Multiplayer Workflow.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264972i8CFFCE39C187382A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Multiplayer Workflow.gif" alt="Multiplayer Workflow.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you can see, the game flow is simple. We create players and a unique game ID. Afterwards, the game is played, and the results are stored via data action. In addition, I added a hierarchy to the game dimension, enabling us to group matches under parent nodes. This helps to distinguish between different game sessions - perfect for scenarios like playing a best-of-three series against a colleague.&lt;/P&gt;&lt;P&gt;Let’s quickly clarify, how the creation of transactional data works.&lt;BR /&gt;Like already mentioned, we dynamically update the custom widgets properties to store the goals each player achieves and derive which player won / lost the game. These properties can be read using custom methods we define in our custom widget like ‘getScore()’. Adding ‘console.log()’, we can display the game result in the console.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="sac cw method.png" style="width: 980px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264992i9FBCF771CE6D9BF8/image-size/large?v=v2&amp;amp;px=999" role="button" title="sac cw method.png" alt="sac cw method.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, we can use these values to set numeric parameters of a data action to persist the results in our model.&lt;/P&gt;&lt;H2 id="toc-hId-112721738"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId--83791767"&gt;&lt;STRONG&gt;Reporting&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Once the game is played and data is stored, you can easily build a report to visualize your stats. Of course, the possibilities are endless - this could be expanded to track win rates, visualizing seasons and tournaments or even predict game outcomes. But for now, we’ve kept it simple.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="reporting.png" style="width: 968px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264993i7363782AD518666D/image-size/large?v=v2&amp;amp;px=999" role="button" title="reporting.png" alt="reporting.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--280305272"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId--476818777"&gt;&lt;STRONG&gt;Extras&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Alongside the core gameplay, I added a few extra touches with the custom widget:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Themes&lt;/STRONG&gt;: A custom theme can change the ball to a logo and change the color of different parts like the paddles.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Game Music&lt;/STRONG&gt;: A theme melody plays in the background during the game, with sound effects for paddle collisions, a victory sound when you win, and a sad tone for losing.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Practice Mode&lt;/STRONG&gt;: A mode that allows players to practice without storing any data.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Theme Change.gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264996i66BCD9EC4F7360AD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Theme Change.gif" alt="Theme Change.gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId--673332282"&gt;&lt;STRONG&gt;Key Insights to Take Away:&lt;/STRONG&gt;&lt;/H2&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Custom Widgets Are Cool&lt;/STRONG&gt;: The ability to create interactive, personalized widgets within SAP Analytics Cloud is an incredible feature. Custom widgets enable you to go beyond standard functionalities, like embedding games for a bit of fun.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Bring Planning to Life&lt;/STRONG&gt;: The integration of planning functionality with a game, like tracking your scores, demonstrates how SAC can blend analytics with custom interactive experiences.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Creative Opportunities&lt;/STRONG&gt;: The combination of SAC's customization and standard features allows for many use cases. Whether you are creating a game or a more complex business-related scenario, the toolset allows creativity.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Ready to give custom widgets a try? Dive in, and let the games begin!&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":smiling_face_with_smiling_eyes:"&gt;😊&lt;/span&gt;&amp;nbsp;&lt;span class="lia-unicode-emoji" title=":video_game:"&gt;🎮&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;Cheers,&lt;BR /&gt;&lt;BR /&gt;Tim&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-analytics-cloud-pong-game-a-fun-fusion-of-custom-widgets-and-standard/ba-p/14108951"/>
    <published>2025-05-27T09:01:11.278000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-fiori-application-generator-available-in-open-source/ba-p/14109021</id>
    <title>SAP Fiori Application Generator Available in Open Source</title>
    <updated>2025-05-27T09:05:02.853000+02:00</updated>
    <author>
      <name>jlong</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/724881</uri>
    </author>
    <content>&lt;P&gt;The SAP Fiori tools team is delighted to announce that the underlying code for the SAP Fiori Application Generator has been moved entirely to open source. This follows our vision that was first outlined by our Chief Architect in a &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/the-open-ux-tools-journey/ba-p/13495124" target="_self"&gt;blog post&lt;/A&gt; from 2021 (Yes, this has been a long journey ‌&lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;‌).&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why Open Source?&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Our goals haven’t changed—only expanded:&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Tighter collaboration. Work side-by-side with the community rather than behind closed doors.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Full transparency. See exactly how the generator works, suggest improvements, or fork it for your own needs.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Faster innovation &amp;amp; broader adoption. Community pull-requests beat private roadmaps every time.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Our open source&amp;nbsp;GitHub project now contains multiple packages that comprise the SAP Fiori Application Generator and span functionality from generation to deployment, including but not limited to:&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;Package&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;What it does&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="57px"&gt;&lt;A href="https://www.npmjs.com/package/@sap-ux/axios-extension" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ux/axios-extension&lt;/A&gt;&lt;/TD&gt;&lt;TD width="50%" height="57px"&gt;Handles authenticated HTTP calls so your generator prompts fetch remote data seamlessly.&amp;nbsp;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="85px"&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1862993"&gt;@SAP&lt;/a&gt;-ux/*-writer&lt;/P&gt;&lt;/TD&gt;&lt;TD width="50%" height="85px"&gt;Reusable file writers that output consistent and version-appropriate SAP Fiori elements application files for building SAP Fiori Elements and freestyle SAPUI5 applications.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;&lt;A href="https://www.npmjs.com/package/@sap-ux/deploy-tooling" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ux/deploy-tooling&lt;/A&gt;&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;Opinionated deploy tasks for ABAP systems.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="85px"&gt;&lt;A href="https://www.npmjs.com/package/@sap-ux/odata-service-inquirer" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ux/odata-service-inquirer&amp;nbsp;&lt;/A&gt;&lt;/TD&gt;&lt;TD width="50%" height="85px"&gt;Provides reusable configurable inquirer prompts (for use in Yeoman generators) for connecting to multiple back-end types and retrieval of service data.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="167px"&gt;&lt;A href="https://www.npmjs.com/package/@sap-ux/fiori-app-sub-generator" target="_self" rel="nofollow noopener noreferrer"&gt;@sap-ux/fiori-app-sub-generator&lt;/A&gt;&amp;nbsp;&lt;/TD&gt;&lt;TD width="50%" height="167px"&gt;The main entry point for generation of SAP Fiori Elements based applications. Once a template type is selected in the &lt;A href="https://www.npmjs.com/package/@sap/generator-fiori" target="_self" rel="nofollow noopener noreferrer"&gt;@sap/generator-fiori&lt;/A&gt; generator, this is the sub-generator that co-ordinates prompting the user, using the inquirers and generates the files, using the writers.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;You’ll&lt;/SPAN&gt;&lt;SPAN class=""&gt; also find shared utilities, end-to-end test suites, and plenty of docs.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2025-05-22 at 09.37.05.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/264926i20DDCB0C67B65CA3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-05-22 at 09.37.05.png" alt="Screenshot 2025-05-22 at 09.37.05.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&amp;nbsp;&lt;SPAN class=""&gt;Image - SAP Fiori Tools and Generators - High-Level Modules and Dependencies&lt;/SPAN&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Not a simple "Lift &amp;amp; Shift"&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Before open-sourcing the code, we broke up a monolith, added TypeScript typings, improved test coverage, and simplified internal APIs so you get clean, reusable, and well-documented code from day one.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How Can You help?&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;• Utilize our tools, try generating a SAP Fiori app, deploy it, and tell us where we can improve?&lt;BR /&gt;• Star &amp;amp; fork the repos of interest to raise their visibility.&lt;BR /&gt;• Open issues or PRs—bug fixes, new features or documentation tweaks.&lt;/P&gt;&lt;P&gt;Is there anything missing that you think should be there? Let us know and open a feature request at&amp;nbsp;&lt;A href="https://github.com/SAP/open-ux-tools/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/open-ux-tools/issues&lt;/A&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-fiori-application-generator-available-in-open-source/ba-p/14109021"/>
    <published>2025-05-27T09:05:02.853000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cachebuddy-custom-widget-local-storage-integration-for-sap-analytics-cloud/ba-p/14116213</id>
    <title>CacheBuddy Custom Widget: Local Storage Integration for SAP Analytics Cloud</title>
    <updated>2025-06-04T11:36:55.127000+02:00</updated>
    <author>
      <name>rohitchouhan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/782213</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Frame 1.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/268675iF20ED6387E9C85FC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Frame 1.jpg" alt="Frame 1.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The CacheBuddy custom widget for SAP Analytics Cloud is designed to offer powerful client-side data caching by utilizing the browser's cache memory feature. It provides a well-structured and type-safe API for storing data persistently, retrieving it efficiently, and managing a variety of data types, including numbers, strings, booleans, objects, and arrays.&lt;/P&gt;&lt;P&gt;One of the key features of CacheBuddy is its ability to maintain data persistence across different browser sessions and closures. Unlike session-based caching, CacheBuddy keeps cached data available until it’s explicitly deleted by the host application or the user. This lasting persistence greatly enhances application performance and responsiveness by reducing the need for repeated data retrieval from remote backend systems.&lt;/P&gt;&lt;P&gt;CacheBuddy makes it easy to transfer information between different stories within the SAP Analytics Cloud environment. This means that one application (like "Application A") can store a value that another application (like "Application B") can easily access. This design eliminates the need for extra storage services, complex data models, or complicated configurations, making data communication between various analytical applications straightforward and efficient.&lt;/P&gt;&lt;H4 id="toc-hId-1989624959"&gt;&lt;STRONG&gt;Features and Advantages&lt;/STRONG&gt;&lt;/H4&gt;&lt;H5 id="toc-hId-1922194173"&gt;&lt;STRONG&gt;Key Features:&lt;/STRONG&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Type-Specific Data Management:&lt;/STRONG&gt; Offers dedicated methods for storing and retrieving specific data types (number, string, boolean, object, array), ensuring data integrity and simplifying development.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Persistent Storage:&lt;/STRONG&gt; Data is stored in localStorage, guaranteeing persistence across browser sessions, tabs, and closures until explicitly deleted by the application or user action.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Cache Utility Functions:&lt;/STRONG&gt; Includes methods to check for the existence of cached items, delete individual entries, or clear all CacheBuddy-managed data.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Comprehensive Data Retrieval:&lt;/STRONG&gt; The getAllCacheMemory() method allows for the retrieval of all cached data, with automatic type parsing for convenience.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Input Validation:&lt;/STRONG&gt; Incorporates basic validation for method parameters, providing console feedback for invalid inputs.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Optimized Performance:&lt;/STRONG&gt; Leverages browser cache memory technology to deliver fast data storage and retrieval.&lt;/LI&gt;&lt;/UL&gt;&lt;H5 id="toc-hId-1725680668"&gt;&lt;STRONG&gt;Advantages:&lt;/STRONG&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Enhanced Application Performance:&lt;/STRONG&gt; By leveraging local data storage, CacheBuddy minimizes repeated server requests, leading to faster data access and a more responsive user experience within SAP Analytics Cloud applications.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Reduced Server Load:&lt;/STRONG&gt; Decreased reliance on continuous backend data fetching contributes to a lower operational load on SAP Analytics Cloud servers and associated data sources.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Streamlined Data Persistence:&lt;/STRONG&gt; Provides an intuitive and high-level API for localStorage, simplifying the implementation of client-side data persistence compared to direct cache manipulation.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Improved Data Organization:&lt;/STRONG&gt; The automatic key prefixing ensures that CacheBuddy's data is distinctly identifiable and managed within the browser's local storage.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-1400084444"&gt;Video Tutorial&lt;/H4&gt;&lt;P&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FpDWFVYq0QxY%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DpDWFVYq0QxY&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FpDWFVYq0QxY%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="200" height="112" scrolling="no" title="CacheBuddy Custom Widget | Tutorial with All Methods | SAP Analytics Cloud | Rohit Chouhan" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1203570939"&gt;Cache Memory Management&lt;/H4&gt;&lt;P&gt;This document outlines the methods available for managing cached data. These methods allow you to store, retrieve, and manipulate various data types in a temporary cache, improving application performance by reducing the need to re-fetch or re-compute data.&lt;/P&gt;&lt;HR /&gt;&lt;H5 id="toc-hId-1136140153"&gt;Storing Data in Cache&lt;/H5&gt;&lt;P&gt;These methods are used to store different types of data in the cache, each identified by a unique ID. They all return a boolean indicating whether the operation was successful.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;setNumberCacheMemory(id: string, value: number)&lt;/STRONG&gt; - Stores a numerical value.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;setStringCacheMemory(id: string, value: string)&lt;/STRONG&gt; - Stores a string value.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;setBooleanCacheMemory(id: string, value: boolean)&lt;/STRONG&gt; - Stores a boolean value (true or false).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;setSelectionCacheMemory(id: string, value: Selection)&lt;/STRONG&gt; - Stores a non-array JavaScript object as a JSON string.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;setArrayCacheMemory(id: string, value: String[])&lt;/STRONG&gt; - Stores a JavaScript array as a JSON string.&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H5 id="toc-hId-939626648"&gt;Retrieving Data from Cache&lt;/H5&gt;&lt;P&gt;These methods are used to retrieve previously stored data from the cache using its ID.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;getNumberCacheMemory(id: string)&lt;/STRONG&gt; - Returns the stored number.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;getStringCacheMemory(id: string)&lt;/STRONG&gt; - Returns the stored string.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;getBooleanCacheMemory(id: string)&lt;/STRONG&gt; - Returns the stored boolean.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;getSelectionCacheMemory(id: string)&lt;/STRONG&gt; - Returns the stored selection object.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;getArrayCacheMemory(id: string)&lt;/STRONG&gt; - Retrieves and parses a stored array from the cache.&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H5 id="toc-hId-743113143"&gt;Managing Cache Entries&lt;/H5&gt;&lt;P&gt;These methods provide functionality for checking the existence of, deleting, and retrieving all cache entries.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;existCacheMemory(id: string)&lt;/STRONG&gt; - Returns a boolean indicating whether a cache entry with the specified ID exists.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;deleteCacheMemory(id: string)&lt;/STRONG&gt; - Removes the specific cache entry identified by its ID. Returns a boolean indicating success.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;deleteAllCacheMemory()&lt;/STRONG&gt; - Deletes all entries from the cache. Returns a boolean indicating success.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;getAllCacheMemory()&lt;/STRONG&gt; - Retrieves all items currently in the cache as a single Selection object.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-417516919"&gt;&lt;STRONG&gt;Usage&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;To get started with CacheBuddy, simply download the CacheBuddy.json file from the link below. Then, just follow the instructions provided to install CacheBuddy in your SAP Analytics Cloud environment.&lt;/P&gt;&lt;P&gt;GitHub Repository: &lt;A href="https://github.com/SAP-Custom-Widget/CacheBuddy" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-Custom-Widget/CacheBuddy&lt;/A&gt;&lt;BR /&gt;Direct Download:&amp;nbsp;&lt;A href="https://sap-custom-widget.rohitchouhan.com/?dl=CacheBuddy" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap-custom-widget.rohitchouhan.com/?dl=CacheBuddy&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Download the CacheBuddy.json.&lt;/LI&gt;&lt;LI&gt;Go to your SAC Portal, select Stories/Analytic Application from the left sidebar, and then go to the Custom Widget tab.&lt;/LI&gt;&lt;LI&gt;Click on the + icon on the right side and select the CacheBuddy.json file that you downloaded.&lt;/LI&gt;&lt;LI&gt;You're done! You can now use it in your app.&lt;/LI&gt;&lt;/UL&gt;&lt;H4 id="toc-hId-221003414"&gt;Complete Example Code:&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// 1. Store a number
var isAgeStored = CacheBuddy_1.setNumberCacheMemory("userAge", 26);
if (isAgeStored) {
    console.log(["User age stored successfully."]);
} else {
    console.log(["Failed to store user age."]);
}

// 2. Retrieve the number
var retrievedAge = CacheBuddy_1.getNumberCacheMemory("userAge");
console.log(["Retrieved age: ", retrievedAge]); // Expected: 30

// 3. Store a string
var isNameStored = CacheBuddy_1.setStringCacheMemory("userName", "Rohit");
console.log(["User name stored: ", isNameStored]); // Expected: true

// 4. Retrieve the string
var retrievedName = CacheBuddy_1.getStringCacheMemory("userName");
console.log(["Retrieved name: ", retrievedName]); // Expected: Rohit

// 5. Store a boolean
var isActiveStored = CacheBuddy_1.setBooleanCacheMemory("userActive", true);
console.log(["User active status stored: ", isActiveStored]); // Expected: true

// 6. Retrieve the boolean
var retrievedActive = CacheBuddy_1.getBooleanCacheMemory("userActive");
console.log(["Retrieved active status: ", retrievedActive]); // Expected: true

// 7. Store a selection (non-array JavaScript object)
var userSelection = {
    "theme": "dark",
    "title": "CacheBuddy"
};
var isSelectionStored = CacheBuddy_1.setSelectionCacheMemory("userSettings", userSelection);
console.log(["User settings stored: ", isSelectionStored]); // Expected: true

// 8. Retrieve the selection
var retrievedSettings = CacheBuddy_1.getSelectionCacheMemory("userSettings");
console.log(["Retrieved settings:", retrievedSettings]); // Expected: { theme: "dark", notifications: true }

// 9. Store an array
var userHobbies = ["coding","writing", "music"];
var isHobbiesStored = CacheBuddy_1.setArrayCacheMemory("userHobbies", userHobbies);
console.log(["User hobbies stored: ", isHobbiesStored]); // Expected: true

// 10. Retrieve the array
var retrievedHobbies = CacheBuddy_1.getArrayCacheMemory("userHobbies");
console.log(["Retrieved hobbies:", retrievedHobbies]); // Expected: ["coding","writing", "music"]

// 11. Check if an entry exists
var doesAgeExist = CacheBuddy_1.existCacheMemory("userAge");
console.log(["Does 'userAge' exist? ", doesAgeExist]); // Expected: true

var doesNonExistentExist = CacheBuddy_1.existCacheMemory("nonExistentKey");
console.log(["Does 'nonExistentKey' exist? ", doesNonExistentExist]); // Expected: false

// 12. Delete a specific cache entry
var isAgeDeleted = CacheBuddy_1.deleteCacheMemory("userAge");
console.log(["User age deleted: ", isAgeDeleted]); // Expected: true

var doesAgeStillExist = CacheBuddy_1.existCacheMemory("userAge");
console.log(["Does 'userAge' exist after deletion? ", doesAgeStillExist]); // Expected: false

// 13. Retrieve all cache entries (after some deletions)
var allCache = CacheBuddy_1.getAllCacheMemory();
console.log(["All current cache entries:", allCache]);
// This will show userName, userActive, userSettings, userHobbies as objects, and userAge will be gone.

// 14. Delete all cache entries
var areAllDeleted = CacheBuddy_1.deleteAllCacheMemory();
console.log(["All cache entries deleted: ", areAllDeleted]); // Expected: true

// 15. Verify all are deleted
var finalAllCache = CacheBuddy_1.getAllCacheMemory();
console.log(["All cache entries after deleteAllCacheMemory:", finalAllCache]); // Expected: {} or an empty Selection object&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId--473227186"&gt;Conclusion&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/H4&gt;&lt;P&gt;The CacheBuddy custom widget is a game-changer for SAP Analytics Cloud developers who want to boost application performance and ensure smooth data flow. With its solid, type-safe caching system that uses localStorage, it cuts down on backend calls and makes everything feel more responsive. Plus, its ability to transfer data directly between stories simplifies those complex analytical tasks.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cachebuddy-custom-widget-local-storage-integration-for-sap-analytics-cloud/ba-p/14116213"/>
    <published>2025-06-04T11:36:55.127000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/unsafe-eval-error-in-sap-build-work-zone-understanding-and-fixing-a-csp/ba-p/14123035</id>
    <title>Unsafe-eval error in SAP Build Work Zone: Understanding and fixing a CSP blockage</title>
    <updated>2025-06-10T07:00:00.028000+02:00</updated>
    <author>
      <name>valentincadart</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/786198</uri>
    </author>
    <content>&lt;P&gt;While developing a SAP Fiori application in SAP Business Application Studio (BAS), I embedded an external component within a custom SAPUI5 component. The application worked perfectly in the local development environment, but once deployed into SAP Build Work Zone (BWZ), it no longer loaded as expected.&lt;/P&gt;&lt;P&gt;The browser console revealed an error related to the Content Security Policy (CSP), specifically due to the indirect use of eval(). This blog post summarizes my learnings about CSP and how I resolved the issue.&lt;/P&gt;&lt;H2 id="toc-hId-1732291811"&gt;What is the Content Security Policy (CSP)?&lt;/H2&gt;&lt;P&gt;CSP is a web security standard defined by the W3C and enforced by web browsers. It allows developers to control which resources (scripts, images, styles, etc.) a browser is allowed to load and execute, helping to prevent Cross-Site Scripting (XSS) attacks and malicious script injections.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For example, the following directive&amp;nbsp;means that only scripts from the same origin as the application are permitted.&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;Content-Security-Policy: script-src 'self'&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;Other common directives include:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;style-src: Specifies allowed sources for stylesheets.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;img-src: Limits where images can be loaded from.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;connect-src: Defines allowed sources for fetching resources like APIs.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;default-src: Specifies a fallback for all resource types if not otherwise defined.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;frame-ancestors: Controls which sources can embed the page in an iframe.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;…&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;To learn more about CSP, refer to the official documentation on MDN: &lt;/SPAN&gt;&lt;A href="https://developer.mozilla.org/fr/docs/Web/HTTP/CSP](https://developer.mozilla.org/fr/docs/Web/HTTP/CSP)" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;https://developer.mozilla.org/fr/docs/Web/HTTP/CSP&lt;/SPAN&gt;&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1535778306"&gt;Problem context&lt;/H2&gt;&lt;P&gt;The application was developed in SAP Business Application Studio and contained an external web component wrapped inside a custom SAPUI5 component.&lt;/P&gt;&lt;P&gt;Once deployed to SAP Build Work Zone, the interface no longer displayed at all. The browser console then showed the following error:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;Unsafe-eval error (CSP Compliant)
Uncaught (in promise) EvalError:
Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script
in the following Content Security Policy directive: "script-src * data: blob:".&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-1339264801"&gt;Error Meaning&lt;/H2&gt;&lt;P&gt;In CSP, dynamic functions like eval() or new Function() are blocked by default because they can introduce serious security risks. These functions allow JavaScript code to be generated and executed at runtime, which can be exploited to inject and run malicious scripts—commonly associated with XSS attacks.&lt;/P&gt;&lt;P&gt;To protect the application's security, dynamic code execution is blocked by default in the Content Security Policy (CSP). Allowing it would require the inclusion of the unsafe-eval directive in the CSP, but this weakens security and should be avoided in production environments.&lt;/P&gt;&lt;H2 id="toc-hId-1142751296"&gt;Root cause analysis&lt;/H2&gt;&lt;P&gt;In the external component I used, I was generating an HTML element returned as a string (this is where I messed up). This HTML was then dynamically injected into the component’s DOM. However, the external component was interpreting this string using new Function(), violating CSP rules.&lt;/P&gt;&lt;P&gt;This behavior went unnoticed locally in Business Application Studio because CSP policies are often disabled or applied more leniently in development environments. However, in SAP Build Work Zone, a strict CSP is enforced, blocking dynamic code evaluation like this.&lt;/P&gt;&lt;H2 id="toc-hId-946237791"&gt;Implemented solution&lt;/H2&gt;&lt;P&gt;By consulting the official documentation of the component, I found that I could provide a JavaScript function directly instead of passing a returned string containing HTML. This approach enables the component to use a safe rendering function, avoiding reliance on blocked mechanisms like eval() or new Function().&lt;/P&gt;&lt;P&gt;Here is an example of the new CSP-compliant code:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const generateDropdown = (aOptions) =&amp;gt; {
  // Create the select element
  const oSelectElement = document.createElement('select');
  oSelectElement.classList.add('myCustomSelectClass');

  // Loop through the options array and create option elements
  aOptions.forEach(oOption =&amp;gt; {
    const oOptionElement = document.createElement('option');
    oOptionElement.value = oOption.value;
    oOptionElement.textContent = oOption.label;

    // Append the option to the select
    oSelectElement.appendChild(oOptionElement); 
  });

  return oSelectElement;
};

// Example usage with an array of options
const options = [
  { value: '1', label: 'Option 1' },
  { value: '2', label: 'Option 2' },
  { value: '3', label: 'Option 3' }
];

// Generate the dropdown dynamically
generateDropdown(options);&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-749724286"&gt;Lessons learned&lt;/H2&gt;&lt;P&gt;An application that works correctly in BAS may encounter critical errors in BWZ if it does not comply with the CSP. It is essential to prioritize the use of real JavaScript functions over injecting HTML or JavaScript code as strings. Often, the documentation for external components provides alternative solutions that are CSP-compliant, and these should be carefully considered.&lt;/P&gt;&lt;H2 id="toc-hId-553210781"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;The Content Security Policy is an essential tool for securing web applications against XSS attacks and the execution of uncontrolled code. In environments like SAP Build Work Zone, CSP is strictly enforced, which can lead to unexpected errors.&lt;/P&gt;&lt;P&gt;By adapting our implementation to comply with CSP rules, we not only ensure the compatibility of our applications but also enhance their security. I hope this feedback will be useful to you.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/unsafe-eval-error-in-sap-build-work-zone-understanding-and-fixing-a-csp/ba-p/14123035"/>
    <published>2025-06-10T07:00:00.028000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/hide-show-dimensions-on-tables-and-charts-in-sac-in-view-present-mode/ba-p/14134028</id>
    <title>Hide / Show dimensions on Tables and Charts in SAC in view / present mode</title>
    <updated>2025-06-23T17:14:11.896000+02:00</updated>
    <author>
      <name>skapitan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/830853</uri>
    </author>
    <content>&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Preamble&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;FONT size="4"&gt;This blog guides SAC application designers and engineers on a simple and effective solution for how to control which&lt;/FONT&gt;&lt;FONT size="4"&gt; dimensions to be displayed on a table or chart in "view" or "present" modes. So that business user could have a flexible way to manually choose different dimensions within the same widget at run-time.&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;FONT size="4"&gt;Lately I came across multiple questions in various SAP discussion boards on how to hide a particular dimension from a table, and it inspired me to start this blog to give some useful hints for achieving it.&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;FONT size="4"&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Analysis&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;FONT size="4"&gt;Let's take as an example a simple Sales Orders model, that gets consumed by the Sales Order table with the following&amp;nbsp;three measures and four dimensions.&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;&lt;EM&gt;&lt;FONT size="4"&gt;Model:&lt;/FONT&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="slavek_kapitanec_1-1750665159122.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277470i9C54806595ACD70C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_1-1750665159122.png" alt="slavek_kapitanec_1-1750665159122.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;EM&gt;T&lt;/EM&gt;&lt;EM&gt;able (view mode):&lt;/EM&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_0-1750746361954.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278001i8163D474CEAE00FB/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_0-1750746361954.png" alt="skapitan_0-1750746361954.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;The goal is to have a possibility to hide any of four dimensions on this table in view mode.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;With the new features, such as Optimized Design Experience and the ability to add script elements that consume SAC API to existing stories, it is possible to tweak standard behavior.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Solution approach&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;The idea of controlling dimension visibility in a table is to create a&amp;nbsp;&lt;STRONG&gt;dropdown widget&lt;/STRONG&gt;&amp;nbsp;where all available dimensions would be stored and set up as &lt;STRONG&gt;shown &lt;/STRONG&gt;or &lt;STRONG&gt;hidden&lt;/STRONG&gt;.&amp;nbsp; Then, the business user could manually set and define a particular dimension to be shown or hidden by selecting it from the dropdown list.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;The following steps instruct how to make dimensions dynamic for a table widget. For a chart, it will be very similar, with some slight adjustments that will be covered in the end of this blog.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;NOTE: This solution is not hardcoded, it is neither dependent on a number of defined dimensions nor on their type (it handles hierarchies as well). It can be taken as a add-on feature to implement dynamic dimensions at run-time.&amp;nbsp;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;&lt;EM&gt;&lt;STRONG&gt;Step1&lt;/STRONG&gt;&lt;/EM&gt;. Assuming the story structure is constructed as depicted below, add a new dropdown element (&lt;FONT color="#993300"&gt;dropdownDimensionTable&lt;/FONT&gt;) into same&amp;nbsp;page/lane&amp;nbsp;along with the corresponding table (&lt;FONT color="#993300"&gt;tableSalesOrders&lt;/FONT&gt;). No input values needed, just keep it empty from the scratch.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_2-1750748041067.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278028i7B2E66EA9B1D25B6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_2-1750748041067.png" alt="skapitan_2-1750748041067.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_2-1750746525016.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278005i12CF737F02FB3BAA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_2-1750746525016.png" alt="skapitan_2-1750746525016.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;&lt;EM&gt;&lt;STRONG&gt;Step2&lt;/STRONG&gt;&lt;/EM&gt;. Create two new collections (as script variables) that will store dimension IDs and their description values.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slavek_kapitanec_1-1750678737806.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277578i28D3DB1029C17725/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_1-1750678737806.png" alt="slavek_kapitanec_1-1750678737806.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;Set both variables as an Array.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_1-1750747982653.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278027i1516B1FBEEFA01C2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_1-1750747982653.png" alt="skapitan_1-1750747982653.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;&lt;EM&gt;&lt;STRONG&gt;Step3&lt;/STRONG&gt;&lt;/EM&gt;. &lt;/FONT&gt;&lt;FONT size="4"&gt;&lt;FONT color="#000000"&gt;Initialize both variables and the dropdown list with dimension &lt;FONT color="#993300"&gt;ID&lt;/FONT&gt; and &lt;FONT color="#993300"&gt;Description&lt;/FONT&gt;&amp;nbsp;defined in the table&lt;/FONT&gt;&lt;FONT color="#000000"&gt;. The script below gets the job done. Put it into the table's page in &lt;FONT color="#993300"&gt;onInitialization&lt;/FONT&gt; event.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slavek_kapitanec_0-1750680330594.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277583i5E3F48CD65DA7440/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_0-1750680330594.png" alt="slavek_kapitanec_0-1750680330594.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slavek_kapitanec_1-1750680444224.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277584i05E9296D4BF762C8/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_1-1750680444224.png" alt="slavek_kapitanec_1-1750680444224.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// reset global dimensions collections
while (actualDimensionIdTable.length) { actualDimensionIdTable.pop(); }  // dimensions id
while (actualDimensionDescTable.length) { actualDimensionDescTable.pop(); }  // dimensions description

// list of all available dimension in the given table (tableSalesOrders)
var tableDimensionList = tableSalesOrders.getDimensionsOnRows();
var modelDimensionList = tableSalesOrders.getDataSource().getDimensions();

// loop through all available dimensions in chart
for (var i = 0; i &amp;lt; tableDimensionList.length; i++) {
	// populate global dimensions collections
	actualDimensionIdTable.push(tableDimensionList[i]);  // dimensions id
	for (var j = 0; j &amp;lt; modelDimensionList.length; j++) {  // dimensions description
		if (modelDimensionList[j].id === tableDimensionList[i]) {
			actualDimensionDescTable.push(modelDimensionList[j].description);
		}
	}
	// initiate dropdown items
	dropdownDimensionTable.addItem(actualDimensionDescTable[i]);
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT color="#000000"&gt;&lt;EM&gt;&lt;STRONG&gt;&lt;FONT size="4" color="#000000"&gt;Step4&lt;/FONT&gt;.&amp;nbsp;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/FONT&gt;&lt;FONT size="4" color="#000000"&gt;Create a script that implements main logic. &lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;As user picks a particular dimension item from the dropdown list, this action will either&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT size="4"&gt;&lt;FONT color="#000000"&gt;hide dimension that was visible before and add the status (HIDDEN)&lt;/FONT&gt;&lt;FONT color="#000000"&gt;&amp;nbsp;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;FONT color="#000000"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; or&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT size="4" color="#000000"&gt;show dimension that was invisible before&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;The script below handles this behavior. Put it into the dropdown's &lt;FONT color="#993300"&gt;onSelect&lt;/FONT&gt; event.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="slavek_kapitanec_0-1750681119959.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277585i22D1C5250A59BDCD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_0-1750681119959.png" alt="slavek_kapitanec_0-1750681119959.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;var pickedDimension = dropdownDimensionTable.getSelectedKey();  // picked from dropdown
var dimensionIndex = actualDimensionDescTable.indexOf(pickedDimension);  // index in the collection
var position = 0;
var idx = 0;

// Show / Hide picked Dimension in the Table
if (pickedDimension.includes(' (HIDDEN)')) {  // show
	actualDimensionDescTable[dimensionIndex] = pickedDimension.replace(' (HIDDEN)','');
	for (idx = 0; idx &amp;lt; dimensionIndex; idx++) {
		if (!actualDimensionDescTable[idx].includes(' (HIDDEN)')) {
			position++;
		}
	}
	tableSalesOrders.addDimensionToRows(actualDimensionIdTable[dimensionIndex], position);
} else {  // hide
	actualDimensionDescTable[dimensionIndex] = pickedDimension + ' (HIDDEN)';
	tableSalesOrders.removeDimension(actualDimensionIdTable[dimensionIndex]);
}

// alway reset dropdown list in the end, with new (changed) items 
dropdownDimensionTable.removeAllItems();
for (idx = 0; idx &amp;lt; actualDimensionDescTable.length; idx++) {
	dropdownDimensionTable.addItem(actualDimensionDescTable[idx]);
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT size="4"&gt;Run the Report in view/present mode and note the dropdown list is automatically populated with all the dimensions.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_0-1750747543882.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278020i7786FDF9D17BF97B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_0-1750747543882.png" alt="skapitan_0-1750747543882.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;SPAN&gt;Hide &lt;/SPAN&gt;&lt;FONT color="#993300"&gt;Sales Org Id&lt;/FONT&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;FONT color="#993300"&gt;Partner Id&lt;/FONT&gt;&lt;SPAN&gt; by picking them from the drop down list. They will be removed from the dimension columns in the table and will be set with status (HIDDEN) in the dropdown list.&amp;nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_4-1750746736442.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278010i56A3F95961FFAE78/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_4-1750746736442.png" alt="skapitan_4-1750746736442.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;SPAN&gt;Hidden dimensions could be made visible by selecting them once again from dropdown list. Status (HIDDEN) will be unset and dimension column will be added into the table with the same position as it was defined in design builder.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4" color="#000000"&gt;Eg, make dimension &lt;FONT color="#993300"&gt;Partner Id&lt;/FONT&gt; visible.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_5-1750746813230.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278011iE63237AFE9F712C0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_5-1750746813230.png" alt="skapitan_5-1750746813230.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Adjustments for Charts&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;For charts, the solution is the same as for tables with only slight differences in steps 3 and 4: in &lt;FONT color="#993300"&gt;addDimension&lt;/FONT&gt; and &lt;FONT color="#993300"&gt;removeDimension&lt;/FONT&gt; use &lt;FONT color="#993300"&gt;Feed&lt;/FONT&gt; as an extra parameter:&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;chartSalesOrders.addDimension(actualDimensionIdChart[dimensionIndex], Feed.CategoryAxis, position);&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;chartSalesOrders.removeDimension(actualDimensionIdChart[dimensionIndex], Feed.CategoryAxis);&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT size="4"&gt;Considering that for chart only two dimensions are defined - &lt;FONT color="#993300"&gt;Sales Org&lt;/FONT&gt; and &lt;FONT color="#993300"&gt;Partner Id&lt;/FONT&gt;,&amp;nbsp; the dashboard looks like the following:&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="slavek_kapitanec_3-1750689345486.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277698iCF70E8341E3E6BA0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="slavek_kapitanec_3-1750689345486.png" alt="slavek_kapitanec_3-1750689345486.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;Pick &lt;FONT color="#993300"&gt;Partner Id&lt;/FONT&gt; dimension from in the dropdown list to hide it from the chart:&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="skapitan_0-1750747794031.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/278025i07580496F4B88507/image-size/medium?v=v2&amp;amp;px=400" role="button" title="skapitan_0-1750747794031.png" alt="skapitan_0-1750747794031.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/hide-show-dimensions-on-tables-and-charts-in-sac-in-view-present-mode/ba-p/14134028"/>
    <published>2025-06-23T17:14:11.896000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/introducing-delaycode-a-timing-delay-custom-widget-for-sap-analytics-cloud/ba-p/14132502</id>
    <title>Introducing DelayCode: A Timing Delay Custom Widget for SAP Analytics Cloud</title>
    <updated>2025-06-27T09:44:27.838000+02:00</updated>
    <author>
      <name>rohitchouhan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/782213</uri>
    </author>
    <content>&lt;P&gt;The DelayCode custom widget is a custom timing delay component designed for integration with SAP Analytics Cloud. It provides a simple API for introducing delays, which can be useful in scenarios such as waiting for user interactions, pacing animations, or managing asynchronous operations.&lt;/P&gt;&lt;H2 id="toc-hId-1733190250"&gt;Workflow&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="DelayCode Work Flow.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/276624iE67AF8097B8637CF/image-size/large?v=v2&amp;amp;px=999" role="button" title="DelayCode Work Flow.jpg" alt="DelayCode Work Flow.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1536676745"&gt;&lt;STRONG&gt;Usage&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;STRONG&gt;&lt;div class="video-embed-center video-embed"&gt;&lt;iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F19nLy50-7wk%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D19nLy50-7wk&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F19nLy50-7wk%2Fhqdefault.jpg&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube" width="200" height="112" scrolling="no" title="DelayCode Custom Widget | Tutorial with All Methods | SAP Analytics Cloud | Rohit Chouhan" frameborder="0" allow="autoplay; fullscreen; encrypted-media; picture-in-picture;" allowfullscreen="true"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To get started with DelayCode, simply download the DelayCode.json file from the link below. Then, just follow the instructions provided to install DelayCode in your SAP Analytics Cloud environment.&lt;/P&gt;&lt;P&gt;GitHub Repository: &lt;A href="https://github.com/SAP-Custom-Widget/DelayCode" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-Custom-Widget/DelayCode&lt;/A&gt;&lt;BR /&gt;Direct Download:&amp;nbsp;&lt;A href="https://sap-custom-widget.rohitchouhan.com/?dl=DelayCode" target="_blank" rel="noopener nofollow noreferrer"&gt;https://sap-custom-widget.rohitchouhan.com/?dl=DelayCode&lt;/A&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Download the DelayCode.json.&lt;/LI&gt;&lt;LI&gt;Go to your SAC Portal, select Stories/Analytic Application from the left sidebar, and then go to the Custom Widget tab.&lt;/LI&gt;&lt;LI&gt;Click on the + icon on the right side and select the CacheBuddy.json file that you downloaded.&lt;/LI&gt;&lt;LI&gt;You're done! You can now use it in your app.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1340163240"&gt;Methods&lt;/H2&gt;&lt;P&gt;The DelayCode widget exposes the following method:&lt;/P&gt;&lt;H3 id="toc-hId-1272732454"&gt;delay&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;: Introduces a delay for the specified number of milliseconds. This method can return a boolean value indicating whether the operation was successful.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Parameters&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;milliseconds&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(number)&lt;/STRONG&gt;: The number of milliseconds to delay before the method resolves. For example, passing&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;1000&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will result in a 1-second delay.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Return Type&lt;/STRONG&gt;:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;boolean&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Usage Example&lt;/STRONG&gt;:&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// Logs a greeting message to the console on initialization
console.log("Hello There");
// Output: Hello There

// Introduces a delay of 10,000 milliseconds (10 seconds)
DelayCode_1.delay(10000);

// Logs a farewell message after the delay completes
console.log("Bye, See you");
// Output: Bye, See you (after 10 seconds)&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-947136230"&gt;Events&lt;/H2&gt;&lt;H3 id="toc-hId-879705444"&gt;onTimeOut&lt;/H3&gt;&lt;P&gt;This widget exposes a single event named onTimeOut, which serves as a determinative callback that is triggered upon the completion of the configured delay interval.&lt;/P&gt;&lt;H3 id="toc-hId-683191939"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;The DelayCode widget is a lightweight tool that integrates smoothly into the SAP Analytics Cloud environment, allowing developers to implement timing delays efficiently. Future versions may expand functionality with additional properties and event handling capabilities.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/introducing-delaycode-a-timing-delay-custom-widget-for-sap-analytics-cloud/ba-p/14132502"/>
    <published>2025-06-27T09:44:27.838000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/code-connect-2025-ui5con-recap-hana-tech-con/ba-p/14138893</id>
    <title>Code Connect 2025: UI5con, reCAP, HANA Tech Con</title>
    <updated>2025-06-28T17:16:16.755000+02:00</updated>
    <author>
      <name>TheSebastian</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/142742</uri>
    </author>
    <content>&lt;P&gt;&lt;EM&gt;This blog post summarizes the most important information about Code Connect 2025. It will be updated with further information (e.g. Event App, links to recordings...).&lt;/EM&gt;&lt;/P&gt;&lt;H1 id="toc-hId-1604289440"&gt;Code Connect 2025 – three days, three conferences, one streamlined journey&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="02df9cc3-e4e0-4196-be1b-bc640b4124dc.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280055iD9FEDB08296B9676/image-size/large?v=v2&amp;amp;px=999" role="button" title="02df9cc3-e4e0-4196-be1b-bc640b4124dc.png" alt="02df9cc3-e4e0-4196-be1b-bc640b4124dc.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;SPAN&gt;Join us for the second annual&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Code Connect&lt;/STRONG&gt;&lt;SPAN&gt;, where we're bringing together the hottest tech events in one convenient location. Be ready to connect, collaborate, and code away with a bustling community of like-minded developers. Jump on the Code Connect train and elevate your conference experience!&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Find &lt;STRONG&gt;more information&lt;/STRONG&gt; here:&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://code-connect.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;https://code-connect.dev/&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Event App: &lt;A href="https://code-connect.cfapps.eu10.hana.ondemand.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;link&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="94px"&gt;&lt;H2 id="toc-hId-1536858654"&gt;&lt;STRONG&gt;Code Jams &amp;amp; Warmup&lt;/STRONG&gt;&lt;/H2&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="94px"&gt;&lt;H2 id="toc-hId-1340345149"&gt;UI5con&lt;/H2&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="94px"&gt;&lt;H2 id="toc-hId-1143831644"&gt;reCAP&lt;/H2&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="94px"&gt;&lt;H2 id="toc-hId-947318139"&gt;&lt;SPAN&gt;HANA Tech Con&lt;/SPAN&gt;&lt;/H2&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="60px"&gt;7th of July&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="60px"&gt;8th of July&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="60px"&gt;9th of July&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="60px"&gt;10th of July&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;A href="https://code-connect.dev" target="_blank" rel="noopener nofollow noreferrer"&gt;code-connect.dev&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;A href="https://openui5.org/ui5con/" target="_blank" rel="noopener nofollow noreferrer"&gt;openui5.org/ui5con&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;A href="https://recap-conf.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;recap-conf.dev&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;A href="https://hanatech.community/" target="_blank" rel="noopener nofollow noreferrer"&gt;hanatech.community&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="96px"&gt;See details in text below&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="96px"&gt;&lt;A href="https://openui5.org/ui5con/program.html" target="_blank" rel="noopener nofollow noreferrer"&gt;Agenda&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="96px"&gt;&lt;A href="https://recap-conf.dev/program.html" target="_blank" rel="noopener nofollow noreferrer"&gt;Agenda&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="96px"&gt;&lt;A href="https://hanatech.community/index.html#agenda" target="_blank" rel="noopener nofollow noreferrer"&gt;Agenda&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="97px"&gt;Live Streams: n/a&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="97px"&gt;&lt;A href="https://youtube.com/live/0D0_M4RDiZY" target="_blank" rel="noopener nofollow noreferrer"&gt;Live Stream&lt;/A&gt; (Main Stage)&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="97px"&gt;&lt;P&gt;&lt;A href="https://broadcast.co.sap.com/go/reCAP" target="_blank" rel="noopener noreferrer"&gt;Live Stream&lt;/A&gt; (Main Stage)&lt;/P&gt;&lt;P&gt;&lt;A href="https://teams.microsoft.com/l/meetup-join/19%3ameeting_YjljYWQzNTEtNzkwNC00NDQ2LWE5MDAtYmEzODA3ZGNmZjIw%40thread.v2/0?context=%7b%22Tid%22%3a%2242f7676c-f455-423c-82f6-dc2d99791af7%22%2c%22Oid%22%3a%223d4d6882-45a1-41ce-9418-35a35744348f%22%7d" target="_blank" rel="noopener nofollow noreferrer"&gt;Live Stream&lt;/A&gt; (Side Track)&lt;/P&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="97px"&gt;&lt;P&gt;&lt;A href="https://teams.microsoft.com/l/meetup-join/19%3ameeting_NDdhMDkzNTctZGQ1Yy00NWE2LWEwNmItMmZlZTkyMjBiZTVi%40thread.v2/0?context=%7b%22Tid%22%3a%2242f7676c-f455-423c-82f6-dc2d99791af7%22%2c%22Oid%22%3a%2225813fb4-fdb1-4d92-a6f7-6ff0c076d6cd%22%7d" target="_blank" rel="noopener nofollow noreferrer"&gt;Live Stream&lt;/A&gt; (Main Stage)&lt;/P&gt;&lt;P&gt;&lt;A href="https://teams.microsoft.com/l/meetup-join/19%3ameeting_OWI3ZjY5NDMtMzhkYy00MTExLTkwMDctYjUwZjU0MmE2OGI1%40thread.v2/0?context=%7b%22Tid%22%3a%2242f7676c-f455-423c-82f6-dc2d99791af7%22%2c%22Oid%22%3a%2225813fb4-fdb1-4d92-a6f7-6ff0c076d6cd%22%7d" target="_blank" rel="noopener nofollow noreferrer"&gt;Live Stream&lt;/A&gt; (Side Track)&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;Recordings: n/a&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;A href="https://www.youtube.com/watch?v=0D0_M4RDiZY" target="_blank" rel="noopener noreferrer nofollow"&gt;Recording Main Track (Yellow Room)&lt;/A&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;P&gt;&lt;A href="https://broadcast.sap.com/replay/250709_recap" target="_blank" rel="noopener noreferrer"&gt;Recording Main Track (Yellow Room)&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.youtube.com/playlist?list=PLJDFklpD_2cTjReIS8xQ2L0HnfjoxPUxd" target="_blank" rel="noopener noreferrer nofollow"&gt;Recording Side Track (Blue Room)&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="24.946466809421842%" height="30px"&gt;&lt;P&gt;&lt;A href="https://www.youtube.com/playlist?list=PLlImrFECjuvxf1qY48VGNcz5OiKnSbsxN" target="_blank" rel="noopener noreferrer nofollow"&gt;Recording Main Track (Yellow Room)&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.youtube.com/playlist?list=PLlImrFECjuvx_mpoXic4DBKXqEERikQfm" target="_blank" rel="noopener noreferrer nofollow"&gt;Recording Side Track (Blue Room)&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H2 id="toc-hId-750804634"&gt;&lt;SPAN&gt;Code Jams &amp;amp; Warmup (July 7th)&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;Are you passionate about front-end development and have experience with OpenUI5 applications? Then don’t miss out on our OpenUI5-focused CodeJam! Join&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Peter Muessig&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Nico Schönteich&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;as they dive into&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;advanced OpenUI5 topics&lt;/STRONG&gt;. You’ll experience TypeScript, setting up a mono repository, OData V4 caveats, integrating 3rd-party packages, creating custom controls and libraries, and testing strategies.&lt;/P&gt;&lt;P&gt;Prefer back-end development? Our second CodeJam is tailored just for you! Led by&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;DJ Adams&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Daniel Schlachter&lt;/STRONG&gt;, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Johannes Vogt&lt;/STRONG&gt;, this session will explore the powerful SAP Application Programming Model (CAP). You’ll learn to integrate external services, work with CDS for declaring and relating entities, and leverage the SAP Cloud SDK for connectivity and destinations. In addition, we’ll also dive into new CAP features. Check the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://github.com/SAP-samples/cap-service-integration-codejam/blob/main/prerequisites.md" target="_blank" rel="noopener nofollow noreferrer"&gt;essential prerequisites&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;before arriving at the event location.&lt;/P&gt;&lt;H3 id="toc-hId-683373848"&gt;Join the Official Unofficial Pre-Event for Code Connect 2025!&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;Right after the UI5- and CAP-CodeJams - starting from&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;05:00 PM on Monday, July 7&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;Location: Restaurant ACE at Golf Club at St. Leon Rot, just a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.google.de/maps/place/Golf+Club+St.+Leon-Rot/@49.242921,8.6329268,700m/data=!3m1!1e3!4m24!1m17!4m16!1m6!1m2!1s0x4797bcf47501f8d1:0xbdab7aef9bbeb2ce!2sSAP+SE+(ROT03),+SAP-Allee+27,+68789+St.+Leon-Rot!2m2!1d8.6391431!2d49.240875!1m6!1m2!1s0x4797bc7d2a32f72f:0x80713f0e1283f250!2sGolf+Club+St.+Leon-Rot,+Opelstra%C3%9Fe+30,+68789+St.+Leon-Rot!2m2!1d8.6345968!2d49.2448961!3e2!5i1!3m5!1s0x4797bc7d2a32f72f:0x80713f0e1283f250!8m2!3d49.2448961!4d8.6345968!16s%2Fg%2F1pzpdjsgv?entry=ttu&amp;amp;g_ep=EgoyMDI1MDYyMy4yIKXMDSoASAFQAw%3D%3D" target="_blank" rel="noopener nofollow noreferrer"&gt;short walk from ROT03&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;See more details&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.linkedin.com/posts/volkerbuzek_codeconnect-activity-7335686300521390082-NXa-?utm_source=share&amp;amp;utm_medium=member_desktop&amp;amp;rcm=ACoAADftxMYB3D7afHAICpU7JBKHXjPDj068mAU" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-357777624"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="UI5con Logo Vector.png" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280048iDFE73742EDBEBABF/image-size/small?v=v2&amp;amp;px=200" role="button" title="UI5con Logo Vector.png" alt="UI5con Logo Vector.png" /&gt;&lt;/span&gt;&amp;nbsp; (July 8th)&lt;/H2&gt;&lt;P&gt;Your journey to UI5 mastery begins at UI5con, the ultimate destination for developers of all levels.&lt;BR /&gt;&lt;BR /&gt;Get ready to navigate through a network of knowledge, discover the latest UI5 innovations, and make new friendships along the way. With a map full of expert sessions and interactive workshops, you'll connect with the UI5 community and its creators, exchanging valuable insights and experiences. Are ready to dive into the UI5 universe? UI5con is your ticket to ride!&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A title="Click to open UI5con conf website. Opens in a new window." href="https://openui5.org/ui5con/" target="_blank" rel="noopener noreferrer nofollow"&gt;Learn more about UI5con&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-161264119"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Optimized Version.png" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280051i7EFE2257AE0C1CF7/image-size/small?v=v2&amp;amp;px=200" role="button" title="Optimized Version.png" alt="Optimized Version.png" /&gt;&lt;/span&gt;&amp;nbsp;(July 9th)&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;Join the awesome developer conference all about the SAP Cloud Application Programming Model (CAP). The time of the year where our lively communities, customers, and partners meet the CAP Product Team and exchange best practices, technical concepts, current projects, ideas for the future, and way more.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A title="Click to open reCAP conf website. Opens in a new window." href="https://recap-conf.dev/" target="_blank" rel="noopener noreferrer nofollow"&gt;Learn more about reCAP&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId--35249386"&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="htec-logo.svg" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/280052iCA2492D650B11682/image-size/small?v=v2&amp;amp;px=200" role="button" title="htec-logo.svg" alt="htec-logo.svg" /&gt;&lt;/span&gt;&amp;nbsp;(July 10th)&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;Get Connected! If there is anything about SAP HANA you always wanted to know but never dared to ask - this is the place for you! Be part of the community of development experts, users and partners to exchange, ignite and delight.&lt;/P&gt;&lt;P&gt;Get Involved! If you want to speak up in your own session worthwhile to be shared with this great community. Looking forward to see you there soon!&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A title="Click to open HANA Tech Con website. Opens in a new window." href="https://hanatech.community/" target="_blank" rel="noopener noreferrer nofollow"&gt;Learn more about HANA Tech Con&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/code-connect-2025-ui5con-recap-hana-tech-con/ba-p/14138893"/>
    <published>2025-06-28T17:16:16.755000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/1-2-performance-tuning-in-sapui5/ba-p/14138735</id>
    <title>1/2 Performance Tuning in SAPUI5</title>
    <updated>2025-07-02T14:07:47.915000+02:00</updated>
    <author>
      <name>PetrBecka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/152296</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1733371014"&gt;&lt;STRONG&gt;Why Performance Tuning Matters&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;Performance optimization is a critical aspect of SAPUI5 application development. In enterprise apps, users often deal with large datasets and complex UIs – without tuning, these can make the app sluggish or unresponsive . For example, displaying thousands of table rows or multiple complex charts can significantly slow down both loading and runtime response. Such sluggish performance leads to user frustration and lower productivity . Therefore, it’s important to understand why performance can degrade (large data volume, heavy UI components) and proactively address it. The goal is to ensure a &lt;SPAN class=""&gt;&lt;STRONG&gt;fast, fluid user experience&lt;/STRONG&gt;&lt;/SPAN&gt;, even as the app’s data and UI complexity grow.&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Why do SAPUI5 apps slow down?&lt;/STRONG&gt;&lt;/SPAN&gt; Two common reasons are: &lt;SPAN class=""&gt;&lt;STRONG&gt;(a)&lt;/STRONG&gt;&lt;/SPAN&gt; Loading or rendering &lt;SPAN class=""&gt;&lt;STRONG&gt;too much data at once&lt;/STRONG&gt;&lt;/SPAN&gt;, and &lt;SPAN class=""&gt;&lt;STRONG&gt;(b)&lt;/STRONG&gt;&lt;/SPAN&gt; Using &lt;SPAN class=""&gt;&lt;STRONG&gt;very complex UI controls or deep component trees&lt;/STRONG&gt;&lt;/SPAN&gt;. If an app tries to fetch and show all available data in one go, or if the UI creates hundreds of DOM elements upfront, the browser can become overwhelmed. The result is long initial load times (sometimes tens of seconds) and laggy interactions. Users today expect snappy responses, so we must optimize SAPUI5 apps to meet those expectations. In the next sections, we’ll look at key areas to focus on for performance tuning.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1536857509"&gt;&lt;STRONG&gt;Key Areas for Performance Optimization&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;To improve SAPUI5 app performance, we should focus on several strategies in the app’s design and implementation. Below are the main areas to address:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Lazy Loading for Data-Heavy Controls&lt;/STRONG&gt;&lt;/SPAN&gt; – Load data or UI components on demand instead of all at once.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Optimizing OData Requests&lt;/STRONG&gt;&lt;/SPAN&gt; – Fetch only what you need (projection) and reduce round-trips (batching).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Caching Data and Models&lt;/STRONG&gt;&lt;/SPAN&gt; – Reuse already loaded data/models and leverage caching to avoid redundant fetches.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Minimizing DOM Operations&lt;/STRONG&gt;&lt;/SPAN&gt; – Use efficient data binding and avoid excessive direct DOM manipulation.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Performance Measurement &amp;amp; Tools&lt;/STRONG&gt;&lt;/SPAN&gt; – Continuously measure performance using available tools to catch bottlenecks.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Let’s dive into each area with practical tips and examples.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1469426723"&gt;&lt;STRONG&gt;1. Lazy Loading for Data-Heavy Controls&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;When dealing with large collections of data, &lt;SPAN class=""&gt;&lt;STRONG&gt;lazy loading&lt;/STRONG&gt;&lt;/SPAN&gt; is essential. Instead of rendering hundreds of items upfront, load only what’s needed and fetch more on demand. SAPUI5 provides a built-in mechanism for this via the “growing” feature on list and table controls. As the official documentation states: &lt;I&gt;“A growing list has a loading mechanism that requests data from the model in a lazy way,”&lt;/I&gt; fetching additional items only as necessary . This means the app initially loads a small set of records, and as the user scrolls or requests more, additional data is loaded, improving initial load performance.&lt;/P&gt;&lt;P class=""&gt;For example, you can enable lazy loading on a table by setting the &lt;SPAN class=""&gt;&lt;STRONG&gt;growing&lt;/STRONG&gt;&lt;/SPAN&gt; property:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;!-- Example: A table that loads 20 items at a time, loading more as needed --&amp;gt;
&amp;lt;Table id="productTable" 
       growing="true" 
       growingThreshold="20" 
       growingScrollToLoad="true" 
       items="{/Products}"&amp;gt;
    &amp;lt;!-- Define columns ... --&amp;gt;
    &amp;lt;items&amp;gt;
        &amp;lt;ColumnListItem&amp;gt;
            &amp;lt;cells&amp;gt;
                &amp;lt;Text text="{Name}" /&amp;gt;
                &amp;lt;Text text="{Price}" /&amp;gt;
                &amp;lt;!-- other cells ... --&amp;gt;
            &amp;lt;/cells&amp;gt;
        &amp;lt;/ColumnListItem&amp;gt;
    &amp;lt;/items&amp;gt;
&amp;lt;/Table&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;In the snippet above, the table will initially display 20 items (the &lt;SPAN class=""&gt;growingThreshold&lt;/SPAN&gt;). As the user scrolls down (with &lt;SPAN class=""&gt;growingScrollToLoad="true"&lt;/SPAN&gt;, it will auto-load more; if set to false, a “More” button is shown instead). This lazy loading approach dramatically improves performance by not loading all data at once. It’s especially beneficial for very large datasets – the app remains responsive by only fetching data &lt;SPAN class=""&gt;&lt;STRONG&gt;“as and when necessary”&lt;/STRONG&gt;&lt;/SPAN&gt; instead of upfront.&lt;/P&gt;&lt;P class=""&gt;Lazy loading isn’t limited to tables; you can also &lt;SPAN class=""&gt;&lt;STRONG&gt;lazy load views, fragments or components&lt;/STRONG&gt;&lt;/SPAN&gt;. For instance, deferring the loading of a view until the user navigates to it can speed up the initial app load. In SAPUI5 routing, you might use asynchronous loading of views or the &lt;SPAN class=""&gt;ComponentContainer&lt;/SPAN&gt; with dynamic component loading on demand. The principle is: &lt;SPAN class=""&gt;&lt;STRONG&gt;load heavy content only when needed&lt;/STRONG&gt;&lt;/SPAN&gt;, keeping the initial payload light.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1272913218"&gt;&lt;STRONG&gt;2. Optimize OData Requests (Batching and Projection)&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Frequent or heavy OData calls can be a major performance bottleneck. Each network request has overhead, and pulling large payloads (with many fields or records) slows down the app. To optimize data requests in SAPUI5, consider these techniques:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Batch multiple OData calls into one&lt;/STRONG&gt;&lt;/SPAN&gt;: If your page needs data from several OData endpoints, use OData $batch to combine them into a single HTTP request. This reduces the number of round trips to the server. In OData V2 Model, you can enable batch mode by setting &lt;SPAN class=""&gt;useBatch:true&lt;/SPAN&gt; when creating the model. In fact, SAPUI5’s OData V4 model does this by default – it &lt;I&gt;“collects all requests made to the OData service in a batch request to reduce the number of roundtrips”&lt;/I&gt; . Fewer requests mean less latency and quicker overall data retrieval.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// Initializing an OData V2 model with batch mode enabled and other optimizations
var oModel = new sap.ui.model.odata.v2.ODataModel("/sap/opu/odata/sap/YourService/", {
    useBatch: true,               // combine multiple calls into one batch
    defaultCountMode: "None"      // disable $count calls if not needed for lists
});
this.getView().setModel(oModel);&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;In the code above, we enable batch mode. We also set &lt;SPAN class=""&gt;defaultCountMode:"None"&lt;/SPAN&gt;, which prevents automatic &lt;SPAN class=""&gt;$count&lt;/SPAN&gt; requests for list bindings (since counting all records can be expensive on the backend ). These settings help cut down unnecessary network calls.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Use projection ($select) to limit fields&lt;/STRONG&gt;&lt;/SPAN&gt;: Only request the data you actually need. By default, an OData entity request might return all properties, many of which your UI might not display. This wastes bandwidth and parsing time. Instead, specify a &lt;SPAN class=""&gt;$select&lt;/SPAN&gt; query option to retrieve only the necessary fields (projection). For example, if you only need product name and price, don’t fetch the entire product entity including large descriptions or images. As a best practice, &lt;I&gt;“ensure that you only retrieve the necessary data… utilize OData services efficiently by specifying $select and $expand options.”&lt;/I&gt; . This avoids &lt;SPAN class=""&gt;&lt;STRONG&gt;over-fetching&lt;/STRONG&gt;&lt;/SPAN&gt; data that will never be used on the client.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// Example: fetching only specific fields using $select
oModel.read("/Products", {
    urlParameters: { "$select": "Name,Price,Stock" },
    success: function(oData) { /* ... */ }
});&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;In the snippet above, the OData request will only return the Name, Price, and Stock properties of each Product, rather than the full product data structure. This leaner payload can significantly improve network performance.&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Filter and paginate on the server&lt;/STRONG&gt;&lt;/SPAN&gt;: Similar to lazy loading on the UI, use OData query options like &lt;SPAN class=""&gt;$filter&lt;/SPAN&gt;, &lt;SPAN class=""&gt;$top&lt;/SPAN&gt;, and &lt;SPAN class=""&gt;$skip&lt;/SPAN&gt; to have the server send only a slice of data. For instance, if a user needs to see records for a specific category, using &lt;SPAN class=""&gt;$filter&lt;/SPAN&gt; on the OData request means the server does the heavy lifting and sends back only relevant records, reducing client work. Likewise, implement server-side paging: request the first N records with &lt;SPAN class=""&gt;$top&lt;/SPAN&gt;, and load more on demand (many SAPUI5 controls with growing support will automatically append &lt;SPAN class=""&gt;$skip/$top&lt;/SPAN&gt; parameters when bound to an OData list). By &lt;SPAN class=""&gt;&lt;STRONG&gt;filtering at the source and paging results&lt;/STRONG&gt;&lt;/SPAN&gt;, you minimize data transfer and client-side processing .&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Consider OData Model version&lt;/STRONG&gt;&lt;/SPAN&gt;: If possible, use the &lt;SPAN class=""&gt;&lt;STRONG&gt;OData V4 model&lt;/STRONG&gt;&lt;/SPAN&gt; for new developments, as it has performance improvements over V2 . OData V4 not only batches requests by default, but also handles $expand more efficiently and has a reduced memory footprint on the client. If you are using OData V2, apply the above suggestions and also ensure metadata loading is optimized (see caching below).&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;In summary, treat your OData calls with care: batch them, narrow them (select only needed fields), and avoid pulling huge datasets in one go. Your app will load faster with fewer and lighter requests.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-1076399713"&gt;&lt;STRONG&gt;3. Caching Data and Models&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Caching is a powerful technique to enhance performance. By caching, we mean reusing data that has already been loaded, instead of fetching it again from the source. There are a few layers of caching relevant to SAPUI5 apps:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;OData Metadata Caching&lt;/STRONG&gt;&lt;/SPAN&gt;: When an SAPUI5 app starts, the OData service’s metadata (the &lt;SPAN class=""&gt;$metadata&lt;/SPAN&gt; XML) is usually fetched. This is needed to understand the data model but can be a bulky request. To speed up app launch, SAP Fiori Launchpad and SAPUI5 support metadata caching using cache tokens. &lt;I&gt;“OData metadata is cached on the web browser using cache tokens,”&lt;/I&gt; which append a &lt;SPAN class=""&gt;sap-context-token&lt;/SPAN&gt; to the metadata request URL . This ensures that after the first load, subsequent loads use the cached metadata, avoiding repeated downloads of the service definition. If you run your app standalone, you can still leverage this by enabling caching on the server or using the manifest property &lt;SPAN class=""&gt;"preload": true&lt;/SPAN&gt; for models to preload metadata at startup . Always check via browser dev tools that metadata requests are returning HTTP 304 (not modified) or using cache tokens appropriately.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Model and Data Caching&lt;/STRONG&gt;&lt;/SPAN&gt;: For data payloads, consider caching frequently used data in a client-side model. For example, if you have lookup data or reference lists that rarely change, load them once and store them in a JSONModel or in the ODataModel so it can be reused across views. SAPUI5’s models typically cache data by default (the ODataModel keeps an in-memory cache of fetched entities). You can further take advantage by &lt;SPAN class=""&gt;&lt;STRONG&gt;reusing model instances&lt;/STRONG&gt;&lt;/SPAN&gt;. Instead of creating a new ODataModel for each view or component, instantiate one ODataModel at application startup (in your Component.js) and share it across the app (set it on the core or component). This way, if View A already loaded some data, when View B requests the same data, it can be served from the model’s cache without another round trip. Also, when navigating back to a view, the data is still present.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Browser Caching for static resources&lt;/STRONG&gt;&lt;/SPAN&gt;: Ensure that app resources (JS/CSS files, theme assets, libraries) are served with caching headers so that the browser caches them. SAPUI5 framework resources are usually served with cache-busting hash parameters (to invalidate the cache on new versions). You as a developer should also bundle and minify your own resources (e.g., use the UI5 build tooling to create Component-preload.js). By bundling and minifying, you reduce the number of requests and size of files, which the browser can then cache for subsequent visits . This dramatically decreases load times on repeat visits because most files are loaded from cache rather than network.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;In practice, caching is often handled for you (browser caching static files, ODataModel caching data in memory, etc.), but you should be mindful to &lt;SPAN class=""&gt;&lt;STRONG&gt;enable&lt;/STRONG&gt;&lt;/SPAN&gt; it and &lt;SPAN class=""&gt;&lt;STRONG&gt;leverage&lt;/STRONG&gt;&lt;/SPAN&gt; it. For example, don’t unnecessarily reload data that you already have. If you know a particular dataset changes rarely, you might even cache it in &lt;SPAN class=""&gt;window.localStorage&lt;/SPAN&gt; for persistence. By utilizing both client-side and server-side caching, you can &lt;SPAN class=""&gt;&lt;STRONG&gt;decrease load times for repeat visits&lt;/STRONG&gt;&lt;/SPAN&gt; significantly .&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-879886208"&gt;&lt;STRONG&gt;4. Minimize DOM Operations with Efficient Data Binding&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Manipulating the DOM (Document Object Model) is one of the most expensive operations in a web app. Each time you add, remove, or change a UI element, the browser may re-compute layouts and paint updates, which can be slow if done excessively. In SAPUI5, you should let the framework’s data binding mechanism handle as much of the UI update work as possible, and avoid direct DOM manipulation or heavy re-rendering in your code.&lt;/P&gt;&lt;P class=""&gt;Here are some best practices to reduce DOM overhead:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Use Aggregation Binding vs. Manual DOM Updates&lt;/STRONG&gt;&lt;/SPAN&gt;: When displaying lists or tables of data, use &lt;SPAN class=""&gt;&lt;STRONG&gt;aggregation binding&lt;/STRONG&gt;&lt;/SPAN&gt; (&lt;SPAN class=""&gt;bindAggregation&lt;/SPAN&gt;) to let SAPUI5 create and manage list items for you. This is far more efficient than manually creating controls in a loop and inserting them into a container. For example, rather than writing a loop to append &lt;SPAN class=""&gt;ColumnListItem&lt;/SPAN&gt; controls to a table, define the binding in the XML view (as shown in the earlier snippet) or via &lt;SPAN class=""&gt;oTable.bindItems(...)&lt;/SPAN&gt; in JS. The framework will template the items and only render what’s needed. Using &lt;SPAN class=""&gt;bindAggregation&lt;/SPAN&gt; for lists ensures that UI5 can reuse templates and handle diffing, reducing the amount of DOM manipulation. In contrast, &lt;SPAN class=""&gt;bindProperty&lt;/SPAN&gt; is used for individual property binding on an existing control (e.g., binding a text field’s value). As a rule of thumb: &lt;SPAN class=""&gt;&lt;STRONG&gt;use bindProperty for simple, singular values, but use bindAggregation for collections&lt;/STRONG&gt;&lt;/SPAN&gt;. This way, you avoid manually touching the DOM for each data entry – the framework does it in bulk efficiently.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Batch UI updates&lt;/STRONG&gt;&lt;/SPAN&gt;: If you need to make multiple changes to the UI, try to batch them in one go rather than many small updates. For instance, if you have to hide or show multiple controls, it’s better to wrap them in a single container and hide/show the container, instead of toggling each control individually. Or use a model property to bind the &lt;SPAN class=""&gt;visible&lt;/SPAN&gt; property of several controls and change that one property – the framework will update all the UI states in one logical re-render. Excessive incremental DOM updates can thrash the browser’s rendering engine. Minimizing such changes leads to smoother performance .&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Avoid heavy computations in bindings&lt;/STRONG&gt;&lt;/SPAN&gt;: Data binding is powerful, but don’t abuse it by putting expensive calculations in formatter functions or property bindings that trigger frequently. Keep formatter logic lightweight. If a computation is heavy, consider pre-calculating it in the model data instead of in a formatter that runs on every digest cycle.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;One-Time vs. Two-Way Binding&lt;/STRONG&gt;&lt;/SPAN&gt;: If you have content that does not change after initialization (static text, labels, etc.), use one-time binding (&lt;SPAN class=""&gt;{= ... , mode:'OneTime'}&lt;/SPAN&gt; or in XML &lt;SPAN class=""&gt;{path: '...', mode: 'OneTime'}&lt;/SPAN&gt;). This way, the framework will not keep observing that property for changes – it binds once and is done, reducing runtime overhead . One-time binding is great for things like form labels or initial view title that won’t update. Similarly, if two-way binding is not needed, prefer one-way binding (the default) which is less overhead than two-way (which has to propagate changes back to the model).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;Keep the DOM lean&lt;/STRONG&gt;&lt;/SPAN&gt;: Try to avoid creating an excessively deep or large DOM structure. For example, in list items, using multiple nested Layouts (Horizontal/Vertical Layouts) and Containers can blow up the number of DOM nodes for each item. Multiply that by 100 items and it can degrade performance. Favor simpler structures or use CSS for spacing instead of extra markup. The SAPUI5 guidelines suggest keeping views “short and simple” – meaning a shallower control hierarchy where possible, especially in repeated elements.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;In summary, every extra element or reflow counts. &lt;SPAN class=""&gt;&lt;STRONG&gt;Excessive manipulation of the DOM can slow down your UI5 app&lt;/STRONG&gt;&lt;/SPAN&gt; , so lean on data binding to handle UI updates and avoid direct DOM hacking. By using the right binding strategies (aggregation vs property binding, one-time where applicable) and keeping the UI structure efficient, you minimize the work the browser has to do.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-554289984"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;Optimizing SAPUI5 performance requires a deliberate approach—lazy load data/UI, optimize OData requests, leverage caching, and minimize DOM manipulation. By applying these practices proactively, you deliver SAPUI5 applications that scale efficiently, meeting user expectations and ensuring smooth performance.&lt;/P&gt;&lt;P class=""&gt;Stay tuned for &lt;SPAN class=""&gt;&lt;STRONG&gt;Part 2&lt;/STRONG&gt;&lt;/SPAN&gt;, where we’ll dive deep into performance measurement and quality assurance.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/1-2-performance-tuning-in-sapui5/ba-p/14138735"/>
    <published>2025-07-02T14:07:47.915000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/find-the-bug-formatting-dates-and-times-in-build-apps/ba-p/14146230</id>
    <title>Find the Bug 🐞 Formatting dates and times in Build Apps</title>
    <updated>2025-07-07T17:10:26.360000+02:00</updated>
    <author>
      <name>Dan_Wroblewski</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/72</uri>
    </author>
    <content>&lt;P&gt;Someone sent me a problem they were having in a private message, that made me chuckle.&lt;/P&gt;&lt;P&gt;To be honest, after 2 years of war and 2 weeks of intense war, and having to live out of a suitcase for a week in Athens because my plane was diverted and could not enter my country -- this was a fun, amusing diversion (it actually made me laugh).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-07-07_18-17-17.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283549i2718837831B59874/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-07-07_18-17-17.png" alt="2025-07-07_18-17-17.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Here's the message I received:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="rule.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/242171i90366DC4F4BD6F45/image-size/large?v=v2&amp;amp;px=999" role="button" title="rule.png" alt="rule.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;FORMAT_DATETIME_WITH_TIMEZONE(DATETIME("2025-04-03T02:00:00.000Z"), "MMM d, yyyy", "America/Chicago") &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;"I am using formula to format the date. Actually the output should be Apr 2, 2025, 9 pm. But I am getting Apr 3, 2025, 9 pm. How to solve this? I tried multiple ways. It's only changing time but not date. I used other timezone format as well. Please help. This is an issue in production."&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="rule.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/242171i90366DC4F4BD6F45/image-size/large?v=v2&amp;amp;px=999" role="button" title="rule.png" alt="rule.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After running the formula in my Build Apps and getting the same result, I assumed it was a bug in the tool (&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/163703"&gt;@Mari&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1641528"&gt;@Pekka_Aaltonen&lt;/a&gt;, please forgive me). For the programmer, the obvious thing to think was that you asked for the date in the format April 2 (because it had to give the day before because the time zone they gave was minus 6 hours from UTC) and instead it was giving April 3. Why? Probably because the formula was too stupid to return the previous day's date.&lt;/P&gt;&lt;P&gt;It was supposed to show this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_1-1751859860631.png" style="width: 198px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283321iB0EAE6A724332757/image-dimensions/198x204?v=v2" width="198" height="204" role="button" title="Dan_Wroblewski_1-1751859860631.png" alt="Dan_Wroblewski_1-1751859860631.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But kept showing this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_0-1751859812914.png" style="width: 0px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283320i6A6CCB35A7939D05/image-size/small?v=v2&amp;amp;px=200" width="0" height="0" role="button" title="Dan_Wroblewski_0-1751859812914.png" alt="Dan_Wroblewski_0-1751859812914.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Dan_Wroblewski_0-1751859948461.png" style="width: 195px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/283322i073475760A3806EE/image-dimensions/195x203?v=v2" width="195" height="203" role="button" title="Dan_Wroblewski_0-1751859948461.png" alt="Dan_Wroblewski_0-1751859948461.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But, alas, there was a perfectly logical explanation, but it was hidden because of the actual date and time used in the example. Another case of all-too-human error.&lt;/P&gt;&lt;P&gt;Can you find the bug in the function code?&lt;/P&gt;&lt;P&gt;P.S.: If you like this puzzle, wait for Devtoberfest in October. We'll have plenty more.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/find-the-bug-formatting-dates-and-times-in-build-apps/ba-p/14146230"/>
    <published>2025-07-07T17:10:26.360000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-sap-generative-ai-sdk-python-javascript-and-java-libraries/ba-p/14150705</id>
    <title>Exploring SAP Generative AI SDK: Python, JavaScript, and Java Libraries 🎁</title>
    <updated>2025-07-11T20:59:21.243000+02:00</updated>
    <author>
      <name>Yogananda</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/75</uri>
    </author>
    <content>&lt;P&gt;&lt;A href="https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/libraries-and-sdks" target="_self" rel="noopener noreferrer"&gt;SAP's Generative AI SDK&lt;/A&gt; offers powerful tools for integrating AI capabilities into your business applications.&lt;/P&gt;&lt;P&gt;This blog will guide you through the libraries available for &lt;FONT color="#0000FF"&gt;Python, JavaScript, and Java&lt;/FONT&gt;, and how to use them effectively.&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-07-11_20-51-00.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285646iE39F1A18CFDFB822/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-07-11_20-51-00.png" alt="2025-07-11_20-51-00.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1993145073"&gt;1.&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":blue_circle:"&gt;🔵&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;SAP Generative AI SDK for Python&lt;/H4&gt;&lt;P&gt;The SAP Generative AI SDK for Python allows developers to leverage generative models from the SAP AI Core. This SDK supports models from providers like OpenAI, Amazon, and Google, and integrates with LangChain for enhanced functionality.&lt;/P&gt;&lt;P&gt;Documentation and Examples :&amp;nbsp;&lt;A href="https://help.sap.com/doc/generative-ai-hub-sdk/CLOUD/en-US/index.html" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/generative-ai-hub-sdk/CLOUD/en-US/index.html&lt;/A&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Yogananda_1-1752259770526.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285644i13469DC27D9AC732/image-size/large?v=v2&amp;amp;px=999" role="button" title="Yogananda_1-1752259770526.png" alt="Yogananda_1-1752259770526.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Installation:&amp;nbsp;To install the SDK, use the following command:&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;pip install sap-ai-sdk-gen[all]&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;You can also install specific model providers:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;pip install "sap-ai-sdk-gen[google, amazon]"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Configuration:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Set up your environment variables or configuration file to authenticate and connect to SAP AI Core:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;export AICORE_CLIENT_ID="your_client_id"
export AICORE_CLIENT_SECRET="your_client_secret"
export AICORE_AUTH_URL="your_auth_url"
export AICORE_BASE_URL="your_base_url"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Usage:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Here's a simple example to generate text using the OpenAI model:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-python"&gt;&lt;code&gt;from sap_ai_sdk_gen import OpenAI

client = OpenAI()
response = client.generate_text(prompt="Hello, world!")
print(response)&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1796631568"&gt;2.&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":blue_circle:"&gt;🔵&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;SAP Generative AI SDK for JavaScript&lt;/H4&gt;&lt;P&gt;The JavaScript SDK enables Node.js applications to interact with SAP AI Core, providing seamless integration with generative models.&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/SAP/ai-sdk-js" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/ai-sdk-js&lt;/A&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Yogananda_0-1752259610583.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285643iBB7D6B6568C71C17/image-size/large?v=v2&amp;amp;px=999" role="button" title="Yogananda_0-1752259610583.png" alt="Yogananda_0-1752259610583.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Installation:&amp;nbsp;Install the SDK via npm:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;npm install -ai-sdk/ai-api&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Configuration:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Ensure your environment variables are set up correctly:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;export AICORE_CLIENT_ID="your_client_id"
export AICORE_CLIENT_SECRET="your_client_secret"
export AICORE_AUTH_URL="your_auth_url"
export AICORE_BASE_URL="your_base_url"&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1600118063"&gt;&lt;STRONG&gt;Usage:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Here's a basic example to generate text:&lt;/SPAN&gt;&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { OpenAI } from '@sap-ai-sdk/ai-api';

const client = new OpenAI();
client.generateText('Hello, world!').then(response =&amp;gt; {
  console.log(response);
});&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1403604558"&gt;3.&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":blue_circle:"&gt;🔵&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;SAP Generative AI SDK for Java&lt;/H4&gt;&lt;P&gt;The Java SDK integrates AI capabilities into Java-based applications, leveraging the SAP AI Core's generative models.&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/SAP/ai-sdk-java" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP/ai-sdk-java&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Installation:&amp;nbsp;Add the SDK to your Maven project:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.sap.ai&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;sap-ai-sdk&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;5.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Configuration:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Configure your application properties:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;aicore.client.id=your_client_id
aicore.client.secret=your_client_secret
aicore.auth.url=your_auth_url
aicore.base.url=your_base_url&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Usage:&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;Here's an example to generate text:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;import com.sap.ai.sdk.OpenAI;

public class Main {
    public static void main(String[] args) {
        OpenAI client = new OpenAI();
        String response = client.generateText("Hello, world!");
        System.out.println(response);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1078008334"&gt;Conclusion&lt;/H3&gt;&lt;P&gt;SAP's Generative AI SDKs for Python, JavaScript, and Java provide robust tools for integrating AI into your applications. By following the installation, configuration, and usage examples provided, you can start leveraging the power of generative AI in your projects.&lt;/P&gt;&lt;P&gt;Feel free to reach out if you have any questions or need further assistance! Happy coding!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/exploring-sap-generative-ai-sdk-python-javascript-and-java-libraries/ba-p/14150705"/>
    <published>2025-07-11T20:59:21.243000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/connect-to-public-cloud-api-in-node-js-via-authorisation-code/ba-p/14158313</id>
    <title>Connect to Public Cloud API in Node.js via Authorisation Code</title>
    <updated>2025-07-22T13:54:57.292000+02:00</updated>
    <author>
      <name>Egan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1504852</uri>
    </author>
    <content>&lt;P&gt;Connecting to a Public Cloud API (from &lt;A href="https://api.sap.com/" target="_self" rel="noopener noreferrer"&gt;Business Accelerator Hub&lt;/A&gt;) via Node.js CAP application can be challenging. I hope this blog helps others attempting the same task.&lt;/P&gt;&lt;H2 id="toc-hId-1735214148"&gt;&amp;nbsp;Prerequisites&lt;/H2&gt;&lt;P&gt;• SAP BTP subaccount (Cloud Foundry)&lt;BR /&gt;• Service key for the target Public Cloud API&lt;BR /&gt;• XSUAA instance bound to your CAP app&lt;BR /&gt;• SAP BTP Destination service instance&lt;BR /&gt;• Bruno installed for manual testing&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1538700643"&gt;1. Confirm the API's Auth Options&lt;/H2&gt;&lt;P&gt;First, check which authentication methods are available for the API you plan to consume.&lt;/P&gt;&lt;P&gt;In my example I connect to the &lt;STRONG&gt;Specification Management API&lt;/STRONG&gt;, but the steps apply to any Public Cloud API.&lt;/P&gt;&lt;P&gt;If the &lt;EM&gt;OAuth 2.0 Access Code Flow&lt;/EM&gt; is listed under “Authentication Methods”, the API supports the authorization-code flow. That flow confirms a user context and usually grants wider authorisations, such as update and POST requests.&lt;/P&gt;&lt;P&gt;(&lt;EM&gt;OAuth 2.0 Application Flow&lt;/EM&gt; corresponds to the client-credentials flow.)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Auth-method screenshot" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289462iBE738F54BD94C2E9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_0-1753113819867.png" alt="Egan_0-1753113819867.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1342187138"&gt;2. Connect manually with Bruno (&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/data-export-api-getting-started-with-bruno/ba-p/14120240" target="_blank"&gt;Good blog on Bruno&lt;/A&gt;)&lt;/H2&gt;&lt;P&gt;Because our API supports the auth-code flow, we first prove we can log in by calling it via Bruno.&lt;/P&gt;&lt;P&gt;Create a new collection and paste the base URI of your Public Cloud API instance (you’ll find it in the service key in your service instance of the saas application your connecting to).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Service key showing URI" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289463iD5B5C161AD23500A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_3-1753114108426.png" alt="Egan_3-1753114108426.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When you send a test GET request you will probably receive an authorisation error. Configure OAuth 2.0 on the &lt;STRONG&gt;Auth&lt;/STRONG&gt; tab&lt;/P&gt;&lt;P&gt;Select Grant type Authorisation Code&lt;/P&gt;&lt;P&gt;Then fill in the below fields using your service key from your service instance&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Bruno auth settings" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289461i1BABC87E61152C2F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_1-1753113819868.png" alt="Egan_1-1753113819868.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Callback URL: &amp;lt;your Public Cloud API hostname&amp;gt;&lt;/LI&gt;&lt;LI&gt;Auth URL:** https://&amp;lt;subdomain&amp;gt;.authentication.&amp;lt;region&amp;gt;.hana.ondemand.com/oauth/authorize&lt;/LI&gt;&lt;LI&gt;Access-Token URL: https://&amp;lt;subdomain&amp;gt;.authentication.&amp;lt;region&amp;gt;.hana.ondemand.com/oauth/token&lt;/LI&gt;&lt;LI&gt;Client ID / Secret: from the uaa section of the service key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Request the token, pick your identity provider, and Bruno will return an access token. Inspect the scopes there to see what you can do.&lt;/P&gt;&lt;H2 id="toc-hId-1145673633"&gt;3. Connect to the API from Node.js&lt;/H2&gt;&lt;P&gt;After the manual check we can now automate the flow in a Node.js service.&lt;/P&gt;&lt;H3 id="toc-hId-1078242847"&gt;3.1 Destination setup&lt;/H3&gt;&lt;P&gt;Create a destination that points to the same API endpoint and bind it to your app.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Destination configuration" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289460i1560E45388730B53/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_2-1753113819869.png" alt="Egan_2-1753113819869.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The required scopes and the audience (aud) value are visible inside the Bruno access token.&lt;/P&gt;&lt;P&gt;the Audience should start with the client id of your CAP application on BTP&lt;/P&gt;&lt;P&gt;Once the destination is saved, ensure your application is bound to the Destination service.&lt;/P&gt;&lt;H3 id="toc-hId-881729342"&gt;3.2 xs-security.json&lt;/H3&gt;&lt;P&gt;Add every scope your service needs so the approuter, it will forward it in the user’s JWT: in my example i needed this scope.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "name": "$XSAPPNAME.Spc_Write",
  "description": "Allow modification of specifications."
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Also reference the scope in authorities (and role templates, if used) and assign the resulting role collection to your user.&lt;/P&gt;&lt;H3 id="toc-hId-685215837"&gt;3.3 Connect in code&lt;/H3&gt;&lt;P&gt;Now time to connect to the API in the code itself.&lt;/P&gt;&lt;P&gt;First, obtain the user’s JWT. This helper below tries every possible source and falls back to LOCAL_USER_JWT in local development:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;/** Try every source for a JWT and fall back to LOCAL_USER_JWT. */
function getJwt(capReq) {
  // CAP ≥ 7.3 keeps the raw token here
  if (capReq.user?.jwt) return capReq.user.jwt;

  // Plain HTTP / WebSocket headers
  const hdrs = capReq.http?.req?.headers || {};
  const token =
        hdrs['x-approuter-authorization'] ||   // CF WebSocket
        hdrs.authorization;                    // CF HTTP

  if (token) return token.replace(/^Bearer\s+/, '');
  // Last resort for local dev
  return process.env.LOCAL_USER_JWT;
}&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-617785051"&gt;3.3.1 Testing locally&lt;/H4&gt;&lt;P&gt;When testing locally we don't have access to the user JWT so we can add it manually to the environment file so we can still test locally, below is the process to get the JWT for user testing (each token lasts about 7 to 8 hours)&lt;/P&gt;&lt;H5 id="toc-hId-550354265"&gt;Step 1 – Get an auth code&lt;/H5&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;https://&amp;lt;instance&amp;gt;.eu10.authentication.eu10.hana.ondemand.com/oauth/authorize
?response_type=code
&amp;amp;client_id=&amp;lt;XSUAA client id of your deployed app&amp;gt;
&amp;amp;redirect_uri=http://localhost
&amp;amp;state=xyz&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Paste your version into your browsers address bar, after login you will land on &lt;A href="http://localhost/?code=" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost/?code=&lt;/A&gt;&amp;lt;AUTH_CODE&amp;gt;&amp;amp;state=xyz. Copy the value of AUTH_CODE.&lt;/P&gt;&lt;H5 id="toc-hId-353840760"&gt;Step 2 – Exchange the code for a JWT&lt;/H5&gt;&lt;P&gt;I made the Curl Request inside BAS itself. it will return a number of tokens, we only need the first and biggest one.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;curl -v -X POST \
-u '&amp;lt;same client id&amp;gt;' \
--data-urlencode grant_type=authorization_code \
--data-urlencode code=&amp;lt;AUTH_CODE&amp;gt; \
--data-urlencode redirect_uri=http://localhost \
https://&amp;lt;instance&amp;gt;.eu10.authentication.eu10.hana.ondemand.com/oauth/token&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Save the token from the response into .env:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;LOCAL_USER_JWT=&amp;lt;paste JWT here&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId--469472559"&gt;3.3.2 Call the destination with the JWT&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const jwt = getJwt(req);
if (!jwt) req.reject(401, 'No user token found.');

const dest = await getDestination({
  destinationName: '&amp;lt;DestinationName&amp;gt;',
  jwt
});&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;await executeHttpRequest(dest, {
  method: 'POST',
  url: `/odata/v4/api/specification/v1/${EntityName}`,
  data: v
});&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If you reach the destination but receive 401 Unauthorized, your JWT is missing the correct scope—ask the product team which one you need.&lt;/P&gt;&lt;P&gt;Other common pitfall is using the different XSUAA instances to get your JWT for the local run. use your applications XSUAA client since this is the same one your application will check the token against&lt;/P&gt;&lt;P&gt;And that’s it! You should now be able to read from and write to the Public Cloud API. For read-only workloads the client-credentials flow is usually simpler.&lt;/P&gt;&lt;P&gt;If I missed anything or you’d like more details, please comment below—happy to help.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;## Frequently Asked Questions&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### What’s the difference between authorization-code and client-credentials flows?&lt;/STRONG&gt;&lt;BR /&gt;The authorization-code flow runs in a user context, so it can carry user-level scopes (read, write, update). The client-credentials flow operates with a technical user—perfect for background jobs or read-only integrations.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### Why do I get “401 Unauthorized” after deployment?&lt;/STRONG&gt;&lt;BR /&gt;Your user’s JWT is probably missing the required scope (e.g., `Spc_Write`). Make sure the scope is listed in &lt;STRONG&gt;xs-security.json&lt;/STRONG&gt;, mapped to a role template, and assigned via a role collection in the BTP cockpit.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### Which audience value belongs in my destination?&lt;/STRONG&gt;&lt;BR /&gt;Use the &lt;STRONG&gt;client ID&lt;/STRONG&gt; &lt;STRONG&gt;of your CAP application’s XSUAA instance&lt;/STRONG&gt;; it usually starts with `sb-&amp;lt;appName&amp;gt;!t&amp;lt;number&amp;gt;`.&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/Node.js/pd-p/723714486627645412834578565527550" class="lia-product-mention" data-product="322-1"&gt;Node.js&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+Identity+Services/pd-p/67837800100800007337" class="lia-product-mention" data-product="155-1"&gt;SAP Cloud Identity Services&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/API/pd-p/b31da0dd-f79a-4a1e-988c-af0755c2d184" class="lia-product-mention" data-product="123-1"&gt;API&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Authenticator/pd-p/73554900100700000789" class="lia-product-mention" data-product="435-1"&gt;SAP Authenticator&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Fiori+Cloud/pd-p/73554900100800000375" class="lia-product-mention" data-product="20-1"&gt;SAP Fiori Cloud&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+Application+Programming+Model/pd-p/9f13aee1-834c-4105-8e43-ee442775e5ce" class="lia-product-mention" data-product="100-1"&gt;SAP Cloud Application Programming Model&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Application+Studio/pd-p/67837800100800007077" class="lia-product-mention" data-product="13-1"&gt;SAP Business Application Studio&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Technology+Platform/pd-p/73555000100700000172" class="lia-product-mention" data-product="1215-1"&gt;SAP Business Technology Platform&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Extensibility/pd-p/270c4f37-c335-46e1-bfad-a256637d5e26" class="lia-product-mention" data-product="37-1"&gt;SAP S/4HANA Cloud Public Edition Extensibility&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Accelerator+Hub/pd-p/73555000100800001091" class="lia-product-mention" data-product="1214-1"&gt;SAP Business Accelerator Hub&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/JavaScript/pd-p/506421944534752500398156104608974" class="lia-product-mention" data-product="321-1"&gt;JavaScript&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/API+Management/pd-p/67838200100800006828" class="lia-product-mention" data-product="358-1"&gt;API Management&lt;/a&gt;&lt;/P&gt;&lt;!--    END BLOG FRAGMENT    --&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/connect-to-public-cloud-api-in-node-js-via-authorisation-code/ba-p/14158313"/>
    <published>2025-07-22T13:54:57.292000+02:00</published>
  </entry>
</feed>
