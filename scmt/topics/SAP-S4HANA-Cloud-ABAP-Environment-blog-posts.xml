<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-S4HANA-Cloud-ABAP-Environment-blog-posts.xml</id>
  <title>SAP Community - SAP S/4HANA Cloud ABAP Environment</title>
  <updated>2025-11-01T00:01:56.270565+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP S/4HANA Cloud ABAP Environment/pd-p/60907aa9-99e9-4d5d-9103-8b970e9bc0a4" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP S/4HANA Cloud ABAP Environment blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-remote-sap-hana-cloud-data-from-s-4hana-public-cloud-using-cds/ba-p/14166087</id>
    <title>Accessing Remote SAP HANA Cloud Data from S/4HANA Public Cloud using CDS External Entity</title>
    <updated>2025-07-30T04:58:51.636000+02:00</updated>
    <author>
      <name>veroni</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1592841</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1736075425"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;Before starting, make sure you have:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;SAP S/4HANA Public Cloud system&lt;/STRONG&gt; with developer access&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;SAP HANA Cloud instance&lt;/STRONG&gt; on BTP with:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;SQL Endpoint enabled&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Allow All Access or trusted IP configuration&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Technical user in HANA Cloud with necessary privileges (e.g., CREATE REMOTE SOURCE, schema access)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;ABAP Development Tools (ADT) in Eclipse&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1539561920"&gt;High-Level Concept And Reference&lt;/H2&gt;&lt;P&gt;Blog reference :&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-cds-release-news-2408-external-entities/ba-p/13784415" target="_blank"&gt;ABAP CDS Release News 2408 – External Entities - SAP Community&lt;/A&gt;&lt;BR /&gt;Help portal reference:&amp;nbsp;&lt;A href="https://help.sap.com/docs/abap-cloud/abap-data-models/cds-external-entities?locale=en-US" target="_blank" rel="noopener noreferrer"&gt;External Entities | SAP Help Portal&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;the workflow and artifacts for establishing an outbound SQL access with CDS external entities:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_0-1753803716253.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293555iF2BC67DE32676676/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_0-1753803716253.png" alt="veroni_0-1753803716253.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;CDS External Entity&lt;/STRONG&gt;: Design-time ABAP artifact mapping to an external database object&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;The following types of external entities are available:&lt;/SPAN&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Dynamic external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; The logical external schema is bound to the external entity at runtime, when the entity is accessed with ABAP SQL&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;SELECT, using a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;PROVIDED BY&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;clause. Dynamic external entities can be accessed by ABAP SQL only. They cannot be used as a data source for other CDS entities.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Static external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; The logical external schema is specified in the data definition of the external entity. Static external entities can be used as a data source in ABAP SQL, as a data source in other CDS entities, and in ABAP Managed Database Procedures (AMDP).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Writable external entities&lt;/SPAN&gt;:&lt;/STRONG&gt; By default, external entities are read-only. An external entity can be defined as writable using the optional addition&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;writable. Writable external entities allow modifying data on external database systems using the ABAP SQL operations&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;INSERT,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;UPDATE,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;MODIFY, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;DELETE.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Logical External Schema&lt;/STRONG&gt;: Links external entity to outbound communication&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Communication Arrangement&lt;/STRONG&gt;: Defines connection to HANA Cloud via Outbound SQL Access&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1343048415"&gt;Implementation Steps&lt;/H2&gt;&lt;H3 id="toc-hId-1275617629"&gt;For Developer in&amp;nbsp; ABAP environment&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create CDS External Entity&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;In this scenario ,we use &lt;STRONG&gt;Writable external entity&amp;nbsp;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;Core Data Services-Data Definition&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'External Entity'
define writable external entity (ENTITY NAME) external name (HANA DATABASE TABLE NAME)
{
  key ID       : abap.char(36) external name ID;
      TEST     : abap.int1     external name TEST;

}
with federated data provided at runtime
​&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Logical External Schema&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;Core Data Services - Logical External Schemas&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_1-1753804456433.png" style="width: 732px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293561i123E50C720EB1140/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_1-1753804456433.png" alt="veroni_1-1753804456433.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Create Communication scenario with outbound service&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Cloud Communication Management-Communication Scenarios-outbound service&lt;BR /&gt;&amp;nbsp;Create Outbound Service Referring to&amp;nbsp; a Logical External Schemas&amp;nbsp; &amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_2-1753804924331.png" style="width: 632px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293565i024EE3FFE2C746B0/image-dimensions/632x170?v=v2" width="632" height="170" role="button" title="veroni_2-1753804924331.png" alt="veroni_2-1753804924331.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&amp;nbsp;Add outbound service to&amp;nbsp;Communication scenario&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;Cloud Communication Management-Communication Scenarios&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_3-1753805096502.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293566i200A9233FB768296/image-size/large?v=v2&amp;amp;px=999" role="button" title="veroni_3-1753805096502.png" alt="veroni_3-1753805096502.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;ABAP SQL statement&lt;/STRONG&gt;&lt;/STRONG&gt;&lt;UL&gt;&lt;LI&gt;(SQL test should be used after communication configuration in SAP Fiori application)&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;   SELECT * FROM （cds external entity)
      PROVIDED BY (logical external schema)
      INTO TABLE @FINAL(lt_federated_data)
      UP TO 10 ROWS.&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-1079104124"&gt;For SAP Fiori Application&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Create Communication System&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Host: SQL Endpoint of HANA Cloud&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Port: 443&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Authentication: Technical User (HANA DB user)&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Create Communication Arrangement&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Outbound Service: Outbound SQL Access&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Adapter: HANA (ODBC)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;Adapter Configuration: &lt;STRONG&gt;this parameter is important ,or&amp;nbsp; you will get ping fail message.&lt;/STRONG&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;ServerNode=&amp;lt;hana_sql_endpoint&amp;gt;:port&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Assign Outbound User (same as HANA DB user)&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Check Outbound Service Connection&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;UL&gt;&lt;LI&gt;success message:&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class="lia-indent-padding-left-60px" style="padding-left : 60px;"&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="veroni_5-1753805829527.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293579i5758C85E24A41DB1/image-size/medium?v=v2&amp;amp;px=400" role="button" title="veroni_5-1753805829527.png" alt="veroni_5-1753805829527.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Test SQL in ABAP Environment (see for developer part)&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Using CDS External Entities with Outbound SQL Access provides a clean and ABAP-native way to query external SAP HANA Cloud data from S/4HANA Public Cloud.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/accessing-remote-sap-hana-cloud-data-from-s-4hana-public-cloud-using-cds/ba-p/14166087"/>
    <published>2025-07-30T04:58:51.636000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-cloud-scheduling-background-jobs-using-application-job/ba-p/14173195</id>
    <title>SAP S/4HANA Cloud: Scheduling Background Jobs Using Application Job Templates</title>
    <updated>2025-08-06T12:18:07.559000+02:00</updated>
    <author>
      <name>TalluriSudheerKumar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2221526</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1736910563"&gt;Introduction&lt;/H2&gt;&lt;P&gt;In traditional ECC systems, developers typically used SUBMIT statements or function modules like JOB_OPEN, JOB_SUBMIT, and JOB_CLOSE to schedule background jobs. However, with the evolution of SAP to the S/4HANA Cloud and SAP BTP (ABAP Environment), the mechanism for job scheduling has changed significantly. The new paradigm revolves around Application Job Templates and the Application Job Framework (AJF).&lt;/P&gt;&lt;H2 id="toc-hId-1540397058"&gt;Job Scheduling in ECC&lt;/H2&gt;&lt;P&gt;In ECC, background jobs were generally handled through one of the following methods:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SUBMIT statements to run reports in background.&lt;/LI&gt;&lt;LI&gt;Function Modules such as:&lt;/LI&gt;&lt;LI&gt;JOB_OPEN&lt;/LI&gt;&lt;LI&gt;JOB_SUBMIT&lt;/LI&gt;&lt;LI&gt;JOB_CLOSE&lt;BR /&gt;&lt;BR /&gt;These methods gave developers control over job execution from within custom ABAP programs but were tightly coupled with the underlying system and lacked standardization in a cloud-native context.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1343883553"&gt;The Cloud Paradigm: Application Job Framework (AJF)&lt;/H2&gt;&lt;P&gt;In S/4HANA Cloud and ABAP Environment, SAP has introduced the Application Job Framework (AJF). This framework decouples job scheduling from the program logic and provides reusable, standardized, and secure job templates that can be scheduled through Fiori apps or ABAP APIs.&lt;BR /&gt;&lt;BR /&gt;Key elements include:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Application Job Templates&lt;/LI&gt;&lt;LI&gt;Application Job Catalog&lt;/LI&gt;&lt;LI&gt;Fiori Apps for job management&lt;/LI&gt;&lt;LI&gt;APIs for scheduling via ABAP classes&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1147370048"&gt;Creating a Job Template&lt;/H2&gt;&lt;P&gt;Job templates are defined using the 'Manage Application Job Templates' Fiori app. Each template is associated with an ABAP class that implements one or more of the following interfaces:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;IF_APJ_DT_EXEC_OBJECT: For job design-time metadata&lt;/LI&gt;&lt;LI&gt;IF_APJ_RT_EXEC_OBJECT: For runtime execution&lt;BR /&gt;&lt;BR /&gt;These templates can then be reused across the system by both end-users and developers.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-950856543"&gt;Scheduling Jobs Programmatically&lt;/H2&gt;&lt;P&gt;To schedule jobs in ABAP code, SAP provides the utility class CL_APJ_RT_JOB_SCHEDULING_API. This class allows you to schedule jobs based on the template created in the catalog. Below is a basic example of how to use it:&lt;/P&gt;&lt;P&gt;*ABAP&lt;BR /&gt;DATA: LV_JOB_START&amp;nbsp; TYPE TIMESTAMPL,&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LT_PARAMETERS TYPE APJ_PARAMETERS_T,&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LS_JOB_RESULT TYPE APJ_JOB_RESULT,&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LT_MESSAGES&amp;nbsp;&amp;nbsp; TYPE BAPIRET2_T.&lt;BR /&gt;&lt;BR /&gt;LV_JOB_START = CL_ABAP_CONTEXT_INFO=&amp;gt;GET_SYSTEM_TIME( ) + 120.&lt;BR /&gt;APPEND VALUE #( NAME = 'S_ID' VALUE = 'RUN_ID_123' ) TO LT_PARAMETERS.&lt;BR /&gt;&lt;BR /&gt;TRY.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; CALL METHOD CL_APJ_RT_JOB_SCHEDULING_API=&amp;gt;SCHEDULE_JOB&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EXPORTING&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IV_JOB_CATALOG_TYPE = 'ZMY_JOB_TEMPLATE'&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IV_START_TIME&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = LV_JOB_START&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IT_PARAMETERS&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = LT_PARAMETERS&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IMPORTING&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ES_JOB_RESULT&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = LS_JOB_RESULT&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ET_MESSAGES&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; = LT_MESSAGES.&lt;BR /&gt;&amp;nbsp; CATCH CX_APJ_BASE INTO DATA(LX_APJ).&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; " HANDLE ERRORS&lt;BR /&gt;ENDTRY.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H2 id="toc-hId-754343038"&gt;Monitoring Jobs&lt;/H2&gt;&lt;P&gt;Jobs scheduled using this API can be monitored via the Fiori app 'Monitor Application Jobs'. Here, you can check job status, review logs, and troubleshoot failed runs.&lt;/P&gt;&lt;H2 id="toc-hId-557829533"&gt;Benefits of Using Application Job Framework&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Decouples job logic from scheduling logic&lt;/LI&gt;&lt;LI&gt;Reusable and standard job templates&lt;/LI&gt;&lt;LI&gt;Enhances cloud compliance and governance&lt;/LI&gt;&lt;LI&gt;Easy monitoring and error tracking via Fiori UI&lt;/LI&gt;&lt;LI&gt;Secure execution with authorization controls&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-361316028"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;With the shift to cloud-based ABAP development, it's important to adapt to modern, secure, and standardized approaches. Application Job Framework provides a robust solution for job scheduling needs in S/4HANA Cloud and ABAP Environment. Utilize job templates and `CL_APJ_RT_JOB_SCHEDULING_API` to build scalable and maintainable background processes.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-cloud-scheduling-background-jobs-using-application-job/ba-p/14173195"/>
    <published>2025-08-06T12:18:07.559000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/rap-with-deep-static-action-odata-v4-complete-guide-till-execution-in/ba-p/14170270</id>
    <title>RAP - With Deep Static Action - OData V4 - Complete Guide till Execution in Gateway</title>
    <updated>2025-08-08T10:12:57.005000+02:00</updated>
    <author>
      <name>SuryaRamesh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2066090</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Summary:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In some of SAP RAP (RESTful Application Programming) scenarios, there is a need to pass a request body to an action as &lt;STRONG&gt;input&lt;/STRONG&gt;, execute business logic, and return the output in the response body. While SAP RAP offers a "Deep Action" feature to facilitate such requirements, this capability is currently not supported in OData V2.&amp;nbsp; As a result, developers seeking to implement this pattern must turn to OData V4, which introduces expanded support for complex actions and payload handling.&lt;/P&gt;&lt;P&gt;This blog will walk you through a practical, step-by-step session on how to implement request/response body handling in RAP Actions using OData V4, ensuring you can meet advanced integration and business process needs in your SAP applications. Also this blog explains how to capture your OData V4 service in TR Properly.&lt;/P&gt;&lt;P&gt;The Aim is to create Single Parent Entity and create Deep Action out of it which acts like same OData Deep Entity.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The Action can be exposed to interface where it can be used for POST Operations. ( GET Can be used only to get CSRF Token for security layer.&lt;/P&gt;&lt;P&gt;Before getting deep dive into RAP Deep Actions, first we need to understand that RAP Actions are generally &lt;STRONG&gt;function imports in OData V2&lt;/STRONG&gt; and in OData V4 it shows as &lt;STRONG&gt;Action&lt;/STRONG&gt; itself in Meta Data Extension.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Now let's start with the build.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;1) Create Root View Entity&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Test'
@Metadata.ignorePropagatedAnnotations: true
define root view entity ZCDS_TEST_PARENT_ENTITY as select from ekko
{
    key ebeln as Ebeln,
    bukrs as Bukrs,
    bsart as Bsart,
    lifnr as Lifnr
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;2) Create Behavior Definition on top of Root View Entity&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_0-1754192998396.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295677i26ED82104B375720/image-size/medium?v=v2&amp;amp;px=400" role="button" title="SuryaRamesh_0-1754192998396.png" alt="SuryaRamesh_0-1754192998396.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;3) After Creating Behaviour Definition with appropriate Alias and read only properties, Add Static Action with Deep structure as per your requirement. The syntax is as below. ( Note for the deep action you must create Deep Abstract Entity which I will explain in upcoming points ).&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;static action TestAction deep parameter ZCDS_ROOT_ABSTRACT_TEST_API deep result[1..*] ZCDS_ROOT_ABSTRACT_TEST_API;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4) While using Deep Action, in &lt;STRONG&gt;Result [1..*]&lt;/STRONG&gt; is important which indicates that Action will expand for Deep structure for Result. But for Input cardinality is not required.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_2-1754193545159.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295679i695C8F2FFB416010/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_2-1754193545159.png" alt="SuryaRamesh_2-1754193545159.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5) Create Root Abstract Entity&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Root Abstract'

define root abstract entity ZCDS_ROOT_ABSTRACT_TEST_API
{
  key Ebeln     : ebeln;
      Bukrs     : bukrs;
      _Parenttochild : composition [1..*] of ZCDS_CHILD_ABSTRACT_TEST_API;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;6) Create corresponding child Abstract Entity&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Child Abstract'
define abstract entity ZCDS_CHILD_ABSTRACT_TEST_API
{
    key Ebeln : ebeln;
    key ebelp : Ebelp;
        Matnr_ae : matnr;
     _ChildtoParent : association to parent zcds_root_abstract_test_api on $projection.ebeln = _childtoParent.ebeln;
    
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7) Create Abstract - Behavior Definition&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;abstract;
strict ( 2 );
with hierarchy;

define behavior for ZCDS_ROOT_ABSTRACT_TEST_API //alias &amp;lt;alias_name&amp;gt;
{
  association _Parenttochild;
}

define behavior for ZCDS_CHILD_ABSTRACT_TEST_API //alias &amp;lt;alias_name&amp;gt;
{
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-unicode-emoji" title=":smiling_face_with_sunglasses:"&gt;😎&lt;/span&gt;Create Respective Service Definition and Service Binding. ( Note Service Binding to be created in OData - V4 Web API for Interface Based Requirements and OData - V4 UI for Fiori/BTP Based Requirements. Currently Im creating OData - V4 Web API since we are testing in gateway only ).&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label: 'Test'
define service ZCDS_TEST_ENTITY_SRV {
  expose ZCDS_TEST_PARENT_ENTITY as TestEntity;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_4-1754194294825.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295681iC406A039776BDEF7/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_4-1754194294825.png" alt="SuryaRamesh_4-1754194294825.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;9) After creating the service Binding Activate it and publish it. In this Blog we are also going to see how to save/capture V4 OData service in TR Properly.&lt;/P&gt;&lt;P&gt;10) Once Publishing the service, navigate to /n/iwfnd/v4_admin Transaction and find your service Group. Right click on the service and click on&amp;nbsp;&lt;STRONG&gt;Transport Publishing.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_5-1754194630607.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295682i885FD29AA58C44A9/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_5-1754194630607.png" alt="SuryaRamesh_5-1754194630607.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_6-1754194653193.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295683i81AA08C167939D76/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_6-1754194653193.png" alt="SuryaRamesh_6-1754194653193.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;11) After clicking on Transport Publishing it will ask for Customizing TR, Save the service in Customizing TR and click on&amp;nbsp;&lt;STRONG&gt;LOCAL&amp;nbsp;&lt;/STRONG&gt;system Alias and then select&amp;nbsp;&lt;STRONG&gt;Transport Routing Assignment.&amp;nbsp;&lt;/STRONG&gt;It will ask for Customizing TR again and save it in Customizing TR. With these steps your OData V4 Service will get properly captured in TR.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_7-1754194797481.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295684iAC105F19A6C263BB/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_7-1754194797481.png" alt="SuryaRamesh_7-1754194797481.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;12) After capturing service in TR, click on the Service and select Service Test.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_8-1754194982084.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295686iD8E6854AE734AA91/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_8-1754194982084.png" alt="SuryaRamesh_8-1754194982084.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;13) As Mentioned above RAP Action's will be considered as Actions in OData V4 whereas in OData V2 it will be taken as Function Imports. Refer to screenshot below for the same which shows the Action we created as&amp;nbsp;&lt;STRONG&gt;Action &lt;/STRONG&gt;while loading &lt;STRONG&gt;Meta data.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_1-1754474054639.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297094i81A4C39FD7E67E6D/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_1-1754474054639.png" alt="SuryaRamesh_1-1754474054639.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;14) Now let's construct&amp;nbsp;&lt;STRONG&gt;URL and Payload for OData V4 RAP Action.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;URL Format :&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;"1" : &lt;STRONG&gt;/sap/opu/odata4/sap/zcds_test_entity_srv/....&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;"2": &lt;STRONG&gt;TestEntity/&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;"3":&amp;nbsp;&lt;STRONG&gt;com.sap.gateway.srvd_...&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;"4": .&lt;STRONG&gt;TestAction&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Final URL :&amp;nbsp;&lt;/STRONG&gt;"1" &amp;amp;&amp;amp; "2" &amp;amp;&amp;amp; "3" &amp;amp;&amp;amp; "4"&lt;/P&gt;&lt;P&gt;In simple Terms the "1" will be coming by default once you enter the gateway and "2" will be also coming by default once you add the entity. Then "3" is something which is for OData V4 and it's&amp;nbsp;&lt;STRONG&gt;schema namespace&amp;nbsp;&lt;/STRONG&gt;which you will find while loading meta data. Finally "4" is your Action.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;URL Should look like this:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;/sap/opu/odata4/sap/zcds_test_entity_srv/..../TestEntity/com.sap.gateway.. .TestAction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note : Action should be exposed with a dot (.)&amp;nbsp; after Schema Namespace&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Payload;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The Payload should hold all properties from Action Parameters. It will not play any crucial role with Root CDS View Entity inputs rather static action will expect all the deep parameters to be passed to initiate POST Operation in Input payload.&amp;nbsp;&lt;/P&gt;&lt;P&gt;For Our Scenario let's Pass Payload like this.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "Ebeln": "1050001",
    "Bukrs": "001",
    "_Parenttochild": [
        {
            "Ebeln": "1050001",
            "Matnr": "000000000000000001"
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;15) After passing the payload, we often do get this error while execution which is Authorization block. To resolve this we have to get appropriate authorization from BASIS for Auth objects;&amp;nbsp;&lt;STRONG&gt;S_START&amp;nbsp;&lt;/STRONG&gt;and&amp;nbsp;&lt;STRONG&gt;S_SERVICE.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_2-1754474247987.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297095i422A41B53448611E/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_2-1754474247987.png" alt="SuryaRamesh_2-1754474247987.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;16) Once Necessary Authorization is obtained we do get response like this in Deep structure in Response body.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SuryaRamesh_3-1754474371255.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297096iA92E7668AA2831C5/image-size/large?v=v2&amp;amp;px=999" role="button" title="SuryaRamesh_3-1754474371255.png" alt="SuryaRamesh_3-1754474371255.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;17) Henceforth with this way we can use Deep Action and pass input in Body instead of payload as deep structure. This could be used for Interface as well as Fiori based objects. In Fiori with same way the testing can be done in Fiori Launchpad with deployed app with Action button having deep structure.&amp;nbsp;&lt;/P&gt;&lt;P&gt;18) Static Action should hold whatever Business logic is for POST inside RAP Behavior Implementation class. The UI/3rd party system input can be read from&amp;nbsp;&lt;STRONG&gt;keys&amp;nbsp;&lt;/STRONG&gt;parameter with appropriate&amp;nbsp;&lt;STRONG&gt;%cid_ref&amp;nbsp;&lt;/STRONG&gt;and once all business logic is done the response can be mapped to&amp;nbsp;&lt;STRONG&gt;result&amp;nbsp;&lt;/STRONG&gt;parameter of same action.&lt;/P&gt;&lt;P&gt;19) If you want to read some of the CDS View properties then instead of static action you can use normal action also with deep parameters.&lt;/P&gt;&lt;P&gt;20) If the requirement demands to send&amp;nbsp;&lt;STRONG&gt;Deep structure as output only&amp;nbsp;&lt;/STRONG&gt;or vise versa means then in this case you can avoid deep structure in either parameter or response as shown below;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;static action TestActionDeepInput deep parameter ZCDS_DEEP_ABSTRACT result[1]ZCDS_OUTPUT_ABSTRACT;
static action TestActionDeepOutput parameter ZCDS_INPUT_ABSTRACT deep result[1..*]ZCDS_DEEP_ABSTRACT;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1736822084"&gt;Conclusive Summary&lt;/H2&gt;&lt;P&gt;I hope this blog has clarified key concepts around OData V4, RAP Deep Actions, Deep Abstraction, and capturing V4 services in a transport request. In future posts, I’ll explore running background jobs with RAP and Application Jobs.&lt;BR /&gt;Thank you for reading!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/rap-with-deep-static-action-odata-v4-complete-guide-till-execution-in/ba-p/14170270"/>
    <published>2025-08-08T10:12:57.005000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/simple-rap-based-managed-ui-development-with-create-amp-delete-actions-on/ba-p/14173514</id>
    <title>Simple RAP based Managed UI development with Create &amp; Delete actions on custom BillDoc header table</title>
    <updated>2025-08-11T11:51:13.797000+02:00</updated>
    <author>
      <name>AnithaSwamy</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1757477</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1607831439"&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/H1&gt;&lt;P class=""&gt;In this project, you set out to build a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Simple Managed RAP (ABAP RESTful Application Programming) application&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP BTP ABAP Environment&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;using&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Eclipse ADT&lt;/STRONG&gt;.&amp;nbsp;The goal is to design a lightweight&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Billing Document Header maintenance app&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Create&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Delete&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;capabilities, following best practices for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Managed RAP&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;development.&lt;/P&gt;&lt;P class=""&gt;The application uses a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;custom transparent table&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for storing billing document header data and implements&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;standard RAP layers&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;— Database Table, Interface View, Projection View, Metadata Annotations, Behavior Definitions, Service Definition, and Service Binding.&lt;/P&gt;&lt;P class=""&gt;By leveraging Managed RAP,&amp;nbsp; you do not need to write custom CRUD logic — the framework auto-generates this functionality, allowing you to focus purely on&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;data modelling&lt;/STRONG&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI annotations&lt;/STRONG&gt;, and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;service exposure&lt;/STRONG&gt;. This demonstrates how RAP accelerates application development in the cloud while complying with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ABAP Cloud&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;clean-core principles.&lt;/P&gt;&lt;P class=""&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1411317934"&gt;&lt;SPAN&gt;Objectives:&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;Creating a Simple Managed RAP based UI using BTP and Eclipse IDE with Create &amp;amp; Delete actions on custom Billing Document header table.&lt;/P&gt;&lt;H1 id="toc-hId-1214804429"&gt;&lt;SPAN&gt;Requirements/Task(s):&lt;/SPAN&gt;&lt;/H1&gt;&lt;OL&gt;&lt;LI&gt;&lt;SPAN&gt;Create required Database Table(s)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create CDS views for the Database Table – &lt;/SPAN&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Interface View and &lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Consumption (Projection) View&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create Metadata View on Consumption View&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create Behavior Definition for Interface View&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create Behavior Definition for Consumption View&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Create Service Definition for Consumption View&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Service Binding for the Service Definition&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Test the Application&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H1 id="toc-hId-1018290924"&gt;&lt;SPAN&gt;Objects List&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_0-1754496288291.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297264i93FB136F203F8C6C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_0-1754496288291.png" alt="AnithaSwamy_0-1754496288291.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-821777419"&gt;&lt;SPAN&gt;Outline the steps/plan for your project:&lt;/SPAN&gt;&lt;/H1&gt;&lt;OL&gt;&lt;LI&gt;Step1: Create Database Table (Eclipse - Data Dictionary-Database Table)&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_1-1754496288295.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297262i2CE4A8D579B10116/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_1-1754496288295.png" alt="AnithaSwamy_1-1754496288295.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Check the created Database Table structure (Right click – Open With - Data Preview)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_2-1754496288297.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297263i6AD9BF9B9505CE44/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_2-1754496288297.png" alt="AnithaSwamy_2-1754496288297.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2:&lt;/STRONG&gt; Create Interface Root view CDS for the database table created (right click database table - Data Definitions - Root View template)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_3-1754496288300.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297265i904B146112104C43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_3-1754496288300.png" alt="AnithaSwamy_3-1754496288300.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3:&lt;/STRONG&gt; Create Consumption/Projection Root view CDS for the database table created (right click database table - Data Definitions - Root View template)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_4-1754496288302.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297266iF4C8B97E2843AEEA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_4-1754496288302.png" alt="AnithaSwamy_4-1754496288302.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4&lt;/STRONG&gt;: Create Metadata that helps with designing aspects of the UI (Right click on the Projection View you created and select new "Metadata Definition")&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_5-1754496288310.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297267i36508B05B0899329/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_5-1754496288310.png" alt="AnithaSwamy_5-1754496288310.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5&lt;/STRONG&gt;: Create Behaviour Definition - one fore Interface view and one for Consumption view you have created&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5a&lt;/STRONG&gt;: Create Behaviour Definition for the interface view ((Right click the Interface CDS View and choose Behaviour Definition option)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_6-1754496288313.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297270iE2B009147269A018/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_6-1754496288313.png" alt="AnithaSwamy_6-1754496288313.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5b&lt;/STRONG&gt;: Create Behaviour Definition for the Projection view (Right click the Projection CDS View and choose Behaviour Definition option)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_7-1754496288314.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297269iF99AEE68D9358125/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_7-1754496288314.png" alt="AnithaSwamy_7-1754496288314.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6&lt;/STRONG&gt;: Create Service definition (Right click CDS Projection View and click "New Service Definition")&lt;/P&gt;&lt;P&gt;Expose the Consumption View CDS.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_8-1754496288316.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297268i56EFB860ABFC0F0F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_8-1754496288316.png" alt="AnithaSwamy_8-1754496288316.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7&lt;/STRONG&gt;: Create Service Binding (Right click on the new Service definition you created and choose "New Service Binding" and Choose OData V4 version for the UI)&lt;/P&gt;&lt;P&gt;Select the Service Definition displayed on the versions section of the page and hit "Publish" button.&lt;/P&gt;&lt;P&gt;It will take some time. Once it is done, a Service URL will be created and the binding will be displayed.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_9-1754496288320.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297272iF7768886F9A60683/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_9-1754496288320.png" alt="AnithaSwamy_9-1754496288320.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8:&amp;nbsp;&lt;/STRONG&gt; Test the Application: Select the Entity and hit Preview button, a new Window will be opened with the RAP UI App you created.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_10-1754496288327.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297271i1D46C62B933F0064/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_10-1754496288327.png" alt="AnithaSwamy_10-1754496288327.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;A new window will open with the UI for the Application we created:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_11-1754496288331.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297273iF1AD866D7D5EB96F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_11-1754496288331.png" alt="AnithaSwamy_11-1754496288331.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Click “Go” Button, so that the values are pulled from the Database table to be shown on the screen.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_12-1754496288337.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297274i28F0769CF670AD45/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AnithaSwamy_12-1754496288337.png" alt="AnithaSwamy_12-1754496288337.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can see the database records displayed on the screen. The Create and Delete buttons are available for creating new records and deleting existing records. Since this is Managed RAP application, the code necessary for the Create and delete operations are handled automatically by the Framework, there is no explicit code necessary for these simple actions. If customizations are required then it can be handled via Implementation Class (Behaviour Pool Classes) of the Behaviour Definition.&lt;/P&gt;&lt;H1 id="toc-hId-625263914"&gt;&lt;SPAN&gt;Project link:&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;&lt;A href="https://github.com/ABAPAnitha/RAP-for-Bill-doc-header-and-Items" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/ABAPAnitha/RAP-for-Bill-doc-header-and-Items&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="" id="toc-hId-557833128"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;This project highlights how quickly and efficiently a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Managed RAP application&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;can be built on SAP BTP using the ABAP RESTful Programming Model.&amp;nbsp;The framework automatically handled the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Create&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Delete&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;operations, proving the advantage of Managed scenarios where minimal custom coding is required.&lt;/P&gt;&lt;P class=""&gt;We also learned how&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;UI metadata annotations&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;can be used to control the look and feel of the Fiori Elements-based UI without any frontend coding, and how RAP’s structured approach — from database table to service binding — enables a clean, maintainable, and extensible application design.&lt;/P&gt;&lt;P class=""&gt;Going forward, you can extend this solution with:&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Custom business logic&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in Behavior Pool classes,&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Associations&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;to billing item entities for a complete billing document structure,&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Advanced annotations&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for richer UI interactions.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Overall, the Managed RAP approach proved to be a fast, cloud-compliant, and developer-friendly way to deliver maintainable SAP applications aligned with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ABAP Cloud&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;strategy.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/simple-rap-based-managed-ui-development-with-create-amp-delete-actions-on/ba-p/14173514"/>
    <published>2025-08-11T11:51:13.797000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributions-in-the-abap-environments-for/ba-p/14173266</id>
    <title>Random Numbers and Probability Distributions in the ABAP Environments for 2508</title>
    <updated>2025-08-18T13:00:51.072000+02:00</updated>
    <author>
      <name>kilian_kilger</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/204709</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1736911432"&gt;Random Numbers and Probability Distributions in the ABAP Environments for 2508&lt;/H2&gt;&lt;H3 id="toc-hId-1669480646"&gt;1 Introduction&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Can ABAP generate random numbers?&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Most ABAP developers would instinctively say "yes"—after all, who hasn't used&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;CL_ABAP_RANDOM&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for generating test data? But if you've ever looked under the hood, you'll know that not all random numbers are created equal. Every random number generator is tied to a &lt;STRONG&gt;probability distribution&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;Here's the twist: Until now, ABAP only spoke the language of&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;uniform&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;randomness—a far cry from the rich, varied distributions that reflect real-world and business data.&lt;/P&gt;&lt;P&gt;The great news? With the latest ABAP releases, the answer has changed. ABAP now speaks the whole language of probability, supporting versatile random number generation for your advanced business needs!&lt;/P&gt;&lt;P&gt;It also has all the functionality to &lt;STRONG&gt;compute&amp;nbsp;&lt;/STRONG&gt;with probabilities.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Example:&lt;/STRONG&gt;&amp;nbsp;Have you ever wanted to execute a &lt;STRONG&gt;t-test&lt;/STRONG&gt; on your customer base directly in ABAP to see whether the customers from country A pay systematically later than the customers from country B or if the recent late payments are just bad luck? You could implement this now very easily in ABAP.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; currently planned to be available on-premise and in the private cloud with the upcoming major SAP S/4HANA release in 2025. Please note that this plan is subject to change by SAP without prior notice.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1472967141"&gt;2 Example: Customer Payment Date&lt;/H3&gt;&lt;P&gt;Suppose you want to generate realistic data for customer payment dates. Do you imagine that customers pay at random, with every date being equally likely?&lt;/P&gt;&lt;P&gt;Of course not!&lt;/P&gt;&lt;P&gt;In reality, most customers settle their bills close to the due date, with a few paying a bit early or late, and only a handful paying extremely early or well past the deadline.&lt;/P&gt;&lt;P&gt;These patterns can be captured with various probability distributions, such as &lt;STRONG&gt;normal&lt;/STRONG&gt;, &lt;STRONG&gt;beta&lt;/STRONG&gt;, or &lt;STRONG&gt;exponential&lt;/STRONG&gt; distributions. If you treat payment dates as discrete events, distributions like &lt;STRONG&gt;Poisson&lt;/STRONG&gt; or &lt;STRONG&gt;multinomial&lt;/STRONG&gt; may also fit.&lt;/P&gt;&lt;P&gt;For simplicity, we'll focus on the most common and versatile: the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;normal distribution&lt;/STRONG&gt;. The normal distribution's importance comes from a deep and beautiful mathematical result, the &lt;STRONG&gt;central limit theorem&lt;/STRONG&gt;. Simply put, it says:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;If you average many independent random processes—even if each one follows a different pattern—they will tend to form the familiar bell-shaped curve known as the normal distribution.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;In short, the normal distribution is the most important probability distribution.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Probability density of the normal distribution" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297174i767C0D2BE77657AA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="normal_distrib.png" alt="Probability density of the normal distribution" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Probability density of the normal distribution&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The curve means that the normal distribution generates values around its mean value (here: zero) more often and values farther away less frequently.&lt;/P&gt;&lt;P&gt;This can easily be adjusted to write ABAP code, which generates more realistic random numbers for this scenario.&lt;/P&gt;&lt;P&gt;The ABAP code is surprisingly easy compared to other programming languages. It uses the new system class CL_ABAP_PROB_DISTRIBUTION and its method NEXT_RANDOM_NUMBER( ). This class needs an underlying uniform random number generator given by an interface IF_ABAP_RANDOM. The old class CL_ABAP_RANDOM happens to implement IF_ABAP_RANDOM.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;class payment_date_generator definition.
  public section.
    methods constructor importing rng type ref to if_abap_random. " new as well
    methods generate_payment_date importing due_date type d
                                  returning value(payment_date) type d.

  private section.
    data m_rng type ref to if_abap_random.
    data m_system_date type d.
    data m_distribution type ref to if_abap_prob_distribution.
endclass.

class payment_date_generator implementation.
  method constructor.
    m_rng = rng.
    m_system_date = cl_abap_context_info=&amp;gt;get_system_date( ).
    m_distribution = cl_abap_prob_distribution=&amp;gt;get_normal_distribution(
      mean = 0
      standard_deviation = 15 ). " 68% are within ±15 days around due date
  endmethod.

  method generate_payment_date.
    while payment_date &amp;lt; m_system_date.
      payment_date = due_date + 
         conv i( m_distribution-&amp;gt;next_random_number( rng = m_rng ) ).
    endwhile.
  endmethod.
endclass.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Using the new interface IF_ABAP_RANDOM, you can also&amp;nbsp;&lt;STRONG&gt;plug in your own uniform random number&lt;/STRONG&gt; generator. No need to take the ABAP one (just in case you need a cryptographically secure, normally distributed number). Using ABAP's CL_ABAP_RANDOM is faster, as special optimizations apply here.&lt;/P&gt;&lt;P&gt;Running the example on 2025/08/06 with due date 2025/08/20 and 1000 numbers gives the following histogram, for example:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="normal_example.png" style="width: 790px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297179iA9C3D2643E7CBACA/image-size/large?v=v2&amp;amp;px=999" role="button" title="normal_example.png" alt="normal_example.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&amp;nbsp;&lt;/STRONG&gt;Although the normal distribution is symmetric around the mean value, we arrived at a non-symmetric distribution by "cutting off" the dates before the current date. This is called &lt;EM&gt;rejection sampling&lt;/EM&gt;&lt;SPAN&gt;&lt;EM&gt;,&amp;nbsp;&lt;/EM&gt;and it&lt;/SPAN&gt;&amp;nbsp;gives a totally new probability distribution, unique to this business problem.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Implementation:&lt;/STRONG&gt; There are two ABAP classes:&lt;/P&gt;&lt;TABLE border="1" width="100.00125876414536%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;&lt;STRONG&gt;Class&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;&lt;STRONG&gt;Hint&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;CL_ABAP_PROB_DISTRIBUTION&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;Calculate with F (= FLOAT) probabilities&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;Faster, more distributions&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="33.333333333333336%"&gt;CL_ABAP_PROB_DISTRIBUTION_DF34&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;Calculate with DECFLOAT34 probabilities&lt;/TD&gt;&lt;TD width="16.666666666666668%"&gt;Much slower, fewer distributions&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;By default, the classes CL_ABAP_PROB_DISTRIBUTION and CL_ABAP_PROB_DISTRIBUTION_DF34 generate F or DECFLOAT34 numbers, but they can easily be cast to P, I, or other datatypes in different scenarios.&lt;/P&gt;&lt;P&gt;Both classes can generate I (= INT4) or INT8 random numbers for &lt;STRONG&gt;discrete&lt;/STRONG&gt; distributions by default using separate methods.&lt;/P&gt;&lt;H3 id="toc-hId-1276453636"&gt;3 Supported probability distributions&lt;/H3&gt;&lt;P&gt;The table below shows the distributions supported in the ABAP environments 2508.&amp;nbsp;The headers "&lt;STRONG&gt;FLOAT Probabilities&lt;/STRONG&gt;" and "&lt;STRONG&gt;DECFLOAT34 Probabilities&lt;/STRONG&gt;" refer to the system classes &lt;STRONG&gt;CL_ABAP_PROB_DISTRIBUTION&lt;/STRONG&gt; and &lt;STRONG&gt;CL_ABAP_PROB_DISTRIBUTION_DF34&lt;/STRONG&gt;, respectively.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;TABLE border="1" width="100.00000000000001%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;&lt;STRONG&gt;Distribution&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="57px"&gt;&lt;STRONG&gt;FLOAT&amp;nbsp;&lt;BR /&gt;Probabilities&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="57px"&gt;&lt;STRONG&gt;DECFLOAT34&lt;BR /&gt;Probabilities&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="57px"&gt;&lt;STRONG&gt;Business Example&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Normal distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="85px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="85px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="85px"&gt;Customer satisfaction scores, Employee performance, and financial returns follow a normal distribution.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Lognormal distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="57px"&gt;Revenue or units sold across a product catalog often follow a lognormal distribution.&amp;nbsp;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="112px"&gt;Exponential distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="112px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="112px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="112px"&gt;&lt;SPAN&gt;The duration of customer service calls can be modeled using an exponential distribution.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Gamma distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="57px"&gt;A gamma distribution can model the time it takes to complete a project and the distribution of&amp;nbsp;&lt;SPAN&gt;customer lifetime values (CLV) in CRM.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Chi-Squared distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="57px"&gt;Test whether the customer prefers a new product feature over an existing one using the famous&lt;STRONG&gt; chi-squared test, &lt;/STRONG&gt;which utilizes&amp;nbsp;the chi-squared distribution.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;&lt;P&gt;Uniform-int/int8 distribution&lt;/P&gt;&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;&lt;P&gt;Discrete&lt;/P&gt;&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="30px"&gt;&lt;P&gt;Companies often conduct customer surveys in market research to gather feedback and insights. To ensure that the survey results represent the entire customer base, a uniform integer distribution can be used for random sampling.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="85px"&gt;Poisson distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Discrete&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="85px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="85px"&gt;No&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="85px"&gt;&lt;SPAN&gt;Understanding customer traffic is crucial for staffing and operational decisions in retail management. The Poisson distribution can model the number of customers arriving at a store within a specific time interval.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Binomial distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Discrete&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="30px"&gt;&lt;P&gt;In manufacturing, the binomial distribution can be used to model the number of defective items (failures) in a sample of produced items.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="57px"&gt;Student's t-distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Continuous&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="57px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="57px"&gt;No&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="57px"&gt;Using the famous &lt;STRONG&gt;t-test&lt;/STRONG&gt; and the &lt;STRONG&gt;t-distribution&lt;/STRONG&gt;, one can test whether a new marketing campaign significantly affected sales.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Hypergeometric distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Discrete&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="30px"&gt;&lt;SPAN&gt;In inventory management, the hypergeometric distribution can be used to model the selection of items for inspection or audit from a finite inventory.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="16.666666666666668%" height="30px"&gt;Geometric distribution&lt;/TD&gt;&lt;TD width="11.51645207439199%"&gt;Discrete&lt;/TD&gt;&lt;TD width="10.26466380543634%" height="30px"&gt;Yes&lt;/TD&gt;&lt;TD width="12.160228898426327%" height="30px"&gt;No&lt;/TD&gt;&lt;TD width="49.39198855507868%" height="30px"&gt;Model the number of customer interactions needed until the first sales occur.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;STRONG&gt;Note:&amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;More probability distributions might evolve in future ABAP releases (not an official statement, no guarantee, no promise or roadmap item).&amp;nbsp;&lt;SPAN&gt;Please note that this plan is subject to change by SAP without prior notice.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1079940131"&gt;4 Calculating with probabilities&lt;/H3&gt;&lt;P&gt;These new classes aren't just about rolling random numbers—they unlock many possibilities! Now you can compute probabilities, dive into advanced statistical analyses, and so much more.&lt;/P&gt;&lt;P&gt;The magic happens through the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;IF_ABAP_PROB_DISTRIBUTION&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;interface, which lets you calculate cumulative distribution functions (CDFs), quantiles, and a range of other powerful statistical operations. Plus, with dedicated sub-interfaces for discrete distributions, you get even more specialized tools right at your fingertips.&lt;/P&gt;&lt;P&gt;Here we only talk about two very important methods:&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;Method&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="50%" height="30px"&gt;CDF (Cumulative Distribution Function)&lt;/TD&gt;&lt;TD width="50%" height="30px"&gt;Calculates the probability that the distribution assumes values &amp;lt;= x. In mathematical terms: P(X &amp;lt;= x).&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Quantile&lt;/TD&gt;&lt;TD&gt;Inverse of the CDF. The quantile function gives the smallest value &lt;EM&gt;x&lt;/EM&gt;  such that the cumulative probability (CDF) is at least &lt;EM&gt;p&lt;/EM&gt;.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;STRONG&gt;Business Problem for the CDF:&amp;nbsp;&lt;/STRONG&gt;What proportion of the bills are paid within 20 days of the due date?&lt;BR /&gt;&lt;STRONG&gt;Solution in ABAP:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  final(dist) =
    cl_abap_prob_distribution=&amp;gt;get_normal_distribution( mean = 0 standard_deviation = 15 ).
  final(proportion) = dist-&amp;gt;cdf( 20 ).
  cl_demo_output=&amp;gt;display( proportion ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Business Problem for the Quantile:&amp;nbsp;&lt;/STRONG&gt;You want to know when 95% of customers have paid their bills.&lt;BR /&gt;&lt;STRONG&gt;Solution in ABAP:&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  data quantile type d.
  final(dist) =
    cl_abap_prob_distribution=&amp;gt;get_normal_distribution( mean = 0 standard_deviation = 15 ).
  final(quantile_int) = conv i( ceil( dist-&amp;gt;quantile( '0.95' ) ) ).
  quantile = due_date + quantile_int.  
  cl_demo_output=&amp;gt;display( quantile ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;This prints 2025/09/14 in my example from above, i.e., in mid-September, 95% of the customers paid their bill (simplified calculation for demo purposes, which does not account for the rejection sampling method applied above. Special applause to anyone posting the solution for the truncated normal distribution in the comments below.)&lt;/P&gt;&lt;P&gt;Note that&amp;nbsp;&lt;SPAN&gt;many valid statistical methods can be used to&amp;nbsp;&lt;STRONG&gt;find&amp;nbsp;&lt;/STRONG&gt;the correct probability distribution for your business problem. These can also be implemented now in ABAP&lt;/SPAN&gt;.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-754343907"&gt;5 More Trivia&lt;/H2&gt;&lt;P&gt;With the new classes, you can also do funny stuff, which is not quite new, but was difficult or slow before.&lt;/P&gt;&lt;H4 id="toc-hId-815995840"&gt;5.1 Generate many random numbers at once&lt;/H4&gt;&lt;P&gt;Usually, you do not want to generate only one random number. You want to generate many random numbers. In the past, every generated random number was a single method call.&lt;/P&gt;&lt;P&gt;Example:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  types i_tab type standard table of i with empty key.
  final(rng) = cl_abap_random=&amp;gt;create( ).
  final(tab) = reduce i_tab( init _tab = value #( ) 
                             for i = 1 then i + 1 until i &amp;gt; 1000
                             next _tab = value #( base _tab ( rng-&amp;gt;int( ) ) ) ).  &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;This is slow, as we have 1000 method calls and a FOR-LOOP.&lt;/P&gt;&lt;P&gt;Now, this can be sped up many times by doing the loop inside the ABAP kernel.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  final(rng) = cl_abap_random=&amp;gt;create( ).
  final(distrib) = cl_abap_prob_distribution=&amp;gt;get_uniform_int_distribution( range = value #( ) ). " empty range =&amp;gt; all numbers
  final(tab) = distrib-&amp;gt;next_random_numbers( count = 1000 rng = rng ).

  cl_demo_output=&amp;gt;display( tab ).&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-619482335"&gt;5.2 Analyzing range tables and generating random numbers in non-consecutive intervals&lt;/H4&gt;&lt;P&gt;Another nice example is generating uniformly distributed integer random numbers in arbitrary subsets of the integers (i.e., not in a single contiguous interval). The constructor for the uniform integer distribution accepts a &lt;STRONG&gt;range table.&lt;/STRONG&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  data distrib type ref to if_abap_prob_distribution_int.
  final(rng) = cl_abap_random=&amp;gt;create( ).
  distrib = cl_abap_prob_distribution=&amp;gt;get_uniform_int_distribution(
    range = value #( ( sign = 'I' option = 'BT' low = 1 high = 10 )
                     ( sign = 'E' option = 'EQ' low = 5 ) ) ).
  cl_demo_output=&amp;gt;write( distrib-&amp;gt;support_size( ) ).  " prints 9, i.e. we have 9 elements which are covered by the rangetab
  cl_demo_output=&amp;gt;write( distrib-&amp;gt;median( ) ). " prints 6, which is the median of the set [1,2,3,4,6,7,8,9,10] in our definition  
  final(random_numbers) = distrib-&amp;gt;next_random_numbers( count = 1000 rng = rng ). " generate random numbers from 1 to 10 excluding 5
  cl_demo_output=&amp;gt;display( random_numbers ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion:&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;You can easily generate random numbers that satisfy any condition specified by a range table. Keep in mind that the range table is treated as a set—so overlapping conditions like X &amp;lt; 6 and X &amp;lt; 7 simply combine to X &amp;lt; 7. Values that fall into both ranges (such as 5) are not given extra weight or counted multiple times.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Also, integers are "cut off" at the minimum/maximum INT4 or INT8 value, so you can't compute uniform discrete probabilities of an infinite set. Mathematics is safe here.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-293886111"&gt;&lt;SPAN&gt;6 Overflows&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;When generating random numbers, a probability distribution can overflow. The normal distribution, for example, spans the whole real line. As FLOAT's value range is finite, this can lead to unexpected results for very large mean or standard deviation, or, if you are just "unlucky", also for small ones.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;We decided that random number generation &lt;STRONG&gt;should never overflow&lt;/STRONG&gt;. We achieve this by two means:&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; 1. Restricting the parameters for the distribution in the constructor to "sensible" values reflecting real-world scenarios.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; 2. If you are unlucky anyhow, use rejection sampling until we are in the float range.&amp;nbsp;&lt;/P&gt;&lt;P&gt;This is an important compromise and something that is not done in most random number generator libraries. It also means that the distribution may not&amp;nbsp;&lt;EM&gt;exactly&amp;nbsp;&lt;/EM&gt;be (normally-, gamma-, ...) distributed at the borders of the float or decfloat range. This has no influence on any real-world scenario or calculation, however.&amp;nbsp;&lt;/P&gt;&lt;P&gt;On the contrary, you can be content that no overflow occurs, ever. This is an important feature of a random number generator.&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId-97372606"&gt;7 Conclusion&lt;/H3&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;DIV class=""&gt;&lt;P&gt;This article showcased the new ABAP capabilities for generating random numbers from various probability distributions—and performing probability calculations—using the powerful system classes&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;CL_ABAP_PROB_DISTRIBUTION&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;CL_ABAP_PROB_DISTRIBUTION_DF34&lt;/STRONG&gt;.&lt;/P&gt;&lt;H3 id="toc-hId--174372268"&gt;8 The interface IF_ABAP_PROB_DISTRIBUTION&lt;/H3&gt;&lt;P&gt;For reference, here is the complete interface IF_ABAP_PROB_DISTRIBUTION with the implemented methods:&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;"! &amp;lt;p&amp;gt;Interface representing a probability distribution with probabilities of type F (=FLOAT). Used by class
"!  {@link CL_ABAP_PROB_DISTRIBUTION }, which represents a probability distribution over the real line.&amp;lt;/p&amp;gt;
interface if_abap_prob_distribution
  public .

  "! Table type to hold a collection of random numbers.
  types random_numbers type standard table of f with empty key.

  "! Returns the support of the probability distribution
  "! @parameter kind | The kind of support the distribution provides.
  methods support_kind
    returning value(kind) type if_abap_prob_types=&amp;gt;support_kind.

  "! Returns the kind of probability distribution
  "! @parameter kind | The kind of the distribution.
  methods distribution_kind
    returning value(kind) type if_abap_prob_types=&amp;gt;distribution_kind.

  "! Returns whether the probability distribution is continuous
  "! @parameter continuous | Flag indicating if the distribution is continuous.
  methods is_continuous
    returning value(continuous) type abap_bool.

  "! Returns the mean of the probability distribution
  "! @parameter mean | The mean value of the distribution.
  "! @raising CX_ABAP_PROB_UNSUPPORTED | if distribution has no mean
  methods mean
    returning value(mean) type f
    raising   cx_abap_prob_unsupported.

  "! Returns a possible mode of the probability distribution
  "! @parameter mode | The mode of the distribution.
  "! @raising CX_ABAP_PROB_UNSUPPORTED | if distribution has no mode
  methods mode
    returning value(mode) type f
    raising   cx_abap_prob_unsupported.

  "! Returns the variance of the probability distribution
  "! @parameter variance | The variance of the distribution.
  "! @raising CX_ABAP_PROB_UNSUPPORTED | if distribution has no variance
  methods variance
    returning value(variance) type f
    raising   cx_abap_prob_unsupported.

  "! Returns the (CDF-based) median of the probability distribution. Here, the median
  "! is the smallest x in the support, such that P(X &amp;lt;= x) &amp;gt;= 0.5.
  "! @parameter median | The median value of the distribution.
  methods median
    returning value(median) type f.

  "! Returns the cumulative distribution function, i.e. the probability that the
  "! distribution assumes values &amp;lt;= arg.
  "! @parameter arg                      | The argument for which to calculate the cumulative distribution function.
  "! @parameter probability              | P( X &amp;lt;= arg )
  "! @raising cx_sy_arithmetic_overflow  | If an arithmetic overflow occurs.
  "! @raising cx_parameter_invalid_range | If the parameter is outside of the support.
  methods cdf
    importing arg                type f
    returning value(probability) type f
    raising   cx_sy_arithmetic_overflow
              cx_parameter_invalid_range.

  "! Returns the probability density function (if continuous) or the probability mass function
  "! (if not continuous)
  "! @parameter arg                      | The argument for which to calculate the probability density or mass function.
  "! @parameter value                    | The calculated density or mass value.
  "! @raising cx_sy_arithmetic_overflow  | If an arithmetic overflow occurs.
  "! @raising cx_parameter_invalid_range | If the parameter is outside of the support.
  methods pdf_or_pmf
    importing arg          type f
    returning value(value) type f
    raising   cx_sy_arithmetic_overflow
              cx_parameter_invalid_range.

  "! Returns the p-quantile of the the distribution,
  "! @parameter probability              | The probability for which to calculate the quantile. Should be
  "!                                       between 0 and 1.
  "! @parameter quantile                 | The calculated quantile value.
  "! @raising cx_parameter_invalid_range | If the parameter is out of range.
  "! @raising cx_sy_arithmetic_overflow  | If an arithmetic overflow occurs.
  methods quantile
    importing probability     type f
    returning value(quantile) type f
    raising   cx_parameter_invalid_range
              cx_sy_arithmetic_overflow.

  "! Returns the minimum value the distribution can assume.
  "! @parameter value | The minimum value in the distribution.
  methods min_value
    returning value(value) type f.

  "! Returns the maximum value the distribution can assume
  "! @parameter value | The maximum value in the distribution.
  methods max_value
    returning value(value) type f.

  "! Returns a random number distributed according to the distribution
  "! @parameter rng    | The random number generator to use.
  "!                     When rng is of type {@link CL_ABAP_RANDOM }, other algorithms are used
  "!                     which are significantly faster and generate different random numbers for some
  "!                     distributions.
  "! @parameter number | The next random number generated.
  methods next_random_number
    importing rng           type ref to if_abap_random
    returning value(number) type f.

  "! Returns an internal table of random number distributed according to the distribution
  "! @parameter count   | The number of random numbers to generate.
  "! @parameter rng     | The random number generator to use.
  "!                      When rng is of type {@link CL_ABAP_RANDOM }, other algorithms are used
  "!                      which are significantly faster and generate different random numbers for some
  "!                      distributions.
  "! @parameter numbers | A set of generated random numbers.
  methods next_random_numbers
    importing count          type i
              rng            type ref to if_abap_random
    returning value(numbers) type random_numbers.

endinterface.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/random-numbers-and-probability-distributions-in-the-abap-environments-for/ba-p/14173266"/>
    <published>2025-08-18T13:00:51.072000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/upload-and-download-invoice-image-on-rap-application/ba-p/14181185</id>
    <title>Upload and Download Invoice Image on RAP Application</title>
    <updated>2025-08-20T07:19:57.829000+02:00</updated>
    <author>
      <name>AnithaSwamy</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1757477</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1608691752"&gt;Introduction:&lt;/H1&gt;&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;ABAP RESTful Application Programming Model (RAP)&amp;nbsp;provides a streamlined, standardized way to build enterprise-grade Fiori apps on SAP BTP ABAP Environment — including support for file handling.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;Unlike traditional approaches where developers manually code file upload/download logic, RAP leverages&amp;nbsp;large object (LOB) semantics, MIME type control, and built‑in media stream handling to manage file content and metadata automatically.&lt;BR /&gt;In this project, we implement a&amp;nbsp;draft‑enabled RAP application&amp;nbsp;for invoice management that allows users to&amp;nbsp;upload, preview, download, and delete attachments&amp;nbsp;directly from the Fiori UI.&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using only CDS annotations and metadata definitions — without custom CRUD code — the RAP runtime takes care of:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Persisting file content in database LRAW/RAWSTRING fields,&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Validating file MIME types (e.g., JPEG, PNG),&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Exposing file streams for download via OData V4,&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Linking attachments to business object instances in draft or active state.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;By combining RAP’s managed draft capabilities and UI annotations like&amp;nbsp;@Semantics.largeObject&amp;nbsp;and&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1445379"&gt;@ui&lt;/a&gt;.headerInfo.imageUrl, we achieve a clean, zero‑custom‑code solution for common file management needs in business applications.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1412178247"&gt;Objectives:&lt;/H1&gt;&lt;P&gt;Enable file upload and download functionality for a Draft enabled RAP Application&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1215664742"&gt;Tasks&lt;/H1&gt;&lt;OL&gt;&lt;LI&gt;Database Table: Create the Attachment, MIME and File name fields in Database table&lt;/LI&gt;&lt;LI&gt;CDS Interface View: &amp;nbsp;the LargeObject semantics for the file like file types (in our case we set this to jpeg and PNG file types)&lt;/LI&gt;&lt;LI&gt;Metadata View: Declare the imageURL in UI.headerinfo and hide filename and MIME type fields.&lt;/LI&gt;&lt;LI&gt;Test the application for file upload and download for a record selected by user&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1019151237"&gt;Steps in Detail&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;Step 1 :Database Table will must have the following fields&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;attachment : /dmo/attachment;
mime_type  : /dmo/mime_type;
file name  : /dmo/filename;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Step 2 : CDS Interface view declaration:&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@Semantics.largeObject: { mimeType: 'MimeType', //case-sensitive
                          fileName: 'FileName', //case-sensitive
               acceptableMimeTypes: ['image/png', 'image/jpeg'],
      contentDispositionPreference: #ATTACHMENT }

attachment as Attachment,
@Semantics.mimeType: true
mime_type as MimeType,
file name as FileName,&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Step 3: Metadata View&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  imageUrl:       'Attachment',           //case-sensitive in UI.HeaderInfo.&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;QUI.identification: [ { position: 110 } ]
Attachment;

@UI.hidden: true
MimeTypej

@UI.hidden: true
FileName;

@UI.hidden: true
LocalLastChangedAt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Step 4: Test the Application: Open your RAP UI App. Click “Go” Button, to see records listed from Database table.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_3-1755193519094.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301138i2FF38BBE1EB90905/image-size/large?v=v2&amp;amp;px=999" role="button" title="AnithaSwamy_3-1755193519094.png" alt="AnithaSwamy_3-1755193519094.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Navigate to a record by clicking on the list displayed, you will see the field for Attachments.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_4-1755193519100.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301136i0ED98E71704F3556/image-size/large?v=v2&amp;amp;px=999" role="button" title="AnithaSwamy_4-1755193519100.png" alt="AnithaSwamy_4-1755193519100.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can hit the upload button to upload the file: (in our case we have limited the file type to JPEG and PNG files). Once uploaded the file will be displayed as an icon. You can also see the updated file on the top left corner of the record when the upload is successful.&amp;nbsp; This means that the attachment has been successfully uploaded against the selected record in the database.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_5-1755193519106.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301137i9883B1A6436EB4FA/image-size/large?v=v2&amp;amp;px=999" role="button" title="AnithaSwamy_5-1755193519106.png" alt="AnithaSwamy_5-1755193519106.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;User is able to delete the file by selecting the delete icon next to the upload/download button when the record is in Creation or Edit mode.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_6-1755193519110.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301139i5E0653EF4FED4FA4/image-size/large?v=v2&amp;amp;px=999" role="button" title="AnithaSwamy_6-1755193519110.png" alt="AnithaSwamy_6-1755193519110.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;When the record is in Display mode, if there is a image attached to the record, the file name is hyperlink enables so that the user is able to download file onto local drive.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AnithaSwamy_7-1755193519114.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301140iD5EBD4FA9DC0F79F/image-size/large?v=v2&amp;amp;px=999" role="button" title="AnithaSwamy_7-1755193519114.png" alt="AnithaSwamy_7-1755193519114.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-951720451"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-755206946"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;This demonstrates that&amp;nbsp;RAP’s built‑in file handling&amp;nbsp;significantly reduces the complexity of implementing document management features in SAP applications.&lt;BR /&gt;By simply:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Declaring&amp;nbsp;attachment,&amp;nbsp;file name, and&amp;nbsp;MIME type&amp;nbsp;fields in the DB table,&lt;/LI&gt;&lt;LI&gt;Annotating them with&amp;nbsp;large object semantics&amp;nbsp;and acceptable MIME types,&lt;/LI&gt;&lt;LI&gt;Using metadata extensions to control UI display and hide technical fields,&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;the RAP framework automatically provides end‑to‑end file upload, delete, and download capabilities in the generated Fiori app — fully integrated with the business object lifecycle and draft handling. In our invoice scenario, users can intuitively manage image attachments within the object page: upload new files in edit mode, delete them when needed, and download them in display mode.&lt;/P&gt;&lt;P&gt;No manual OData stream provider or complex frontend logic was necessary — the RAP runtime, guided by CDS annotations, handled storage, retrieval, and MIME type enforcement for us.&lt;/P&gt;&lt;P&gt;This confirms RAP’s position as a&amp;nbsp;“declarative-first” development model&amp;nbsp;— enabling developers to focus on the data model and business logic, while the framework transparently implements recurring technical patterns like file management.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/upload-and-download-invoice-image-on-rap-application/ba-p/14181185"/>
    <published>2025-08-20T07:19:57.829000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/abap-ai-chapter-2/ba-p/14210568</id>
    <title>ABAP AI - Chapter 2</title>
    <updated>2025-09-08T13:29:05.550000+02:00</updated>
    <author>
      <name>AlexanderRother</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/179726</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;New ABAP AI capabilities keep coming&lt;/LI&gt;&lt;LI&gt;Joule for Developers, ABAP AI capabilities remain free of charge&lt;/LI&gt;&lt;LI&gt;Availability of ABAP AI in SAP S/4HANA Cloud Private Edition in release 2025 is ahead of us&lt;/LI&gt;&lt;LI&gt;ABAP AI will be available in older releases of SAP S/4HANA Cloud Private Edition as well, details and updates expected at TechEd.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;In February 2025, we started the first chapter of ABAP AI and announced that &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/joule-speaks-abap/ba-p/14018226" target="_blank"&gt;Joule speaks ABAP&lt;/A&gt;. Now, it’s time to get ready for chapter 2!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;In the past months, we have been delivering&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; more Joule skills to speed up ABAP Cloud development, and we are now able to create RAP business objects – from the database table up to the UI service powered by generative AI. We can create unit tests, explain code, complete code in the editor, implement validations and determinations, and much more (see also our &lt;A href="https://www.sap.com/documents/2025/02/b4f714de-f57e-0010-bca6-c68f7e60039b.html" target="_blank" rel="noopener noreferrer"&gt;public slide deck&lt;/A&gt;). All these skills are part of the 2508 release of SAP BTP ABAP Environment and SAP Cloud ERP (SAP S/4HANA Cloud Public Edition), and they will be included in the SAP Cloud ERP Private (SAP S/4HANA Cloud Private Edition) in the 2025 release. Please check out our &lt;A href="https://github.com/SAP-samples/abap-platform-rap120/blob/main/README.md" target="_blank" rel="noopener nofollow noreferrer"&gt;updated tutorial&lt;/A&gt; on ABAP AI capabilities. In addition, we will continue to expand our AI scope and will deliver on the transformation aspect of our AI strategy. This starts with the 2025 delivery for SAP Cloud ERP Private, followed by AI capabilities in the custom code migration app in SAP BTP ABAP Environment 2602. Please visit our &lt;A href="https://help.sap.com/docs/abap-cross-product/roadmap-info/genai" target="_blank" rel="noopener noreferrer"&gt;roadmap&lt;/A&gt; to keep track of our deliveries.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Let’s continue with commercials&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and keep it short: The free promotions we introduced at the beginning of the year &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/unlock-sap-joule-for-developers-claim-your-free-access-today/ba-p/14183158" target="_blank"&gt;have been extended&lt;/A&gt; until further notice! We are convinced that, in the current situation, we don’t want to put any commercial barriers on our offering and let all customers and partners benefit from AI-driven development. The corresponding material numbers for customers 8019124&amp;nbsp;and TDD partners 8019541&amp;nbsp;remain the same and can be ordered again. For those who started before the extension of the promotion, note that a re-ordering of the material is required. The procedure for the SAP BTP ABAP Environment and SAP Cloud ERP remains the same as well, and the &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/joule-speaks-abap/ba-p/14018226" target="_blank"&gt;initial blog post&lt;/A&gt; has been updated to reflect this, as well as &lt;A href="https://me.sap.com/notes/3571857" target="_blank" rel="noopener noreferrer"&gt;SAP Note 3571857&lt;/A&gt;.&lt;BR /&gt;For SAP Cloud ERP Private, as of release 2025, the material numbers are also valid. However, the configuration will need to be done manually by you. Detailed information on this will follow.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;But that is not enough. &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Will ABAP AI capabilities become available also for older releases of SAP Cloud ERP Private? Yes!&lt;BR /&gt;Imagine an ABAP AI service running side-by-side to your ABAP instance, providing full access to ABAP AI capabilities across hybrid landscapes. This includes SAP BTP ABAP Environment, SAP Cloud ERP, and SAP Cloud ERP Private. New AI innovations become available independently of release upgrades or support packages, allowing immediate leveraging. &amp;nbsp;Best of all, this ABAP AI service can also be connected to older releases of SAP Cloud ERP Private.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Sounds like a dream? Let’s find out – stay tuned for TechEd 2025 to receive all the news and updates!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/abap-ai-chapter-2/ba-p/14210568"/>
    <published>2025-09-08T13:29:05.550000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/additional-preconditions-for-procurement-flexible-workflow/ba-p/14209366</id>
    <title>Additional Preconditions for Procurement Flexible Workflow</title>
    <updated>2025-09-09T06:38:56.770000+02:00</updated>
    <author>
      <name>vineetsharma1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1424991</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction:&amp;nbsp;&lt;/STRONG&gt;The &lt;STRONG&gt;Custom Fields and Logic&lt;/STRONG&gt; Fiori app in SAP S/4HANA is a powerful tool for in-app extensibility, enabling key users to modify standard applications without requiring extensive technical development. The &lt;STRONG&gt;Custom Fields&lt;/STRONG&gt; &lt;STRONG&gt;and Logic&lt;/STRONG&gt; app has been deprecated in favor of the &lt;STRONG&gt;Custom Logic (App ID: F6957)&lt;/STRONG&gt; app in SAP S/4HANA. In present we are using Custom Logic Fiori app to implement &lt;STRONG&gt;Business Add-Ins (BAdIs)&lt;/STRONG&gt; and behavior extensions for released business objects.&lt;/P&gt;&lt;P&gt;This blog aims to assist you in &lt;STRONG&gt;adding preconditions&lt;/STRONG&gt; (such as Account Assignment, Plant, and Cost Centre) for &lt;STRONG&gt;Manage Workflows for Purchase Requisitions&lt;/STRONG&gt; Fiori App. These standard fields must be displayed in the F4 help or dropdown menu for selection. To fulfil this requirement, we will implement two &lt;STRONG&gt;BAdIs (Business Context ID: &lt;EM&gt;SWF_WORKFLOW_CONDITION_DEF, SWF_WORKFLOW_CONDITION_EVAL&lt;/EM&gt;).&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;Step-by-Step Process:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1 – &lt;/STRONG&gt;&lt;SPAN&gt;Open SAP Fiori launchpad and search for &lt;STRONG&gt;Custom Logic&lt;/STRONG&gt; App.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_0-1757150119437.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310297iAC1C6CC468B686B2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_0-1757150119437.png" alt="vineetsharma1_0-1757150119437.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2 –&lt;/STRONG&gt;&lt;SPAN&gt;Click on the Custom Logic tile and you will see the below screen and click on &lt;STRONG&gt;Create &lt;/STRONG&gt;Button.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_1-1757150191277.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310300i09FE6488DB41B33B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_1-1757150191277.png" alt="vineetsharma1_1-1757150191277.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3 - &lt;/STRONG&gt;Enter the Business Context ID: &lt;STRONG&gt;SWF_WORKFLOW_CONDITION_DEF&amp;nbsp;&lt;/STRONG&gt;in search input box, then click on &lt;STRONG&gt;Step2&amp;nbsp;&lt;/STRONG&gt;button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_2-1757150191287.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310301iA5E720B56B6FDDBD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_2-1757150191287.png" alt="vineetsharma1_2-1757150191287.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 4 - &lt;/SPAN&gt;&lt;/STRONG&gt;In Implementation Attributes, give the filter value(Scenario ID: &lt;STRONG&gt;WS02000458&lt;/STRONG&gt;) using &lt;STRONG&gt;ADD&lt;/STRONG&gt; button and save it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_3-1757150191302.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310302i4F123A2AE1A861AC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_3-1757150191302.png" alt="vineetsharma1_3-1757150191302.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_4-1757150191316.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310304i2EA6E8C9ECC55984/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_4-1757150191316.png" alt="vineetsharma1_4-1757150191316.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5 -&amp;nbsp;&lt;/STRONG&gt;Click on &lt;STRONG&gt;Step 3&amp;nbsp;&lt;/STRONG&gt;button, enter the required details and click on &lt;STRONG&gt;Review&lt;/STRONG&gt; Button&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_5-1757150191321.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310303i9728B35F15EBB875/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_5-1757150191321.png" alt="vineetsharma1_5-1757150191321.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 6 -&lt;/STRONG&gt;It will appear like the below screenshot, now click on &lt;STRONG&gt;Create&lt;/STRONG&gt; Button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_6-1757150191328.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310305iE081B23DC1A16B2F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_6-1757150191328.png" alt="vineetsharma1_6-1757150191328.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 7 –&amp;nbsp;&lt;/STRONG&gt;After clicking on &lt;STRONG&gt;Create&lt;/STRONG&gt; Button, the below screen will appear. Once you click on &lt;STRONG&gt;Publish &lt;/STRONG&gt;Button, then you will get &lt;STRONG&gt;Open Code Editor&lt;/STRONG&gt; button enabled.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_7-1757150191336.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310306i0114D5FC5A8BC168/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_7-1757150191336.png" alt="vineetsharma1_7-1757150191336.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 8 -&lt;/STRONG&gt;When you open the code editor, the below Screen will display.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_8-1757150191351.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310308iA19B6D48ECF8F32B/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_8-1757150191351.png" alt="vineetsharma1_8-1757150191351.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 9 -&lt;/STRONG&gt;Click on Edit Button and write your logic here like below code snippet.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_9-1757150191359.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310307i17C7E6E4061CDE50/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_9-1757150191359.png" alt="vineetsharma1_9-1757150191359.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_10-1757150191368.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310309iC4C86826330BD21C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_10-1757150191368.png" alt="vineetsharma1_10-1757150191368.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_11-1757150191373.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310310iA7B02BC8FE0CAE89/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_11-1757150191373.png" alt="vineetsharma1_11-1757150191373.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 10 -&lt;/STRONG&gt;Now, test the written code for syntax error or other type of errors.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 11 -&lt;/STRONG&gt;Implement the second BAdI in the same way using Scenario ID: &lt;STRONG&gt;WS02000458&lt;/STRONG&gt; and business context ID: &lt;STRONG&gt;SWF_WORKFLOW_CONDITION_EVAL&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Step 12 –&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Write your logic for second BAdI like the below&amp;nbsp;&lt;/SPAN&gt;Code snippets:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_12-1757150191381.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310311iDC821945A1E3B843/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_12-1757150191381.png" alt="vineetsharma1_12-1757150191381.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_13-1757150191385.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310312i0F074CB15E1066D3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_13-1757150191385.png" alt="vineetsharma1_13-1757150191385.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="vineetsharma1_14-1757150191392.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/310313i87AB30AD25D8F082/image-size/medium?v=v2&amp;amp;px=400" role="button" title="vineetsharma1_14-1757150191392.png" alt="vineetsharma1_14-1757150191392.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 13 -&lt;/STRONG&gt;Save the code and check the &lt;STRONG&gt;Manage Workflows for Purchase Requisitio&lt;/STRONG&gt;n Fiori App, issue will get resolved.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion: &lt;/STRONG&gt;Utilizing the Custom Logic application to implement BAdIs represents the most secure and future-proof method for extending S/4HANA. This approach ensures that your code remains stable during upgrades, is ready for the cloud, and integrates smoothly with Fiori and APIs.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/additional-preconditions-for-procurement-flexible-workflow/ba-p/14209366"/>
    <published>2025-09-09T06:38:56.770000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/abap-ai-revolution-accelerates-the-abap-developer-who-built-enterprise-apps/ba-p/14216073</id>
    <title>ABAP AI Revolution Accelerates: The ABAP Developer Who Built Enterprise Apps in Minutes</title>
    <updated>2025-09-12T21:50:13.192000+02:00</updated>
    <author>
      <name>SimonaM</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/9367</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;The ABAP AI revolution just got a massive functionality upgrade and stays FREE OF CHARGE for another year&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Remember John, our seasoned ABAP developer who discovered the power of Joule for AI-assisted coding? His journey has taken an incredible turn. What started as relief from "quick questions" and real-time assistance has evolved into something he never imagined possible – building entire applications and transforming legacy systems through conversation in minutes.&amp;nbsp;&lt;/P&gt;&lt;P&gt;John's incredible journey is about to accelerate even further with game-changing news:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Joule for Developers remains FREE OF CHARGE for another year&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;– the promotion has been extended with no commercial barriers, allowing every customer and partner to benefit from AI-driven development through material numbers 8019124 (customers) and 8019541 (TDD partners). This offer is now available not only for the BTP ABAP environments (Steampunk) and SAP Cloud ERP Public, but also to our SAP Cloud ERP Private customers using the latest 2025 release version. For a deep dive in more commercial details see&amp;nbsp;&lt;A class="" href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/abap-ai-chapter-2/ba-p/14210568" target="_blank"&gt;ABAP AI - Chapter 2&lt;/A&gt;&amp;nbsp;blog written by my colleague&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/179726"&gt;@AlexanderRother&lt;/a&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;See John's ABAP AI complete evolution with 2505, 2508 and 2025 ABAP releases:&lt;/U&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The Game-Changer: ABAP Cloud Application Generation&lt;/LI&gt;&lt;LI&gt;Intelligent Business Logic with RAP Business Logic Prediction&lt;/LI&gt;&lt;LI&gt;Seamless Integration with OData Consumption&lt;/LI&gt;&lt;LI&gt;Enhanced Extensibility with Extensibility AI Assistant&amp;nbsp;for SAP Cloud ERP Public&lt;/LI&gt;&lt;LI&gt;The Migration Revolution: Custom Code Migration AI Assistant&amp;nbsp;for SAP Cloud ERP Private 2025&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1760086936"&gt;The Game-Changer: ABAP Cloud Application Generation&lt;/H2&gt;&lt;P&gt;John's latest project required a library application with multiple entities. Opening his package in ADT, he right-clicks and selects "Generate ABAP Repository Objects." The new&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData UI Service from Scratch Wizard with Joule Chat&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;appears.&lt;/P&gt;&lt;P&gt;"Create a library application with entities for branches, book stock, users and borrowing information. Generate the appropriate fields which fit the business case for the entities." John prompts.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SimonaM_0-1757699149723.png" style="width: 831px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313657iF75C055449D3BA74/image-dimensions/831x489?v=v2" width="831" height="489" role="button" title="SimonaM_0-1757699149723.png" alt="SimonaM_0-1757699149723.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Within seconds, Joule responds with a comprehensive proposal including all entities, fields, and relationships. One click on "Accept" and the wizard auto-populates all configuration fields. Minutes later, John has a complete, runnable RAP application with data model, behavior definitions, service bindings, and OData services ready for UI consumption.&lt;/P&gt;&lt;H2 id="toc-hId-1563573431"&gt;Intelligent Business Logic with RAP Business Logic Prediction&lt;/H2&gt;&lt;P&gt;But the magic doesn't stop at application generation. John's application needs sophisticated business logic – validations for booking dates, automatic stock calculations, and borrowing permission determinations.&lt;/P&gt;&lt;P&gt;Navigating to his behavior implementation class, John finds empty method stubs for his determinations and validations. The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;RAP Predict Business Logic&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;capability kicks in, understanding the entity structure, field relationships, and business context to generate complete validation logic within the method implementation.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SimonaM_2-1757699553027.png" style="width: 671px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313659i2E91AAAC0E2D0475/image-dimensions/671x255?v=v2" width="671" height="255" role="button" title="SimonaM_2-1757699553027.png" alt="SimonaM_2-1757699553027.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;"It's not just generating code," John marvels. "It's understanding the business context and implementing proper RAP patterns automatically."&lt;/P&gt;&lt;H2 id="toc-hId-1367059926"&gt;Seamless Integration with OData Consumption&lt;/H2&gt;&lt;P&gt;When John needs to integrate with external booking services, he opens his service consumption model and starts the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Joule chat&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;/consume&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;slash command. The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData consumption&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;capability generates complete, ready-to-use ABAP code for consuming OData calls via the OData Client Proxy, tailored to his specific service model.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SimonaM_5-1757699897856.png" style="width: 909px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313662iC303D01AD9C0D39A/image-dimensions/909x507?v=v2" width="909" height="507" role="button" title="SimonaM_5-1757699897856.png" alt="SimonaM_5-1757699897856.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;What used to take hours of documentation reading now happens in seconds with Joule providing example prompts and OData request generation.&lt;/P&gt;&lt;H2 id="toc-hId-1170546421"&gt;Enhanced Extensibility with Extensibility AI Assistant for SAP Cloud ERP Public&lt;/H2&gt;&lt;P&gt;As business requirements evolve, the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Extensibility AI Assistant&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;guides John through adding custom fields for regulatory compliance. It assists him in:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Creating Custom Fields&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for borrowing information&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Finding Business Contexts&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for the right extension points&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Enabling Usages&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;where custom fields can be exposed in UIs, APIs, and analytical views&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Enabling Business Scenarios&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for data flow between business objects&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Finding Value Help Views&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;for code list-based custom fields&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Finding BAdIs&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;based on natural language input&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SimonaM_6-1757700405040.png" style="width: 841px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313665i86F9A9FF94CFD78E/image-dimensions/841x547?v=v2" width="841" height="547" role="button" title="SimonaM_6-1757700405040.png" alt="SimonaM_6-1757700405040.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-974032916"&gt;The Migration Revolution: Custom Code Migration AI Assistant&amp;nbsp;&lt;STRONG&gt;for SAP Cloud ERP Private 2025&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;With the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP S/4HANA Cloud Private Edition 2025 release&lt;/STRONG&gt;, John faces his organization's biggest challenge: migrating 15 years of custom ECC code to SAP ERP Cloud Private 2025. The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Custom Code Migration AI Assistant&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;will&amp;nbsp;&lt;/SPAN&gt;transforms this experience (on October 2025 planned release).&amp;nbsp; These use cases are currently not available on the older releases, however the use cases delivered on 2025 versions will be soon provided also as part of the&lt;STRONG&gt; Custom Code Migration Application&lt;/STRONG&gt; which is a standalone BTP ABAP environment (Steampunk) application &lt;STRONG&gt;which can connect freely to any ERP OnPrem or Cloud system to support RISE migrations.&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Using the Explain Capability&lt;/STRONG&gt;: "Explain this legacy report," John types, selecting a 500-line ABAP program. The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Explain capability&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;provides detailed explanations of the ABAP program, breaking down complex concepts with support for ABAP classes, ABAP programs, and CDS artifacts.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Explain ATC Findings Capability&lt;/STRONG&gt;&lt;SPAN&gt;: When running ATC checks with S/4HANA readiness variants, John uses the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Explain ATC Findings capability&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;on his S/4HANA readiness findings. This capability provides detailed explanations and step by step resolution proposal on ATC findings from check variants for SAP S/4HANA Readiness, specifically for:&amp;nbsp;&lt;/SPAN&gt;S/4HANA: Field Length Extensions,&amp;nbsp;S/4HANA: Search for Database Operations and&amp;nbsp;S/4HANA: Search for Usages and Simplified Objects. Each finding links to simplification items, which Joule explains in detail.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Documentation Migration Assistance&lt;/STRONG&gt;&lt;SPAN&gt;: Using the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Custom Code Migration AI Assistant&lt;/STRONG&gt;&lt;SPAN&gt;, John opens the Joule chat view,&amp;nbsp; type in /docs to start chatting about simplification items related to Custom Code Migration and ABAP SAP Help documentation.&amp;nbsp; &lt;/SPAN&gt;&lt;SPAN&gt;To chat with the assistant about SAP S/4HANA simplification items and Custom Code Migration, just start asking topic-related questions.&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;With&amp;nbsp;&lt;STRONG&gt;Code proposal for code adaptation&lt;/STRONG&gt;&amp;nbsp;coming in SAP S/4HANA 2025 FPS01, John will soon receive in addition of the step-by-step description of how to solve the ATC findings provided currently by ATC Explain functionality and a custom code adaptation automatically.&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SimonaM_0-1757704750948.png" style="width: 906px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/313685iB65B0C26D2DE969E/image-dimensions/906x562?v=v2" width="906" height="562" role="button" title="SimonaM_0-1757704750948.png" alt="SimonaM_0-1757704750948.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-777519411"&gt;The Complete ABAP Lifecycle Revolution&lt;/H2&gt;&lt;P&gt;John's journey now encompasses the entire ABAP development and transformation lifecycle:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Build new cloud applications&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData UI Service from Scratch Wizard&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Implement intelligent business logic&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;RAP Predict Business Logic&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Integrate seamlessly&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData consumption&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Extend dynamically&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Extensibility AI Assistant in SAP Cloud ERP Public&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Transform existing solutions&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Custom Code Migration AI Assistant for RISE&amp;nbsp;in SAP Cloud ERP Private 2025&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;John tells now to everyone: "Six months ago, I was struggling with syntax," John explains to his manager. "Today, I'm generating complete applications with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData UI Service from Scratch Wizard&lt;/STRONG&gt;, implementing business logic with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;RAP Predict Business Logic&lt;/STRONG&gt;, consuming services with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;OData consumption&lt;/STRONG&gt;, extending solutions with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Extensibility AI Assistant&lt;/STRONG&gt;, and leading our S/4HANA migration with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Custom Code Migration AI Assistant&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;– all through natural language conversations."&lt;/P&gt;&lt;P&gt;The impact is transformative:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Application Development&lt;/STRONG&gt;: Dramatically faster with&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ABAP Cloud Application Generation&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Business Logic Implementation&lt;/STRONG&gt;: Massive reduction in development time&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Migration Analysis&lt;/STRONG&gt;: From weeks to hours using&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Custom Code Migration AI Assistant&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;OData Integration&lt;/STRONG&gt;: Significantly less code required for side-by-side extension scenarios&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-581005906"&gt;&amp;nbsp;&lt;/H2&gt;&lt;P&gt;&lt;STRONG&gt;The AI Revolution Accelerates – &lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/abap-ai-chapter-2/ba-p/14210568" target="_self"&gt;Chapter 2&lt;/A&gt; Awaits!&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;John's incredible transformation is just the beginning as we enter the next phase of ABAP AI evolution. Even more exciting, SAP is pioneering a revolutionary&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;side-by-side ABAP AI service&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;that will bring full AI capabilities to older SAP S/4HANA Cloud Private Edition releases, enabling immediate access to new AI innovations without waiting for upgrades or support packages across hybrid landscapes. Get ready for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;TechEd 2025&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;where all the groundbreaking details of this hybrid AI service will be unveiled – the future of ABAP development is about to get even more transformative!&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Ready to evolve your ABAP development approach? Check out the &lt;A href="https://help.sap.com/docs/abap-ai/generative-ai-in-abap-cloud/generative-ai-in-abap-cloud" target="_self" rel="noopener noreferrer"&gt;hands-on documentation in SAP Help&lt;/A&gt; and join the growing community redefining what's possible in enterprise development.&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-ai-revolution-accelerates-the-abap-developer-who-built-enterprise-apps/ba-p/14216073"/>
    <published>2025-09-12T21:50:13.192000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cds-table-entity/ba-p/14210702</id>
    <title>CDS Table Entity</title>
    <updated>2025-09-15T07:40:56.183000+02:00</updated>
    <author>
      <name>Gajendra_L60</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2230516</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;What is CDS Table Entity?&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A CDS Table entity defines a database table in ABAP CDS as an ABAP-managed database object.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Table entities are like a special container that provide a persistence layer for ABAP applications.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;It supports CDS associations, semantic meta data with CDS annotations and typing with both CDS simple types and CDS enumerated types.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Advantages&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt; By using CDS table entity we can perform the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;CRUD (&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Select, update, modify, delete) operations and also it can be used as a data type in ABAP.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;CDS entities as the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;active persistence layer&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in scenarios with or without draft capabilities.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;When you're building a business object (like something that handles customer orders or travel bookings), you need a place to store its data permanently. You can do this by using table entities, which act like real database tables. This setup makes sure your business object's data is saved and managed, so it’s always available when needed.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;We can also control who can read the data in these tables by setting access rules, so only the right people can see sensitive information.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;It helps you organize data by showing how different parts are connected—like building a tree structure where one item is the parent and others are children. This is called a &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;composition tree&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;, and it helps model &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;complex relationships&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in your data.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&amp;gt;&lt;/SPAN&gt;&lt;SPAN&gt;Annotations at the element level can be used to add semantic information, such as text labels.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Disadvantages&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;Table entities are not supported for &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;draft persistence&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; as of now. The reason is that currently include structures are not supported for table entities, which prevents including a draft admin include required for RAP draft tables.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;Extending table entities is currently not supported.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;gt;Currently, CDS table entities cannot be used in ABAP analytics for building analytical data models, such as cubes and dimensions. They can't be enabled for data-extraction.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Defining table Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Let’s take a look at the delightful syntax that brings a table entity to life!"&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@AccessControl.authorizationCheck:&lt;/SPAN&gt; &lt;SPAN&gt;#NOT_REQUIRED&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@EndUserText.label:&lt;/SPAN&gt; &lt;SPAN&gt;'Table Entity'&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@AbapCatalog.deliveryClass:&lt;/SPAN&gt; &lt;SPAN&gt;#APPLICATION_DATA&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;@ClientHandling.type:&lt;/SPAN&gt; &lt;SPAN&gt;#CLIENT_INDEPENDENT&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;define&lt;/SPAN&gt;&lt;/STRONG&gt; &lt;STRONG&gt;&lt;SPAN&gt;table&lt;/SPAN&gt;&lt;/STRONG&gt; &lt;STRONG&gt;&lt;SPAN&gt;entity&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; Entity_Name&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;{&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;I&gt;&lt;SPAN&gt;[&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;field&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;]&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;[&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;association&lt;/SPAN&gt;&lt;I&gt;&lt;SPAN&gt;]&lt;/SPAN&gt;&lt;/I&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;}&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&lt;span class="lia-unicode-emoji" title=":glowing_star:"&gt;🌟&lt;/span&gt;Let’s light up the concept with a hands-on example!&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can create a Table Entity with key or without key field as well.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Without Key field &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_0-1757323715554.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311008iFC838ACB587EAB8D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_0-1757323715554.png" alt="Gajendra_L60_0-1757323715554.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":glowing_star:"&gt;🌟&lt;/span&gt;In this example, &lt;/SPAN&gt;&lt;SPAN class=""&gt;we’ll&lt;/SPAN&gt;&lt;SPAN class=""&gt; be creating a table entity featuring a key field to uniquely &lt;/SPAN&gt;&lt;SPAN class=""&gt;identify&lt;/SPAN&gt;&lt;SPAN class=""&gt; each record.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_1-1757323850298.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311009iC5C0A94F2D34B2CA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_1-1757323850298.png" alt="Gajendra_L60_1-1757323850298.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;Before we dive into performing CRUD operations in this class, &lt;/SPAN&gt;&lt;SPAN class=""&gt;there's&lt;/SPAN&gt;&lt;SPAN class=""&gt; an important note to &lt;/SPAN&gt;&lt;SPAN class=""&gt;highlight:&lt;/SPAN&gt; &lt;SPAN class=""&gt;we’ll&lt;/SPAN&gt;&lt;SPAN class=""&gt; be using a specific interface &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;IF&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;_OO_ADT_CLASSRUN&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; that &lt;/SPAN&gt;&lt;SPAN class=""&gt;contains&lt;/SPAN&gt;&lt;SPAN class=""&gt; a dedicated method&lt;/SPAN&gt; &lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;main&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;for executing these operations. While &lt;/SPAN&gt;&lt;SPAN class=""&gt;it's&lt;/SPAN&gt;&lt;SPAN class=""&gt; tec&lt;/SPAN&gt;&lt;SPAN class=""&gt;hnically possible to perform the actions without it, using this interface ensures that the output is properly displayed in the console.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":warning:"&gt;⚠️&lt;/span&gt;To ensure smooth execution of the class, &lt;/SPAN&gt;&lt;SPAN class=""&gt;it's&lt;/SPAN&gt;&lt;SPAN class=""&gt; essential to implement the &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;IF_OO_ADT_CLASSRUN&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; interface. Without it, the system will display the &lt;/SPAN&gt;&lt;SPAN class=""&gt;message below&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_2-1757324040287.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311019iAD96EDF6D63EC83B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_2-1757324040287.png" alt="Gajendra_L60_2-1757324040287.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":sparkles:"&gt;✨&lt;/span&gt;Now, &lt;/SPAN&gt;&lt;SPAN class=""&gt;let’s&lt;/SPAN&gt;&lt;SPAN class=""&gt; build a class that handles CRUD operations seamlessly using our CDS table entity&lt;/SPAN&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_3-1757324135456.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311024iC4F293A4460D8105/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_3-1757324135456.png" alt="Gajendra_L60_3-1757324135456.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;Next, &lt;/SPAN&gt;&lt;SPAN class=""&gt;we’ll&lt;/SPAN&gt; &lt;SPAN class=""&gt;proceed&lt;/SPAN&gt;&lt;SPAN class=""&gt; with inserting records into the CDS table entity to &lt;/SPAN&gt;&lt;SPAN class=""&gt;demonstrate&lt;/SPAN&gt;&lt;SPAN class=""&gt; its functionality in action.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_4-1757324209598.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311028iEC932AC619B8EF2A/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_4-1757324209598.png" alt="Gajendra_L60_4-1757324209598.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Output:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;We can see the output in console&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_5-1757324546988.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311033i9D77A3C32361E93E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_5-1757324546988.png" alt="Gajendra_L60_5-1757324546988.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":magnifying_glass_tilted_left:"&gt;🔍&lt;/span&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;Let’s&lt;/SPAN&gt;&lt;SPAN class=""&gt; now perform the read operation and retrieve the records we just inserted into the CDS table entity.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_6-1757324667662.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311034i1A2E37A24C4729AA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_6-1757324667662.png" alt="Gajendra_L60_6-1757324667662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Output:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_7-1757324733953.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311036i3B12B388F4DCAEDE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_7-1757324733953.png" alt="Gajendra_L60_7-1757324733953.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":glowing_star:"&gt;🌟&lt;/span&gt;"Let's proceed with the update operation and retrieve the records to review the changes. Similarly, we can perform modifications as needed!"&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_8-1757324810402.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311037i85E60C43A39FE446/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_8-1757324810402.png" alt="Gajendra_L60_8-1757324810402.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Output: &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_9-1757324887432.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311038i9947D6424C8E6404/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_9-1757324887432.png" alt="Gajendra_L60_9-1757324887432.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":glowing_star:"&gt;🌟&lt;/span&gt;"Let's move on to the final step—performing the delete operation and retrieving the records to confirm the changes!"&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_10-1757324957329.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311040iE69B27DEBB7303B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_10-1757324957329.png" alt="Gajendra_L60_10-1757324957329.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Output:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Gajendra_L60_11-1757325022889.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/311041i7D0B720AF474B436/image-size/large?v=v2&amp;amp;px=999" role="button" title="Gajendra_L60_11-1757325022889.png" alt="Gajendra_L60_11-1757325022889.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Quick Recap&amp;nbsp;🧠&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CDS Table Entities offer a powerful way to define and manage persistent data in ABAP applications. They support CRUD operations, semantic annotations, and complex data modeling through composition trees. While &lt;/SPAN&gt;&lt;SPAN class=""&gt;they’re&lt;/SPAN&gt;&lt;SPAN class=""&gt; not yet compatible with draft persistence or analytics, they &lt;/SPAN&gt;&lt;SPAN class=""&gt;remain&lt;/SPAN&gt;&lt;SPAN class=""&gt; a key building block for structuring business objects in ABAP.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;span class="lia-unicode-emoji" title=":speech_balloon:"&gt;💬&lt;/span&gt;If &lt;/SPAN&gt;&lt;SPAN class=""&gt;you’ve&lt;/SPAN&gt;&lt;SPAN class=""&gt; got thoughts, questions, or experiences with CDS Table Entities, feel free to drop them in the comments—&lt;/SPAN&gt;&lt;SPAN class=""&gt;I’d&lt;/SPAN&gt;&lt;SPAN class=""&gt; love to hear how &lt;/SPAN&gt;&lt;SPAN class=""&gt;you're&lt;/SPAN&gt;&lt;SPAN class=""&gt; using them in your ABAP projects.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cds-table-entity/ba-p/14210702"/>
    <published>2025-09-15T07:40:56.183000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/migration-guide-from-bopf-to-rap-business-objects/ba-p/14212778</id>
    <title>Migration Guide From BOPF to RAP Business Objects</title>
    <updated>2025-09-17T07:37:53.365000+02:00</updated>
    <author>
      <name>SRSATAPATHY</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/150881</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With the evolution of SAP development models, &lt;STRONG&gt;Business Object Processing Framework (BOPF)&lt;/STRONG&gt; is gradually being replaced by the &lt;STRONG&gt;RESTful ABAP Programming Model (RAP)&lt;/STRONG&gt;, which provides a more modern, cloud-ready, and Fiori-optimized approach for building business applications. To help developers transition, SAP provides a guided migration procedure that converts CDS-based BOPF Business Objects into RAP Business Objects.&lt;/P&gt;&lt;P&gt;This migration ensures that existing business logic, determinations, validations, and actions can be reused in the RAP model, reducing redevelopment effort while aligning applications with SAP’s strategic direction. The migration process can be executed in &lt;STRONG&gt;two modes&lt;/STRONG&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Simulation Mode&lt;/STRONG&gt; – to check the feasibility of migration and identify potential errors or warnings.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Migration Mode&lt;/STRONG&gt; – to perform the actual migration of objects.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The following procedure outlines the step-by-step approach for performing this migration, including checking transactional processing (TP) and consumption views, handling transport requests, and reviewing logs to ensure a smooth transition.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Procedure&lt;/STRONG&gt;&lt;/P&gt;&lt;OL&gt;&lt;OL&gt;&lt;LI&gt;In your ABAP project, navigate to your CDS based BOPF BO under&amp;nbsp;&lt;STRONG&gt;BOPF Business Objects&lt;/STRONG&gt;&amp;nbsp;in the&amp;nbsp;&lt;STRONG&gt;Project Explorer&lt;/STRONG&gt;.&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SRSATAPATHY_2-1757486564261.png" style="width: 482px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/312047iA17165232E99C430/image-dimensions/482x220?v=v2" width="482" height="220" role="button" title="SRSATAPATHY_2-1757486564261.png" alt="SRSATAPATHY_2-1757486564261.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Open the context menu and choose&amp;nbsp;&lt;STRONG&gt;RAP Business Object&amp;nbsp;&lt;/STRONG&gt;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;Migrate...&lt;/STRONG&gt;.&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="SRSATAPATHY_3-1757486605390.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/312049iBE6E30120A8FF467/image-size/large?v=v2&amp;amp;px=999" role="button" title="SRSATAPATHY_3-1757486605390.png" alt="SRSATAPATHY_3-1757486605390.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;In the Migration to RAP Business Objects wizard, select any one of the following modes:&lt;BR /&gt; Simulation- checks and tests for errors and warnings before performing any changes. No object is migrated productively.&lt;BR /&gt; Migration- migrates all the related objects.&lt;BR /&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="screenshot.jpg" style="width: 986px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/312062i4EE114AB596FBF7B/image-size/large?v=v2&amp;amp;px=999" role="button" title="screenshot.jpg" alt="screenshot.jpg" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Choose&amp;nbsp;&lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Check the TP views of the business objects affected by the migration.&lt;P&gt;The transactional processing (TP) views display the lists of CDS views containing the transactional processing enabled object model annotations.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Choose&amp;nbsp;&lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Check the consumption views of the business objects affected by migration.&lt;P&gt;The consumption views display the list of CDS views containing the transactional processing delegated annotations.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;For migration, select or create a transport request for the objects.&lt;/LI&gt;&lt;LI&gt;Choose&amp;nbsp;&lt;STRONG&gt;Next&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;To start the simulation, choose&amp;nbsp;&lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;For migration, read the disclaimer in the&amp;nbsp;&lt;STRONG&gt;Disclaimer&lt;/STRONG&gt;&amp;nbsp;page and the linked migration documentation carefully as the migrated business object cannot be reverted.&lt;P&gt;The simulation log is displayed in the BO&amp;nbsp;&lt;STRONG&gt;Migration Log&lt;/STRONG&gt;&amp;nbsp;view. Please read the outcome carefully, as errors or warnings indicate additional manual adjustments after the migration.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;To continue with migration, select&amp;nbsp;&lt;STRONG&gt;Continue Migration&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Choose&amp;nbsp;&lt;STRONG&gt;Finish&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/OL&gt;&lt;/OL&gt;&lt;P&gt;The migration log is displayed in the BO&amp;nbsp;&lt;STRONG&gt;Migration Log&lt;/STRONG&gt;&amp;nbsp;view. Please read the outcome carefully, as errors or warnings indicate additional manual adjustments after the migration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;BR /&gt;Migrating CDS-based BOPF objects to RAP helps modernize applications while reusing existing logic and reducing redevelopment. Always start with simulation to identify issues, carefully review migration logs, and then proceed with the actual migration. This ensures a smooth transition to SAP’s strategic RAP model.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/migration-guide-from-bopf-to-rap-business-objects/ba-p/14212778"/>
    <published>2025-09-17T07:37:53.365000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-table-maintenance-reimagined-choosing-the-right-framework/ba-p/14218970</id>
    <title>SAP S/4HANA Table Maintenance Reimagined: Choosing the Right Framework</title>
    <updated>2025-09-17T12:42:25.292000+02:00</updated>
    <author>
      <name>Saurabh_Gupta1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/53365</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In this blog, we’ll explore a practical use case implemented in&amp;nbsp;&lt;STRONG&gt;S/4HANA 2021 On-Premise&lt;/STRONG&gt;, where we opted for&amp;nbsp;&lt;STRONG&gt;Custom Business Objects (CBO)&lt;/STRONG&gt;&amp;nbsp;to enable table maintenance via Fiori with minimal development effort and also &lt;STRONG&gt;evaluate new frameworks&lt;/STRONG&gt; to achieve this in &lt;STRONG&gt;latest S4/HANA release 2023&lt;/STRONG&gt;.&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-2018320602"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Approach for choosing Custom Business Object&lt;/STRONG&gt; (Decision Matrix)&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;CBO is based on BOPF framework which was widely used by SAP before the era of RAP (RESTful ABAP Programming), while this is still relevant, SAP has now moved to RAP based development and a new concept called custom business configuration, both will be covered later in context of data maintenance.&lt;/FONT&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1950889816"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Why we didn’t choose RAP or Custom business configuration for this use case.&lt;/FONT&gt;&lt;/H5&gt;&lt;OL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration ( Business configuration maintenance object ) – This is available from S4 On-Prem 2022 onwards and the Fiori app for CUBCO is available after 2023 onwards.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;RESTful ABAP Programming – SAP has provided RAP Generator which can generate all the artefacts based on a table right from views, behavior definition , service binding , generation to Fiori app however this is also not available in On-Prem 2021, the other workaround could be to build all these artefacts manually and generate Fiori app which was going to take more development time, hence it was avoided.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Since we cannot go with above 2 options, the only 2 options left are SM30 and Custom Business object, as we want to move towards Fiori first approach, Custom business object was chosen as the Go to approach. Let us deep dive in this with the help of use- case and practical tips&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1625293592"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;What is Custom Business Object –&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;With the Custom Business Objects Fiori app, you can create and manage custom business objects. A custom business object is a hierarchical set of database tables with an API for creation, retrieval, update and deletion of data.&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In The Fiori App ‘Custom Business Object’, a new BO has been defined and maintained as below.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;User can choose what options do they want as part of framework, e,g, Change document, system admin date (last change at, created at etc are added by default).&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;User interface is disabled in this since it is only possible to enable if Embedded gateway is used which is not the case here.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="Saurabh_Gupta1_2-1758034866616.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315300i224DEF863855A856/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_2-1758034866616.png" alt="Saurabh_Gupta1_2-1758034866616.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;You are free to choose what kind of operations, out of CUD, should be supported in the BO out of box.&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_3-1758035070410.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315301i4300283172BACF00/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_3-1758035070410.png" alt="Saurabh_Gupta1_3-1758035070410.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;This is where all the fields are defined for BO.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_4-1758035118964.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315302i70F7DFC5438ED8AD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_4-1758035118964.png" alt="Saurabh_Gupta1_4-1758035118964.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1557862806"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Final Output&lt;/STRONG&gt; –&lt;/FONT&gt;&lt;/H5&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Until this point, no coding has been done except for few changes in CDS Metadata for Fiori UI related cosmetic changes, all the operation are handled by framework out of box.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;An additional button ‘Mass upload’ was added in metadata extension which is using intent-based navigation to navigate to another GUI application for mass upload of the entries.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_0-1758038827500.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315330iD5E9892D58E6AD7F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_0-1758038827500.png" alt="Saurabh_Gupta1_0-1758038827500.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1361349301"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Few Tips&lt;/STRONG&gt; -&lt;/FONT&gt;&lt;/H5&gt;&lt;OL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom Table (Type Application) is auto generated in this case with Key field as UUID.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Data entries maintained in one system cannot be transported to other system and must be maintained in target system, which was also the requirement in our use case.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Once business object is published and moved to production, Deletion is not allowed.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;H4 id="toc-hId-1035753077"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How does the future look like for the same activity (Table Maintenance)-&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;As discussed above, there are 2 other ways to achieve this with minimal development efforts in new S4 HANA releases.&lt;/FONT&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;H4 id="toc-hId-839239572"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;Custom Business Configuration&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;This is &lt;STRONG&gt;recommended &lt;/STRONG&gt;approach going forward where a business configuration maintenance object serves as primary entry point for maintenance.&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;UL&gt;&lt;LI&gt;We have the option to use the Generate ABAP Repository Objects Wizard for Business configuration maintenance object to generate all required development objects based on a customizing table&lt;/LI&gt;&lt;LI&gt;Based on the Business configuration maintenance object, the custom business configurations app renders a&amp;nbsp;Fiori element list report for the entities exposed by the service binding to maintain the configuration entries&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_11-1758035471221.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315310i8644DD844BCAACC2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Saurabh_Gupta1_11-1758035471221.png" alt="Saurabh_Gupta1_11-1758035471221.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_12-1758035554875.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315311iD7963B6C1BF5D5BD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Saurabh_Gupta1_12-1758035554875.png" alt="Saurabh_Gupta1_12-1758035554875.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Image courtesy - SAP&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In short, Custom business configuration (Fiori app) is an umbrella under which all maintenance objects will be listed and serves as one stop shop while maintenance objects are the actual ABAP artefact which contains all the definition related to Object maintenance.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_13-1758035620891.png" style="width: 605px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315321i9C4BDEE4DBF5C59B/image-dimensions/605x198?v=v2" width="605" height="198" role="button" title="Saurabh_Gupta1_13-1758035620891.png" alt="Saurabh_Gupta1_13-1758035620891.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.20 PM.png" style="width: 607px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315314iA3E7AFAAA2468BBB/image-dimensions/607x199?v=v2" width="607" height="199" role="button" title="Screenshot 2025-09-16 at 8.44.20 PM.png" alt="Screenshot 2025-09-16 at 8.44.20 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Different options like SM30 are available by default such Add copy action out of box.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Add Data Consistency Check for fields with fixed domain values or foreign key screen check.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.37 PM.png" style="width: 633px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315317i5B28948485F2436C/image-dimensions/633x333?v=v2" width="633" height="333" role="button" title="Screenshot 2025-09-16 at 8.44.37 PM.png" alt="Screenshot 2025-09-16 at 8.44.37 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;All of the below objects are created by default including CDS view, service definition, service binding, business object maintenance , transport definition, implementation classes etc.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.44.59 PM.png" style="width: 638px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315318i40537C78E8356547/image-dimensions/638x478?v=v2" width="638" height="478" role="button" title="Screenshot 2025-09-16 at 8.44.59 PM.png" alt="Screenshot 2025-09-16 at 8.44.59 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.45.18 PM.png" style="width: 635px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315320i990558C08B796ACB/image-dimensions/635x487?v=v2" width="635" height="487" role="button" title="Screenshot 2025-09-16 at 8.45.18 PM.png" alt="Screenshot 2025-09-16 at 8.45.18 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-771808786"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Final Output -&amp;nbsp;&lt;/FONT&gt;&lt;/H5&gt;&lt;P&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Until this point, no coding has been done; all these features are provided out of the box by the framework.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="trebuchet ms,geneva"&gt;The custom business configuration app shows all the maintenance objects for which the user is authorized. &lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_0-1758178463971.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316288i7C80DFB3C71A9925/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_0-1758178463971.png" alt="Saurabh_Gupta1_0-1758178463971.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the relevant maintenance object is selected, the Edit button would be enabled to allow creation, deletion, updation, etc. activities.&lt;/P&gt;&lt;H5 id="toc-hId-575295281"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Saurabh_Gupta1_1-1758178556614.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316290i00ACBDF62350D6C3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Saurabh_Gupta1_1-1758178556614.png" alt="Saurabh_Gupta1_1-1758178556614.png" /&gt;&lt;/span&gt;&lt;FONT face="trebuchet ms,geneva"&gt;Few Practical Tips&lt;/FONT&gt; –&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;All tables must have a client key field and delivery class C&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Have a timestamp field with data element&amp;nbsp;ABP_LASTCHANGE_TSTMPL&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;To enable the "No Transport" option in the ADT wizard, implement SAP Note&amp;nbsp; &lt;A href="https://me.sap.com/notes/3579012" target="_blank" rel="noopener noreferrer"&gt;https://me.sap.com/notes/3579012&lt;/A&gt;.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;With few tweaks, it is possible to maintain data directly in production system instead of transporting. More details in this &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-create-a-rap-bo-to-change-the-content-of-a-customizing-table-in-the/ba-p/13723087" target="_blank"&gt;blog&lt;/A&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;As of version SAP S/4HANA release 2022, customers can use the generator for Business Configuration objects. The Custom Business Configurations SAP Fiori app is not yet available; app has been made available in release 2023.&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-249699057"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;2. RAP Generator&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;P class="lia-indent-padding-left-30px" style="padding-left : 30px;"&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Second approach to achieve this is using same generation wizard from context menu of table.&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-09-16 at 8.45.34 PM.png" style="width: 623px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/315319i590CF530AE26F47A/image-dimensions/623x592?v=v2" width="623" height="592" role="button" title="Screenshot 2025-09-16 at 8.45.34 PM.png" alt="Screenshot 2025-09-16 at 8.45.34 PM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId--737934550"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How is Custom business configuration different than plain RAP generator?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is a framework which is also built on RAP artefacts, but it has other framework related functionalities (e.g change log for auditing) in comparison to plain RAP application.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Fiori for CBC can be accessed through generic custom business configuration app serving as single source of entry whereas RAP application should be exposed as standalone app.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration app is built only around customizing tables whereas RAP generator can be built around any customizing and application tables both.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;CBC provides in built functionality to capture entries into transport request, but RAP generator requires explicit changes to incorporate transport feature.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H5 id="toc-hId--934448055"&gt;&lt;FONT face="trebuchet ms,geneva"&gt;&lt;STRONG&gt;How is Custom business configuration different than custom business object?&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H5&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is built on RAP framework (SAP recommended) whereas custom business objects is built on BOPF framework.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration has transport feature for data entries whereas custom business object does not any way to transport entries from one system to other system.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration is bottom-up approach where custom tables are defined first, and rest of the artifacts are generated around that whereas custom business object works on top-down approach where business object is created first then custom table is generated around BO.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration supports only OData V4 where CBO supports OData V2.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Custom business configuration app is built only around customizing tables whereas custom business object is built around application tables.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Once CBO has moved to production, it cannot be deleted.&lt;/FONT&gt;&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;In both the case, Metadata can be enhanced for any Fiori related UI changes, also additional validation, actions are supported in both.&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT face="tahoma,arial,helvetica,sans-serif"&gt;Additional reading-&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://help.sap.com/docs/ABAP_PLATFORM_NEW/b5670aaaa2364a29935f40b16499972d/047e01c3bcdd4303a60b61364bd5b31d.html?locale=en-US&amp;amp;version=202310.002" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/ABAP_PLATFORM_NEW/b5670aaaa2364a29935f40b16499972d/047e01c3bcdd4303a60b61364bd5b31d.html?locale=en-US&amp;amp;version=202310.002&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/custom-business-configuration/ba-p/13647767" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-members/custom-business-configuration/ba-p/13647767&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-s-4hana-table-maintenance-reimagined-choosing-the-right-framework/ba-p/14218970"/>
    <published>2025-09-17T12:42:25.292000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714</id>
    <title>ABAP Cloud Number Ranges: The ABAP RAP COMMIT WORK Conflict and the Simple Fix</title>
    <updated>2025-09-23T12:45:39.845000+02:00</updated>
    <author>
      <name>suzanne_alivand</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/848404</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Many business applications require unique numbers, for example, to complete the keys of data records. In order to get numbers from an interval, a number range object must be defined which can contain different properties. Standard Number ranges are typically maintained via customizing in each system (Test and Production). However, the process for&amp;nbsp;&lt;STRONG&gt;custom&lt;/STRONG&gt;&amp;nbsp;Number Range Objects in the S/4HANA Cloud Public Edition is different.&lt;/P&gt;&lt;P&gt;These custom objects must be created in the development environment, configured in the customizing client, and then transported through the landscape. This blog outlines that end-to-end process, including a frustrating short dump I encountered and the surprisingly simple configuration change that solved it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 1: The Developer's Task - Defining the Blueprint in ADT&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Unlike the on-premises world, the process for a custom number range begins in the developer's toolkit: ABAP Development Tools (ADT). Here, you create the&amp;nbsp;&lt;EM&gt;definition&lt;/EM&gt;&amp;nbsp;or the&amp;nbsp;&lt;EM&gt;blueprint&lt;/EM&gt;&amp;nbsp;of your number range object.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In your ABAP package, right-click and choose&amp;nbsp;New&amp;nbsp;-&amp;gt;&amp;nbsp;Other ABAP Repository Object.&lt;/LI&gt;&lt;LI&gt;Search for&amp;nbsp;&lt;STRONG&gt;"Number Range Object"&lt;/STRONG&gt;, give it a name and a description.&lt;/LI&gt;&lt;LI&gt;Assign it to a&amp;nbsp;&lt;STRONG&gt;Workbench Transport&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;In the object editor, the most important property is the&amp;nbsp;&lt;STRONG&gt;Number Length Domain&lt;/STRONG&gt;. It’s a best practice to create a custom domain for this to define the length and type. For my&amp;nbsp;ZPO_RUN_ID, I used a domain of type&amp;nbsp;NUMC(10).&lt;/LI&gt;&lt;LI&gt;Save and&amp;nbsp;&lt;STRONG&gt;activate&lt;/STRONG&gt;&amp;nbsp;the object.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_7-1758216453231.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316647iBAD6D68F8E9EC235/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_7-1758216453231.png" alt="suzanne_alivand_7-1758216453231.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The system now knows what a&amp;nbsp;ZPO_RUN_ID&amp;nbsp;is, but it has no actual number intervals defined.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 2: The Customizer's Task - Setting Intervals in Fiori&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This is where we move to the Fiori Launchpad, specifically in the&amp;nbsp;&lt;STRONG&gt;Customizing Client&lt;/STRONG&gt;.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Log in to your Customizing client and open the&amp;nbsp;&lt;STRONG&gt;"Manage Number Range Intervals"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;LI&gt;Search for your newly created object,&amp;nbsp;ZPO_RUN_ID.&lt;/LI&gt;&lt;LI&gt;Navigate to the "Number Ranges" tab and click&amp;nbsp;&lt;STRONG&gt;"Create"&lt;/STRONG&gt;. Here you'll define your interval, for example,&amp;nbsp;01&amp;nbsp;with its lower and upper limits.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_8-1758216453232.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316646i0A9308E96CB6625D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="suzanne_alivand_8-1758216453232.png" alt="suzanne_alivand_8-1758216453232.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_13-1758216499507.png" style="width: 663px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316652i70CFA2444947FDD8/image-dimensions/663x226?v=v2" width="663" height="226" role="button" title="suzanne_alivand_13-1758216499507.png" alt="suzanne_alivand_13-1758216499507.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 3: The Transport &lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The system needs a&amp;nbsp;&lt;STRONG&gt;Customizing Transport&lt;/STRONG&gt;&amp;nbsp;to record this change.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In a new tab, open the&amp;nbsp;&lt;STRONG&gt;"Export Customizing Transports"&lt;/STRONG&gt;&amp;nbsp;Fiori app.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_10-1758216453236.png" style="width: 237px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316649iD7EFC91ECED66A4B/image-dimensions/237x191?v=v2" width="237" height="191" role="button" title="suzanne_alivand_10-1758216453236.png" alt="suzanne_alivand_10-1758216453236.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Create a new&amp;nbsp;&lt;STRONG&gt;"Customizing Request"&lt;/STRONG&gt;&amp;nbsp;and give it a description. It's a good practice to set this as your "Default" request using the "Change Category" button.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_11-1758216453238.png" style="width: 734px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316650i3B8DE8A478A85F6C/image-dimensions/734x90?v=v2" width="734" height="90" role="button" title="suzanne_alivand_11-1758216453238.png" alt="suzanne_alivand_11-1758216453238.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Go back to the Number Range app and save your interval again. This time, it will find your open request and save the change successfully.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="suzanne_alivand_12-1758216453239.png" style="width: 823px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/316651i263BA5C692E50873/image-dimensions/823x99?v=v2" width="823" height="99" role="button" title="suzanne_alivand_12-1758216453239.png" alt="suzanne_alivand_12-1758216453239.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now you have two transports: the Workbench TR from ADT with the object definition, and the Customizing TR from Fiori with the interval data. The Workbench TR should be a prerequisite for the Customizing TR when you import them.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Part 4: The Payoff - Using the Number Range in RAP&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;With everything configured, it was time to use it in my ABAP RAP application. The correct, released API is the class&amp;nbsp;CL_NUMBERRANGE_RUNTIME.&lt;/P&gt;&lt;P&gt;I had two main options for assigning an ID based on the business requirement:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;An&amp;nbsp;early numbering&amp;nbsp;determination, which runs before the save phase.&lt;/LI&gt;&lt;LI&gt;A&amp;nbsp;determination on save, which runs during the final save transaction.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I initially chose early numbering&amp;nbsp;determination. My&amp;nbsp;earlynumbering_create method was clean and used the correct class.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD earlynumbering_create.

    DATA: latest_num   TYPE cl_numberrange_runtime=&amp;gt;nr_number.

    DATA(All_entities) = entities.
    DELETE All_entities WHERE  RunId IS NOT INITIAL.

    TRY.
        cl_numberrange_runtime=&amp;gt;number_get(
          EXPORTING
            nr_range_nr = '01'
            object      = 'ZPO_RUN_ID'
            quantity = CONV #( lines( all_entities ) )
          IMPORTING
            number      = latest_num
            returncode = DATA(code)
            returned_quantity = DATA(return_qty) ).

      CATCH cx_nr_object_not_found INTO DATA(lx_obj_not_found).
      CATCH cx_number_ranges INTO DATA(lx_ranges_error).

        LOOP AT All_entities INTO DATA(entity_line).

          APPEND VALUE #( %cid = entity_line-%cid
                          %key  = entity_line-%key ) TO failed-run.
          APPEND VALUE #( %cid = entity_line-%cid
                          %key = entity_line-%key
                          %msg = lx_ranges_error ) TO reported-run.
        ENDLOOP.
        EXIT.
    ENDTRY.

    DATA(curr_num) = latest_num - return_qty.

    LOOP AT All_entities INTO entity_line.
      curr_num = curr_num + 1 .
      APPEND VALUE #( %cid = entity_line-%cid
      RunUuid = curr_num ) TO mapped-run.

    ENDLOOP.
  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I ran the app, created an entry, clicked "Save," and was met with a short dump:&amp;nbsp;&lt;STRONG&gt;ABAP Runtime error 'BEHAVIOR_ILLEGAL_STATEMENT'&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;The "Aha!" Moment: The&amp;nbsp;COMMIT WORK&amp;nbsp;Conflict and the Simple Fix&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;My code was correct. The class was correct. The configuration was correct. So, what was wrong?&lt;/P&gt;&lt;P&gt;The problem was my number range was&amp;nbsp;&lt;STRONG&gt;not buffered&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;After a long debugging session, I discovered that when&amp;nbsp;cl_numberrange_runtime&amp;nbsp;is called for a non-buffered number range, it&amp;nbsp;&lt;STRONG&gt;must&lt;/STRONG&gt;&amp;nbsp;perform an immediate database&amp;nbsp;UPDATE&amp;nbsp;and its own&amp;nbsp;COMMIT WORK&amp;nbsp;to guarantee the number is reserved. The RAP framework, in its strictly controlled Save phase, saw this independent&amp;nbsp;COMMIT&amp;nbsp;as a violation of its own transaction and triggered the dump to prevent data inconsistency.&lt;/P&gt;&lt;P&gt;The solution wasn't in my ABAP code at all. It was in the configuration.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Enabling buffering solves this transactional conflict.&lt;/STRONG&gt;&amp;nbsp;Here’s why:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;With buffering, the class gets the next number from the application server's&amp;nbsp;&lt;STRONG&gt;memory&lt;/STRONG&gt;, not directly from the database.&lt;/LI&gt;&lt;LI&gt;Getting a number from memory requires&amp;nbsp;&lt;STRONG&gt;no immediate database update&lt;/STRONG&gt;&amp;nbsp;and, crucially,&amp;nbsp;&lt;STRONG&gt;no conflicting&amp;nbsp;COMMIT WORK&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I edited the&amp;nbsp;&lt;STRONG&gt;Properties&lt;/STRONG&gt;&amp;nbsp;of my&amp;nbsp;ZPO_RUN_ID&amp;nbsp;object and changed the&amp;nbsp;&lt;STRONG&gt;Buffering&lt;/STRONG&gt;&amp;nbsp;type to&amp;nbsp;&lt;STRONG&gt;"Main Memory Buffering"&lt;/STRONG&gt;&amp;nbsp;with a size of 10.&lt;/P&gt;&lt;P&gt;With that one configuration change, everything worked perfectly. My&amp;nbsp;determination on save&amp;nbsp;now executes without any issues.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Final Thoughts&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In the ABAP Cloud, writing correct code is only half the battle. We also have to deeply understand and respect the strict transactional model of the RAP framework. A seemingly simple configuration choice, like buffering, can be the key to resolving what looks like a complex runtime error.&lt;/P&gt;&lt;P&gt;If you ever face an unexpected&amp;nbsp;BEHAVIOR_ILLEGAL_STATEMENT&amp;nbsp;dump, consider what your code might be doing that could be trying to interfere with the framework's unit of work.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/abap-cloud-number-ranges-the-abap-rap-commit-work-conflict-and-the-simple/ba-p/14221714"/>
    <published>2025-09-23T12:45:39.845000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/from-backlogs-to-breakthroughs-what-abap-ai-means-for-project-delivery/ba-p/14226643</id>
    <title>From Backlogs to Breakthroughs: What ABAP AI Means for Project Delivery</title>
    <updated>2025-09-24T11:12:30.036000+02:00</updated>
    <author>
      <name>SHRUTHISADAGOPANPITCHUMANI</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1699865</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Hello everyone ! I am &lt;STRONG&gt;Shruthi&lt;/STRONG&gt;, a Project Manager of BTP ABAP AI, and I am just about to celebrate my &lt;STRONG&gt;first anniversary with my team&lt;/STRONG&gt;. Looking back at this past year, I feel so grateful for the people I work with, the projects we have delivered, and the way we have grown together.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;One thing I have noticed time and again is how small changes—like a new validation rule, a UI tweak, or a simple workflow adjustment—can have a huge impact for business users. But these “small” requests often take longer than expected because they get caught in processes and development backlogs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That is why the recent blogs on &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;ABAP AI&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Extensibility Assistant&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; really resonate with me. They show how SAP is already delivering tools that make development faster and extensibility safer.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Key Highlights You Should Explore&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here are some excellent resources that set the stage for this journey:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;@Simona Marincei’s Blog: &lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-ai-revolution-accelerates-the-abap-developer-who-built-enterprise-apps/ba-p/14216073" target="_blank"&gt;&lt;SPAN&gt;ABAP AI Revolution: Accelerates the ABAP Developer Who Built Enterprise Apps&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/44793"&gt;@Georg&lt;/a&gt;Wilhelm’s Blog :&amp;nbsp; &lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/extensibility-assistant-for-key-users-the-extensibility-expert-right-next/ba-p/14216097" target="_blank"&gt;&lt;SPAN&gt;Extensibility Assistant for Key Users: The Extensibility Expert Right Next to You&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/4870"&gt;@Alexander&lt;/a&gt;Rother’s Blog:&amp;nbsp; &lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/abap-ai-chapter-2/ba-p/14210568" target="_blank"&gt;&lt;SPAN&gt;ABAP AI Chapter 2&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.youtube.com/watch?v=OwtRsMRLPYU&amp;amp;list=PL6RpkC85SLQAt9lvPw0gF4E3nwbJD0EUe" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;Joule for Developers – YouTube Playlist&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Joule for Developers, ABAP AI Capabilities – Free and Ready to Use&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;One of the most exciting developments for us right now is &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Joule for Developers, ABAP AI Capabilities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. It is available &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;for free usage&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; today and brings AI-powered assistance directly into the hands of developers.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;With Joule for Developers, you can:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Generate and refactor ABAP code with AI guidance.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Explore sample data and learning materials.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Speed up everyday development tasks and reduce repetitive work.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Access tutorials and demos from the &lt;/SPAN&gt;&lt;A href="https://www.youtube.com/watch?v=OwtRsMRLPYU&amp;amp;list=PL6RpkC85SLQAt9lvPw0gF4E3nwbJD0EUe" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;YouTube playlist.&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;For teams like mine, this is a real enabler—it means we are not just talking about AI as the future, we are &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;using it today&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; to accelerate delivery and learn new ways of working.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;What We Are Experiencing&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In my role, I see these tools helping in very practical ways:&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Business users get changes rolled out more quickly.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Developers focus on high-value, complex scenarios.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Projects move forward with smoother coordination.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The result is a stronger partnership between IT and the business, and a better experience for everyone involved.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Final Thought&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;ABAP AI today is already making a difference—it accelerates development, empowers key users, and ensures safe extensibility with built-in governance. And with Joule for Developers ABAP AI Capabilities now free to use, every developer has the chance to explore AI-powered assistance directly.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;For me and my team, this means more delivered outcomes, happier stakeholders, and projects that stay on track.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;As I celebrate one year with this fantastic team, I look forward to what the next chapter will bring. The journey of ABAP AI is still unfolding, and I am excited to see where it takes us.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;I would love to hear your thoughts: how are you using ABAP AI in your projects, and what impact has it had so far?&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/from-backlogs-to-breakthroughs-what-abap-ai-means-for-project-delivery/ba-p/14226643"/>
    <published>2025-09-24T11:12:30.036000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441</id>
    <title>Foreign entity in RAP</title>
    <updated>2025-09-29T09:05:47.440000+02:00</updated>
    <author>
      <name>Shyam4U</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1512208</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Description:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;A RAP BO entity which is not part of the BO composition tree for which it is defined. Defining a foreign entity in the behavior definition enables cross-BO message mapping between the two BOs.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Key Concepts:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;RAP foreign entity is a component of the BC-ESI-RAP RESTful ABAP Programming Model. It is a representation of an external entity, such as a web service, that can be used in an ABAP program. The foreign entity is defined in the ABAP program and can be used to access data from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Tips &amp;amp; Tricks:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;When defining a RAP foreign entity, it is important to ensure that all authentication information is correct. This will ensure that requests are sent securely and that responses are received correctly. Additionally, it is important to ensure that the URL of the external source is correct, as this will ensure that requests are sent to the correct location.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;How to use it:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;To use a RAP foreign entity, first define the entity in the ABAP program. This includes specifying the URL of the external source, as well as any authentication information that may be required. Once the entity is defined, it can be used to access data from the external source. This can be done using the RAP API, which provides methods for making requests and receiving responses from the external source.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758779361113.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319667i1BD7D26A3B6E12D5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758779361113.png" alt="Shyam4U_0-1758779361113.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Example : &lt;/STRONG&gt;&lt;/FONT&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;"In our system, we have two distinct business entities: &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Inventory&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;Sales Order&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;. Although they are separate, they are fundamentally linked. We manage this connection by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;product ID&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; as the key identifier. This ensures that every time a sales order is created, the system automatically checks and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;deducts the correct quantity from the available stock&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; in the inventory. This process maintains accurate, real-time stock levels, which is critical for our operations."&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'inverty table' 
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_t_inventory { 

key product_id : abap.char(10) not null; 
stock_level : abap.int4; 
product_name : abap.char(40); 
create_at : timestampl; 
last_chdate : timestampl; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INTERFACE VIEW INVERNTORY' 
@Metadata.ignorePropagatedAnnotations: true 
define root view entity ZSCN_i_INVENTORY as select from zscn_t_inventory 
{ 
key product_id as ProductId, 
stock_level as StockLevel, 
product_name as ProductName, 
create_at as CreateAt, 
last_chdate as LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'INVENTORY CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: true 
@VDM.viewType: #TRANSACTIONAL 
define root view entity ZSCN_C_INVENTORY 
provider contract transactional_query 
as projection on ZSCN_i_INVENTORY 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Product Id' }] 
@UI.identification:[{ position: 10 , label: 'Product Id' }] 
key ProductId, 
@UI.lineItem: [{ position: 20 , label: 'Stock Level' }] 
@UI.identification:[{ position: 20 , label: 'Stock Level' }] 
StockLevel, 
@UI.lineItem: [{ position: 30 , label: 'Product Name' }] 
@UI.identification:[{ position: 30 , label: 'Product Name' }] 
ProductName, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChdate 
} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_inventory unique; 
strict ( 2 ); 
with draft; 

define behavior for ZSCN_i_INVENTORY //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_t_inventory 
lock master 
total etag LastChdate 
draft table zscn_t_invent_d 
authorization master ( instance ) 
late numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 
create ( authorization : global ); 
update; 
delete; 
field ( readonly ) ProductId; 

validation vali_Stock on save { create; update; } 

draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_t_inventory { 
CreateAt = create_at ; 
LastChdate = last_chdate ; 
ProductId = product_id ; 
ProductName = product_name ; 
StockLevel = stock_level; 
} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758779760747.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319670i23615557B62C460B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758779760747.png" alt="Shyam4U_1-1758779760747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In our system, a key validation for inventory is to prevent the stock level from ever going into a negative value.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758780972739.png" style="width: 655px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319675i7F29A75ECBAD4A91/image-dimensions/655x264?v=v2" width="655" height="264" role="button" title="Shyam4U_0-1758780972739.png" alt="Shyam4U_0-1758780972739.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD vali_Stock.
    
LOOP AT keys INTO DATA(lv_key).

      READ ENTITY IN LOCAL MODE ZSCN_i_INVENTORY
       ALL FIELDS WITH VALUE #( (  %key = lv_key-%key ) )
      RESULT DATA(lt_result).

      CHECK lt_result IS NOT INITIAL.

      LOOP AT lt_result INTO DATA(lv_result).
        IF lv_result-StockLevel &amp;lt; 0 .
          APPEND VALUE #(  %tky = lv_result-%tky  ) TO failed-zscn_i_inventory.

          APPEND VALUE #(  %tky = lv_result-%tky
                 %msg = new_message_with_text( severity =
                 if_abap_behv_message=&amp;gt;severity-error
                 text = 'Stock value should not be negative value ' &amp;amp;&amp;amp; ' ' &amp;amp;&amp;amp; lv_result-StockLevel )
                 %element-stocklevel = if_abap_behv=&amp;gt;mk-on  ) TO reported-zscn_i_inventory .

        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758781361679.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319683i21B33569A1767987/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758781361679.png" alt="Shyam4U_2-1758781361679.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;Sales order Entity&amp;nbsp;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial black,avant garde"&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@EndUserText.label : 'SALES ORDER' 
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY 
@AbapCatalog.tableCategory : #TRANSPARENT 
@AbapCatalog.deliveryClass : #A 
@AbapCatalog.dataMaintenance : #ALLOWED 
define table zscn_dt_salesord { 

key sales_order_id : abap.numc(10) not null; 
product_id : abap.char(10) not null; 
quantity : abap.numc(5); 
customer_id : abap.char(10); 
order_date : abap.dats; 
@Semantics.amount.currencyCode : 'zscn_dt_salesord.currency' 
total_amount : abap.curr(13,2); 
currency : abap.cuky; 
create_at : timestamp; 
last_changed : timestamp; 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED 
@EndUserText.label: 'SALESORD CONSUMPATION VIEW' 
@Metadata.ignorePropagatedAnnotations: false 
define root view entity ZSCN_C_SALESORD 
provider contract transactional_query 
as projection on ZSCN_I_SALESORD 
{ 
@UI.facet: [{ type: #IDENTIFICATION_REFERENCE }] 

@UI.lineItem: [{ position: 10 , label: 'Sales Order Id' }] 
@UI.identification:[{ position: 10 , label: 'Sales Order Id' }] 
key SalesOrderId, 
@UI.lineItem: [{ position: 20 , label: 'Product Id' }] 
@UI.identification:[{ position: 20 , label: 'Product Id' }] 
@Consumption.valueHelpDefinition: [{ 
entity: { name: 'ZSCN_C_INVENTORY', element: 'ProductId' } }] 
ProductId, 
@UI.lineItem: [{ position: 30 , label: 'Quantity' }] 
@UI.identification:[{ position: 30 , label: 'Quantity' }] 
Quantity, 
@UI.lineItem: [{ position: 40 , label: 'Customer Id' }] 
@UI.identification:[{ position: 40 , label: 'Customer Id' }] 
CustomerId, 
@UI.lineItem: [{ position: 50 , label: 'Order Date' }] 
@UI.identification:[{ position: 50 , label: 'Order Date' }] 
OrderDate, 
@UI.lineItem: [{ position: 60 , label: 'Total Amount' }] 
@UI.identification:[{ position: 60 , label: 'Total Amount' }] 
TotalAmount, 
Currency, 
@Semantics.systemDateTime.createdAt: true 
CreateAt, 
@Semantics.systemDateTime.lastChangedAt: true 
LastChanged 

} &lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;managed implementation in class zbp_scn_i_salesord unique; 
strict ( 2 ); 
with draft; 

//foreign entity Zscn_i_inventory alias _inventory ; 
define behavior for ZSCN_I_SALESORD //alias &amp;lt;alias_name&amp;gt; 
persistent table zscn_dt_salesord 
lock master 
total etag LastChanged 
draft table zscn_dt_salord_d 
authorization master ( instance ) 
early numbering 
//etag master &amp;lt;field_name&amp;gt; 
{ 

create ( authorization : global ); 
update; 
delete; 
field ( readonly ) SalesOrderId; 

validation valid_ProductId on save { create; update; } 
determination stock_upadte on save { field Quantity; } 
 
draft action Activate optimized ; 
draft action Discard ; 
draft action Edit ; 
draft action Resume ; 
draft determine action Prepare ; 

mapping for zscn_dt_salesord 
{ 
CreateAt = create_at; 
Currency = currency; 
CustomerId = customer_id; 
LastChanged = last_changed; 
OrderDate = order_date;
ProductId = product_id; 
SalesOrderId = sales_order_id; 
Quantity = quantity; 
TotalAmount = total_amount; 

} 
} &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;without the foreign entity &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt; &lt;SPAN class=""&gt;syntax ,&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp; behavior definition of the ZSCN_I_SALESORD it only holding the structure of ZSCN_I_SALESORD it &lt;/SPAN&gt;&lt;SPAN class=""&gt;doesn't&lt;/SPAN&gt;&lt;SPAN class=""&gt; hold the structure &lt;/SPAN&gt;&lt;SPAN class=""&gt;Zscn_i_inventory&lt;/SPAN&gt;&lt;SPAN class=""&gt; .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758782312689.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319693i04E76CF2ACE2702F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758782312689.png" alt="Shyam4U_3-1758782312689.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758782320070.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319694iBE9FAD22C19ED3EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_4-1758782320070.png" alt="Shyam4U_4-1758782320070.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Due to the separate entity definitions, errors from an inventory stock update cannot be directly propagated to the sales order user interface. In Failed and &lt;/SPAN&gt;&lt;SPAN class=""&gt;Reported structure will be miss &lt;/SPAN&gt;&lt;SPAN class=""&gt;match. &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;T&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;o propagate &lt;/SPAN&gt;&lt;SPAN class=""&gt;this&lt;/SPAN&gt;&lt;SPAN class=""&gt; we use of foreign entity syntax&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;uncomment the&amp;nbsp;//foreign entity Zscn_i_inventory alias _inventory ;&amp;nbsp; in Behavior definition of&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Zscn_i_salesord .&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758782990181.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319700i976D6F6DBC5BC8E1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758782990181.png" alt="Shyam4U_0-1758782990181.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;After adding the Foreign entity Zscn_i_inventory &amp;nbsp;alies _inventory ; &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can see the change in the entity Zscn_i_salesord structure .&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758783042974.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319701i23555758241BE272/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758783042974.png" alt="Shyam4U_1-1758783042974.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758783077463.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319702i7ED69A661F19E1EF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_2-1758783077463.png" alt="Shyam4U_2-1758783077463.png" /&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_3-1758783109372.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319703iBBF8EBD3793DA2F3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_3-1758783109372.png" alt="Shyam4U_3-1758783109372.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_4-1758783178499.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319704iD42E5E0BC1A228ED/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_4-1758783178499.png" alt="Shyam4U_4-1758783178499.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Using the Determination we are update the stock of&amp;nbsp;the inventory table based on the Product id in Behavior definition implementation class .&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A critical validation has been implemented: when a sales order is created, if the requested quantity is greater than the available stock level, an error is raised in the inventory business logic. This error is then propagated to the sales order entity, making it visible on the sales order screen.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD stock_upadte. 

LOOP AT keys INTO DATA(lv_key). 

READ ENTITY IN LOCAL MODE zscn_i_salesord ALL FIELDS WITH 
VALUE #( ( %key = lv_key-%key ) ) 
RESULT DATA(lt_result). 

CHECK lt_result IS NOT INITIAL. 

LOOP AT lt_result INTO DATA(lv_result). 
 
READ ENTITY ZSCN_i_INVENTORY 
ALL FIELDS WITH VALUE #( ( ProductId = lv_result-ProductId ) ) 
RESULT DATA(lt_result_inventory). 

LOOP AT lt_result_inventory INTO DATA(lv_inventory). 

 DATA(lv_stock) = CONV i( lv_inventory-StockLevel - lv_result-Quantity ). 

MODIFY ENTITY ZSCN_i_INVENTORY UPDATE FIELDS ( StockLevel ) 
WITH VALUE #( ( %key-ProductId = lv_inventory-%key-ProductId 
StockLevel = lv_stock ) ) REPORTED DATA(ltreported). 

if ltreported is not INITIAL. 
 
DATA: lt_dummy LIKE reported-_inventory. 
lt_dummy = CORRESPONDING #( ltreported-zscn_i_inventory ). 

APPEND LINES OF lt_dummy TO reported-_inventory.  

endif. 
      ENDLOOP. 
   ENDLOOP. 
ENDLOOP. 

ENDMETHOD. &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In &lt;/SPAN&gt;&lt;SPAN class=""&gt;above&lt;/SPAN&gt;&lt;SPAN class=""&gt; code &lt;/SPAN&gt;&lt;SPAN class=""&gt;I&lt;/SPAN&gt;&lt;SPAN class=""&gt; am using &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;CORRESPONDING #( &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;ltreported&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;-&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;zscn_i_inventory&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt; ). &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;because &lt;/SPAN&gt;&lt;SPAN class=""&gt;of while&lt;/SPAN&gt; &lt;SPAN class=""&gt;using&lt;/SPAN&gt;&lt;SPAN class=""&gt; the EML syntax the report will be early but inside the Behavior &lt;/SPAN&gt;&lt;SPAN class=""&gt;definition it&lt;/SPAN&gt;&lt;SPAN class=""&gt; will be late &lt;/SPAN&gt;&lt;SPAN class=""&gt;structure.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_5-1758783700742.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319709i8DE267E217225D43/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_5-1758783700742.png" alt="Shyam4U_5-1758783700742.png" /&gt;&lt;/span&gt;&amp;nbsp; &lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_6-1758783731326.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319710i291685CEEACF10B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Shyam4U_6-1758783731326.png" alt="Shyam4U_6-1758783731326.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In inventory entity this are the possible product we have in that &lt;/SPAN&gt;&lt;SPAN class=""&gt;i&lt;/SPAN&gt;&lt;SPAN class=""&gt; will &lt;/SPAN&gt;&lt;SPAN class=""&gt;chose&lt;/SPAN&gt;&lt;SPAN class=""&gt; Titan watch&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_0-1758784285024.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319716i82C35938198C8543/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_0-1758784285024.png" alt="Shyam4U_0-1758784285024.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;When creating a sales order for a Titan watch, if the requested quantity of 50 exceeds the available stock of 40, the system will prevent the transaction and display an error.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_1-1758784335793.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319717i0D9C69770EC165AB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_1-1758784335793.png" alt="Shyam4U_1-1758784335793.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;The error which is from the inventory entity by using the foreign entity concept we are propagating the error message of &lt;/SPAN&gt;&lt;SPAN class=""&gt;inventory in&lt;/SPAN&gt;&lt;SPAN class=""&gt; sales order entity.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Shyam4U_2-1758784368449.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/319718i9251943C19615F88/image-size/large?v=v2&amp;amp;px=999" role="button" title="Shyam4U_2-1758784368449.png" alt="Shyam4U_2-1758784368449.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Related Information:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;For more information on using RAP foreign entities, please refer to the SAP Help documentation on BC-ESI-RAP RESTful ABAP Programming Model. Additionally, there are many tutorials available online which provide step-by-step instructions on how to use RAP foreign entities in an ABAP program.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Thanks for &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.erplingo.com/sap-glossary/en/bc-esi-rap/rap-foreign-entity" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;What is RAP foreign entity in SAP BC-ESI-RAP? Definition &amp;amp; Tips&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm" target="_blank" rel="noopener noreferrer"&gt;&lt;SPAN&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenbdl_foreign.htm&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/foreign-entity-in-rap/ba-p/14227441"/>
    <published>2025-09-29T09:05:47.440000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-joule-for-developers-expands-to-private-cloud-accelerating-abap/ba-p/14237958</id>
    <title>SAP Joule for Developers Expands to Private Cloud:  Accelerating ABAP Innovation and Transformation</title>
    <updated>2025-10-08T10:27:45.674000+02:00</updated>
    <author>
      <name>lienards</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/227111</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1761972361"&gt;&lt;STRONG&gt;Key Highlights&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Joule for Developers, ABAP AI capabilities&lt;/STRONG&gt; are now available in &lt;STRONG&gt;SAP S/4HANA Private Cloud Edition &lt;/STRONG&gt;&lt;STRONG&gt;2025&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;New &lt;STRONG&gt;Custom Code Migration &lt;/STRONG&gt;capabilities accelerate the transformation of classic ERP code to &lt;STRONG&gt;S/4HANA Cloud Private Edition&lt;/STRONG&gt;, including:&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Documentation Chat &lt;/STRONG&gt;- Get accurate answers on SAP S/4HANA simplifications.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;ABAP Program Explain &lt;/STRONG&gt;-&amp;nbsp;Understand the business purpose and logic of legacy code.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Explain&lt;/STRONG&gt;&lt;STRONG&gt; for SAP S/4HANA Test Cockpit Issues &lt;/STRONG&gt;-&amp;nbsp;Diagnose and resolve S/4HANA-related Test Cockpit issues using context from simplification items and cookbooks.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Earlier this year, SAP introduced &lt;STRONG&gt;Joule for Developers&lt;/STRONG&gt; — a set of embedded artificial intelligence capabilities in SAP Build, including ABAP, that helps developers accelerate application and extension development, reduce costs, and boost productivity.&lt;/P&gt;&lt;P&gt;Joule for Developers, ABAP AI capabilities are now available for S/4HANA Private Cloud Edition, version 2025, providing comprehensive support for ABAP Cloud use cases. The release also introduces the first Custom Code Migration capabilities, bringing a powerful suite of AI-assisted capabilities purpose-built for ABAP development and cloud delivery.&lt;/P&gt;&lt;P&gt;Best of all, Joule for Developers remains free of charge, enabling customers and partners to integrate it into daily operations and accelerate innovation without commercial barriers.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1565458856"&gt;&lt;STRONG&gt;What’s Included&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;This release for Private Cloud delivers AI-powered support for the core development scenarios ABAP developers rely on every day. Key capabilities include:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;inline code completion,&lt;/LI&gt;&lt;LI&gt;ABAP/CDS code explanation,&lt;/LI&gt;&lt;LI&gt;automated unit test generation for ABAP and ABAP core data services (CDS),&lt;/LI&gt;&lt;LI&gt;RAP business objects generation,&lt;/LI&gt;&lt;LI&gt;RAP predictive business logic, and&lt;/LI&gt;&lt;LI&gt;OData consumption.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;All capabilities are designed to accelerate development, improve code quality, and boost productivity from day one. Additionally, this release introduces the first wave of&lt;STRONG&gt; Custom Code Migration capabilities&lt;/STRONG&gt;, designed to accelerate the move from classic SAP ERP to &lt;STRONG&gt;SAP S/4HANA Cloud Private Cloud Edition&lt;/STRONG&gt;. These AI-powered features simplify code analysis and adaptation by:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Providing &lt;STRONG&gt;Documentation Chat&lt;/STRONG&gt; for quick answers on SAP S/4HANA simplifications:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lienards_0-1759907233424.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/324475i606AD92C02DAE239/image-size/large?v=v2&amp;amp;px=999" role="button" title="lienards_0-1759907233424.png" alt="lienards_0-1759907233424.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Using &lt;STRONG&gt;ABAP Program Explain&lt;/STRONG&gt; to clarify the business purpose and implementation logic of legacy code:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lienards_1-1759907233436.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/324473iC9A1BA70B925AFD7/image-size/large?v=v2&amp;amp;px=999" role="button" title="lienards_1-1759907233436.png" alt="lienards_1-1759907233436.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Explaining &lt;STRONG&gt;ABAP Test Cockpit (ATC) findings&lt;/STRONG&gt; with step-by-step guidance on how to fix the issues, based on simplification items and technical documentation:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="lienards_2-1759907233449.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/324474i74D164B2F8FB58F9/image-size/large?v=v2&amp;amp;px=999" role="button" title="lienards_2-1759907233449.png" alt="lienards_2-1759907233449.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;All capabilities are designed to reduce manual effort, speed up migration projects, and help your teams to modernize their ABAP landscapes with great confidence.&lt;/P&gt;&lt;P&gt;The ABAP AI software development kit, powered by Intelligent Scenario Lifecycle Management, is now available and offers centralized access to the generative AI hub in SAP AI Core. It leverages the same robust platform SAP uses internally, delivering proven, production-grade infrastructure to customer landscapes. With simplified configuration and governance, development teams can adopt AI capabilities quickly, providing a significant boost to integration efforts.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1368945351"&gt;&lt;STRONG&gt;Why This Matters &lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;Private cloud customers require strict governance, security, and operational control - yet they also seek the speed and innovation modern AI-driven development delivers. This release addresses both priorities by enabling:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;faster development cycles&lt;/STRONG&gt; with AI-assisted coding and test generation,&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;stronger knowledge transfer&lt;/STRONG&gt; through automated code explanations and copilot interactions,&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;higher delivery quality&lt;/STRONG&gt; with automated testing and code migration support, and&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;secure innovation&lt;/STRONG&gt; within controlled environments.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1172431846"&gt;&lt;STRONG&gt;Looking Ahead&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;We’re building on this momentum with a series of targeted deliveries aligned to upcoming releases across the BTP ABAP Environment and S/4HANA Cloud Public Edition. Planned updates for &lt;STRONG&gt;BTP ABAP Environment 2511, 2602&lt;/STRONG&gt;, and &lt;STRONG&gt;S/4HANA Cloud Public Edition 2602&lt;/STRONG&gt; include:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;documentation generation capabilities,&lt;/LI&gt;&lt;LI&gt;enhanced explanations for reports in the Custom Code Migration application,&lt;/LI&gt;&lt;LI&gt;AI-enabled insights on Clean Core–related ATC findings directly within the Custom Code Migration application,&lt;/LI&gt;&lt;LI&gt;code migration and adaptation proposals to support developers working on RISE code adaptation,&lt;/LI&gt;&lt;LI&gt;ABAP CDS annotation and metadata extension generation, and&lt;/LI&gt;&lt;LI&gt;ABAP CDS analytical model generation.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;These enhancements will extend Joule’s impact beyond code completion and test generation, supporting documentation, migration and Clean Core compliance, analytical use cases, and addressing more stages of the end-to-end development lifecycle.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-975918341"&gt;&lt;STRONG&gt;Free Offer Extended&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;SAP Joule for Developers will remain &lt;STRONG&gt;free of charge.&lt;/STRONG&gt; The extended promotion ensures that all customers and partners can continue to use Joule for Developers capabilities for free.&lt;/P&gt;&lt;P&gt;Access can be requested using the material numbers &lt;STRONG&gt;8019124&lt;/STRONG&gt; (customers) and &lt;STRONG&gt;8019541&lt;/STRONG&gt; (TDD partners). This offer now extends beyond the BTP ABAP environment and SAP Cloud ERP Public Edition to include &lt;STRONG&gt;SAP Cloud ERP Private Edition&lt;/STRONG&gt; customers running the latest 2025 release.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-779404836"&gt;&lt;STRONG&gt;Closing Remarks&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;SAP Joule for Developers’ delivery for Private Cloud is a significant milestone — combining end-to-end ABAP Cloud with AI use cases, innovative code migration scenarios, and a standardized ABAP AI SDK to bring practical AI assistance directly into everyday development workflows.&lt;/P&gt;&lt;P&gt;With extended free of charge access, we invite every customer and partner to explore SAP Joule for Developers, push its boundaries, and help shape the future of AI-assisted ABAP development.&lt;/P&gt;&lt;P&gt;Start using SAP Joule for Developers today and join us in building the next generation of intelligent, AI-driven ABAP innovation.&lt;/P&gt;&lt;P&gt;For a deeper dive, read the &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/abap-ai-revolution-accelerates-the-abap-developer-who-built-enterprise-apps/ba-p/14216073" target="_blank"&gt;blog post&lt;/A&gt; by Simona Marincei, head of ABAP AI.&lt;/P&gt;&lt;P&gt;Learn more about SAP Joule for Developers capabilities &lt;A href="https://www.sap.com/products/artificial-intelligence/joule-for-developers.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-joule-for-developers-expands-to-private-cloud-accelerating-abap/ba-p/14237958"/>
    <published>2025-10-08T10:27:45.674000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E9%99%90%E5%88%B6%E4%BE%9B%E5%BA%94%E5%95%86%E5%8F%91%E7%A5%A8%E7%9A%84%E5%A4%9A%E6%AC%A1%E6%9A%82%E5%AD%98/ba-p/14226442</id>
    <title>在 SAP S/4HANA Cloud 中通过自定义逻辑限制供应商发票的多次暂存</title>
    <updated>2025-10-09T05:18:38.831000+02:00</updated>
    <author>
      <name>Zhehui_Xia28</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40727</uri>
    </author>
    <content>&lt;H2 id="toc-hId-962016738" id="toc-hId-1761014207"&gt;&lt;STRONG&gt;问题背景：&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;有客户提出需求，希望限制已暂存过账后的采购订单对应的收货参考凭证以及参考凭证项目重复暂存。如果一个采购订单已经完成收货，参考凭证，并且完成了发票的过账，希望不能再对这个采购订单进行发票暂存。&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1564500702"&gt;&lt;SPAN&gt;解决方案：&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;尝试通过自定义逻辑，使用一个 BAdI 来满足需求。&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1367987197"&gt;&lt;SPAN&gt;分析步骤：&lt;/SPAN&gt;&lt;/H2&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;1. 以前帮助处理过客户的关于开票的需求，我们需要用到的业务增强点都是一样的。可以参见这两篇 Blog ：&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E6%A3%80%E6%9F%A5%E9%A2%84%E5%88%B6%E5%8F%91%E7%A5%A8%E7%9A%84%E4%BB%98%E6%AC%BE%E6%9D%A1%E4%BB%B6%E4%B8%8E%E4%BE%9B%E5%BA%94%E5%95%86%E4%B8%BB%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E4%BB%98%E6%AC%BE%E6%9D%A1%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4/ba-p/13550259" target="_blank"&gt;在 SAP S/4HANA Cloud 中通过自定义逻辑检查预制发票的付款条件与供应商主数据中的付款条件是否一致 | SAP Blogs&lt;/A&gt; 以及 &lt;A href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E6%A3%80%E6%9F%A5%E9%A2%84%E5%88%B6%E5%8F%91%E7%A5%A8%E7%9A%84%E4%BB%98%E6%AC%BE%E6%9D%A1%E4%BB%B6%E4%B8%8E%E4%BE%9B%E5%BA%94%E5%95%86%E4%B8%BB%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E4%BB%98%E6%AC%BE%E6%9D%A1%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4/ba-p/13550259" target="_self"&gt;在 SAP S/4HANA Cloud 中通过自定义逻辑限制未完成收货的采购订单开票丨SAP Blogs&lt;/A&gt;。&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;首先，我们需要在 SAP S/4HANA Cloud 系统的应用 –&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;自定义逻辑&lt;/STRONG&gt;&lt;SPAN&gt;里，&lt;/SPAN&gt;&lt;STRONG&gt;新增增强实施&lt;/STRONG&gt;&lt;SPAN&gt;。根据业务场景，选择下图中的&lt;/SPAN&gt;&lt;STRONG&gt;业务上下文&lt;/STRONG&gt;&lt;SPAN&gt;以及&lt;/SPAN&gt;&lt;STRONG&gt;业务加载项描述&lt;/STRONG&gt;&lt;SPAN&gt;，填写好&lt;/SPAN&gt;&lt;STRONG&gt;实施描述&lt;/STRONG&gt;&lt;SPAN&gt;以及&lt;/SPAN&gt;&lt;STRONG&gt;实施标识&lt;/STRONG&gt;&lt;SPAN&gt;。&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/324919iA36AFEE0CB062947/image-size/large?v=v2&amp;amp;px=999" role="button" title="1.png" alt="1.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;2. 在&lt;/SPAN&gt;&lt;STRONG&gt;自定义逻辑&lt;/STRONG&gt;&lt;SPAN&gt;里&lt;/SPAN&gt;&lt;STRONG&gt;新增增强实施&lt;/STRONG&gt;&lt;SPAN&gt;完成后，我们需要找到可以提供业务需求字段的 CDS Views 。经过测试，相同 PO + ITEM + 收货，如果已经过账，下次无法再选到这条收货凭证进行重复暂存。所以这里我采用作校验条件的字段是 PO 和 ITEM 号。同时，因为要校验这个 PO 和 ITEM 是否已经过账，所以要用到&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;I_SupplierInvoiceAPI01&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;里的&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SUPPLIERINVOICESTATUS = '5'&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;。但是这个 CDS View 里没有 PO 和 ITEM 这两个字段，所以我们需要用到&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;I_SuplrInvcItemPurOrdRefAPI01&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;。在下面的示例代码里，我用到了一个自定义 CDS View ，您可以在自己的系统里基于&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;I_SupplierInvoiceAPI01&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;创建自定义 CDS View &lt;/SPAN&gt;&lt;STRONG&gt;YY1_I_SUPPLIERINVOICEAPI01&lt;/STRONG&gt;&lt;SPAN&gt; ，选中对应字段，进行调整。&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;同时，正如我之前的文章里提到的，在 BAdI 给定的示例代码里，我们能发现有语句可以对触发 BAdI 的行为进行限制，根据我们的需要我们需要添加下面的语句限制 BAdI 仅在预制发票时触发，而不影响其他流程：&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;Park: if_ex_mrm_check_invoice_cloud=&amp;gt;c_Action_Park ”&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;3. 根据以上分析过程，实现 BAdI ，具体代码如下。&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;loop at ITEMSWITHPOREFERENCE REFERENCE INTO DATA(Supinvoice_item).
if action = if_ex_mrm_check_invoice_cloud=&amp;gt;c_Action_Hold.
    select single 
    from YY1_I_SUPPLIERINVOICEAPI01 with privileged access
    where PURCHASEORDER = @Supinvoice_item-&amp;gt;PURCHASEORDER and PURCHASEORDERITEM = @Supinvoice_item-&amp;gt;PURCHASEORDERITEM
    and SUPPLIERINVOICESTATUS = '5'
    into (Is_Supinvoice_status) .
    if Is_Supinvoice_status = abap_true.
      append value #( messagetype = 'E' messageid = 'MRM_BADI_CLOUD' messagenumber = '001' messagevariable1 = '暂存的发票有重复项目。' ) to messages.
    endif.
endif.
endloop.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4. 测试后，上述代码可以满足需求。&lt;/P&gt;&lt;H2 id="toc-hId-372476223" id="toc-hId-1171473692"&gt;&lt;STRONG&gt;结语：&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;通过阅读本文以及之前写过的几篇相似场景的 Blog ，希望您已知晓在为采购订单预制发票时，如何通过自定义逻辑来进行一些限制。&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;关注以下链接可以看到更多有关 SAP S/4HANA Cloud 采购相关的问题：&lt;A href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Sourcing+and+Procurement/pd-p/a906d110-8210-4641-9e54-4744b42f06d0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition Sourcing and Procurement - SAP Community&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;您也可以通过后面的链接阅读更多有关 SAP S/4HANA Cloud 采购的博文：&lt;A href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Sourcing+and+Procurement/pd-p/a906d110-8210-4641-9e54-4744b42f06d0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition Sourcing and Procurement - SAP Community&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;如果您对本文有任何的建议和想法，欢迎在评论区提出，期待与您一起交流。也欢迎您关注我的个人账号，期待我们在下一篇博文再见！&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E9%99%90%E5%88%B6%E4%BE%9B%E5%BA%94%E5%95%86%E5%8F%91%E7%A5%A8%E7%9A%84%E5%A4%9A%E6%AC%A1%E6%9A%82%E5%AD%98/ba-p/14226442"/>
    <published>2025-10-09T05:18:38.831000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E5%9C%A8101%E6%94%B6%E8%B4%A7%E6%97%B6%E5%B0%86%E7%89%A9%E6%96%99%E6%89%B9%E6%AC%A1%E5%8F%B7%E8%87%AA%E5%8A%A8%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%9B%BA%E5%AE%9A%E5%80%BC/ba-p/14242212</id>
    <title>在 SAP S/4HANA Cloud 中通过自定义逻辑在101收货时将物料批次号自动设置为固定值</title>
    <updated>2025-10-14T05:07:40.645000+02:00</updated>
    <author>
      <name>Zhehui_Xia28</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40727</uri>
    </author>
    <content>&lt;H2 id="toc-hId-962016738" id="toc-hId-1762740070"&gt;&lt;STRONG&gt;问题背景：&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;有客户提出需求，由于业务限制，希望在采购订单101收货时将批次号统一设置为物料号后八位，方便管理。&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1564500702" id="toc-hId-1566226565"&gt;&lt;SPAN&gt;解决方案：&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;尝试通过自定义逻辑，使用一个 BAdI 来满足需求。&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1367987197" id="toc-hId-1369713060"&gt;&lt;SPAN&gt;分析步骤：&lt;/SPAN&gt;&lt;/H2&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;1. 基于当前的业务描述，我们首先需要确认有哪些 BAdI 增强点支持当前需求。增强点&amp;nbsp;LOBM_AFTER_BATCH_NUMBER_INT ，根据文档描述，该增强点可以用于在内部批次号分配后创建一个新批次号并使用。但同时，这个 BAdI 的限制是对同一物料如果已经存在和新的批次号一样的批次号，则会返回错误。所以这个 BAdI 只能帮我们实现一部分需求，且我们需要添加逻辑防止重复创建。&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;2. 继续分析。增强点&amp;nbsp;MMIM_GR4XY_PROVIDE_DATA 可以用于在不同业务流程中修改收货单据的抬头、行项目数据，增强点 MMIM_ITEM_PROVIDE_DATA 可以用于更改不同流程的货物移动的文档项目字段中的数据。这两个增强点都可以满足我们的需求，但是前者只适用于 Post Goods Movement for Purchase Order 。所以我们配合后者，就可以满足在 MIGO 中的应用。&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;3. 我们现在已经找到了所有满足当前需求的增强点，现在，我们需要找到合适的 CDS Views ，提供所有我们需要的字段数据。CDS View I_Batch 存储了物料及相关的批次号，所以我们可以借助这个 CDS Views 来做条件判断。&lt;/SPAN&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;4. 那接下来就是完成 BAdI 的逻辑。首先是利用 LOBM_AFTER_BATCH_NUMBER_INT 来解决需要创建批次号的情况。需要添加逻辑判断，只有在 I_Batch 里对应物料没有相同批次号的情况下才生效。&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: lv_new_batch TYPE I_batch-batch.
DATA: lv_batchnum TYPE string.
lv_new_batch = substring( val = batch_allocation-material
                                off = 10
                                len = 8 ).
IF batch_allocation-materialtype = 'ZROH'.
  SELECT SINGLE batch FROM i_batch WITH PRIVILEGED ACCESS
  WHERE material = @batch_allocation-material AND batch = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_new_batch INTO &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_batchnum.
  IF sy-subrc &amp;lt;&amp;gt; 0.
      batch_out = lv_new_batch..
  ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;5. 接下来是批次号对当前物料已经创建，我们只需要修改的情况。先实现&amp;nbsp;MMIM_GR4XY_PROVIDE_DATA 的逻辑。同样我们需要使用到 I_Batch 来做判断。&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt; DATA: lv_batch TYPE string,
       lv_material TYPE string, 
       lv_new_batch TYPE I_batch-batch,
       lv_batchnum TYPE string.
 LOOP AT gr4xy_item INTO DATA(ls_item).
  lv_new_batch = substring( val = ls_item-material
                               off = 10
                               len = 8 ).
  SELECT SINGLE batch FROM i_batch WITH PRIVILEGED ACCESS
  WHERE material = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1450925"&gt;@LS&lt;/a&gt;_item-material AND batch = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_new_batch INTO &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_batchnum.
  IF sy-subrc = 0.
    lv_material = ls_item-material.
    IF ls_item-sourceofgr = 'PURORD'.
      lv_batch = substring( val = lv_material
      off = 10
      len = 8 ).
      LOOP AT change_item ASSIGNING FIELD-SYMBOL(&amp;lt;fs_change_item&amp;gt;).
        IF &amp;lt;fs_change_item&amp;gt;-deliverydocumentitem = ls_item-deliverydocumentitem.
          &amp;lt;fs_change_item&amp;gt;-batch = lv_batch.
          EXIT. 
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
 ENDLOOP.&lt;/code&gt;&lt;/pre&gt;&lt;P data-unlink="true"&gt;&lt;SPAN&gt;6. 最后就是&amp;nbsp;MMIM_ITEM_PROVIDE_DATA 的逻辑。实现后，我们就可以完成在 MIGO 里的逻辑。&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: lv_batch TYPE string,  " Define a variable to temporarily hold the batch.
      lv_new_batch TYPE I_batch-batch,
      lv_batchnum TYPE string.
IF invtrymgmtcallingappl EQ me-&amp;gt;if_mmim_item_provide_data~gc_calling_application_migo."'MIGO'.    "for MIGO as calling appliction
  lv_new_batch = substring( val = item-material
                              off = 10
                              len = 8 ).
  SELECT SINGLE batch FROM i_batch WITH PRIVILEGED ACCESS
  WHERE material = @item-material AND batch = &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_new_batch INTO &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1419942"&gt;@LV&lt;/a&gt;_batchnum.
  IF sy-subrc = 0.
      change_item-batch = lv_new_batch.
  ENDIF.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P data-unlink="true"&gt;7. 测试后，上述代码可以满足需求。&lt;/P&gt;&lt;H2 id="toc-hId-372476223" id="toc-hId-1173199555"&gt;&lt;STRONG&gt;结语：&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;通过阅读本文以及之前写过的几篇相似场景的 Blog ，希望您已知晓在做采购订单101收货时，如何通过自定义逻辑来将物料批次号自动设置为固定值。&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;关注以下链接可以看到更多有关 SAP S/4HANA Cloud 采购相关的问题：&lt;A href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Sourcing+and+Procurement/pd-p/a906d110-8210-4641-9e54-4744b42f06d0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition Sourcing and Procurement - SAP Community&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;您也可以通过后面的链接阅读更多有关 SAP S/4HANA Cloud 采购的博文：&lt;A href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Sourcing+and+Procurement/pd-p/a906d110-8210-4641-9e54-4744b42f06d0" target="_blank"&gt;SAP S/4HANA Cloud Public Edition Sourcing and Procurement - SAP Community&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;如果您对本文有任何的建议和想法，欢迎在评论区提出，期待与您一起交流。也欢迎您关注我的个人账号，期待我们在下一篇博文再见！&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-blog-posts-by-sap/%E5%9C%A8-sap-s-4hana-cloud-%E4%B8%AD%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E5%9C%A8101%E6%94%B6%E8%B4%A7%E6%97%B6%E5%B0%86%E7%89%A9%E6%96%99%E6%89%B9%E6%AC%A1%E5%8F%B7%E8%87%AA%E5%8A%A8%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%9B%BA%E5%AE%9A%E5%80%BC/ba-p/14242212"/>
    <published>2025-10-14T05:07:40.645000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/writable-entity-in-cds/ba-p/14249189</id>
    <title>Writable Entity in CDS</title>
    <updated>2025-10-22T07:56:59.929000+02:00</updated>
    <author>
      <name>kalmesh</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1490139</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Introduction to writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;CDS provides a powerful way to define and consume data models.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Traditionally, CDS views were read-only, used primarily for data retrieval.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;However, with the evolution of SAP's ABAP platform, Writable CDS Entities were introduced to enable direct data manipulation (Update, modify).&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Types of Writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp; &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;1.Writable CDS View Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; - Wrap DDIC tables for direct writing access.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;&amp;nbsp; 2.Writable External Entities &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;- Enable write access to eternal database.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this blog, we are going to focus on CDS Writable Entities. I will walk you through the concept step-by-step, using a practical example to demonstrate how it works and what operations—such as&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt; INSERT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;UPDATE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;—we can perform using a writable entity. Let's dive into the example.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Create a Table&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_0-1761035674723.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330139i0E91AC394DB0288C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_0-1761035674723.png" alt="kalmesh_0-1761035674723.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Next, we will create a writable CDS entity on top of the database table &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;ZTRL_T_AIRPORT, &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;Using the writable CDS entity, we can perform &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;update &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;operations directly, and we can also &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;insert&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; new records by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; statement. We will explore how to implement these operations in the upcoming steps.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_1-1761035762682.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330140i8F18A3F4D2C62746/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_1-1761035762682.png" alt="kalmesh_1-1761035762682.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;In the next step, we will create a class to perform all the required operations. We will use standard interface methods to execute these operations and display the output in the console for better visibility and testing.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_2-1761035834570.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330141i6A6F1BD2A833069C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_2-1761035834570.png" alt="kalmesh_2-1761035834570.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Let’s&lt;/SPAN&gt;&lt;SPAN class=""&gt; insert some data into the database table. Since we cannot perform insert operation directly through a writable CDS entity, I will &lt;/SPAN&gt;&lt;SPAN class=""&gt;proceed&lt;/SPAN&gt;&lt;SPAN class=""&gt; with inserting data into the underlying database &lt;/SPAN&gt;&lt;SPAN class=""&gt;table.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_3-1761035898193.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330142i477E22022DB56E99/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_3-1761035898193.png" alt="kalmesh_3-1761035898193.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN class=""&gt;Fetch &lt;/SPAN&gt;&lt;SPAN class=""&gt;the data from the database table to verify whether the records were successfully inserted, as performed in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;p&lt;/SPAN&gt;&lt;SPAN class=""&gt;revious&lt;/SPAN&gt; &lt;SPAN class=""&gt;step.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_4-1761035941906.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330143i0ADEFA20BA444649/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_4-1761035941906.png" alt="kalmesh_4-1761035941906.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;UPDATE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now, let’s perform an update operation using the writable CDS entity (&lt;STRONG&gt;ZTRL&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;STRONG&gt;_I_WRENT_DEMO&lt;/STRONG&gt;)&lt;SPAN&gt;. In this example, we will update the name field to demonstrate how data can be modified through the entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_5-1761036054229.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330145i4019B9CCE92DA46E/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_5-1761036054229.png" alt="kalmesh_5-1761036054229.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;INSERT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We will insert a new record by using the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; statement, which allows us to perform insert operations through the writable CDS entity.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_6-1761036103280.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330146iF60E2A1020E11868/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_6-1761036103280.png" alt="kalmesh_6-1761036103280.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;DELETE&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Direct delete operations are not supported through writable CDS entities. If attempted, the system will raise an error, as shown below.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_7-1761036149147.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330147i142A233FDCF4405F/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_7-1761036149147.png" alt="kalmesh_7-1761036149147.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="kalmesh_8-1761036170936.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330148i289A85701DAF27DC/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="kalmesh_8-1761036170936.png" alt="kalmesh_8-1761036170936.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Conclusion&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Writable CDS Entities&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; offer a powerful and flexible way to interact with database tables in SAP. Through these entities, we can perform &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;update operations &lt;/SPAN&gt;&lt;/STRONG&gt;and&lt;SPAN&gt;&amp;nbsp;even &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN&gt;insert new records&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; using the &lt;/SPAN&gt;&lt;SPAN&gt;MODIFY&lt;/SPAN&gt;&lt;SPAN&gt; statement.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Keep experimenting, keep learning—and happy coding! &lt;span class="lia-unicode-emoji" title=":rocket:"&gt;🚀&lt;/span&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/writable-entity-in-cds/ba-p/14249189"/>
    <published>2025-10-22T07:56:59.929000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/automatic-retry-of-application-jobs-in-abap-in-cloud/ba-p/14249591</id>
    <title>Automatic retry of Application Jobs in ABAP in Cloud</title>
    <updated>2025-10-22T08:12:39.185000+02:00</updated>
    <author>
      <name>natanael1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1557162</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1633869018"&gt;Introduction&lt;/H1&gt;&lt;P&gt;When moving from classic ABAP to ABAP in Cloud, one of the most common painpoints of the developers is the fact that they lose many familiar tools and options they had in the non-cloud systems. One of these tools are classical Batch Jobs, they have been replaced with Application Jobs in ABAP in Cloud, about this and some other issue&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/404361"&gt;@octavian_savu&lt;/a&gt;&amp;nbsp;has a very good &lt;A href="https://community.sap.com/t5/application-development-and-automation-blog-posts/abap-cloud-application-jobs-overcoming-key-challenges/ba-p/13929058" target="_self"&gt;blog post&lt;/A&gt;&amp;nbsp;where he explains some common challenges with Application Jobs in ABAP in Cloud.&lt;/P&gt;&lt;P&gt;In my case, we had multiple nightly Application Jobs that were occasionally failing &lt;STRONG&gt;due to network stability&lt;/STRONG&gt; or &lt;STRONG&gt;downtime&lt;/STRONG&gt;, and many of these failures were&lt;STRONG&gt; "fixable" with a simple retry&lt;/STRONG&gt;, however without a 24/7 support we could not make sure that these jobs were retried when they failed. And this is a common fallacy of the &lt;STRONG&gt;&lt;A href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing" target="_self" rel="nofollow noopener noreferrer"&gt;"The Eight Fallacies of Distributed Computing"&lt;/A&gt;, &lt;/STRONG&gt;specifically "&lt;STRONG&gt;The network is reliable"&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;My plan was to build a robust retry framework for Application Jobs that will overcome these type of transient issues. I was very much inspired by the Phoenix bird who's rising from the ashes, so my goal was to make sure that the Application Jobs can rise from the ashes as well. The full source code of this framework can be found in &lt;A href="https://github.com/legonmarian/abap-btp-phoenix-framework" target="_self" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;&lt;H1 id="toc-hId-1437355513"&gt;Problem Statement&lt;/H1&gt;&lt;P&gt;In classical process chains(TCODE: RSPC), you are given the opportunity of configuring an automatic retry for a certain Job step in case of failure.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-10-21 at 14.18.54.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330232iAE354CF85EF15A3A/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Screenshot 2025-10-21 at 14.18.54.png" alt="Screenshot 2025-10-21 at 14.18.54.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;However in ABAP in Cloud you don't have such options unfortunately. So there's a gap in functionality that we'l need to address somehow. Why do we need to address it?&amp;nbsp;&lt;BR /&gt;That's simple, and I will give you an &lt;STRONG&gt;example&lt;/STRONG&gt; for that:&lt;/P&gt;&lt;H2 id="toc-hId-1369924727"&gt;Example&lt;/H2&gt;&lt;P&gt;Let's assume you somehow decided to implement the &lt;STRONG&gt;MRP&lt;/STRONG&gt;(or any other process, it doesn't matter)&amp;nbsp;runs in Cloud, you have your development / support teams that sits in Berlin, the working day is from 07:00 - 15:00 UTC. And you also have 2 factories, one in Warsaw(work day 07:00 - 15:00 UTC) and one in Shanghai(work day 01:00 - 09:00 UTC).&lt;BR /&gt;At both factories you also have some production planners that need the data from the MRP run in order to be able to work, if the data is not there, their time is wasted.&amp;nbsp;&lt;BR /&gt;Let's say you have one MRP run per each factory and it takes 1 hour to complete, and you must run it not sooner than 2 hours before the factory opens, otherwise you will miss some important orders.&lt;BR /&gt;Therefore you will have the next schedule:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Warsaw MRP -&amp;gt; 05:00 - 06:00&lt;/LI&gt;&lt;LI&gt;Shanghai MRP -&amp;gt; 23:00 - 00:00&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;And let's assume a theoretical scenario when both of these Jobs have failed.&amp;nbsp;The support team starts their work at ~07:00, this is when they restart the job, and at ~08:00 the job is completed.&amp;nbsp;How much time did the production planners lose?&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Warsaw - ~1-2 hours which is not that much, but still unpleasant&lt;/LI&gt;&lt;LI&gt;Shanghai - ~7-8 hours which is almost a full working day, completely unacceptable&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-1044328503"&gt;Design goal&lt;/H1&gt;&lt;P&gt;The ultimate goal is making sure that the system is able to "heal" itself and try again in case of failure. In order to translate this into ABAP code we will need a framework with the next requirements:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Automatically retries in case of failure&lt;/LI&gt;&lt;LI&gt;Has a configurable timeout between the retries to allow external systems to recover&lt;/LI&gt;&lt;LI&gt;Follows SOLID principles&lt;/LI&gt;&lt;LI&gt;Can be fitted into existing jobs with minimal refactoring&lt;/LI&gt;&lt;LI&gt;The class should be able to control the flow of the framework if needed.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In order to achieve this behavior I will introduce the Phoenix Framework. The idea behind of the phoenix framework is to introduce a thin architectural layer on top of the standard ABAP APJ(Application Jobs) runtime. The goal of this layer is to separate the technical orchestration of retires from the actual business logic of the Application Job, this way each job stays focused on what it needs to do, while the framework handles how it should react when something goes wrong.&amp;nbsp;&lt;/P&gt;&lt;P&gt;This behavior will be achieved by introducing a two-tier class structure, a pretty common OOP design.&amp;nbsp;In general in most of the code we prefer composition over inheritance, but in this specific use case inheritance will be more suitable technique.&amp;nbsp;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Base Class&lt;/STRONG&gt; (&lt;CODE&gt;zcl_phoenix_base&lt;/CODE&gt;) - Handles job lifecycle, and implements APJ contracts, plus it provides the retry engine. It will implement&amp;nbsp;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;&amp;nbsp;and the encapsulated interfaces inside it.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Child Class&lt;/STRONG&gt; (f.ex.&amp;nbsp;&lt;CODE&gt;zcl_phoenix_job_mrp&lt;/CODE&gt;) - Inherits from&amp;nbsp;&lt;CODE&gt;zcl_phoenix_base&lt;/CODE&gt;, and will implement the business logic through hooks enforced by the interface.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;besides that we will create a facade for this framework&amp;nbsp;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;, this interface will be serving multiple purposes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Central point of keeping generic types specific for application jobs&lt;/LI&gt;&lt;LI&gt;Bundles multiple interfaces together&lt;/LI&gt;&lt;LI&gt;Defines an implementation contract for the child class.&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId-847814998"&gt;Implementation&lt;/H1&gt;&lt;H3 id="toc-hId-909466931"&gt;Interface&lt;/H3&gt;&lt;P&gt;I will first provide the source code, and below will be the explanation&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;"! Phoenix framework interface
INTERFACE zif_phoenix PUBLIC.

  TYPES:
    BEGIN OF ty_job_params_range,
      sign   TYPE c LENGTH 1,
      option TYPE c LENGTH 2,
      low    TYPE c LENGTH 50,
      high   TYPE c LENGTH 50,
    END OF ty_job_params_range.

  TYPES: tt_job_params_range TYPE STANDARD TABLE OF ty_job_params_range WITH EMPTY KEY.

  INTERFACES if_apj_dt_defaults.
  INTERFACES if_apj_rt_run.
  INTERFACES if_oo_adt_classrun.

  "! Run business logic &amp;lt;br&amp;gt;
  "! Implements the job-specific business logic. The framework invokes this
  "! once per attempt. If an exception derived from cx_root is raised, the
  "! framework logs it and may retry according to the configured retry settings.
  "! Keep this method idempotent or self-compensating so it remains safe under retries.
  "! @raising cx_root | Propagate any business error to signal failure to the framework.
  METHODS process RAISING cx_root.

  "! Set default attributes &amp;lt;br&amp;gt;
  "! Populate instance attributes that serve as defaults for scheduling and
  "! execution
  "! The base class calls this from if_apj_dt_defaults~fill_attribute_defaults
  "! so implementations do not depend on APJ types.
  METHODS fill_attribute_defaults.


  "! Get the delay before the next run &amp;lt;br/&amp;gt;
  "! @parameter retry_count | The retry count
  "! @parameter delay | How many seconds to wait before retrying the job
  METHODS get_next_delay IMPORTING retry_count TYPE i
                         RETURNING VALUE(delay) TYPE i.

ENDINTERFACE.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;So why do we implement the&amp;nbsp;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt; interface? Simply it is just encapsulating the structure of our future Application Jobs.&lt;/SPAN&gt;&lt;/P&gt;&lt;DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;The type &lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;CODE&gt;ty_job_params_range&lt;/CODE&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;is just made available in here for job parameters, as they will follow this shape if we want to be able to select multiple options, for more on this check &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/example-implementation-using-interfaces-if-apj-dt-exec-object-and-if-apj-rt-exec-object?locale=en-US" target="_self" rel="noopener noreferrer"&gt;SAP Docs&lt;/A&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;And then we implement these 3 interfaces: &lt;/SPAN&gt;&lt;SPAN&gt;&lt;CODE&gt;if_apj_rt_run&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;,&amp;nbsp;&lt;CODE&gt;if_apj_dt_defaults&lt;/CODE&gt;,&amp;nbsp;&lt;CODE&gt;if_oo_adt_classrun&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;, but why do we need them?&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;So let's take them one by one:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;CODE&gt;if_apj_rt_run&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;- this is the default interface an application job should implement, without this interface a catalog cannot be created therefore we wouldn't be able to execute it as an application job, inside the &lt;/SPAN&gt;&lt;SPAN&gt;&lt;CODE&gt;if_apj_rt_run~main&lt;/CODE&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;you should encapsulate your business logic. By having it inside&amp;nbsp;&amp;nbsp;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt; we are basically saying that all the classes that implement &lt;/SPAN&gt;&lt;SPAN&gt;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;(or spoiler alert inherits from a class that implements it) will be "schedulable" as a batch job.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;CODE&gt;if_apj_dt_defaults&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;- this is the interface where you define default values for the parameters passed ot the application job, you can either provide them in here, in the class constructor or as default values of the public attributes of the class.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;CODE&gt;if_oo_adt_classrun&lt;/CODE&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;- a scheduled application job cannot be debugged, therefore we will introduce this interface for easier debugging of the business logic&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-712953426"&gt;&lt;SPAN&gt;Base Class Definition&lt;/SPAN&gt;&lt;/H3&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_phoenix_base DEFINITION
  PUBLIC
  ABSTRACT
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES zif_phoenix.

    "! &amp;lt;p class="shorttext synchronized" lang="en"&amp;gt;Retry Enabled&amp;lt;/p&amp;gt;
    DATA retry_enabled TYPE zde_phoenix_retry_enabled VALUE 'X'.

    "! &amp;lt;p class="shorttext synchronized" lang="en"&amp;gt;Number of retries&amp;lt;/p&amp;gt;
    DATA retry_count TYPE zde_phoenix_retries VALUE 2.

    "! &amp;lt;p class="shorttext synchronized" lang="en"&amp;gt;Cooldown time(s)&amp;lt;/p&amp;gt;
    DATA sleep_value_s TYPE zde_phoenix_sleep VALUE 120.

  PROTECTED SECTION.
    DATA logger            TYPE REF TO zif_logger.

    "! Log informational message &amp;lt;br&amp;gt;
    "! Writes an informational entry to the application log (BALI) for the current attempt.
    "! Uses severity if_bali_constants=&amp;gt;c_severity_information.
    "! @parameter message | Text to persist in the application log.
    "! @raising   cx_bali_runtime | Thrown if the logger is not available or the log write fails.
    METHODS log_info
      IMPORTING !message TYPE cl_bali_free_text_setter=&amp;gt;ty_text
      RAISING   cx_bali_runtime.

    "! Log error message &amp;lt;br&amp;gt;
    "! Writes an error entry to the application log (BALI) for the current attempt.
    "! Uses severity if_bali_constants=&amp;gt;c_severity_error.
    "! @parameter message | Text to persist in the application log.
    "! @raising   cx_bali_runtime | Thrown if the logger is not available or the log write fails.
    METHODS log_error
      IMPORTING !message TYPE cl_bali_free_text_setter=&amp;gt;ty_text
      RAISING   cx_bali_runtime.

    "! Log warning message &amp;lt;br&amp;gt;
    "! Writes a warning entry to the application log (BALI) for the current attempt.
    "! Uses severity if_bali_constants=&amp;gt;c_severity_warning.
    "! Requires an initialized logger (created via create_logger( )).
    "! @parameter message | Text to persist in the application log.
    "! @raising   cx_bali_runtime | Thrown if the logger is not available or the log write fails.
    METHODS log_warning
      IMPORTING !message TYPE cl_bali_free_text_setter=&amp;gt;ty_text
      RAISING   cx_bali_runtime.

    "! Log success/status message &amp;lt;br&amp;gt;
    "! Writes a success entry to the application log (BALI) for the current attempt.
    "! Uses severity if_bali_constants=&amp;gt;c_severity_status.
    "! @parameter message | Text to persist in the application log.
    "! @raising   cx_bali_runtime | Thrown if the logger is not available or the log write fails.
    METHODS log_success
      IMPORTING !message TYPE cl_bali_free_text_setter=&amp;gt;ty_text
      RAISING   cx_bali_runtime.


  PRIVATE SECTION.
    CONSTANTS log_object_id            TYPE cl_bali_header_setter=&amp;gt;ty_object    VALUE 'ZLOG_PHOENIX'.
    CONSTANTS sublog_id_submission_job TYPE cl_bali_header_setter=&amp;gt;ty_subobject VALUE 'PHOENIX_LOG'.

    METHODS notify_about_failure.
    METHODS notify_teams.
    METHODS create_logger RAISING cx_bali_runtime
                                  cx_uuid_error.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-645522640"&gt;PUBLIC SECTION&lt;/H4&gt;&lt;P&gt;&lt;SPAN&gt;We will of course implement the&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;interface that we defined before.&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;And we will also define 3 public attributes&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;retry_enabled&lt;/CODE&gt;&lt;SPAN&gt;,&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;retry_count&lt;/CODE&gt;&lt;SPAN&gt;,&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;sleep_value_s&lt;/CODE&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;These public attributes will be visible in the Job Scheduling screen so the person who schedules the job can control if he wants to have the retry functionality enabled, how many time the framework will retry the job, and how much time to wait between the retries.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-10-21 at 16.48.53.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330306i5C61E0F2B2D53A89/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-10-21 at 16.48.53.png" alt="Screenshot 2025-10-21 at 16.48.53.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-449009135"&gt;PROTECTED SECTION&lt;/H4&gt;&lt;P&gt;In here we define the PROTECTED area of the class, and if you don't remember what it is, it's the method / types that's not available to other classes but it's available to the children classes(that implement this base class)&lt;BR /&gt;As protected we have one global object called&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;logger&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and I left it as protected on purpose, if any of the child classes would like to define some custom logging methods, they can access the logger object and define their own methods if the provided methods are not meeting the needs.&lt;/P&gt;&lt;P&gt;And we have 4 more logging methods that will log a message with a specific importance(info, success, warning, error), the consumer is encoruanegd to use these methods, and use the logger obejct itself only when these are not sufficient.&lt;/P&gt;&lt;P&gt;Using this logger and logging methods the consumer will be able to log to the Application Job Log that we see afterwards in the Fiori launchpad&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="natanael1_0-1761058386212.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330307iDBA940A45666AF9C/image-size/large/is-moderation-mode/true?v=v2&amp;amp;px=999" role="button" title="natanael1_0-1761058386212.png" alt="natanael1_0-1761058386212.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-252495630"&gt;PRIVATE SECTION&lt;/H4&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;In the private section we defined some constants that we will use for logging into the application job log and also 2 methods for sending external notifications on a job failure, in our case we have a generic method that notifies about a failure, and this method just calls another method that will send a teams notification in case of failure.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;H3 id="toc-hId--148331963"&gt;Implementation&lt;/H3&gt;&lt;P&gt;Now we have this base class, and the purpose of it, is that multiple child classes will implement this base class, and each child class will be a "schedulable" job, but we need a mechanism of how we can make this connection between the child class and base class, and how the child class will indicate to the base class what business logic to run.&lt;BR /&gt;We will do that via the same interface that we created:&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;, therefore we define 3 more methods&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;CODE&gt;get_next_delay&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;method will take as a parameter the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;retry_count&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and will return back the cooldown time the framework will need to wait before the next retry, this method will have a default implementation that simply returns the static input parameter of the job&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;sleep_value_s&lt;/CODE&gt;, this method shall not be redefined by the child class unless they want some custom cooldown functionality like exponential backoff&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;fill_attribute_defaults&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;method, this is just a wrapper for the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_dt_defaults~fill_attribute_defaults&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;method, and one could argue why do we need a wrapper why can't we just implement&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_dt_defaults~fill_attribute_defaults&lt;/CODE&gt;, we could, but we want to put an abstraction layer on top of it, and keep this concern into the base class, so the child class implements only the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and not any other interfaces like&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_dt_defaults&lt;/CODE&gt;&lt;/LI&gt;&lt;LI&gt;&lt;CODE&gt;process&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;method, probably the most important method, so the child class must redefine the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;process&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;method, and implement it's business logic inside it, so assuming that you're refactoring a class that used before&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_rt_run&lt;/CODE&gt;, you'd rename&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_rt_run~main&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;into&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process&lt;/CODE&gt;, the base class will afterwards call the process method again and again in case of retries&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Therefore we already have a default implementation for some methods:&lt;/P&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_dt_defaults~fill_attribute_defaults.
  " ------------------------------------------------------------------------
  " STANDARD IMPLEMENTATION
  " MUST NOT BE REDEFINED, INSTEAD USE EXTENSION POINT:
  "   zif_phoenix~fill_attribute_defaults( ).
  "
  " This is just calling the wrapper class zif_phoenix~fill_attribute_defaults( ).
  " ------------------------------------------------------------------------
  zif_phoenix~fill_attribute_defaults( ).
ENDMETHOD.

METHOD zif_phoenix~get_next_delay.
  " ------------------------------------------------------------------------
  " STANDARD IMPLEMENTATION
  " CAN BE REDEFINED BY CHILD CLASS IF NEEDED(OPTIONAL)
  "
  " By default it will return the configured sleep_value_s
  " This is an extension point if the job needs a custom backoff f.ex. exponential backoff
  " the class could implement it something like this:
  "   RETURN sleep_value_s * ( 2 ** ( retry_count - 1 ) ).
  " ------------------------------------------------------------------------
  RETURN sleep_value_s.
ENDMETHOD.

METHOD zif_phoenix~fill_attribute_defaults.
  " ------------------------------------------------------------------------
  " CUSTOM BUSINESS IMPLEMENTATION
  " CAN BE REDEFINED BY CHILD CLASS IF NEEDED(OPTIONAL)
  " WRAPPER FUNCTION FOR if_apj_dt_defaults~fill_attribute_defaults
  " Q: Why do we need zif_phoenix~fill_attribute_defaults if the
  "    child class can implement if_apj_dt_defaults~fill_attribute_defaults
  " A: We don't want the child class to implement other interfaces other
  "    than zif_phoenix, this way we abstractize the child class from
  "    knowing the inside implementation of the framework
  " ------------------------------------------------------------------------
ENDMETHOD.


METHOD zif_phoenix~process.
  " ------------------------------------------------------------------------
  " CUSTOM BUSINESS IMPLEMENTATION
  " MUST BE REDEFINED BY CHILD CLASS
  " ------------------------------------------------------------------------
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I will skip over the implementation of the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;create_logger&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;log_info&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;log_error&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;log_success&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;log_warning&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;notify_about_failure&lt;/CODE&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;notify_teams&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;methods because they're less relevant for this example.&lt;/P&gt;&lt;P&gt;Given that we'd like to run everything inside the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_rt_run~execute&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;when we are running the class inside ADT, this will be the implementation of the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_oo_adt_classrun~main&lt;/CODE&gt;:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_oo_adt_classrun~main.
  " ------------------------------------------------------------------------
  " STANDARD IMPLEMENTATION
  " NO NEED FOR REDEFENITION, BUT IT IS OKAY TO
  " if_oo_adt_classrun~main MUST NOT BE USED IN PRODUCTIVE SCENARIOS
  " ------------------------------------------------------------------------
  TRY.
      if_apj_rt_run~execute( ).
      out-&amp;gt;write( |Finished executing at { cl_abap_context_info=&amp;gt;get_system_time( ) }| ).
    CATCH cx_root INTO FINAL(exception).
      out-&amp;gt;write( |Exception raised during execution: { exception-&amp;gt;get_text( ) }| ).
  ENDTRY.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now we got to the most interesting part, what do we put inside&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_rt_run~execute&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;in order to retry the job on failure&lt;BR /&gt;We will start simple, first thing first, we'll try to calculate the total_attempts of the run that we can do, if the retry is disabled it will be 1, so it will run once, and won't retry, if it's enabled it will be the passed retry_count parameter + 1(the first run)&lt;/P&gt;&lt;P&gt;Next via a simple&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;DO&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;loop we will execute the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process&lt;/CODE&gt;(which contains the job business logic inside), and if the execution is successful, we'll return, therefore we don't get to the next iteration of the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;DO&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;loop, it will stop there and exit prematurely.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
  FINAL(total_attempts) = max_retries + 1.

  DO total_attempts TIMES.
    zif_phoenix~process( ).
    RETURN.
  ENDDO.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;But will this be fault tolerant? No, as soon as&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process( )&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;raises an exception&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;if_apj_rt_run~execute&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;will be propagating the exception and prematurely terminate, so we don't get to the next&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;DO&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;iteration.&lt;/P&gt;&lt;P&gt;So we will just wrap it with a&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;TRY CATCH&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;block:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
  FINAL(total_attempts) = max_retries + 1.

  DO total_attempts TIMES.
    TRY.
        zif_phoenix~process( ).
        RETURN.
      CATCH cx_root INTO FINAL(ex).
    ENDTRY.
  ENDDO.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Congratulations, you have now a very simple fault tolerant application job framework, as soon as the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process( )&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;raises an exception, the catch block catches it, and goes to the next iteration of the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;DO&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;loop, as soon as the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process( )&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;is successfull it will return so we don't run it too many times.&lt;/P&gt;&lt;P&gt;But we don't have any sleep functionality, so let's add it&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
  FINAL(total_attempts) = max_retries + 1.

  DO total_attempts TIMES.
    TRY.
        zif_phoenix~process( ).
        RETURN.
      CATCH cx_root INTO FINAL(ex).
        IF sy-index &amp;lt;= max_retries.
          DATA(sleep_time_s) = zif_phoenix~get_next_delay( sy-index ).
          IF sleep_time_s &amp;gt; 0.
            WAIT UP TO sleep_time_s SECONDS.
          ENDIF.
          CONTINUE.
        ENDIF.
    ENDTRY.
  ENDDO.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now on an exception we will get the next expected delay, will wait that amount of seconds and then continue with the next try.&lt;/P&gt;&lt;P&gt;But can you see the problem in this code?&lt;BR /&gt;The problem is that even if all the attempts of running the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zif_phoenix~process&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;are failing, the code will continue its normal flow after all failures, and will result in a succesfull job, which is false, so we'll raise an exception when we've exhausted all our attempts:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
  FINAL(total_attempts) = max_retries + 1.

  DO total_attempts TIMES.
    TRY.
        zif_phoenix~process( ).
        RETURN.
      CATCH cx_root INTO FINAL(ex).
        IF sy-index &amp;lt;= max_retries.
          DATA(sleep_time_s) = zif_phoenix~get_next_delay( sy-index ).
          IF sleep_time_s &amp;gt; 0.
            WAIT UP TO sleep_time_s SECONDS.
          ENDIF.
          CONTINUE.
        ENDIF.
        RAISE EXCEPTION NEW cx_apj_rt_content( previous = ex ).
    ENDTRY.
  ENDDO.
ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now we'll add a bit of logging:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  " ------------------------------------------------------------------------
  " STANDARD IMPLEMENTATION DO NOT REDEFINE
  " FOLLOW STANDARD FLOW
  " Enhancement Points:
  "   - process() must be redefined
  " ------------------------------------------------------------------------
  TRY.
      FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
      FINAL(total_attempts) = max_retries + 1.

      DO total_attempts TIMES.

        " new logger for each attempt, to have separation of logs in APJ
        create_logger( ).
        log_info( |Attempt { sy-index } of { total_attempts } started| ).

        TRY.
            zif_phoenix~process( ).
            log_success( |Processed successfully on attempt { sy-index }| ).
            RETURN.
          CATCH cx_root INTO FINAL(ex).
            IF sy-index &amp;lt;= max_retries.
              log_warning( |Attempt { sy-index } failed: { ex-&amp;gt;get_text( ) }| ).
              notify_about_failure( ).
              DATA(sleep_time_s) = zif_phoenix~get_next_delay( sy-index ).
              IF sleep_time_s &amp;gt; 0.
                log_info( |Retrying in { sleep_value_s } seconds| ).
                WAIT UP TO sleep_time_s SECONDS.
              ENDIF.
              CONTINUE.
            ENDIF.

            log_error( |Exhausted { total_attempts } attempts: { ex-&amp;gt;get_text( ) }| ).
            RAISE EXCEPTION NEW cx_apj_rt_content( previous = ex ).
        ENDTRY.

      ENDDO.

    CATCH cx_bali_runtime cx_uuid_error INTO FINAL(log_ex).
      RAISE EXCEPTION NEW cx_apj_rt_content( previous = log_ex ).
  ENDTRY.

ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Cool but what if the child class doesn't want to retry a specific exception, for example it knows for sure that this exception is not transient like some missing configuration, expired credentials, wrong data, etc?&lt;/P&gt;&lt;P&gt;In this case we will define a new exception class called&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zcx_phoenix_stop_retry&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and as soon as the child class raises this exception we don't retry, but just fail the job:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;METHOD if_apj_rt_run~execute.
  " ------------------------------------------------------------------------
  " STANDARD IMPLEMENTATION DO NOT REDEFINE
  " FOLLOW STANDARD FLOW
  " Enhancement Points:
  "   - process() must be redefined
  " ------------------------------------------------------------------------
  TRY.
      FINAL(max_retries)    = COND i( WHEN retry_enabled = abap_true THEN retry_count ELSE 0 ).
      FINAL(total_attempts) = max_retries + 1.

      DO total_attempts TIMES.

        " new logger for each attempt, to have separation of logs in APJ
        create_logger( ).
        log_info( |Attempt { sy-index } of { total_attempts } started| ).

        TRY.
            zif_phoenix~process( ).
            log_success( |Processed successfully on attempt { sy-index }| ).
            RETURN.
          CATCH zcx_phoenix_stop_retry INTO FINAL(stop_retry_ex).
            log_error( |The retrial was intentionally canceled: { stop_retry_ex-&amp;gt;get_text( ) }| ).
            RAISE EXCEPTION NEW cx_apj_rt_content( previous = stop_retry_ex ).
          CATCH cx_root INTO FINAL(ex).
            IF sy-index &amp;lt;= max_retries.
              log_warning( |Attempt { sy-index } failed: { ex-&amp;gt;get_text( ) }| ).
              notify_about_failure( ).
              DATA(sleep_time_s) = zif_phoenix~get_next_delay( sy-index ).
              IF sleep_time_s &amp;gt; 0.
                log_info( |Retrying in { sleep_value_s } seconds| ).
                WAIT UP TO sleep_time_s SECONDS.
              ENDIF.
              CONTINUE.
            ENDIF.

            log_error( |Exhausted { total_attempts } attempts: { ex-&amp;gt;get_text( ) }| ).
            RAISE EXCEPTION NEW cx_apj_rt_content( previous = ex ).
        ENDTRY.

      ENDDO.

    CATCH cx_bali_runtime cx_uuid_error INTO FINAL(log_ex).
      RAISE EXCEPTION NEW cx_apj_rt_content( previous = log_ex ).
  ENDTRY.

ENDMETHOD.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If you'd like to see the full class implementation you can check out &lt;A href="https://github.com/legonmarian/abap-btp-phoenix-framework" target="_blank" rel="noopener nofollow noreferrer"&gt;this link for the full source code.&lt;/A&gt;&lt;/P&gt;&lt;P&gt;So how to try it? Simply just inherit from the base class, so we will&lt;SPAN&gt;&amp;nbsp;create a&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;zcl_phoenix_demo&lt;/CODE&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS zcl_phoenix_job_demo DEFINITION
  PUBLIC
  INHERITING FROM /lego/cl_phoenix_base
  FINAL
  CREATE PUBLIC .
  PUBLIC SECTION.
    METHODS /lego/if_phoenix~process REDEFINITION.
  PRIVATE SECTION.
    DATA: x TYPE i value -1. "anti-pattern, not recommended
ENDCLASS.
CLASS zcl_phoenix_job_demo IMPLEMENTATION.
  METHOD /lego/if_phoenix~process.
    x = x + 1.
    DATA(a) = 1 / x.
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;What does this class do? Simply it will fail on the first run, and will be successful on the second run, because it will no longer be dividing by 0, but by 1. However I must warn you that the &lt;STRONG&gt;global variables should be avoided&lt;/STRONG&gt; in productive scenarios, I will explain why in the &lt;STRONG&gt;Limitations&lt;/STRONG&gt; section.&lt;/P&gt;&lt;P&gt;We'll create a Job Catalog Entry and Job Template in order to schedule the job:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="natanael1_0-1761067786183.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330406iCB8D1137A72B1341/image-size/medium?v=v2&amp;amp;px=400" role="button" title="natanael1_0-1761067786183.png" alt="natanael1_0-1761067786183.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="natanael1_2-1761067809210.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330408iD9ABA935221745C0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="natanael1_2-1761067809210.png" alt="natanael1_2-1761067809210.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now we can schedule it:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="natanael1_3-1761067909656.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330409i6174664CC9B27EBF/image-size/medium?v=v2&amp;amp;px=400" role="button" title="natanael1_3-1761067909656.png" alt="natanael1_3-1761067909656.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;And this is the Job Result:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-10-21 at 19.49.38.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/330418iD54FEC62067DE9AC/image-size/medium/is-moderation-mode/true?v=v2&amp;amp;px=400" role="button" title="Screenshot 2025-10-21 at 19.49.38.png" alt="Screenshot 2025-10-21 at 19.49.38.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--51442461"&gt;Improvement points&lt;/H2&gt;&lt;P&gt;This code of course is not perfect, and there're various improvement points that could be done in order to make it better, however the goal of this blog post is not to showcase perfect code, but to explain conceptually how we can implement such a framework. Some of the improvements points could be:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;make the code less nested by using checks and guard clauses&lt;/LI&gt;&lt;LI&gt;add a method to the facade interface to allow external classes to schedule the job(not executing, but scheduling in a different session) by calling that method&lt;/LI&gt;&lt;LI&gt;add a cleanup hook to run before each new trial&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId--247955966"&gt;Limitations, considerations, gotchas, and side cases&lt;/H2&gt;&lt;P&gt;And of course there're certain limitations to take into consideration and gotchas to avoid:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Biggest limitation is that you must design your classes to be stateless, because on a failure your class won't be reinstantiated instead the process method will run again, therefore you should try to avoid global variables as much as possible, because the state will be kept between runs&lt;BR /&gt;It is of course fine to have global variables objects from dependency injection that were just instantiated in the constructor, this is perfectly fine. But you should avoid as much as possible having business data in global variables, as the stale data might introduce unnecessary side effects on the re-run.&lt;/LI&gt;&lt;LI&gt;Another gotcha is that there're certain &lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/ABENUNCATCHABLE_EXCEPTION_GLOSRY.html" target="_self" rel="noopener noreferrer"&gt;uncatchable exceptions&lt;/A&gt;&amp;nbsp;and the framework will unfortunately dump on these, because as the name suggests these are uncatchable and they will be propagated to a short dump, bypassing the try catch block.&lt;/LI&gt;&lt;LI&gt;One of the considerations is that you need to design your code in a manner where it will raise exceptions, instead of raising uncatchable exceptions, it might sound a bit confusing, but let me give you an example.&lt;BR /&gt;So let's assume that you make an RFC call to an on-prem system this way:&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;"don't do this
call function 'some_rfc_fm'
  destination rfc_key
  exporting param       = 'value'
  importing return_data = return_data
  tables table_data     = table_data.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If the RFC call fails, it will raise an uncatchable exception and the program will dump, however we can modify it slightly in order to make it raise a catchable exception instead:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;"do this instead
call function 'some_rfc_fm'
  destination rfc_key
  exporting param       = 'value'
  importing return_data = return_data
  tables table_data     = table_data.
  exceptions others = 1.

if sy-subrc &amp;lt;&amp;gt; 0.
  raise exception type cx_rfc_dest_provider_error "or any other exception that you want
  exporting textid = cx_rfc_dest_provider_error=&amp;gt;connection_failed.
endif.​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;And a little caveat, it's not the best idea to put all the exception codes into 1 "bucket" with&amp;nbsp;&lt;CODE&gt;others = 1&lt;/CODE&gt;, and it's also probably not the best idea to raise just 1 type of exception, and specifically this type, but the goal of this example is to show how to convert an uncatchable exception into a catchable one.&lt;/P&gt;&lt;H2 id="toc-hId--444469471"&gt;Alternatives&lt;/H2&gt;&lt;P&gt;Now at this stage an obvious question is are there any alternatives or flavors of this implementation? Yes there're, and I will explain some now:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Instead of retry &lt;STRONG&gt;on all except&lt;/STRONG&gt; &lt;CODE&gt;zcx_phoenix&lt;/CODE&gt;, retry &lt;STRONG&gt;only on&lt;/STRONG&gt; &lt;CODE&gt;zcx_phoenix&lt;/CODE&gt;. In case that you have a very good exception handling, and you're controlling each exception you're raising, you can refactor the framework so it will retry only on a specific custom exception, instead of retrying on all exceptions. This way you have a bit more granular control over your execution flow. Similarly how it's done in the &lt;A href="https://help.sap.com/docs/abap-cloud/abap-concepts/implementing-automatic-retry-of-failed-operations?locale=en-US" target="_self" rel="noopener noreferrer"&gt;bgPF framework&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;RAISE EXCEPTION NEW cx_bgmc_operation( 
	retry_settings = VALUE #( 
		delay_time = 2
		do_retry   = abap_true ) ).​&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;Another flavor of a fault-tolerant job framework would include a bit of a paradigm change, and we will need to give up the base class - child class relationship with a single job architecture in favor of a &lt;STRONG&gt;driver&amp;nbsp;&lt;/STRONG&gt;-&amp;nbsp;&lt;STRONG&gt;worker&amp;nbsp;&lt;/STRONG&gt;relationship. You will have a 2 job architecture, the 1st job will be the&amp;nbsp;&lt;STRONG&gt;driver&lt;/STRONG&gt; job, which will take as a parameter the name of the job with the business logic and it will schedule that job as the&amp;nbsp;&lt;STRONG&gt;worker&lt;/STRONG&gt; job, it will wait until that one has finished successfully, if it has failed then it will just &lt;STRONG&gt;spin up anothe&lt;/STRONG&gt;r worker job, until one finishes successfully. You should use this pattern in case the limitations listed in the limitations section are a&amp;nbsp;showstopper for you, f.ex. you need a stateful job class with state isolation between runs. In my opinion this is a good approach but for certain usecases only, in general I prefer the current approach being more lightweight and flexible&lt;/LI&gt;&lt;/UL&gt;&lt;H1 id="toc-hId--347579969"&gt;Closing notes&lt;/H1&gt;&lt;P&gt;The Phoenix Framework demonstrate that robust doesn't necessary mean complex, reliability can be achieved with a relatively simple and lightweight setup. With a structured retry mechanism we managed to achieve fault-tolerant jobs, and reduce manual recovery efforts.&lt;/P&gt;&lt;P&gt;This framework is not perfect, nor it should be, it's main goal is to ensure that people's time is respected and not wasted because of preventable issues.&lt;/P&gt;&lt;P&gt;Thanks for reading until here, and as a closing remark I must say that it's often through our failures that we find opportunities to improve, just like the Phoenix, this framework was born from the ashes of failed jobs, rising stronger each time.&lt;/P&gt;&lt;P&gt;If you're curious please check the &lt;A href="https://github.com/legonmarian/abap-btp-phoenix-framework" target="_self" rel="nofollow noopener noreferrer"&gt;full source code here&lt;/A&gt;.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/automatic-retry-of-application-jobs-in-abap-in-cloud/ba-p/14249591"/>
    <published>2025-10-22T08:12:39.185000+02:00</published>
  </entry>
</feed>
