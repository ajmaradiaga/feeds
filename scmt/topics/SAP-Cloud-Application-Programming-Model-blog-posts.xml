<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/SAP-Cloud-Application-Programming-Model-blog-posts.xml</id>
  <title>SAP Community - SAP Cloud Application Programming Model</title>
  <updated>2025-08-19T02:00:49.676073+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/SAP Cloud Application Programming Model/pd-p/9f13aee1-834c-4105-8e43-ee442775e5ce" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>SAP Cloud Application Programming Model blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/crm-and-cx-blog-posts-by-members/extending-sap-sales-and-service-cloud-v2-using-cap/ba-p/14148780</id>
    <title>Extending SAP Sales and Service Cloud V2 Using CAP</title>
    <updated>2025-07-09T23:17:01.044000+02:00</updated>
    <author>
      <name>Quablab</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/167943</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot From 2025-07-09 23-12-52.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284764i8181D58C62029EB9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot From 2025-07-09 23-12-52.png" alt="Screenshot From 2025-07-09 23-12-52.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;SAP Sales and Service Cloud V2 (SSCV2) is SAP's next-generation, cloud-native CRM solution. Unlike earlier SAP applications, SSCV2 is built directly on hyperscalers—such as AWS—without relying on the SAP Business Technology Platform (BTP) as a runtime foundation. This architecture enables cloud-native scalability but also demands a strict separation between the core system and its extensions due to the solution’s multi-tenant nature, where all customers share the same application and database environment.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To support flexibility, SSCV2 introduces powerful &lt;/SPAN&gt;&lt;STRONG&gt;side-by-side extensibility&lt;/STRONG&gt;&lt;SPAN&gt;, allowing external applications to connect via APIs, events, and UIs. In parallel, it also offers &lt;/SPAN&gt;&lt;STRONG&gt;in-app extensibility&lt;/STRONG&gt;&lt;SPAN&gt; through configuration, business rules, and workflow adjustments—addressing many common requirements without code.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1734294685"&gt;&lt;STRONG&gt;SAP CAP: A Foundation for Side-by-Side Extensions&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;SAP Cloud Application Programming Model (CAP) is a framework designed for building enterprise-grade applications on SAP BTP. CAP combines Core Data Services (CDS) for data modeling, service definitions, authentication, and integration with SAP tools like Identity Services and Destination service.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the context of SSCV2, CAP enables secure, modular, and scalable extensions—supporting APIs, event-driven architectures, and custom UIs. Let’s explore how CAP aligns with SSCV2’s extensibility model.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1537781180"&gt;&lt;STRONG&gt;Extension Patterns in SSCV2&lt;/STRONG&gt;&lt;/H2&gt;&lt;DIV class=""&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot From 2025-07-07 08-59-57.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284763i5069C6E765A15918/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot From 2025-07-07 08-59-57.png" alt="Screenshot From 2025-07-07 08-59-57.png" /&gt;&lt;/span&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;P&gt;&lt;SPAN&gt;SSCV2 supports six major extension patterns:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;STRONG&gt;Async Webhooks&lt;/STRONG&gt;&lt;SPAN&gt; – SSCV2 triggers external logic via asynchronous HTTP POST calls. Ideal for non-blocking tasks like enrichment or notifications.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Sync Webhooks&lt;/STRONG&gt;&lt;SPAN&gt; – Similar to async, but SSCV2 waits for a response. Used for in-process validation or conditional behavior.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Low-Code UI Extensions&lt;/STRONG&gt;&lt;SPAN&gt; – Embedded apps (e.g., SAP Build Apps) in SSCV2 via iFrames, context-aware but limited to frontend logic.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Pro-Code Full Stack Extensions&lt;/STRONG&gt;&lt;SPAN&gt; – Rich web applications with frontend, backend, and storage, also embedded via iFrames.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;External Job Scheduling&lt;/STRONG&gt;&lt;SPAN&gt; – Batch or recurring tasks triggered via SAP Job Scheduler, calling SSCV2 APIs as needed.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;External Event Processing&lt;/STRONG&gt;&lt;SPAN&gt; – Events published to brokers (e.g., SAP Event Mesh), consumed asynchronously by external systems.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN&gt;These patterns map to three core capabilities: &lt;/SPAN&gt;&lt;STRONG&gt;Webhooks&lt;/STRONG&gt;&lt;SPAN&gt;, &lt;/SPAN&gt;&lt;STRONG&gt;Service/API Calls&lt;/STRONG&gt;&lt;SPAN&gt;, and &lt;/SPAN&gt;&lt;STRONG&gt;UI Embedding&lt;/STRONG&gt;&lt;SPAN&gt;. CAP supports all of them—making it a strong candidate for a unified extensibility framework.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1341267675"&gt;&lt;STRONG&gt;Applying CAP in SSCV2 Scenarios&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;While CAP is a great fit for SSCV2 extensions, there are some nuances to consider:&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1273836889"&gt;&lt;STRONG&gt;API Integration&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;CAP integrates seamlessly with SSCV2 APIs using SAP BTP Destination service, enabling secure, user-context-aware calls without manual token handling. This makes CAP ideal for service integrations, enrichment, or orchestrations.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1077323384"&gt;&lt;STRONG&gt;Webhooks&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;CAP Actions can handle webhook calls from SSCV2 effectively. However, CAP’s strict schema validation introduces risks. SSCV2 may deploy non-breaking schema changes (like adding a field) without prior notice—but CAP may reject the payload, causing runtime errors:&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "error": {
    "message": "Property \"new\" does not exist in currentImage",
    "code": "400"
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;This can break critical flows. Workarounds include disabling validation or handling webhooks outside the CAP context, but these are compromises rather than long-term solutions.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-880809879"&gt;&lt;STRONG&gt;UI Embedding&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;CAP can serve UIs embedded via iFrames into SSCV2. While functional, a few challenges persist:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;Authentication&lt;/STRONG&gt;&lt;SPAN&gt; must be handled separately. Today’s cookie-based approach may break once third-party cookies are deprecated.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Performance&lt;/STRONG&gt;&lt;SPAN&gt; is affected by redundant redirects and handshakes.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;UI event integration&lt;/STRONG&gt;&lt;SPAN&gt; with SSCV2 requires custom handling.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;These are minor hurdles, but improving this flow would enhance CAP’s usability as a UI extension layer.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-555213655"&gt;&lt;STRONG&gt;Summary&lt;/STRONG&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN&gt;SAP CAP is a strong fit for extending SSCV2. It aligns well with SSCV2’s architecture and supports all key extensibility patterns: APIs, webhooks, and embedded UIs. Its tight integration with SAP BTP reduces development effort and provides enterprise-grade reliability.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;However, certain aspects—like schema rigidity for webhooks and authentication challenges for embedded UIs—highlight areas for improvement. Some of these could be addressed with better documentation or usage guidance; others may require enhancements to CAP itself.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;CAP is well-positioned to be the go-to framework for SSCV2 side-by-side extensions. But as SSCV2 evolves as a truly cloud-native solution, it’s time to adapt CAP further to match that vision.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you're working on or exploring extensibility for SAP Sales and Service Cloud V2, I’d love to hear your thoughts and experiences—especially around using CAP for these scenarios. Let’s collaborate to shape a more robust and developer-friendly extensibility model. Feel free to reach out or start the discussion!&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-358700150"&gt;&lt;STRONG&gt;Further Reading&lt;/STRONG&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;A class="" href="https://community.sap.com/t5/crm-and-cx-blog-posts-by-sap/extensibility-overview-sap-sales-and-service-cloud-v2/ba-p/13964854" target="_blank"&gt;Extensibility Overview SAP Sales and Service Cloud V2&lt;/A&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/crm-and-cx-blog-posts-by-members/extending-sap-sales-and-service-cloud-v2-using-cap/ba-p/14148780"/>
    <published>2025-07-09T23:17:01.044000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/exploring-application-frontend-service-deploying-the-ui-of-an-mta-app/ba-p/14149899</id>
    <title>Exploring Application Frontend Service: Deploying the UI of an MTA App</title>
    <updated>2025-07-12T23:13:49.105000+02:00</updated>
    <author>
      <name>MioYasutake</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/789</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1734325477"&gt;Introduction&lt;/H2&gt;&lt;P&gt;Application Frontend Service (AFS) was introduced in May this year (see &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408" target="_self"&gt;blog&lt;/A&gt;). It is &lt;SPAN&gt;a single point of entry for hosting, serving and operating frontend applications. It shares some functionality with the HTML5 Application Repository service, particularly in hosting HTML5 applications, but it is intended to support single-tenant, stand-alone applications.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Native integration with SAP Build Work Zone is not yet supported. AFS&amp;nbsp;&lt;/SPAN&gt;has become available for BTP trial accounts since June (see &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/application-frontend-service-now-generally-available-in-sap-btp-trail/ba-p/14134649" target="_self"&gt;blog&lt;/A&gt;), so I wanted to try this out to find out – as always – how to deploy an MTA application (CAP + UI) using AFS.&lt;/P&gt;&lt;P&gt;The final architecture looks like the image below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AFS.drawio.png" style="width: 571px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285747iEC48A0B2ED61492B/image-size/large?v=v2&amp;amp;px=999" role="button" title="AFS.drawio.png" alt="AFS.drawio.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Link to GitHub repository:&amp;nbsp;&lt;A href="https://github.com/miyasuta/cap-afs-sample" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/miyasuta/cap-afs-sample&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1537811972"&gt;Prerequisites&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;Perform the initial set up of AFS as described in the&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/75"&gt;@Yogananda&lt;/a&gt;'s&amp;nbsp;&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/application-frontend-service-now-generally-available-in-sap-btp-trail/ba-p/14134649" target="_self"&gt;blog post&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1341298467"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-1144784962"&gt;Getting Started&lt;/H2&gt;&lt;H3 id="toc-hId-1077354176"&gt;1. Create a CAP Project&lt;/H3&gt;&lt;P&gt;Initialize a CAP project using the following commands:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds init cap-afs-sample
cd cap-afs-sample
cds add tiny-sample&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-880840671"&gt;2. Add a Fiori Elements UI&lt;/H3&gt;&lt;P&gt;Launch the SAP Fiori generator and select the List Report template.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_0-1752180798469.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285265iB34817729E17B923/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MioYasutake_0-1752180798469.png" alt="MioYasutake_0-1752180798469.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select "Use a Local CAP Project" for the Data Source.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_2-1752181084185.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285282iB31C3129DB7A840A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MioYasutake_2-1752181084185.png" alt="MioYasutake_2-1752181084185.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Configure the application details and press "Finish".&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_3-1752181202223.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285283iCB13CDA255D9EE21/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MioYasutake_3-1752181202223.png" alt="MioYasutake_3-1752181202223.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-684327166"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-487813661"&gt;3. Add Deployment Configurations&lt;/H3&gt;&lt;P&gt;Add deployment configurations using the following commands:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add xsuaa,hana --for production
cds add mta&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next, execute the following command. Although we are not going to deploy to the HTML5 Application Repository, it will add necessary configurations for UI such as xs-app.json ad ui5-deploy.yaml.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add html5-repo&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId-291300156"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId-94786651"&gt;4. Adjust Configurations for Adapting to AFS&lt;/H3&gt;&lt;P&gt;In order to deploy the UI to AFS, some configurations need to be changed.&lt;/P&gt;&lt;H4 id="toc-hId--470361230"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H4 id="toc-hId--666874735"&gt;4.1. xs-app.json&lt;/H4&gt;&lt;P&gt;Update the app/managebooks/xs-app.json as follows. Make sure to replace the &lt;STRONG&gt;html5-apps-repo-rt&lt;/STRONG&gt; with &lt;STRONG&gt;app-front&lt;/STRONG&gt;.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/?odata/(.*)$",
      "target": "/odata/$1",
      "destination": "srv-api",
      "authenticationType": "xsuaa",
      "csrfProtection": true
    },
    {
      "source": "^/resources/(.*)$",
      "target": "/resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/test-resources/(.*)$",
      "target": "/test-resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "app-front",
      "authenticationType": "xsuaa"
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId--863388240"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H4 id="toc-hId--1059901745"&gt;4.2. mta.yaml&lt;/H4&gt;&lt;P&gt;Replace the resource for html5-apps-repo with the one for app-front.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;# Before
modules:
...
  - name: cap-afs-sample-app-deployer
    type: com.sap.application.content
    path: gen
    requires:
      - name: cap-afs-sample-html5-repo-host
        parameters:
          content-target: true
...
resources:
...
  - name: cap-afs-sample-html5-repo-host
    type: org.cloudfoundry.managed-service
    parameters:
      service: html5-apps-repo
      service-plan: app-host​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Note that in the requires section of the application deployer, html5-repo-host was removed and 3 dependencies were added - xsuaa, afs and srv-api. We wil use the srv-api for configuring a destination in the next step.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;# After
modules:
...
  - name: cap-afs-sample-app-deployer
    type: com.sap.application.content
    path: gen
    requires:
      - name: cap-afs-sample-auth
      - name: cap-afs-sample-afs  
        parameters:
          content-target: true  
      - name: srv-api
...
resources:
...
  - name: cap-afs-sample-afs
    type: org.cloudfoundry.managed-service
    parameters:
      service: app-front
      service-plan: developer&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Add a parameters section after the requires section. Here, destinations for UI5 resources and the CAP API are maintained.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;  - name: cap-afs-sample-app-deployer
    type: com.sap.application.content
    path: gen
    requires:
      - name: cap-afs-sample-auth
      - name: cap-afs-sample-afs  
        parameters:
          content-target: true  
      - name: srv-api
    parameters:
      config:
        destinations:
        - name: ui5
          url: https://ui5.sap.com
        - name: srv-api
          url: ~{srv-api/srv-url}
          forwardAuthToken: true  &lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId--963012243"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId--1159525748"&gt;5. Deploy&lt;/H3&gt;&lt;P&gt;Run the following commands to deploy the MTA.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i --prefix app/managebooks
cds up&lt;/code&gt;&lt;/pre&gt;&lt;H3 id="toc-hId--1356039253"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId--1552552758"&gt;6. Find the Application URL&lt;/H3&gt;&lt;P&gt;After the deployment is finished, execute the following commands:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl login --sso -a &amp;lt;api_endpoint&amp;gt;
afctl list&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;You will find the list of deployed applications. Click on the URL for the app you just deployed.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_4-1752184006389.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285290i9975B2588806C7F9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MioYasutake_4-1752184006389.png" alt="MioYasutake_4-1752184006389.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The deployed application will open in the browser. However, I noticed one issue: the buttons on the UI (for example, the "Go" button) are not clickable, while other controls remain interactive. I haven't figured out if this is an issue with AFS or the application itself. If anyone has been able to fix this, please let me know in the comments section.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_0-1752266668432.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285684i9A665E2A9A1E72B0/image-size/medium?v=v2&amp;amp;px=400" role="button" title="MioYasutake_0-1752266668432.png" alt="MioYasutake_0-1752266668432.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--1455663256"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId--1652176761"&gt;Issue: Deploying the UI part with "afctl push" Causes Loss of Destination Configuration&lt;/H2&gt;&lt;P&gt;According to the &lt;A href="https://help.sap.com/docs/application-frontend-service/application-frontend-service/ui-development-cycles-with-application-frontend" target="_self" rel="noopener noreferrer"&gt;documentation&lt;/A&gt;, you can&amp;nbsp;&lt;SPAN&gt;first deploy the application using MTA, and then redeploy any subsequent UI changes using the Application Frontend CLI.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="loioc9500e58e3f84b139ba69f956c65374c_Source1" style="width: 728px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/285746i64380F9ED201C8FA/image-size/large?v=v2&amp;amp;px=999" role="button" title="loioc9500e58e3f84b139ba69f956c65374c_Source1" alt="loioc9500e58e3f84b139ba69f956c65374c_Source1" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;I tried deploying the UI using the following commands:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;# Build the UI
cd app/managebooks
npm run build

# Deploy
afctl push dist&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The deployment was successful, but the app failed to connect to the backed. I saw a 500 error in the browser's network tab. When I redeployed the entire MTA, the app started working again. It seems that the destination configuration defined in the mta.yaml was lost when deploying only the UI with `afctl push` command. If anyone has insights into this issue, please let me know.&lt;/P&gt;&lt;H2 id="toc-hId--1680506575"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId--1877020080"&gt;Final Thoughts&lt;/H2&gt;&lt;P&gt;Initially, &lt;A href="https://community.sap.com/t5/technology-q-a/application-frontend-service-with-standalone-approuter/qaq-p/14147762" target="_self"&gt;I was struggling to deploy the application using a standalone approuter&lt;/A&gt;. Then I realized that the AFS includes routing and authentication functionality, and therefor the standalone approuter was not needed. Using AFS seems to be an optimal approach for standalone UI applications as it eliminates the need to run a standalone approuter and manage its instances and memory.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/exploring-application-frontend-service-deploying-the-ui-of-an-mta-app/ba-p/14149899"/>
    <published>2025-07-12T23:13:49.105000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/accelerate-your-ai-and-innovation-journey-with-expert-guided-services-from/ba-p/14152010</id>
    <title>Accelerate Your AI and Innovation Journey with Expert-Guided Services from SAP</title>
    <updated>2025-07-14T15:55:35.142000+02:00</updated>
    <author>
      <name>RobertKelly</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/7029</uri>
    </author>
    <content>&lt;P&gt;At SAP, we are committed to helping our customers innovate and adopt technologies quickly, effectively, and with confidence. As part of this mission, we’re excited to share a series of &lt;STRONG&gt;expert-guided services and enablement opportunities&lt;/STRONG&gt; offered through the &lt;A href="https://news.sap.com/2025/05/simplify-success-services-support-engagement-model" target="_blank" rel="noopener noreferrer"&gt;Foundational success plan&lt;/A&gt; designed to help you unlock the power of SAP BTP including AI, SAP Build, and SAP HANA Cloud solutions.&lt;/P&gt;&lt;P&gt;These offerings of&amp;nbsp;&lt;A href="https://support.sap.com/en/offerings-programs/enterprise-support/enterprise-support-academy/expert-guided-implementation.html" target="_blank" rel="noopener noreferrer"&gt;Expert Guided Implementation workshops&lt;/A&gt;&amp;nbsp;(EGI) from SAP Enterprise Support are tailored to provide hands-on support and guided experiences, helping you get started with the latest innovations while minimizing complexity and accelerating time-to-value.&lt;/P&gt;&lt;P&gt;Whether you're looking to innovate and improve business processes through process automations, harness the power of AI to accelerate innovations, this series has something for everyone.&lt;/P&gt;&lt;P&gt;The following EGI sessions will run throughout the year with quarterly updates to the schedule.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Available Services at a Glance&lt;/STRONG&gt;&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Topic&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Service Name&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Vector Engine, Knowledge Graph and Generative AI &lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/fast-track-your-ai-journey-with-sap-hana-cloud-s-vector-engine-through-our/ba-p/14113592" target="_blank"&gt;SAP HANA Cloud Multiple Model Programming using Vector Engine and Retrieval Augmented Generation&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Multi-day service to help customers activate and explore the Vector Engine and Knowledge Graph in SAP HANA Cloud, enabling large language model (LLM) integration and generative AI scenarios. Currently in pilot through the &lt;A href="https://support.sap.com/en/offerings-programs/enterprise-support/enterprise-support-advisory-council.html" target="_blank" rel="noopener noreferrer"&gt;SAP ESAC&lt;/A&gt; program.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Joule &lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_00010594%2526selKeyWordHeader%253dSUP_EDE_00010594%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;Support to Activate Joule in SAP S/4HANA Cloud, Private Edition&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;2-day service to empower customers on how to fulfil the prerequisites to activate Joule to be used with SAP S/4HANA Cloud Private Edition (PCE).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Development using Build Code and Joule&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_00010516%2526selKeyWordHeader%253dSUP_EDE_00010516%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;SAP Cloud Application Programming Development using SAP Build Code and Joule&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Multi-day service to empower customers with the knowledge of CAP Development in SAP HANA Cloud. After the service, customers will know of CAP development and design in SAP HANA Cloud utilizing the SAP Business Application Studio and SAP Build Code with Joule.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;SAP Build Apps&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_00004457%2526selKeyWordHeader%253dSUP_EDE_00004457%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;SAP Build Apps&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Multi-day service to help customers adopt SAP Build Apps for low-code/no-code development, including hands-on support and best practice guidance.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Process Automation&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_0080_0523%2526selKeyWordHeader%253dSUP_EDE_0080_0523%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;SAP Build Process Automation&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Multi-day guidance designed to help customers get started with SAP Build Process Automation, including hands-on support and best practice guidance.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Administration, Monitoring topics for SAP HANA Cloud&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_0020_0123%2526selKeyWordHeader%253dSUP_EDE_0020_0123%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;Configuration, Administration, Security and Monitoring topics for SAP HANA Cloud&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Help customers with SAP HANA Cloud capabilities, key features available and admin tools for database Monitoring.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P&gt;&lt;STRONG&gt;Modeling in SAP HANA Cloud&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;&lt;A href="https://accounts.sap.com/saml2/idp/sso?sp=https://www.successfactors.eu/learninghub&amp;amp;RelayState=%2Fsf%2Flearning%3FdestUrl%3Dhttps%253a%252f%252fsaplearninghub%252eplateau%252ecom%252flearning%252fuser%252fdeeplink%255fredirect%252ejsp%253flinkId%253dCATALOG%255fSEARCH%2526sbArSel%253d%2526keywords%253dSUP_EDE_0110_0823%2526selKeyWordHeader%253dSUP_EDE_0110_0823%2526catSel%253d%2526srcSel%253dESAC%2526delMthSel%253d%2526ILDateFrm%253d%2526ILDateTo%253d%2526ILBlend%253d%2526ILSchd%253d%2526fromSF%253dY%26company%3Dlearninghub" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Cloud Modeling&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P&gt;Empower customers with the knowledge of Modeling in SAP HANA Cloud.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;What to expect from these services&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;All services are delivered by SAP experts and follow a &lt;STRONG&gt;structured, guided approach&lt;/STRONG&gt; that includes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Overview of the solution capabilities&lt;/LI&gt;&lt;LI&gt;Step-by-step technical guidance&lt;/LI&gt;&lt;LI&gt;Hands-on activities to accelerate learning and adoption&lt;/LI&gt;&lt;LI&gt;Best practices and tips for long-term success&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;These expert-guided services are ideal for customers looking to &lt;STRONG&gt;accelerate their transformation journey&lt;/STRONG&gt;, whether you're exploring AI for the first time, expanding your use of SAP HANA Cloud, or adapting business processes with SAP Build.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How it works&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Web session, 1-2 hours each morning where SAP expert explains the topic using training materials&lt;/LI&gt;&lt;LI&gt;Duration is from 2 to 5 days depending on the topic&lt;/LI&gt;&lt;LI&gt;Set daily schedule with pre-defined goals for each day&lt;/LI&gt;&lt;LI&gt;Available across different time zones and languages (topic dependent)&lt;/LI&gt;&lt;LI&gt;Afternoon 2-3 hours on the same day where you execute demonstrated steps within your own project, on your own SAP environment&lt;/LI&gt;&lt;LI&gt;During that time, you have direct access to the SAP expert delivering the workshop for guidance and support&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Registration closes one week before the session date – sign up early!&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;If you are interested in participating in these expert-guided services or learning more, simply follow the links above to register for the service.&lt;/P&gt;&lt;P&gt;For customers if you have issues accessing the above links, there may be an authorizations issue. Please note a one-time registration in SAP Learning Hub, edition for SAP Enterprise Support, is required for accessing the EGI service. A detailed step-by step guide to registration can be found&amp;nbsp;&lt;A href="https://support.sap.com/en/offerings-programs/enterprise-support/enterprise-support-academy/learn.html" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;A list of the EGI services and all other SAP BTP assets, services and content for SAP Enterprise Support customers are available through the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://support.sap.com/en/offerings-programs/enterprise-support/value-maps.html" target="_blank" rel="noopener noreferrer"&gt;SAP Enterprise Support Value Map program&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;As you continue to innovate with SAP, we are here to support you every step of the way. These services are designed to &lt;STRONG&gt;accelerate adoption, reduce complexity, and drive outcomes&lt;/STRONG&gt; so you can make the most of your SAP investments at no additional cost.&lt;/P&gt;&lt;P&gt;Don’t miss the opportunity to engage with SAP experts and take your next steps in AI, innovation, and automation. Let us help you fast-track your success!&lt;/P&gt;&lt;P&gt;Thanks and Regards,&lt;/P&gt;&lt;P&gt;Robert Kelly&lt;/P&gt;&lt;P&gt;BTP Lead Architect - SAP Enterprise Support&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/accelerate-your-ai-and-innovation-journey-with-expert-guided-services-from/ba-p/14152010"/>
    <published>2025-07-14T15:55:35.142000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cap-just-got-faster-what-s-new-in-cds-caching-1-0/ba-p/14152848</id>
    <title>CAP just got faster: What’s new in cds-caching 1.0</title>
    <updated>2025-07-15T12:46:46.360000+02:00</updated>
    <author>
      <name>mike_zaschka</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/144369</uri>
    </author>
    <content>&lt;P class=""&gt;Caching is a proven strategy to boost performance in (cloud-based) applications, especially when working with slow remote services, repetitive queries, or expensive computations. For developers building applications and services with the SAP Cloud Application Programming Model (CAP), the &lt;A href="https://github.com/mikezaschka/cds-caching" target="_self" rel="nofollow noopener noreferrer"&gt;open-source &lt;SPAN class=""&gt;cds-caching&lt;/SPAN&gt; plugin&lt;/A&gt; offers a powerful, flexible, and easy-to-integrate solution for application-level caching.&amp;nbsp;&lt;SPAN class=""&gt;Last week at &lt;A href="https://recap-conf.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;reCAP 2025&lt;/A&gt;&lt;/SPAN&gt;, I had the opportunity to introduce some of the new features of &lt;SPAN class=""&gt;cds-caching 1.0&lt;/SPAN&gt; live on stage and I am happy to announce that version 1.0 has now been published. This post includes a summary of what has changed.&lt;/P&gt;&lt;P class=""&gt;If you’re new to the project, check out the &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-members/boosting-performance-in-sap-cloud-application-programming-model-cap/ba-p/14002015" target="_blank"&gt;original introduction and deep dive on SAP Community&lt;/A&gt;, where I explained the motivation, architecture, and use cases in detail.&lt;/P&gt;&lt;H2 id="toc-hId-1735040305"&gt;&lt;STRONG&gt;What’s New in&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;cds-caching 1.0&amp;nbsp;&lt;/STRONG&gt;&lt;STRONG&gt;?&lt;/STRONG&gt;&lt;/H2&gt;&lt;H3 id="toc-hId-1667609519"&gt;&lt;STRONG&gt;New Read-Through API: &lt;/STRONG&gt;&lt;STRONG&gt;cache.rt.*&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;While cds-caching already supported&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;read-through caching&lt;/SPAN&gt;&amp;nbsp;from the beginning, version 1.0 extends the functionality and clearly separates between read-aside and read-through. With read-through, the caching service automatically handles lookups and population. You just call a method like &lt;SPAN class=""&gt;cache.rt.run()&lt;/SPAN&gt; and get the result, whether from cache or freshly fetched. This contrasts with the&amp;nbsp;&lt;SPAN class=""&gt;read-aside&lt;/SPAN&gt; pattern, where developers manually need to check and update the cache, leading to more boilerplate code. So&amp;nbsp;&lt;SPAN class=""&gt;read-through&lt;/SPAN&gt; offers less code, better maintainability, and built-in observability.&lt;BR /&gt;Available methods under &lt;SPAN class=""&gt;cache.rt&lt;/SPAN&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;run()&lt;/SPAN&gt; – Wraps CQN queries and requests sent via srv.run (see &lt;A href="https://cap.cloud.sap/docs/node.js/core-services#srv-run-query" target="_self" rel="nofollow noopener noreferrer"&gt;CAP docs&lt;/A&gt;)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;send()&lt;/SPAN&gt; – Wraps service calls sent via srv.send (see &lt;A href="https://cap.cloud.sap/docs/node.js/core-services#srv-run-query" target="_self" rel="nofollow noopener noreferrer"&gt;CAP docs&lt;/A&gt;)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;exec()&lt;/SPAN&gt; – Wraps function execution&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;wrap()&lt;/SPAN&gt; – General-purpose caching&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Each method returns not only the result, but additional read-through data::&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
  result,      // your cached data
  cacheKey,    // the generated cache key
  metadata     // cache hit/miss, TTL info, etc.
}&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;The old methods (&lt;SPAN class=""&gt;cache.run()&lt;/SPAN&gt;, &lt;SPAN class=""&gt;cache.send()&lt;/SPAN&gt;, etc.) are now &lt;SPAN class=""&gt;&lt;STRONG&gt;deprecated&lt;/STRONG&gt;&lt;/SPAN&gt; and will be removed in a future release.&lt;/P&gt;&lt;P&gt;Before:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const result = await cache.run(...);&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;After:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const { result } = await cache.rt.run(...);&lt;/code&gt;&lt;/pre&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1471096014"&gt;More transparent Key Management&lt;/H3&gt;&lt;P&gt;Cache keys are now handled the same way across all operations to ensure consistency.&amp;nbsp;&lt;/P&gt;&lt;H4 id="toc-hId-1403665228"&gt;&lt;SPAN&gt;Context&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Awareness is&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Opt-In&lt;/SPAN&gt;&lt;/H4&gt;&lt;P&gt;&lt;SPAN&gt;User, tenant&lt;/SPAN&gt;&lt;SPAN&gt;, and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;locale context&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;are no&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;longer only&amp;nbsp;included request-based&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;keys by&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;default&lt;/SPAN&gt;&lt;SPAN&gt;. They&amp;nbsp; can&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;be enabled&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;globally&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;or&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;per&lt;/SPAN&gt;&lt;SPAN&gt;-operation, allowing for more control over&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;cache key&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;granularity&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt; &lt;SPAN class=""&gt;&lt;SPAN&gt;Enable context&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;globally&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;in your configuration, if your application supports data for different users, locales and/or multi-tenancy&lt;/SPAN&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
  "cds": {
    "requires": {
      "caching": {
        //...
        "keyManagement": {
          "isUserAware": true,
          "isTenantAware": false,
          "isLocaleAware": true
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The default behavior can be overridden individually for each cache operation by providing a placeholder string:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;await cache.rt.run(query, db, { key: "mykey:{tenant}:{user}:{locale}:{hash}" });&lt;/code&gt;&lt;/pre&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-1078069004"&gt;&lt;SPAN&gt;Comprehensive Metrics &amp;amp; Monitoring&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;cds-caching&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;1&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;SPAN&gt;0 brings&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;a&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;new&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;level&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;of&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;transparency&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;control&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;to&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;a caching strategy with a comprehensive metrics and monitoring system. It is possible&amp;nbsp;to track both&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;real-time&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;historical&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;performance, analyze usage patterns at the key level, and fine-t&lt;/SPAN&gt;&lt;SPAN&gt;une&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;monitoring settings on the fly.&lt;/SPAN&gt; &lt;SPAN class=""&gt;&lt;SPAN&gt;Key Features:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Real-Time Metrics:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Instantly monitor cache hit/miss rates&lt;/SPAN&gt;&lt;SPAN&gt;, operation throughput, and latency to quickly assess cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;health&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and effectiveness.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Historical Analytics:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Persist&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;review metrics over time (hourly, daily, etc.) to identify trends, spot anomalies, and optimize cache configuration.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Key-Level Analytics:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Drill down into individual cache keys to see which data is accessed most, which keys are underperforming, and how specific queries or requests behave.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Runtime Configuration:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Enable or disable metrics collection at runtime, without restarting your application, for flexible monitoring and minimal overhead.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Tracked KPIs include:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Hit Ratio:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Percentage of requests served from cache (higher is better).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Miss Ratio:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Percentage of requests resulting in&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;a cache miss.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Average Hit Latency:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Time to serve a cache hit (should be very low).&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Average Miss Latency:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Time&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;to fetch and cache a value after a miss.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Through&lt;/SPAN&gt;&lt;SPAN&gt;put:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Number of cache operations&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;per&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;second.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Error&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Rate&lt;/SPAN&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Percentage of cache operations that result in errors.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Cache Efficiency:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Ratio of miss latency to hit latency, showing the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;performance&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;gain from caching.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;With these insights, it is possible to continuously or selectively monitor, analyze, and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;optimize&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;a caching approach.&lt;/SPAN&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-881555499"&gt;&lt;SPAN&gt;Integrated OData-API&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;cds-caching&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;1.0 features a fully integrated OData API&lt;/SPAN&gt;&lt;SPAN&gt;, making&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;all (basic) cache operations and metrics accessible via&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;standard&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;HTTP endpoints. This enables seamless integration with external monitoring tools, dashboards, and custom admin UIs.&lt;/SPAN&gt;&amp;nbsp; Features of the&amp;nbsp;&lt;SPAN class=""&gt;&lt;SPAN&gt;OData API:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Query cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;statistics&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and key-level metrics&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;for real-time and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;historical&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;analysis.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;List&lt;/SPAN&gt;&lt;SPAN&gt;, inspect&lt;/SPAN&gt;&lt;SPAN&gt;, or&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;clear&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;entries&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;directly&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;from&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;your&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;monitoring&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;tool&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;or&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;admin&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;interface&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Enable&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;or&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;disable metrics collection&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and adjust runtime&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;configuration&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;remotely.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;The OData API can easily be access via custom application (see next section) for&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;SAP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Fiori Elements.&lt;/SPAN&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-685041994"&gt;&lt;SPAN&gt;Example&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Application&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;amp; Dashboard&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;A new&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;example&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;CAP application and UI5-based dashboard are included for hands&lt;/SPAN&gt;&lt;SPAN&gt;-on learning&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and real-time cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;monitoring&lt;/SPAN&gt;&lt;SPAN&gt;. It shows the usage of the OData API as well as the key metrics.&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Backend Application&lt;/SPAN&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Demonstrates annotation-based&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and programmatic&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;caching patterns.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Dashboard&lt;/SPAN&gt;&lt;SPAN&gt;:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Visualizes cache&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;metrics, key analytics, and historical data&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="dashboard.jpg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286816iDE8ED90700D1FF6A/image-size/large?v=v2&amp;amp;px=999" role="button" title="dashboard.jpg" alt="dashboard.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;See the full &lt;A href="https://github.com/mikezaschka/cds-caching/blob/main/docs/example-app.md" target="_self" rel="nofollow noopener noreferrer"&gt;Example Application Guide on GitHub&lt;/A&gt; →&lt;/SPAN&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-488528489"&gt;&lt;SPAN&gt;Improved Type&lt;/SPAN&gt;&lt;SPAN&gt;Script&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Support&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;cd&lt;/SPAN&gt;&lt;SPAN&gt;s-c&lt;/SPAN&gt;&lt;SPAN&gt;aching&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;1&lt;/SPAN&gt;&lt;SPAN&gt;.0 provides&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;full Type&lt;/SPAN&gt;&lt;SPAN&gt;Script&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;definitions&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;for all&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;APIs&lt;/SPAN&gt;&lt;SPAN&gt;, making&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;it&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;easier and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;safer&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;to&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;use in&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;TypeScript-enabled&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;CAP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;projects&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { CachingService } from 'cds-caching';
const cache = await cds.connect.to('caching') as CachingService;
const { result } = await cache.rt.run(query, db);&lt;/code&gt;&lt;/pre&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-292014984"&gt;CAP v8 an CAP v9 support with enhanced quality&amp;nbsp;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;cds-caching&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;1.0 has been extensively&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;tested&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;with both&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;CAP v8&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;CAP v9&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;, ensuring smooth operation and&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;compatibility&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;with the latest features &lt;/SPAN&gt;&lt;SPAN&gt;of the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;SAP&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Cloud&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Application&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;Programming Model.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;To guarantee reliability and stability, the release is backed by&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;over&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;300 automated tests&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;covering a wide&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;range&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;of scenarios, edge cases, and integration points.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;HR /&gt;&lt;H3 id="toc-hId-95501479"&gt;&lt;STRONG&gt;Updated Documentation&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;The documentation has been expanded and reorganized. Highlights:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;Migration guide from &lt;SPAN class=""&gt;0.x → 1.0&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Key templating and context config&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Using &lt;SPAN class=""&gt;cache.rt.*&lt;/SPAN&gt; APIs&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Metrics and monitoring integration&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Cache invalidation strategies&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Check out the &lt;A href="https://github.com/mikezaschka/cds-caching?tab=readme-ov-file#checkout-detailed-information-on-how-to-use-cds-caching" target="_blank" rel="noopener nofollow noreferrer"&gt;docs on GitHub →&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-117159612"&gt;&lt;SPAN class=""&gt;&lt;SPAN&gt;Questions or&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;feedback&lt;/SPAN&gt;&lt;SPAN&gt;?&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/H2&gt;&lt;P class=""&gt;&lt;SPAN class=""&gt;cds-caching&lt;/SPAN&gt; is open-source and freely available for anyone to use, contribute to, and improve. I’d love to hear your thoughts!&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":light_bulb:"&gt;💡&lt;/span&gt;Found a bug or have a feature request? &lt;A href="https://github.com/mikezaschka/cds-caching/issues" target="_blank" rel="noopener nofollow noreferrer"&gt;Open an issue on GitHub&lt;/A&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;span class="lia-unicode-emoji" title=":handshake:"&gt;🤝&lt;/span&gt;Want to connect? Join the conversation in the &lt;SPAN class=""&gt;&lt;STRONG&gt;SAP Community&lt;/STRONG&gt;&lt;/SPAN&gt; or reach out on &lt;SPAN class=""&gt;&lt;STRONG&gt;social media&lt;/STRONG&gt;&lt;/SPAN&gt;.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cap-just-got-faster-what-s-new-in-cds-caching-1-0/ba-p/14152848"/>
    <published>2025-07-15T12:46:46.360000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/recap-re-gt-cap-2025/ba-p/14153141</id>
    <title>Recap re&gt;≡CAP 2025</title>
    <updated>2025-07-15T16:46:07.584000+02:00</updated>
    <author>
      <name>daniel_schlachter</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/255386</uri>
    </author>
    <content>&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;This years &lt;/SPAN&gt;&lt;A href="https://recap-conf.dev/" target="_self" rel="nofollow noopener noreferrer"&gt;re&amp;gt;≡CAP event&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;was full of interesting sessions and workshops, so many that after attending the conference I'm waiting for the recordings to watch the many things I've missed. (UPDATE: meanwhile available here: &lt;A title="https://broadcast.sap.com/replay/250709_recap" href="https://broadcast.sap.com/replay/250709_recap" target="_blank" rel="noopener noreferrer"&gt;Main Track (Room Yellow)&lt;/A&gt;&lt;BR /&gt;&lt;A title="https://www.youtube.com/playlist?list=PLJDFklpD_2cTjReIS8xQ2L0HnfjoxPUxd" href="https://www.youtube.com/playlist?list=PLJDFklpD_2cTjReIS8xQ2L0HnfjoxPUxd" target="_blank" rel="noopener nofollow noreferrer"&gt;Side Track /Room Blue)&lt;/A&gt;&amp;nbsp;) All the positive feedback and the great atmosphere made for a great day, followed by the evening event with a mix of well known and new friendly faces.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;H1 id="toc-hId-1605980643"&gt;&lt;SPAN&gt;Learnings&lt;/SPAN&gt;&lt;/H1&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;For me there were a few learnings from re&amp;gt;≡CAP - potentially a very different experience than others had and highly subjective, but here we go:&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;H2 id="toc-hId-1538549857"&gt;&lt;SPAN&gt;1. Sophisticated and complex applications are more and more built with CAP&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;We often talk about side-by-side extensions, where CAP is being used to extend already existing functionality on S/4 or SaaS solutions. This is still the case of course. But more and more we see entire solutions being built with CAP. Large solutions in some scenarios reaching hundreds (!) of developers (as well as single companies building 50+ applications with CAP). This requires new solution architectures, stronger best practices and so on to allow developer efficiency and building up the least technical debt possible.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;In the last months we have looked into some new concepts, like &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/guides/deployment/microservices" target="_blank" rel="noopener nofollow noreferrer"&gt;Microservices with a shared database&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;which we looked at in a &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://github.com/SAP-samples/cap-microservices-workshop" target="_blank" rel="noopener nofollow noreferrer"&gt;re&amp;gt;≡CAP workshop&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and many currently worked on topics like BDC, Dynamic Constraints, work around data federation, &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/releases/may25#task-queues" target="_blank" rel="noopener nofollow noreferrer"&gt;Event Queues&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and many more will feed into this even more.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;H2 id="toc-hId-1342036352"&gt;&lt;SPAN&gt;2. The world is full of hierarchies&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;Not sure if it was just the developers I talked to during re&amp;gt;≡CAP, but I got a lot of questions around hierarchies and tree tables, where the support with Fiori/OData was recently built on both &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/releases/june25#hierarchy-maintenance-in-tree-views" target="_blank" rel="noopener nofollow noreferrer"&gt;node&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and&lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://cap.cloud.sap/docs/releases/june25#tree-views-w-h2-database" target="_blank" rel="noopener nofollow noreferrer"&gt; java&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;stacks. It's one of those features where to my knowledge not too many stakeholders were asking for it, but now that it's available, the demand is there. As a customer, you can always raise &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://influence.sap.com/sap/ino/#/campaign/2280" target="_blank" rel="noopener noreferrer"&gt;influence requests&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;and let us know which features are missing - so we can prioritize the right things.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;H2 id="toc-hId-1145522847"&gt;&lt;SPAN&gt;3. Interest in CAP is massive&lt;/SPAN&gt;&lt;/H2&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;If you've tried to get a ticket for re&amp;gt;≡CAP before, you will know that tickets &lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://www.linkedin.com/posts/ole-lilienthal_recap-cap-activity-7316350997360996352-kYYT?utm_source=share&amp;amp;utm_medium=member_desktop&amp;amp;rcm=ACoAAAlpr3YBIM4sn3paGgZCeKIzZWEsWhcmk_U" target="_blank" rel="noopener nofollow noreferrer"&gt;sell out within a few minutes&lt;/A&gt;&amp;nbsp;- 3 minutes to be precise&lt;/SPAN&gt;&lt;SPAN&gt;. The participants (from 200+ companies) really came from all over the world (~25 countries including Australia!) to participate which is inspiring to see. While the capacity of our current location doesn't allow for more participants (around 450) I would be thrilled to see how a re&amp;gt;≡CAP with 1000 participants would look like &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;H2 id="toc-hId-949009342"&gt;&lt;SPAN&gt;4. Stay cool, stay local&lt;/SPAN&gt;&lt;/H2&gt;&lt;DIV&gt;&lt;SPAN&gt;This heading is not related to the current weather forecasts, I promise. Instead, we see many CAP projects - especially the large and complex ones - going into a mode where applications can only be developed and tested on BTP with all lights switched on.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;If you make a small change in your application, you should be able to see the results straight away and not only after a deployment. Troubleshooting is easier on your machine than in the cloud. CAP can mock remote services for you, different configuration profiles let you easily distinguish between &lt;/SPAN&gt;&lt;SPAN&gt;`development`&lt;/SPAN&gt;&lt;SPAN&gt; and &lt;/SPAN&gt;&lt;SPAN&gt;`production`&lt;/SPAN&gt;&lt;SPAN&gt; and the local database options (sqlite and h2) let you test almost everything locally out of the box. There was a&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;A href="https://github.com/SAP-samples/cap-local-development-workshop/tree/main" target="_blank" rel="noopener nofollow noreferrer"&gt;fantastic workshop&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;showing many of those features by the amazing &lt;/SPAN&gt;&lt;A title="DJ Adams" href="https://community.sap.com/t5/user/viewprofilepage/user-id/53" target="_self"&gt;&lt;SPAN&gt;DJ Adams&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/DIV&gt;&lt;BR /&gt;&lt;DIV&gt;&lt;SPAN&gt;That's it - my key takeaways. What were your highlights of re&amp;gt;≡CAP?&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/recap-re-gt-cap-2025/ba-p/14153141"/>
    <published>2025-07-15T16:46:07.584000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/streamlining-cap-development-with-cds-graphical-modeler-in-sap-business/ba-p/14143397</id>
    <title>Streamlining CAP Development with CDS Graphical Modeler in SAP Business Application Studio</title>
    <updated>2025-07-16T11:12:18.097000+02:00</updated>
    <author>
      <name>Jyoti_ranjan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2113957</uri>
    </author>
    <content>&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;As SAP developers, we often work extensively with Core Data Services (CDS) to define data models. While CDS offers powerful capabilities, managing complex models purely through code can be challenging—especially in large-scale enterprise applications. This is where the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;CDS Graphical Modeler&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;in&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;SAP Business Application Studio (BAS)&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;becomes a game-changer.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;What is CDS Graphical Modeler?&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The CDS Graphical Modeler allows developers to visually design entities, relationships, and services without manually writing&amp;nbsp; .cds&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;files. This visual approach enhances clarity, reduces errors, and improves collaboration between technical and business teams.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Step-by-Step: Creating Your First CAP Project with CDS Graphical Modeler&lt;/P&gt;&lt;P&gt;Lets create a dev space and then dive into the CAPM with cds:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Go to&amp;nbsp;&lt;A title="BTP COCKPIT Login" href="https://account.us1.hana.ondemand.com/#/home/welcome" target="_blank" rel="noopener nofollow noreferrer"&gt;BTP COCKPIT Login&lt;/A&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;1.Start by logging into the SAP Business Application Studio via the BTP Cockpit. You’ll see a list of existing dev spaces.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;If a suitable dev space already exists, you can use it.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Otherwise, click Create Dev Space.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_1-1749463155915.png" style="width: 665px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271647i567D16E8AEC5D556/image-dimensions/665x299?v=v2" width="665" height="299" role="button" title="Jyoti_ranjan_1-1749463155915.png" alt="Jyoti_ranjan_1-1749463155915.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;After you click on create devspace below screen will appear:&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_0-1749461813292.png" style="width: 673px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271641iF9AC34B00ABB56E2/image-dimensions/673x337?v=v2" width="673" height="337" role="button" title="Jyoti_ranjan_0-1749461813292.png" alt="Jyoti_ranjan_0-1749461813292.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. Create a Dev Space&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Enter a name for your dev space.&lt;/LI&gt;&lt;LI&gt;Select the&amp;nbsp;Full Stack Cloud Application&amp;nbsp;category.&lt;/LI&gt;&lt;LI&gt;Click&amp;nbsp;Create Dev Space.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Wait until the status changes to&amp;nbsp;RUNNING, then click the dev space name to enter.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_0-1752604074346.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286986i22D3E6D9CBC01F6A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_0-1752604074346.png" alt="Jyoti_ranjan_0-1752604074346.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;Now, Wait until the newly created dev space is in "&lt;STRONG&gt;RUNNING&lt;/STRONG&gt;" status:&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_1-1752604221570.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286989iB9574A649F40084C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_1-1752604221570.png" alt="Jyoti_ranjan_1-1752604221570.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;Now we can enter the dev space by clicking the dev space name:&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_2-1752604361243.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286992i7D967AB7095C71AD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_2-1752604361243.png" alt="Jyoti_ranjan_2-1752604361243.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;P&gt;&lt;SPAN&gt;First Create a CAP Project:&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Now let’s create a sample CAP project using the project wizard. Click “Start from template” from the welcome page and launch the project wizard.&lt;/SPAN&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_3-1752605985291.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287006iF233617CA18D4D2A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_3-1752605985291.png" alt="Jyoti_ranjan_3-1752605985291.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;Please select &lt;STRONG&gt;“CAP Project”&lt;/STRONG&gt;&lt;SPAN&gt; from the template in the project wizard:&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;Click “&lt;STRONG&gt;Start&lt;/STRONG&gt;&lt;SPAN&gt;” button and enter the CAP project details in the next page of the project wizard. Please check “&lt;/SPAN&gt;&lt;STRONG&gt;Basic Sample Files&lt;/STRONG&gt;&lt;SPAN&gt;” and ensure the project wizard to generate sample CDS files for you.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_4-1752606094305.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287009iD7098E1576DF8BD4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_4-1752606094305.png" alt="Jyoti_ranjan_4-1752606094305.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Enter the project name, then select the desired runtime—either&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Node.js&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;or&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Cloud Foundry&lt;/STRONG&gt;&lt;SPAN&gt;. Once you've made your selections, click the&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;“Finish”&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;button to close the wizard. The development space will refresh, and you’ll see your newly created&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;CAP project folder&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;appear in the project tree.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_5-1752606233120.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287011i0F2C30F9C85BB7F4/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_5-1752606233120.png" alt="Jyoti_ranjan_5-1752606233120.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-left" style="text-align : left;"&gt;You can also create the CAPM project from the terminal by using the command:&lt;FONT color="#333333"&gt;CDS INIT PROJECTNAME&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Let me give you a glimpse of the 3 main&amp;nbsp;files showing here:&lt;BR /&gt;&lt;/SPAN&gt;&lt;STRONG&gt;APP/:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;BR /&gt;&lt;/STRONG&gt;&lt;SPAN&gt;This directory includes the UI layer of your application. Typically, it contains SAP Fiori elements or SAPUI5 applications. You may encounter subdirectories such as Fiori, webapp, or particular app names. These applications utilize the OData services provided by the srv/ layer.&lt;/SPAN&gt;&lt;STRONG&gt;&lt;BR /&gt;DB/:&amp;nbsp;&lt;/STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;BR /&gt;This represents the data model layer. It includes your CDS definitions (.cds files) that specify: Entities Types Associations Annotations Additionally, you might encounter a data/ folder containing CSV files utilized for loading initial data. This layer is tasked with establishing the persistence model and is deployed to a database such as SAP HANA Cloud.&lt;BR /&gt;&lt;SPAN&gt;&lt;STRONG&gt;SRV/&lt;/STRONG&gt;&amp;nbsp;:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This represents the service layer. It includes .cds files that define services (for example, CatalogService.cds) which make entities from the db/ layer accessible. Additionally, you can incorporate JavaScript or TypeScript handlers (.js or .ts files) to execute custom logic. This layer functions as the API layer, providing OData or REST services.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Create a new file as &lt;STRONG&gt;schema.cds&lt;/STRONG&gt; in the DATA folder.&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_6-1752606640443.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287016i60C4154465A6CAFC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_6-1752606640443.png" alt="Jyoti_ranjan_6-1752606640443.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Now right click on the &lt;STRONG&gt;schema .cds&lt;/STRONG&gt;&lt;SPAN&gt; and open with CDS Graphical modeler.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;You can use the&amp;nbsp; CTRL +SHIFT +P shourcut as well to open the command pallet,&lt;BR /&gt;then search for CDS GRAPHICAL MODELER&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_1-1749492748093.png" style="width: 654px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271933iF85C3CB21A66015B/image-dimensions/654x283?v=v2" width="654" height="283" role="button" title="Jyoti_ranjan_1-1749492748093.png" alt="Jyoti_ranjan_1-1749492748093.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;Previously we have written some code and then we created an entity and their attributes. The same thing we can do with out writing a single line of code and manage their attributes and association and composition as well.&lt;BR /&gt;we can:&lt;UL&gt;&lt;LI&gt;Create entities visually.&lt;/LI&gt;&lt;LI&gt;Define attributes, associations, and compositions.&lt;/LI&gt;&lt;LI&gt;Automatically generate the corresponding CDS code&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_3-1749493253872.png" style="width: 622px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271939i9F2C251112D904C9/image-dimensions/622x271?v=v2" width="622" height="271" role="button" title="Jyoti_ranjan_3-1749493253872.png" alt="Jyoti_ranjan_3-1749493253872.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;There is only one entity books there and then i have created two more entities with the help of cds graphical modeler.&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_4-1749493458938.png" style="width: 672px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271940i36FE837D07C25E3E/image-dimensions/672x289?v=v2" width="672" height="289" role="button" title="Jyoti_ranjan_4-1749493458938.png" alt="Jyoti_ranjan_4-1749493458938.png" /&gt;&lt;/span&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;We can also created multiple number of Entities without writing&amp;nbsp; code and it automatically create the code for the entities we have created through Cds graphical modeler.&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_5-1749493658422.png" style="width: 685px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/271941iEDC8DC69BA88C547/image-dimensions/685x470?v=v2" width="685" height="470" role="button" title="Jyoti_ranjan_5-1749493658422.png" alt="Jyoti_ranjan_5-1749493658422.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;After successfully created the we can test it locally and also deploy it in the hana cloud as well.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;To test it locally you can run the command CDS WATCH in the terminal&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_7-1752607400569.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287027i05FCE12DD6E55726/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_7-1752607400569.png" alt="Jyoti_ranjan_7-1752607400569.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;OPEN IN A NEW TAB&lt;BR /&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_8-1752607478046.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287029i7B8A068B28D82A7C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_8-1752607478046.png" alt="Jyoti_ranjan_8-1752607478046.png" /&gt;&lt;/span&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jyoti_ranjan_9-1752607509615.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287031iEF12779C4750A550/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jyoti_ranjan_9-1752607509615.png" alt="Jyoti_ranjan_9-1752607509615.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/LI&gt;&lt;LI&gt;Now we can also deploy this application in the Hana cloud as well .&lt;BR /&gt;&lt;BR /&gt;&lt;STRONG&gt;Conclusion:&amp;nbsp;&lt;/STRONG&gt;The CDS Graphical Modeler marks a major leap forward in streamlining CDS development. By bridging the gap between technical design and business insight, it empowers teams to accelerate development and collaborate more effectively.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;SAP’s ongoing investment in tools like this shows a clear focus on improving developer productivity and user experience. If you’ve had a chance to work with the CDS Graphical Modeler, I’d love to hear your thoughts!&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/streamlining-cap-development-with-cds-graphical-modeler-in-sap-business/ba-p/14143397"/>
    <published>2025-07-16T11:12:18.097000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/developing-a-shell-plugin-for-sap-build-work-zone-to-display-custom/ba-p/14155228</id>
    <title>Developing a Shell Plugin for SAP Build Work Zone to Display Custom Notifications on SAP BTP</title>
    <updated>2025-07-17T14:41:49.080000+02:00</updated>
    <author>
      <name>Mykhaylo</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1584309</uri>
    </author>
    <content>&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Introduction &lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Unlocking Custom Experiences in SAP Build Work Zone: Shell Plugin in Action&lt;/STRONG&gt;&lt;BR /&gt;In today’s digital workplace, personalization is key. This article showcases how to enhance SAP Build Work Zone with a custom shell plugin that brings tailored notifications right to the user’s fingertips. Using a Multi-Target UI5/CAP application, we’ll demonstrate how to create, manage, and surface custom alerts—seamlessly integrated into your Work Zone experience.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="f.drawio.png" style="width: 451px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288561iDC61B9991F3786DD/image-dimensions/451x313?v=v2" width="451" height="313" role="button" title="f.drawio.png" alt="f.drawio.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-right" image-alt="Screenshot 2025-07-17 at 10.34.19 copy.png" style="width: 454px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288563i8567242FF02F247C/image-dimensions/454x315?v=v2" width="454" height="315" role="button" title="Screenshot 2025-07-17 at 10.34.19 copy.png" alt="Screenshot 2025-07-17 at 10.34.19 copy.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;To replicate this you should have a base knowledge of SAP BTP, JS, SAPUI5 and SAP CAP, I will not go deep down in to how to generate a project in BAS, or create an instance in SAP BTP.&amp;nbsp;&lt;/P&gt;&lt;P&gt;***GITHUB URL REMOVED BY MODERATION***&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;Project Architecture&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="shell-plugin-diagram.drawio.png" style="width: 926px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289794i8FD7E8CB2C8CE32C/image-dimensions/926x486?v=v2" width="926" height="486" role="button" title="shell-plugin-diagram.drawio.png" alt="shell-plugin-diagram.drawio.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; &lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Backend/Frontend App Development:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Generate a regular SAP CAP application&lt;/P&gt;&lt;P&gt;Firstly I've created a primitave data structure under db/schema.cds&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;namespace my.Notification;

entity Notification {
    key ID : UUID;
    type: String(30);
    title: String;
    message: String;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Than a service at srv/service.cds:&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;using { my.Notification as my } from '../db/schema';

service NotificationService {
    entity Notification as projection on my.Notification;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;And the backend is almost done, now add an app router and a sapui5 freestyle base app to the project.&lt;/P&gt;&lt;P&gt;Now let's add a form to create and delete the notifications under app/&amp;lt;app name&amp;gt;/webapp/view/&amp;lt;view name&amp;gt;.view.xml:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;div class="lia-spoiler-container"&gt;&lt;a class="lia-spoiler-link" href="#" rel="nofollow noopener noreferrer"&gt;Spoiler&lt;/a&gt;&lt;noscript&gt; (Highlight to read)&lt;/noscript&gt;&lt;div class="lia-spoiler-border"&gt;&lt;div class="lia-spoiler-content"&gt;&lt;EM&gt;Remember to correct the controller name if you copy the code&lt;/EM&gt;&lt;/div&gt;&lt;noscript&gt;&lt;div class="lia-spoiler-noscript-container"&gt;&lt;div class="lia-spoiler-noscript-content"&gt;Remember to correct the controller name if you copy the code&lt;/div&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/div&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;mvc:View
    controllerName="com.sap.shellnotificationsender.controller.MyView"
    xmlns:mvc="sap.ui.core.mvc"
    xmlns="sap.m"
    xmlns:form="sap.ui.layout.form"
    xmlns:core="sap.ui.core"&amp;gt;

    &amp;lt;Toolbar&amp;gt;
        &amp;lt;Title text="{i18n&amp;gt;title}" /&amp;gt;
    &amp;lt;/Toolbar&amp;gt;

    &amp;lt;Shell id="mainShell"&amp;gt;
        &amp;lt;VBox class="sapUiSmallMargin"&amp;gt;
            &amp;lt;form:SimpleForm
                    editable="true"
                    layout="ResponsiveGridLayout"
                    labelSpanL="1" labelSpanM="2"
                    adjustLabelSpan="false"
                    columnsL="3" columnsM="3"
                    class="sapUiSmallMarginBottom"&amp;gt;

                    &amp;lt;Label text="Type" /&amp;gt;
                    &amp;lt;ComboBox id="newType" selectedKey="information"&amp;gt;
                        &amp;lt;core:Item key="Warning" text="Warning" /&amp;gt;
                        &amp;lt;core:Item key="Success" text="Success" /&amp;gt;
                        &amp;lt;core:Item key="Information" text="Information" /&amp;gt;
                        &amp;lt;core:Item key="Error" text="Error" /&amp;gt;
                        &amp;lt;core:Item key="Alert" text="Alert" /&amp;gt;
                        &amp;lt;core:Item key="Confirm" text="Confirm" /&amp;gt;
                    &amp;lt;/ComboBox&amp;gt;

                    &amp;lt;Label text="Title" /&amp;gt;
                    &amp;lt;Input id="newTitle" /&amp;gt;

                    &amp;lt;Label text="Message" /&amp;gt;
                    &amp;lt;Input id="newMessage" /&amp;gt;

                    &amp;lt;Label text="" /&amp;gt;
                    &amp;lt;Button text="Add Notification"
                        press="onAddNotification"
                        type="Emphasized"/&amp;gt;
                &amp;lt;/form:SimpleForm&amp;gt;

            &amp;lt;!-- Table Section --&amp;gt;
            &amp;lt;Table id="shellNotificationsTable" items="{/Notification}"&amp;gt;
                &amp;lt;columns&amp;gt;
                    &amp;lt;Column&amp;gt;
                        &amp;lt;Text text="Delete" /&amp;gt;
                    &amp;lt;/Column&amp;gt;
                    &amp;lt;Column&amp;gt;
                        &amp;lt;Text text="Type" /&amp;gt;
                    &amp;lt;/Column&amp;gt;
                    &amp;lt;Column&amp;gt;
                        &amp;lt;Text text="Title" /&amp;gt;
                    &amp;lt;/Column&amp;gt;
                    &amp;lt;Column&amp;gt;
                        &amp;lt;Text text="Message" /&amp;gt;
                    &amp;lt;/Column&amp;gt;
                &amp;lt;/columns&amp;gt;

                &amp;lt;items&amp;gt;
                    &amp;lt;ColumnListItem&amp;gt;
                        &amp;lt;cells&amp;gt;
                            &amp;lt;Button icon="sap-icon://delete" type="Negative" press="deleteRow" /&amp;gt;
                            &amp;lt;Text text="{type}" /&amp;gt;
                            &amp;lt;Text text="{title}" /&amp;gt;
                            &amp;lt;Text text="{message}" /&amp;gt;
                        &amp;lt;/cells&amp;gt;
                    &amp;lt;/ColumnListItem&amp;gt;
                &amp;lt;/items&amp;gt;
            &amp;lt;/Table&amp;gt;
        &amp;lt;/VBox&amp;gt;
    &amp;lt;/Shell&amp;gt;
&amp;lt;/mvc:View&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;As next let's implement the controller that manages the view with all the necessary notification creation/deletion methods:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/m/MessageBox",
	"sap/m/MessageToast"
], (Controller, MessageBox, MessageToast) =&amp;gt; {
    "use strict";

    return Controller.extend("com.sap.shellnotificationsender.controller.MyView", {
        onInit() {

        },

        deleteRow: function (oEvent) {
			var oContext = oEvent.getSource().getBindingContext().getObject();
			console.log(oContext);
			MessageBox.confirm("Are your sure you want to delete this message?", {
				title: "Confirm",
				onClose: function (sAction) {
					if (sAction === "OK") {
						this.onDeleteSpecificRecord(oContext)
					}
				}.bind(this),
				actions: [
					MessageBox.Action.OK,
					MessageBox.Action.CANCEL
				],
				emphasizedAction: MessageBox.Action.OK
			})
		},

		onDeleteSpecificRecord: function (oRecord) {
			var oDataModel = this.getOwnerComponent().getModel();
			var oBusyDialog = new sap.m.BusyDialog({
				title: "Deleting Record",
				text: "Please Wait ..."
			})
			oBusyDialog.open();
			oDataModel.delete(`/Notification('${oRecord.ID}')`)
				.then(() =&amp;gt; {
					console.log("Record deleted successfully");
				})
				.catch((error) =&amp;gt; {
					console.error("Deletion failed:", error);
				})
				.finally(() =&amp;gt; {
					this.getView().byId("shellNotificationsTable").getBinding("items").refresh();
					oBusyDialog.close();
				});
		},

		onAddNotification: function () {
			const sType = this.byId("newType").getValue();
			const sTitle = this.byId("newTitle").getValue();
			const sMessage = this.byId("newMessage").getValue();

			this.byId("shellNotificationsTable").getBinding("items").create({
				"type": sType,
				"title": sTitle,
				"message": sMessage
			}).created().then(function() {
				MessageToast.show("Created")
			})
		}
    });
});&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The last thing to do is to add all the features that you need to the application, like HANA DB, xsuaa in my case, to do so just run&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add hana
cds add xsuaa&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;And like this is the app ready, let's deploy it, firstly login to Cloud Foundry&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf login&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;then right click on the mta.yaml file -&amp;gt; "Build MTA Project"&lt;/P&gt;&lt;P&gt;then go to mta_archives/&amp;lt;archive name&amp;gt;.tar right click and "Deploy MTA Project".&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;BTP Steps&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To connect to the app from the shell plugin you need to create a SAP BTP Destination,&amp;nbsp;&lt;/P&gt;&lt;P&gt;to do so go to &amp;lt;BTP Subaccount&amp;gt; -&amp;gt; Cloud Foundry -&amp;gt; &amp;lt;Your space&amp;gt; -&amp;gt; &amp;lt;Your app name&amp;gt;-srv and copy it's address, that's your destination URL&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-17 at 13.09.47.png" style="width: 943px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287889i176C46B55421F1C7/image-dimensions/943x624?v=v2" width="943" height="624" role="button" title="Screenshot 2025-07-17 at 13.09.47.png" alt="Screenshot 2025-07-17 at 13.09.47.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now you need to get the authentication data for the Destination&lt;/P&gt;&lt;P&gt;Go to &amp;lt;Your CF Space&amp;gt; -&amp;gt; Instances -&amp;gt;&amp;nbsp;&amp;lt;Your app name&amp;gt;-auth -&amp;gt;&amp;nbsp;&amp;lt;Your app name&amp;gt;-auth-key&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-17 at 13.10.05.png" style="width: 945px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287891iACBEC4F12DB9F3B7/image-dimensions/945x625?v=v2" width="945" height="625" role="button" title="Screenshot 2025-07-17 at 13.10.05.png" alt="Screenshot 2025-07-17 at 13.10.05.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Copy these:&lt;/P&gt;&lt;P&gt;Client ID, Client secret and url (Access Token URL)&lt;/P&gt;&lt;P&gt;Now go back to your Subaccount and create a new destination with your data:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;URL:&amp;nbsp; app-srv URL&lt;/LI&gt;&lt;LI&gt;Authentication:&amp;nbsp;OAuth2ClientCredentials&lt;/LI&gt;&lt;LI&gt;ClientID: ClientID&lt;/LI&gt;&lt;LI&gt;Client secret: Client secret&lt;/LI&gt;&lt;LI&gt;Token service URL type: Dedicated&lt;/LI&gt;&lt;LI&gt;Token Service URL: &amp;lt;Access token URL&amp;gt;/oauth/token&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;After this add these 2 parameters:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;HTML5.DynamicDestination: true&lt;/LI&gt;&lt;LI&gt;WebIDEEnabled: true&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;With this step is the backend development concluded.&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Shell Plugin Development:&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Firstly a general explanation about shell plugins. Shell Plugins are UI5 Applications that allow to add new Elements to SAP Build Work Zone/Fiori Launchpad like Headers, Footers, menu items etc.&lt;/P&gt;&lt;P&gt;To create a shell plugin generate a plain UI5 Basic Freestyle application with the "Template Wizard" in Business Application Studio.&lt;/P&gt;&lt;P&gt;There are a couple of things to modify in the manifest.json to make a a Shell Plugin:&lt;/P&gt;&lt;P&gt;Inside sap.app change the type to component:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;"type": "component"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;In sap.app&amp;gt;crossNavigation hide the launcher:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;"crossNavigation": {
      "inbounds": {
        "Shell-plugin": {
          "semanticObject": "Shell",
          "action": "plugin",
          "title": "{{Shell-plugin.flpTitle}}",
          "hideLauncher": true,
          "icon": "",
          "signature": {
            "parameters": {},
            "additionalParameters": "allowed"
          }
        }
      }
    },&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Add this part under after sap.cloud:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;"sap.flp": {
    "type": "plugin"
  }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; This way the Shell Plugin configuration is completed, now let's add our newly created Destination&lt;/P&gt;&lt;P&gt;in sap.app&amp;gt;dataSources add this:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;"NotificationService": {
        "uri": "/ShellNotifications/odata/v4/notification/",
        "type": "OData",
        "settings": {
          "odataVersion": "4.0"
        }
      }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;and in sap.ui5&amp;gt;models:&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;"Notification": {
        "dataSource": "NotificationService",
        "settings": {
          "synchronizationMode": "None",  
          "operationMode": "Server",
          "autoExpandSelect": true
        },
        "type": "sap.ui.model.odata.v4.ODataModel"
      }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;and as last thing add this route to your xs-app.json file:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;div class="lia-spoiler-container"&gt;&lt;a class="lia-spoiler-link" href="#" rel="nofollow noopener noreferrer"&gt;Spoiler&lt;/a&gt;&lt;noscript&gt; (Highlight to read)&lt;/noscript&gt;&lt;div class="lia-spoiler-border"&gt;&lt;div class="lia-spoiler-content"&gt;Remember: the order of the routes in xs-app matters, if you add it at the end it might not be resolved correctly by the app router&lt;/div&gt;&lt;noscript&gt;&lt;div class="lia-spoiler-noscript-container"&gt;&lt;div class="lia-spoiler-noscript-content"&gt;Remember: the order of the routes in xs-app matters, if you add it at the end it might not be resolved correctly by the app router&lt;/div&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/div&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
      "source": "^/ShellNotifications/(.*)$",
      "destination": "ShellNotifications",
      "target": "$1",
      "authenticationType": "xsuaa",
      "csrfProtection": true
    },&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now finally you can add the code that displays the notifications, to do so open the Component.js file and add the following code to the init method:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const oModel = this.getModel("Notification");

            oModel.bindList("/Notification").requestContexts().then((aContexts) =&amp;gt; {
                const aData = aContexts.map(oContext =&amp;gt; oContext.getObject());
                for (const el of aData) {
                    const nType = el["type"];
                    const nTitle = el["title"];
                    const nMessage = el["message"]
                    if (nType === "Information") {
                        MessageBox.information(nMessage, {
                            title: nTitle
                        });
                    } else if (nType === "Alert") {
                        MessageBox.alert(nMessage, {
                            title: nTitle
                        })
                    } else if (nType === "Confirm") {
                        MessageBox.confirm(nMessage, {
                            title: nTitle
                        })
                    } else if (nType === "Error") {
                        MessageBox.error(nMessage, {
                            title: nTitle
                        })
                    } else if (nType === "Success") {
                        MessageBox.success(nMessage, {
                            title: nTitle
                        })
                    } else if (nType === "Warning") {
                        MessageBox.warning(nMessage, {
                            title: nTitle
                        })
                    }
                }
            }).catch((err) =&amp;gt; {
                console.error("Failed to load notifications:", err);
            });&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;And like this is the development finished, the last step is to deploy it and add to WorkZone.&lt;/P&gt;&lt;P&gt;To build it do the same steps as with the MTA app:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;right click on the mta.yaml file -&amp;gt; "Build MTA Project"&lt;/LI&gt;&lt;LI&gt;go to mta_archives/&amp;lt;archive name&amp;gt;.tar right click and "Deploy MTA Project".&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;SAP Build Work Zone Steps&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Although the SAP Build Work Zone standard and advanced edition have some UI differences, the steps are the same for both of them.&lt;/P&gt;&lt;P&gt;All the steps performed below are done on SAP Build Work Zone advanced edition.&lt;/P&gt;&lt;P&gt;Start by going to the Administration Console -&amp;gt; External Integration -&amp;gt; Business Content -&amp;gt; Content Manager&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio copy.png" style="width: 941px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287908i32644250736D2439/image-dimensions/941x562?v=v2" width="941" height="562" role="button" title="f.drawio copy.png" alt="f.drawio copy.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; Than open the content channel and update the "HTML5 Apps"&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio.png" style="width: 936px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287909iE02C499761BD5E50/image-dimensions/936x559?v=v2" width="936" height="559" role="button" title="f.drawio.png" alt="f.drawio.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; After that go Content Explorer and click Content Explorer (In the current UI it's a button in the header)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio copy 2.png" style="width: 919px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287911iE1DD48D7161496D1/image-dimensions/919x549?v=v2" width="919" height="549" role="button" title="f.drawio copy 2.png" alt="f.drawio copy 2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select "HTML5 Apps" and add the new Shell Plugin that you just created&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio copy 3.png" style="width: 921px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287912i88EE9B7A47CB6A3A/image-dimensions/921x550?v=v2" width="921" height="550" role="button" title="f.drawio copy 3.png" alt="f.drawio copy 3.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; To be able to see the plugin, assign it to a role, in my case it's the "Everyone" role, you can find it in the Content Manager&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio copy 4.png" style="width: 922px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287913i25996A10836F1110/image-dimensions/922x551?v=v2" width="922" height="551" role="button" title="f.drawio copy 4.png" alt="f.drawio copy 4.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; After you've done that you should be able to see your new shell plugin the SAP Build Work Zone's launchpad&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="f.drawio copy 5.png" style="width: 921px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/287914i5AA60516B3696BD0/image-dimensions/921x550?v=v2" width="921" height="550" role="button" title="f.drawio copy 5.png" alt="f.drawio copy 5.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; If you don't see it try to open the page in an "Anonymous" Tab and check the developer console&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;What we’ve built here is just a glimpse into what’s possible with shell plugins in SAP Build Work Zone. By integrating a custom notification system, we’ve shown how easily you can extend the platform to better fit your customers’ needs. But this is only the starting point.&lt;/P&gt;&lt;P&gt;There’s a wide range of enhancements you can explore next—such as targeting specific users with personalized notifications, adding actionable buttons to each alert, or even integrating with external systems to trigger real-time messages. The flexibility of shell extensions offers endless opportunities to enrich the Work Zone experience and tailor it to your organization’s workflows.&lt;/P&gt;&lt;P&gt;So go ahead—experiment, extend, and elevate your Work Zone.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/developing-a-shell-plugin-for-sap-build-work-zone-to-display-custom/ba-p/14155228"/>
    <published>2025-07-17T14:41:49.080000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/the-complete-guide-to-calling-actions-in-ui5-with-custom-code/ba-p/14156201</id>
    <title>The Complete Guide to Calling Actions in UI5 with Custom Code</title>
    <updated>2025-07-21T09:04:09.143000+02:00</updated>
    <author>
      <name>Marian_Zeis</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/61</uri>
    </author>
    <content>&lt;P class=""&gt;In the past I’ve had to implement &lt;STRONG&gt;actions&lt;/STRONG&gt; in SAPUI5 every now and then. Because I mostly work with Fiori elements now, hand-coding actions has become a rare task for me — and whenever I do need to do it, the official docs are pretty thin and the code samples are sparse.&lt;/P&gt;&lt;P class=""&gt;With this post (and a CAP sample project) I want to walk you through the process&amp;nbsp;— and leave a note to my future self&amp;nbsp;— on how to wire up actions in SAPUI5.&lt;/P&gt;&lt;H2 id="toc-hId-1735153572"&gt;&lt;STRONG&gt;What exactly are “actions” and “functions”?&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;Both &lt;STRONG&gt;Actions&lt;/STRONG&gt; and &lt;STRONG&gt;Functions&lt;/STRONG&gt; are service operations defined in OData / CAP that go beyond the standard CRUD verbs:&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Concept&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Side effects&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Return type&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Typical use case&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Action&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Yes (write)&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;void / entity / collection&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Update price, approve a request&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Function&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;No (read-only)&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;scalar / entity / collection&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Calculate price, fetch KPIs&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P class=""&gt;In CAP there are two scopes for both actions and functions:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;STRONG&gt;Bound&lt;/STRONG&gt; — tied to a single instance or collection of an entity.&lt;STRONG&gt;Unbound&lt;/STRONG&gt; — defined at service level, usable anywhere.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1538640067"&gt;&lt;STRONG&gt;Quick Start&lt;/STRONG&gt;&lt;/H2&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;git clone https://github.com/marianfoo/ui5-call-action.git
cd ui5-call-action
npm install          # installs CAP, UI5 tooling, etc.
npm run deploy        # deploys the service to the sqlite database
npm run watch           # starts CAP + FE/Freestyle apps&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;Open in your browser &lt;A href="http://localhost:4004" target="_self" rel="nofollow noopener noreferrer"&gt;http://localhost:4004&lt;/A&gt;:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;UI5 V4 Fiori elements → &lt;A href="http://localhost:4004/com.marianzeis.books/index.html" target="_blank" rel="noopener nofollow noreferrer"&gt;/com.marianzeis.books&lt;/A&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;UI5 V2 Fiori elements → &lt;A href="http://localhost:4004/com.marianzeis.booksv2/index.html" target="_blank" rel="noopener nofollow noreferrer"&gt;/com.marianzeis.booksv2&lt;/A&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;UI5 V4 Freestyle → &lt;A href="http://localhost:4004/com.freestyle/index.html" target="_blank" rel="noopener nofollow noreferrer"&gt;/com.freestyle&lt;/A&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;UI5 V2 Freestyle → &lt;A href="http://localhost:4004/com.freestyle-v2/index.html" target="_blank" rel="noopener nofollow noreferrer"&gt;/com.freestyle-v2&lt;/A&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Marian_Zeis_1-1752834700540.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288548iE449153FD52D2B53/image-size/large?v=v2&amp;amp;px=999" role="button" title="Marian_Zeis_1-1752834700540.png" alt="Marian_Zeis_1-1752834700540.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1342126562"&gt;&lt;STRONG&gt;Implementing actions in CAP&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;I’ve put together a classic &lt;STRONG&gt;Bookshop&lt;/STRONG&gt; example and sprinkled in a handful of actions.&lt;BR /&gt;&lt;STRONG&gt;Full repo&lt;/STRONG&gt;: &lt;A href="https://github.com/marianfoo/ui5-call-action" target="_blank" rel="noopener nofollow noreferrer"&gt;github.com/marianfoo/ui5-call-action&lt;/A&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1274695776"&gt;&lt;STRONG&gt;Bound actions&lt;/STRONG&gt;&lt;/H3&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Action&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;What it does&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Parameters&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;promoteBook&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Promote a book&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;—&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;setDiscount&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Apply a discount&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;percentage, reason&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;halfPrice&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Cut price in half&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;—&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;addChapter&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Add a chapter&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;title, pages&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;SPAN&gt;massHalfPrice&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Half price for multiple books&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;books[]&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H3 id="toc-hId-1078182271"&gt;&lt;STRONG&gt;Unbound actions&lt;/STRONG&gt;&lt;/H3&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Action&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;What it does&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Parameters&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;refreshCatalog&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Refresh catalog&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;—&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;generateReport&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Generate report&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;type, dateFrom, dateTo&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;createBooksAndChapters&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Bulk create books + chapters&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;books[] and chapters[] (deep parameter)&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H3 id="toc-hId-881668766"&gt;&lt;STRONG&gt;Functions (read-only)&lt;/STRONG&gt;&lt;/H3&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Function&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Scope&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;getCurrentPrice&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;bound&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Return current book price&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;getSumBookPrices&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;unbound&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Sum of all book prices&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P class=""&gt;&lt;I&gt;Definitions&lt;/I&gt; → &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/srv/bookshop-service.cds" target="_self" rel="nofollow noopener noreferrer"&gt;srv/bookshop-service.cds&lt;/A&gt;&lt;BR /&gt;&lt;I&gt;Handlers&lt;/I&gt; → &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/srv/bookshop-service.js" target="_self" rel="nofollow noopener noreferrer"&gt;srv/bookshop-service.js&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-556072542"&gt;&lt;STRONG&gt;OData V2 quick note&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;CAP speaks OData V4 out-of-the-box. To expose an OData V2 endpoint, install &lt;A href="https://github.com/cap-js-community/odata-v2-adapter" target="_blank" rel="noopener nofollow noreferrer"&gt;@cap-js-community/odata-v2-adapter&lt;/A&gt;. The service will be reachable at:&lt;/P&gt;&lt;pre class="lia-code-sample language-text"&gt;&lt;code&gt;http://localhost:4004/odata/v2/bookshop&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-359559037"&gt;&lt;STRONG&gt;SAPUI5 via annotations&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;The smoothest route in UI5 is Fiori elements. Just add an annotation and the button appears. Example for &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/576e497e7b52a527dfacbca0ebc9764f1d38d7eb/srv/fiori-annotations.cds#L25-L29" target="_self" rel="nofollow noopener noreferrer"&gt;promoteBook&lt;/A&gt;. :&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
  $Type: 'UI.DataFieldForAction',
  Label: 'CAP Promote Book',
  Action: 'BookshopService.promoteBook'
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The actions are now visible in the table header. The buttons with the prefix ‘CAP’ are defined with the annotation, the buttons with the prefix ‘CUST’ are custom actions defined and implemented in the frontend.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Marian_Zeis_0-1752834587094.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288547i5242AF92D93D2C06/image-size/large?v=v2&amp;amp;px=999" role="button" title="Marian_Zeis_0-1752834587094.png" alt="Marian_Zeis_0-1752834587094.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-163045532"&gt;&lt;STRONG&gt;SAPUI5 with custom code&lt;/STRONG&gt;&lt;/H2&gt;&lt;P class=""&gt;To compare APIs I created two freestyle apps and two Fiori elements apps:&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;App&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Tech&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Key APIs&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;/app/freestyle&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;OData V4, TypeScript&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;A href="https://ui5.sap.com/#/api/sap.ui.model.odata.v4.ODataContextBinding%23methods/invoke" target="_self" rel="noopener noreferrer"&gt;invoke()&lt;/A&gt;, &lt;A href="https://ui5.sap.com/#/api/sap.ui.model.odata.v4.ODataContextBinding%23methods/execute" target="_self" rel="noopener noreferrer"&gt;execute()&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;/app/freestyle-v2&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;OData V2, TypeScript&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;A href="https://ui5.sap.com/#/api/sap.ui.model.odata.v2.ODataModel%23methods/callFunction" target="_self" rel="noopener noreferrer"&gt;callFunction()&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;/app/books, /app/books-v2&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Fiori elements&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;i&lt;A href="https://ui5.sap.com/#/api/sap.fe.core.controllerextensions.EditFlow%23methods/invokeAction" target="_self" rel="noopener noreferrer"&gt;nvokeAction()&lt;/A&gt; / &lt;A href="https://ui5.sap.com/#/api/sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI%23methods/invokeActions" target="_self" rel="noopener noreferrer"&gt;invokeActions()&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H3 id="toc-hId-95614746"&gt;&lt;STRONG&gt;OData V4 freestyle app&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Controller → &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/app/freestyle/webapp/controller/MainView.controller.ts" target="_blank" rel="noopener nofollow noreferrer"&gt;MainView.controller.ts&lt;/A&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-typescript"&gt;&lt;code&gt;// Legacy pattern
const actionBinding = odataModel.bindContext(
  "BookshopService.promoteBook(...)",
  bookContext
);
await actionBinding.execute();

// Modern pattern
await actionBinding.invoke();&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Marian_Zeis_2-1752834755222.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288550i317CBB5D6A9A2FDD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Marian_Zeis_2-1752834755222.png" alt="Marian_Zeis_2-1752834755222.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId--469533135"&gt;Collection Bound Actions&lt;/H4&gt;&lt;P&gt;The action "massHalfPrice" is a so called Collection-Bound Action only for V4. The documentation about this is very sparse.&lt;BR /&gt;In capire you can find samples about the implementation in CAP: &lt;A href="https://cap.cloud.sap/docs/guides/providing-services#actions-functions" target="_self" rel="nofollow noopener noreferrer"&gt;Actions &amp;amp; Functions&lt;/A&gt; /&amp;nbsp;&lt;A href="https://cap.cloud.sap/docs/cds/cdl#bound-actions" target="_self" rel="nofollow noopener noreferrer"&gt;Bound Actions and Functions&lt;/A&gt;&lt;BR /&gt;In the UI5 Documentation it looks like it is described under "&lt;A href="https://ui5.sap.com/#/topic/cbf16c599f2d4b8796e3702f7d4aae6c" target="_self" rel="noopener noreferrer"&gt;Static Action".&lt;/A&gt;&lt;BR /&gt;It was not easy to figure out how to call from the frontend and i was not the &lt;A href="https://community.sap.com/t5/application-development-and-automation-discussions/how-to-perform-a-cap-bound-action-on-a-collection/m-p/13652372" target="_self"&gt;only one how asked&lt;/A&gt; this.&lt;BR /&gt;&lt;STRONG&gt;Basically, I see the action as a normal bound action that has the type Books as an input parameter. Accordingly, the call in the front end is the same, only the path to call in frontend is slightly different.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://github.com/marianfoo/ui5-call-action/blob/9379725220073cbabff5208ad5ff2e35739720b6/srv/bookshop-service.cds#L43" target="_self" rel="nofollow noopener noreferrer"&gt;Definition in the CAP App&lt;/A&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;  entity Books as projection on my.Books actions {
    //bound to the collection and not a specific instance of Books
    action massHalfPrice (books: many $self) returns array of Books;
    // bound action with one book as parameter
    action similarBooks (book: $self) returns array of Books;
  };
//unbound action with many books as parameter
action massHalfPrice (books: many Books) returns array of Books;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;metadata of three different actions in V4&lt;BR /&gt;&lt;STRONG&gt;Top&lt;/STRONG&gt; &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/533f3cbfabf47a17b5b8f444929f4a322edcc0c7/srv/bookshop-service.cds#L43" target="_self" rel="nofollow noopener noreferrer"&gt;Bound Collection-Bound Action&lt;/A&gt; // &lt;STRONG&gt;Middle&lt;/STRONG&gt;&amp;nbsp;&lt;A href="https://github.com/marianfoo/ui5-call-action/blob/533f3cbfabf47a17b5b8f444929f4a322edcc0c7/srv/bookshop-service.cds#L44" target="_self" rel="nofollow noopener noreferrer"&gt;Bound Action with one Book as parameter&lt;/A&gt;&amp;nbsp; // &lt;STRONG&gt;Bottom&lt;/STRONG&gt; U&lt;A href="http://action%20massHalfPrice (books: many Books) returns array of Books;" target="_self" rel="nofollow noopener noreferrer"&gt;nbound Collection-Bound Action&lt;/A&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;Action Name="massHalfPrice" IsBound="true" EntitySetPath="books"&amp;gt;
&amp;lt;Parameter Name="books" Type="Collection(BookshopService.Books)" Nullable="true"/&amp;gt;
&amp;lt;ReturnType Type="Collection(BookshopService.Books)"/&amp;gt;
&amp;lt;/Action&amp;gt;
&amp;lt;Action Name="similarBooks" IsBound="true" EntitySetPath="book"&amp;gt;
&amp;lt;Parameter Name="book" Type="BookshopService.Books"/&amp;gt;
&amp;lt;ReturnType Type="Collection(BookshopService.Books)"/&amp;gt;
&amp;lt;/Action&amp;gt;
&amp;lt;Action Name="massHalfPrice" IsBound="false"&amp;gt;
&amp;lt;Parameter Name="books" Type="Collection(BookshopService.Books)" Nullable="true"/&amp;gt;
&amp;lt;ReturnType Type="Collection(BookshopService.Books)"/&amp;gt;
&amp;lt;/Action&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;A href="https://github.com/marianfoo/ui5-call-action/blob/9379725220073cbabff5208ad5ff2e35739720b6/app/freestyle/webapp/controller/MainView.controller.ts#L410-L437" target="_self" rel="nofollow noopener noreferrer"&gt;Call from the UI5 OData V4 Freestyle App to call Bound Collection Action&lt;/A&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;public async invokeMassHalfPrice(): Promise&amp;lt;void&amp;gt; {
    const odataModel = this.getView()?.getModel() as ODataModel;
    const actionPath = "/Books/BookshopService.massHalfPrice(...)";
    // Get existing books from the model instead of creating dummy data
    // Here we use the binding parameter approach - binding to existing collection data
    const table = this.byId("booksTable") as Table;
    const binding = table.getBinding("items");
    const booksData = binding.getContexts().map(context =&amp;gt; {
        const bookObject = context.getObject();
        return {
            ID: bookObject.ID,
            IsActiveEntity: bookObject.IsActiveEntity
        };
    });
    const actionBinding = odataModel.bindContext(actionPath);
    actionBinding.setParameter("books", booksData);
    await actionBinding.invoke();
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--372643633"&gt;&lt;STRONG&gt;OData V2 freestyle app&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Controller → &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/app/freestyle-v2/webapp/controller/MainView.controller.ts" target="_self" rel="nofollow noopener noreferrer"&gt;MainView.controller.ts&lt;/A&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-typescript"&gt;&lt;code&gt;const data = await new Promise((resolve, reject) =&amp;gt; {
  model.callFunction("/Books_promoteBook", {
    method: "POST",
    urlParameters: { ID: bookId, IsActiveEntity: true },
    success: resolve,
    error: reject
  });
});&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;Paths differ:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;V4 → BookshopService.promoteBook(...)&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;V2 → /Books_promoteBook&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Marian_Zeis_3-1752834774188.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/288551i54A52FEAAFA615C7/image-size/large?v=v2&amp;amp;px=999" role="button" title="Marian_Zeis_3-1752834774188.png" alt="Marian_Zeis_3-1752834774188.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;!--            ——————————- existing intro &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp; CAP sections unchanged ——————————-            --&gt;&lt;!--            INSERT AFTER “OData V2 freestyle app” SECTION            --&gt;&lt;H3 id="toc-hId--569157138"&gt;&lt;STRONG&gt;Custom code in Fiori elements (V4 &amp;amp; V2)&lt;/STRONG&gt;&lt;/H3&gt;&lt;P class=""&gt;Fiori elements already renders “CAP” buttons for every annotated action, but you can go further and add &lt;EM&gt;CUST&lt;/EM&gt; logic without leaving the Fiori elements shell. All you need is an ext/controller/*.ts|js file and manifest.json metadata that points to it. Inside that controller you work with ExtensionAPI:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;A href="https://ui5.sap.com/#/api/sap.fe.core.controllerextensions.EditFlow%23methods/invokeAction" target="_self" rel="noopener noreferrer"&gt;getEditFlow().invokeAction()&lt;/A&gt; — V4 helper that wraps OData calls, busy indicators, draft handling, side-effects and messaging.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;&lt;A href="https://ui5.sap.com/#/api/sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI%23methods/invokeActions" target="_self" rel="noopener noreferrer"&gt;extensionAPI.invokeActions()&lt;/A&gt; — classic V2 helper (still available, multi-select aware).&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;Below is a stripped-down version of the demo controller &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/app/books/webapp/ext/controller/Action.ts" target="_blank" rel="noopener nofollow noreferrer"&gt;Action.ts&lt;/A&gt; (V4) / &lt;A href="https://github.com/marianfoo/ui5-call-action/blob/main/app/books-v2/webapp/ext/controller/ListReportExt.controller.js" target="_blank" rel="noopener nofollow noreferrer"&gt;ListReportExt.controller.js&lt;/A&gt; (V2). Notice how the pattern is always the same: pick the selected contexts, call invokeAction(), pass parameters if needed.&lt;/P&gt;&lt;H4 id="toc-hId--1059073650"&gt;OData V4&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// 1) Bound action WITHOUT parameters
export async function customPromoteBook(this: ExtensionAPI) {
  const ctx = this.getSelectedContexts();
  await this.getEditFlow().invokeAction("BookshopService.promoteBook", {
    contexts: ctx
  });
}

// 2) Bound action WITH parameters
export async function customSetDiscount(this: ExtensionAPI) {
  const ctx = this.getSelectedContexts();
  await this.getEditFlow().invokeAction("BookshopService.setDiscount", {
    contexts: ctx,
    parameterValues: [
      { name: "percentage", value: 15 },
      { name: "reason",     value: "HOLIDAY_SALE" }
    ]
  });
}

// 3) Unbound action WITHOUT parameters
export async function customRefreshCatalog(this: ExtensionAPI) {
  await this.getEditFlow().invokeAction("refreshCatalog", {
    model: this.getModel()
  });
}

// 4) Unbound action WITH parameters
export async function customGenerateReport(this: ExtensionAPI) {
  await this.getEditFlow().invokeAction("generateReport", {
    model: this.getModel(),
    parameterValues: [
      { name: "reportType", value: "sales" },
      { name: "dateFrom",   value: "2024-01-01" },
      { name: "dateTo",     value: "2024-12-31" }
    ]
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId--1255587155"&gt;&lt;STRONG&gt;OData V2&lt;/STRONG&gt;&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;/**
 * 1. Bound action WITHOUT parameters - using invokeActions
 */
customPromoteBookInvoke: async function() {
    const contexts = this.extensionAPI.getSelectedContexts();     // Get selected rows
    await this.extensionAPI.invokeActions("/Books_promoteBook", contexts);
}
/**
 * 2. Bound action WITH parameters - using invokeActions
 */
customSetDiscountInvoke: async function() {
    const contexts = this.extensionAPI.getSelectedContexts();
    const parameters = { 
        percentage: 15, 
        reason: "HOLIDAY_SALE" 
    };
    await this.extensionAPI.invokeActions("/Books_setDiscount", contexts, parameters);
}
/**
 * 3. Unbound action WITHOUT parameters - using invokeActions
 */
customRefreshCatalogInvoke: async function() {
    try {
        await this.extensionAPI.invokeActions("/refreshCatalog");
        MessageToast.show("Catalog refreshed successfully");
    } catch (error) {
        MessageToast.show("Failed to refresh catalog: " + (error.message || "Unknown error"));
    }
}
/**
 * 4. Unbound action WITH parameters - using invokeActions
 */
customGenerateReportInvoke: async function() {
    const parameters = {
        reportType: "sales",
        dateFrom: "2024-01-01",
        dateTo: "2024-12-31"
    };
    const result = await this.extensionAPI.invokeActions("/generateReport", null, parameters);
}&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;&lt;STRONG&gt;Why bother?&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P class=""&gt;Quickly add dialogs, parameter defaults, or pre/post-processing logic without touching the backend.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;Framework handles draft save, busy state and message pop-ups for you.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;One handler works for multi-select (just pass an array of contexts).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P class=""&gt;You can mix CAP-generated buttons and CUST buttons side-by-side to compare approaches.&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="215.266px"&gt;&lt;P class=""&gt;&lt;STRONG&gt;Fiori elements API&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="308.828px"&gt;&lt;P class=""&gt;&lt;STRONG&gt;Supports&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD width="256.172px"&gt;&lt;P class=""&gt;&lt;STRONG&gt;Recommended for&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="215.266px"&gt;&lt;P class=""&gt;getEditFlow().invokeAction()&lt;/P&gt;&lt;/TD&gt;&lt;TD width="308.828px"&gt;&lt;P class=""&gt;Bound + Unbound actions, parameters, V4&lt;/P&gt;&lt;/TD&gt;&lt;TD width="256.172px"&gt;&lt;P class=""&gt;Modern Draft-aware V4 apps&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="215.266px"&gt;&lt;P class=""&gt;extensionAPI.invokeActions()&lt;/P&gt;&lt;/TD&gt;&lt;TD width="308.828px"&gt;&lt;P class=""&gt;Bound + Unbound actions, multi-select, V2&lt;/P&gt;&lt;/TD&gt;&lt;TD width="256.172px"&gt;&lt;P class=""&gt;Classic V2 List Report/Object Page&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P class=""&gt;That’s the entire toolbox for custom code inside Fiori elements — no need to switch to freestyle unless you want total UI freedom. Jump into the repo, press the &lt;EM&gt;CUST *&lt;/EM&gt; buttons and check the dev-tools network tab to see each API in action.&lt;/P&gt;&lt;H2 id="toc-hId--865294646"&gt;&lt;STRONG&gt;API decision matrix&amp;nbsp;&lt;/STRONG&gt;&lt;/H2&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Scenario&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Recommended API&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;&lt;STRONG&gt;Why&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Fiori elements V4&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;CAP annotations or invokeAction()&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Auto buttons, framework busy-handling&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Fiori elements V2&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;CAP annotations + extensionAPI.invokeActions()&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Multi-select, side-effects, Fiori elements only API&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Freestyle V4&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;bindContext().invoke()&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;Modern Promise API (requires UI5 1.123+)&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Freestyle V4&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;bindContext().execute()&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;available since 1.37, &lt;SPAN class=""&gt;&lt;STRONG&gt;deprecated&lt;/STRONG&gt;&lt;/SPAN&gt; in 1.123; keeps working for backward compatibility&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;&lt;P class=""&gt;Freestyle V2&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;ODataModel.callFunction()&lt;/P&gt;&lt;/TD&gt;&lt;TD&gt;&lt;P class=""&gt;no deep parameters, no collection-bound action&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P class=""&gt;&lt;STRONG&gt;Rule of thumb&lt;/STRONG&gt; — start with annotations for business logic, move to custom controller code only where UI-specific behavior is needed.&lt;/P&gt;&lt;P class=""&gt;That’s it! Clone the repo, start cds watch, and explore each app to see the different APIs in action.&amp;nbsp;&lt;/P&gt;&lt;P class=""&gt;Also, create a Pull Request or Issue if a sample implementation is missing to complete the Guide!&lt;/P&gt;&lt;P class=""&gt;Changes:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;23.07.2025: Add Collection-bound Actions&lt;/LI&gt;&lt;/UL&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/the-complete-guide-to-calling-actions-in-ui5-with-custom-code/ba-p/14156201"/>
    <published>2025-07-21T09:04:09.143000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/connect-to-public-cloud-api-in-node-js-via-authorisation-code/ba-p/14158313</id>
    <title>Connect to Public Cloud API in Node.js via Authorisation Code</title>
    <updated>2025-07-22T13:54:57.292000+02:00</updated>
    <author>
      <name>Egan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1504852</uri>
    </author>
    <content>&lt;P&gt;Connecting to a Public Cloud API (from &lt;A href="https://api.sap.com/" target="_self" rel="noopener noreferrer"&gt;Business Accelerator Hub&lt;/A&gt;) via Node.js CAP application can be challenging. I hope this blog helps others attempting the same task.&lt;/P&gt;&lt;H2 id="toc-hId-1735214148"&gt;&amp;nbsp;Prerequisites&lt;/H2&gt;&lt;P&gt;• SAP BTP subaccount (Cloud Foundry)&lt;BR /&gt;• Service key for the target Public Cloud API&lt;BR /&gt;• XSUAA instance bound to your CAP app&lt;BR /&gt;• SAP BTP Destination service instance&lt;BR /&gt;• Bruno installed for manual testing&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1538700643"&gt;1. Confirm the API's Auth Options&lt;/H2&gt;&lt;P&gt;First, check which authentication methods are available for the API you plan to consume.&lt;/P&gt;&lt;P&gt;In my example I connect to the &lt;STRONG&gt;Specification Management API&lt;/STRONG&gt;, but the steps apply to any Public Cloud API.&lt;/P&gt;&lt;P&gt;If the &lt;EM&gt;OAuth 2.0 Access Code Flow&lt;/EM&gt; is listed under “Authentication Methods”, the API supports the authorization-code flow. That flow confirms a user context and usually grants wider authorisations, such as update and POST requests.&lt;/P&gt;&lt;P&gt;(&lt;EM&gt;OAuth 2.0 Application Flow&lt;/EM&gt; corresponds to the client-credentials flow.)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Auth-method screenshot" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289462iBE738F54BD94C2E9/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_0-1753113819867.png" alt="Egan_0-1753113819867.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1342187138"&gt;2. Connect manually with Bruno (&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/data-export-api-getting-started-with-bruno/ba-p/14120240" target="_blank"&gt;Good blog on Bruno&lt;/A&gt;)&lt;/H2&gt;&lt;P&gt;Because our API supports the auth-code flow, we first prove we can log in by calling it via Bruno.&lt;/P&gt;&lt;P&gt;Create a new collection and paste the base URI of your Public Cloud API instance (you’ll find it in the service key in your service instance of the saas application your connecting to).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Service key showing URI" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289463iD5B5C161AD23500A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_3-1753114108426.png" alt="Egan_3-1753114108426.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When you send a test GET request you will probably receive an authorisation error. Configure OAuth 2.0 on the &lt;STRONG&gt;Auth&lt;/STRONG&gt; tab&lt;/P&gt;&lt;P&gt;Select Grant type Authorisation Code&lt;/P&gt;&lt;P&gt;Then fill in the below fields using your service key from your service instance&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Bruno auth settings" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289461i1BABC87E61152C2F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_1-1753113819868.png" alt="Egan_1-1753113819868.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Callback URL: &amp;lt;your Public Cloud API hostname&amp;gt;&lt;/LI&gt;&lt;LI&gt;Auth URL:** https://&amp;lt;subdomain&amp;gt;.authentication.&amp;lt;region&amp;gt;.hana.ondemand.com/oauth/authorize&lt;/LI&gt;&lt;LI&gt;Access-Token URL: https://&amp;lt;subdomain&amp;gt;.authentication.&amp;lt;region&amp;gt;.hana.ondemand.com/oauth/token&lt;/LI&gt;&lt;LI&gt;Client ID / Secret: from the uaa section of the service key&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Request the token, pick your identity provider, and Bruno will return an access token. Inspect the scopes there to see what you can do.&lt;/P&gt;&lt;H2 id="toc-hId-1145673633"&gt;3. Connect to the API from Node.js&lt;/H2&gt;&lt;P&gt;After the manual check we can now automate the flow in a Node.js service.&lt;/P&gt;&lt;H3 id="toc-hId-1078242847"&gt;3.1 Destination setup&lt;/H3&gt;&lt;P&gt;Create a destination that points to the same API endpoint and bind it to your app.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Destination configuration" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/289460i1560E45388730B53/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Egan_2-1753113819869.png" alt="Egan_2-1753113819869.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The required scopes and the audience (aud) value are visible inside the Bruno access token.&lt;/P&gt;&lt;P&gt;the Audience should start with the client id of your CAP application on BTP&lt;/P&gt;&lt;P&gt;Once the destination is saved, ensure your application is bound to the Destination service.&lt;/P&gt;&lt;H3 id="toc-hId-881729342"&gt;3.2 xs-security.json&lt;/H3&gt;&lt;P&gt;Add every scope your service needs so the approuter, it will forward it in the user’s JWT: in my example i needed this scope.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "name": "$XSAPPNAME.Spc_Write",
  "description": "Allow modification of specifications."
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Also reference the scope in authorities (and role templates, if used) and assign the resulting role collection to your user.&lt;/P&gt;&lt;H3 id="toc-hId-685215837"&gt;3.3 Connect in code&lt;/H3&gt;&lt;P&gt;Now time to connect to the API in the code itself.&lt;/P&gt;&lt;P&gt;First, obtain the user’s JWT. This helper below tries every possible source and falls back to LOCAL_USER_JWT in local development:&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;/** Try every source for a JWT and fall back to LOCAL_USER_JWT. */
function getJwt(capReq) {
  // CAP ≥ 7.3 keeps the raw token here
  if (capReq.user?.jwt) return capReq.user.jwt;

  // Plain HTTP / WebSocket headers
  const hdrs = capReq.http?.req?.headers || {};
  const token =
        hdrs['x-approuter-authorization'] ||   // CF WebSocket
        hdrs.authorization;                    // CF HTTP

  if (token) return token.replace(/^Bearer\s+/, '');
  // Last resort for local dev
  return process.env.LOCAL_USER_JWT;
}&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-617785051"&gt;3.3.1 Testing locally&lt;/H4&gt;&lt;P&gt;When testing locally we don't have access to the user JWT so we can add it manually to the environment file so we can still test locally, below is the process to get the JWT for user testing (each token lasts about 7 to 8 hours)&lt;/P&gt;&lt;H5 id="toc-hId-550354265"&gt;Step 1 – Get an auth code&lt;/H5&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;https://&amp;lt;instance&amp;gt;.eu10.authentication.eu10.hana.ondemand.com/oauth/authorize
?response_type=code
&amp;amp;client_id=&amp;lt;XSUAA client id of your deployed app&amp;gt;
&amp;amp;redirect_uri=http://localhost
&amp;amp;state=xyz&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Paste your version into your browsers address bar, after login you will land on &lt;A href="http://localhost/?code=" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost/?code=&lt;/A&gt;&amp;lt;AUTH_CODE&amp;gt;&amp;amp;state=xyz. Copy the value of AUTH_CODE.&lt;/P&gt;&lt;H5 id="toc-hId-353840760"&gt;Step 2 – Exchange the code for a JWT&lt;/H5&gt;&lt;P&gt;I made the Curl Request inside BAS itself. it will return a number of tokens, we only need the first and biggest one.&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;curl -v -X POST \
-u '&amp;lt;same client id&amp;gt;' \
--data-urlencode grant_type=authorization_code \
--data-urlencode code=&amp;lt;AUTH_CODE&amp;gt; \
--data-urlencode redirect_uri=http://localhost \
https://&amp;lt;instance&amp;gt;.eu10.authentication.eu10.hana.ondemand.com/oauth/token&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Save the token from the response into .env:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;LOCAL_USER_JWT=&amp;lt;paste JWT here&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId--469472559"&gt;3.3.2 Call the destination with the JWT&lt;/H4&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;const jwt = getJwt(req);
if (!jwt) req.reject(401, 'No user token found.');

const dest = await getDestination({
  destinationName: '&amp;lt;DestinationName&amp;gt;',
  jwt
});&lt;/code&gt;&lt;/pre&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;await executeHttpRequest(dest, {
  method: 'POST',
  url: `/odata/v4/api/specification/v1/${EntityName}`,
  data: v
});&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If you reach the destination but receive 401 Unauthorized, your JWT is missing the correct scope—ask the product team which one you need.&lt;/P&gt;&lt;P&gt;Other common pitfall is using the different XSUAA instances to get your JWT for the local run. use your applications XSUAA client since this is the same one your application will check the token against&lt;/P&gt;&lt;P&gt;And that’s it! You should now be able to read from and write to the Public Cloud API. For read-only workloads the client-credentials flow is usually simpler.&lt;/P&gt;&lt;P&gt;If I missed anything or you’d like more details, please comment below—happy to help.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;## Frequently Asked Questions&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### What’s the difference between authorization-code and client-credentials flows?&lt;/STRONG&gt;&lt;BR /&gt;The authorization-code flow runs in a user context, so it can carry user-level scopes (read, write, update). The client-credentials flow operates with a technical user—perfect for background jobs or read-only integrations.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### Why do I get “401 Unauthorized” after deployment?&lt;/STRONG&gt;&lt;BR /&gt;Your user’s JWT is probably missing the required scope (e.g., `Spc_Write`). Make sure the scope is listed in &lt;STRONG&gt;xs-security.json&lt;/STRONG&gt;, mapped to a role template, and assigned via a role collection in the BTP cockpit.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;### Which audience value belongs in my destination?&lt;/STRONG&gt;&lt;BR /&gt;Use the &lt;STRONG&gt;client ID&lt;/STRONG&gt; &lt;STRONG&gt;of your CAP application’s XSUAA instance&lt;/STRONG&gt;; it usually starts with `sb-&amp;lt;appName&amp;gt;!t&amp;lt;number&amp;gt;`.&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/Node.js/pd-p/723714486627645412834578565527550" class="lia-product-mention" data-product="322-1"&gt;Node.js&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+Identity+Services/pd-p/67837800100800007337" class="lia-product-mention" data-product="155-1"&gt;SAP Cloud Identity Services&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/API/pd-p/b31da0dd-f79a-4a1e-988c-af0755c2d184" class="lia-product-mention" data-product="123-1"&gt;API&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Authenticator/pd-p/73554900100700000789" class="lia-product-mention" data-product="435-1"&gt;SAP Authenticator&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Fiori+Cloud/pd-p/73554900100800000375" class="lia-product-mention" data-product="20-1"&gt;SAP Fiori Cloud&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+Application+Programming+Model/pd-p/9f13aee1-834c-4105-8e43-ee442775e5ce" class="lia-product-mention" data-product="100-1"&gt;SAP Cloud Application Programming Model&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Application+Studio/pd-p/67837800100800007077" class="lia-product-mention" data-product="13-1"&gt;SAP Business Application Studio&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Technology+Platform/pd-p/73555000100700000172" class="lia-product-mention" data-product="1215-1"&gt;SAP Business Technology Platform&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+S%25252F4HANA+Cloud+Public+Edition+Extensibility/pd-p/270c4f37-c335-46e1-bfad-a256637d5e26" class="lia-product-mention" data-product="37-1"&gt;SAP S/4HANA Cloud Public Edition Extensibility&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Accelerator+Hub/pd-p/73555000100800001091" class="lia-product-mention" data-product="1214-1"&gt;SAP Business Accelerator Hub&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/JavaScript/pd-p/506421944534752500398156104608974" class="lia-product-mention" data-product="321-1"&gt;JavaScript&lt;/a&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/API+Management/pd-p/67838200100800006828" class="lia-product-mention" data-product="358-1"&gt;API Management&lt;/a&gt;&lt;/P&gt;&lt;!--    END BLOG FRAGMENT    --&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/connect-to-public-cloud-api-in-node-js-via-authorisation-code/ba-p/14158313"/>
    <published>2025-07-22T13:54:57.292000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/uploading-attachment-with-cap-js-attachment-plugins-but-via-external-app/ba-p/14147330</id>
    <title>Uploading attachment with cap-js/attachment plugins but via External App/Postman</title>
    <updated>2025-07-24T09:08:43.209000+02:00</updated>
    <author>
      <name>chrisobar</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/845878</uri>
    </author>
    <content>&lt;P&gt;If anyone here are struggling uploading attachments via external app to &lt;STRONG&gt;cap-js/attachments&lt;/STRONG&gt;, I am writing this blog to showcase how to upload attachments on the plugins via external applications.&lt;/P&gt;&lt;P&gt;The blog shall include:&lt;/P&gt;&lt;P&gt;1. Pre-requisites&lt;/P&gt;&lt;P&gt;2. Example 1. via Postman&lt;/P&gt;&lt;P&gt;3. Example 2. via External App (React)&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;1. Pre-requisites: cap-js/attachment&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;You have extended your current entity for example:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_0-1751980368296.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284030i3E65DD76A2FC1CE5/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_0-1751980368296.png" alt="chrisobar_0-1751980368296.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Attachment entity accepts the following field below:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_1-1751980478628.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284031iD0E50B9FD39F02D2/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_1-1751980478628.png" alt="chrisobar_1-1751980478628.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The fields above are important and to be used for your JSON Body parameters (can leave status as blank as it uses '&lt;STRONG&gt;Unscanned&lt;/STRONG&gt;' as default). See below sample scenarios on how we can upload attachment:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;2. Example 1. (via Postman)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;**Other API tools are doable&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In this case, we require an existing entry in our table/fiori app.&lt;/P&gt;&lt;P&gt;Here are the steps:&lt;/P&gt;&lt;P&gt;1. Retrieve a single entry from your entity, copy the link and add /YourAttachmentEntity that you extended. (On my case, discount_attachment)&lt;/P&gt;&lt;P&gt;Ex:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_3-1751981390255.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284056iBE13F1B966BBFC55/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_3-1751981390255.png" alt="chrisobar_3-1751981390255.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. Follow the entity fields then replicate it, then attach your desired parameters on the body as raw - JSON format&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_4-1751981481494.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284061i18F93B46BA174AFC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_4-1751981481494.png" alt="chrisobar_4-1751981481494.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;(Convert your file to base64. In my case I attached an image, png format)&lt;/P&gt;&lt;P&gt;3. Send the request, you will see that it responded successfully. Go back to your Fiori app to verify if the attachment reflected:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_5-1751981587156.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284062i392735186A50F1A7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_5-1751981587156.png" alt="chrisobar_5-1751981587156.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_8-1751981935102.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284070i0538D102CDCD1200/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_8-1751981935102.png" alt="chrisobar_8-1751981935102.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_7-1751981734557.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284064iA81690ED011DFFEC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_7-1751981734557.png" alt="chrisobar_7-1751981734557.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;3. Example 2. (External App)&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;I have developed a React App for POC purposes. In this scenario, the data should be created first, then update that same entry using the ID, then upload the attachment via HTTP POST.&amp;nbsp; Let's breakdown:&lt;/P&gt;&lt;P&gt;1. Upload attachment as input='file', bind it in form data including all the parameters:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_9-1751982052158.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284071iA0F0CE6822C0130A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_9-1751982052158.png" alt="chrisobar_9-1751982052158.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2. Build your logic for your initial creation.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_10-1751982176378.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284073iE2AFE797AA5B9623/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_10-1751982176378.png" alt="chrisobar_10-1751982176378.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; My .ENV variable contains the base odata URL (/odata/v4/......, not the whole http url)&lt;/P&gt;&lt;P&gt;3. Convert the file from input='file' to base64 via JS logic, then bind the OData URL with your entity keys and the HTTP body parameters (refer to Attachment Entity fields and Postman example above).&amp;nbsp; then proceed OData call&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_15-1751982778767.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284082i20CC907D75921644/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_15-1751982778767.png" alt="chrisobar_15-1751982778767.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;My form will display a successful message and it should reflect on the database/fiori app as well.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_13-1751982513662.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284080i196C2C1646A41D1A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_13-1751982513662.png" alt="chrisobar_13-1751982513662.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="chrisobar_14-1751982541889.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/284081i48304E0EF638EEFE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="chrisobar_14-1751982541889.png" alt="chrisobar_14-1751982541889.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion:&amp;nbsp;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;This blog demonstrates how SAP CAP can interface seamlessly with external apps to enhance attachment handling across varied use cases. By abstracting the upload and retrieval logic via an API layer, the approach supports modular features in both admin dashboards and customer-facing applications. Despite initial challenges around payload structuring and authorization, the solution remains scalable, secure, and adaptable to different frontend contexts.&lt;/P&gt;&lt;P&gt;Let me know if you have any further questions or wish to communicate, just comment below the comment section.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/uploading-attachment-with-cap-js-attachment-plugins-but-via-external-app/ba-p/14147330"/>
    <published>2025-07-24T09:08:43.209000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-fix-npm-error-notarget-sap-hdi-deploy-when-you-create-a-cap-app-in/ba-p/14163890</id>
    <title>How to fix npm error notarget @sap/hdi-deploy when you create a CAP app in BAS</title>
    <updated>2025-07-28T05:04:05.688000+02:00</updated>
    <author>
      <name>Ryota_Ito</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1390198</uri>
    </author>
    <content>&lt;BLOCKQUOTE&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Update (July&amp;nbsp;2025):&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; Good news —&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;@sap/hdi-deploy@5.5.0&lt;/EM&gt;&lt;SPAN&gt; is now available on npm, so this &lt;/SPAN&gt;&lt;SPAN&gt;&lt;EM&gt;specific&lt;/EM&gt;&lt;/SPAN&gt;&lt;SPAN&gt; error may have disappeared.&lt;/SPAN&gt;&lt;BR /&gt;&lt;SPAN&gt;&lt;STRONG&gt;But keep reading!&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; The root cause — a dependency pointing to a version that isn’t published yet—can happen again with future releases. The steps below show how to unblock yourself whenever npm throws a &lt;/SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;notarget&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;SPAN&gt; error for an &lt;/SPAN&gt;&lt;EM&gt;@sap/hdi-deploy&lt;/EM&gt;&lt;SPAN&gt;&amp;nbsp;package.&lt;/SPAN&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1735993764"&gt;When do you see this error?&lt;/H2&gt;&lt;P&gt;1. In &lt;STRONG&gt;SAP Business Application Studio (BAS)&lt;/STRONG&gt; click &lt;STRONG&gt;File&lt;/STRONG&gt; → &lt;STRONG&gt;New Project from Template&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;2. Choose &lt;STRONG&gt;CAP Project&lt;/STRONG&gt; and fill in the project name, runtime (Node.js), database (HANA Cloud), etc.&lt;/P&gt;&lt;P&gt;3. Open the terminal and run:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add mta   # create files for Cloud Foundry / Kyma deploy
npm i         # install dependencies​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4.&lt;EM&gt; npm i&lt;/EM&gt; stops with this message:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm error code ETARGET
npm error notarget No matching version found for @sap/hdi-deploy@5.5.0.​&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Even if you force "&lt;EM&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1862993"&gt;@SAP&lt;/a&gt;/hdi-deploy": "5.4.2&lt;/EM&gt;" in &lt;EM&gt;package.json&lt;/EM&gt;, the error still appears.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="画像.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/292368iE1A5C8AE579BC64F/image-size/large?v=v2&amp;amp;px=999" role="button" title="画像.png" alt="画像.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1539480259"&gt;Why does it happen?&lt;/H2&gt;&lt;P&gt;&lt;EM&gt;cds add mta&lt;/EM&gt; adds this line to &lt;STRONG&gt;devDependencies&lt;/STRONG&gt;:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"@sap/cds-dk": "&amp;gt;=8"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;EM&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1862993"&gt;@SAP&lt;/a&gt;/cds-dk&lt;/EM&gt; version &lt;STRONG&gt;8.x&lt;/STRONG&gt; asks for &lt;EM&gt;&lt;STRONG&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1862993"&gt;@SAP&lt;/a&gt;/hdi-deploy@5.5.0&lt;/STRONG&gt;&lt;/EM&gt;, but 5.5.0 is &lt;STRONG&gt;not yet published on npm&lt;/STRONG&gt;. So npm cannot find it and throws &lt;STRONG&gt;ETARGET&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1342966754"&gt;The 3‑line fix&lt;/H2&gt;&lt;P&gt;1.&amp;nbsp; (Optional) clean old modules and cache:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;rm -rf node_modules package-lock.json
npm cache clean --force&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;2.&amp;nbsp;Install the latest &lt;STRONG&gt;cds-dk&lt;/STRONG&gt; (today it is 9.1.3):&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm install -D @sap/cds-dk@latest&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;3.&amp;nbsp;Install the rest:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;EM&gt;cds-dk &lt;STRONG&gt;9.x&lt;/STRONG&gt;&lt;/EM&gt; points to &lt;EM&gt;@sap/hdi-deploy &lt;STRONG&gt;5.4.2&lt;/STRONG&gt;&lt;/EM&gt;, which exists, so the install succeeds.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-1146453249"&gt;Example package.json&lt;/H2&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "scripts": {
    "start": "cds run"
  },
  "dependencies": {
    "@sap/cds": "^7",
    "@sap/hana-client": "^2",
    "@sap/xssec": "^3"
  },
  "devDependencies": {
    "@sap/cds-dk": "^9.1.3"
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-949939744"&gt;More Information&lt;/H2&gt;&lt;P&gt;SAP Community Q&amp;amp;A (same issue): &lt;A href="https://community.sap.com/t5/technology-q-a/generate-cap-project-in-bas-with-error-sap-hdi-deploy-5-4-2-not-match/qaq-p/14062673" target="_blank"&gt;https://community.sap.com/t5/technology-q-a/generate-cap-project-in-bas-with-error-sap-hdi-deploy-5-4-2-not-match/qaq-p/14062673&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId-753426239"&gt;Wrap‑up&lt;/H2&gt;&lt;P&gt;Next time you hit the &lt;EM&gt;@sap/hdi-deploy &lt;/EM&gt;&lt;STRONG&gt;notarget&lt;/STRONG&gt; error, just remember: &lt;STRONG&gt;upgrade &lt;EM&gt;@sap/cds-dk&lt;/EM&gt;&lt;/STRONG&gt; and you are done.&lt;/P&gt;&lt;P&gt;If this post helped you, please give Kudos and leave a comment! &lt;span class="lia-unicode-emoji" title=":raising_hands:"&gt;🙌&lt;/span&gt;&lt;/P&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-fix-npm-error-notarget-sap-hdi-deploy-when-you-create-a-cap-app-in/ba-p/14163890"/>
    <published>2025-07-28T05:04:05.688000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/getting-started-with-unit-testing-in-sap-cap-java-applications/ba-p/14164240</id>
    <title>Getting Started with Unit Testing in SAP CAP Java Applications</title>
    <updated>2025-07-28T11:15:44.566000+02:00</updated>
    <author>
      <name>Anjali_Pathak</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/2043652</uri>
    </author>
    <content>&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Understanding SAP CAP and SAP CAP Java Framework&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;STRONG&gt;SAP Cloud Application Programming (CAP)&lt;/STRONG&gt; is a full-stack framework for building enterprise cloud apps with Java or Node.js, using CDS for modeling and offering built-in persistence, APIs, security, and seamless SAP BTP deployment.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;The &lt;STRONG&gt;SAP CAP Java&lt;/STRONG&gt; &lt;STRONG&gt;Framework&lt;/STRONG&gt;, based on Spring Boot, enables Java developers to create CDS models, auto-generate services, and implement business logic, supporting multitenancy, messaging, and flexible database integration.&lt;BR /&gt;&lt;BR /&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Target Audience&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;This article is for developers, partners, and customers building &lt;STRONG&gt;SAP CAP Java&lt;/STRONG&gt; applications, focusing on unit testing with &lt;STRONG&gt;Test-Driven Development (TDD)&lt;/STRONG&gt; to ensure robust, test-first best practices.&lt;/P&gt;&lt;P class=""&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Understanding Unit Testing and Test-Driven Development&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Unit Testing&lt;/STRONG&gt; involves verifying individual components or functions of a program in isolation to ensure they work correctly. It helps catch bugs early, supports safe code changes, and boosts overall reliability. Automated and fast, unit tests are fundamental to test-driven development and continuous integration.&lt;/P&gt;&lt;P class=""&gt;&lt;STRONG&gt;Test-Driven Development (TDD)&lt;/STRONG&gt; is a software development approach where we write tests before writing the actual code. We first create a failing test (Red), then write just enough code to pass it (Green), and finally refactor the code for improvement (Refactor). This cycle ensures better code quality, design, and test coverage from the start.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Benefits:&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL class="lia-align-justify" style="text-align : justify;"&gt;&lt;LI&gt;Catches bugs early&lt;/LI&gt;&lt;LI&gt;Improves code quality&lt;/LI&gt;&lt;LI&gt;Simplifies maintenance&lt;/LI&gt;&lt;LI&gt;Boosts developer confidence&lt;/LI&gt;&lt;LI&gt;Speeds up delivery&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;&lt;STRONG&gt;&lt;FONT size="4"&gt;Getting Started with Test-Driven Development (TDD)&lt;BR /&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P class=""&gt;Consider a system with three services:&lt;BR /&gt;&lt;STRONG&gt;Books Service:&lt;/STRONG&gt; Read-only catalog of books and authors for end users.&lt;BR /&gt;&lt;STRONG&gt;Orders Service:&lt;/STRONG&gt; Manage orders—view, create, delete.&lt;BR /&gt;&lt;STRONG&gt;Admin Service:&lt;/STRONG&gt; Full CRUD for products, authors, and categories.&lt;/P&gt;&lt;P class=""&gt;Each service is focused on a single responsibility, making them ideal for TDD.&lt;/P&gt;&lt;P class=""&gt;For detailed guidance on creating the above described SAP CAP Java application, please&amp;nbsp;&lt;SPAN class=""&gt;refer to the tutorial:&amp;nbsp;&lt;A href="https://developers.sap.com/mission.cap-java-app.html" target="_blank" rel="noopener noreferrer"&gt;https://developers.sap.com/mission.cap-java-app.html&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;In&lt;STRONG&gt; Test-Driven Development (TDD)&lt;/STRONG&gt;, we start by clearly defining the expected behaviour of a feature through test cases before writing any production code. This means we write tests that initially fail because the functionality doesn’t exist yet.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;For example, &lt;STRONG&gt;when adding stock validation and reduction in the Orders Service&lt;/STRONG&gt;, we begin by outlining key scenarios as test cases:&lt;/P&gt;&lt;UL class="lia-align-justify" style="text-align : justify;"&gt;&lt;LI&gt;&lt;STRONG&gt;Book Does Not Exist:&lt;/STRONG&gt; The test verifies that the system throws an error if an order contains a non-existent book.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Insufficient Stock:&lt;/STRONG&gt; The test ensures an error is raised when the requested quantity exceeds available stock.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Successful Stock Update:&lt;/STRONG&gt; The test confirms that stock is properly updated when the order is valid.&lt;/LI&gt;&lt;/UL&gt;&lt;P class=""&gt;The test class below uses &lt;STRONG&gt;JUnit&lt;/STRONG&gt; and &lt;STRONG&gt;Mockito&lt;/STRONG&gt; to define above mentioned expected behaviour for the "&lt;STRONG&gt;validateBookAndDecreaseStock"&lt;/STRONG&gt; method in the &lt;STRONG&gt;Orders Service&lt;/STRONG&gt;.&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package customer.bookstore.handlers;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.sap.cds.Result;
import com.sap.cds.ql.cqn.CqnSelect;
import com.sap.cds.ql.cqn.CqnUpdate;
import com.sap.cds.services.ServiceException;
import com.sap.cds.services.persistence.PersistenceService;

import cds.gen.ordersservice.OrderItems;
import cds.gen.sap.capire.bookstore.Books;

class OrdersServiceTest {

	@Mock
	private PersistenceService db;

	@InjectMocks
	private OrdersService ordersService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void testValidateBookAndDecreaseStock_BookDoesNotExist() {
		// Arrange
		OrderItems item = OrderItems.create();
		item.setBookId("book1");
		item.setAmount(2);

		Result result = mock(Result.class);
		when(db.run(any(CqnSelect.class))).thenReturn(result);

		// Act &amp;amp; Assert
		ServiceException exception = assertThrows(ServiceException.class, () -&amp;gt; {
			ordersService.validateBookAndDecreaseStock(Arrays.asList(item));
		});

		assertEquals("Book does not exist", exception.getMessage());
	}

	@Test
	void testValidateBookAndDecreaseStock_NotEnoughStock() {
		// Arrange
		OrderItems item = OrderItems.create();
		item.setBookId("book1");
		item.setAmount(5);

		Books book = Books.create();
		book.setStock(3);

		Result result = mock(Result.class);
		when(db.run(any(CqnSelect.class))).thenReturn(result);
		when(result.first(Books.class)).thenReturn(Optional.of(book));

		// Act &amp;amp; Assert
		ServiceException exception = assertThrows(ServiceException.class, () -&amp;gt; {
			ordersService.validateBookAndDecreaseStock(Arrays.asList(item));
		});

		assertEquals("Not enough books on stock", exception.getMessage());
	}

	@Test
	void testValidateBookAndDecreaseStock_SuccessfulStockUpdate() {
		// Arrange
		OrderItems item = OrderItems.create();
		item.setBookId("book1");
		item.setAmount(2);

		Books book = Books.create();
		book.setStock(5);

		Result result = mock(Result.class);
		when(db.run(any(CqnSelect.class))).thenReturn(result);
		when(result.first(Books.class)).thenReturn(Optional.of(book));

		// Act
		assertDoesNotThrow(() -&amp;gt; ordersService.validateBookAndDecreaseStock(Arrays.asList(item)));

		// Assert
		assertEquals(3, book.getStock());
		verify(db, times(1)).run(any(CqnUpdate.class));
	}
	
}&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;Initially, the test cases will fail (as shown in the image below) as we have not implemented the functionality yet.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anjali_Pathak_0-1753693277839.png" style="width: 443px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/292502i8440DFC03D519972/image-dimensions/443x162?v=v2" width="443" height="162" role="button" title="Anjali_Pathak_0-1753693277839.png" alt="Anjali_Pathak_0-1753693277839.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;Now, let us make the test cases work by writing the functional logic.&lt;BR /&gt;The following method is implemented based on the previously defined test cases, completing the TDD cycle by writing just enough logic to make all tests pass.&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package customer.bookstore.handlers;

import java.util.List;

import org.springframework.stereotype.Component;

import com.sap.cds.ql.Select;
import com.sap.cds.ql.Update;
import com.sap.cds.ql.cqn.CqnSelect;
import com.sap.cds.ql.cqn.CqnUpdate;
import com.sap.cds.services.ErrorStatuses;
import com.sap.cds.services.ServiceException;
import com.sap.cds.services.cds.CqnService;
import com.sap.cds.services.handler.EventHandler;
import com.sap.cds.services.handler.annotations.Before;
import com.sap.cds.services.handler.annotations.ServiceName;
import com.sap.cds.services.persistence.PersistenceService;

import cds.gen.ordersservice.OrderItems;
import cds.gen.ordersservice.OrderItems_;
import cds.gen.ordersservice.OrdersService_;
import cds.gen.sap.capire.bookstore.Books;
import cds.gen.sap.capire.bookstore.Books_;
@Component
@ServiceName(OrdersService_.CDS_NAME)
public class OrdersService implements EventHandler {

	private final PersistenceService db;

	OrdersService(PersistenceService db) {
		this.db = db;
	}

	@Before(event = CqnService.EVENT_CREATE, entity = OrderItems_.CDS_NAME)
	public void validateBookAndDecreaseStock(List&amp;lt;OrderItems&amp;gt; items) {
		for (OrderItems item : items) {
			String bookId = item.getBookId();
			Integer amount = item.getAmount();

			// check if the book that should be ordered is existing
			CqnSelect sel = Select.from(Books_.class).columns(b -&amp;gt; b.stock()).where(b -&amp;gt; b.ID().eq(bookId));
			Books book = db.run(sel).first(Books.class)
					.orElseThrow(() -&amp;gt; new ServiceException(ErrorStatuses.NOT_FOUND, "Book does not exist"));

			// check if order could be fulfilled
			int stock = book.getStock();
			if (stock &amp;lt; amount) {
				throw new ServiceException(ErrorStatuses.BAD_REQUEST, "Not enough books on stock");
			}

			// update the book with the new stock, means minus the order amount
			book.setStock(stock - amount);
			CqnUpdate update = Update.entity(Books_.class).data(book).where(b -&amp;gt; b.ID().eq(bookId));
			db.run(update);
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;P class=""&gt;We can now re-run the test cases to ensure the implementation satisfies all defined scenarios and that all tests pass successfully.&lt;BR /&gt;As per the TDD cycle, this is also the stage to &lt;STRONG&gt;refactor&lt;/STRONG&gt; the code, improving readability and structure without changing behaviour.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anjali_Pathak_1-1753693552451.png" style="width: 451px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/292511iE7B20357BFF49ED8/image-dimensions/451x159?v=v2" width="451" height="159" role="button" title="Anjali_Pathak_1-1753693552451.png" alt="Anjali_Pathak_1-1753693552451.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Testing the Code Coverage&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;Following the implementation of the logic using the TDD methodology, code coverage has been assessed using the JaCoCo plugin, as illustrated in the image below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anjali_Pathak_2-1753693678632.png" style="width: 689px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/292514i2F39A2CD8304E5EA/image-dimensions/689x166?v=v2" width="689" height="166" role="button" title="Anjali_Pathak_2-1753693678632.png" alt="Anjali_Pathak_2-1753693678632.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT size="4"&gt;&lt;STRONG&gt;Conclusion&lt;BR /&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P class=""&gt;This guide helps you in getting started with writing and organizing tests, mocking dependencies, and enhancing code reliability in SAP CAP Java applications. With these core practices in place, you're well-prepared to develop and maintain robust, testable SAP CAP Java solutions.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/getting-started-with-unit-testing-in-sap-cap-java-applications/ba-p/14164240"/>
    <published>2025-07-28T11:15:44.566000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/a-look-back-at-codeconnect-2025/ba-p/14161110</id>
    <title>A Look Back At CodeConnect 2025</title>
    <updated>2025-07-28T14:30:39.741000+02:00</updated>
    <author>
      <name>SimonVLaursen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/119538</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1606844488"&gt;A Look Back At CodeConnect 2025&lt;/H1&gt;&lt;P&gt;&lt;EM&gt;It's been almost 2 weeks now since I participated in the 2025 CodeConnect event, which was actually my first in-person CodeConnect ever.&lt;/EM&gt;&lt;BR /&gt;&lt;EM&gt;I would've participated in person sooner, but getting tickets is akin to trying to get the most popular item on Black Friday, it requires speed, precision and luck!&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;But enough rambling about the tickets! Let's take a look back at my journey to CodeConnect 2025.&lt;/EM&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1539413702"&gt;UI5Con 2025&lt;/H2&gt;&lt;P&gt;I'm going to skip the very first day of CodeConnect, mainly due to it being spent in a car for 16 hours, as me and my colleagues made the journey from the northern part of Jutland to St. Leon Rot.&lt;BR /&gt;So for us, the conference didn't start until day 2 with UI5Con, and that was some start.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Image (5).jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290732i8A23A75D2E4027DC/image-size/large?v=v2&amp;amp;px=999" role="button" title="Image (5).jpeg" alt="Image (5).jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Upon arrival at the building, it was straight into networking and trying to decide what sessions were most interesting to participate in.&lt;BR /&gt;We ended up doing a divide and conquer strategy in our group to get the most out of the day, with of course a focus on getting to the hands-on sessions.&lt;/P&gt;&lt;P&gt;My day quickly became side-tracked as I caught up with both old and new faces in my effort to connect with all the other developers present at the event.&lt;BR /&gt;Which, to be honest, for a mostly backend/cloud guy like me wasn't all bad. While I do enjoy a tango with the frontend from time to time, my heart belongs to what goes on behind the scenes.&lt;/P&gt;&lt;P&gt;But I did catch a lot of good talks still; so here are my take-aways from the first real day at CodeConnect:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Ownership of styling is slowly being handed back to the developer, meaning we can now make proper custom components for UI5 that style correctly with the themes such as Horizon.&lt;/LI&gt;&lt;LI&gt;Still no clear release date for UI5 v2, but we do have a legacy free 1.136 out there now that we can utilize and prepare with&lt;/LI&gt;&lt;LI&gt;Promise for UI5 developers that keep in line with the UI5 Linter, that their code will be lift and shift (i.e. go use the linter asap!)&lt;/LI&gt;&lt;LI&gt;The UI5 repository has completed its moving phase and is now living in its own repository&lt;/LI&gt;&lt;LI&gt;Accessibility, much like everywhere else in the developer space at the moment, is the talk of the town, and SAP is doing a lot of improvements on this front&lt;/LI&gt;&lt;LI&gt;2 test runners were presented as the replacements for the deprecated Karma runner. I know that I am leaning the most towards the WDI5 route due to it working as a more complete suite.&lt;/LI&gt;&lt;LI&gt;Webcomponents are the main focus going forward, and even though there is no timestamp on it, it seems like it will replace many of our current components going forward&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;That was pretty much my experience and take-aways for the first day there, and with it we wrapped up the UI5Con with some great food before heading back to the hotel.&lt;BR /&gt;The next for me, I knew would be something special.&lt;/P&gt;&lt;H2 id="toc-hId-1342900197"&gt;reCAP 2025&lt;/H2&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Image (4).jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290725i12EDCA87F0BC4BA9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Image (4).jpeg" alt="Image (4).jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Second day for me at CodeConnect started out with a great opening key note by Daniel Hutzel. Although he ran out of time by the end, I wish we could've listened to him for just a little while longer.&lt;/P&gt;&lt;P&gt;The key take-away of this keynote however, was extremely clear. Over the last year, the focus by the CAP team has really been on minimizing the footprint of the CAP/CDS install while optimizing and improving the feature set of the framework.&lt;BR /&gt;And from what we were presented, that definitely looked like it came out as a success. As a developer that uses CAP on a daily basis, both for plugin development and end-user projects, I can definitely say that I have enjoyed the improvements so far.&lt;/P&gt;&lt;P&gt;So a kudos to the CAP team is definitely in order on this! (Now we just need it to be open source!)&lt;/P&gt;&lt;P&gt;Unfortunately, I did not have as much time to participate in the many sessions of this day, as much like the day before, the event became more of a networking experience.&lt;BR /&gt;The sessions I did catch however, were absolutely great and definitely something that you should catch up on if you have the chance;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Both sessions by Mike Zaschka (just always a good listen and everybody loves open source!)&lt;/LI&gt;&lt;LI&gt;CAP Tools session by Christian Georgi (because you cannot be a good developer without knowing your tools)&lt;/LI&gt;&lt;LI&gt;Server-side Pre-rendering by Volker Buzek and Wouter Lemaire (a great session with insights into another great open source initiative)&lt;/LI&gt;&lt;LI&gt;CAP Best vs Bad Practices by Daniel Hutzel&lt;/LI&gt;&lt;LI&gt;Gain a superpower by learning how to harness the CDS REPL by DJ Adams (seriously, learn REPL)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;While these were the only sessions I managed to catch, I did however experience something extremely important during the reCAP event, and that was the community.&lt;/P&gt;&lt;P&gt;I got to connect with so many great people and talk about the passion of this side of the industry, and the love we all share for opens source technologies.&lt;/P&gt;&lt;P&gt;I even got the chance to appear on the &lt;A href="https://youtu.be/0PUDy-TkpiQ" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Developer News&lt;/A&gt; to share my own open source contribution (&lt;A href="https://www.linkedin.com/posts/simon-vestergaard-laursen-7b98406a_im-excited-to-announce-the-cap-mcp-plugin-activity-7345337883202879488-NAhN?utm_source=share&amp;amp;utm_medium=member_desktop&amp;amp;rcm=ACoAAA63yH0BMm6ssu6DfY9QWAt5VYMMUO0YUu4" target="_self" rel="nofollow noopener noreferrer"&gt;MCP Plugin for CAP&lt;/A&gt;).&lt;/P&gt;&lt;P&gt;And that is something I wouldn't trade for anything.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Image (3).jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290724iB2E249D2662D9D4C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Image (3).jpeg" alt="Image (3).jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1146386692"&gt;You Should Attend&lt;/H2&gt;&lt;P&gt;I hope it is clear from my post here that going to CodeConnect is an experience, no matter how you plan it. It is an event filled with great people and some great discussions around the subjects we all work with on a daily basis.&lt;/P&gt;&lt;P&gt;Never in a million years would I have imagined that going to CodeConnect would have resulted in me getting to participate in the SAP Developer News, nor that I would get to have great open discussions with other open source contributors.&lt;BR /&gt;It is definitely worth it, so if you get the chance I highly recommend that you participate!&lt;/P&gt;&lt;P&gt;Hopefully I will get the chance to contribute to the speakers list next year!&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Image (2).jpeg" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/290722iE880761F19A2E83E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Image (2).jpeg" alt="Image (2).jpeg" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/a-look-back-at-codeconnect-2025/ba-p/14161110"/>
    <published>2025-07-28T14:30:39.741000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/writing-sap-cap-services-in-kotlin/ba-p/14165709</id>
    <title>Writing SAP CAP services in Kotlin</title>
    <updated>2025-07-30T12:22:46.312000+02:00</updated>
    <author>
      <name>sam_devlin67</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/243259</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1606969396"&gt;Introduction&lt;/H1&gt;&lt;P&gt;SAP CAP has become a very popular way to write BTP services &amp;amp; is available in &lt;A href="https://cap.cloud.sap/docs/node.js/" target="_blank" rel="noopener nofollow noreferrer"&gt;Node.js&lt;/A&gt; and &lt;A href="https://cap.cloud.sap/docs/java/getting-started" target="_blank" rel="noopener nofollow noreferrer"&gt;Java&lt;/A&gt; flavours. I became curious recently if anyone had tried to write a CAP service using &lt;A href="https://kotlinlang.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;Kotlin&lt;/A&gt;, a JetBrains developed language which also runs on the JVM. Kotlin supports &lt;A href="https://www.baeldung.com/kotlin/java-interoperability" target="_blank" rel="noopener nofollow noreferrer"&gt;interoperability with Java&lt;/A&gt;, which in theory should mean that we can write our CAP service code in Kotlin, right?&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1410455891"&gt;Setting up our test service&lt;/H1&gt;&lt;P&gt;Let's start by running the CAP Java Maven archectype provided in the &lt;A href="https://cap.cloud.sap/docs/java/getting-started#run-the-cap-java-maven-archetype" target="_blank" rel="noopener nofollow noreferrer"&gt;getting started documentation&lt;/A&gt;, using the following command. When this command is run, we will be prompted for a 'groupId' and an 'artefactId'. I used 'com.sap.test' and 'ktcap', but feel free to use whatever values you want.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mvn archetype:generate -DarchetypeArtifactId="cds-services-archetype" -DarchetypeGroupId="com.sap.cds" -DarchetypeVersion="RELEASE" -DinteractiveMode=true&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Once the process has completed you should see a new CAP Java project contained within a subfolder, but if you open it in an IDE you'll notice that we don't have any code or schema definitions. Luckily the getting started docs also provide us with a CDS Maven plugin to give us a simple bookstore example.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mvn com.sap.cds:cds-maven-plugin:add -Dfeature=TINY_SAMPLE&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now we should have some entities defined in the &lt;FONT face="courier new,courier"&gt;db/data-model.cds&lt;/FONT&gt; file, as well as a handler Java file at &lt;FONT face="courier new,courier"&gt;srv/src/java/.../handlers/CatalogServiceHandler.java&lt;/FONT&gt;. Let's try to build &amp;amp; run the code to make sure we have a working service.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;Your code should build successfully &amp;amp; once you see the following log, your server is started.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;INFO 81621 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Navigate to &lt;A href="http://localhost:8080" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080&lt;/A&gt;&amp;nbsp;in your browser and click on the "Books" OData endpoint. You should see some data, similar to the below screenshot. &lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-29 at 15.34.17.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293413i192F8C5765E11770/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-29 at 15.34.17.png" alt="Screenshot 2025-07-29 at 15.34.17.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1343025105"&gt;A Quick note for IntelliJ users&lt;/H2&gt;&lt;P&gt;You may notice when you try to look at the handler code in IntelliJ that you are seeing a lot of errors, similar to the screenshot below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-29 at 15.38.36.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293416iDB9A547FC9E643E1/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-29 at 15.38.36.png" alt="Screenshot 2025-07-29 at 15.38.36.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When the CAP build happens (which it does as part of our previous maven command) it generates a lot of new java files located in the src/gen folder. Because IntelliJ doesn't know about this, it doesn't understand all of the references in our source code. You can easily resolve this issue by going to the &lt;FONT face="courier new,courier"&gt;src/gen/java&lt;/FONT&gt; folder in the "Project" panel of IntelliJ, right clicking the folder and selecting "Mark Directory as" &amp;gt; "Generated sources root".&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-29 at 15.43.15.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293419i447D6BD585327CE9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-29 at 15.43.15.png" alt="Screenshot 2025-07-29 at 15.43.15.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1017428881"&gt;Inspecting the handler code&lt;/H1&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;@Component
@ServiceName(CatalogService_.CDS_NAME)
public class CatalogServiceHandler implements EventHandler {

	@After(event = CqnService.EVENT_READ)
	public void discountBooks(Stream&amp;lt;Books&amp;gt; books) {
		books.filter(b -&amp;gt; b.getTitle() != null &amp;amp;&amp;amp; b.getStock() != null)
		.filter(b -&amp;gt; b.getStock() &amp;gt; 200)
		.forEach(b -&amp;gt; b.setTitle(b.getTitle() + " (discounted)"));
	}

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The sample handler code CAP gave us is pretty straightforward. Basically what we need to know is:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The class is annotated as a "&lt;A href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html" target="_blank" rel="noopener nofollow noreferrer"&gt;Component&lt;/A&gt;", which will enable the class to be automatically detected and registered as a spring bean in the Spring Application Context.&lt;/LI&gt;&lt;LI&gt;The class implements an interface &lt;FONT face="courier new,courier"&gt;EventHandler&lt;/FONT&gt;&amp;nbsp;which enables CAP to distinguish the spring bean as one that may contain event handler methods.&lt;/LI&gt;&lt;LI&gt;It is also annotated with &lt;FONT face="courier new,courier"&gt;@ServiceName&lt;/FONT&gt;. This tells CAP for which service the handler functions should be registered. In our case we have only defined one service; &lt;FONT face="courier new,courier"&gt;CatalogService&lt;/FONT&gt;, in the srv folder.&lt;/LI&gt;&lt;LI&gt;Finally we have a function which appends "(discounted)" to any book with more than 200 copies in stock. This function is marked with the&amp;nbsp;&lt;FONT face="courier new,courier"&gt;@After&lt;/FONT&gt; annotation, which registers the function as a handler to be executed after the &lt;FONT face="courier new,courier"&gt;On&lt;/FONT&gt; handlers.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Let's try to do something similar in Kotlin.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-820915376"&gt;Basic Kotlin Handler&lt;/H1&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;// src/main/java/com/sap/test/ktcap/handlers/TestKotlinHandler.kt

package com.sap.test.ktcap.handlers

import cds.gen.catalogservice.Books
import cds.gen.catalogservice.CatalogService_
import com.sap.cds.services.cds.CqnService
import com.sap.cds.services.handler.EventHandler
import com.sap.cds.services.handler.annotations.After
import com.sap.cds.services.handler.annotations.ServiceName
import org.springframework.stereotype.Component
import java.util.stream.Stream

@Component
@ServiceName(CatalogService_.CDS_NAME)
class TestKotlinHandler: EventHandler {

    @After(event = [CqnService.EVENT_READ])
    fun appendKotlinStr(books: Stream&amp;lt;Books&amp;gt;){
        books.forEach { b -&amp;gt; b.title += " was processed by Kotlin handler" }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Here is a basic Kotlin handler implementation that should simply append some text to the title field of all books returned to the client. When you create this Kotlin file, IntelliJ will detect that we do not have Kotlin configured in our project. Click "configure" on the warning to handle this automatically or alternatively you can manually add kotlin as a dependency in the &lt;FONT face="courier new,courier"&gt;pom.xml&lt;/FONT&gt;. With kotlin configured for our project, we can build &amp;amp; run the CAP service as before and navigate to the Books endpoint.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-29 at 16.31.52.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293448i63D2D81B6F904928/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-29 at 16.31.52.png" alt="Screenshot 2025-07-29 at 16.31.52.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Looks like our handler ran as expected! Inspecting the logs we can also see that the handler was registered to the Cds Runtime as expected.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;INFO 89519 --- [  restartedMain] c.s.c.s.impl.runtime.CdsRuntimeImpl      : Registered handler class com.sap.test.ktcap.handlers.TestKotlinHandler&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;With this first handler we have proven that our Kotlin class could be registered as a Spring Bean, a handler in the Cds Runtime and that it can exist alongside other Java code in our service.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-624401871"&gt;Replacing the Java Handler with Kotlin&lt;/H1&gt;&lt;P&gt;If you look closer at our previous handler, you may notice there is one issue with our implementation; The handler is still accepting&amp;nbsp;&lt;FONT face="courier new,courier"&gt;Stream&amp;lt;Books&amp;gt;&lt;/FONT&gt;&amp;nbsp;, a &lt;EM&gt;Java&lt;/EM&gt; steam. So although we have implemented our handler in Kotlin, we are not yet using the Kotlin standard library structures to process the data. Let's see if we can achieve the original Java handler functionality by re-writing our Kotlin handler.&lt;/P&gt;&lt;P&gt;As per the CAP documentation, we don't actually need to accept a stream in our function signature - we can accept any Collection or a singular cds type (if we know we are only dealing with one item). So let's try to use a Kotlin List and see if the handler behaves as it did before.&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;@After(event = [CqnService.EVENT_READ])
fun appendKotlinStr(books: MutableList&amp;lt;Books&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Recompiling &amp;amp; running the code gives us the same behaviour as before, so we should be able to continue using collections from the Kotlin standard library in our final implementation.&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package com.sap.test.ktcap.handlers

import cds.gen.catalogservice.Books
import cds.gen.catalogservice.CatalogService_
import com.sap.cds.services.cds.CqnService
import com.sap.cds.services.handler.EventHandler
import com.sap.cds.services.handler.annotations.After
import com.sap.cds.services.handler.annotations.ServiceName
import org.springframework.stereotype.Component

@Component
@ServiceName(CatalogService_.CDS_NAME)
class TestKotlinHandler: EventHandler {

    @After(event = [CqnService.EVENT_READ])
    fun appendKotlinStr(books: MutableList&amp;lt;Books&amp;gt;){
        books
            .filter { b -&amp;gt; b.title != null &amp;amp;&amp;amp; b.stock != null }
            .filter { b -&amp;gt; b.stock &amp;gt; 200 }
            .forEach { b -&amp;gt; b.title += " was processed by Kotlin handler" }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp; And a final compile &amp;amp; run to check that we get the result we expect..&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-07-30 at 11.02.13.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/293815i9BC3BA995CF6FAE9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-07-30 at 11.02.13.png" alt="Screenshot 2025-07-30 at 11.02.13.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Nice! Our handler is now affecting only the records with more than 200 copies in stock, just like the original Java handler. The only difference is that we are not using a stream, which we can easily introduce by changing line 17 to &lt;FONT face="courier new,courier"&gt;books.asSequence()&lt;/FONT&gt; and then chaining our filters as normal, if desired.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-427888366"&gt;Conclusion&lt;/H1&gt;&lt;P&gt;What we have proven with the above PoC is that Kotlin/Java interoperability works pretty nicely within an SAP CAP application, at least in this basic scenario. We were able to:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Implement a working Kotlin handler&lt;/LI&gt;&lt;LI&gt;Register the class as a spring bean within a Spring Java Application&lt;/LI&gt;&lt;LI&gt;Register the handler within the CdsRuntime&lt;/LI&gt;&lt;LI&gt;Process the generated Java "Books" class within a Kotlin data structure&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now we know that we can do it, the question is - should we? Well, Kotlin gives us some pretty nice language features that are not available in Java, for example:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;A href="https://kotlinlang.org/docs/extensions.html" target="_blank" rel="noopener nofollow noreferrer"&gt;Extensions&lt;/A&gt;, the ability to extend classes from 3rd party packages without inheriting from them&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Compile time &lt;A href="https://kotlinlang.org/docs/null-safety.html" target="_blank" rel="noopener nofollow noreferrer"&gt;nullability&lt;/A&gt; checks&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://kotlinlang.org/docs/async-programming.html#coroutines" target="_blank" rel="noopener nofollow noreferrer"&gt;Coroutines&lt;/A&gt;, an asynchronous programming technique similar to Go's goroutines&lt;/LI&gt;&lt;LI&gt;A more concise, intuitive syntax&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;However, given that we are writing our Kotlin code within two frameworks (CAP &amp;amp; Spring) which were written specifically for Java, there is a risk that differences between how the languages implement null checking, reflection or asynchronocity could result in adverse behaviour at runtime. Even in these cases, it's nice to know that we can fall back to a pure Java class within the same project if needed.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/writing-sap-cap-services-in-kotlin/ba-p/14165709"/>
    <published>2025-07-30T12:22:46.312000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-cloud-sdk-for-ai-in-an-existing-cap-nodejs-project-in-commonjs/ba-p/14169098</id>
    <title>How to use Cloud SDK for AI in an existing CAP NodeJS Project in CommonJS</title>
    <updated>2025-08-01T10:03:01.242000+02:00</updated>
    <author>
      <name>Jacky_Liu1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/132085</uri>
    </author>
    <content>&lt;P&gt;I have an existing SAP Cloud Application Program Project in CommonJs. I want to add custom AI function in it . So need to use &lt;A href="https://sap.github.io/ai-sdk/docs/js/overview-cloud-sdk-for-ai-js" target="_self" rel="nofollow noopener noreferrer"&gt;SAP Cloud SDK for AI&amp;nbsp;&lt;/A&gt;in my project. But SAP Cloud SDK for AI only support native ESM.&amp;nbsp; Convert my existing project into ESM? I think it is too risky.&amp;nbsp; I need to use the ESM module in the CommonJs project.&amp;nbsp; At last, it works. Let me share the steps which maybe be helpful for you.&lt;/P&gt;&lt;H4 id="toc-hId-1994330268"&gt;Steps:&lt;/H4&gt;&lt;H5 id="toc-hId-1926899482"&gt;1,&amp;nbsp; Install&amp;nbsp;&lt;SPAN&gt;esbuild in the root path of my project:&lt;/SPAN&gt;&lt;/H5&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i esbuild&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-1730385977"&gt;2.&amp;nbsp; Create&amp;nbsp; folder named &lt;U&gt;&lt;EM&gt;esm&lt;/EM&gt;&lt;/U&gt; under&amp;nbsp; &lt;U&gt;&lt;EM&gt;srv&lt;/EM&gt;&lt;/U&gt;, then create a file named &lt;U&gt;&lt;EM&gt;index.js&lt;/EM&gt;&lt;/U&gt; under folder &lt;U&gt;&lt;EM&gt;esm&lt;/EM&gt;&lt;/U&gt; with the following code .&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;import { OrchestrationClient, buildAzureContentSafetyFilter } from '@sap-ai-sdk/orchestration';
import { AzureOpenAiEmbeddingClient } from '@sap-ai-sdk/langchain'

export { OrchestrationClient, buildAzureContentSafetyFilter, AzureOpenAiEmbeddingClient };&lt;/code&gt;&lt;/pre&gt;&lt;H5 id="toc-hId-1533872472"&gt;3.&amp;nbsp; Add following script in my package.json file in project root path.&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt; "deps": "esbuild --platform=node srv/esm/index.js --bundle --outfile=srv/esm/bundle.js"&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jacky_Liu1_0-1754034389278.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295028iDF153B0500979B79/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jacky_Liu1_0-1754034389278.png" alt="Jacky_Liu1_0-1754034389278.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1337358967"&gt;4.&amp;nbsp; Run the following command in the project root path in terminal.&lt;/H5&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm run deps&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Jacky_Liu1_0-1754035312369.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295041i01BDB7AACC94EFE6/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Jacky_Liu1_0-1754035312369.png" alt="Jacky_Liu1_0-1754035312369.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H5 id="toc-hId-1140845462"&gt;5.&amp;nbsp; Adjust the code of importing the module of &lt;U&gt;&lt;EM&gt;SAP Cloud SDK for AI &lt;/EM&gt;&lt;/U&gt;as the following.&lt;/H5&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;// const { OrchestrationClient, buildAzureContentSafetyFilter } = require('@sap-ai-sdk/orchestration');
const { OrchestrationClient, buildAzureContentSafetyFilter } = require('../esm/bundle');
// const { AzureOpenAiEmbeddingClient } = require('@sap-ai-sdk/langchain');
const { AzureOpenAiEmbeddingClient } = require('../esm/bundle');&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The ends!&lt;/P&gt;&lt;P&gt;Thanks for your time!&lt;/P&gt;&lt;P&gt;Jacky Liu&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-use-cloud-sdk-for-ai-in-an-existing-cap-nodejs-project-in-commonjs/ba-p/14169098"/>
    <published>2025-08-01T10:03:01.242000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-community-escape-house-for-august-fiori-element-with-flexible/ba-p/14167685</id>
    <title>SAP Community Escape House for August - Fiori Element with Flexible Programming Model</title>
    <updated>2025-08-04T10:10:14.915000+02:00</updated>
    <author>
      <name>AmarUbhe</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/163102</uri>
    </author>
    <content>&lt;P&gt;The &lt;STRONG&gt;eighth edition of the SAP Developer Challenge 2025&lt;/STRONG&gt; has officially kicked off!&amp;nbsp; A brand-new room has opened its doors inside the &lt;A title="SAP Community Escape House" href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com/" target="_self" rel="noopener noreferrer"&gt;&lt;STRONG&gt;SAP Community Escape House&lt;/STRONG&gt;&lt;/A&gt;.&amp;nbsp; Hope you all escaped alive from the SAP Application Event Hub room last month.&amp;nbsp;&lt;/P&gt;&lt;P&gt;In this developer challenge, we are focusing on &lt;STRONG&gt;SAP Fiori&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;Element&lt;/STRONG&gt; and the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt;. We are going to cover topics like:&lt;/P&gt;&lt;P&gt;FPM - Extension Points&lt;/P&gt;&lt;P&gt;FPM - Building Block&lt;/P&gt;&lt;P&gt;FPM - Controller Extension&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1607028261"&gt;Prerequisite&lt;/H1&gt;&lt;P&gt;You have to clone the repository from:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;A class="" href="https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam.git" target="_new" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam.git&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;For this challenge, you will be working in the &lt;FONT color="#0000FF"&gt;&lt;STRONG&gt;finished-bookshop&lt;/STRONG&gt;&lt;/FONT&gt; folder. This folder contains a completed CAP project that serves as the starting point for exploring extensibility using the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt; with &lt;STRONG&gt;SAP Fiori Elements&lt;/STRONG&gt;.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;All extension tasks, including UI enhancements and controller customizations, will be implemented on top of this &lt;STRONG&gt;CAP project&lt;/STRONG&gt;. Inside this project, there is an existing &lt;STRONG&gt;Fiori Elements List Report application&lt;/STRONG&gt; named &lt;FONT color="#0000FF"&gt;&lt;STRONG&gt;bookshop-ui&lt;/STRONG&gt;&lt;/FONT&gt;, which serves as the foundation for this challenge.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;You will extend this application using the &lt;STRONG&gt;Flexible Programming Model&lt;/STRONG&gt;, applying techniques such as &lt;STRONG&gt;Fiori extension points&lt;/STRONG&gt;, &lt;STRONG&gt;building blocks&lt;/STRONG&gt;, and &lt;STRONG&gt;controller extensions&lt;/STRONG&gt; to tailor the UI and behavior according to developer challenge.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1604971530" id="toc-hId-1410514756"&gt;How to participate&lt;/H1&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;Visit the&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com/" target="_blank" rel="noopener noreferrer"&gt;SAP Community Escape House&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and enter your&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;numeric&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;SAP Community user ID.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="SAP Community Escape House" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/294502iD7D2B0DE57B525D6/image-size/large?v=v2&amp;amp;px=999" role="button" title="EscapeHouseLogin.png" alt="SAP Community Escape House" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;SAP Community Escape House&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;If you're unsure of your user ID, you can find it on your user settings page url.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;Goto&amp;nbsp;&lt;A href="https://community.sap.com/" target="_blank"&gt;SAP Community Page.&amp;nbsp;&lt;/A&gt;Click on &lt;STRONG&gt;Account&lt;/STRONG&gt;&lt;SPAN&gt; and then select &lt;/SPAN&gt;&lt;STRONG&gt;My content&lt;/STRONG&gt;&lt;SPAN&gt;.&amp;nbsp;You can find the community user ID in the web page URL.&amp;nbsp;Once you see the SAP Community Escape House, select the SAP Fiori Element room and start exploring it.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-46-25.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295893i23ED69E595E5DFC1/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-46-25.png" alt="2025-08-04_12-46-25.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-52-54.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295894i166823321F4BC64A/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-52-54.png" alt="2025-08-04_12-52-54.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-08-04_12-57-20.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/295895i1820808AC4717E2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-08-04_12-57-20.png" alt="2025-08-04_12-57-20.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;The user interface of an escape room includes the room itself as well as a terminal. You can click the objects in the room to receive tips.&amp;nbsp;Like in a real (physical) escape room, you will have to try out a few things and explore the room until you receive helpful tips and, eventually, instructions. These tips and instructions are printed in the terminal next to the room.&amp;nbsp;The terminal is also used to submit solutions to tasks. Read the instructions you receive carefully to understand how.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AmarUbhe_0-1753958354704.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/294531i139DAD5126DEE294/image-size/large?v=v2&amp;amp;px=999" role="button" title="AmarUbhe_0-1753958354704.png" alt="AmarUbhe_0-1753958354704.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&lt;SPAN&gt;If you successfully escape the room (you will know when that happens), you will receive a badge in the SAP Community.&amp;nbsp;We will assign the badges once the challenge closes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1408458025" id="toc-hId-1214001251"&gt;The schedule&lt;/H1&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;The SAP Fiori room will be unlocked on August 4th and will stay unlocked until the end of the year. However, the challenge closes on August 31st, so you must escape the room until then to qualify for a badge. Unlike the previous year, this SAP Developer Challenge does not consist of weekly sub-challenges. The next room (next challenge) will be unlocked in September.&lt;/P&gt;&lt;P class="lia-align-justify" style="text-align : justify;"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-1376249370" id="toc-hId-1017487746"&gt;Useful links for the challenge&lt;/H1&gt;&lt;UL&gt;&lt;LI&gt;Flexible Programming Model :&amp;nbsp;&lt;A title="Flexible Programming Model" href="https://sapui5.hana.ondemand.com/test-resources/sap/fe/core/fpmExplorer/index.html#/overview/introduction" target="_self" rel="nofollow noopener noreferrer"&gt;https://sapui5.hana.ondemand.com/test-resources/sap/fe/core/fpmExplorer/index.html#/overview/introduction&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Fiori Element OData V4 :&amp;nbsp;&lt;A href="https://developers.sap.com/group.fiori-tools-odata-v4-incident.html" target="_self" rel="noopener noreferrer"&gt;https://developers.sap.com/group.fiori-tools-odata-v4-incident.html&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;FPM Code Jam :&amp;nbsp;&lt;A href="https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam/tree/main?tab=readme-ov-file" target="_self" rel="nofollow noopener noreferrer"&gt;https://github.com/SAP-samples/fiori-elements-fpm-exercises-codejam/tree/main?tab=readme-ov-file&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Good luck and happy escaping!&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-community-escape-house-for-august-fiori-element-with-flexible/ba-p/14167685"/>
    <published>2025-08-04T10:10:14.915000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AEcap-java%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B%E3%82%89%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88-odata-api-%E3%81%B8%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/ba-p/14172974</id>
    <title>ローカルのCAP Javaプロジェクトからリモート OData API へ接続する手順</title>
    <updated>2025-08-11T08:29:06.785000+02:00</updated>
    <author>
      <name>Umezuki</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/841332</uri>
    </author>
    <content>&lt;DIV&gt;&lt;H2 id="toc-hId-1736888397"&gt;目的&lt;/H2&gt;&lt;P&gt;ローカルの CAP Java プロジェクトから、SAP S/4HANA の Sandbox OData API を呼び出してデータを取得する手順の一例をまとめます。最終的には、以下のURLにアクセスしてBusiness Partnersを取得することをゴールとします。&lt;/P&gt;&lt;P&gt;&lt;A href="http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;H2 id="toc-hId-1540374892"&gt;1. 検証時の環境&lt;/H2&gt;&lt;DIV&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&amp;nbsp;SAP BTP トライアル環境&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;SAP Business Accelerator Hub の Sandbox 環境&lt;/LI&gt;&lt;LI&gt;開発環境: Visual Studio Code&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Maven&amp;nbsp; 3.9&lt;/LI&gt;&lt;LI&gt;OpenJDK 21&lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;DIV&gt;&lt;H2 id="toc-hId-1343861387"&gt;2. プロジェクトの作成&lt;/H2&gt;&lt;P&gt;2.1. CAP Javaプロジェクトの初期化&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds init cap-java-remote-api --add destination,xsuaa --java&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;初期化後、以下のようなプロジェクトフォルダーが作成されます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.08.10.png" style="width: 420px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298811iBF8B4C6F08704B7A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.08.10.png" alt="Screenshot 2025-08-09 at 16.08.10.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.2. プロジェクトをVisual Studio Code で開く&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;code cap-java-remote-api&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.06.25.png" style="width: 305px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298812i23214A6D24A7A3C9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.06.25.png" alt="Screenshot 2025-08-09 at 16.06.25.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1147347882"&gt;3. ライブラリの追加&lt;/H2&gt;&lt;P&gt;リモート OData API に接続するには、SAP Cloud SDK と リモート OData用のライブラリが必要です。&lt;/P&gt;&lt;P&gt;3.1. ルートディレクトリのpom.xml に SAP Cloud SDK の最新のバージョンをプロパティとして追加し、dependencyManagement に sdk-bom を追加します。&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    ...
    &amp;lt;!-- 最新のSDKのバージョンに置き換える --&amp;gt;
    &amp;lt;cloud-sdk.version&amp;gt;5.20.0&amp;lt;/cloud-sdk.version&amp;gt;
&amp;lt;/properties&amp;gt;
...
&amp;lt;dependencyManagement&amp;gt;
	&amp;lt;dependencies&amp;gt;
        ...
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.sap.cloud.sdk&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;sdk-bom&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cloud-sdk.version}&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;3.2. srv/pom.xmlに以下のライブラリを追加します。&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cds&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;cds-feature-remote-odata&amp;lt;/artifactId&amp;gt;
		&amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;

	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cloud.sdk&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;sdk-core&amp;lt;/artifactId&amp;gt;
	&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-950834377"&gt;4. ODataメタデータの取得とCSNの生成&lt;/H2&gt;&lt;P&gt;OData API を使うには、ODataのエンティティやプロパティ情報を記載したメタデータファイル(EDMX)から、CAP内部の共通モデル表現として役割を果たす、CSN形式に変換した上で、CDSでのモデリングを行う必要があります。&lt;/P&gt;&lt;P&gt;4.1. SAP&amp;nbsp;Business Accelerator HubのBusiness Partner (A2X)からEDMXをダウンロード&lt;/P&gt;&lt;P&gt;&lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/API_BUSINESS_PARTNER/overview&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 13.31.37.png" style="width: 779px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299183iF693C036A176C0D3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 13.31.37.png" alt="Screenshot 2025-08-11 at 13.31.37.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4.2. ルートディレクトリの配下に.edmxファイルを格納&lt;/P&gt;&lt;P&gt;4.3. .edmxから.csn を生成&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds import API_BUSINESS_PARTNER.edmx&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.23.04.png" style="width: 889px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298813i6925F272B6BEFB45/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.23.04.png" alt="Screenshot 2025-08-09 at 16.23.04.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;実行後、 srv/external フォルダに .edmx と .csn ファイルが生成されます。&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.23.32.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298814iD2927F42D196A41B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.23.32.png" alt="Screenshot 2025-08-09 at 16.23.32.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;加えて、application.yaml に Destination Service のテンプレート設定が追加されます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.26.16.png" style="width: 412px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298815iCE79C4F7F4E7C32C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.26.16.png" alt="Screenshot 2025-08-09 at 16.26.16.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-754320872"&gt;5. 接続設定&lt;/H2&gt;&lt;P&gt;S/4HANA のような外部システムと接続する際に、他サービスからの再利用性も高く、接続先や認証情報を設定できるBTP の Destination Service を利用します。今回はSandbox 環境のため、APIKeyでの認証を行い、.envファイルにその情報を格納しますが、実運用環境では他の適切な認証方式を使用してください。&lt;/P&gt;&lt;P&gt;5.1. BTP Destination Service に S/4HANA Sandbox の情報を登録&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Name: S4Sandbox&lt;/LI&gt;&lt;LI&gt;Type: HTTP&lt;/LI&gt;&lt;LI&gt;ProxyType: Internet&lt;/LI&gt;&lt;LI&gt;URL: &lt;A href="https://sandbox.api.sap.com/s4hanacloud" target="_blank" rel="noopener noreferrer"&gt;https://sandbox.api.sap.com/s4hanacloud&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Authentication: NoAuthentication&lt;BR /&gt;&lt;UL&gt;&lt;LI&gt;Sandbox環境のため、ここではNoAuthenticationを選択し、後続のapplication.yamlにてAPIKeyを.env経由で渡します。&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 15.19.55.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298809i5D4884B8945AB664/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 15.19.55.png" alt="Screenshot 2025-08-09 at 15.19.55.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5.2. .envにAPIKeyを設定&lt;/P&gt;&lt;P&gt;APIキーはBusiness Accelerator Hubから取得できます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.05.52.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299169iA9BA4CBFB4C9144A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.05.52.png" alt="Screenshot 2025-08-11 at 12.05.52.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;APIKey=&amp;lt;Business Accelerator Hubで取得したAPIキー&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;5.3. application.yamlで接続先の設定&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds:
  remote:
    services:
      API_BUSINESS_PARTNER:
        destination:
          # 対象のDestination Serviceで登録したDestination名を記載する
          name: S4Sandbox
        http:
          suffix: /sap/opu/odata/sap
          # Sandbox APIを使用する場合には、APIKeyをHTTPヘッダーに入れる必要がある
          headers:
            # 環境変数のAPIKeyを参照する
            APIKey: ${APIKey}
        type: odata-v2&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-557807367"&gt;6. サービスモデルとハンドラの実装&lt;/H2&gt;&lt;P&gt;6.1 srv/business-partner-service.cdsにサービスモデルを実装&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;using {API_BUSINESS_PARTNER as bp} from './external/API_BUSINESS_PARTNER';

service BusinessPartnerService @(requires: 'any') {
    entity BusinessPartner as projection on bp.A_BusinessPartner {
        key A_BusinessPartner.BusinessPartner,
            A_BusinessPartner.BusinessPartnerName,
            A_BusinessPartner.BusinessPartnerFullName
    };
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;先ほど作成した .csn に含まれる API_BUSINESS_PARTNER を投影し、サービスモデルのエンティティ BusinessPartner を定義します。&lt;/P&gt;&lt;P&gt;6.2. srv/src/main/java/customer/cap_java_remote_api/handlers/BusinessPartnerHandler.javaにハンドラを実装&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package customer.cap_java_remote_api.handlers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sap.cds.Result;
import com.sap.cds.services.cds.CdsReadEventContext;
import com.sap.cds.services.handler.EventHandler;
import com.sap.cds.services.handler.annotations.On;
import com.sap.cds.services.handler.annotations.ServiceName;

import cds.gen.api_business_partner.ApiBusinessPartner;
import cds.gen.businesspartnerservice.BusinessPartner_;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
@ServiceName("BusinessPartnerService")
public class BusinessPartnerHandler implements EventHandler {

    @Autowired
    ApiBusinessPartner remoteBp;

    private static final Logger logger = LoggerFactory.getLogger(BusinessPartnerHandler.class);
    // このブログサービスの仕様でアットマークとそれに付随する文字列が消えてしまいます。下記のコードに置き換えてください。
    (entity = BusinessPartner_.CDS_NAME)
    public Result readBusinessPartner(CdsReadEventContext context) {
        try {
            logger.info("Reading Business Partner data from S/4HANA with CQN: {}", context.getCqn());
            return remoteBp.run(context.getCqn());
        } catch (Exception e) {
            logger.error("Error while reading Business Partner data from S/4HANA.", e);
            throw new RuntimeException(e);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;上記でコメントした行をこちらに置き換えてください。&lt;/P&gt;&lt;P&gt;'@On(entity = BusinessPartner_.CDS_NAME)'&lt;/P&gt;&lt;P&gt;また、CQNを使用する際は、CqnServiceを継承したインターフェイスを使用します。今回でいうと、remoteBpのインターフェイスであるApiBusinessPartnerは、CqnServiceを継承しています。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.12.57.png" style="width: 552px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299173i326FDDD8D81D45EE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.12.57.png" alt="Screenshot 2025-08-11 at 12.12.57.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-361293862"&gt;7. デプロイ準備&lt;/H2&gt;&lt;P&gt;ローカルで開発したCAP JavaアプリケーションをSAP BTPのCloud Foundry環境へデプロイするための準備を行います。&lt;/P&gt;&lt;P&gt;7.1. MTAファイルの作成&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add mta&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;mta.yamlが生成されますが、modulesに記載のcap-java-remote-api-srvが生成されただけではなく、プロジェクト初期化の際にaddオプションでつけた、xsuaaとdestinationがそれぞれバッキングサービスとしてresourcesに記載されていることが確認できます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.41.58.png" style="width: 686px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299179iB3A160479CC7927D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.41.58.png" alt="Screenshot 2025-08-11 at 12.41.58.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;加えて、srv/pom.xmlに以下のライブラリが追加されます。&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cds&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;cds-starter-cloudfoundry&amp;lt;/artifactId&amp;gt;
		&amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;

	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
	&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7.2. ビルド&amp;amp;ローカルリポジトリへのインストール&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mvn clean install&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-164780357"&gt;8. BTPへデプロイ&lt;/H2&gt;&lt;P&gt;8.1. mtarファイルの作成&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mbt build --mtar archive
#  CAPを扱う際には、前回のビルド成果物を削除したいケースが多いので、
# 下記のコマンドを叩くことが多いです。
# rm -rf mta_archives &amp;amp;&amp;amp; mbt build --mtar archive&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.2. 対象のCloud Foundry環境を選択&lt;/P&gt;&lt;P&gt;BTP CockpitのサブアカウントページからAPI Endpointを取得できます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.29.40.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299029i1200738CD3FE787D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.29.40.png" alt="Screenshot 2025-08-10 at 20.29.40.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf api &amp;lt;対象のCFエンドポイント&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.3. Cloud Foundryにログイン&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf login&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.4. Cloud Foundryにデプロイ&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf deploy mta_archives/archive.mtar
# デプロイが失敗した時には三度のリトライがデフォルトで実施されますが、
# 一度だけで済ませても問題ないケースが多いので、時間短縮のために、下記のコマンドをよく使います。
# cf deploy mta_archives/archive.mtar --retries 1&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;8.5. BTP Cockpitでデプロイ結果を確認&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.36.06.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299032i81C64DCDA2B57375/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.36.06.png" alt="Screenshot 2025-08-10 at 20.36.06.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--31733148"&gt;9. ローカルからリモートAPIへアクセス&lt;/H2&gt;&lt;P&gt;最後に、ローカル環境からリモートOData APIにアクセスします。そのためには、BTPにデプロイしたバッキングサービスをローカルにバインドする必要があります。&lt;/P&gt;&lt;P&gt;9.1. BTP上のxsuaaとdestinationをローカルにバインド&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds bind auth --to cap-java-remote-api-auth
cds bind destination --to cap-java-remote-api-destination&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;このバインドにより、ハイブリッド環境用のバッキングサービスの設定が行えます。&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.50.26.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299035iD96558F42CFCFD43/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.50.26.png" alt="Screenshot 2025-08-10 at 20.50.26.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;9.2. Hybrid Testing&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds bind --exec -- mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9.3. 対象エンドポイントにて、結果を確認&lt;/P&gt;&lt;P&gt;&lt;A href="http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.48.22.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299034i2089150842E7A939/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.48.22.png" alt="Screenshot 2025-08-10 at 20.48.22.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;CAP Javaプロジェクトのお役に立てれば幸いです！&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AEcap-java%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B%E3%82%89%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88-odata-api-%E3%81%B8%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/ba-p/14172974"/>
    <published>2025-08-11T08:29:06.785000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-call-a-remote-odata-api-from-your-local-cap-java-project/ba-p/14177098</id>
    <title>How to Call a Remote OData API from Your Local CAP Java Project</title>
    <updated>2025-08-11T08:29:09.172000+02:00</updated>
    <author>
      <name>Umezuki</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/841332</uri>
    </author>
    <content>&lt;H2 id="toc-hId-1737028769"&gt;Objective&lt;/H2&gt;&lt;P&gt;This post walks you through how to call the SAP S/4HANA sandbox OData API from a local CAP Java project.&lt;BR /&gt;The final goal is to call the following endpoint and retrieve a list of business partners:&lt;BR /&gt;&lt;A href="http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner&lt;/A&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1540515264"&gt;1. Testing Environment&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;SAP BTP Trial&lt;/LI&gt;&lt;LI&gt;SAP Business Accelerator Hub – Sandbox&lt;/LI&gt;&lt;LI&gt;IDE: Visual Studio Code&lt;/LI&gt;&lt;LI&gt;Maven 3.9&lt;/LI&gt;&lt;LI&gt;OpenJDK 21&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-1344001759"&gt;2. Project Setup&lt;/H2&gt;&lt;P&gt;2.1 Initialize a CAP Java project&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds init cap-java-remote-api --add destination,xsuaa --java&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The command creates the following folder structure:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.08.10.png" style="width: 420px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298811iBF8B4C6F08704B7A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.08.10.png" alt="Screenshot 2025-08-09 at 16.08.10.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;2.2 Open the project in VS Code&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;code cap-java-remote-api&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.06.25.png" style="width: 305px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298812i23214A6D24A7A3C9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.06.25.png" alt="Screenshot 2025-08-09 at 16.06.25.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1147488254"&gt;3. Add Required Libraries&lt;/H2&gt;&lt;P&gt;To call a remote OData service you need both the SAP Cloud SDK and the CAP library for remote OData.&lt;/P&gt;&lt;P&gt;3.1 Add the&amp;nbsp; latest SDK version to the properties and the Cloud SDK BOM to the root pom.xml&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    ...
    &amp;lt;!-- Replace with the latest SDK version --&amp;gt;
    &amp;lt;cloud-sdk.version&amp;gt;5.20.0&amp;lt;/cloud-sdk.version&amp;gt;
&amp;lt;/properties&amp;gt;
...
&amp;lt;dependencyManagement&amp;gt;
	&amp;lt;dependencies&amp;gt;
        ...
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.sap.cloud.sdk&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;sdk-bom&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${cloud-sdk.version}&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;3.2 Add the following dependencies to srv/pom.xml&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cds&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;cds-feature-remote-odata&amp;lt;/artifactId&amp;gt;
		&amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;

	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cloud.sdk&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;sdk-core&amp;lt;/artifactId&amp;gt;
	&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-950974749"&gt;4. Fetch OData Metadata and Generate CSN&lt;/H2&gt;&lt;P&gt;CAP needs a CSN file, so you must first download the EDMX file and convert it.&lt;/P&gt;&lt;P&gt;4.1 Download the Business Partner (A2X) EDMX from the SAP Business Accelerator Hub&lt;BR /&gt;&lt;A href="https://api.sap.com/api/API_BUSINESS_PARTNER/overview" target="_blank" rel="noopener noreferrer"&gt;https://api.sap.com/api/API_BUSINESS_PARTNER/overview&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 13.31.37.png" style="width: 779px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299183iF693C036A176C0D3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 13.31.37.png" alt="Screenshot 2025-08-11 at 13.31.37.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;4.2 Place the .edmx file in the project’s root folder.&lt;/P&gt;&lt;P&gt;4.3 Generate a .csn file from the .edmx&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds import API_BUSINESS_PARTNER.edmx&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.23.04.png" style="width: 889px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298813i6925F272B6BEFB45/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.23.04.png" alt="Screenshot 2025-08-09 at 16.23.04.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;After execution, both the .edmx and .csn files appear in srv/external.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.23.32.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298814iD2927F42D196A41B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.23.32.png" alt="Screenshot 2025-08-09 at 16.23.32.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;A template for the Destination Service is also added to application.yaml.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 16.26.16.png" style="width: 412px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298815iCE79C4F7F4E7C32C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 16.26.16.png" alt="Screenshot 2025-08-09 at 16.26.16.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-754461244"&gt;5. Connectivity Configuration&lt;/H2&gt;&lt;P&gt;You will use the BTP Destination Service to store the connectivity settings such as the URL and authentication. Because you are calling the sandbox, authentication is done via an API Key stored in a local .env file. In a productive scenario you would switch to a more secure authentication method.&lt;/P&gt;&lt;P&gt;5.1 Create a destination in BTP&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Name: S4Sandbox&lt;/LI&gt;&lt;LI&gt;Type: HTTP&lt;/LI&gt;&lt;LI&gt;ProxyType: Internet&lt;/LI&gt;&lt;LI&gt;URL: &lt;A href="https://sandbox.api.sap.com/s4hanacloud" target="_blank" rel="noopener noreferrer"&gt;https://sandbox.api.sap.com/s4hanacloud&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Authentication: NoAuthentication&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-09 at 15.19.55.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/298809i5D4884B8945AB664/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-09 at 15.19.55.png" alt="Screenshot 2025-08-09 at 15.19.55.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;5.2 Store the API Key in .env&lt;/P&gt;&lt;P&gt;You can get the API Key on Business Accelerator Hub.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.05.52.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299169iA9BA4CBFB4C9144A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.05.52.png" alt="Screenshot 2025-08-11 at 12.05.52.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;APIKey=&amp;lt;your-API-key-from-Business-Accelerator-Hub&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;5.3 Configure the destination in application.yaml&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds:
  remote:
    services:
      API_BUSINESS_PARTNER:
        destination:
          # Name of the destination you just created
          name: S4Sandbox
        http:
          suffix: /sap/opu/odata/sap
          # The sandbox requires the API Key in a header
          headers:
            # Read from the env file
            APIKey: ${APIKey}
        type: odata-v2&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-557947739"&gt;6. Service Model and Handler&lt;/H2&gt;&lt;P&gt;6.1 Define the service model in srv/business-partner-service.cds&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;using {API_BUSINESS_PARTNER as bp} from './external/API_BUSINESS_PARTNER';

service BusinessPartnerService @(requires: 'any') {
    entity BusinessPartner as projection on bp.A_BusinessPartner {
        key A_BusinessPartner.BusinessPartner,
            A_BusinessPartner.BusinessPartnerName,
            A_BusinessPartner.BusinessPartnerFullName
    };
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;SPAN&gt;Project the API_BUSINESS_PARTNER definition from the .csn file you just created and use it to define the BusinessPartner entity in your service model.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;6.2 Implement the handler in&lt;BR /&gt;srv/src/main/java/customer/cap_java_remote_api/handlers/BusinessPartnerHandler.java&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;package customer.cap_java_remote_api.handlers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sap.cds.Result;
import com.sap.cds.services.cds.CdsReadEventContext;
import com.sap.cds.services.handler.EventHandler;
import com.sap.cds.services.handler.annotations.On;
import com.sap.cds.services.handler.annotations.ServiceName;

import cds.gen.api_business_partner.ApiBusinessPartner;
import cds.gen.businesspartnerservice.BusinessPartner_;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
@ServiceName("BusinessPartnerService")
public class BusinessPartnerHandler implements EventHandler {

    @Autowired
    ApiBusinessPartner remoteBp;

    private static final Logger logger = LoggerFactory.getLogger(BusinessPartnerHandler.class);
    // This blogging platform strips out the “@” symbol and 'On' that follows it, so please replace the above line with the code shown below.
    (entity = BusinessPartner_.CDS_NAME)
    public Result readBusinessPartner(CdsReadEventContext context) {
        try {
            logger.info("Reading Business Partner data from S/4HANA with CQN: {}", context.getCqn());
            return remoteBp.run(context.getCqn());
        } catch (Exception e) {
            logger.error("Error while reading Business Partner data from S/4HANA.", e);
            throw new RuntimeException(e);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Please replace the commented line above with the following code:&lt;/P&gt;&lt;P&gt;'@On(entity = BusinessPartner_.CDS_NAME)'&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;When you work with CQN, use an interface that extends CqnService. In this case, the interface for remoteBp, ApiBusinessPartner, does exactly that: it extends CqnService.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.12.57.png" style="width: 552px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299173i326FDDD8D81D45EE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.12.57.png" alt="Screenshot 2025-08-11 at 12.12.57.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-361434234"&gt;7. Prepare for Deployment&lt;/H2&gt;&lt;P&gt;7.1 Generate an MTA descriptor&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add mta&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The generated mta.yaml now contains a module (cap-java-remote-api-srv) and the backing services (xsuaa, destination) that you added during init.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-11 at 12.41.58.png" style="width: 686px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299179iB3A160479CC7927D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-11 at 12.41.58.png" alt="Screenshot 2025-08-11 at 12.41.58.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The following dependencies are also auto-added to srv/pom.xml:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    ...
    &amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;com.sap.cds&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;cds-starter-cloudfoundry&amp;lt;/artifactId&amp;gt;
		&amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
	&amp;lt;/dependency&amp;gt;

	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
	&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;7.2 Build the project and install to your local Maven repo&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mvn clean install&lt;/code&gt;&lt;/pre&gt;&lt;H2 id="toc-hId-164920729"&gt;8. Deploy to BTP&lt;/H2&gt;&lt;P&gt;8.1 Create an .mtar file&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;mbt build --mtar archive
# It is often useful to clean old artifacts:
# rm -rf mta_archives &amp;amp;&amp;amp; mbt build --mtar archive&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.2 Target the correct Cloud Foundry org/space&lt;/P&gt;&lt;P&gt;You can obtain the targeted Endpoint from the BTP Cockpit:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.29.40.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299029i1200738CD3FE787D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.29.40.png" alt="Screenshot 2025-08-10 at 20.29.40.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf api &amp;lt;your Cloud Foundry endpoint&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.3 Log in to Cloud Foundry&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf login&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.4 Deploy to Cloud Foundry&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf deploy mta_archives/archive.mtar
# Skip the default 3 retries to save time:
# cf deploy mta_archives/archive.mtar --retries 1&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8.5 Verify the deployment in the BTP Cockpit&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.36.06.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299032i81C64DCDA2B57375/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.36.06.png" alt="Screenshot 2025-08-10 at 20.36.06.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--31592776"&gt;9. Access the Remote API from Your Local Environment&lt;/H2&gt;&lt;P&gt;Because the backing services live on BTP, you need to bind them locally for hybrid testing.&lt;/P&gt;&lt;P&gt;9.1 Bind xsuaa and destination locally&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds bind auth --to cap-java-remote-api-auth
cds bind destination --to cap-java-remote-api-destination&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.50.26.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299035iD96558F42CFCFD43/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.50.26.png" alt="Screenshot 2025-08-10 at 20.50.26.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;9.2 Run the application in hybrid mode&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds bind --exec -- mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9.3 Open the endpoint&lt;/P&gt;&lt;P&gt;&lt;A href="http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner" target="_blank" rel="noopener nofollow noreferrer"&gt;http://localhost:8080/odata/v4/BusinessPartnerService/BusinessPartner&lt;/A&gt;&lt;/P&gt;&lt;P&gt;You should now see the list of business partners fetched from the SAP S/4HANA sandbox.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Screenshot 2025-08-10 at 20.48.22.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/299034i2089150842E7A939/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2025-08-10 at 20.48.22.png" alt="Screenshot 2025-08-10 at 20.48.22.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;I hope this helps you kick-start your CAP Java project!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/how-to-call-a-remote-odata-api-from-your-local-cap-java-project/ba-p/14177098"/>
    <published>2025-08-11T08:29:09.172000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/create-cds-views-and-expose-through-odata-service-in-capm/ba-p/14173298</id>
    <title>Create CDS Views and expose through OData service in CAPM</title>
    <updated>2025-08-11T11:58:32.804000+02:00</updated>
    <author>
      <name>VenkateshMundru</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/44269</uri>
    </author>
    <content>&lt;P&gt;Hi, in this blog I’m going to explain how to create CDS Views and expose through OData service in CAPM.&lt;/P&gt;&lt;P&gt;Here we have discussion about to create CDS views and expose through OData service&amp;nbsp;&lt;SPAN&gt;on SAP Business Application Studio with Cloud Application Programming Model (CAPM).&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;U&gt;Step-1:&lt;/U&gt;&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;We have to create a CAPM application with Business Application Studio.&amp;nbsp;&lt;/SPAN&gt;Create a new folder in workspace with name "zviewcreation".&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VenkateshMundru_0-1754475868584.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297104i06C2219543BC783F/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VenkateshMundru_0-1754475868584.png" alt="VenkateshMundru_0-1754475868584.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-2:&amp;nbsp;&lt;/STRONG&gt;Open terminal and enter "cds init" to initialize the cap application. You can see db, srv and app folders are created.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="VenkateshMundru_1-1754475934865.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297105iC2791D8CEDE9C1D7/image-size/medium?v=v2&amp;amp;px=400" role="button" title="VenkateshMundru_1-1754475934865.png" alt="VenkateshMundru_1-1754475934865.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-3:&lt;/STRONG&gt; Now create new file in db folder as "data-model.cds" and add entities "products" and "orderitems" as below.&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;namespace zviewcreation.db;

entity products {
    key ID            : UUID;
        PRODUCT_ID    : String(30);
        PRODUCT_NAME  : String(250);
        CATEGORY      : String(32);
        CURRENCY_CODE : String(4);
        PRICE         : Decimal(15, 2);
        orderitem     : Association to one orderitems;
}

entity orderitems {
    key NODE_KEY   : UUID;
        ORDER_ID   : String(30);
        ORDER_DATE : Date;
        products   : Association to many products
                         on products.orderitem = $self;
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step-4:&lt;/STRONG&gt;&amp;nbsp;Now create new file in db folder as "cdsview.cds" and add views "Product" and "productsOrders" as below.&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;namespace zviewcreation.dbview;

using {zviewcreation.db} from './data-model';

define view ![Product] as
    select from db.products {
        PRODUCT_ID         as ![ProductId],
        PRODUCT_NAME       as ![ProductName],
        PRICE              as ![Price],
        CURRENCY_CODE      as ![Currency],
        orderitem.NODE_KEY as ![OrderKey]

    }

define view ![ProductsOrders] as
    select from db.orderitems
    mixin {
        PRODUCTS : Association[ * ] to Product
                       on PRODUCTS.OrderKey = $projection.OrderKey
    }
    into {
        NODE_KEY   as ![OrderKey],
        ORDER_ID   as ![OrderId],
        ORDER_DATE as ![OrderDate],
        PRODUCTS   as ![Products]

    }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step-5:&lt;/STRONG&gt;&amp;nbsp;Create new file in srv folder with name "catservice.cds" and expose our cds view as entity set.&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;using { zviewcreation.dbview } from '../db/cdsview';

service MyService @(path: 'ProductsSrv') {

    entity ProductsOrdersSet as projection on dbview.ProductsOrders;

}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Step-6:&lt;/STRONG&gt;&amp;nbsp;Install node modules using "npm install" in terminal.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297118iF747D536B1A37099/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-7:&lt;/STRONG&gt;&amp;nbsp;Now run the application using "cds watch" .&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297120iCA23E0EC88F28ACF/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-8:&amp;nbsp;&lt;/STRONG&gt;You will be able to see our OData service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 938px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297123i36077E34983154E0/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-9:&lt;/STRONG&gt;&amp;nbsp;You can add data to our entities by doing "cds add data" in terminal. As a result 2 files will be added in data folder in db folder in the format of "&amp;lt;your namespace&amp;gt;-&amp;lt;entity name&amp;gt;.csv".&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297124i3EF5533C34AADF7E/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-10:&lt;/STRONG&gt;&amp;nbsp;Add some sample data to both files as below.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297125i047D3DA1CCCB9BB0/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297126iCD8D14B238B906E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-11:&lt;/STRONG&gt;&amp;nbsp;Now again do "cds watch" and select "ProductsOrdersSet" to see the data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297127i744E3ABA0CC3260B/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-12:&lt;/STRONG&gt;&amp;nbsp;Now you can able to see ProductsOrdersSet data.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297128iF65929A29FA5ECE9/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-13:&lt;/STRONG&gt;&amp;nbsp;Add "?$expand=Products" at end of the url and you will able to see all the data of orders with respective products.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="image.png" style="width: 932px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/297129iBCE5E324FA3247E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="image.png" alt="image.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;That’s it!!!&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/create-cds-views-and-expose-through-odata-service-in-capm/ba-p/14173298"/>
    <published>2025-08-11T11:58:32.804000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cap-with-local-app-previews-tips-for-smooth-development/ba-p/14182208</id>
    <title>CAP with Local App Previews – Tips for Smooth Development</title>
    <updated>2025-08-16T23:18:43.039000+02:00</updated>
    <author>
      <name>MioYasutake</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/789</uri>
    </author>
    <content>&lt;P&gt;UI5 has recently introduced Virtual Endpoints, eliminating the need for sandbox files and reducing maintenance effort in local previews. For details, please read the blog post below:&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/streamlining-local-app-previews-virtual-endpoints-for-seamless-development/ba-p/14155498" target="_blank"&gt;https://community.sap.com/t5/technology-blog-posts-by-sap/streamlining-local-app-previews-virtual-endpoints-for-seamless-development/ba-p/14155498&lt;/A&gt;&lt;/P&gt;&lt;P&gt;I have tried virtual endpoints with CAP Node.js, and would like to share a few things I noticed.&lt;/P&gt;&lt;H2 id="toc-hId-1737804978"&gt;TypeScript as a prerequisite&lt;/H2&gt;&lt;P&gt;By default, you will not see the "Use virtual endpoints for local preview" option. This option becomes available once you enable TypeScript.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_1-1755378123535.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301676i9C15CBFE7B00C3BA/image-size/large?v=v2&amp;amp;px=999" role="button" title="MioYasutake_1-1755378123535.png" alt="MioYasutake_1-1755378123535.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1541291473"&gt;Select the #app-preview endpoint for testing the app inside Fiori Launchpad&lt;/H2&gt;&lt;P&gt;When you start the server with `cds watch`, you will see several options for opening the app. The &lt;STRONG&gt;#app-preview&lt;/STRONG&gt; option is optimal choice for testing the app inside the Fiori Launchpad (sandbox).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_2-1755378271155.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301677i97D3522689B30B7C/image-size/large?v=v2&amp;amp;px=999" role="button" title="MioYasutake_2-1755378271155.png" alt="MioYasutake_2-1755378271155.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1344777968"&gt;Reinstall dependencies after build&lt;/H2&gt;&lt;P&gt;After building the MTA, you will not see the virtual endpoints anymore. This is due to the `&lt;STRONG&gt;npm ci&lt;/STRONG&gt;` command executed during the build (I haven't dug deeper into the cause). To enable the virtual endpoints again, simply run `&lt;STRONG&gt;npm install&lt;/STRONG&gt;`.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="MioYasutake_3-1755378833726.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/301678i8AD1EF823485958D/image-size/large?v=v2&amp;amp;px=999" role="button" title="MioYasutake_3-1755378833726.png" alt="MioYasutake_3-1755378833726.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;That's it. I hope this post is useful.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cap-with-local-app-previews-tips-for-smooth-development/ba-p/14182208"/>
    <published>2025-08-16T23:18:43.039000+02:00</published>
  </entry>
</feed>
