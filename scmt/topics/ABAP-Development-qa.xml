<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/ABAP-Development-qa.xml</id>
  <title>SAP Community - ABAP Development</title>
  <updated>2025-09-30T08:00:03.399954+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/ABAP Development/pd-p/833755570260738661924709785639136" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>ABAP Development Q&amp;A in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/incident-with-fm-sd-vbpa-read-with-vbeln-in-s4hana/qaq-p/14225886</id>
    <title>Incident with FM SD_VBPA_READ_WITH_VBELN in S4HANA</title>
    <updated>2025-09-23T16:11:34.142000+02:00</updated>
    <author>
      <name>ediciones-sm_usuariogenri</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/364247</uri>
    </author>
    <content>&lt;P&gt;Good afternoon,&lt;/P&gt;&lt;P&gt;We have an incident with the FM&amp;nbsp;&lt;STRONG&gt;SD_VBPA_READ_WITH_VBELN&lt;/STRONG&gt;.&lt;/P&gt;&lt;P&gt;We use it in a Client Transaction that creates a delivery and in S4/HANA does not work. That is because of this form, &lt;STRONG&gt;VBPA_BP_AND_ADDRTYPE_GET.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;These are the details of the code:&lt;/P&gt;&lt;P&gt;&lt;U&gt;S4HANA (lines 95-107)&lt;/U&gt;&lt;/P&gt;&lt;P&gt;SELECT&amp;nbsp;*&amp;nbsp;FROM&amp;nbsp;VBPA&amp;nbsp;INTO&amp;nbsp;TABLE&amp;nbsp;LB_VBPAVB&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WHERE&amp;nbsp;VBELN&amp;nbsp;=&amp;nbsp;I_VBELN&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ORDER&amp;nbsp;BY&amp;nbsp;PRIMARY&amp;nbsp;KEY.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;IF&amp;nbsp;SY-SUBRC&amp;nbsp;EQ&amp;nbsp;0.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;PERFORM&amp;nbsp;VBPA_BP_AND_ADDRTYPE_GET&lt;/STRONG&gt;&lt;BR /&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TABLES&amp;nbsp;LB_VBPAVB.&lt;/STRONG&gt;&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IF&amp;nbsp;VBPA_LINES&amp;nbsp;EQ&amp;nbsp;0.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VBPA_LINES&amp;nbsp;=&amp;nbsp;SY-DBCNT.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BF_VBPAVB[]&amp;nbsp;=&amp;nbsp;LB_VBPAVB[].&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ELSE.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VBPA_LINES&amp;nbsp;=&amp;nbsp;VBPA_LINES&amp;nbsp;+&amp;nbsp;SY-DBCNT.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INSERT&amp;nbsp;LINES&amp;nbsp;OF&amp;nbsp;LB_VBPAVB&amp;nbsp;INTO&amp;nbsp;BF_VBPAVB&amp;nbsp;INDEX&amp;nbsp;BF_TABIX.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ENDIF.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;U&gt;ECC (lines 95-105)&lt;/U&gt;&lt;/P&gt;&lt;P&gt;SELECT&amp;nbsp;*&amp;nbsp;FROM&amp;nbsp;VBPA&amp;nbsp;INTO&amp;nbsp;TABLE&amp;nbsp;LB_VBPAVB&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WHERE&amp;nbsp;VBELN&amp;nbsp;=&amp;nbsp;I_VBELN&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ORDER&amp;nbsp;BY&amp;nbsp;PRIMARY&amp;nbsp;KEY.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;IF&amp;nbsp;SY-SUBRC&amp;nbsp;EQ&amp;nbsp;0.&lt;BR /&gt;&amp;nbsp; &amp;nbsp; IF VBPA_LINES EQ 0.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VBPA_LINES&amp;nbsp;=&amp;nbsp;SY-DBCNT.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BF_VBPAVB[]&amp;nbsp;=&amp;nbsp;LB_VBPAVB[].&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ELSE.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VBPA_LINES&amp;nbsp;=&amp;nbsp;VBPA_LINES&amp;nbsp;+&amp;nbsp;SY-DBCNT.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INSERT&amp;nbsp;LINES&amp;nbsp;OF&amp;nbsp;LB_VBPAVB&amp;nbsp;INTO&amp;nbsp;BF_VBPAVB&amp;nbsp;INDEX&amp;nbsp;BF_TABIX.&lt;BR /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ENDIF.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This form appears in the new system and reset the value of SY-DBCNT. Then, the delivery is not create.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The only way to force it to work is having an item in KNVK with the code of the partner. We do not create this codes as a Contact Partner and if we would start to do it we need to change all of our processes involve.&lt;/P&gt;&lt;P&gt;Do you know how to handle this? Have anyone this problem?&lt;/P&gt;&lt;P&gt;Thanks in advance&lt;/P&gt;&lt;P&gt;Kind regards&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/incident-with-fm-sd-vbpa-read-with-vbeln-in-s4hana/qaq-p/14225886"/>
    <published>2025-09-23T16:11:34.142000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/how-to-handle-rv61axx-price-condition-rules-these-days/qaq-p/14226406</id>
    <title>How to handle RV61Axx price condition rules these days?</title>
    <updated>2025-09-24T08:21:39.766000+02:00</updated>
    <author>
      <name>patrick_weber11</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/215409</uri>
    </author>
    <content>&lt;P&gt;Hi all,&lt;/P&gt;&lt;P&gt;as part of our clean core journey, we try to get rid of as many modifications as possible. One of the most modified module is SD and especially all these RV61Axx reports. These are price condition rules, you know. In case we need a new rule (and we use hundrets), we always need to modify the system.&lt;/P&gt;&lt;P&gt;To my knowledge, modifications are not allowed in public cloud scenario. But SAP customers will still need to use price condition rules. So what is the alternative in public cloud and are we able to use them in our S/4 HANA 2023 FP1 on-premise system as well?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/how-to-handle-rv61axx-price-condition-rules-these-days/qaq-p/14226406"/>
    <published>2025-09-24T08:21:39.766000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/custom-include-inside-exit-saplcjwb-004-returns-an-error-statement-quot/qaq-p/14226720</id>
    <title>Custom Include inside EXIT_SAPLCJWB_004 returns an error statement "Statement not accessible</title>
    <updated>2025-09-24T12:06:40.046000+02:00</updated>
    <author>
      <name>bigflatfoot</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/887707</uri>
    </author>
    <content>&lt;P&gt;I have created an include ZXCN1U21 inside EXIT_SAPLCJWB_004 and tried to put a statement BREAK-POINT for testing purposes.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;However, upon trying to activate it, it returns an error "Statement not accessible". How do I address this kind of error?&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/custom-include-inside-exit-saplcjwb-004-returns-an-error-statement-quot/qaq-p/14226720"/>
    <published>2025-09-24T12:06:40.046000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/need-badi-user-exit-migo-update-batch-classification/qaq-p/14226817</id>
    <title>Need Badi/user exit-migo-update batch classification</title>
    <updated>2025-09-24T14:16:36.793000+02:00</updated>
    <author>
      <name>tafkap95</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/634466</uri>
    </author>
    <content>&lt;P&gt;Hello,&lt;/P&gt;&lt;P&gt;I'm looking for a user exit/BADI/enhancement in MIGO that would allow me to update the classifications for a material after entering the Batch/Vendor Batch or when saving the document (provided there are no existing classifications).&lt;/P&gt;&lt;P&gt;To be more precise:&lt;/P&gt;&lt;P&gt;1. Launch MIGO and enter a Purchase Order&lt;BR /&gt;2. Then, for the selected line, go to the Batch tab&lt;BR /&gt;3. Enter a Batch number, and by pressing Enter, you populate the classifications for Material/Batch without clicking the "Classification" button&lt;BR /&gt;4. If step 3 is not possible, populate the classifications for Material/Batch when saving the document&lt;/P&gt;&lt;P&gt;Thank you for your help&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/need-badi-user-exit-migo-update-batch-classification/qaq-p/14226817"/>
    <published>2025-09-24T14:16:36.793000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-q-a/business-area-in-s-alr-87012082-report/qaq-p/14227433</id>
    <title>Business Area in S_ALR_87012082 report</title>
    <updated>2025-09-25T08:03:48.915000+02:00</updated>
    <author>
      <name>soumyodeep</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/682802</uri>
    </author>
    <content>&lt;P&gt;Is there any possible way to add Business Area in&amp;nbsp;S_ALR_87012082 standard report in ECC?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-q-a/business-area-in-s-alr-87012082-report/qaq-p/14227433"/>
    <published>2025-09-25T08:03:48.915000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/when-using-xco-libraries-i-obtain-the-error-message-quot-put-operation/qaq-p/14227583</id>
    <title>When using xco libraries I obtain the error message "PUT operation failed"</title>
    <updated>2025-09-25T10:03:00.891000+02:00</updated>
    <author>
      <name>Andre_Fischer</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/55</uri>
    </author>
    <content>&lt;P&gt;When developing a helper class to solve a customer problem I used the xco libraries to generate several packages.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The creation of the packages initially failed and in the try catch block I only received the error message&amp;nbsp;&lt;/P&gt;&lt;P&gt;"PUT operation failed"&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;TRY.
        DATA(lo_specification) = put_operation-&amp;gt;add_object( i_package_name )-&amp;gt;create_form_specification( ).
        lo_specification-&amp;gt;set_short_description( short_description ).
        lo_specification-&amp;gt;properties-&amp;gt;set_super_package( i_super_package_name )-&amp;gt;set_software_component( co_dmo_sap_package ).
        DATA(lo_result) = put_operation-&amp;gt;execute( ).
        " handle findings
        DATA(lo_findings) = lo_result-&amp;gt;findings.
        findings = lo_findings-&amp;gt;get( ).
      CATCH cx_root  INTO DATA(generation_exception).
        exception_text = generation_exception-&amp;gt;get_text(  ).
ENDTRY.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;So how I am able to find out the root cause?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/when-using-xco-libraries-i-obtain-the-error-message-quot-put-operation/qaq-p/14227583"/>
    <published>2025-09-25T10:03:00.891000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/cds-view-casting-to-data-element-but-field-name-is-missing-in-se16n/qaq-p/14227730</id>
    <title>CDS View - Casting to Data Element but Field Name is Missing in SE16N</title>
    <updated>2025-09-25T11:52:17.383000+02:00</updated>
    <author>
      <name>volkansen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/882824</uri>
    </author>
    <content>&lt;P&gt;Hello,&lt;/P&gt;&lt;P&gt;Edit: I have changed the language to English as suggested for better understanding but to my surprise now it's working!&lt;BR /&gt;I don't know what the problem was but I will drop the whole code here just in case.&lt;BR /&gt;&lt;BR /&gt;The CDS:&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Alış Faturaları'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZMM_DDL_PUR_INV
  as select from    rseg
    inner join      rbkp   on  rbkp.belnr = rseg.belnr
                           and rbkp.gjahr = rseg.gjahr
    left outer join but000 on but000.partner = rbkp.lifnr
    left outer join mara   on rseg.matnr = mara.matnr
    left outer join t023t  on  t023t.matkl = mara.matkl
                           and t023t.spras = $session.system_language
    left outer join t134t  on  t134t.mtart = mara.mtart
                           and t134t.spras = $session.system_language
    inner join      a003   on  a003.mwskz = rseg.mwskz
                           and a003.kappl = 'TX'
                           and a003.aland = 'TR'
                           and a003.kschl = 'MWVS'
    inner join      konp   on konp.knumh = a003.knumh
{
  key rbkp.bukrs,
  key rbkp.blart,
  key rbkp.belnr,
  key rseg.buzei,
      rseg.shkzg,
      rbkp.xblnr,
      rbkp.budat,
      rbkp.lifnr,
      but000.name_org1,
      rseg.ebeln,
      rseg.ebelp,
      mara.mtart,
      t134t.mtbez,
      mara.matkl,
      t023t.wgbez,
      rseg.matnr,
      @Semantics.quantity.unitOfMeasure: 'bstme'
      rseg.menge,
      rseg.bstme,
      @Semantics.amount.currencyCode: 'waers'
      cast(
       cast(
         case when rseg.menge &amp;lt;&amp;gt; 0 then cast(rseg.wrbtr as abap.dec(11,2)) / cast(rseg.menge as abap.dec(11,2)) else 0 end
       as abap.dec(11,4))
      as zfi_e_birim_fiyat) as birim_fiyat,
      @Semantics.amount.currencyCode: 'waers'
      rseg.wrbtr,
      @Semantics.amount.currencyCode: 'waers'
      cast(
        cast(
          case when konp.kbetr &amp;lt;&amp;gt; 0 then (cast(rseg.wrbtr as abap.dec(11,4)) * cast(konp.kbetr as abap.dec(11,4))) / cast(1000 as abap.dec(11,4)) else 0 end
        as abap.dec(11,4)) 
      as zfi_e_kdv_tutari) as kdv_tutari,
      rbkp.waers
}
where
      rbkp.vgart != 'RS'
  and rbkp.stblg =  ''&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;In Turkish the field label in the table after I run SE16N query was missing:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="volkansen_1-1758870276094.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320144iDC018676381A5EA1/image-size/large?v=v2&amp;amp;px=999" role="button" title="volkansen_1-1758870276094.png" alt="volkansen_1-1758870276094.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="volkansen_2-1758870469685.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320145i6CB7DBE3435550A1/image-size/large?v=v2&amp;amp;px=999" role="button" title="volkansen_2-1758870469685.png" alt="volkansen_2-1758870469685.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;But now I translated the data element in English and logged in with English and now it's showing:&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="volkansen_3-1758870583800.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320146i3E19CD9FF42BFACB/image-size/large?v=v2&amp;amp;px=999" role="button" title="volkansen_3-1758870583800.png" alt="volkansen_3-1758870583800.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Field Labels are entered in both languages:&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="volkansen_4-1758870628676.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320147i60B338303A643828/image-size/large?v=v2&amp;amp;px=999" role="button" title="volkansen_4-1758870628676.png" alt="volkansen_4-1758870628676.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="volkansen_5-1758870659205.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320148iBD55AAE7FB3D50D1/image-size/large?v=v2&amp;amp;px=999" role="button" title="volkansen_5-1758870659205.png" alt="volkansen_5-1758870659205.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Edit2: After I entered the English translation to the data element to show you the error, I logged back in Turkish again and now it's working in Turkish too.&amp;nbsp;¯\_(ツ)_/¯&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/cds-view-casting-to-data-element-but-field-name-is-missing-in-se16n/qaq-p/14227730"/>
    <published>2025-09-25T11:52:17.383000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/mdg-replication-of-field-not-successful/qaq-p/14228332</id>
    <title>MDG replication of field not successful</title>
    <updated>2025-09-26T02:41:43.796000+02:00</updated>
    <author>
      <name>newguy_cloud</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1492327</uri>
    </author>
    <content>&lt;P&gt;Dear Experts,&lt;/P&gt;&lt;P&gt;I am newbie in Webservices and need some second opinions from you guys.&lt;/P&gt;&lt;P&gt;My Business Analyst told me that the field KNA1-RPMKR should be copied from source system to target system. We use the transaction DRFOUT to perform this.&lt;/P&gt;&lt;P&gt;No errors were found in SRT_MONI and DRFOUT as well.&lt;/P&gt;&lt;P&gt;Unfortunately, the field does not get copied even though it has a value in the source system.&lt;/P&gt;&lt;P&gt;The question is, should I ask for help from SAP since this standard class CL_MDG_BP_RPLCTRQ and standard method BP_SUITEBULK_REPL_REQ_IN also in SPROXY the service definition is SAP standard BusinessPartnerSUITEBulkReplic?&lt;/P&gt;&lt;P&gt;If not, then what will be my next step?&lt;/P&gt;&lt;P&gt;Please help.&lt;/P&gt;&lt;P&gt;Newguy_cloud&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/mdg-replication-of-field-not-successful/qaq-p/14228332"/>
    <published>2025-09-26T02:41:43.796000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/trial-integration-suite-not-authorized/qaq-p/14228579</id>
    <title>Trial Integration suite not authorized</title>
    <updated>2025-09-26T10:16:20.080000+02:00</updated>
    <author>
      <name>deepak_h3</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/214031</uri>
    </author>
    <content>&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I am getting not authorized on launching Integration suite for Hana trial account.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="deepak_h3_0-1758874325454.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320165i43B63151C8D9E309/image-size/large?v=v2&amp;amp;px=999" role="button" title="deepak_h3_0-1758874325454.png" alt="deepak_h3_0-1758874325454.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The role is present for my user.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="deepak_h3_2-1758874464510.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/320167i75D74705102C57B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="deepak_h3_2-1758874464510.png" alt="deepak_h3_2-1758874464510.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;What could be missing ?&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/trial-integration-suite-not-authorized/qaq-p/14228579"/>
    <published>2025-09-26T10:16:20.080000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/missing-idatype-in-usr21/qaq-p/14228689</id>
    <title>Missing IDATYPE in USR21</title>
    <updated>2025-09-26T11:22:51.697000+02:00</updated>
    <author>
      <name>No_Name2</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1863187</uri>
    </author>
    <content>&lt;P&gt;Hi SAP Community,&lt;/P&gt;&lt;P&gt;We’re currently using the Fiori app “Manage Teams and Responsibilities” and have encountered an issue when trying to add employees to a team.&lt;/P&gt;&lt;P&gt;The app displays a list of users eligible to be added, and we’ve identified that the key criterion for inclusion is the IDTYPE field in table USR21. Specifically, only users with IDTYPE = 2 or 4 appear in the selection list.&lt;/P&gt;&lt;P&gt;However, we’ve noticed that some users have no IDTYPE set at all (the field is blank in USR21), which means they’re excluded from the app’s selection list.&lt;/P&gt;&lt;P&gt;We’ve already tried assigning a workplace to these users via SU01, hoping that would trigger the IDTYPE to be set to 4 — but unfortunately, it didn’t change anything.&lt;/P&gt;&lt;P&gt;Our question: How can we set or populate the IDTYPE for these users so they become visible in the app?&lt;/P&gt;&lt;P&gt;Thanks in advance!&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/missing-idatype-in-usr21/qaq-p/14228689"/>
    <published>2025-09-26T11:22:51.697000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/1-500-faster-abap-cloud-api-with-just-gzip/qaq-p/14229207</id>
    <title>1,500× Faster: ABAP Cloud API with “Just” Gzip</title>
    <updated>2025-09-26T16:36:17.362000+02:00</updated>
    <author>
      <name>natanael1</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1557162</uri>
    </author>
    <content>&lt;H3 id="toc-hId-1890184258"&gt;The 3-hours to 7-Second Story&lt;/H3&gt;&lt;P&gt;We had a weekly data integration form ABAP in Cloud, via an OData service, that took about &lt;STRONG&gt;3 hours&lt;/STRONG&gt;(10800 seconds) and nearly &lt;STRONG&gt;600 requests&lt;/STRONG&gt; to finish. After a small redesign, the same data now arrives in &lt;STRONG&gt;~7 seconds(instead of 10800 seconds)&lt;/STRONG&gt; using just &lt;STRONG&gt;3 requests&lt;/STRONG&gt;. So a dramatic x1500 reduction. No new servers, no fancy tools, just smarter packaging of the data, but of course with some drawback.&lt;/P&gt;&lt;P&gt;The full PDF paper, and code is available in this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1693670753"&gt;Quick Context&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Where:&lt;/STRONG&gt; ABAP in Cloud on SAP BTP.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;What:&lt;/STRONG&gt; A big, flat table (around 3 million rows) needed once a week.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Old approach: &lt;/STRONG&gt;OData service exposing this table, called 600 times,&amp;nbsp;5,000 rows per call → slow and expensive, the extraction workflow took ~3 hours&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Constraint:&lt;/STRONG&gt; We can’t stream chunks; each response is built on the server, then sent.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; Deliver everything fast, simple, and cheap for both sides.&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1497157248"&gt;The Simple Change&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Goal:&lt;/STRONG&gt; make a big weekly export feel like a single, quick download. No fancy infra, no special client libraries.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why not OData for this job&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;OData shines for interactive reads: $filter, $expand, small pages, typed entities.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Our use case was the opposite: &lt;STRONG&gt;one flat dataset, all of it, as fast as possible&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;With OData we’d still pay the cost of many small pages and per-entity overhead the client didn’t need.&lt;/LI&gt;&lt;LI&gt;Most consumers wanted a simple file-like payload they could ingest with generic tools.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Why a plain HTTP service instead&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;A plain GET endpoint gives us &lt;STRONG&gt;full control over the wire format&lt;/STRONG&gt; (JSON/CSV), headers, and compression.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;It’s easier for any consumer to adopt (curl, Python, Node, SAP or non-SAP).&lt;/LI&gt;&lt;LI&gt;We can define a &lt;STRONG&gt;predictable paging contract&lt;/STRONG&gt; (e.g., offset/count) and let the client fetch pages in parallel.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Why “just HTTP” still wasn’t enough&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;In ABAP Cloud, we don’t stream chunked responses; the server assembles the response first, then sends it.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;If we naïvely send a huge JSON array, the &lt;STRONG&gt;payload is too big&lt;/STRONG&gt; and &lt;STRONG&gt;too slow&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;If we keep tiny pages, we fix size but suffer &lt;STRONG&gt;hundreds of roundtrips&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;Conclusion: we needed to &lt;STRONG&gt;keep HTTP simple but make each response compact and each request count&lt;/STRONG&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;What we explored&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Formats:&lt;/STRONG&gt; JSON vs CSV vs newline-delimited JSON. CSV is smaller raw, but…&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Serialization:&lt;/STRONG&gt; /ui2/cl_json, XCO, and CALL TRANSFORMATION for speed and stability.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Compression:&lt;/STRONG&gt; no compression vs gzip; single gzip member vs multiple members inside one response.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Delivery patterns:&lt;/STRONG&gt; direct download vs staging to storage; server-side streaming ideas (ruled out).&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Paging shapes:&lt;/STRONG&gt; many small pages vs a few big pages; client parallelism vs server complexity.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;What we landed on (the pattern)&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Keep JSON&lt;/STRONG&gt; for compatibility, but &lt;STRONG&gt;generate it fast&lt;/STRONG&gt; (use the fastest serializer available to you).&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Compress every response&lt;/STRONG&gt; and signal it with Content-Encoding: gzip. One &lt;STRONG&gt;single gzip member&lt;/STRONG&gt; per response so common clients auto-decompress reliably.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Use coarse paging&lt;/STRONG&gt; (few big pages) to cut roundtrips. Expose simple params (e.g., offset and count) and a “count only” helper so clients can plan pages.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Let clients parallelize&lt;/STRONG&gt; safely: stable ordering, idempotent reads, and clear retry rules.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Stay boring on the protocol:&lt;/STRONG&gt; plain HTTP GET, clear headers, predictable JSON shape. No streaming tricks, no custom encodings that break tools.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Why this works?&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;We &lt;STRONG&gt;remove protocol overhead&lt;/STRONG&gt; we don’t need (OData features) and &lt;STRONG&gt;add the two things we do need&lt;/STRONG&gt; for bulk: fast serialization + compression.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Coarse pages shift the bottleneck from “too many calls” to “a few efficient transfers”.&lt;/LI&gt;&lt;LI&gt;Gzip neutralizes JSON’s key overhead, so we keep a &lt;STRONG&gt;friendly format&lt;/STRONG&gt; without paying a size penalty.&lt;/LI&gt;&lt;LI&gt;The approach is &lt;STRONG&gt;portable and observable&lt;/STRONG&gt;: easy to test locally, easy to monitor in production, and easy for partners to adopt.&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId-1300643743"&gt;Before vs After&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;TL;DR:&lt;/STRONG&gt; We didn’t change the data, only the delivery: coarse pages, fast JSON, and gzip over a plain HTTP contract.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;Dimension Before (many small pages) After (few big pages + gzip) Why it matters&lt;/P&gt;&lt;TABLE&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;Dataset&lt;/TD&gt;&lt;TD&gt;~3,000,000 rows (flat, ~12 columns)&lt;/TD&gt;&lt;TD&gt;Same&lt;/TD&gt;&lt;TD&gt;Same data, new delivery.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Page size&lt;/TD&gt;&lt;TD&gt;5,000 rows/page&lt;/TD&gt;&lt;TD&gt;~1,000,000 rows/page (tunable)&lt;/TD&gt;&lt;TD&gt;Fewer roundtrips, less latency.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Number of requests&lt;/TD&gt;&lt;TD&gt;~593&lt;/TD&gt;&lt;TD&gt;3&lt;/TD&gt;&lt;TD&gt;Network overhead drops dramatically.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;End-to-end time&lt;/TD&gt;&lt;TD&gt;~3 hours (sequential pulls)&lt;/TD&gt;&lt;TD&gt;~6-7 seconds (3 parallel pulls)&lt;/TD&gt;&lt;TD&gt;Parallelizable, near “single download” feel.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Format on the wire&lt;/TD&gt;&lt;TD&gt;JSON (uncompressed)&lt;/TD&gt;&lt;TD&gt;JSON (gzipped)&lt;/TD&gt;&lt;TD&gt;Keep JSON for compatibility; shrink it with gzip.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Total transfer&lt;/TD&gt;&lt;TD&gt;~0.6 GB&lt;/TD&gt;&lt;TD&gt;~9 MB&lt;/TD&gt;&lt;TD&gt;Bandwidth and cost fall off a cliff.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Payload per page&lt;/TD&gt;&lt;TD&gt;~1.15 MB per 5k rows (raw)&lt;/TD&gt;&lt;TD&gt;~3 MB per 1M rows (gzipped)&lt;/TD&gt;&lt;TD&gt;Gzip beats key overhead; size scales well.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Serialization&lt;/TD&gt;&lt;TD&gt;Generic JSON serializer&lt;/TD&gt;&lt;TD&gt;Fast serializer (CALL TRANSFORMATION)&lt;/TD&gt;&lt;TD&gt;Server can build big pages quickly.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Protocol&lt;/TD&gt;&lt;TD&gt;OData-style paging&lt;/TD&gt;&lt;TD&gt;Plain HTTP GET with offset/count&lt;/TD&gt;&lt;TD&gt;Simple contract any client can call.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Compression&lt;/TD&gt;&lt;TD&gt;None&lt;/TD&gt;&lt;TD&gt;Content-Encoding: gzip (single member)&lt;/TD&gt;&lt;TD&gt;Works out-of-the-box with common tools/SDKs.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Client pattern&lt;/TD&gt;&lt;TD&gt;Sequential loop&lt;/TD&gt;&lt;TD&gt;Fetch pages in parallel, then merge&lt;/TD&gt;&lt;TD&gt;Easy speed-up without server tricks.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Retry model&lt;/TD&gt;&lt;TD&gt;Many small retries&lt;/TD&gt;&lt;TD&gt;Few coarse, idempotent retries&lt;/TD&gt;&lt;TD&gt;Fewer moving parts, simpler error handling.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Server behavior&lt;/TD&gt;&lt;TD&gt;Build JSON, send raw&lt;/TD&gt;&lt;TD&gt;Build JSON → gzip → send single member&lt;/TD&gt;&lt;TD&gt;Reliable auto-decompression on client side.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;Limits to watch&lt;/TD&gt;&lt;TD&gt;Too many roundtrips; egress cost&lt;/TD&gt;&lt;TD&gt;Client RAM per page; choose page size wisely&lt;/TD&gt;&lt;TD&gt;Balance page size vs client capacity.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;H3 id="toc-hId-1104130238"&gt;How to reproduce this in three simple steps&lt;/H3&gt;&lt;BLOCKQUOTE&gt;&lt;P&gt;Heads-up: in here I will refer to an Appendix, you can find it in the detailed PDF paper about the optimization, the paper and some code is available on GitHub&lt;/P&gt;&lt;/BLOCKQUOTE&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-1036699452"&gt;Step 1. Define a tiny HTTP contract&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Endpoint:&lt;/STRONG&gt; GET /entity?offset=…&amp;amp;count=…&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Helper:&lt;/STRONG&gt; GET /entity?get_only_count=true returns a small pagination object with totals and suggested pages, for example:&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;PRE&gt;{
  "number_of_records": 2496434,
  "batch_size": { "maximum": 1500000, "recommended": 1000000 },
  "recommended_pages": [
    "/entity?offset=0&amp;amp;count=1000000",
    "/entity?offset=1000000&amp;amp;count=1000000",
    "/entity?offset=2000000&amp;amp;count=1000000"
  ]
}&lt;/PRE&gt;&lt;P&gt;This keeps clients simple and lets them plan parallel pulls.&lt;/P&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-840185947"&gt;Step 2. Build one big page, serialize fast, and gzip it on the server&lt;/H4&gt;&lt;P&gt;&lt;STRONG&gt;a) Fast JSON generation with CALL TRANSFORMATION&lt;/STRONG&gt;&lt;BR /&gt;Appendix C shows the lean serializer that won your benchmarks:&lt;/P&gt;&lt;PRE&gt;METHOD convert_json_transformation.
  DATA(lo_writer) = cl_sxml_string_writer⇒create( type = if_sxml⇒co_xt_json ).
  CALL TRANSFORMATION id
    SOURCE itab = data
    RESULT XML lo_writer.
  string = lo_writer-&amp;gt;get_output( ).
ENDMETHOD.&lt;/PRE&gt;&lt;P&gt;Use this to turn your internal table into JSON quickly.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;b) Minimal HTTP handler that serves one gzipped page&lt;/STRONG&gt;&lt;BR /&gt;Appendix I demonstrates the pattern: set headers, read a deterministic slice, serialize, gzip once, send bytes.&lt;/P&gt;&lt;PRE&gt;METHOD gzip_json_single_page.
  response-&amp;gt;set_status( 200 ).
  response-&amp;gt;set_content_type( 'application/gzip' ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Disposition'
    i_value = |attachment; filename="data_subset.gz"| ).
  response-&amp;gt;set_compression(
    options = if_web_http_response⇒co_compress_none ).
  response-&amp;gt;set_header_field(
    i_name = 'Content-Encoding'
    i_value = |deflate| ).

  SELECT column_1, column_2, ... , column_12
    FROM dbtable
    ORDER BY column_2
    INTO TABLE @DATA(page)
    UP TO @page_size ROWS.

  cl_abap_gzip⇒compress_binary(
    EXPORTING raw_in = convert_json_transformation( page )
    IMPORTING gzip_out = DATA(gzip) ).

  response-&amp;gt;set_binary( gzip ).
ENDMETHOD.&lt;/PRE&gt;&lt;P&gt;&lt;STRONG&gt;c) Where the handler is wired&lt;/STRONG&gt;&lt;BR /&gt;Appendix F shows the entry point choosing which implementation to run:&lt;/P&gt;&lt;PRE&gt;METHOD if_http_service_extension~handle_request.
  " choose one of these
  gzip_json_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_single_page( CHANGING request = request response = response ).
  " only for demonstration
  "gzip_csv_multiple_pages( CHANGING request = request response = response ).
ENDMETHOD.&lt;/PRE&gt;&lt;P&gt;Keep it simple in production and call the JSON + single-member gzip method.&lt;/P&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-643672442"&gt;Step 3. Let the client pull a few big pages in parallel&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;Ask get_only_count first to get total and recommended pages.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Fire 2–4 page requests in parallel, then merge locally.&lt;/LI&gt;&lt;LI&gt;Most clients auto-decompress when Content-Encoding is set, which is exactly why the server returns a single gzip response.&lt;/LI&gt;&lt;/UL&gt;&lt;HR /&gt;&lt;H4 id="toc-hId-447158937"&gt;Optional: CSV variant from the appendix&lt;/H4&gt;&lt;P&gt;If you ever need CSV, Appendix H shows the single-page CSV + gzip flow. The JSON path above stayed as our final choice because gzip erases most of JSON’s key overhead while keeping tooling friendly.&lt;/P&gt;&lt;H3 id="toc-hId-121562713"&gt;When to use this pattern and when not to&lt;/H3&gt;&lt;P&gt;&lt;STRONG&gt;Use it when&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;You need to deliver a large, flat dataset fast, usually for batch or analytics.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;Your consumers are happy with a plain HTTP GET that returns JSON.&lt;/LI&gt;&lt;LI&gt;You can sort by a unique key and read stable slices with offset and count.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Think twice when&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Consumers need rich OData features&lt;/STRONG&gt; like server-side filtering and $expand. You will be giving those up and implementing only what you need in plain HTTP.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Clients cannot hold the decompressed page in memory.&lt;/STRONG&gt; A 1,000,000 row page is roughly a few hundred MB once decompressed, so plan for that on the client side.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;You require true streaming.&lt;/STRONG&gt; ABAP ICF in the cloud does not support HTTP/1.1 chunked transfer, so streaming is out of scope here.&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;H3 id="toc-hId--150182161"&gt;Gotchas to avoid&lt;/H3&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;Do not concatenate multiple gzip members&lt;/STRONG&gt; in one HTTP response if you expect tools like Postman to auto-decompress. Many clients only unpack the first member. Prefer one contiguous gzip stream per response.&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Set the right headers.&lt;/STRONG&gt; Send Content-Encoding: gzip for the single member response. If you build a multi-member payload, clients may not decode it automatically, which is why your final solution avoided that.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Keep ordering stable.&lt;/STRONG&gt; Always ORDER BY a unique key to make pages deterministic and retries idempotent. (Your examples order by a key column before slicing.)&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Pick a page size both sides can hold.&lt;/STRONG&gt; You found that 1,000,000 rows per page hits a good balance. Results and size scale with total rows, not so much with page count.&lt;/LI&gt;&lt;LI&gt;&lt;STRONG&gt;Stick to one gzip pass per response.&lt;/STRONG&gt; Compress after you generate JSON for the page, not per record or per mini-chunk inside the same response. It keeps clients simple.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For the full PDF paper, and code please check this GitHub repo:&amp;nbsp;&lt;A href="https://github.com/legonmarian/abap-btp-api-optimization" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/legonmarian/abap-btp-api-optimization&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/1-500-faster-abap-cloud-api-with-just-gzip/qaq-p/14229207"/>
    <published>2025-09-26T16:36:17.362000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/partial-unpacking-of-handling-unit-for-outbound-delivery-orders/qaq-p/14229435</id>
    <title>Partial Unpacking of Handling Unit for Outbound delivery orders</title>
    <updated>2025-09-27T00:21:48.742000+02:00</updated>
    <author>
      <name>jctx15</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/889959</uri>
    </author>
    <content>&lt;P&gt;Hello - I was curious if there are function modules that can allow us to do a partial unpacking of a item for an HU. We have a SAP program that utilizes the FM "HU_UNPACK" which unpacks the entire item quantity.&amp;nbsp;&lt;/P&gt;&lt;P&gt;If for example, a HU had an item of quantity 10, would I be able to unpack only a quantity of 2 from the HU? I was poking around in VL02N&amp;nbsp; and we can do a partial item quantity to pack, but it did not seem we can do it for unpacking.&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/partial-unpacking-of-handling-unit-for-outbound-delivery-orders/qaq-p/14229435"/>
    <published>2025-09-27T00:21:48.742000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-q-a/bapi-fm-to-get-gl-account-line-items/qaq-p/14230485</id>
    <title>BAPI/FM to get GL account line items</title>
    <updated>2025-09-29T13:49:21.095000+02:00</updated>
    <author>
      <name>jan_turek</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/188867</uri>
    </author>
    <content>&lt;P&gt;Hi all,&lt;/P&gt;&lt;P&gt;I'm looking for a BAPI / FM to get GL account line items. My need is only for PL accounts (no OI management), primary key must be account number, limitation by period / posting date.&amp;nbsp;New GL active. CO object is needed.&lt;/P&gt;&lt;P&gt;Sorry if it is obvious but I was not able to find a suitable solution. Before I go for something like BKPF-&amp;gt;BSEG, I'd like to use some systematic solution.&lt;/P&gt;&lt;P&gt;thanks to all!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-q-a/bapi-fm-to-get-gl-account-line-items/qaq-p/14230485"/>
    <published>2025-09-29T13:49:21.095000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/any-api-to-get-all-users-which-would-respond-positively-to-a-given/qaq-p/14230612</id>
    <title>Any API to get all users which would respond positively to a given AUTHORITY-CHECK?</title>
    <updated>2025-09-29T15:57:27.136000+02:00</updated>
    <author>
      <name>Sandra_Rossi</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/145194</uri>
    </author>
    <content>&lt;P&gt;Hi,&lt;/P&gt;&lt;P&gt;In the flexible workflow, I'm asked to implement the method RESPONSIBILITY_RULE of the BAdI RSM_BADI_STATIC_RULE, to return the agents who have a given authorization e.g., AUTHORITY-CHECK 'ZZZZZ' FOR USER user ID field1 FIELD value1 ID field2 FIELD value2, etc. The workflow task can then be processed by any of these agents.&lt;/P&gt;&lt;P&gt;For information, our authorization values contain wildcards (values *, CX3101*) or are fixed (CX32). No intervals.&lt;/P&gt;&lt;P&gt;Is there any official (released) API which does that, or do you have any other recommendation?&lt;/P&gt;&lt;P&gt;I have searched a little bit:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;The only API authorization query I know, CL_AUTH_OBJECTS_TO_SQL (cf. ABAP Keyword documentation) is not relevant for this query. It transforms some authorizations of the current user into a WHERE clause to select the values from a given database table (to avoid selecting all the lines and then removing the forbidden values by LOOP AT + AUTHORITY-CHECK).&lt;/LI&gt;&lt;LI&gt;The function module&amp;nbsp;SUSR_GET_PROFS_WITH_SPEC_OBJCT (followed by LOOP AT + AUTHORITY-CHECK) can do the job but is not released and is a little bit slow. Its logic is:&lt;UL&gt;&lt;LI&gt;All accesses to the database tables is without buffer&lt;/LI&gt;&lt;LI&gt;Get all the authorizations corresponding to the authorization object (USR12)&lt;/LI&gt;&lt;LI&gt;LOOP AT the authorizations&lt;UL&gt;&lt;LI&gt;Get the profiles corresponding to these authorizations (UST10S)&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Get the subprofiles of these profiles via FOR ALL ENTRIES (UST10C)&lt;/LI&gt;&lt;LI&gt;Get all the users corresponding to these profiles and subprofiles via FOR ALL ENTRIES (UST04)&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Reading directly the database tables above, with a join. I just did a test and it's faster (with HANA)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Thanks.&lt;/P&gt;&lt;P&gt;Sandra&lt;/P&gt;&lt;P&gt;PS: my system is S/4HANA On Premises, ABAP 7.58.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/any-api-to-get-all-users-which-would-respond-positively-to-a-given/qaq-p/14230612"/>
    <published>2025-09-29T15:57:27.136000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/free-selections-dialog-to-display-filters-and-i-created-a-button-via-se41/qaq-p/14230631</id>
    <title>FREE_SELECTIONS_DIALOG to display filters, and I created a button via SE41.</title>
    <updated>2025-09-29T16:07:53.682000+02:00</updated>
    <author>
      <name>trabelsioussa</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/825427</uri>
    </author>
    <content>&lt;P class=""&gt;&lt;SPAN&gt;I'm using&amp;nbsp;&lt;/SPAN&gt;&lt;CODE&gt;FREE_SELECTIONS_DIALOG&lt;/CODE&gt;&lt;SPAN&gt;&amp;nbsp;to display filters, and I created a button via SE41. I'm trying to show both components in the same interface. While I managed to display them together, the logic and button aren’t working.&lt;/SPAN&gt;&lt;/P&gt;&lt;P class=""&gt;&lt;SPAN&gt;Has anyone implemented something similar or faced this issue? Thanks in advance!&lt;BR /&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/free-selections-dialog-to-display-filters-and-i-created-a-button-via-se41/qaq-p/14230631"/>
    <published>2025-09-29T16:07:53.682000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/f0797-app-extension-odata-service-manage-billing-docs/qaq-p/14230656</id>
    <title>F0797 App Extension OData Service - Manage Billing Docs.</title>
    <updated>2025-09-29T16:19:40.774000+02:00</updated>
    <author>
      <name>zajde1jc</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1758013</uri>
    </author>
    <content>&lt;P&gt;Hello Experts,&lt;/P&gt;&lt;P&gt;I have successfully created a Fiori Extension Project in BAS for Fiori App F0797: Manage Billing Documents. I added a new custom action/button to the worklistview. The new button will update the billing date for the records selected in the worklist. In my app preview, the button is displayed correctly, and the popup is also working as expected and provided the user with the option to select the new billing date.&lt;/P&gt;&lt;P&gt;How to tie this to the backend SAP system for processing?&lt;BR /&gt;The OData project in SEGW is&amp;nbsp;&lt;STRONG&gt;SD_CUSTOMER_INVOICES_MANAGE&lt;/STRONG&gt;. My question is, do I need to create a copy of this project and add my custom logic in the DPC_EXT class?&amp;nbsp; Or, am I able to create a new service entirely and add it to my Extension project in BAS? The new service would only be enabled for my custom action/button. What is the preferred approach when extending Fiori Apps which are UI5 based?&lt;/P&gt;&lt;P&gt;Attached are my worklist custom controller.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Br,&lt;BR /&gt;Jared&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/f0797-app-extension-odata-service-manage-billing-docs/qaq-p/14230656"/>
    <published>2025-09-29T16:19:40.774000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/enterprise-resource-planning-q-a/add-additional-column-to-the-va02-va03-incompletion-log/qaq-p/14230883</id>
    <title>Add additional column to the Va02,Va03 incompletion log.</title>
    <updated>2025-09-29T19:11:22.166000+02:00</updated>
    <author>
      <name>winona8689</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/829794</uri>
    </author>
    <content>&lt;P&gt;Hi All,&lt;/P&gt;&lt;P&gt;Is it possible to add new additional column to the incompletion log of va02, va03.&lt;/P&gt;&lt;P&gt;My requirement is like below.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/enterprise-resource-planning-q-a/add-additional-column-to-the-va02-va03-incompletion-log/qaq-p/14230883"/>
    <published>2025-09-29T19:11:22.166000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/basic-code-s-of-abap/qaq-p/14231152</id>
    <title>Basic code's of ABAP</title>
    <updated>2025-09-30T06:38:10.002000+02:00</updated>
    <author>
      <name>RakeshZore</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1759317</uri>
    </author>
    <content>&lt;P&gt;This blog consists of Basic code's of ABAP which can help most of the Beginner to understand and use it with simple replacements.....&lt;/P&gt;&lt;P&gt;Content of the post.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Display of Data using&amp;nbsp;REUSE_ALV_GRID&lt;/LI&gt;&lt;LI&gt;Display of data using Class method and also screen validation error&lt;/LI&gt;&lt;LI&gt;Modify Table in runtime using&amp;nbsp;REUSE_ALV_GRID_DISPLAY.&lt;/LI&gt;&lt;LI&gt;Error handling using message class code.&lt;/LI&gt;&lt;LI&gt;Spool Generation code.&lt;/LI&gt;&lt;LI&gt;Selection Screen code for visibility of parameters according to requirements.&lt;/LI&gt;&lt;LI&gt;Excel upload using&amp;nbsp;TEXT_CONVERT_XLS_TO_SAP&lt;/LI&gt;&lt;LI&gt;Table Maintenance code for Create, display and update data without SM30 and excel upload of data to create data using FM 'ALSM_EXCEL_TO_INTERNAL_TABLE'&lt;/LI&gt;&lt;LI&gt;Send Mail with Excel and PDF attachments.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;BR /&gt;1. Display of Data using&amp;nbsp;REUSE_ALV_GRID&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT1.

TABLES : BSEG, MARA, MARD.

TYPE-POOLS : SLIS.

*INPUTS
PARAMETERS : R_ACCNO TYPE BSEG-BELNR,
R_FYEAR TYPE BSEG-GJAHR.

*DECLARATIONS OF NEEDED COMPONENTS
DATA : IT_BSEG TYPE STANDARD TABLE OF BSEG,
WA_BSEG TYPE BSEG,
IT_MARA TYPE STANDARD TABLE OF MARA,
WA_MARA TYPE MARA,
IT_MARD TYPE STANDARD TABLE OF MARD,
WA_MARD TYPE MARD.

*CREATING TABLE STRUCTURE FOR FINAL OUTPUT
TYPES : BEGIN OF TY_STRUC,

MATNR TYPE BSEG-MATNR,
BELNR TYPE BSEG-BELNR,
GJAHR TYPE BSEG-GJAHR,
ERNAM TYPE MARA-ERNAM,
AENAM TYPE MARA-AENAM,
LGORT TYPE MARD-LGORT,
END OF TY_STRUC.

DATA : IT_FINAL TYPE STANDARD TABLE OF TY_STRUC,
WA_FINAL TYPE TY_STRUC.

DATA : IT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
WA_FIELDCAT LIKE LINE OF IT_FIELDCAT.

*CONDITION FOR TAKING INPUTS AND ALSO ADDING DATA OF BSEG IN THE INTERNAL TABLE.
IF R_ACCNO IS NOT INITIAL AND R_FYEAR IS NOT INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BELNR = R_ACCNO AND GJAHR = R_FYEAR.

ELSEIF R_ACCNO IS NOT INITIAL AND R_FYEAR IS INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BELNR = R_ACCNO.

ELSEIF R_ACCNO IS INITIAL AND R_FYEAR IS NOT INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE GJAHR = R_FYEAR.

ELSEIF R_ACCNO IS INITIAL AND R_FYEAR IS INITIAL.

SELECT BELNR MATNR GJAHR FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG.

ENDIF.

*DELETING THE DUPLICATES WITH RESPECT TO MATNR
*DELETE ADJACENT DUPLICATES FROM IT_BSEG COMPARING MATNR.

*NOW ADDING CONTENT OF MARA AND MARD INTO THE INTERNAL TABLE RESPECTIVELY USING MATNR AS FOREIGN KEY
SELECT MATNR ERNAM AENAM FROM MARA INTO CORRESPONDING FIELDS OF TABLE IT_MARA FOR ALL ENTRIES IN IT_BSEG WHERE MATNR = IT_BSEG-MATNR.

SELECT MATNR LGORT FROM MARD INTO CORRESPONDING FIELDS OF TABLE IT_MARD FOR ALL ENTRIES IN IT_MARA WHERE MATNR = IT_MARA-MATNR.

*MERGING ALL THE DATA INTO FINAL INTERNAL TABLE
LOOP AT IT_BSEG INTO WA_BSEG.

READ TABLE IT_MARA INTO WA_MARA WITH KEY MATNR = WA_BSEG-MATNR .

READ TABLE IT_MARD INTO WA_MARD WITH KEY MATNR = WA_MARA-MATNR.

WA_FINAL-MATNR = WA_MARA-MATNR.
WA_FINAL-BELNR = WA_BSEG-BELNR.
WA_FINAL-GJAHR = WA_BSEG-GJAHR.
WA_FINAL-ERNAM = WA_MARA-ERNAM.
WA_FINAL-AENAM = WA_MARA-AENAM.
WA_FINAL-LGORT = WA_MARD-LGORT.

APPEND WA_FINAL TO IT_FINAL.

ENDLOOP.

*DELETING THE DUPLICATES WITH RESPECT TO MATNR
DELETE ADJACENT DUPLICATES FROM IT_FINAL COMPARING MATNR.

WA_FIELDCAT-FIELDNAME = 'MATNR'.
WA_FIELDCAT-SELTEXT_M = 'MATERIAL NUMBER'.
WA_FIELDCAT-OUTPUTLEN = '18'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'BELNR'.
WA_FIELDCAT-SELTEXT_M = 'ACCOUNT DOCUMENT NUMBER'.
WA_FIELDCAT-OUTPUTLEN = '10'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'GJAHR'.
WA_FIELDCAT-SELTEXT_M = 'FISCAL YEAR'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'ERNAM'.
WA_FIELDCAT-SELTEXT_M = 'CREATED BY'.
WA_FIELDCAT-OUTPUTLEN = '12'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'AENAM'.
WA_FIELDCAT-SELTEXT_M = 'CHANGED BY'.
WA_FIELDCAT-OUTPUTLEN = '12'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-FIELDNAME = 'LGORT'.
WA_FIELDCAT-SELTEXT_M = 'STORAGE LOCATION'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.




CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
IT_FIELDCAT = IT_FIELDCAT
TABLES
T_OUTTAB = IT_FINAL
* EXCEPTIONS
* PROGRAM_ERROR = 1
* OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;2. Display of data using Class method and also screen validation error&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT2.

PARAMETERS : EMP_ID TYPE PA0000-PERNR.

DATA: WA_PA00 TYPE PA0000,
WA_PA2 TYPE PA0002.

AT SELECTION-SCREEN .

SELECT SINGLE * FROM PA0000 INTO WA_PA00 WHERE PERNR = EMP_ID.
SELECT SINGLE * FROM PA0002 INTO WA_PA2 WHERE PERNR = WA_PA00-PERNR.

IF WA_PA2-PERNR IS INITIAL.
MESSAGE 'EMPLOYEE NOT PRESENT' TYPE 'E'.

ENDIF.

CLASS EMP_MAIN DEFINITION.
PUBLIC SECTION.
METHODS : GET_DATA,
DISPLAY.

PRIVATE SECTION.
DATA: IT_PA02 TYPE STANDARD TABLE OF PA0002,
WA_PA02 TYPE PA0002.


TYPES: BEGIN OF TY_STRUC,
EMP_ID TYPE PA0002-PERNR,
LAST_NAME TYPE PA0002-NACHN,
FIRST_NAME TYPE PA0002-VORNA,
DOB TYPE PA0002-GBDAT,
GENDER TYPE ZGENDER,

END OF TY_STRUC.


DATA : IT_ANS TYPE STANDARD TABLE OF TY_STRUC,
WA_ANS TYPE TY_STRUC.

ENDCLASS.

CLASS EMP_MAIN IMPLEMENTATION.
METHOD GET_DATA.


SELECT PERNR NACHN VORNA GBDAT GESCH FROM PA0002 INTO CORRESPONDING FIELDS OF TABLE ME-&amp;gt;IT_PA02 WHERE PERNR = EMP_ID.

LOOP AT ME-&amp;gt;IT_PA02 INTO ME-&amp;gt;WA_PA02.
ME-&amp;gt;WA_ANS-EMP_ID = ME-&amp;gt;WA_PA02-PERNR.
ME-&amp;gt;WA_ANS-LAST_NAME = ME-&amp;gt;WA_PA02-NACHN.
ME-&amp;gt;WA_ANS-FIRST_NAME = ME-&amp;gt;WA_PA02-VORNA.
ME-&amp;gt;WA_ANS-DOB = ME-&amp;gt;WA_PA02-GBDAT.

IF ME-&amp;gt;WA_PA02-GESCH = 1.
ME-&amp;gt;WA_ANS-GENDER = 'M-YES'.
ELSE.
ME-&amp;gt;WA_ANS-GENDER = 'F-YES'.
ENDIF.

APPEND ME-&amp;gt;WA_ANS TO ME-&amp;gt;IT_ANS.

ENDLOOP.

ENDMETHOD.

METHOD DISPLAY.
DATA : LR_TABLE TYPE REF TO CL_SALV_TABLE.
CL_SALV_TABLE=&amp;gt;FACTORY( IMPORTING R_SALV_TABLE = LR_TABLE
CHANGING T_TABLE = ME-&amp;gt;IT_ANS ).
LR_TABLE-&amp;gt;DISPLAY( ).
ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.

DATA LR_MAIN TYPE REF TO EMP_MAIN.

CREATE OBJECT LR_MAIN.
LR_MAIN-&amp;gt;GET_DATA( ).

LR_MAIN-&amp;gt;DISPLAY( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;3. Modify Table in runtime using&amp;nbsp;REUSE_ALV_GRID_DISPLAY.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT3.

DATA WA_MS TYPE ZMATERIAL_SALES.

TYPE-POOLS : SLIS.

SELECT-OPTIONS: DATE FOR WA_MS-C_DATE.

DATA: IT_SO TYPE TABLE OF ZMATERIAL_SALES,
IT_CY TYPE TABLE OF ZMATERIAL_SALES,
WA_SO TYPE ZMATERIAL_SALES,
WA_CY TYPE ZMATERIAL_SALES.


DATA : IT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV,
WA_FIELDCAT LIKE LINE OF IT_FIELDCAT.

START-OF-SELECTION.

IF DATE IS NOT INITIAL.
PERFORM FETCH USING DATE[] CHANGING IT_SO.
ELSE.
SELECT * FROM ZMATERIAL_SALES INTO TABLE IT_SO.
ENDIF.

IT_CY = IT_SO.

PERFORM FIELD_CATALOG.



CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
I_CALLBACK_PROGRAM = SY-REPID
I_CALLBACK_USER_COMMAND = 'SAVE'
IT_FIELDCAT = IT_FIELDCAT
TABLES
T_OUTTAB = IT_SO
EXCEPTIONS
PROGRAM_ERROR = 1
OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
* WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.



FORM FETCH USING P_DATE LIKE DATE[]
CHANGING P_IT_SO LIKE IT_SO.
SELECT * FROM ZMATERIAL_SALES INTO TABLE P_IT_SO WHERE C_DATE IN P_DATE.

ENDFORM. " FETCH




FORM FIELD_CATALOG .

WA_FIELDCAT-COL_POS = 1.
WA_FIELDCAT-FIELDNAME = 'MATNR'.
WA_FIELDCAT-SELTEXT_M = 'Material no.'.
WA_FIELDCAT-OUTPUTLEN = '18'.
WA_FIELDCAT-KEY = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 2.
WA_FIELDCAT-FIELDNAME = 'VBELN'.
WA_FIELDCAT-SELTEXT_M = 'Sales Doc no.'.
WA_FIELDCAT-OUTPUTLEN = '10'.
WA_FIELDCAT-KEY = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 3.
WA_FIELDCAT-FIELDNAME = 'MAT_DESC'.
WA_FIELDCAT-SELTEXT_M = 'Material Discription'.
WA_FIELDCAT-OUTPUTLEN = '40'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 4.
WA_FIELDCAT-FIELDNAME = 'SAL_DESC'.
WA_FIELDCAT-SELTEXT_M = 'Sales DiscrIption'.
WA_FIELDCAT-OUTPUTLEN = '40'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 5.
WA_FIELDCAT-FIELDNAME = 'QUANT'.
WA_FIELDCAT-SELTEXT_M = 'Quantity'.
WA_FIELDCAT-OUTPUTLEN = '12'.
WA_FIELDCAT-EDIT = 'X'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 6.
WA_FIELDCAT-FIELDNAME = 'PRICE'.
WA_FIELDCAT-SELTEXT_M = 'Price'.
WA_FIELDCAT-OUTPUTLEN = '4'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

WA_FIELDCAT-COL_POS = 7.
WA_FIELDCAT-FIELDNAME = 'C_DATE'.
WA_FIELDCAT-SELTEXT_M = 'Date Of Creation'.
WA_FIELDCAT-OUTPUTLEN = '8'.
APPEND WA_FIELDCAT TO IT_FIELDCAT.
CLEAR WA_FIELDCAT.

ENDFORM.


FORM SAVE USING RCOMM TYPE SY-UCOMM
SEL TYPE SLIS_SELFIELD.

CASE SY-UCOMM.
WHEN '&amp;amp;DATA_SAVE'.
LOOP AT IT_SO INTO WA_SO.
CLEAR WA_CY.
READ TABLE IT_CY INTO WA_CY INDEX SY-TABIX.

IF WA_SO NE WA_CY.
WA_CY-MAT_DESC = WA_SO-MAT_DESC.
WA_CY-SAL_DESC = WA_SO-SAL_DESC.
WA_CY-QUANT = WA_SO-QUANT.

MODIFY ZMATERIAL_SALES FROM WA_CY.

IF SY-SUBRC = 0.
MESSAGE 'RECORD HAS BEEN SAVED SUCCESSFULY' TYPE 'S'.
ENDIF.
ENDIF.

CLEAR WA_SO.
ENDLOOP.

ENDCASE.
ENDFORM.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;4. Error handling using message class code.&lt;/P&gt;&lt;P&gt;Firstly create msg class using se91 Tcode and then we can use in our code&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT4.

TABLES: BSEG,MSEG.

PARAMETERS C_CODE TYPE BSEG-BUKRS.

TYPES: BEGIN OF TY_BM,
BUKRS TYPE BSEG-BUKRS,
GJAHR TYPE BSEG-GJAHR,
MATNR TYPE BSEG-MATNR,
BELNR TYPE BSEG-BELNR,
MBLNR TYPE MSEG-MBLNR,
ZEILE TYPE MSEG-ZEILE,
END OF TY_BM.

DATA: IT_BM TYPE TABLE OF TY_BM,
WA_BM TYPE TY_BM.

DATA: IT_MSEG TYPE STANDARD TABLE OF MSEG,
WA_MSEG TYPE MSEG.

DATA: IT_BSEG TYPE STANDARD TABLE OF BSEG,
WA_BSEG TYPE BSEG.

DATA OBJ TYPE REF TO ZCX_K_ERRORHANDLE.

AT SELECTION-SCREEN.
TRY.
IF C_CODE IS NOT INITIAL.
SELECT GJAHR MATNR BELNR BUKRS FROM BSEG INTO CORRESPONDING FIELDS OF TABLE IT_BSEG WHERE BUKRS = C_CODE.

IF IT_BSEG IS NOT INITIAL.
SELECT MBLNR ZEILE FROM MSEG INTO CORRESPONDING FIELDS OF TABLE IT_MSEG FOR ALL ENTRIES IN IT_BSEG WHERE MBLNR = IT_BSEG-BELNR.
ENDIF.

IF IT_MSEG IS INITIAL.
RAISE EXCEPTION TYPE ZCX_K_ERRORHANDLE
EXPORTING
TEXTID = ZCX_K_ERRORHANDLE=&amp;gt;ZCX_K_ERRORHANDLE.
ENDIF.
ELSE.
RAISE EXCEPTION TYPE ZCX_K_ERRORHANDLE
EXPORTING
TEXTID = ZCX_K_ERRORHANDLE=&amp;gt;INPUT_ERROR.
ENDIF.

CATCH ZCX_K_ERRORHANDLE INTO OBJ.

MESSAGE OBJ TYPE 'E'.

ENDTRY.



CLASS LCL_MAIN DEFINITION.
PUBLIC SECTION.
METHODS : DISPLAY.


ENDCLASS.

CLASS LCL_MAIN IMPLEMENTATION.

METHOD DISPLAY.
DATA : LR_TABLE TYPE REF TO CL_SALV_TABLE.
CL_SALV_TABLE=&amp;gt;FACTORY( IMPORTING R_SALV_TABLE = LR_TABLE
CHANGING T_TABLE = IT_BM ).
LR_TABLE-&amp;gt;DISPLAY( ).
ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.

LOOP AT IT_BSEG INTO WA_BSEG.
READ TABLE IT_MSEG INTO WA_MSEG WITH KEY MBLNR = WA_BSEG-BELNR.

WA_BM-MATNR = WA_BSEG-MATNR.
WA_BM-BUKRS = WA_BSEG-BUKRS.
WA_BM-GJAHR = WA_BSEG-GJAHR.
WA_BM-BELNR = WA_BSEG-BELNR.
WA_BM-MBLNR = WA_MSEG-MBLNR.
WA_BM-ZEILE = WA_MSEG-ZEILE.
APPEND WA_BM TO IT_BM.
CLEAR WA_BM.

ENDLOOP.

DATA LR_MAIN TYPE REF TO LCL_MAIN.

CREATE OBJECT LR_MAIN.

LR_MAIN-&amp;gt;DISPLAY( ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;5. Spool Generation code.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT5.

DATA: IT_MS LIKE ZMATERIAL_SALES OCCURS 0 WITH HEADER LINE,
C_DATE LIKE ZMATERIAL_SALES-C_DATE.

DATA: IT_SP LIKE ZSPOOLTABLE OCCURS 0 WITH HEADER LINE.

DATA: GD_SPOOL_NR LIKE TSP01-RQIDENT.

START-OF-SELECTION.

SELECT C_DATE FROM ZMATERIAL_SALES INTO CORRESPONDING FIELDS OF TABLE IT_MS.

DELETE ADJACENT DUPLICATES FROM IT_MS COMPARING C_DATE.

LOOP AT IT_MS.

CLEAR: C_DATE.

C_DATE = IT_MS-C_DATE.

WAIT UP TO 1 SECONDS.


PERFORM SUBMIT_PROGRAM.
PERFORM GET_SPOOL_NUMBER.
PERFORM ADD_SPOOL_NUMBER.

ENDLOOP.



FORM SUBMIT_PROGRAM .

SUBMIT ZASSESSMENT3 WITH DATE = C_DATE
TO SAP-SPOOL
WITHOUT SPOOL DYNPRO
AND RETURN.


ENDFORM. " SUBMIT_PROGRAM



FORM GET_SPOOL_NUMBER .

CLEAR GD_SPOOL_NR.
SELECT SINGLE RQIDENT INTO GD_SPOOL_NR FROM TSP01
WHERE RQCRETIME = ( SELECT MAX( RQCRETIME ) FROM TSP01 WHERE RQCLIENT = SY-MANDT
AND RQOWNER = SY-UNAME ).




ENDFORM. " GET_SPOOL_NUMBER



FORM ADD_SPOOL_NUMBER .

IT_SP-C_DATE = C_DATE.
IT_SP-SPOOL_NO = GD_SPOOL_NR.

APPEND IT_SP.

MODIFY ZSPOOLTABLE FROM IT_SP.
COMMIT WORK.

ENDFORM. " ADD_SPOOL_NUMBER&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;6. Selection Screen code for visibility of parameters according to requirements.&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT7.

INCLUDE ZSELECTION_SCREEN.


**&amp;amp;---------------------------------------------------------------------*
**&amp;amp; Include ZSELECTION_SCREEN
**&amp;amp;---------------------------------------------------------------------*
*DATA: BELNR TYPE BSEG-BELNR,
* GJAHR TYPE BSEG-GJAHR,
* BUKRS TYPE BSEG-BUKRS.
*
*SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
* SELECT-OPTIONS: ACC_NO FOR BELNR NO INTERVALS NO-EXTENSION,
* F_YEAR FOR GJAHR MODIF ID P1 NO INTERVALS NO-EXTENSION,
* C_CODE FOR BUKRS MODIF ID P2 NO INTERVALS NO-EXTENSION.
*
* SELECTION-SCREEN SKIP 1.
*
* SELECTION-SCREEN BEGIN OF LINE.
*
*
* PARAMETERS C1 RADIOBUTTON GROUP RAD1 USER-COMMAND R1 DEFAULT 'X'.
* SELECTION-SCREEN COMMENT 3(26) TEXT-021.
* SELECTION-SCREEN POSITION 30.
* PARAMETERS C2 RADIOBUTTON GROUP RAD1.
* SELECTION-SCREEN COMMENT 32(29) TEXT-022.
* SELECTION-SCREEN END OF LINE.
*
* SELECTION-SCREEN SKIP 1.
*
* SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
* PARAMETERS: V2 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* PARAMETERS: V3 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* PARAMETERS: V4 AS CHECKBOX MODIF ID VW USER-COMMAND COMM2.
* SELECTION-SCREEN END OF BLOCK B2.
*
*SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-003.
* PARAMETERS: V5 AS CHECKBOX MODIF ID VW1.
*
* SELECTION-SCREEN END OF BLOCK B3.
*
* SELECTION-SCREEN END OF BLOCK B1.




AT SELECTION-SCREEN OUTPUT.

IF C1 = 'X'.
SET CURSOR FIELD 'C2'.
LOOP AT SCREEN.
IF SCREEN-GROUP1 = 'VW1'.
SCREEN-ACTIVE = '0'.

MODIFY SCREEN.
ENDIF.


IF V4 = 'X' AND ( V3 = 'X' OR V2 = 'X') .

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
IF SCREEN-GROUP1 = 'P1'.
SCREEN-ACTIVE = '1'.
MODIFY SCREEN.
ENDIF.


ELSEIF V4 = 'X'.

IF SCREEN-GROUP1 = 'P1'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '1'.
MODIFY SCREEN.

ENDIF.
ELSE.

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.

ENDIF.
ENDIF.
ENDLOOP.

ENDIF.

IF C2 = 'X'.
SET CURSOR FIELD 'C1'.
LOOP AT SCREEN.
IF SCREEN-GROUP1 = 'VW'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.
ENDIF.

IF SCREEN-GROUP1 = 'P2'.
SCREEN-ACTIVE = '0'.
MODIFY SCREEN.
ENDIF.

ENDLOOP.
ENDIF.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;BR /&gt;7. Excel upload using&amp;nbsp;TEXT_CONVERT_XLS_TO_SAP&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ZASSESSMENT10.

DATA: IT_TAB TYPE STANDARD TABLE OF ZASSESS10.

DATA: WA_TAB TYPE ZASSESS10.

DATA IT_TYPE(4096) type c occurs 0.

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS: P_FILE TYPE RLGRAP-FILENAME.

SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM GET_FILE.


START-OF-SELECTION.

PERFORM EXCEL_TO_IT_TAB.
PERFORM UPLOAD_DATA.

END-OF-SELECTION.

FORM GET_FILE .

CALL FUNCTION 'F4_FILENAME' "POP UP FOR FETCH
EXPORTING
PROGRAM_NAME = SYST-CPROG
DYNPRO_NUMBER = SYST-DYNNR
* FIELD_NAME = ' '
IMPORTING
FILE_NAME = P_FILE
.

ENDFORM. " GET_FILE




FORM EXCEL_TO_IT_TAB .



CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
EXPORTING
* I_FIELD_SEPERATOR =
I_LINE_HEADER = 'X'
I_TAB_RAW_DATA = IT_TYPE
I_FILENAME = P_FILE
TABLES
I_TAB_CONVERTED_DATA = IT_TAB
EXCEPTIONS
CONVERSION_FAILED = 1
OTHERS = 2
.
IF SY-SUBRC &amp;lt;&amp;gt; 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.




ENDFORM. " EXCEL_TO_IT_TAB




FORM UPLOAD_DATA .

LOOP AT IT_TAB INTO WA_TAB.

MODIFY ZASSESS10 FROM WA_TAB.
COMMIT WORK.
ENDLOOP.

ENDFORM. " UPLOAD_data&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;8. Table Maintenance code for Create, display and update data without SM30 and excel upload of data to create data using FM 'ALSM_EXCEL_TO_INTERNAL_TABLE'&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;REPORT ztable_update.

TYPES : BEGIN OF ty_ztable,
sel TYPE char1.
INCLUDE STRUCTURE ztable.
TYPES : END OF ty_ztable.

DATA : gs_ztable TYPE ty_ztable,
gt_file_data TYPE TABLE OF ztable,
gob_table TYPE REF TO cl_salv_table,
gt_ztable1 TYPE TABLE OF ztable,
gt_ztable TYPE TABLE OF ty_ztable,
gs_zzpp_ztable TYPE ztable,
gv_mark TYPE char01,
gv_field1 TYPE ztable-field1,
gv_field2 TYPE ztable-field2,
gv_field3 TYPE ztable-field3,
gt_excel TYPE TABLE OF alsmex_tabline.

DATA: gs_excel TYPE ole2_object, " Excel object
gs_mapl TYPE ole2_object, " list of workbooks
gs_map TYPE ole2_object, " workbook
gs_zl TYPE ole2_object, " cell
gs_f TYPE ole2_object, " font
gs_column TYPE ole2_object. " Column

CONTROLS: t_tab TYPE TABLEVIEW USING SCREEN 9000.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-501.
PARAMETERS : p_rb1 RADIOBUTTON GROUP grp1 DEFAULT 'X' USER-COMMAND usr1 MODIF ID r1,
p_rb2 RADIOBUTTON GROUP grp1 MODIF ID r1,
p_rb3 RADIOBUTTON GROUP grp1 MODIF ID r1.


SELECTION-SCREEN BEGIN OF BLOCK t11 WITH FRAME TITLE TEXT-502.
PARAMETERS : p_file1 TYPE rlgrap-filename MODIF ID z1.
SELECTION-SCREEN: BEGIN OF LINE,
PUSHBUTTON 1(24) TEXT-105 USER-COMMAND form MODIF ID z1,
END OF LINE.
SELECTION-SCREEN END OF BLOCK t11.


SELECTION-SCREEN BEGIN OF BLOCK t12 WITH FRAME TITLE TEXT-503.
SELECT-OPTIONS :so_pc1 FOR gv_field1 NO-EXTENSION NO INTERVALS MODIF ID z2 ,
so_fpc1 FOR gv_field3 NO-EXTENSION NO INTERVALS MODIF ID z2 ,
so_cc1 FOR gv_field2 NO-EXTENSION NO INTERVALS MODIF ID z2 .
SELECTION-SCREEN END OF BLOCK t12.

SELECTION-SCREEN BEGIN OF BLOCK t13 WITH FRAME TITLE TEXT-504.
SELECT-OPTIONS : so_pc2 FOR gv_field1 NO-EXTENSION NO INTERVALS MODIF ID z3,
so_fpc2 FOR gv_field3 NO-EXTENSION NO INTERVALS MODIF ID z3,
so_cc2 FOR gv_field2 NO-EXTENSION NO INTERVALS MODIF ID z3.
SELECTION-SCREEN END OF BLOCK t13.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF SCREEN 500 AS WINDOW.
SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE TEXT-008 .

SELECTION-SCREEN BEGIN OF LINE.
* YES
PARAMETERS p_y RADIOBUTTON GROUP rad2 USER-COMMAND r1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 3(10) TEXT-027.
SELECTION-SCREEN POSITION 15.
* NO
PARAMETERS p_n RADIOBUTTON GROUP rad2.
SELECTION-SCREEN COMMENT 18(10) TEXT-028.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b3.
SELECTION-SCREEN END OF SCREEN 500.

AT SELECTION-SCREEN.
IF sy-ucomm EQ 'FORM'.
PERFORM download_format.
ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file1.
PERFORM f4_filename USING p_file1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_pc1-low.
PERFORM Param_F4_help_pc USING so_pc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_fpc1-low.
PERFORM Param_F4_help_fpc USING so_fpc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_cc1-low.
PERFORM Param_F4_help_cc USING so_cc1-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_pc2-low.
PERFORM Param_F4_help_pc USING so_pc2-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_fpc2-low.
PERFORM Param_F4_help_fpc USING so_fpc2-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR so_cc2-low.
PERFORM Param_F4_help_cc USING so_cc2-low.

AT SELECTION-SCREEN OUTPUT.
LOOP AT SCREEN.
IF screen-group1 = 'Z1'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 1
WHEN p_rb2 = 'X' THEN 0
WHEN p_rb3 = 'X' THEN 0 ).
ENDIF.
IF screen-group1 = 'Z2'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 0
WHEN p_rb2 = 'X' THEN 1
WHEN p_rb3 = 'X' THEN 0 ).
ENDIF.
IF screen-group1 = 'Z3'.
screen-active = COND #( WHEN p_rb1 = 'X' THEN 0
WHEN p_rb2 = 'X' THEN 0
WHEN p_rb3 = 'X' THEN 1 ).
ENDIF.

IF screen-group1 = 'V0' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V1' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V2' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'V3' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C0' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C1' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C2' .
screen-active = 0.
ENDIF.
IF screen-group1 = 'C3' .
screen-active = 0.
ENDIF.
MODIFY SCREEN.
ENDLOOP.

START-OF-SELECTION.
IF p_rb1 = 'X'.
PERFORM Create_data.

ELSEIF p_rb2 = 'X'.
PERFORM Update_data.

ELSEIF p_rb3 = 'X'.
PERFORM Display_data.
ENDIF.

END-OF-SELECTION.

FORM Create_data .

DATA: ls_temp_data TYPE ztable,
lt_temp_tab TYPE TABLE OF ztable,
lv_cont TYPE char1.

IF p_file1 IS NOT INITIAL.
IF ( p_file1 CP '*xls' OR p_file1 CP '*xlsx' ).
TRY.
CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
EXPORTING
filename = p_file1
i_begin_col = 1
i_begin_row = 2
i_end_col = '30'
i_end_row = '999999'
TABLES
intern = gt_excel
EXCEPTIONS
inconsistent_parameters = 1
upload_ole = 2
OTHERS = 3.
IF sy-subrc &amp;lt;&amp;gt; 0.
MESSAGE 'Excel File Conversion Error' TYPE 'S' DISPLAY LIKE 'E'.
EXIT.
ENDIF.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

LOOP AT gt_excel ASSIGNING FIELD-SYMBOL(&amp;lt;lfs_excel&amp;gt;).
IF ls_temp_data-field1 IS NOT INITIAL
AND ls_temp_data-field3 IS NOT INITIAL
AND ls_temp_data-field2 IS NOT INITIAL
AND &amp;lt;lfs_excel&amp;gt;-col &amp;lt;&amp;gt; 1
AND line_exists( lt_temp_tab[ field1 = ls_temp_data-field1
field3 = ls_temp_data-field3
field2 = ls_temp_data-field2 ] ).
MESSAGE |Duplicate Entry found in Excel at Row number : | &amp;amp;&amp;amp; |{ &amp;lt;lfs_excel&amp;gt;-row + 1 }| TYPE 'S' DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
CASE &amp;lt;lfs_excel&amp;gt;-col.
WHEN 1.
CLEAR ls_temp_data.
ls_temp_data-field1 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field1.
WHEN 2.
ls_temp_data-field3 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field3.
WHEN 3.
ls_temp_data-field2 = &amp;lt;lfs_excel&amp;gt;-value.
CONDENSE ls_temp_data-field2.
ENDCASE.
AT END OF row.
ls_temp_data-client = sy-mandt.
APPEND ls_temp_data TO lt_temp_tab.
ENDAT.
ENDLOOP.
ENDIF.

IF lt_temp_tab IS NOT INITIAL.
DELETE FROM ztable.
IF sy-subrc = 0.
COMMIT WORK.
ELSE.
ROLLBACK WORK.
ENDIF.
INSERT ztable FROM TABLE lt_temp_tab .
IF sy-subrc = 0.
COMMIT WORK.
MESSAGE 'Data inserted successfully' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not inserted' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ELSE.
MESSAGE 'Entry already exists' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ENDIF.

ENDFORM.


FORM Update_data .

SELECT *
FROM ztable
INTO CORRESPONDING FIELDS OF TABLE @gt_ztable
WHERE field1 IN _pc1
AND field3 IN _fpc1
AND field2 IN _cc1.

IF gt_ztable IS NOT INITIAL.
CALL SCREEN 9000.
ELSE.
MESSAGE 'No Data Found' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ENDFORM.


FORM Display_data .

SELECT *
FROM ztable
INTO TABLE (lt_ztable)
WHERE field1 IN _pc2
AND field3 IN _fpc2
AND field2 IN _cc2.

IF lt_ztable IS NOT INITIAL.
TRY.
CALL METHOD cl_salv_table=&amp;gt;factory
IMPORTING
r_salv_table = gob_table
CHANGING
t_table = lt_ztable.
CATCH cx_salv_msg .
ENDTRY.
CALL METHOD gob_table-&amp;gt;display.
ELSE.
MESSAGE 'No data found' TYPE 'S' DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDFORM.


FORM download_format .

CREATE OBJECT gs_excel 'EXCEL.APPLICATION'.
SET PROPERTY OF gs_excel 'Visible' = 1.
* get list of workbooks, initially empty
CALL METHOD OF
gs_excel
'Workbooks' = gs_mapl.
PERFORM err_hdl.

* add a new workbook
CALL METHOD OF
gs_mapl
'Add' = gs_map.
PERFORM err_hdl.

* Output column headings to active Excel sheet
PERFORM fill_cell USING 1 1 1 'Field 1' .
PERFORM fill_cell USING 1 2 1 'Field 2' .
PERFORM fill_cell USING 1 3 1 'Field 3' .

CALL METHOD OF
gs_excel
'Columns' = gs_column.

CALL METHOD OF
gs_column
'Autofit'.

CALL METHOD OF
gs_excel
'Worksheets' = gs_mapl.
PERFORM err_hdl.

SET PROPERTY OF gs_map 'NAME' = 'COPY'.

FREE OBJECT: gs_excel,
gs_mapl,
gs_map,
gs_zl,
gs_f,
gs_column.


ENDFORM.



FORM f4_filename USING p_file.
TRY.
CALL FUNCTION 'F4_FILENAME'
EXPORTING
field_name = 'P_FILE '
IMPORTING
file_name = p_file.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

ENDFORM.

FORM Param_F4_help_pc USING
p_so_pc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field1
FROM ztable
INTO TABLE (lt_value).

TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field1'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.

READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_pc = ls_return-fieldval.
ENDIF.
ENDFORM.

FORM Param_F4_help_Fpc USING
p_so_Fpc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field3
FROM ztable
INTO TABLE (lt_value).
TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field3'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.
READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_fpc = ls_return-fieldval.
ENDIF.
ENDFORM.

FORM Param_F4_help_cc USING
p_so_cc.
DATA: lt_return TYPE STANDARD TABLE OF ddshretval.

SELECT DISTINCT field2
FROM ztable
INTO TABLE (lt_value).
TRY.
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
retfield = 'field2'
value_org = 'S'
TABLES
value_tab = lt_value
return_tab = lt_return
EXCEPTIONS
parameter_error = 1
no_values_found = 2
OTHERS = 3.
CATCH cx_root INTO DATA(lob_oref).
MESSAGE lob_oref-&amp;gt;get_text( ) TYPE 'S' DISPLAY LIKE 'E'.
ENDTRY.
READ TABLE lt_return INTO DATA(ls_return) INDEX 1.
IF sy-subrc = 0.
p_so_cc = ls_return-fieldval.
ENDIF.
ENDFORM.


FORM err_hdl .
IF sy-subrc &amp;lt;&amp;gt; 0.
MESSAGE 'Worksheet not created' TYPE 'S' DISPLAY LIKE 'E'.
STOP.
ENDIF.
ENDFORM.


FORM fill_cell USING i TYPE any
j TYPE any
bold TYPE any
val TYPE any.
CALL METHOD OF
gs_excel
'Cells' = gs_zl
EXPORTING
#1 = i
#2 = j.

PERFORM err_hdl.
SET PROPERTY OF gs_zl 'Value' = val.
PERFORM err_hdl.
GET PROPERTY OF gs_zl 'Font' = gs_f.
PERFORM err_hdl.
SET PROPERTY OF gs_f 'Bold' = bold.
PERFORM err_hdl.

ENDFORM.


MODULE status_9000 OUTPUT.
SET PF-STATUS 'PF_STATUS_9000'.
SET TITLEBAR 'TITLE1'.
ENDMODULE.


MODULE user_command_9000 INPUT.
CASE sy-ucomm.
WHEN 'BACK'.
LEAVE TO SCREEN 0.
WHEN 'CANCEL' OR 'EXIT'.
LEAVE PROGRAM.
WHEN 'SAVE'.
MOVE-CORRESPONDING gt_ztable TO gt_ztable1.
LOOP AT gt_ztable1 ASSIGNING FIELD-SYMBOL(&amp;lt;gfs_zrm&amp;gt;).
&amp;lt;gfs_zrm&amp;gt;-client = sy-mandt.
ENDLOOP.
UPDATE ztable FROM TABLE gt_ztable1.
IF sy-subrc = 0.
COMMIT WORK.
MESSAGE 'Data updated successfully' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not updated ' TYPE 'S'.
ENDIF.
WHEN '%DEL'.
IF line_exists( gt_ztable[ sel = 'X' ] ).
CALL SELECTION-SCREEN 500 STARTING AT 5 5.
IF sy-subrc = 0.
IF p_y = 'X'.
gt_ztable1 = VALUE #( FOR gs_z IN gt_ztable
WHERE ( sel = 'X' )
( CORRESPONDING #( gs_z ) ) ).
IF gt_ztable1 IS NOT INITIAL.
DELETE ztable FROM TABLE gt_ztable1 .
IF sy-subrc = 0.
COMMIT WORK.
DELETE gt_ztable WHERE sel = 'X'.
MESSAGE 'Selected Data deleted' TYPE 'S'.
ELSE.
ROLLBACK WORK.
MESSAGE 'Data not deleted' TYPE 'S'.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
ELSE.
MESSAGE 'Select Data' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.

WHEN '%SEL'. "Select all
gs_ztable-sel = 'X'.
MODIFY gt_ztable FROM gs_ztable TRANSPORTING sel WHERE sel &amp;lt;&amp;gt; 'X'.

WHEN '%DSE'. "Deselect ALl
gs_ztable-sel = ' '.
MODIFY gt_ztable FROM gs_ztable TRANSPORTING sel WHERE sel = 'X'.

ENDCASE.
ENDMODULE.


MODULE t_tab_change_tc_attr OUTPUT.
DESCRIBE TABLE gt_ztable LINES t_tab-lines.
ENDMODULE.

MODULE t_tab_modify INPUT.
MODIFY gt_ztable
FROM gs_ztable
INDEX t_tab-current_line.
ENDMODULE.
Flow Logic - Screen 9000

PROCESS BEFORE OUTPUT.
MODULE t_tab_change_tc_attr.

LOOP AT gt_ztable
INTO gs_ztable
WITH CONTROL t_tab
CURSOR t_tab-current_line.
ENDLOOP.


MODULE status_9000.
*
PROCESS AFTER INPUT.
LOOP AT gt_ztable.
CHAIN.
FIELD gs_ztable-sel.
FIELD gs_ztable-field1.
FIELD gs_ztable-field2.
FIELD gs_ztable-field3.
MODULE t_tab_modify ON CHAIN-REQUEST.
ENDCHAIN.
ENDLOOP.

MODULE user_command_9000.
 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;9. Send Mail with Excel and PDF attachments.&lt;/P&gt;&lt;P&gt;data declarations...&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA: BEGIN OF PDF_OUTPUT OCCURS 0.
          INCLUDE STRUCTURE TLINE.
  DATA: END OF PDF_OUTPUT.

  DATA : I_RECLIST  LIKE SOMLRECI1.
  DATA : I_OBJTXT   LIKE SOLISTI1,
         I_OBJPACK  LIKE SOPCKLSTI1,
         I_OBJBIN   LIKE SOLISTI1,
         WA_OBJHEAD LIKE SOLISTI1.

  DATA : V_LINES_TXT LIKE SY-TABIX,
         V_LINES_BIN LIKE SY-TABIX,
         WA_DOC_CHNG LIKE SODOCCHGI1.
  DATA : T_OBJECTDATA LIKE CLOBJDAT ,
         TAB_CLASS LIKE SCLASS .
  DATA : SEND_REQUEST TYPE REF TO CL_BCS.
  DATA : TEXT TYPE BCSY_TEXT.
  DATA : DOCUMENT TYPE REF TO CL_DOCUMENT_BCS.
  DATA : RECIPIENT TYPE REF TO IF_RECIPIENT_BCS.
  DATA : SENDER TYPE REF TO CL_SAPUSER_BCS.
  DATA : BCS_EXCEPTION TYPE REF TO CX_BCS.
  DATA : SENT_TO_ALL TYPE OS_BOOLEAN.
  DATA : MSTR_PRINT_PARMS LIKE PRI_PARAMS.
  DATA : SOLI_TAB TYPE SOLI_TAB.
  DATA : E_XSTRING TYPE XSTRING.
  DATA : G_XSTRING TYPE XSTRING.
  DATA : LT_SOLIX TYPE SOLIX_TAB.
  DATA : BINARY_CONTENT TYPE SOLIX_TAB.
  DATA : LV_SUBJECT(50) TYPE C.
  DATA :  LV_SUBJ_FILE   TYPE SO_OBJ_DES .
  DATA : LT_ATT_HEAD    TYPE SOLI_TAB.
  DATA : LV_FILENAME    TYPE STRING.
  DATA : LV_TEXT_LINE    TYPE SOLI.
  DATA : CONTENT TYPE STRING.
  DATA : VAL TYPE STRING.

  DATA : GD_SPOOL_NR LIKE TSP01-RQIDENT,
         GD_BYTECOUNT LIKE TST01-DSIZE.

  DATA : IT_CONTENTS TYPE STANDARD TABLE OF SOLISTI1,
         WA_CONTENTS TYPE SOLISTI1.

* EXCEL
  DATA : MT_FCAT        TYPE LVC_T_FCAT,
         MT_DATA        TYPE REF TO DATA,
         M_FLAVOUR      TYPE STRING,
         M_VERSION      TYPE STRING,
         MO_RESULT_DATA TYPE REF TO CL_SALV_EX_RESULT_DATA_TABLE,
         MO_COLUMNS     TYPE REF TO CL_SALV_COLUMNS_TABLE,
         MO_AGGREG      TYPE REF TO CL_SALV_AGGREGATIONS,
         MO_SALV_TABLE  TYPE REF TO CL_SALV_TABLE,
         M_FILE_TYPE    TYPE SALV_BS_CONSTANT.
  FIELD-SYMBOLS : &amp;lt;TAB&amp;gt; TYPE ANY TABLE.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;I. Create Excel&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;GET REFERENCE OF IT_EXCEL INTO mt_data. "IT_EXCEL consists of data which need to in excel

*if we didn't pass fieldcatalog we need to create it
  ASSIGN mt_data-&amp;gt;* TO &amp;lt;tab&amp;gt;.
  TRY .
      cl_salv_table=&amp;gt;factory(
      EXPORTING
      list_display = abap_false
      IMPORTING
      r_salv_table = mo_salv_table
      CHANGING
      t_table      = &amp;lt;tab&amp;gt; ).
    CATCH cx_salv_msg.

  ENDTRY.

  "get colums &amp;amp; aggregation infor to create fieldcat
  mo_columns  = mo_salv_table-&amp;gt;get_columns( ).
  mo_aggreg   = mo_salv_table-&amp;gt;get_aggregations( ).
  mt_fcat     =  cl_salv_controller_metadata=&amp;gt;get_lvc_fieldcatalog(
    r_columns      = mo_columns
    r_aggregations = mo_aggreg ).

  IF cl_salv_bs_a_xml_base=&amp;gt;get_version( ) EQ
  if_salv_bs_xml=&amp;gt;version_25 OR
  cl_salv_bs_a_xml_base=&amp;gt;get_version( ) EQ
  if_salv_bs_xml=&amp;gt;version_26.



    mo_result_data = cl_salv_ex_util=&amp;gt;factory_result_data_table(
    r_data                      = mt_data
*        s_layout                    = is_layout
    t_fieldcatalog              = mt_fcat
*        t_sort                      = it_sort
*        t_filter                    = it_filt
    ).

    CASE cl_salv_bs_a_xml_base=&amp;gt;get_version( ).
      WHEN if_salv_bs_xml=&amp;gt;version_25.
        m_version = if_salv_bs_xml=&amp;gt;version_25.
      WHEN if_salv_bs_xml=&amp;gt;version_26.
        m_version = if_salv_bs_xml=&amp;gt;version_26.
    ENDCASE.

    m_file_type = if_salv_bs_xml=&amp;gt;C_TYPE_EXCEL_XML.

    m_flavour = if_salv_bs_c_tt=&amp;gt;c_tt_xml_flavour_export.


    "transformation of data to excel
    CALL METHOD cl_salv_bs_tt_util=&amp;gt;if_salv_bs_tt_util~transform
      EXPORTING
        xml_type      = m_file_type
        xml_version   = m_version
        r_result_data = mo_result_data
        xml_flavour   = m_flavour
        gui_type      = if_salv_bs_xml=&amp;gt;c_gui_type_gui
      IMPORTING
        xml           = g_xstring.
  ENDIF.


  CALL METHOD cl_bcs_convert=&amp;gt;xstring_to_solix
    EXPORTING
      iv_xstring = g_xstring
    RECEIVING
      et_solix   = binary_content.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;II. Create PDF&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;*for fetching print parameters and then changing according to file format
  CALL FUNCTION 'GET_PRINT_PARAMETERS'
    EXPORTING
      NO_DIALOG      = 'X'
    IMPORTING
      OUT_PARAMETERS = MSTR_PRINT_PARMS.

  MSTR_PRINT_PARMS-PAART = 'X_65_230'.

*Submit ZProgram whose output should be the content need to be in PDF
*for creating spool
  SUBMIT ZPROGRAM  WITH C_CODE = C_CODE
                          WITH C_NAME = C_NAME
  TO SAP-SPOOL
   SPOOL PARAMETERS MSTR_PRINT_PARMS
   WITHOUT SPOOL DYNPRO
   AND RETURN.

  CLEAR GD_SPOOL_NR.

*fetching spool id
  SELECT SINGLE RQIDENT INTO GD_SPOOL_NR  FROM TSP01
        WHERE RQCRETIME = ( SELECT MAX( RQCRETIME ) FROM TSP01 WHERE RQCLIENT = SY-MANDT
      AND RQOWNER = SY-UNAME ).

*converting spool content into pdf
  CLEAR :GD_BYTECOUNT .
  CALL FUNCTION 'CONVERT_ABAPSPOOLJOB_2_PDF'
    EXPORTING
      SRC_SPOOLID              = GD_SPOOL_NR
      NO_DIALOG                = ' '
    IMPORTING
      PDF_BYTECOUNT            = GD_BYTECOUNT
    TABLES
      PDF                      = PDF_OUTPUT
    EXCEPTIONS
      ERR_NO_ABAP_SPOOLJOB     = 1
      ERR_NO_SPOOLJOB          = 2
      ERR_NO_PERMISSION        = 3
      ERR_CONV_NOT_POSSIBLE    = 4
      ERR_BAD_DESTDEVICE       = 5
      USER_CANCELLED           = 6
      ERR_SPOOLERROR           = 7
      ERR_TEMSEERROR           = 8
      ERR_BTCJOB_OPEN_FAILED   = 9
      ERR_BTCJOB_SUBMIT_FAILED = 10
      ERR_BTCJOB_CLOSE_FAILED  = 11
      OTHERS                   = 12.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* convert attachment
  CALL FUNCTION 'SX_TABLE_LINE_WIDTH_CHANGE'
    TABLES
      CONTENT_IN  = PDF_OUTPUT
      CONTENT_OUT = SOLI_TAB
    EXCEPTIONS
      OTHERS      = 4.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
    EXPORTING
      INPUT_LENGTH = GD_BYTECOUNT
    IMPORTING
      BUFFER       = E_XSTRING
    TABLES
      BINARY_TAB   = SOLI_TAB
    EXCEPTIONS
      OTHERS       = 2.

  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LT_SOLIX = CL_DOCUMENT_BCS=&amp;gt;XSTRING_TO_SOLIX( IP_XSTRING = E_XSTRING ).
"LT_SOLIX is the string format of pdf which is use in attachment of mail&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;III. Send Mail&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;Try.
* create persistent send request
      SEND_REQUEST = CL_BCS=&amp;gt;CREATE_PERSISTENT( ).

* create and set document
      CLEAR: TEXT, TEXT[], CONTENT, LV_SUBJECT.

* Email Subject
      CLEAR: LV_SUBJECT.

        LV_SUBJECT =  'Subject of the mail.'.

      CLEAR: LV_SUBJ_FILE.
        lV_SUBJ_FILE = 'File_name'

* Body
      CLEAR : IT_CONTENTS[].

  "email body
  WA_CONTENTS-LINE = 'Greetings,'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.

  WA_CONTENTS-LINE = 'This is the mail body'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.
  
  APPEND WA_CONTENTS TO IT_CONTENTS.
  WA_CONTENTS-LINE = 'Thanks'.
  APPEND WA_CONTENTS TO IT_CONTENTS.
  CLEAR : WA_CONTENTS.
  
      DOCUMENT = CL_DOCUMENT_BCS=&amp;gt;CREATE_DOCUMENT(
      I_TYPE = 'HTM'
      I_TEXT = IT_CONTENTS
      I_SUBJECT = LV_SUBJECT ).

* add document to send request
      CALL METHOD SEND_REQUEST-&amp;gt;SET_DOCUMENT( DOCUMENT ).

** add attachment for pdf
      TRY.
          CALL METHOD DOCUMENT-&amp;gt;ADD_ATTACHMENT
            EXPORTING
              I_ATTACHMENT_TYPE    = 'PDF'
              I_ATTACHMENT_SUBJECT = LV_SUBJ_FILE
              I_ATT_CONTENT_HEX    = LT_SOLIX.
        CATCH cx_document_bcs.
      ENDTRY.


* add attachment for excel

      TRY.
          CALL METHOD DOCUMENT-&amp;gt;ADD_ATTACHMENT(
            i_attachment_type = 'XLS'
            i_attachment_subject = LV_SUBJ_FILE
            i_att_content_hex = binary_content ).
        CATCH cx_document_bcs.
      ENDTRY.


      data : MAIL_TO  TYPE AD_SMTPADR.

    
* create recipient (e-mail address)

            CLEAR: MAIL_TO.
            MAIL_TO = 'abc@xyz.com'.

            RECIPIENT = CL_CAM_ADDRESS_BCS=&amp;gt;CREATE_INTERNET_ADDRESS(
            MAIL_TO ).


*   add recipient with its respective attributes to send request
            CALL METHOD SEND_REQUEST-&amp;gt;ADD_RECIPIENT
              EXPORTING
                I_RECIPIENT = RECIPIENT
                I_EXPRESS   = 'X'.
*            i_copy      = 'X'.

* If wants to add CC mail id
            CLEAR: MAIL_TO.
            MAIL_TO = 'cc@xyz.com'.


            RECIPIENT = CL_CAM_ADDRESS_BCS=&amp;gt;CREATE_INTERNET_ADDRESS(
            MAIL_TO ).


*   add recipient with its respective attributes to send request
            CALL METHOD SEND_REQUEST-&amp;gt;ADD_RECIPIENT
              EXPORTING
                I_RECIPIENT = RECIPIENT
*            I_EXPRESS   = 'X'.
                i_copy      = 'X'.
         

* send document
      CALL METHOD SEND_REQUEST-&amp;gt;SEND(
      EXPORTING
      I_WITH_ERROR_SCREEN = 'X'
      RECEIVING
      RESULT = SENT_TO_ALL ).

      COMMIT WORK.

      MESSAGE 'Mail Send Successfully' TYPE 'S'.

      DATA:   BCS_EXCEPTION TYPE REF TO CX_BCS.

    CATCH CX_BCS INTO BCS_EXCEPTION.
      MESSAGE 'Mail Not sent' TYPE 'E'.


  ENDTRY.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/basic-code-s-of-abap/qaq-p/14231152"/>
    <published>2025-09-30T06:38:10.002000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/developing-cloud-ready-adobe-forms-on-premise/qaq-p/14231305</id>
    <title>Developing cloud-ready Adobe Forms on-premise</title>
    <updated>2025-09-30T09:01:12.524000+02:00</updated>
    <author>
      <name>patrick_weber11</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/215409</uri>
    </author>
    <content>&lt;P&gt;Hi all,&lt;/P&gt;&lt;P&gt;we're running S/4 HANA 2023 FP1 on-premise and as part of our clean core strategy, we need to deal with forms as well. As today, we use all available technologies like SAPScript, SmartForms as well as Adobe Forms. For sure, we only stick to Adobe Forms for new forms since several years.&lt;/P&gt;&lt;P&gt;To my understanding, we can use SAP Forms in BTP also on-premise. It will only be a replacement for our on-prem ADS, but there is no need to change any print report or form. So we can still use all the NAST and other stuff available since decades. This only covers infrastructure in my opinion. But what is the difference from a developers perspective?&lt;/P&gt;&lt;P&gt;As we all know, reports are not clean core compliant. This must also be true to print reports you define in customizing. So there will be no print report in future anymore. We actually have no plans to move to cloud but at least I want to be prepared for this. This brings me to my final question&lt;/P&gt;&lt;P&gt;What do we need to consider when it comes to developing SAP Forms in a cloud-ready manner? Where and how should we place our custom logic for custom forms as well as for SAP standard forms (i.e. handling templates for invoices, purchase orders etc.)? How to do this to be able to use the form in both, on-premise as well as cloud?&lt;/P&gt;&lt;P&gt;- do we need to replace the logic from Z-print reports to Z-classes? (we typically do this these days)&lt;BR /&gt;- do we need to place custom logic into interface of a form (we do this for standard forms [invoices] to be able to stick to standard print reports)&lt;BR /&gt;- anything else we should consider on-premise?&lt;/P&gt;&lt;P&gt;As said, actually there are no plans to move but at least we should be prepared for this. At least we need to refine our development guidelines to reflect any new concept.&lt;/P&gt;&lt;P&gt;Our current approach looks like this:&lt;BR /&gt;- in case of totally custom form, any code is handled by dedicated print classes. The classes implement the business logic as well as calling the form FMs&lt;BR /&gt;- in case of adopting standard forms, we copy standard form interfaces and add any additional custom code inside this. Same is true for form itself for sure. By this, we can still use standard print reports&amp;nbsp;&lt;BR /&gt;- in any case, we try to avoid mixing both concepts. Code should be either in dedicated print class or in interface but not in both.&lt;/P&gt;&lt;P&gt;I hope someone can give me some hints&lt;BR /&gt;&lt;BR /&gt;Patrick&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/developing-cloud-ready-adobe-forms-on-premise/qaq-p/14231305"/>
    <published>2025-09-30T09:01:12.524000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/product-lifecycle-management-q-a/new-developer-license-for-my-npl-system/qaq-p/14231348</id>
    <title>New developer license for my NPL system</title>
    <updated>2025-09-30T09:45:19.380000+02:00</updated>
    <author>
      <name>KondhareChetan</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1907242</uri>
    </author>
    <content>&lt;P&gt;Please provide a new developer license for my NPL system.&lt;BR /&gt;Hardware Key=V1915464910&lt;BR /&gt;Installation Number=DEMOSYSTEM&lt;BR /&gt;System Number=000000000850876940&lt;BR /&gt;SID=NPL&lt;BR /&gt;My P-user is P2009088762&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/product-lifecycle-management-q-a/new-developer-license-for-my-npl-system/qaq-p/14231348"/>
    <published>2025-09-30T09:45:19.380000+02:00</published>
  </entry>
</feed>
