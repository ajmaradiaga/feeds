<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/topics/HTML5-blog-posts.xml</id>
  <title>SAP Community - HTML5</title>
  <updated>2025-08-27T11:10:45.423033+00:00</updated>
  <link href="https://community.sap.com/t5/c-khhcw49343/HTML5/pd-p/680828266263384213323560113427399" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>HTML5 blog posts in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/deploy-the-ui5-fiori-app-on-sap-abap-repository-with-bas-webide-create/ba-p/13556327</id>
    <title>Deploy the UI5 Fiori app on SAP ABAP repository with BAS &amp; WEBIDE, create Fiori app Tile using Launchpad Designer</title>
    <updated>2023-02-24T18:17:13+01:00</updated>
    <author>
      <name>kuldeep2813</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/736775</uri>
    </author>
    <content>Hello,&lt;BR /&gt;
&lt;BR /&gt;
In this blog we will learn How to &lt;A href="https://help.sap.com/docs/SAP_Web_IDE/825270ffffe74d9f988a0f0066ad59f0/1170ef65b7b3490687021c3132387829.html" target="_blank" rel="noopener noreferrer"&gt;deploy the Ui5 Fiori app on SAP ABAP repository&lt;/A&gt; with BAS &amp;amp; WEBIDE, also learn about fiori app tile creation in launchpad designer.&lt;BR /&gt;
&lt;H2 id="toc-hId-962167524"&gt;What is SAP UI5&lt;/H2&gt;&lt;BR /&gt;
SAP ui5 is a framework, it consists of Libraries. Used for Creating responsive apps.&lt;BR /&gt;
&lt;H3 id="toc-hId-894736738"&gt;Fiori Launchpad&lt;/H3&gt;&lt;BR /&gt;
SAP Fiori launchpad is a shell that hosts SAP Fiori apps, and provides the apps with services such as navigation, personalization, embedded support, and application configuration.&lt;BR /&gt;
&lt;BR /&gt;
Fiori launchpad is responsive because it adapts the layout in the Device Screen.&lt;BR /&gt;
&lt;H3 id="toc-hId-698223233"&gt;Prerequisites&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;User must have access to SAP Logon.&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;SPAN style="font-size: 1rem"&gt;User must have access of TCodes: SE80, /ui2/flp, /ui2/flpd_cust, /ui2/FLPD_CONF, /ui2/_FLPCM_CUST, /ui2/FLCM_CONF, /ui2/semobj, PFCG&lt;/SPAN&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;You access to SAP BTP Cockpit.&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-372627009"&gt;Deploy the Fiori app using Business application Studio (&lt;A href="https://www.sapstore.com/solutions/45318/SAP-Business-Application-Studio---the-evolution-of-SAP-Web-IDE" target="_blank" rel="nofollow noopener noreferrer"&gt;BAS&lt;/A&gt;)&lt;/H2&gt;&lt;BR /&gt;
SAP Business application studio is a cloud based developer tool to develop UI based applications&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-434278942"&gt;Launch the BAS from&lt;A href="https://cockpit.hanatrial.ondemand.com/trial/#/home/trial" target="_blank" rel="nofollow noopener noreferrer"&gt; Cloud cockpit&lt;/A&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/BAS-1.png" height="254" width="538" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-237765437"&gt;2. Select your desired project –&amp;gt; open the Terminal –&amp;gt; Go to the Project Dir (cd project dir) –&amp;gt;&amp;nbsp; &amp;nbsp;run the command ‘npm run deploy-config’ or ‘npx fiori add deploy-config’.&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture1-109.png" height="253" width="590" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-41251932"&gt;3. Give the required information&lt;/H4&gt;&lt;BR /&gt;
Choose the Target --&amp;gt; ABAP&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture2-47.png" height="248" width="572" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Select the Destination (If destination is not created, create a &lt;A href="https://blogs.sap.com/2021/01/28/creating-a-sample-sapui5-application-with-destination-in-cloud-foundry-environment/" target="_blank" rel="noopener noreferrer"&gt;destination&lt;/A&gt; on SAP BTP Cockpit)&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture3-41.png" height="256" width="572" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Provide the SAPUI5 ABAP Repository Name and Description.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture4-36.png" height="321" width="601" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Provide the Package detail&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture5-21.png" height="283" width="590" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Provide the Transport Request and execute the command "npm run deploy".&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture6-26.png" height="235" width="607" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp; &amp;nbsp; You will get a message "SAP UI5 Application has been uploaded and registered successfully".&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture8-19.png" height="247" width="596" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId--155261573"&gt;&amp;nbsp; &amp;nbsp;4. Go to the given link and check the deployed fiori app&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture9-16.png" height="256" width="602" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--351775078"&gt;&amp;nbsp; &amp;nbsp;5. Now you will get the Fiori app on SAP system.&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--548288583"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture10-16.png" height="210" width="591" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--655713169"&gt;Deploy the Fiori app using WEBIDE&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--1439032688"&gt;Go to the WEBIDE, right click on your project --&amp;gt; Select Deploy --&amp;gt; Choose your System (Deploy to SAPUi5 ABAP Repository)&lt;/H4&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture12-20.png" height="355" width="487" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--1635546193"&gt;2. You will be on next page (Deployment Option), Here select your required ABAP or Cloud system --&amp;gt; Next.&lt;/H4&gt;&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; Note: If you are deploying first time, select Deploy a new application. &lt;/STRONG&gt;&lt;STRONG&gt;Else application is&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;already deployed, select update an existing application &lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture13-18.png" height="308" width="570" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId--1832059698"&gt;3. Provide application Name, Description, Package, in - Deploy a New Application Screen and select Next.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture14-15.png" height="317" width="579" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 style="overflow: hidden;margin-bottom: 0px" id="toc-hId--2028573203"&gt;4.&amp;nbsp; If the selected package is local, Choose Finish. If it requires TR, select TR for your&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; application.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture15-16.png" height="431" width="502" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-2069880588"&gt;&amp;nbsp; &amp;nbsp;A notification message displays once the application is deployed successfully.&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture16-13.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H4 id="toc-hId-1873367083"&gt;5.&amp;nbsp; Go to SAP Logon Pad --&amp;gt; Tcode SE80 --&amp;gt; Select BSP Application from Dropdown --&amp;gt; find your deployed application.&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture17-14.png" height="226" width="584" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId--2031307704"&gt;Steps to create a Tile and Target mapping in Fiori launchpad Designer&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1480340073"&gt;Create Semantic Object using TCode - /n/ui2/semobj.&lt;/H4&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1283826568"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Click on Edit Button&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture18-10.png" height="61" width="587" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-1255496754"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Select New Entries.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture19-11.png" height="94" width="588" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-1058983249"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Provide the new Semantic Object, Object Name and Description and Click on Save Button.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture21-9.png" height="127" width="597" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-862469744"&gt;2. Go to SAP LogOn --&amp;gt; Execute the TCode - /ui2/FLPD_CUST (Launchpad Designer).&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture22-7.png" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-665956239"&gt;3. Click on Setting Button --&amp;gt; Select the TR --&amp;gt; choose Ok.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture23-6.png" height="264" width="583" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-469442734"&gt;4. If catalog information is not available, create a catalog --&amp;gt; Click on Plus Button --&amp;gt; provide the required information --&amp;gt; click on Save.&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture24-6.png" height="354" width="590" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 style="overflow: hidden;margin-bottom: 0px" id="toc-hId-272929229"&gt;5. If catalog already exist, select the catalog --&amp;gt; Click on Add tile plus Button.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture25-10.png" height="346" width="598" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 style="overflow: hidden;margin-bottom: 0px" id="toc-hId-76415724"&gt;6. Select a Tile template, here I am going to select App launcher - Static. &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture26-6.png" height="181" width="589" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--120097781"&gt;7. Provide the Title, information, Semantic Object, Action and other required Information Click on Save Button.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture27-6.png" height="262" width="588" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--316611286"&gt;8. Create a Target Mapping à Go to Target Mapping à Click on &lt;STRONG&gt;Create Target Mapping.&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture28-6.png" height="288" width="589" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--513124791"&gt;9. Provide the required information Semantic Object, Action, Title, URL, ID and Click on Save&amp;nbsp; Button.&lt;/H4&gt;&lt;BR /&gt;
&lt;P style="text-align: left"&gt;&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Note&lt;/STRONG&gt;: How to get URL --&amp;gt; Go to the WEBIDE --&amp;gt; your project --&amp;gt; manifest.json file --&amp;gt; Find the URL info.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture29-5.png" height="326" width="572" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;How to get ID: Go to the WEBIDE --&amp;gt; your project --&amp;gt; manifest.json file --&amp;gt; find the ID.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture30-5.png" height="240" width="600" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 style="overflow: hidden;margin-bottom: 0px" id="toc-hId--541454605"&gt;&amp;nbsp; &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture31-6.png" height="274" width="607" /&gt;10. The Fiori app tile has been created successfully. Go to Fiori launchpadv --&amp;gt; App Finder&amp;nbsp; --&amp;gt; Search your application.&lt;/H4&gt;&lt;BR /&gt;
&lt;STRONG&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;Note: If Fiori app is not found on Fiori Launchpad à we have to assign the PFCG Role for catalog and contact security team to assign the Role.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/02/Picture32-3.png" height="234" width="602" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--444565103"&gt;Conclusion&lt;/H3&gt;&lt;BR /&gt;
The Fiori app has been deployed on SAP ABAP repository. The Fiori app tile has been created.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
With this we come to an end of this blog. Hope you find it useful.&lt;BR /&gt;
&lt;BR /&gt;
Keep learning &amp;amp; Keep Sharing!!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/deploy-the-ui5-fiori-app-on-sap-abap-repository-with-bas-webide-create/ba-p/13556327"/>
    <published>2023-02-24T18:17:13+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/how-to-enable-submit-button-in-fiori-app-verify-currency-adjustments-f4670/ba-p/13562097</id>
    <title>How to enable SUBMIT Button in Fiori app – Verify Currency Adjustments (F4670)</title>
    <updated>2023-03-28T11:44:54+02:00</updated>
    <author>
      <name>kuldeep2813</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/736775</uri>
    </author>
    <content>Hello,&lt;BR /&gt;
&lt;BR /&gt;
In this blog we will learn How to enable the SUBMIT button in Fiori app - Verify Currency Adjustments (F4670).&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Issue: When we click at Create Button, It navigates to the Fiori app - Post Currency Adjustments(F1606). Here SUBMIT Button is disable but end user wants to SUBMIT the Data.&lt;/STRONG&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture2-46.png" height="265" width="575" /&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId-1092051934"&gt;Prerequisites: User must have access to all three apps&lt;/H3&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Verify Currency Adjustments(F4670)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Manage Workflows for Journal Entry Verification - In General Ledger (F2720)&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Manage Teams and Responsibilities for Journal Entry Verification - In General Ledger (F3932)&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H2 id="toc-hId-766455710"&gt;Steps to enable the SUBMIT Button&lt;/H2&gt;&lt;BR /&gt;
&lt;OL&gt;&lt;BR /&gt;
 	&lt;LI&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-828107643"&gt;Go to Fiori launchpad and launch the Fiori app – F4670 (Verify Currency Adjustments) and Click at Create Button.&lt;/H4&gt;&lt;BR /&gt;
&lt;/LI&gt;&lt;BR /&gt;
&lt;/OL&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture3-35.png" height="252" width="575" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H4 id="toc-hId-631594138"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 2. It will navigate to the Fiori app F1606 (Post Currency Adjustments). &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture4-25.png" height="264" width="585" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-435080633"&gt;&amp;nbsp; &amp;nbsp; 3. Fill all required details, but as we can see &lt;STRONG&gt;SUBMIT&lt;/STRONG&gt; Button is not enabled.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture5-28.png" height="265" width="590" /&gt;&lt;/H4&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-238567128"&gt;&amp;nbsp; &amp;nbsp;4. To enable the SUBMIT Button go to the Fiori app – F2720 (Manage Workflows for Journal Entry Verification - In General Ledger)&lt;/H4&gt;&lt;BR /&gt;
Select the workflow Type as &lt;STRONG&gt;Currency Adjustment Verification &lt;/STRONG&gt;from Dropdown.&lt;BR /&gt;
&lt;BR /&gt;
If Currency Adjustment Verification is available so no need to perform any action.&lt;BR /&gt;
&lt;BR /&gt;
Else there is no data regarding this -&amp;gt; Create the new entry for this.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture6-26.png" height="244" width="578" /&gt;&lt;BR /&gt;
&lt;BR /&gt;
Now we can see the entry of &lt;STRONG&gt;Currency Adjustment Verification.&lt;/STRONG&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture7-28.png" height="142" width="592" /&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId-42053623"&gt;&amp;nbsp; &amp;nbsp;5. Go to Fiori launchpad (/n/ui2/FLP) --&amp;gt; Fiori app (Manage Teams and Responsibilities for&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Journal Entry Verification - In General Ledger). &lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture8-24.png" height="220" width="590" /&gt;&lt;/H4&gt;&lt;BR /&gt;
Need to check Entry is maintained or not. If entry is not maintained, please create entry and fill&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; required data and Save.&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture9-17.png" height="229" width="599" /&gt;&lt;BR /&gt;
&lt;H4 id="toc-hId--154459882"&gt;&amp;nbsp; &amp;nbsp;6. Go to Fiori app --&amp;gt;&amp;nbsp; F4670 (Verify Currency Adjustments) and Click at Create Button. Perform the steps 2 &amp;amp; 3. Now we can see that SUBMIT Button is enable in our application (F1606).&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/03/Picture10-13.png" height="260" width="576" /&gt;&lt;/H4&gt;&lt;BR /&gt;
More Information:&lt;BR /&gt;
&lt;BR /&gt;
&lt;A href="https://help.sap.com/docs/SAP_S4HANA_ON-PREMISE/651d8af3ea974ad1a4d74449122c620e/13c9c4a304a4489fa3fd5440fa1cdac0.html?version=1809.001" target="_blank" rel="noopener noreferrer"&gt;Verify Currency Adjustments&lt;/A&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId--480056106"&gt;Conclusion&lt;/H3&gt;&lt;BR /&gt;
SUBMIT Button is enable in our Fiori application&lt;STRONG&gt; Post Currency Adjustments- (F1606).&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
With this we come to an end of this blog. Hope you find it useful.&lt;BR /&gt;
&lt;BR /&gt;
Keep learning &amp;amp; Keep Sharing!!&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/how-to-enable-submit-button-in-fiori-app-verify-currency-adjustments-f4670/ba-p/13562097"/>
    <published>2023-03-28T11:44:54+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/fancy-emails-from-sap-integration-suite-ci-and-btp-alert-notification/ba-p/13575496</id>
    <title>Fancy Emails from SAP Integration Suite(CI) and BTP Alert Notification Service</title>
    <updated>2023-09-03T14:50:38+02:00</updated>
    <author>
      <name>FarooqAhmed</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/146868</uri>
    </author>
    <content>&lt;EM&gt;A few years ago one of the client team asked me can PI/PO able to send other than plain/text&amp;nbsp; EMAIL notifications for standard CBMA/MAIL receiver scenarios?. &lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
The answer was YES, PI/PO can able to sent more organized and feel good mails which can present the required data in the tabular form or more colorful or more catchy. Have done it and showed how it was working.&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Recently again the same question was asked by another client does CPI/CI able to send more attractive emails instead of plain and text emails?. &lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
The answer is YES. Its not only Integration Suite(CI) but also the BTP Alert Notification Service can able to sent more fascinating emails. Just embed few lines of HTML tags in the actual MAIL BODY thats it!!! But remember don't use the unnecessary tags in order to "keep the core clean". Also the same email body can be explicitly set using groovy script but i personally do no suggest always relying on scripts when things can be done in standard way why to make the maintenance difficult.&lt;BR /&gt;
&lt;BR /&gt;
It so happens if some ABAP or FIORI screens are been used by the client-user to get to know the capabilities of SAP. What if the end user is not really connected with the background processing of their enterprise data where SAP is leveraged at its BEST. Might be for one of the usual business case of notifying the User about the technical/functional error alerts or some important ORDERS receivable/processing by the middleware system or some other very critical bank interfaces processing updates. Whatso ever that notification email plays the extra cosmetic advantage of not only representing the calibrated tool efficacy but also the puzzling question what's running behind the screens for the new or non-sap users. In this AI-Gen world nothing goes waste even the word of mouth considered to be a unrealistic publicity.&lt;BR /&gt;
&lt;BR /&gt;
Let us checkout some of the CI cases where this can be a promising approach of fine tuning the USP of the BTP as a product.&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;From Integration Suite(CI):&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;STRONG&gt;Case-1:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;How can the emails be send in the tabular format with the required data passed dynamically from the specific interface to global exception interface?&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
If there is a global exception interface the below can be kept inside the MAIL receiver channel and for some scenarios where direct MAIL should be sent for some ORDER updates then that IFLOW actual MAIL receiver channel should be configured with the same as below&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/MAIL-RECEIVER.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;MAIL RECEIVER&lt;/P&gt;&lt;BR /&gt;
The MAIL BODY should be as below.&lt;BR /&gt;
&lt;PRE class="language-markup"&gt;&lt;CODE&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;BR /&gt;
&amp;lt;html lang="en"&amp;gt;&lt;BR /&gt;
&amp;lt;head&amp;gt;&lt;BR /&gt;
  &amp;lt;meta charset="UTF-8" /&amp;gt;&lt;BR /&gt;
  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;&lt;BR /&gt;
  &amp;lt;title&amp;gt;EMAIL&amp;lt;/title&amp;gt;&lt;BR /&gt;
  &amp;lt;style&amp;gt;&lt;BR /&gt;
table, th, td {&lt;BR /&gt;
  border: 1px solid black;&lt;BR /&gt;
}&lt;BR /&gt;
&amp;lt;/style&amp;gt;&lt;BR /&gt;
&amp;lt;/head&amp;gt;&lt;BR /&gt;
&amp;lt;body&amp;gt;&lt;BR /&gt;
&amp;lt;p&amp;gt;Hi,&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;BR /&gt;
Please find below details for Interface Message failure.&amp;lt;br&amp;gt;&lt;BR /&gt;
&amp;lt;table&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;BTP-CI Environment&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.CPIEnvironment}&amp;lt;/td&amp;gt;&lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;Message ID&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.MessageId}&amp;lt;/td&amp;gt;&lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;SenderSystem&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.SenderSystem}&amp;lt;/td&amp;gt;&lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;ReceiverSystem&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.ReceiverSystem}&amp;lt;/td&amp;gt; &lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;Timestamp&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.Timestamp}&amp;lt;/td&amp;gt;&lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
  &amp;lt;tr&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;&amp;lt;span style="font-weight:bold"&amp;gt;Error Message&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
    &amp;lt;td&amp;gt;${header.ErrorMessage}&amp;lt;/td&amp;gt; &lt;BR /&gt;
  &amp;lt;/tr&amp;gt;&lt;BR /&gt;
&amp;lt;/table&amp;gt;&amp;lt;br&amp;gt;&lt;BR /&gt;
Do Not Reply to this mail. Please contact SAP-Integration Team for further investigation.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;BR /&gt;
Regards,&amp;lt;br&amp;gt;&lt;BR /&gt;
SAP Integration Team.&lt;BR /&gt;
&amp;lt;/p&amp;gt;&lt;BR /&gt;
&amp;lt;/body&amp;gt;&lt;BR /&gt;
&amp;lt;/html&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The BODY MIME Type should be "TEXT/HTML" instead of "TEXT/XML".&lt;BR /&gt;
&lt;BR /&gt;
After execution the OUTLOOK or GMAIL or any other exchange server will be received the mail as below&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/EMAIL-FORMAT.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic;font-family: 'SAPRegular', 'Helvetica Neue', Arial, sans-serif"&gt;EMAIL FORMAT&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Case-2:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;How can the emails be send in the tabular format with some colors embedded and main text highlighted&amp;nbsp;in required color?&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Modify the table style declaration and required row with span&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;table style="background-color:LightGray;"&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;td&amp;gt;&amp;lt;span style="color: red;"&amp;gt;Your Input Data&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/EMAIL-FORMAT2.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Case-3:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;How can the emails be differentiated based on the environments?&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
Well there was the time while using the SAP systems through GUI , consultants used to keep different screen colors for each environment. For example DEV: GREEN, QA: ORANGE and PROD: RED.&lt;BR /&gt;
&lt;BR /&gt;
Similarly we can make a notifiable difference in the mails received from which environment its sent from. However there will be the subject or some row in the body indicating that environment specific information but if its added with some background color on top of normal text which will be very much helpful. As most of them will set the outlook=&amp;gt;layout=&amp;gt;folder pane=&amp;gt;normal where the mail body will be noticed immediately this can be achieved by using the below.&lt;BR /&gt;
&lt;BR /&gt;
Modify the body tags as below&lt;BR /&gt;
&lt;BR /&gt;
&amp;lt;body style="background-color:MediumSeaGreen;"&amp;gt; in DEV CI Interface Mail Channel&lt;BR /&gt;
&amp;lt;body style="background-color:Orange;"&amp;gt; in QA CI Interface Mail Channel&lt;BR /&gt;
&amp;lt;body style="background-color:Tomato;"&amp;gt; in PROD CI Interface Mail Channel&lt;BR /&gt;
&lt;BR /&gt;
This can be useful when the mail recipient list is the same for all or any two CI environments.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/CI-ENVI.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;From SAP BTP Alert Notification Service:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
While configuring for the Alert Notification Service any type of alerts can be configured. Among all the available action types " EMAIL " and " EMAIL with Custom SMTP Server " can used for different subscription sources and accordingly the conditions can be configured.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/EMAIL-TYPES.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
Once the Action Type "EMAIL" is selected then the below options to be used to configure the email with the HTML embedded body&lt;BR /&gt;
&lt;BR /&gt;
Use HTML checkbox to be selected.&lt;BR /&gt;
&lt;BR /&gt;
Payload Template should be inserted with the required custom payload template.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/09/Action-EMAIL-1.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;STRONG&gt;Conclusion:&lt;/STRONG&gt;&lt;BR /&gt;
&lt;BR /&gt;
There are different types of HTML tables, styles, formatting, colors, symbols, emojis etc., which can be used as per the requirement and embed those lines of tags in the EMAIL BODY with dynamic and static values.&lt;BR /&gt;
&lt;BR /&gt;
SAP always suggests to follow the standard so when this can be done using a simple html tags better to use the same tags using the dynamic properties directly in the EMAIL BODY and not relying on other groovy scripts as the maintenance will be difficult.&lt;BR /&gt;
&lt;BR /&gt;
Also for S4 HANA or AIF any SAP products where the standard or custom alerts are possible just check for HTML support. If its present then similar configurations can be done over there and make the emails more fancy!!!&lt;BR /&gt;
&lt;BR /&gt;
&lt;EM&gt;Disclaimer:&lt;/EM&gt;&lt;BR /&gt;
&lt;BR /&gt;
This article is only for informational purpose that usage of HTML tags inside the MAIL BODY gives more attractive EMAILS to the recipients.&lt;BR /&gt;
&lt;BR /&gt;
Few cases are shown as an example but no limitations in any perspective.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/fancy-emails-from-sap-integration-suite-ci-and-btp-alert-notification/ba-p/13575496"/>
    <published>2023-09-03T14:50:38+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-integration-suite-enhanced-monitoring/ba-p/13577830</id>
    <title>SAP Integration Suite Enhanced Monitoring</title>
    <updated>2023-10-19T20:36:25+02:00</updated>
    <author>
      <name>MarianVatafu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/864725</uri>
    </author>
    <content>&lt;H1 id="toc-hId-834966467"&gt;Scenario Overview&lt;/H1&gt;&lt;BR /&gt;
Using the standard monitoring capabilities from &lt;A href="https://help.sap.com/docs/integration-suite" target="_blank" rel="noopener noreferrer"&gt;SAP Integration Suite&lt;/A&gt; sometimes has its downsides. Each one of us has faced at some point the need to persist or store trace logs or even save the logs of a job that's running outside of business hours.&lt;BR /&gt;
&lt;BR /&gt;
Together with my colleague and dear friend &lt;SPAN class="mention-scrubbed"&gt;codrinz&lt;/SPAN&gt;&amp;nbsp;we started to think at way to persist the much needed trace logs that are only available for one hour on the SAP Integration Suite Tenant.&lt;BR /&gt;
&lt;BR /&gt;
This idea came from a need we had while doing tests on several artifacts, and because they were scheduled somewhere around 4 AM I was not there when they ran and in the morning we had to face plain/short error messages.&lt;BR /&gt;
&lt;BR /&gt;
Using the standard payload logging as attachments has its limitations, because in the end attachments would pile up in the backend and it will slow down the tenant, so we had to think at a different way of accessing the much-needed logs.&lt;BR /&gt;
&lt;BR /&gt;
By integrating&amp;nbsp;&lt;A href="https://www.sap.com/products/technology-platform.html" target="_blank" rel="noopener noreferrer"&gt;SAP Business Technology Platform&lt;/A&gt; products we have managed to create an application that can schedule a trace log for a specific iFlow artifact, scan for any runs in the specified interval and save it into a &lt;A href="https://help.sap.com/docs/hana-cloud" target="_blank" rel="noopener noreferrer"&gt;SAP HANA&lt;/A&gt; Database. Also, with the help of openAI, we get suggestions on how to fix the captured errors.&lt;BR /&gt;
&lt;BR /&gt;
All the SAP products are being used on a trial environment, so if you do want to do anything similar to what we did make sure to read the &lt;A href="https://developers.sap.com/tutorial-navigator.html" target="_blank" rel="noopener noreferrer"&gt;SAP Tutorials for Developers.&lt;/A&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId-767535681"&gt;Architecture Overview&lt;/H2&gt;&lt;BR /&gt;
The following picture gives an overview of the solution architecture :&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/MicrosoftTeams-image-5.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center"&gt;&lt;EM&gt;Solution Overview&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The end user can use the html page exposed by the &lt;A href="https://developers.sap.com/mission.cp-starter-extensions-cap.html" target="_blank" rel="noopener noreferrer"&gt;SAP CAP&lt;/A&gt; application for configuring and inspecting the logs saved.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IFRAME width="560" height="315" src="https://www.youtube.com/embed/g5V6VPUDA-8&amp;amp;ab_channel=MarianVatafu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""&gt;&lt;/IFRAME&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;Video short demo&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId-571022176"&gt;Technical setup&lt;/H2&gt;&lt;BR /&gt;
&lt;H3 id="toc-hId-503591390"&gt;SAP CAP Application Backend&lt;/H3&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/Dev-spaces.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Trial dev space&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption"&gt;The application was created in &lt;A href="https://help.sap.com/docs/bas" target="_blank" rel="noopener noreferrer"&gt;SAP Business Application Studios&lt;/A&gt; using NodeJS, express and HDB connections to the SAP HANA Database and it consists of creating multiple services and functions which are being called from the html page and SAP Integration Suite.&lt;/P&gt;&lt;BR /&gt;
Below are the entities we exposed in the catalog service, which are being used to communicate with the database.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/catalog-service-1.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Catalog services&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The services are binded to the data model created below.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/data-model.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Data model&lt;/P&gt;&lt;BR /&gt;
By also creating some dummy CSVs for sample data, we were able to push the application to Cloud Foundry, generate the HDB container/tables and deploy it.&lt;BR /&gt;
&lt;H3 id="toc-hId-307077885"&gt;SAP CAP Application Frontend&lt;/H3&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/Index.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center"&gt;Application Home Screen&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
The frontend was designed in HTML combined with Javascript. It consists of 3 pages and each one has buttons that trigger several REST calls to the SAP HANA Database or to the SAP Integration Suite endpoint that controls the behavior of several functionalities.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Below is a sample Javascript code used to populate, filter and update a table .&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;&amp;lt;input type="text" id="searchInput" placeholder="Search for iFlow name..." onkeyup="filterTable()"&amp;gt;&lt;BR /&gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
        &amp;lt;table id="dataTable"&amp;gt;&lt;BR /&gt;
            &amp;lt;thead&amp;gt;&lt;BR /&gt;
                &amp;lt;tr&amp;gt;&lt;BR /&gt;
                    &amp;lt;th onclick="sortTable(0)"&amp;gt;iFlow name&amp;lt;/th&amp;gt;&lt;BR /&gt;
                    &amp;lt;th onclick="sortTable(1)"&amp;gt;StartDate&amp;lt;/th&amp;gt;&lt;BR /&gt;
                    &amp;lt;th onclick="sortTable(2)"&amp;gt;StartTime&amp;lt;/th&amp;gt;&lt;BR /&gt;
                    &amp;lt;th onclick="sortTable(3)"&amp;gt;EndDate&amp;lt;/th&amp;gt;&lt;BR /&gt;
                    &amp;lt;th onclick="sortTable(4)"&amp;gt;EndTime&amp;lt;/th&amp;gt;&lt;BR /&gt;
                    &amp;lt;th&amp;gt;Action&amp;lt;/th&amp;gt; &amp;lt;!-- Add a new column for delete buttons --&amp;gt;&lt;BR /&gt;
                &amp;lt;/tr&amp;gt;&lt;BR /&gt;
            &amp;lt;/thead&amp;gt;&lt;BR /&gt;
            &amp;lt;tbody id="dataBody"&amp;gt;&lt;BR /&gt;
                &amp;lt;!-- Table content will be added dynamically --&amp;gt;&lt;BR /&gt;
            &amp;lt;/tbody&amp;gt;&lt;BR /&gt;
        &amp;lt;/table&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
        &amp;lt;!-- Sorting options dropdown --&amp;gt;&lt;BR /&gt;
        &amp;lt;div class="sorting-options" id="sortingOptions"&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(0, 'asc')"&amp;gt;Sort Ascending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(0, 'desc')"&amp;gt;Sort Descending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(1, 'asc')"&amp;gt;Sort Ascending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(1, 'desc')"&amp;gt;Sort Descending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(2, 'asc')"&amp;gt;Sort Ascending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(2, 'desc')"&amp;gt;Sort Descending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(3, 'asc')"&amp;gt;Sort Ascending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(3, 'desc')"&amp;gt;Sort Descending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(4, 'asc')"&amp;gt;Sort Ascending&amp;lt;/a&amp;gt;&lt;BR /&gt;
            &amp;lt;a href="#" onclick="sortTable(4, 'desc')"&amp;gt;Sort Descending&amp;lt;/a&amp;gt;&lt;BR /&gt;
        &amp;lt;/div&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
        &amp;lt;script&amp;gt;&lt;BR /&gt;
            // Function to delete a row when the delete button is clicked&lt;BR /&gt;
function deleteRow(row) {&lt;BR /&gt;
    const iFlowName = row.cells[0].textContent.trim(); // Extract iFlow name from the first column&lt;BR /&gt;
&lt;BR /&gt;
    // Make a GET request with query parameters to delete the corresponding iFlow&lt;BR /&gt;
    deleteIFlow(iFlowName);&lt;BR /&gt;
&lt;BR /&gt;
    // Remove the row from the table&lt;BR /&gt;
    row.remove();&lt;BR /&gt;
}&lt;BR /&gt;
&lt;BR /&gt;
// Function to make a GET request to delete an iFlow&lt;BR /&gt;
function deleteIFlow(iFlowName) {&lt;BR /&gt;
    // Define the URL and headers for the GET request&lt;BR /&gt;
    const apiUrl = 'https://${DispatcherURL}';&lt;BR /&gt;
    const apiKey = '${apiKey}';&lt;BR /&gt;
    const step = 'DeleteScheduleTraces';&lt;BR /&gt;
&lt;BR /&gt;
    // Construct the full URL with query parameters&lt;BR /&gt;
    const url = `${apiUrl}?Step=${step}&amp;amp;Name=${iFlowName}`;&lt;BR /&gt;
&lt;BR /&gt;
    // Fetch data using the GET request&lt;BR /&gt;
    fetch(url, {&lt;BR /&gt;
        method: 'GET',&lt;BR /&gt;
        headers: {&lt;BR /&gt;
            'ApiKey': apiKey&lt;BR /&gt;
        }&lt;BR /&gt;
    })&lt;BR /&gt;
        .then(response =&amp;gt; {&lt;BR /&gt;
            if (!response.ok) {&lt;BR /&gt;
                throw new Error('Network response was not ok');&lt;BR /&gt;
            }&lt;BR /&gt;
            return response.text();&lt;BR /&gt;
            // alert(response.text())&lt;BR /&gt;
        })&lt;BR /&gt;
        .then(data =&amp;gt; {&lt;BR /&gt;
            // Handle the response as needed (e.g., display a confirmation message)&lt;BR /&gt;
            const resp2 = data;&lt;BR /&gt;
            alert(resp2);&lt;BR /&gt;
            console.log('iFlow deleted:', data);&lt;BR /&gt;
            &lt;BR /&gt;
        })&lt;BR /&gt;
        .catch(error =&amp;gt; {&lt;BR /&gt;
            const resp3 = 'Error deleting iFlow: ${error}';&lt;BR /&gt;
            alert(resp3);&lt;BR /&gt;
            console.error('Error deleting iFlow:', error);&lt;BR /&gt;
        });&lt;BR /&gt;
}&lt;BR /&gt;
            // Function to filter the table based on the search input&lt;BR /&gt;
            function filterTable() {&lt;BR /&gt;
                const searchInput = document.getElementById("searchInput");&lt;BR /&gt;
                const filterText = searchInput.value.trim().toUpperCase();&lt;BR /&gt;
                const table = document.getElementById("dataTable");&lt;BR /&gt;
                const rows = table.getElementsByTagName("tr");&lt;BR /&gt;
&lt;BR /&gt;
                for (let i = 1; i &amp;lt; rows.length; i++) { // Start from index 1 to skip header row&lt;BR /&gt;
                    const cells = rows[i].getElementsByTagName("td");&lt;BR /&gt;
                    let matchFound = false;&lt;BR /&gt;
&lt;BR /&gt;
                    // Only search in the first column (iFlow Name)&lt;BR /&gt;
                    const textValue = cells[0].textContent || cells[0].innerText;&lt;BR /&gt;
&lt;BR /&gt;
                    // Perform a partial search (check if the text contains the filter text)&lt;BR /&gt;
                    if (textValue.toUpperCase().includes(filterText)) {&lt;BR /&gt;
                        matchFound = true;&lt;BR /&gt;
                    }&lt;BR /&gt;
&lt;BR /&gt;
                    if (matchFound) {&lt;BR /&gt;
                        rows[i].style.display = "";&lt;BR /&gt;
                    } else {&lt;BR /&gt;
                        rows[i].style.display = "none";&lt;BR /&gt;
                    }&lt;BR /&gt;
                }&lt;BR /&gt;
            }&lt;BR /&gt;
&lt;BR /&gt;
            // Function to make the GET request and populate the table&lt;BR /&gt;
            function loadTableData() {&lt;BR /&gt;
                // Define the URL and headers for the GET request&lt;BR /&gt;
                const apiUrl = '${apiUrl}?Step=ScheduledTraces';&lt;BR /&gt;
                const apiKey = '${apiKey}';&lt;BR /&gt;
&lt;BR /&gt;
                // Fetch data using the GET request&lt;BR /&gt;
                fetch(apiUrl, {&lt;BR /&gt;
                    method: 'GET',&lt;BR /&gt;
                    headers: {&lt;BR /&gt;
                        'ApiKey': apiKey&lt;BR /&gt;
                    }&lt;BR /&gt;
                })&lt;BR /&gt;
                    .then(response =&amp;gt; {&lt;BR /&gt;
                        if (!response.ok) {&lt;BR /&gt;
                            throw new Error('Network response was not ok');&lt;BR /&gt;
                        }&lt;BR /&gt;
                        return response.text();&lt;BR /&gt;
                    })&lt;BR /&gt;
                    .then(data =&amp;gt; {&lt;BR /&gt;
                        // Parse the XML response&lt;BR /&gt;
                        const parser = new DOMParser();&lt;BR /&gt;
                        const xmlDoc = parser.parseFromString(data, 'text/xml');&lt;BR /&gt;
                        const iFlows = xmlDoc.querySelectorAll('iFlow');&lt;BR /&gt;
&lt;BR /&gt;
                        // Populate the table with data&lt;BR /&gt;
                        const tableBody = document.getElementById('dataBody');&lt;BR /&gt;
                        tableBody.innerHTML = ''; // Clear existing rows&lt;BR /&gt;
&lt;BR /&gt;
                        iFlows.forEach(iFlow =&amp;gt; {&lt;BR /&gt;
                            const iFlowName = iFlow.querySelector('iFlowName').textContent;&lt;BR /&gt;
                            const startDate = iFlow.querySelector('StartDate').textContent;&lt;BR /&gt;
                            const startTime = iFlow.querySelector('StartTime').textContent;&lt;BR /&gt;
                            const endDate = iFlow.querySelector('EndDate').textContent;&lt;BR /&gt;
                            const endTime = iFlow.querySelector('EndTime').textContent;&lt;BR /&gt;
&lt;BR /&gt;
                            // Create a new table row and cells&lt;BR /&gt;
        const row = document.createElement('tr');&lt;BR /&gt;
        const iFlowNameCell = document.createElement('td');&lt;BR /&gt;
        const startDateCell = document.createElement('td');&lt;BR /&gt;
        const startTimeCell = document.createElement('td');&lt;BR /&gt;
        const endDateCell = document.createElement('td');&lt;BR /&gt;
        const endTimeCell = document.createElement('td');&lt;BR /&gt;
        const deleteCell = document.createElement('td'); // Add a cell for the delete button&lt;BR /&gt;
&lt;BR /&gt;
        // Set cell values&lt;BR /&gt;
        iFlowNameCell.textContent = iFlowName;&lt;BR /&gt;
        startDateCell.textContent = startDate;&lt;BR /&gt;
        startTimeCell.textContent = startTime;&lt;BR /&gt;
        endDateCell.textContent = endDate;&lt;BR /&gt;
        endTimeCell.textContent = endTime;&lt;BR /&gt;
&lt;BR /&gt;
        // Create a delete button and set its attributes&lt;BR /&gt;
        const deleteButton = document.createElement('button');&lt;BR /&gt;
        deleteButton.textContent = 'Delete';&lt;BR /&gt;
        deleteButton.classList.add('delete-button'); // Add a class to identify the delete button&lt;BR /&gt;
        deleteButton.addEventListener('click', () =&amp;gt; {&lt;BR /&gt;
            // Call the deleteRow function when the delete button is clicked&lt;BR /&gt;
            deleteRow(row);&lt;BR /&gt;
        });&lt;BR /&gt;
&lt;BR /&gt;
        // Append cells to the row&lt;BR /&gt;
        row.appendChild(iFlowNameCell);&lt;BR /&gt;
        row.appendChild(startDateCell);&lt;BR /&gt;
        row.appendChild(startTimeCell);&lt;BR /&gt;
        row.appendChild(endDateCell);&lt;BR /&gt;
        row.appendChild(endTimeCell);&lt;BR /&gt;
        deleteCell.appendChild(deleteButton); // Append the delete button to the cell&lt;BR /&gt;
        row.appendChild(deleteCell); // Append the delete button cell to the row&lt;BR /&gt;
&lt;BR /&gt;
        // Append the row to the table body&lt;BR /&gt;
        tableBody.appendChild(row);&lt;BR /&gt;
    });&lt;BR /&gt;
&lt;BR /&gt;
                        // After populating the table, call the filter function to show all data&lt;BR /&gt;
                        filterTable();&lt;BR /&gt;
                    })&lt;BR /&gt;
                    .catch(error =&amp;gt; {&lt;BR /&gt;
                        console.error('Error loading table data:', error);&lt;BR /&gt;
                    });&lt;BR /&gt;
            }&lt;BR /&gt;
&lt;BR /&gt;
            // Call the function to load table data when the page loads&lt;BR /&gt;
            window.addEventListener('load', loadTableData);&lt;BR /&gt;
        &amp;lt;/script&amp;gt;&lt;BR /&gt;
        &amp;lt;button onclick="exportTableToExcel()"&amp;gt;Export to Excel&amp;lt;/button&amp;gt;&lt;BR /&gt;
        &amp;lt;P&amp;gt;&amp;lt;/P&amp;gt;&lt;BR /&gt;
&lt;BR /&gt;
        &amp;lt;script&amp;gt;&lt;BR /&gt;
            // Function to export the table data to an Excel file&lt;BR /&gt;
            function exportTableToExcel() {&lt;BR /&gt;
                const table = document.getElementById("dataTable");&lt;BR /&gt;
                const ws = XLSX.utils.table_to_sheet(table);&lt;BR /&gt;
&lt;BR /&gt;
                // Create a new workbook and add the worksheet&lt;BR /&gt;
                const wb = XLSX.utils.book_new();&lt;BR /&gt;
                XLSX.utils.book_append_sheet(wb, ws, "Table Data");&lt;BR /&gt;
&lt;BR /&gt;
                // Save the workbook as an Excel file&lt;BR /&gt;
                XLSX.writeFile(wb, "table_data.xlsx");&lt;BR /&gt;
            }&lt;BR /&gt;
        &amp;lt;/script&amp;gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
There are several javascript codes involved in coding the buttons and tables. All the REST calls are made using the Express application framework, and the CSS is pretty simple, using public bootstrap and custom made layouts.&lt;BR /&gt;
&lt;H3 id="toc-hId-110564380"&gt;SAP HANA Database&lt;/H3&gt;&lt;BR /&gt;
We are using a trial &lt;A href="https://help.sap.com/docs/SAP_HANA_PLATFORM/b3ee5778bc2e4a089d3299b82ec762a7/df0b4d0a3927472b85aed51efbb33c94.html" target="_blank" rel="noopener noreferrer"&gt;SAP HANA Database&lt;/A&gt; instance on Cloud Foundry, and as a prerequisite for this we had to create SAP HANA Schemas &amp;amp; HDI Container + SAP HANA Cloud services.&lt;BR /&gt;
&lt;BR /&gt;
The database is a simple one, without a &lt;A href="https://www.sap.com/documents/2021/07/3241e6fa-f07d-0010-bca6-c68f7e60039b.html" target="_blank" rel="noopener noreferrer"&gt;Data Lake&lt;/A&gt;, in which we created a table in order to store the logs.&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/hana-tab.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center"&gt;SAP HANA Database&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
For testing locally, we used a sample csv in order to generate my hdbcalculationviews and tables.&lt;BR /&gt;
&lt;BR /&gt;
For deployment to Cloud Foundry we used the MTA Module Template to generate the mtar file, and then with mbt build and cf deploy commands we were able to deploy it to Cloud Foundry.&lt;BR /&gt;
&lt;H3 id="toc-hId--85949125"&gt;openAI Chat Completions API&lt;/H3&gt;&lt;BR /&gt;
We have used the API to get suggestions on the errors captured by the scheduled trace. The suggestions are purely as a point of reference, since the generative AI uses public knowledge related common issues and errors.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;{&lt;BR /&gt;
    "model": "gpt-3.5-turbo",&lt;BR /&gt;
    "messages": [&lt;BR /&gt;
        {&lt;BR /&gt;
            "role": "user",&lt;BR /&gt;
            "content": "Write advice for a developer on how to fix this SAP CPI error, maximum ${property.lengthOfResponse} characters: ${in.body}"&lt;BR /&gt;
        }&lt;BR /&gt;
    ]&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center"&gt;Sample request body&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H3 id="toc-hId--282462630"&gt;SAP API Management and SAP Integration Suite&lt;/H3&gt;&lt;BR /&gt;
In order to access SAP Integration Suite endpoints, we had to run the call through an API created with SAP API Management, because we had to cope with the CORS policies.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/07/9_APIManagement.png" /&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center"&gt;API Created&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
All the steps required to do this are listed in&amp;nbsp;&lt;A href="https://developers.sap.com/mission.appgyver-integration-suite.html" target="_blank" rel="noopener noreferrer"&gt;this&lt;/A&gt;&amp;nbsp;tutorial, and it involves creating an API, a Product and generate an APIKey for it.&lt;BR /&gt;
&lt;BR /&gt;
All the REST calls coming from the frontend run through SAP API Management and end up in a Dispatcher that routes the message to the specific iFlow based on the query parameter that contain a step name.&lt;BR /&gt;
&lt;PRE class="language-javascript"&gt;&lt;CODE&gt;const apiUrl = "https://${apiURL}?Step=GetTenantIflowList";&lt;BR /&gt;
                const apiKey = "${APIKEY}";&lt;BR /&gt;
&lt;BR /&gt;
                fetch(apiUrl, {&lt;BR /&gt;
                    method: "GET",&lt;BR /&gt;
                    headers: {&lt;BR /&gt;
                        "ApiKey": apiKey&lt;BR /&gt;
                    },&lt;BR /&gt;
                })&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
&lt;P style="text-align: center"&gt;&lt;EM&gt;Sample code for a REST call&lt;/EM&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/dispatcher.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;SAP Integration Suite Calls Dispatcher&lt;/P&gt;&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;H3 id="toc-hId--478976135"&gt;Email integration&lt;/H3&gt;&lt;BR /&gt;
Besides having the full table available with detailed errors, we have added the functionality of sending an email containing all the neccesary details for solving and identifying the issue to a list of recipients. We thought this application could be used by a functional consultant that has no technical knowledge to solve the SAP Integration Suite issue, and it would be helpful for him to send the details to a developer that has the proper knowledge to fix it, so we used the public Gmail SMTP to send mails. Below is a screenshot with one of the emails sent by the application.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/10/mail.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
&lt;P class="image_caption" style="text-align: center;font-style: italic"&gt;Email sent by the application&lt;/P&gt;&lt;BR /&gt;
&lt;BR /&gt;
&lt;H2 id="toc-hId--804572359"&gt;&lt;/H2&gt;&lt;BR /&gt;
&lt;H2 id="toc-hId--653831507"&gt;Conclusions&lt;/H2&gt;&lt;BR /&gt;
All these functionalities we have created would help not only the integration developers, but also functional consultants. The tool can be really helpful in UAT phases as well, since you can store indefinitely the step contents and be able to access all the data that is flowing through the integration artifacts.&lt;BR /&gt;
&lt;BR /&gt;
Of course, it might have some limitations regarding performace, since we used some dummy artifacts that are relatively small in size and do not deal with huge payloads, but in time it might be tweaked in a way that you could control what is being saved, what steps to watch and what headers/properties to log.&lt;BR /&gt;
&lt;BR /&gt;
I hope you liked the article and feel free to reply with any suggestions here or on in the &lt;A href="https://answers.sap.com/tags/67837800100800006801" target="_blank" rel="noopener noreferrer"&gt;SAP Integration Suite&lt;/A&gt;&amp;nbsp;Question section.&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Thank you !</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-integration-suite-enhanced-monitoring/ba-p/13577830"/>
    <published>2023-10-19T20:36:25+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-help-shorty-html5-configuration-issue-quot-failed-to-get-metadata/ba-p/13573770</id>
    <title>SAP BTP Help Shorty - HTML5 Configuration issue "Failed to get Metadata - 400"</title>
    <updated>2023-11-30T14:06:35+01:00</updated>
    <author>
      <name>NilsJanen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/157600</uri>
    </author>
    <content>Hello fellow developers,&lt;BR /&gt;
&lt;BR /&gt;
this will be another quick help blog post. I did not find any information for this error and I hope this might help someone else waste less time than me.&lt;BR /&gt;
&lt;BR /&gt;
I recently redeployed a SAPUI5 MTA to the space it has been in before. The changes included the alteration of the xsappname in the xs-security.json. In any way, there was some change that altered the UAA properties of the MTA.&lt;BR /&gt;
&lt;BR /&gt;
After the redoyplement, nothing was working and this shown as a warning:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/app_repo_warning-2.png" /&gt;&lt;/P&gt;&lt;BR /&gt;
I tried everything in my toolbox: Redeploying with --delete-service flag, manual deletion of the instances and so on and so forth.&lt;BR /&gt;
&lt;BR /&gt;
Some time later, I rechecked the error message and decided to take a look at the UAA properties in the mta.yaml.&lt;BR /&gt;
&lt;BR /&gt;
Lo and behold, there was one tiny setting which I think came from the template I used:&lt;BR /&gt;
&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/11/existing_policy.png" height="40" width="1136" /&gt;&lt;/P&gt;&lt;BR /&gt;
If the property existing_destination_policy is set to ignore, the deployment will not overwrite the old properties with new values. It has to be set to update in order to set new values.&lt;BR /&gt;
&lt;BR /&gt;
More Information can be found here: &lt;A href="https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/create-destinations-using-mta-descriptor" target="test_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/create-destinations-using-mta-descriptor&lt;/A&gt;&lt;BR /&gt;
&lt;BR /&gt;
So in conclusion: If you ever want to change something, make sure the changes are applied to the target.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-help-shorty-html5-configuration-issue-quot-failed-to-get-metadata/ba-p/13573770"/>
    <published>2023-11-30T14:06:35+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/integrate-app-into-work-zone-from-a-different-subaccount/ba-p/13584425</id>
    <title>Integrate app into Work Zone from a different subaccount</title>
    <updated>2024-01-29T10:26:44.538000+01:00</updated>
    <author>
      <name>JulianKuipers</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/16502</uri>
    </author>
    <content>&lt;P&gt;I'm Julian Kuipers, a Full Stack SAP Developer in The Netherlands, currently working with a company called INNOV8iON. We focus on creating new and better ways to use SAP.&lt;/P&gt;&lt;H2 id="toc-hId-964879464"&gt;Introduction&lt;/H2&gt;&lt;P&gt;Not long ago, I was given a task that looked easy at first but turned out to be quite a puzzle. My job was to integrate a custom Fiori application, which has its own standalone approuter, into SAP Build Work Zone, standard edition. The tricky part was that the Fiori app and the SAP Build Work Zone were in different subaccounts, which made things more complicated.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="JulianKuipers_0-1706515611523.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/54473iD6889CC3BDC751BC/image-size/medium?v=v2&amp;amp;px=400" role="button" title="JulianKuipers_0-1706515611523.png" alt="JulianKuipers_0-1706515611523.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To figure out how to do this, I first looked at the official SAP instructions, which you can find here: &lt;A href="https://help.sap.com/docs/build-work-zone-standard-edition/sap-build-work-zone-standard-edition/manual-integration-of-apps?locale=en-US" target="_blank" rel="noopener noreferrer"&gt;SAP Help Portal.&lt;/A&gt; These instructions are pretty good, but I found they didn't cover everything I needed to know.&lt;/P&gt;&lt;P&gt;So, I came up with my own plan to make it work:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Turn on something called allowListService in the Fiori app: This is like saying, "It's okay for this app to be used in the SAP Build Work Zone."&lt;/LI&gt;&lt;LI&gt;Use whitelistService in the standalone approuter: This makes sure the router activates the whitelist-service.&lt;/LI&gt;&lt;LI&gt;Add specific user-provided variables to the app: This will add Work Zone as trusted URI to embed this app as an iFrame.&lt;/LI&gt;&lt;LI&gt;Make a trusted connection in the subaccount for the app: This is like making sure the app has a secure line to talk on.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I also learned a couple of important tips along the way:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SAP says it's best if the app and the Work Zone use the same custom domain. This makes a lot of the setup simpler because you don't have to do extra steps to make them work together.&lt;/LI&gt;&lt;LI&gt;The way I made it possible for users to log in isn't the fanciest solution, but it works well if you're only using one IDP (Identity Provider).&lt;/LI&gt;&lt;LI&gt;This project really made me think and helped me learn a lot about how SAP works and how to make different parts of it work together. I wanted to share what I learned so others who might be trying to do the same thing can find it a bit easier.&lt;/LI&gt;&lt;/UL&gt;&lt;H2 id="toc-hId-768365959"&gt;Solution&lt;/H2&gt;&lt;P&gt;Following the steps outlined in the SAP Documentation, along with the additional instructions I’ll provide, will ensure a smooth integration process for your custom Fiori application into SAP Build Work Zone. Let's break down these steps for clarity and implementation ease:&lt;/P&gt;&lt;H3 id="toc-hId-700935173"&gt;1. Activate the allowListService in the Custom Fiori App&lt;/H3&gt;&lt;P&gt;To activate the allowlist service in your application, you'll need to insert a specific script before the sap-ui-bootstrap code in your HTML file. This script configures the allowlist service, enabling the application to determine if it's allowed to run within a given frame. Here's the code snippet you should place:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;script&amp;gt; 
    window["sap-ui-config"] = { 
        allowlistService: '/allowlist/service', 
        frameOptions: 'trusted', 
        frameOptionsConfig: { 
            callback: function (bSuccess) { 
	        if (bSuccess) { 
	            console.log("App is allowed to run!"); 
	        } else { 
	            console.error("App is not allowed to run!"); 
	        } 
            } 
        } 
    }; 
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;index.html&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This snippet ensures your application checks if it's permitted to run, based on the allowlist service configuration. For further details, visit the &lt;A href="https://sapui5.hana.ondemand.com/sdk/#/topic/62d9c4d8f5ad49aa914624af9551beb7" target="_blank" rel="noopener nofollow noreferrer"&gt;SAPUI5 SDK Documentation&lt;/A&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-504421668"&gt;2. Activate the whitelistService in the Standalone Approuter&lt;/H3&gt;&lt;P&gt;In your standalone approuter configuration, add the following segment to activate the whitelistService, pointing to the allowlist service endpoint:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;"whitelistService": { 
    "endpoint": "/allowlist/service" 
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;xs-app.json&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This configuration enables your approuter to utilize the whitelist service, ensuring it recognizes and permits communications from your Fiori application. For comprehensive instructions, refer to the &lt;A href="https://help.sap.com/docs/SAP_HANA_PLATFORM/4505d0bdaf4948449b7f7379d24d0f0d/5f77e58ec01b46f6b64ee1e2afe3ead7.html#whitelistservice" target="_blank" rel="noopener noreferrer"&gt;SAP Documentation&lt;/A&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-307908163"&gt;3. Add User-Provided Variables to the Application&lt;/H3&gt;&lt;P&gt;To allow the SAP Work Zone to embed your application in an iFrame securely, you must specify certain variables and HTTP headers. This involves declaring a whitelist of origins that are permitted to frame your content without risking click-jacking attacks. Here's how you configure it:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;properties:
    CJ_PROTECT_WHITELIST: '[{"host":"&amp;lt;WORKZONE_RUNTIME_HOST&amp;gt;"}]' 
    httpHeaders: '[{"Content-Security-Policy":"frame-ancestors &amp;lt;WORKZONE_RUNTIME_HOST&amp;gt;"}]'&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;mta.yaml&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This configuration ensures that your application can only be framed by the SAP Work Zone, enhancing security and compliance with SAP's guidelines. More details on these settings can be found in the &lt;A href="https://help.sap.com/docs/hana-cloud-database/sap-hana-cloud-sap-hana-database-developer-guide-for-cloud-foundry-multitarget-applications-sap-web-ide-full-stack/application-router-environment-variables#loio0aac697f0cf7444193ed5eb0fc6e5bd0__section_nrz_hgn_mv" target="_blank" rel="noopener noreferrer"&gt;SAP Developer Guide&lt;/A&gt;.&lt;/P&gt;&lt;H3 id="toc-hId-111394658"&gt;4. Adding Work Zone Host as a Trusted Domain&lt;/H3&gt;&lt;P&gt;The last piece of our integration puzzle is to ensure that the Work Zone runtime host is recognized as a trusted domain by the XSUAA service of the Fiori app. This step is vital for embedding the app securely within the SAP Build Work Zone environment, ensuring that authorization and authentication flows are handled correctly without compromising security.&lt;/P&gt;&lt;P&gt;To accomplish this, you'll need to follow the guidelines outlined by SAP for configuring trusted domains specifically for the SAP Authorization and Trust Management service. The detailed steps for this configuration can be found in the SAP documentation: &lt;A href="https://help.sap.com/docs/btp/sap-business-technology-platform/configure-trusted-domains-for-sap-authorization-and-trust-management-service" target="_blank" rel="noopener noreferrer"&gt;Configure Trusted Domains for SAP Authorization and Trust Management Service&lt;/A&gt;. This resource provides a comprehensive guide on how to add your Work Zone host as a trusted domain, ensuring that your custom Fiori app can be securely embedded and accessed within the SAP Build Work Zone.&lt;/P&gt;&lt;P&gt;Implementing these steps will facilitate the integration of your custom Fiori application with SAP Build Work Zone, ensuring both functionality and security are maintained.&lt;/P&gt;&lt;H2 id="toc-hId--214201566"&gt;Conclusion&lt;/H2&gt;&lt;P&gt;As I've journeyed through the process of integrating a custom Fiori application into SAP Build Work Zone, it's clear that while the steps are straightforward once understood, there's a particular aspect of this integration that merits a closer look—the propagation of user login information, especially in contexts where multiple Identity Providers (IDPs) are involved.&lt;/P&gt;&lt;P&gt;This workaround is okay for now if you're just dealing with one IDP. It's not the slickest solution, but it does the job. However, if you're trying to make things work with several IDPs, that's where it gets trickier. If you're stuck in this spot, I found a blog that might just be your lifesaver. It's all about figuring out SAP Cloud Identity Services and making them work with SAP Build Work Zone when you've got multiple IDPs. Check it out right here: &lt;A href="https://blogs.sap.com/2023/08/02/de-mystifying-sap-cloud-identity-services-integration-with-sap-build-work-zone/" target="_blank" rel="noopener noreferrer"&gt;De-mystifying SAP Cloud Identity Services Integration&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Now for some good news—SAP's got our backs and is working on making this whole process a lot easier. They've hinted at some new improvements that are on the way, which you can sneak a peek at in their roadmap right &lt;A href="https://roadmaps.sap.com/board?PRODUCT=73554900100800003081&amp;amp;range=CURRENT-LAST#;INNO=3F83C264AF571EDE85B57541EEC34FB4" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;. I'm all in for seeing how they're going to make our lives simpler in the near future.&lt;/P&gt;&lt;P&gt;So, as we wrap this up, I just want to say it's been quite the ride figuring out all these SAP integration quirks. The thought of SAP making things smoother down the road is something I'm really looking forward to. In the meantime, we've got our workarounds and the helpful tips we've shared along the way.&lt;/P&gt;&lt;P&gt;Thanks for sticking with me through this journey. Here's to making things work and looking forward to easier days ahead!&lt;/P&gt;&lt;P&gt;Kind regards,&lt;/P&gt;&lt;P&gt;Julian Kuipers&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/integrate-app-into-work-zone-from-a-different-subaccount/ba-p/13584425"/>
    <published>2024-01-29T10:26:44.538000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/automating-advanced-event-mesh-broker-creation/ba-p/13595187</id>
    <title>Automating Advanced Event Mesh Broker Creation</title>
    <updated>2024-02-08T09:07:53.387000+01:00</updated>
    <author>
      <name>MarianVatafu</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/864725</uri>
    </author>
    <content>&lt;H1 id="toc-hId-836747362"&gt;Introduction&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The need to reduce costs associated with operating and maintaining an active message broker led to the creation of a tool that automates the generation and configuration any time the need for asynchronous event-based messages arises.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;This article will showcase a method of creating an event broker in &lt;A href="https://help.sap.com/docs/SAP_ADVANCED_EVENT_MESH" target="_self" rel="noopener noreferrer"&gt;Advanced Event Mesh&lt;/A&gt; by leveraging the REST endpoints provided by&amp;nbsp;&lt;A href="https://help.pubsub.em.services.cloud.sap/Cloud/ght_use_rest_api_services.htm" target="_self" rel="nofollow noopener noreferrer"&gt;Solace&lt;/A&gt; and&amp;nbsp;&lt;A href="https://docs.solace.com/Admin/SEMP/Using-SEMP.htm" target="_self" rel="nofollow noopener noreferrer"&gt;SEMP configuration&lt;/A&gt;. The solution will allow the system to request a broker creation, monitor the status, re-generate the queues and topics and extract the endpoints for sending or receiving data. Besides that, a UI has been set up that simplifies the broker configuration and allows users to persist or modify configurations.&lt;/P&gt;&lt;H2 id="toc-hId-769316576"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H1 id="toc-hId-443720352"&gt;Scenario Overview&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P data-unlink="true"&gt;All the necessary steps for broker creation are done in SAP Integration Suite using multiple iFlow artifacts for each process step, &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/decoupling-via-jms-queue?q=JMS%20Queues" target="_self" rel="noopener noreferrer"&gt;JMS Queues&lt;/A&gt; for handling connection errors, timeouts and message routing, Datastore for saving broker configurations and a main page that acts as a user interface for setting up everything.&lt;/P&gt;&lt;P data-unlink="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-247206847"&gt;Architecture Overview&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Architecture.png" style="width: 947px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60631i7F32250BAC014F9A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Architecture.png" alt="Architecture.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 1 - Architecture Overview&lt;/EM&gt;&lt;/P&gt;&lt;H1 id="toc-hId-50693342"&gt;UI Configuration Page&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="UIPAGE.png" style="width: 958px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60634iE8C3CB8E7FCF595B/image-size/large?v=v2&amp;amp;px=999" role="button" title="UIPAGE.png" alt="UIPAGE.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 2 - UI Configuration Page&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The configuration page is a HTML page exposed as a REST endpoint, containing multiple sections that allow the user to generate new configurations, use existing ones and even check the status of the already-deployed broker creation jobs.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Deployment.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60638iEDF217918FCCE8E4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Deployment.png" alt="Deployment.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 3 - Deployment Page&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;On this page, we can see the status of the active or pending brokers on the cluster. I also added the ability to delete the broker on demand.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId--145820163"&gt;Technical Setup&lt;/H1&gt;&lt;P&gt;The process of creating an event broker has been detailed in the&amp;nbsp;&lt;A href="https://help.pubsub.em.services.cloud.sap/Cloud/ght_use_rest_api_services.htm" target="_self" rel="nofollow noopener noreferrer"&gt;Managing Services with the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;SAP Integration Suite, Advanced Event Mesh&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;REST API&lt;/A&gt; section and it consists of several REST calls in order to create a broker, get the connection details and check the creation status.&lt;/P&gt;&lt;P&gt;The most important parameters that allow us to continue with the next steps are :&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&amp;nbsp;serviceId - the id of the service cluster generated&lt;/LI&gt;&lt;LI&gt;&amp;nbsp;msgVpnName - the internal id of the broker&lt;/LI&gt;&lt;LI&gt;&lt;DIV&gt;&lt;DIV&gt;&lt;SPAN&gt;defaultManagementHostname - the hostname that will be used for queue, topic and rest delivery point creation&lt;/SPAN&gt;&lt;/DIV&gt;&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In order to create an event broker :&lt;/P&gt;&lt;P&gt;HTTP POST&amp;nbsp;&lt;SPAN&gt;&lt;A href="https://api.solace.cloud/api/v0/services" target="_blank" rel="noopener nofollow noreferrer"&gt;https://api.solace.cloud/api/v0/services&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-javascript"&gt;&lt;code&gt;{
   "name": "Broker Name",
   "datacenterId": "&amp;lt;Data Center Id&amp;gt;",
   "serviceClassId":"developer",
   "serviceTypeId": "developer",
   "adminState": "start"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The authentication for this endpoint is made via an authorization token generated in the Cluster Manager.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="token.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60664i9B1907A16E2BD1D3/image-size/large?v=v2&amp;amp;px=999" role="button" title="token.png" alt="token.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 4 - API Token Management&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;In order to create a queue object :&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;HTTP POST https://&amp;lt;defaultManagementHostname&amp;gt;/SEMP/v2/config/msgVpns/&amp;lt;msgVpnId&amp;gt;/queues&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;{
"accessType": "exclusive",
"egressEnabled": true,
"ingressEnabled": true,
"msgVpnName": "&amp;lt;msgVpnId&amp;gt;",
"owner": "all",
"permission": "consume",
"queueName": "&amp;lt;queue-name&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In order to create a topic subscription object :&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;HTTP POST https://&amp;lt;defaultManagementHostname&amp;gt;/SEMP/v2/config/msgVpns/&amp;lt;msgVpnId&amp;gt;/queues/&amp;lt;queue-name&amp;gt;/subscriptions&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;{
"msgVpnName": "&amp;lt;msgVpnId&amp;gt;",
"queueName": "&amp;lt;queue-name&amp;gt;",
"subscriptionTopic": "&amp;lt;topic/name&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In order to create a rest delivery point object :&lt;/P&gt;&lt;P data-unlink="true"&gt;HTTP POST https://&amp;lt;defaultManagementHostname&amp;gt;/SEMP/v2/config/msgVpns/&amp;lt;msgVpnId&amp;gt;/restDeliveryPoints&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-java"&gt;&lt;code&gt;{
    "clientProfileName": "default",
    "enabled": true,
    "msgVpnName": "&amp;lt;msgVpnNameId&amp;gt;",
    "restDeliveryPointName": "&amp;lt;restDeliveryPointId&amp;gt;"
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;If everything is correctly triggered, we should be able to see in the Cluster Manager our newly created broker, and as well in the broker console the queues and topics.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="cluster.png" style="width: 350px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60658iA531855FE1B34772/image-dimensions/350x371?v=v2" width="350" height="371" role="button" title="cluster.png" alt="cluster.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 5 - Cluster Manager&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="msgvpn.png" style="width: 551px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60659i5524C62770D90BB6/image-dimensions/551x267?v=v2" width="551" height="267" role="button" title="msgvpn.png" alt="msgvpn.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&lt;EM&gt;Picture 6 - Queues&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="topics.png" style="width: 637px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60660i6BE492B596763D32/image-dimensions/637x249?v=v2" width="637" height="249" role="button" title="topics.png" alt="topics.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&amp;nbsp;&amp;nbsp;&lt;EM&gt;Picture 7 - Topics subscribed to a queue&lt;/EM&gt;&lt;/P&gt;&lt;H1 id="toc-hId--342333668"&gt;&amp;nbsp;&lt;/H1&gt;&lt;H1 id="toc-hId--538847173"&gt;Adapter for inserting/consuming events&lt;/H1&gt;&lt;P&gt;By using the recently published &lt;A href="https://help.sap.com/docs/integration-suite/sap-integration-suite/advanced-event-mesh-adapter" target="_self" rel="noopener noreferrer"&gt;adapter&lt;/A&gt; for Advanced Event Mesh integrations, we can insert and consume events from our brokers. Below is a sample iFlow artifact that connects to a specific topic and consumes messages from there.&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="sender.png" style="width: 637px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/60666iE01E28DF9AF4A5DC/image-size/large?v=v2&amp;amp;px=999" role="button" title="sender.png" alt="sender.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Picture 8 - iFlow artifact for topic message consumption&lt;/EM&gt;&lt;/P&gt;&lt;H1 id="toc-hId--735360678"&gt;Conclusions&lt;/H1&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Using the SAP Help documentation was the key behind the success, because the product is rather new on the market and we did not really heard of other use cases yet. By following the steps we were able to easily connect two Business Technology Platform products and we were able to leverage event-based integration far more powerful than the traditional &lt;A href="https://help.sap.com/docs/event-mesh?locale=en-US&amp;amp;state=PRODUCTION&amp;amp;version=Cloud" target="_self" rel="noopener noreferrer"&gt;SAP Event Mesh&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;For any questions or suggestions, feel free to post here or in the special&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://community.sap.com/t5/c-khhcw49343/SAP+Internet+of+Things/pd-p/73554900100800002247" target="_self"&gt;Q&amp;amp;A Section&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Thank you!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/automating-advanced-event-mesh-broker-creation/ba-p/13595187"/>
    <published>2024-02-08T09:07:53.387000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/csrf-token-validation-error/ba-p/13636621</id>
    <title>CSRF Token Validation Error</title>
    <updated>2024-03-15T07:00:20.587000+01:00</updated>
    <author>
      <name>NilsJanen</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/157600</uri>
    </author>
    <content>&lt;P&gt;Hello fellow developers,&lt;/P&gt;&lt;P&gt;recently we ran into an issue which we gave us a very hard time.&lt;/P&gt;&lt;H3 id="toc-hId-1118035229"&gt;Scenario&lt;/H3&gt;&lt;P&gt;A UI5 application runs in the #SAP Workzone Standard Edition# and uses the SAP Managed Approuter to connect to the workflow runtime servie as well as a backend SAP Gateway destination with principal propagation.&lt;BR /&gt;Everything worked fine in regards to the workflow requests as well as the GET requests to the Gateway system. What did not work were any requests that required a valid CSRF Token, like POST or UPDATE.&amp;nbsp;&lt;BR /&gt;The app did sent requests with a valid CSRF token to the backend, but the system refused to accept it.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The app worked like this: When it is opened with a certain URL, the app loads some information from the workflow runtime and needs a CSRF token for this. The xs-app.json looked like this:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Fjaoos_1-1710322042391.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/79814i56737B5040265589/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Fjaoos_1-1710322042391.png" alt="Fjaoos_1-1710322042391.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;You can see the route for the workflow runtime as well as the SAP Gateway System and its destination. It was set up just like you would expect to find this on any tutorial.&lt;/P&gt;&lt;H3 id="toc-hId-921521724"&gt;Solution&lt;/H3&gt;&lt;P&gt;We had to set the csrfProtection to false for the SAP Gateway destination.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Fjaoos_2-1710322196769.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/79816i3445A42F6C7EE89A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Fjaoos_2-1710322196769.png" alt="Fjaoos_2-1710322196769.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;With this settings the csrf token for the ODataModel was then issued by the SAP Gateway.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/csrf-token-validation-error/ba-p/13636621"/>
    <published>2024-03-15T07:00:20.587000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/consuming-sap-with-sap-build-apps-web-app-in-sap-build-work-zone-standard/ba-p/13685621</id>
    <title>Consuming SAP with SAP Build Apps - Web App in SAP Build Work Zone, standard edition</title>
    <updated>2024-05-02T03:19:46.516000+02:00</updated>
    <author>
      <name>LudoNoens</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/15040</uri>
    </author>
    <content>&lt;P&gt;This blog post is the fourth in a series of posts that cover the connectivity options available for SAP Build Apps to interface with SAP systems. The series will cover connecting SAP Build Apps with the following:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;CAP-based services&lt;/LI&gt;&lt;LI&gt;S/4HANA systems&lt;/LI&gt;&lt;LI&gt;ABAP systems&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The format of this post is similar to a tutorial. However, I'll provide more comprehensive details, tips and the opportunity for you to provide feedback. Based on the feedback we will be able to adjust and enhance this post and future parts of the series, and might even be able to improve the products involved as well.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H1 id="toc-hId-864457605"&gt;Introduction &lt;/H1&gt;&lt;P&gt;Before we get into the details of setting up connections between SAP Build Apps and SAP Systems, I intend to introduce a couple of SAP technology components in each post that are relevant for the use cases covered in the series.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H2 id="toc-hId-797026819"&gt;SAP Build Work Zone&lt;/H2&gt;&lt;P&gt;SAP Build Work Zone is a digital workplace experience that enables users to build and customise business sites that provide centralised access to business application information from any device.&lt;/P&gt;&lt;P&gt;Key capabilities are:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Quickly create corporate websites providing secure and central access for apps, tasks, notifications, information and communication.&lt;/LI&gt;&lt;LI&gt;Easily connect with SAP and third-party enterprise applications.&lt;/LI&gt;&lt;LI&gt;Provide a personalised and role-based user experience.&lt;/LI&gt;&lt;LI&gt;Provide an extensible framework for development, customisation and branding.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The service is currently available in 2 editions:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Standard edition - this is basically the same as what we previously called the SAP Launchpad service. This is the edition we will use in this blog post. It has a strong focus on integration of business applications.&lt;/LI&gt;&lt;LI&gt;Advanced edition - this is what we previously referred to as the SAP Work Zone service. It includes additional capabilities on top of what is available in the standard edition. The information in this blog post can be applied in this edition as well. You typically subscribe to only one edition. The advanced edition adds capabilities around workspaces, knowledge management and user engagement.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_2-1714381872196.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103095i21AEB1EAB4759B98/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_2-1714381872196.png" alt="LudoNoens_2-1714381872196.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-600513314"&gt;MTAR&lt;/H2&gt;&lt;P&gt;A multitarget application (MTA) is comprised of multiple parts (also referred to as "modules"), created with different technologies and deployed to different targets, but with a single, common lifecycle.&lt;/P&gt;&lt;P&gt;A multitarget application archive (MTAR) is an archive that contains a deployment descriptor, configuration files, and module and resource binaries. The archive follows the JAR file specification. A JAR file is essentially a zip file that contains an optional META-INF directory.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_0-1714474595732.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103853i0DE6AB7E0317A327/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_0-1714474595732.png" alt="LudoNoens_0-1714474595732.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;An example relevant for the use cases in this blog series is an MTAR created in SAP Build Code that contains the Destination, a node.js based CAP service, and a HANA database deployment application for setting up the persistency layer. All are deployed during a single deployment action, for a specific version of the archive.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-274917090"&gt;Use case D : Consume the CAP service with a web app provided in SAP Build Work Zone&lt;/H1&gt;&lt;P&gt;For this use case, we will make use of the previously created basic CAP service in &lt;FONT color="#FF00FF"&gt;&lt;STRONG&gt;SAP Build Code&lt;/STRONG&gt;&lt;/FONT&gt;. In the previous blog post, we have created dedicated mobile apps for the iOS and Android platforms to consume this service with SAP Build Apps. We will now use the exact same UI application to build and deploy a web application to SAP Business Technology Platform. After that, we will configure SAP Build Work Zone&amp;nbsp;to provide access to the application.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H2 id="toc-hId-207486304"&gt;Solution diagram&lt;/H2&gt;&lt;P&gt;Like in the &lt;A title="Consuming SAP with SAP Build Apps - Mobile apps for iOS and Android" href="https://community.sap.com/t5/technology-blogs-by-sap/consuming-sap-with-sap-build-apps-mobile-apps-for-ios-and-android/ba-p/13667638" target="_blank"&gt;previous blog post&lt;/A&gt;, we will start with a quick look into what needs to change in our solution overview to accommodate for web apps. Building upon the solution diagram created earlier, we now add &lt;STRONG&gt;SAP Build Work Zone, standard edition&lt;/STRONG&gt;. The design time environment of SAP Build Apps will deploy the web application to the HTML5 Application Repository service. The application is made available to end users through &lt;STRONG&gt;SAP Build Work Zone&lt;/STRONG&gt;, which is configured separately.&amp;nbsp;End users can access the web app from any device. The web app authenticates with the Identity Authentication service (IAS) and accesses data via a &lt;STRONG&gt;Destination&lt;/STRONG&gt;. Only users who have the correct Roles assigned will be able to access the data provided in the CAP-based data service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_1-1714476179455.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103874iEF07E53A324296B8/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_1-1714476179455.png" alt="LudoNoens_1-1714476179455.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-10972799"&gt;Building the web app in SAP Build Apps&lt;/H2&gt;&lt;P&gt;As the application we have developed so far is actually a cross-platform app, we don't need to change anything in the app itself. We simply need to build it for a different runtime. And for this, we will again make use of the cloud build service we have utilised in the previous blog post.&lt;/P&gt;&lt;P&gt;Starting in SAP Build Apps, navigate to the Launch tab and select Open build service.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103580i19176D7F9385B107/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic.png" alt="Pasted Graphic.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Next, select CONFIGURE for the Web App.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Web App.png" style="width: 200px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103584iE2F9C931B67C7FBA/image-size/small?v=v2&amp;amp;px=200" role="button" title="Web App.png" alt="Web App.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;For the Bundle Settings, select MTAR and click NEXT.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 3.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103634i5FBF73F69CF1D2DA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 3.png" alt="Pasted Graphic 3.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In the Image Assets tab, upload a 32 x 32 pixel icon image (PNG file) for the Favicon and click NEXT.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 4.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103638i59CBC4BBC5F887C4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 4.png" alt="Pasted Graphic 4.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;On the Plugins tab, you can add React Native plugins for your app. For our app you can see a few plugins have been selected by default, based on the functionality we have already added in the app. We can use the default selection in this case and click NEXT.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 5.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103641iD7E728FB352D167C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 5.png" alt="Pasted Graphic 5.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now that we have completed configuring the web app build settings, select BUILD.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt=" BUILD.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103642iA535FA5A8D22815A/image-size/medium?v=v2&amp;amp;px=400" role="button" title=" BUILD.png" alt=" BUILD.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select MTAR and the Client runtime version. Provide a version number for your application. Select BUILD.&lt;/P&gt;&lt;P&gt;Once the build is done, you will be able to download the MTAR file, or simply deploy the MTAR.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Web App.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103643i739B71256A25955C/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Web App.png" alt="Web App.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select DEPLOY MTA.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103644i22158E77B633DB6C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 1.png" alt="Pasted Graphic 1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select the Cloud Foundry API endpoint of your target subaccount. In our case, we will use the same subaccount as the one we have set up in the first blog post of this series. &lt;/P&gt;&lt;P&gt;Log in to Cloud Foundry and to get authorization to perform deployment to SAP Business Technology Platform.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103645i16C4AC1C9E878506/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 2.png" alt="Pasted Graphic 2.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once you've selected your target Cloud Foundry organisation and space, select DEPLOY MTA TO &amp;lt;your space name&amp;gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_0-1714460808947.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103649i08132689A0B2A200/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_0-1714460808947.png" alt="LudoNoens_0-1714460808947.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The deployment process will start and your web application will be deployed to the HTML5 Application Repository Service. You can track the progress in the logs.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_1-1714461015698.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103651i0BF76CF8E94D05FC/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_1-1714461015698.png" alt="LudoNoens_1-1714461015698.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once the deployment finishes, the URL to your application will be shown.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_2-1714461129985.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103654iB4BE9F8A77AF317C/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_2-1714461129985.png" alt="LudoNoens_2-1714461129985.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;When you try to open the URL, you are quite likely greeted with the message "Internal Server Error". Looking into details in your browser's developer tools, you can find a response code 500. This indicates something has not been set up correctly (yet). Not to worry ... we'll fix this in the following steps.&lt;/P&gt;&lt;P&gt;If your subaccount was correctly configured, then you should actually see the web app.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H2 id="toc-hId--185540706"&gt;Provide access to the web app in SAP Build Work Zone&lt;/H2&gt;&lt;P&gt;We are now going configure SAP Build Work Zone. There are multiple ways to access this. In the context of SAP Build, we can start from the SAP Build landing page. On the landing page, select the Create button.&lt;/P&gt;&lt;P&gt;What would you like to do ? Well, we'd like to Build a Business Site !&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_3-1714461673821.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103658i4E87518B850778E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_3-1714461673821.png" alt="LudoNoens_3-1714461673821.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Select Configure Site in Admin Console.&lt;/P&gt;&lt;P&gt;Note that in the screenshot below the tile "Manage Workspages and Workspaces" is marked as 'Not Subscribed'. This is because I am using the standard edition of SAP Build Work Zone, which was subscribed through the "Get started with SAP Build Apps" booster. If you have a subscription to the Advanced Edition, then this tile can be selected as well.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Which site would you like to configure.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103659iAA9CFECDBBED8631/image-size/large?v=v2&amp;amp;px=999" role="button" title="Which site would you like to configure.png" alt="Which site would you like to configure.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Alternatively, if you are not using SAP Build, you can configure SAP Build Work Zone by opening the link in your subaccount's cockpit.&lt;/P&gt;&lt;P&gt;As prerequisite, please check whether your user has the Role &lt;STRONG&gt;Launchpad_Admin&lt;/STRONG&gt; assigned.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Description.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103670i65BEDB5F9A45006A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Description.png" alt="Description.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Once configured (and you might need to log out &amp;amp; log in to activate that Role), navigate to the subscriptions and open the link to SAP Build Work Zone, standard edition.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Subscriptions (7).png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103671i05C5DBDB69CA3C88/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Subscriptions (7).png" alt="Subscriptions (7).png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId--252971492"&gt;SAP Build Work Zone configuration&lt;/H3&gt;&lt;P&gt;Now, let's set up a business site that includes our app. Select Create Site.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 10.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103672i02B982B111FA52B4/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 10.png" alt="Pasted Graphic 10.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Provide a name for the Site and click Create.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Create Site.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103673i5070E08D3640CBFE/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Create Site.png" alt="Create Site.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Navigate to the Content Manager tab and select the Content Explorer button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 12.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103675iF7564FBAF7401889/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 12.png" alt="Pasted Graphic 12.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The Content Explorer will open.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 13.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103676iC005422078CB092D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 13.png" alt="Pasted Graphic 13.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Click on HTML5 Apps to see which apps have been deployed to the HTML5 Application Repository. You will see the app we've created in SAP Builds Apps. Besides that, you will also notice the Launchpad for the products service we've deployed from SAP Build Code.&amp;nbsp;Select the app created and deployed with SAP Build Apps and click the Add button.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 15.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103679iCCEC71C2888AEEAA/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 15.png" alt="Pasted Graphic 15.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Going back to the Content Manager, select the Create button and create a new group. Give the group a name and assign the previously added app to the group.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 16.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103680i78BBD36001D1AC2C/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 16.png" alt="Pasted Graphic 16.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Go back to the Content Manager and select the Everyone Role. Enable the previously selected app to be accessible for everyone. Note that this will give users access to the web app itself. Access to the data service is still limited to those having the Role we have configured in the second blog post of this series.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 17.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103681i95C72FA87AD0FCBD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 17.png" alt="Pasted Graphic 17.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId--449484997"&gt;&amp;nbsp;&lt;/H3&gt;&lt;H3 id="toc-hId--645998502"&gt;Resolving the "Internal Server Error"&lt;/H3&gt;&lt;P&gt;And now for the previously mentioned 500 response code, resulting in "Internal Server Error". This happens when the authentication mechanism for SAP Build Work Zone and SAP Cloud Portal service uses XSUAA, while your subaccount is actually configured to use a custom IdP (IAS). To switch to Identity Authentication, navigate to the Settings, select the Identity Authentication tab and click Enable (please read the notes before doing this, and confirm that you've completed the required trust configuration).&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Pasted Graphic 18.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103682iE407128ADE91B264/image-size/large?v=v2&amp;amp;px=999" role="button" title="Pasted Graphic 18.png" alt="Pasted Graphic 18.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt; &lt;/P&gt;&lt;H2 id="toc-hId--624340369"&gt;Accessing the web app in SAP Build Work Zone&lt;/H2&gt;&lt;P&gt;The link to the site can be found on the Site Directory.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_4-1714466297804.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103703iB33EBA4DF4A656A8/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_4-1714466297804.png" alt="LudoNoens_4-1714466297804.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Depending on how you've configured your site in SAP Build Work Zone, it might look a bit different. But you should have the tile of your app visible on your site.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_5-1714466445212.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103705i4A01EE2CA9E47334/image-size/medium?v=v2&amp;amp;px=400" role="button" title="LudoNoens_5-1714466445212.png" alt="LudoNoens_5-1714466445212.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Clicking on the tile will open our web app. Notice the SAP BTP authentication happening before opening the app. Also note that you can open the URL on any device; on mobile as well as desktop devices.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="2024-04-30_16-59-11 (4).gif" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103730iD744402C3B843F55/image-size/large?v=v2&amp;amp;px=999" role="button" title="2024-04-30_16-59-11 (4).gif" alt="2024-04-30_16-59-11 (4).gif" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;In case you are wondering where the icon ended up: check your web browser's tab.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_3-1714476614589.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/103878iA53B5CCEE81B1F5D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="LudoNoens_3-1714476614589.png" alt="LudoNoens_3-1714476614589.png" /&gt;&lt;/span&gt;&lt;BR /&gt;Alternatively, you can also open the URL provided in SAP Build Apps, or find a link to your app in your subaccount, under the tab HTML5 Applications.&amp;nbsp;&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="LudoNoens_0-1714557961791.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/104351i4B9F402C0A4143CA/image-size/large?v=v2&amp;amp;px=999" role="button" title="LudoNoens_0-1714557961791.png" alt="LudoNoens_0-1714557961791.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--820853874"&gt;Summary – use case D&lt;/H2&gt;&lt;P&gt;In this use case we have built and deployed our cross-platform app as a web app to SAP BTP. Building and deploying the app in the cloud is easy, as you don't need to install any tools on your local development machine.&lt;/P&gt;&lt;P&gt;SAP Build Apps deploys the application to the HTML5 Application Repository service. Using the web app, end users authenticate with IAS. Only users who have the correct Role assigned will be able to access the data provided in the CAP-based data service, which we can access through the BTP Destination.&lt;/P&gt;&lt;P&gt;Access to the app requires configuration of the Identity Authentication in the subaccount.&lt;/P&gt;&lt;P&gt;We have set up a simple business site in SAP Build Work Zone, to provide end-users easy access to the app.&lt;/P&gt;&lt;P&gt;And again, all the above was done without writing a single line of code.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H1 id="toc-hId--723964372"&gt;What's next&lt;/H1&gt;&lt;P&gt;In the &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/consuming-sap-with-sap-build-apps-adding-s-4hana-cloud/ba-p/13695938" target="_blank"&gt;next blog post&lt;/A&gt;, we will continue on the connectivity topic and connect to an S/4HANA system.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/consuming-sap-with-sap-build-apps-web-app-in-sap-build-work-zone-standard/ba-p/13685621"/>
    <published>2024-05-02T03:19:46.516000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/displaying-customer-location-with-custom-html-builder-using-restful/ba-p/13741824</id>
    <title>Displaying Customer Location with Custom HTML Builder Using RESTful Webservice and API</title>
    <updated>2024-06-26T18:14:28.616000+02:00</updated>
    <author>
      <name>Anoop_L</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1463373</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;Hello All,&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In this Blog I would like Exhibit&amp;nbsp;a Scenario Where the RESTful webservice is used to Display SAP Data using MAPS API. In this Blog, Displaying the Location of SAP Entity like Plant, Distribution Center, Warehouse, Vendor Location on Google Maps.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We need to Fetch Latitude and Longitude (Geo Coordinates) information for the given entities and then further we need to pass Geo Coordinates to the Google Map API in an HTML Block, Here I would pass Route as parameter in the URL then will retrieve customer location and display them on Google Map.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier"&gt;&lt;STRONG&gt;&lt;FONT size="5"&gt;API&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;While working with Google Maps API, I’ll be passing locations as Addresses or Co-Ordinates. I need to specify the start of address and end of address. If you have Stopover in between you can also define them as Waypoints. I will pass all the details to the API, and it will process all the rest.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To Use Google Product API, I need to get an API Key. This API key is free up to certain usage Limit. If we go Beyond, we need to pay for licensing. We can Object an API Key ourselves &lt;/SPAN&gt;&lt;A href="https://developers.google.com/maps/documentation/javascript/overview#api_key" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;Obtaining Google Maps API Key&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To Learn More about Google Maps API and Geo Coordinates, we can look up &lt;/SPAN&gt;&lt;A href="https://developers.google.com/maps/documentation/javascript/" target="_blank" rel="noopener nofollow noreferrer"&gt;&lt;SPAN&gt;Google Maps JS API&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier" size="5"&gt;&lt;STRONG&gt;RESTful WS&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;I Would use RESTful Web Service to Expose our data. I Will Build up the response message in HTML containing the JavaScript. The JavaScript code will call&amp;nbsp;Google Maps API with Selected Geo Co-Ordinates.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Within the Handler Method for the RESTful WS,&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Extract the parameter from URL &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Get the Data or Prepare the Data&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Build Up JavaScript and HTML Code&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Send the Response&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For this Scenario I will create a Service ZAL_DEMO in Transaction code SICF and assigned a Handler Class ZCL_AL_DEMO_HANDLER within it and a Standard Interface IF_HTTP_EXTENSION to Handle the HTTP.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;First Step I will Navigate to Transaction SICF&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Screenshot 2024-06-21 121658.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128330i98F6BC79D9805EF2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Screenshot 2024-06-21 121658.png" alt="Screenshot 2024-06-21 121658.png" /&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=""&gt;After Navigating to Transaction SICF we can see the screen Define Service as below, then we need to&amp;nbsp;click on Execute Button&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anoop_L_0-1719295237495.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128336i13BC7AAC709B997D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_0-1719295237495.png" alt="Anoop_L_0-1719295237495.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Anoop_L_1-1719295359829.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128339iE51AD2AAB0E4DC3B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_1-1719295359829.png" alt="Anoop_L_1-1719295359829.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;We can Create a New Node whenever we are creating RESTful WS as we can create&amp;nbsp;different services under that Node. We shouldn’t Use default_host/sap/bc/srt as it required to have SOAMANAGER Configuration, which I will be not using for our Service.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;So, I will place the cursor on desired node and Click on Drop Down&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Default_host---&amp;gt;sap---&amp;gt;bc---&amp;gt;ZAL_DEMO&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_2-1719295770152.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128356iDA7D74AE8A7B33CE/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_2-1719295770152.png" alt="Anoop_L_2-1719295770152.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_3-1719295837933.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128357i7FC1CDD0D6CAD63F/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_3-1719295837933.png" alt="Anoop_L_3-1719295837933.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;I will Right click on “bc” and create a Sub-Element, Further I will Enter the name of the Service in Next Popup. In the subsequent screen I’ll provide the Description.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_4-1719295891204.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128360i76E822B98B571870/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_4-1719295891204.png" alt="Anoop_L_4-1719295891204.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_5-1719295918441.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128362iE97F772FDE973AD2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_5-1719295918441.png" alt="Anoop_L_5-1719295918441.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;Next, I’ll Provide the Necessary Credentials in Logon Data Tab like Description, Client which I’ll be working on, User ID and Password.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_6-1719295954052.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128363i5FCAA5901D8AA85A/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_6-1719295954052.png" alt="Anoop_L_6-1719295954052.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;In the Handler Tab I’ll assign a custom class which would be used to handle the request coming from the web. This class should Implement the standard Interface IF_HTTP_EXTENSION and to gain access of the request and also required method.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_7-1719295994400.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128364i82A8389320E8B9D9/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_7-1719295994400.png" alt="Anoop_L_7-1719295994400.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;Now I’ll add the Interface IF_HTTP_EXTENSION in my Handler class and Implement the Method.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_8-1719296032698.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128365i4D359FE412427264/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_8-1719296032698.png" alt="Anoop_L_8-1719296032698.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_9-1719296068205.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128366i87D6BC343EB611C5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_9-1719296068205.png" alt="Anoop_L_9-1719296068205.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier" size="5"&gt;&lt;STRONG&gt;HTML Build&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For HTML Body we can load our template in Transaction SMW0 &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_10-1719296146496.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128367iD9246F304594C597/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_10-1719296146496.png" alt="Anoop_L_10-1719296146496.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;But I Have chose to Manually Build Utility&amp;nbsp;HTML class within ABAP. This utility wraps the logic for building HTML Tags and string manipulation within itself for simple client access.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;---&amp;gt; Template with &lt;/SPAN&gt;&lt;STRONG&gt;&lt;I&gt;&lt;SPAN&gt;Static Data&lt;/SPAN&gt;&lt;/I&gt;&lt;/STRONG&gt;&lt;SPAN&gt; = like Main CSS, Headers, Table Headers&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;---&amp;gt; Place Holders for &lt;/SPAN&gt;&lt;STRONG&gt;&lt;I&gt;&lt;SPAN&gt;Dynamic Data &lt;/SPAN&gt;&lt;/I&gt;&lt;/STRONG&gt;&lt;SPAN&gt;= Table Details&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;CREATE ELEMNT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – Create any HTML element, Here I need to pass HTML Tag as Parameter. This should be the very first to get called after object Instantiation.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;ADD_ATT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – Add Attribute to a HTML Tag like CSS class, style, ID &lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;ADD_INNER_HTML&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – Add Inner HTML to the Tag, Here I’ll specify the HTML Content which is visible on the Document like text of link on Tag&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;APPEND_CHILD&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – Append HTML object to parent HTML object like creating a &amp;lt;P&amp;gt; Tag within &amp;lt;DIV&amp;gt; Tag&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;GET_HTML&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – This Method will return the HTML Text. Method Traverse through all child Nodes of any Given Node. Method is based on Composite Design Pattern, So I need to call this method for my Parent or Root Node If I need to get any specific HTML, I can call it for any Node.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;I Will create 3 Private Attributes which can be accessed through above methods.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;TAG&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – This can contain type of the tag like &amp;lt;DIV&amp;gt; which is set by CREATE_ELEMNT.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;INNER_HTML&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – This contains the Visible text of the HTML Tag set by ADD_INNER_HTML&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;ATTR &lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt;– Table containing pair of with name of attribute and a value&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;SPAN&gt;CHILDREN&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN&gt; – Table Containing all Child Nodes for a given node.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Now I’ll Create a Global Class with the Above Methods and Attributes.&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;METHODS&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_11-1719296309156.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128368i95C9939184811FD2/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_11-1719296309156.png" alt="Anoop_L_11-1719296309156.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;ATTRIBUTES&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_12-1719296351535.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128369iA49A1E591954D2E3/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_12-1719296351535.png" alt="Anoop_L_12-1719296351535.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_13-1719296381273.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128370iF9B1AB3DAFD6BD1B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_13-1719296381273.png" alt="Anoop_L_13-1719296381273.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_0-1719379026212.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128769i9C127622E3922A64/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_0-1719379026212.png" alt="Anoop_L_0-1719379026212.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;METHOD IMPLEMENTATION&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_15-1719296457098.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128372iA37A6E47F0086A3D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_15-1719296457098.png" alt="Anoop_L_15-1719296457098.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_16-1719296482903.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128373i12C39F9B075E0B1D/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_16-1719296482903.png" alt="Anoop_L_16-1719296482903.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_17-1719296508895.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128374i4688D30189D030A5/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_17-1719296508895.png" alt="Anoop_L_17-1719296508895.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_18-1719296535182.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128375i43482883DE55F98E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_18-1719296535182.png" alt="Anoop_L_18-1719296535182.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_20-1719296580803.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128377i639703B7BF5192A0/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_20-1719296580803.png" alt="Anoop_L_20-1719296580803.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_21-1719296605557.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128378i7115C6B82B65AB4B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_21-1719296605557.png" alt="Anoop_L_21-1719296605557.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Preference in Local Class&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS lcl_html DEFINITION.
  PUBLIC SECTION.
   METHODS : create_elemnt IMPORTING tag TYPE string,
             add_att IMPORTING attr TYPE string
                                     val TYPE string,
             add_inner_html IMPORTING val TYPE string,
             append_child IMPORTING io_tag TYPE REF TO lcl_html,
             get_html RETURNING VALUE(rv_string) TYPE string.

  PRIVATE SECTION.
   DATA : tag TYPE string.
   DATA : inner_html TYPE string.
   TYPES : BEGIN OF ty_attr,
           attr TYPE string,
           val  TYPE string,
           END OF ty_attr.
   DATA : attrs TYPE STANDARD TABLE OF ty_attr.
   DATA : children TYPE STANDARD TABLE OF REF TO lcl_html.

ENDCLASS.

CLASS lcl_html IMPLEMENTATION.

METHOD create_elemnt.
  me-&amp;gt;tag = tag.
ENDMETHOD.

METHOD append_child.
  APPEND io_tag TO me-&amp;gt;children.
ENDMETHOD.

METHOD add_att.
  DATA : ls_attr LIKE LINE OF me-&amp;gt;attrs.

  ls_attr-attr = attr.
  ls_attr-val = val.

  APPEND ls_attr TO me-&amp;gt;attrs.
ENDMETHOD.

METHOD add_inner_html.
  me-&amp;gt;inner_html = val.
ENDMETHOD.

METHOD get_html.
  DATA : lv_string TYPE string.
  DATA : lv_attr_val TYPE string.
  DATA : ls_attr LIKE LINE OF me-&amp;gt;attrs.
  DATA : lo_child TYPE REF TO lcl_html.
  DATA : lv_child_html TYPE string.

*opening bracket

    lv_string = |&amp;lt;{ me-&amp;gt;tag }|.

  LOOP AT me-&amp;gt;attrs INTO ls_attr.

    lv_attr_val = |{ ls_attr-attr }='{ ls_attr-val }'|.

    lv_string = |{ lv_string } { lv_attr_val }|.

  ENDLOOP.

    lv_string = |{ lv_string }&amp;gt;|.

*Inner HTML

    lv_string = |{ lv_string }{ me-&amp;gt;inner_html }|.

*Child

  LOOP AT me-&amp;gt;children INTO lo_child.
    lv_child_html = lo_child-&amp;gt;get_html( ).
    lv_string = |{ lv_string }{ lv_child_html }|.
    CLEAR lv_child_html.
  ENDLOOP.

*Closing
     lv_string = |{ lv_string }&amp;lt;/{ me-&amp;gt;tag }&amp;gt;|.

*Back the HTML

     rv_string = lv_string.

ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT size="5"&gt;&lt;STRONG&gt;&lt;FONT face="courier new,courier"&gt;&lt;SPAN class=""&gt;IMPLEMENTATION&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;In this Implementation part I'll Use the HTML Builder Class in IF_HTTP_EXTENSION~HANDLE_REQUEST Method of my Handler Class ZCL_AL_DEMO_HANDLER.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;DATA:
  lv_path TYPE STRING,
  lv_cdata TYPE STRING,
  lv_param TYPE STRING.

  DATA: lt_request TYPE STANDARD TABLE OF STRING.
  DATA: lv_route TYPE char10.

* get the request attributes
  lv_path = server-&amp;gt;request-&amp;gt;get_header_field( NAME = '~path_info' ).
  SHIFT lv_path LEFT BY 1 PLACES.
  SPLIT lv_path AT '/' INTO TABLE lt_request.
  READ TABLE lt_request INTO lv_param INDEX 1.

* Get Customer associated to ROute
* Get Geo Codes for those customers
  TYPES: BEGIN OF lty_geo,
           kunnr TYPE kna1-kunnr,
           lon   TYPE STRING,
           lat   TYPE STRING,
         END   OF lty_geo.
  DATA: li_geo TYPE STANDARD TABLE OF lty_geo.
  DATA: lwa_geo LIKE LINE OF li_geo.

*  DEFINE append_data.
*    lwa_geo-kunnr = &amp;amp;1.
*    lwa_geo-lon = &amp;amp;2.
*    lwa_geo-lat = &amp;amp;3.
*    APPEND lwa_geo TO li_geo.
*  END-OF-DEFINITION.
*
*  append_data: '1001' '33.042342' '-96.768866',
*               '1002' '33.057954' '-96.772127',
*               '1003' '33.060364' '-96.796782',
*               '1004' '33.030794' '-96.795516',
*               '1005' '33.027699' '-96.790152',
*               '1006' '33.027771' '-96.768866'.

  li_geo = value #( ( kunnr = '1001' lon = '33.042342' lat = '-96.768866' )
                    ( kunnr = '1002' lon = '33.057954' lat = '-96.772127' )
                    ( kunnr = '1003' lon = '33.060364' lat = '-96.796782' )
                    ( kunnr = '1004' lon = '33.030794' lat = '-96.795516' )
                    ( kunnr = '1005' lon = '33.027699' lat = '-96.790152' )
                    ( kunnr = '1006' lon = '33.027771' lat = '-96.768866' ) ).

* Build up JavaScript
  DATA: lv_tot  TYPE i.
  DATA: lv_from TYPE i.
  DATA: lv_to   TYPE i.
  DATA: lv_start TYPE STRING.
  DATA: lv_end   TYPE STRING.
  DATA: lv_wp     TYPE STRING,
        lv_pair   TYPE STRING,
        lv_iw     TYPE STRING.

  lv_tot = LINES( li_geo ).
  IF lv_tot GT 2.
    lv_from = 2.
    lv_to   = lv_tot - 1.
  ENDIF.

* start / end point
  READ TABLE li_geo INTO lwa_geo INDEX 1.
  CONCATENATE 'var startpoint = new google.maps.LatLng('
    lwa_geo-lon ',' lwa_geo-lat ');' INTO lv_start.
* Info window
  lv_iw = 'var infoWindow;'.
  CONCATENATE
    '    infoWindow = new google.maps.InfoWindow();'
    '    infoWindow.setOptions({'
    '        content: "&amp;lt;div&amp;gt;First Customer to Visit :' lwa_geo-kunnr '&amp;lt;/div&amp;gt;",'
    '        position: startpoint,'
    '    });'
    '    infoWindow.open(map); '
    INTO lv_iw.

  READ TABLE li_geo INTO lwa_geo INDEX lv_tot.
  CONCATENATE 'var endpoint = new google.maps.LatLng('
    lwa_geo-lon ',' lwa_geo-lat ');' INTO lv_end.
  CONCATENATE
    lv_iw
    '    infoWindow = new google.maps.InfoWindow();'
    '    infoWindow.setOptions({'
    '        content: "&amp;lt;div&amp;gt;Last Customer : ' lwa_geo-kunnr '&amp;lt;/div&amp;gt;",'
    '        position: endpoint,'
    '    });'
    '    infoWindow.open(map); '
    INTO lv_iw.

* Way points
  LOOP AT li_geo INTO lwa_geo FROM lv_from TO lv_to.
    CONCATENATE `location:"` lwa_geo-lon `,` lwa_geo-lat `",`
      INTO lv_pair.
    CONCATENATE
      lv_wp
      ' waypts.push({'
*      '   location:"33.077842,-96.820428&amp;amp;#8243;,'
      lv_pair
      '   stopover:true'
      ' });'
      INTO lv_wp SEPARATED BY cl_abap_char_utilities=&amp;gt;cr_lf.
  ENDLOOP.

  DATA: lv_js TYPE STRING.
  CONCATENATE
    '&amp;lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no" /&amp;gt;'
    '&amp;lt;style type="text/css"&amp;gt;'
    '  html { height: 100% }'
    '  body { height: 100%; margin: 0; padding: 0 }'
    '  #map_canvas { height: 100% }'
    '&amp;lt;/style&amp;gt;'
    '&amp;lt;script src="https://polyfill.io/v3/polyfill.min.js?features=default"&amp;gt;&amp;lt;/script&amp;gt;'
    '&amp;lt;script'
    ' src="http://maps.googleapis.com/maps/api/js?key=API_KEY&amp;amp;sensor=false"&amp;gt;'
    '&amp;lt;/script&amp;gt;'
    '&amp;lt;script type="text/javascript"&amp;gt;'
    'var directionsDisplay;'
    'var directionsService = new google.maps.DirectionsService();'
    'var map;'
    lv_start
    lv_end
    'function initialize() {'
    ' directionsDisplay = new google.maps.DirectionsRenderer();'
    ' var myOptions = {'
    '   zoom: 16,'
    '   mapTypeId: google.maps.MapTypeId.ROADMAP,'
    '   center: startpoint'
    ' }'
    ' map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);'
    ' directionsDisplay.setMap(map);    '
    ' var waypts = [];'
*    ' waypts.push({'
*    '   location:"33.077842,-96.820428",'
*    '   stopover:true'
*    ' });'
    lv_wp
    ' console.log(waypts);'
    ' var request = {'
    '   origin:startpoint,'
    '     destination:endpoint,'
    '   waypoints: waypts,'
    '   optimizeWaypoints: true,'
    '   travelMode: google.maps.TravelMode.DRIVING'
    ' };    '
    ' directionsService.route(request, function(result, status) {'
    '   if (status == google.maps.DirectionsStatus.OK) {'
    '     directionsDisplay.setDirections(result);'
    '   }'
    ' }); '
    lv_iw
*    '    var infoWindow = new google.maps.InfoWindow();'
*    '    infoWindow.setOptions({'
*    '        content: "&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;",'
*    '        position: startpoint,'
*    '    });'
*    '    infoWindow.open(map); '
    '}'
    '&amp;lt;/script&amp;gt;'
    INTO lv_js SEPARATED BY cl_abap_char_utilities=&amp;gt;cr_lf.

* Body HTML
  DATA: lv_body TYPE STRING.
  DATA: lv_html TYPE STRING.

  DATA: lo_body  TYPE REF TO zcl_html.
  DATA: lo_table TYPE REF TO zcl_html.
  DATA: lo_thead TYPE REF TO zcl_html.
  DATA: lo_tbody TYPE REF TO zcl_html.
  DATA: lo_tr    TYPE REF TO zcl_html.
  DATA: lo_td    TYPE REF TO zcl_html.
  DATA: lo_tag   TYPE REF TO zcl_html.
  data: lo_button TYPE REF TO zcl_html.
  DATA: lv_val TYPE STRING.

  CONCATENATE '&amp;lt;html&amp;gt;'
              '&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Route Map&amp;lt;/title&amp;gt;'
              '&amp;lt;style&amp;gt;body{ font: normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif; }&amp;lt;/style&amp;gt;'
              INTO lv_html.

 CREATE OBJECT lo_body.
  lo_body-&amp;gt;create_elemnt( 'body' ).
  lo_body-&amp;gt;add_att( attr = 'onload' val = 'initialize()' ).

  CREATE OBJECT lo_tag.
  lo_tag-&amp;gt;create_elemnt( 'h3' ).
  lo_tag-&amp;gt;add_inner_html( 'Generated Route Map from SAP' ).
  lo_body-&amp;gt;append_child( lo_tag ).

  CONCATENATE 'Route:' lv_route INTO lv_val SEPARATED BY SPACE.
  CREATE OBJECT lo_tag.
  lo_tag-&amp;gt;create_elemnt( 'p' ).
  lo_tag-&amp;gt;add_inner_html( lv_val ).
  lo_body-&amp;gt;append_child( lo_tag ).

  CREATE OBJECT lo_table.
  lo_table-&amp;gt;create_elemnt( 'table' ).
  lo_table-&amp;gt;add_att( attr = 'style' val = 'float:left' ).
  lo_body-&amp;gt;append_child( lo_table ).

  CREATE OBJECT lo_thead.
  lo_thead-&amp;gt;create_elemnt( 'thead' ).
  lo_table-&amp;gt;append_child( lo_thead ).

  CREATE OBJECT lo_tr.
  lo_tr-&amp;gt;create_elemnt( 'tr' ).
  lo_thead-&amp;gt;append_child( lo_tr ).

  CREATE OBJECT lo_td.
  lo_td-&amp;gt;create_elemnt( 'td' ).
  lo_td-&amp;gt;add_inner_html( 'Customer' ).
  lo_tr-&amp;gt;append_child( lo_td ).

  CREATE OBJECT lo_td.
  lo_td-&amp;gt;create_elemnt( 'td' ).
  lo_td-&amp;gt;add_inner_html( 'Long' ).
  lo_tr-&amp;gt;append_child( lo_td ).

  CREATE OBJECT lo_td.
  lo_td-&amp;gt;create_elemnt( 'td' ).
  lo_td-&amp;gt;add_inner_html( 'Lat' ).
  lo_tr-&amp;gt;append_child( lo_td ).

  CREATE OBJECT lo_tbody.
  lo_tbody-&amp;gt;create_elemnt( 'tbody' ).
  lo_table-&amp;gt;append_child( lo_tbody ).

  LOOP AT li_geo INTO lwa_geo.
    CREATE OBJECT lo_tr.
    lo_tr-&amp;gt;create_elemnt( 'tr' ).
    lo_tbody-&amp;gt;append_child( lo_tr ).

    lv_val = lwa_geo-kunnr.
    CREATE OBJECT lo_td.
    lo_td-&amp;gt;create_elemnt( 'td' ).
    lo_td-&amp;gt;add_inner_html( lv_val ).
    lo_tr-&amp;gt;append_child( lo_td ).

    lv_val = lwa_geo-lon.
    CREATE OBJECT lo_td.
    lo_td-&amp;gt;create_elemnt( 'td' ).
    lo_td-&amp;gt;add_inner_html( lv_val ).
    lo_tr-&amp;gt;append_child( lo_td ).

    lv_val = lwa_geo-lat.
    CREATE OBJECT lo_td.
    lo_td-&amp;gt;create_elemnt( 'td' ).
    lo_td-&amp;gt;add_inner_html( lv_val ).
    lo_tr-&amp;gt;append_child( lo_td ).
  ENDLOOP.

  CREATE OBJECT lo_tag.
  lo_tag-&amp;gt;create_elemnt( 'div' ).
  lo_tag-&amp;gt;add_att( attr = 'id' val = 'map_canvas' ).
  lo_tag-&amp;gt;add_att( attr = 'style' val = 'width: 100%, height: 100%' ).
  lo_body-&amp;gt;append_child( lo_tag ).

  lv_body = lo_body-&amp;gt;get_html( ).

  CONCATENATE lv_html lv_js '&amp;lt;/head&amp;gt;' lv_body INTO lv_html.

  lv_cdata = lv_html.

* Send the response back
  server-&amp;gt;response-&amp;gt;set_cdata( DATA = lv_cdata ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;Now I’ll Use this ZCL_AL_DEMO_HANDLER Class in my Service in the Tab Handler List which was&amp;nbsp;created in Transaction SICF.&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_22-1719297256792.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128379i132E6BAAFC5ACA72/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_22-1719297256792.png" alt="Anoop_L_22-1719297256792.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier" size="5"&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;OUTPUT&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="arial,helvetica,sans-serif" size="3"&gt;&lt;SPAN class=""&gt;For the Output Firstly, we should activate the service and then we can Execute URL or Test the Service which generates Nice Representation on Google Map.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_23-1719297398401.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128380iABB135F7938AD80E/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_23-1719297398401.png" alt="Anoop_L_23-1719297398401.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;DIV class=""&gt;&amp;nbsp;&lt;/DIV&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Anoop_L_25-1719297465649.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/128382iD3060EA58C35475B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Anoop_L_25-1719297465649.png" alt="Anoop_L_25-1719297465649.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/displaying-customer-location-with-custom-html-builder-using-restful/ba-p/13741824"/>
    <published>2024-06-26T18:14:28.616000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-gui-html-browser-control-use-f12-development-tools/ba-p/13801432</id>
    <title>SAP GUI HTML / Browser control use F12 Development tools</title>
    <updated>2024-08-21T08:42:08.278000+02:00</updated>
    <author>
      <name>tilo-sap</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/175144</uri>
    </author>
    <content>&lt;P&gt;How to get the F12 browser dev tools open for SAP GUI HTML Browser control?&lt;/P&gt;&lt;P&gt;Works for SAP GUI HTML / Browser control via Edge (based on Chromium) so WebView2.&amp;nbsp;&lt;/P&gt;&lt;P&gt;Create these Win Registry Keys either manual&lt;/P&gt;&lt;P&gt;&lt;FONT face="verdana,geneva" size="2"&gt;&lt;STRONG&gt;Path:&lt;/STRONG&gt;&amp;nbsp; Computer\HKEY_CURRENT_USER\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrowserArguments&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;FONT face="verdana,geneva" size="2"&gt;&lt;STRONG&gt;Name:&lt;/STRONG&gt; saplogon.exe&lt;BR /&gt;&lt;/FONT&gt;&lt;FONT face="verdana,geneva" size="2"&gt;&lt;STRONG&gt;Value&lt;/STRONG&gt; "--auto-open-devtools-for-tabs"&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;or via admin powershell&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;New-Item 'HKCU:\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrowserArguments' -Force | `
 New-ItemProperty -Name saplogon.exe -Value "--auto-open-devtools-for-tabs" -Force&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;I needed it to debug some cookie issue.&lt;/P&gt;&lt;P&gt;btw the user dir and cookies folder is here:&lt;/P&gt;&lt;P&gt;&lt;FONT face="verdana,geneva" size="2"&gt;"C:\Users\tsoadmin\AppData\Local\SAP\SAP GUI\EdgeUserData\EdgeUserDataSystemAware\EBWebView\Default\Network\Cookies"&lt;/FONT&gt; (SQL lite DB) but chrome has exclusive lock on the file so can't be read while open.&lt;/P&gt;&lt;P&gt;Here the full cmd of a running WebView2 instance.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;"C:\Program Files (x86)\Microsoft\EdgeWebView\Application\127.0.2651.105\msedgewebview2.exe" --embedded-browser-webview=1 --webview-exe-name=saplogon.exe --webview-exe-version="800 Final Release - 64bit" --user-data-dir="C:\Users\tsoadmin\AppData\Local\SAP\SAP GUI\EdgeUserData\EdgeUserDataSystemAware\EBWebView" --noerrdialogs --embedded-browser-webview-dpi-awareness=1 --edge-webview-custom-scheme=sap-cust,1,1,sapevent,1,1,saphtmlp,1,1,sapr3,1,1 --enable-features=MojoIpcz,msSingleSignOnOSForPrimaryAccountIsShared --mojo-named-platform-channel-pipe=9484.10484.18364521422129778599

"C:\Program Files (x86)\Microsoft\EdgeWebView\Application\127.0.2651.105\msedgewebview2.exe" --type=renderer --noerrdialogs --user-data-dir="C:\Users\tsoadmin\AppData\Local\SAP\SAP GUI\EdgeUserData\EdgeUserDataSystemAware\EBWebView" --webview-exe-name=saplogon.exe --webview-exe-version="800 Final Release - 64bit" --embedded-browser-webview=1 --embedded-browser-webview-dpi-awareness=1 --edge-webview-custom-scheme=sap-cust,1,1,sapevent,1,1,saphtmlp,1,1,sapr3,1,1 --video-capture-use-gpu-memory-buffer --lang=en-US --device-scale-factor=1 --num-raster-threads=2 --enable-main-frame-before-activation --renderer-client-id=5 --js-flags="--harmony-weak-refs-with-cleanup-some --expose-gc --ms-user-locale=" --time-ticks-at-unix-epoch=-1723655821980318 --launch-time-ticks=529510535327 --field-trial-handle=3568,i,14546398177687338828,8625289174098165138,262144 --enable-features=MojoIpcz,msSingleSignOnOSForPrimaryAccountIsShared --variations-seed-version --mojo-platform-channel-handle=3580 /prefetch:1&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;here another method [via utility called &lt;EM&gt;IEChooser.exe ]&lt;BR /&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://community.sap.com/t5/application-development-blog-posts/obscure-productivity-tips-debug-javascript-running-within-sapgui-browser/ba-p/13390663" target="_blank"&gt;https://community.sap.com/t5/application-development-blog-posts/obscure-productivity-tips-debug-javascript-running-within-sapgui-browser/ba-p/13390663&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Example how it looks (for content server document viewer with HTML Control)&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="example of F12 debug" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/155013iAB1AF9C6C5900B82/image-size/large?v=v2&amp;amp;px=999" role="button" title="example-f12-debug.png" alt="example of F12 debug" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;example of F12 debug&lt;/span&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/sap-gui-html-browser-control-use-f12-development-tools/ba-p/13801432"/>
    <published>2024-08-21T08:42:08.278000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-cap-lessons-learned-deploy-app-on-html5-repository/ba-p/13950921</id>
    <title>SAP CAP Lessons Learned: Deploy app on HTML5 Repository</title>
    <updated>2024-12-30T22:16:54.957000+01:00</updated>
    <author>
      <name>LucasMagriniRigo</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1484354</uri>
    </author>
    <content>&lt;P&gt;Good day fellow CAPpers,&lt;/P&gt;&lt;P&gt;Today I'll share one of the lessons I've learned working with CAP, something that may not be clear in the current tutorials or documentation. It's about deploying the front-end, the UI, of your CAP application in the SAP BTP's HTML5 Repository instead of creating an AppRouter, a separate Cloud Foundry application, for it.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Pre-requisite on BTP:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To display or run HTML5 applications, your BTP SubAccount will need to have one of these services enabled/subscribed:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;STRONG&gt;&lt;EM&gt;SAP Build Work Zone, standard edition&lt;/EM&gt;&lt;/STRONG&gt;&lt;/LI&gt;&lt;LI&gt;SAP Build Work Zone, advanced edition&lt;/LI&gt;&lt;LI&gt;SAP SuccessFactors Work Zone&lt;/LI&gt;&lt;LI&gt;SAP Cloud Portal service&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I recommend &lt;EM&gt;SAP Build Work Zone, standard edition&lt;/EM&gt;, because it's the simplest to setup. It will be used in this guide.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Assumption about your CAP project:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;The guide will assume you have the standard project structure for an MTA application:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;/project
 /app
  /my-app
   ...
   package.json
   ui5-deploy.yaml
   ui5.yaml
 /db
 /srv
 package.json
 mta.yaml&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Note: the database module is optional.&lt;/P&gt;&lt;P&gt;Considering this, your &lt;STRONG&gt;mta.yaml&lt;/STRONG&gt; will require 3 modules:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;A module for the app itself, with &lt;EM&gt;type: html5&lt;/EM&gt; and &lt;EM&gt;path: app/my-app​&lt;BR /&gt;&lt;/EM&gt;- Each different app will require one of these modules&lt;BR /&gt;- It effectively zips the application and stores in the /resources folder&lt;/LI&gt;&lt;LI&gt;A deployer module with &lt;EM&gt;type: com.sap.application.content&lt;BR /&gt;&lt;/EM&gt;- This module can be reused for different apps, but needs a parameter for​ each app&lt;BR /&gt;- It takes the .zip files from /resources folder and sends to the HTML5 Repo&lt;/LI&gt;&lt;LI&gt;An app-content module with &lt;EM&gt;type: com.sap.application.content&lt;/EM&gt;&amp;nbsp;that will effectively do the setup of the HTML5 Repository​&lt;BR /&gt;- This module is unique and don't need to be edited if new apps are added.&lt;BR /&gt;- It sets up the connection between your app and the HTML5 Repository service and the service bindings&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;These modules will require 3 resources:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Repo Host: the service for HTML5 Repository Host&lt;/LI&gt;&lt;LI&gt;Destination: the service that allows your UI (/app) to communicate with the service (/srv)&lt;/LI&gt;&lt;LI&gt;XSUAA: User Authorization and Authentication. You can make it work without this service, but I wouldn't recommend.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;The resulting &lt;STRONG&gt;mta.yaml&lt;/STRONG&gt; would look like this:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;_schema-version: "3.1"
ID: cap-app-id
description: CAP app with UI on HTML5 Repo
version: 1.0.0

# build parameters added by the generator
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true
build-parameters:
  before-all:
    - builder: custom
      commands:
        - npm install
        - npx cds build --production

modules:
  # srv
  - name: my-srv
    type: nodejs
    path: gen/srv
    build-parameters:
      builder: npm
    parameters:
      buildpack: nodejs_buildpack
      readiness-health-check-http-endpoint: /health
      readiness-health-check-type: http
      routes:
        - route: ${space}-my-srv.${default-domain}
    provides:
      - name: srv-api
        properties:
          srv-url: ${routes/0/route}
    requires:
      - name: my-auth
      - name: my-destination-service

  # app content deployer
  - name: my-deployer
    type: com.sap.application.content
    path: .
    requires:
      - name: my-repo-host
        parameters:
          content-target: true
    build-parameters:
      build-result: resources
      requires:
        - artifacts:
            - my-app.zip
          name: myapp
          target-path: resources/
        - artifacts:
            - my-other-app.zip
          name: myotherapp
          target-path: resources/

  # my app itself
  - name: myapp
    type: html5
    path: app/my-app
    build-parameters:
      build-result: dist
      builder: custom
      commands:
        - npm install
        - npm run build:cf
      supported-platforms:
        []

  # my other app itself
  - name: myotherapp
    type: html5
    path: app/my-other-app
    build-parameters:
      build-result: dist
      builder: custom
      commands:
        - npm install
        - npm run build:cf
      supported-platforms:
        []

  # app html5 repo host
  - name: my-app-content
    type: com.sap.application.content
    build-parameters:
      no-source: true
    requires:
      - name: my-auth
        parameters:
          service-key:
            name: my-auth-key
      - name: my-repo-host
        parameters:
          service-key:
            name: my-repo-host-key
      - name: my-destination-service
        parameters:
          content-target: true
    parameters:
      content:
        instance:
          existing_destinations_policy: update
          destinations:
            - Name: my-repo-host
              ServiceInstanceName: my-html5-srv
              ServiceKeyName: my-repo-host-key
              sap.cloud.service: my.app
            - Name: my-auth
              Authentication: OAuth2UserTokenExchange
              ServiceInstanceName: my-auth
              ServiceKeyName: my-auth-key
              sap.cloud.service: my.app

resources:
  - name: my-repo-host
    type: org.cloudfoundry.managed-service
    parameters:
      service: html5-apps-repo
      service-name: my-html5-srv
      service-plan: app-host
  - name: my-destination-service
    type: org.cloudfoundry.managed-service
    requires:
      - name: srv-api
    parameters:
      config:
        HTML5Runtime_enabled: true
        init_data:
          instance:
            destinations:
              - Authentication: NoAuthentication
                Name: ui5
                ProxyType: Internet
                Type: HTTP
                URL: https://ui5.sap.com
              - Name: app-dest # defined in the apps xs-app.json
                Authentication: NoAuthentication
                ProxyType: Internet
                HTML5.ForwardAuthToken: true
                HTML5.DynamicDestination: true
                Type: HTTP
                URL: https://~{srv-api/srv-url} # reference to the service
            existing_destinations_policy: update
        version: 1.0.0
      service: destination
      service-name: my-destination-service
      service-plan: lite
  - name: my-auth
    type: org.cloudfoundry.managed-service
    parameters:
      service: xsuaa
      service-plan: application
      path: ./xs-security.json
      config:
        xsappname: my-app # update as required
        tenant-mode: dedicated
 &lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;EDIT: Very important:&lt;/STRONG&gt; Remember to set the resources repo-host parameter &lt;STRONG&gt;HTML5Runtime_enabled&lt;/STRONG&gt; to&amp;nbsp;&lt;STRONG&gt;true&lt;/STRONG&gt;. It generates as false and may cause you a headache until you find it.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;May this post help you on your troubleshooting. Reply if you find any issues so I, and the community, can help.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Lucas Magrini Rigo&lt;/P&gt;&lt;P&gt;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Business+Technology+Platform/pd-p/73555000100700000172" class="lia-product-mention" data-product="1215-1"&gt;SAP Business Technology Platform&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Cloud+Application+Programming+Model/pd-p/9f13aee1-834c-4105-8e43-ee442775e5ce" class="lia-product-mention" data-product="100-1"&gt;SAP Cloud Application Programming Model&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/HTML5/pd-p/680828266263384213323560113427399" class="lia-product-mention" data-product="318-1"&gt;HTML5&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Fiori+Launchpad/pd-p/538710751289542466232554247536294" class="lia-product-mention" data-product="1060-1"&gt;SAP Fiori Launchpad&lt;/a&gt;&amp;nbsp;&lt;a href="https://community.sap.com/t5/c-khhcw49343/SAP+Build+Work+Zone%25252C+standard+edition/pd-p/73554900100800003081" class="lia-product-mention" data-product="684-1"&gt;SAP Build Work Zone, standard edition&lt;/a&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-cap-lessons-learned-deploy-app-on-html5-repository/ba-p/13950921"/>
    <published>2024-12-30T22:16:54.957000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929</id>
    <title>SAP BTP: Cloud Application Programming Model</title>
    <updated>2025-03-04T07:09:41.141000+01:00</updated>
    <author>
      <name>SekhuteTK</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/15314</uri>
    </author>
    <content>&lt;P&gt;SAP Cloud Application Programming (CAP) Model exposes the ability to extend standard Cloud, on-premises and hybrid application functionality with flexible custom business logic scripted using the developer’s choice of programing language (SQL, SQL Script, Python, Node.js and JavaScript) and exposing the functionality to various user interfaces (UIs) e.g. Microsoft Power Bi, SAP Fiori, Dataiku and Google Big Query using various integration frameworks e.g. OData v4,JDBC/ODBC depending on the case study.&lt;/P&gt;&lt;P&gt;The developer takes pride in delivering a scalable extended functionality, embedding robust real-time monitoring capabilities to ensure a health life cycle and protecting the functionality with secure authentication protocols e.g. OAuth 2.0, JWT Bearer, SAML version 2.0 and RFC Specification.&lt;/P&gt;&lt;P&gt;Furthermore, the developer ensures a reliable and robust solutions by implementing continuous integration and continuous delivery CI/CD pipelines that automates testing, building and deployment of code changes this strategy ensures a speedy development and delivery cycle.&lt;/P&gt;&lt;P&gt;Traditionally developers extended business logic directly on-premises on the ABAP application server. With the ever-changing world of technology, digital transformation has become essential for organization to say afloat of competitors and therefore the programming model paradigms and capabilities of extending SAP solutions have evolved drastically and provides a seamless experience into the cloud.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Programming model.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232631i560CE0B01EB4E6CB/image-size/large?v=v2&amp;amp;px=999" role="button" title="Programming model.png" alt="Programming model.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 1: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Architectural Paradigm Shift from Classic ABAP App server to CAP App server&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Thomas Jung, &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426" target="_blank"&gt;&lt;STRONG&gt;SAP HANA Extended Application Services&lt;/STRONG&gt;&lt;/A&gt; blog, URL: &lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-hana-extended-application-services/ba-p/12963426/page/4&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;The SAP Cloud Application model comes with a rich set of languages, libraries, and tools for building enterprise-grade services and applications. It guides developers along a 'golden path' of proven&amp;nbsp;best practices&amp;nbsp;&amp;nbsp;and a great wealth of&amp;nbsp;out-of-the-box solutions&amp;nbsp;&amp;nbsp;to recurring tasks:&lt;/P&gt;&lt;P data-unlink="true"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="cap.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232633i1EC9379A4BB0DAA1/image-size/large?v=v2&amp;amp;px=999" role="button" title="cap.png" alt="cap.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 2: &lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;SAP Cloud Application Model Architecture&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source &lt;A href="HTTPS://Cap.cloud.sap" target="_blank" rel="nofollow noopener noreferrer"&gt;HTTPS://Cap.cloud.sap&lt;/A&gt; , U&lt;/EM&gt;&lt;EM&gt;RL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://cap.cloud.sap/docs/about/" target="_blank" rel="nofollow noopener noreferrer"&gt;https://cap.cloud.sap/docs/about/&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The below diagram categories the skill set of SAP Cloud Developer based on the scope of the development either being ABAP or Non-ABAP. Each with its unique set of tools and methodologies:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="ABAP VS NON.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232635i61C63058B7D72485/image-size/large?v=v2&amp;amp;px=999" role="button" title="ABAP VS NON.png" alt="ABAP VS NON.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 3:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;&amp;nbsp;SAP Cloud Developer skill set&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: Building side-by-side extensions on SAP BTP, URL: &lt;A href="https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0" target="_blank" rel="noopener noreferrer"&gt;https://learning.sap.com/learning-journeys/build-side-by-side-extensions-on-sap-btp/identifying-the-need-for-side-by-side-extensibility_f1e838f0-f02a-43b4-8896-cedc25a7d5d0&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;The Cloud Application Programming model enables a collaboration of agile cross functional teams inclusive of but not limited, depending on the scope of the development: &amp;nbsp;citizen developers (low-code/no-code), Professional developers (Scripting, OOP), business analysts, data engineers and application specialists to model robust data models:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Cross functional.png" style="width: 626px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/232636i237D8D5BBD7CB069/image-size/large?v=v2&amp;amp;px=999" role="button" title="Cross functional.png" alt="Cross functional.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Figure 4:&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Agile cross functional team&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;Source: &lt;STRONG&gt;Investigating the Impact of Cross-Functional Teams on Business Success&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P class="lia-align-center" style="text-align: center;"&gt;&lt;EM&gt;URL:&lt;/EM&gt; &lt;EM&gt;&lt;A href="https://www.iienstitu.com/en/blog/cross-functional-teams" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.iienstitu.com/en/blog/cross-functional-teams&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;SAP Cloud Application Programming (CAP) Model enables a culture where people regardless of their title or background, work together to imagine, develop, deploy, and operate a solution. This strengthens the trust between employees and authentic healthy work relationships.&lt;/P&gt;&lt;P&gt;Thank you all for taking a glimpse into the above Content. Please don’t for get to like, comment and share.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Abbreviations:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;APP: &lt;/STRONG&gt;Application&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CAP: &lt;/STRONG&gt;Cloud Application Programing&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CDS&lt;/STRONG&gt;: Core Data Services&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;CI/CD:&lt;/STRONG&gt; Continuous Integration and Continuous Delivery&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;JWT&lt;/STRONG&gt;: JSON Web token&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;OData: &lt;/STRONG&gt;Open Data Protocol&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;RFC&lt;/STRONG&gt;: Remote Function Call&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SAML&lt;/STRONG&gt;: Security Assertion Markup Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;SQL:&lt;/STRONG&gt; Structured Query Language&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;UIs:&lt;/STRONG&gt; User Interfaces&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/sap-btp-cloud-application-programming-model/ba-p/14032929"/>
    <published>2025-03-04T07:09:41.141000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-and-automation-blog-posts/deploying-a-cap-app-with-fiori-app-standalone-html5-repo-host/ba-p/14071579</id>
    <title>Deploying a CAP app with Fiori app standalone (HTML5 Repo Host)</title>
    <updated>2025-04-22T10:49:56.264000+02:00</updated>
    <author>
      <name>Christopher_Ketzler</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1482274</uri>
    </author>
    <content>&lt;P&gt;Typically, a CAP app with a Fiori frontend is deployed using SAP Workzone or Launchpad. You just need to run "cds add portal" or "cds add workzone" to extend the configuration and deploy the app to Cloud Foundry (&lt;A href="https://cap.cloud.sap/docs/guides/deployment/to-cf#add-ui" target="_blank" rel="noopener nofollow noreferrer"&gt;Deploy to Cloud Foundry | capire&lt;/A&gt;). The application will then be listed in the HTML5 tab of your subaccount. However, this approach is only applicable if you are subscribed to SAP Workzone or Launchpad (see below). A few months ago I was asked how to deploy a standalone CAP application with UI. Here is a step-by-step guide to deploying a CAP app with frontend.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Christopher_Ketzler_0-1744230534122.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/248926i9C3B2E2E223A330D/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Christopher_Ketzler_0-1744230534122.png" alt="Christopher_Ketzler_0-1744230534122.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;There are at least two different approaches. The first exposes the frontend application through the approuter. The other exposes the frontend application to the HTML5 Repo Host (&lt;A href="https://discovery-center.cloud.sap/serviceCatalog/html5-application-repository-service?region=all" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Discovery Center Service - HTML5 Application Repository Service&lt;/A&gt;). This has several advantages over the approuter:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Zero Down-Time Enablement, the frontend application is decoupled from the application router, meaning that content updates do not require a restart of the application router.&lt;/LI&gt;&lt;LI&gt;The service supports versioning and permissions.&lt;/LI&gt;&lt;LI&gt;Improved availability and performance.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;How to deploy a Fiori-CAP app to the html5-repo-host:&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;For simplicity, we will set up a new tiny bookshop example. Based on this backend, we will generate a simple Fiori List Page app.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds init bookshop --add tiny-sample
cd bookshop&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Run the commands below to add some features. We will extend the configuration of the components later.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cds add hana,html5-repo,approuter,mta
cds add xsuaa --for production&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now we are ready to add a Fiori List Report application. Right click on the mta.yaml and select 'Create MTA Module from Template'. The App Wizard will open and you will be able to configure a new Fiori app.&lt;/P&gt;&lt;P&gt;To make the html5 application accessible through the app router, we need to make some changes to its configuration. Locate the router configuration in the “app/router” folder.&amp;nbsp; Add the “welcomeFile” and “authenticationMethod” properties to the xs-app file. In general, you can add a path to a file or the name of a Fiori app as a welcome file. The app router will redirect the user if accessing the app router. We need to add the name of the Fiori app as "welcomeFile" property. If you have defined a namespace when building the frontend app, make sure you include the namespace without delimiter. After deployment, the app router configuration below will redirect you to the Fiori app.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "welcomeFile": "&amp;lt;Fiori app name&amp;gt;",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/(.*)$",
      "target": "$1",
      "destination": "srv-api",
      "csrfProtection": true
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Next, we need to extend the xs-app.json of the Fiori app itself. Add a new route for the odata service to make your cap service accessible from the Fiori app. Add the following snippet to the routes array before the html5-repo route.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
   "source": "^/odata/(.*)$",
   "target": "/odata/$1",
   "destination": "srv-api",
   "csrfProtection": true
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The app router applies the routes in the order given in the routes array, i.e. if the first route matches, the others are ignored. The target is the service name defined in mta.yaml. The xs-app.json should now look similar to this one.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/resources/(.*)$",
      "target": "/resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/test-resources/(.*)$",
      "target": "/test-resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/odata/(.*)$",
      "target": "/odata/$1",
      "destination": "srv-api",
      "csrfProtection": true
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Now we need to add the requires section below to the Fiori app's mta.yaml configuration. This snippet defines the service binding of the frontend app to the CAP service.&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt; - name: books
  type: html5
  path: app/books
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
  requires:
  - name: srv-api
    group: destinations
    properties:
      forwardAuthToken: true
      name: srv-api
      url: ~{srv-url}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;If you are deploying to a BTP trial account, add the following snippet to the xs-security in the cap root folder. Make sure the link matches the cf api url for your environment.&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;"oauth2-configuration": {
    "redirect-uris": ["https://*.cfapps.us10-001.hana.ondemand.com/**"]
  }&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;Add the environment variable "COOKIE_BACKWARD_COMPATIBILITY" to the “app/router/default-env.json” file. The app asked me to add this configuration. For more information, see the app router documentation (&lt;A href="https://www.npmjs.com/package/@sap/approuter" target="_blank" rel="noopener nofollow noreferrer"&gt;@sap/approuter - npm&lt;/A&gt;).&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "destinations": [
    {
      "name": "srv-api",
      "url": "http://localhost:4004",
      "forwardAuthToken": true
    }
  ],
  "COOKIE_BACKWARD_COMPATIBILITY": true
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;We are all almost done! Install the dependencies, build the CAP app and deploy to Cloud Foundry.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;npm i
mbt build
cf deploy …. (or context menu of the mta_archive)&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;After successfully deploying the application, retrieve the URL using the html5 cf plugin. Run the terminal command below. Add the app name (with namespace) and "index.html" to the URL to open the Fiori app.&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;cf html5-list -a &amp;lt;app name&amp;gt;-srv -u&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Christopher_Ketzler_1-1744230803860.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/248927iF10FC913FC22873A/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Christopher_Ketzler_1-1744230803860.png" alt="Christopher_Ketzler_1-1744230803860.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Alternatively, navigate to the subaccount in the BTP Cockpit, access your app router and follow the application route. The router will redirect you to the Fiori app. &amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Christopher_Ketzler_2-1744230817747.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/248930i44AB2C7DF9DE0118/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Christopher_Ketzler_2-1744230817747.png" alt="Christopher_Ketzler_2-1744230817747.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Find the app router on the application tab.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Christopher_Ketzler_0-1744319570654.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/249506i73AFC66B653267E3/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Christopher_Ketzler_0-1744319570654.png" alt="Christopher_Ketzler_0-1744319570654.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Follow the application route and access the fiori app.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Christopher_Ketzler_4-1744230817752.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/248928i85CC910A870ACDFD/image-size/medium?v=v2&amp;amp;px=400" role="button" title="Christopher_Ketzler_4-1744230817752.png" alt="Christopher_Ketzler_4-1744230817752.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Further information&lt;/STRONG&gt;:&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.youtube.com/watch?v=Jbq6zaKEUyY" target="_blank" rel="noopener nofollow noreferrer"&gt;https://www.youtube.com/watch?v=Jbq6zaKEUyY&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-and-automation-blog-posts/deploying-a-cap-app-with-fiori-app-standalone-html5-repo-host/ba-p/14071579"/>
    <published>2025-04-22T10:49:56.264000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408</id>
    <title>Introducing Application Frontend Service</title>
    <updated>2025-05-01T18:49:02.245000+02:00</updated>
    <author>
      <name>NachshonVagmayster</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/172862</uri>
    </author>
    <content>&lt;P&gt;&lt;SPAN&gt;As part of our exciting &amp;nbsp;&lt;A href="https://news.sap.com/2025/04/sap-build-sap-s4hana-cloud-simplify-development/" target="_blank" rel="noopener noreferrer"&gt;SAP Build&amp;nbsp;&lt;/A&gt;release, we're happy to announce the release of Application Frontend service, a new SaaS application on SAP Business Technology Platform (BTP) for hosting, serving and operating frontend applications.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Next Generation Solution for hosting frontend applications&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Application Frontend serves as a single point of entry for hosting, serving and operating frontend applications. By consolidating all aspects of UI application management under one managed service, Application Frontend simplifies the development experience and enhances custom application operations.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Bridging the Gap Between Neo and Multi-Cloud&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you have been around SAP BTP for more than 10 years then, most likely, you have used the Neo environment. If you developed an HTML5 application in Neo, then you probably used the HTML5 Runtime. Many customers we met in the past years have reported that the snappy experience they had in Neo, when developing and operating HTML5 applications, was lost when moving to the multi-cloud environment, where the HTML5 Application Repository and the managed application router (approuter) are used.&lt;BR /&gt;This feedback was received, noted and motivated us to come up with a new solution for managing HTML5 applications. A solution that will bring back the simplicity and flexibility customers liked so much in the Neo environment. With Application Frontend, we aim to bring that experience into the multi-cloud environment.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The first capabilities Neo fans will find familiar are host-based routing, the versioning concept and a direct deployment option. Additional capabilities like extended control from the SAP BTP cockpit will be added in the future.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;But don’t get me wrong, Application Frontend is not a replica of HTML5 Runtime in Neo. It is a multi-cloud service compatible with the multi-cloud development model. We use the same descriptors used in HTML5 Repository and application router, ensuring that developers don't need to learn yet another paradigm.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Very high level architecture diagram" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256895iF79427327BDA4E46/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nachshon_1-1746115862062.png" alt="Very high level architecture diagram" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Very high level architecture diagram&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;A New SaaS application&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Application Frontend is a SaaS application which is not coupled to any specific SAP BTP runtime environment or other SAP BTP applications. You can find and subscribe to the service from the SAP BTP cockpit. Application Frontend is also equipped with a service broker to support interaction flows using service instances, for example when using MTA deploy in the CF environment.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;While there is native support in the good old MTA concept for lifecycle management, Application Frontend also provides a command line interface (CLI) as a first-class tool for managing your applications. With the CLI, you can directly interact with the service and execute all actions supported by Application Frontend to enjoy fast response times and new integration opportunities.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN&gt;Supported Use cases&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;At the moment, Application Frontend supports hosting of single tenant, stand-alone applications. (S&lt;EM&gt;tand-alone&amp;nbsp;&lt;/EM&gt;means applications that are not embedding other applications.)&lt;BR /&gt;In the future we will extend the supported use cases to cover more scenarios like applications dependencies, multi-tenancy, native SAP Build Work Zone integration, etc.&lt;BR /&gt;&lt;/SPAN&gt;Application Frontend is perfect if you have a Build license and developing new HTML5 applications or migrating existing ones from Neo.&lt;BR /&gt;&lt;SPAN&gt;If the HTML5 Repository and application router are more suitable for your needs, please continue using them.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Application Frontend management UI in SAP BTP Cockpit" style="width: 940px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/256896iBBE43EDC9408A568/image-size/large?v=v2&amp;amp;px=999" role="button" title="Nachshon_2-1746116072220.png" alt="Application Frontend management UI in SAP BTP Cockpit" /&gt;&lt;span class="lia-inline-image-caption" onclick="event.preventDefault();"&gt;Application Frontend management UI in SAP BTP Cockpit&lt;/span&gt;&lt;/span&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Next steps&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Application Frontend service is starting its journey. We will continuously release additional features to support new scenarios and delight your experience.&lt;BR /&gt;In few weeks’ time, we will also make Application Frontend available in the SAP trial environment, so you can try it out more easily.&lt;BR /&gt;Note: Application Frontend will reside next to the HTML5 Repository, and the managed Application Router (approuter) hosted in SAP Build Work Zone. Both services will continue to be available, supported and developed as needed.&amp;nbsp; &amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;How to get started&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;SAP Build is available for subscription, more details in&amp;nbsp;&lt;A href="https://discovery-center.cloud.sap/serviceCatalog/sap-build?service_plan=default&amp;amp;region=all&amp;amp;commercialModel=subscription" target="_blank" rel="noopener nofollow noreferrer"&gt;SAP Discovery Center&lt;/A&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;Once you purchased SAP Build, follow &lt;A href="https://help.sap.com/docs/application-frontend-service/application-frontend-service/initial-setup" target="_blank" rel="noopener noreferrer"&gt;these steps&lt;/A&gt; for Application Frontend on-boarding.&lt;BR /&gt;Check out this intro tutorial for&amp;nbsp;&lt;A class="" href="https://community.sap.com/t5/technology-blog-posts-by-sap/simple-ui-applications-with-application-frontend-service/ba-p/14096009" target="_blank"&gt;Simple UI Applications with Application Frontend Service&lt;/A&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408"/>
    <published>2025-05-01T18:49:02.245000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/simple-ui-applications-with-application-frontend-service/ba-p/14096009</id>
    <title>Simple UI Applications with Application Frontend Service</title>
    <updated>2025-05-08T10:43:31.479000+02:00</updated>
    <author>
      <name>VadimTomnikov</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1405055</uri>
    </author>
    <content>&lt;P&gt;In the ever-evolving world of web UI applications, managed SaaS solutions are the preferred choice for hosting and serving UI applications. They offer efficiency and cost-effectiveness. SAP BTP provides robust solutions for UI applications from the early days of its cloud. The latest offering, &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408" target="_self"&gt;Application Frontend service&lt;/A&gt;, combines the best legacy features with new advancements in technology and infrastructure. In this post I’ll share with you how to get started with Application Frontend service using the CLI, but MTA and API are supported as well.&lt;/P&gt;&lt;H2 id="toc-hId-1710216591"&gt;Prerequisites&lt;/H2&gt;&lt;P&gt;To proceed with this tutorial and try everything on your own, you’ll need a few things&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;An SAP BTP subaccount, where you have administrator privileges, with&lt;UL&gt;&lt;LI&gt;An entitlement to use the “build-default” of Application Frontend service&lt;/LI&gt;&lt;LI&gt;Trust with SAP Cloud Identity tenant&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;Node.js v22.6.0 or later installed on your development environment&lt;/LI&gt;&lt;LI&gt;Application Frontend service CLI tool—afctl&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;To install the afctl, run&lt;/P&gt;&lt;PRE&gt;npm install -g @sap/appfront-cli&lt;/PRE&gt;&lt;H2 id="toc-hId-1513703086"&gt;Setup&lt;/H2&gt;&lt;P&gt;To start working with Application Frontend service, you need to subscribe to it and grant yourself the permissions to use it.&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;In the SAP BTP cockpit, in the subaccount, go to Services &amp;gt; Instances and Subscriptions. Then create a subscription the “build-default” of Application Frontend service.&lt;/LI&gt;&lt;LI&gt;In the subaccount, go to Security &amp;gt; Role Collections. Then create a role collection (for example, Application Frontend Developer). Open the newly created role collection and add yourself as a user. Make sure the user is from an “application users” identity provider. Add the “Application_Frontend_Developer” role to the role collection and save.&lt;/LI&gt;&lt;/OL&gt;&lt;H2 id="toc-hId-1317189581"&gt;Development &amp;amp; Deployment&lt;/H2&gt;&lt;P&gt;Let’s develop an application that prints “Hello, &amp;lt;NAME&amp;gt;!”, where the &amp;lt;NAME&amp;gt; is the first name of the logged-in user. We’ll use Application Frontend’s built-in current user REST API, which returns the attributes of the logged-in user as JSON.&lt;/P&gt;&lt;P&gt;Application Frontend service is agnostic to the tools, development model, and UI frameworks that are used to develop UI applications. However, some application configuration files are required:&lt;/P&gt;&lt;P&gt;The manifest.json file should, at a minimum, declare application name and version in the following format:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "sap.app": {
        "id": "hello",
        "applicationVersion": {
            "version": "1.0.0"
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;The xs-app.json file, where the desired web server features, such as, the routing, the welcome file and authentication are configured. Some features, for example the authentication are enabled by default, and you have an option to switch them off in this file:&lt;/P&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
    "welcomeFile": "/index.html",
    "routes": [{
        "source": "^/user-api/currentUser$",
        "service": "sap-approuter-userapi"
    }, {
        "source": ".*",
        "service": "app-front"
    }]
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;With this example we configure 3 things:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;If no specific path to the resource is present in the URL, send a redirect to /index.html&lt;/LI&gt;&lt;LI&gt;When the URL path is exactly /user-api/currentUser, send the JSON response with logged-in user attributes&lt;/LI&gt;&lt;LI&gt;For any other URL path, use the URL path as path to the static resource within deployed application&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The index.html file would be the following:&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
        body {
            display: grid;
            place-content: center;
            position: absolute;
            inset: 0;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Loading...&amp;lt;/h1&amp;gt;
    &amp;lt;script&amp;gt;
        fetch(
            './user-api/currentUser', 
            {credentials: 'include'}
        )
        .then(res =&amp;gt; res.json())
        .then(user =&amp;gt; {
            const h1 = document.querySelector('h1');
            h1.textContent = `Hello, ${user.firstname}!`;
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;To deploy the application, use afctl. The first thing, you need to do is to log in:&lt;/P&gt;&lt;PRE&gt;afctl login --sso -a &amp;lt;api_endpoint&amp;gt;&lt;/PRE&gt;&lt;P&gt;You can grab the &amp;lt;api_endpoint&amp;gt; from the Application Frontend service landing page. To open it, in the subaccount in the SAP BTP Cockpit, go to Services &amp;gt; Instances and Subscriptions, and click on the Application Frontend service link.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="Application Frontend Service - Landing Page.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/258686iE60A96D7CC1835BD/image-size/large?v=v2&amp;amp;px=999" role="button" title="Application Frontend Service - Landing Page.png" alt="Application Frontend Service - Landing Page.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now, let’s open the terminal in the root folder of our application containing these 3 files and deploy UI application, using afctl:&lt;/P&gt;&lt;PRE&gt;afctl push&lt;/PRE&gt;&lt;P&gt;After a few seconds, you should see the runtime URL of deployed application.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="afctl-push.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/258690iDAA5893E664BED95/image-size/medium?v=v2&amp;amp;px=400" role="button" title="afctl-push.png" alt="afctl-push.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Open the link in the browser, log in with your SAP Cloud Identity (if you are not already logged in) and you’ll see “Hello, &amp;lt;NAME&amp;gt;!”, where &amp;lt;NAME&amp;gt; is the first name of the logged in user, in the middle of the web page.&lt;/P&gt;&lt;P&gt;That’s it! Very simple. No mess with infrastructure, servers, certificates, etc. Developing and deploying subsequent applications will be even simpler, since you already have everything set up.&lt;/P&gt;&lt;H2 id="toc-hId-1120676076"&gt;What’s Next&lt;/H2&gt;&lt;P&gt;In this post we covered only the very basics of Application Frontend service. In the upcoming posts from the series, we’ll take a look at more advanced Application Frontend capabilities, including:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Accessing back-end systems&lt;/LI&gt;&lt;LI&gt;Setting up authorization&lt;/LI&gt;&lt;LI&gt;Securing UI application (CSRF, click-jacking, verb tampering, CSP, CORS)&lt;/LI&gt;&lt;LI&gt;Developing and deploying full-stack applications (MTA)&lt;/LI&gt;&lt;LI&gt;Managing application versions&lt;/LI&gt;&lt;LI&gt;Local preview&lt;/LI&gt;&lt;LI&gt;Integration with SAP BTP services and tools (SAP BTP cockpit, Business Application Studio, SAP Build Work Zone, SAP Fiori tools)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Stay tuned to learn more about what Application Frontend service has to offer already now and the future features to come. Happy coding!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/simple-ui-applications-with-application-frontend-service/ba-p/14096009"/>
    <published>2025-05-08T10:43:31.479000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/fiori-app-deployment-in-sap-btp-why-your-app-isn-t-where-you-think-it-is/ba-p/14121564</id>
    <title>Fiori App Deployment in SAP BTP: Why Your App isn't where You think it is</title>
    <updated>2025-06-10T20:02:42.937000+02:00</updated>
    <author>
      <name>AkumaryafirAk</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1430983</uri>
    </author>
    <content>&lt;H1 id="toc-hId-1603154407"&gt;&lt;SPAN class=""&gt;Fiori App Deployment in SAP BTP: Why Your App Isn't Where You Think It Is&lt;/SPAN&gt;&lt;/H1&gt;&lt;P&gt;&lt;SPAN class=""&gt;When you're delving into SAP Business Technology Platform (BTP), especially with a trial account, every successful deployment feels like a mini victory. You build a Fiori app in SAP Business Application Studio (BAS), connect it to a data source (like the SAP Gateway Demo System), deploy it to BTP, and then confidently embed it into SAP Build Work Zone. Success!&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;But then, you decide to level up your DevOps game by configuring &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Cloud Transport Management Service (CTMS)&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;. The goal: to understand how your precious Fiori app will move from a "development" environment to "QA" and "production" spaces. Naturally, you'd want to &lt;/SPAN&gt;&lt;EM&gt;&lt;SPAN class=""&gt;see&lt;/SPAN&gt;&lt;/EM&gt;&lt;SPAN class=""&gt; your app residing in your initial "DEV" Cloud Foundry space to confirm its source.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;This is where my recent learning journey took an interesting turn, and it's a confusion I want to clarify for others.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1535723621"&gt;&lt;SPAN class=""&gt;My "Where's My App?" Moment&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN class=""&gt;After deploying my Fiori app, my logical next step was to go to the BTP Cockpit, navigate to my subaccount, select &lt;/SPAN&gt;&lt;FONT color="#99CC00"&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Cloud Foundry &amp;gt; Spaces&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt;, click into my "dev" space, and then look under &lt;/SPAN&gt;&lt;FONT color="#FF6600"&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Applications&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;To my surprise, my Fiori app wasn't listed there! Panic. Did the deployment fail? Is it invisible? Yet, I could still access it perfectly fine from the &lt;/SPAN&gt;&lt;FONT color="#99CC00"&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;HTML5 Applications&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt; section in the BTP Cockpit and, more importantly, it was fully functional within SAP Build Work Zone.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;This discrepancy sparked a deep dive into &lt;FONT color="#FF6600"&gt;how Fiori apps are truly deployed on BTP&lt;/FONT&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1339210116"&gt;&lt;SPAN class=""&gt;CHECK the BTP Deployment Model for Fiori Apps&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN class=""&gt;The key to understanding this lies in the specialized nature of HTML5/UI5 application deployment on the Cloud Foundry environment within BTP.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;When you deploy a Fiori/UI5 application from SAP BAS:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;FONT color="#FF6600"&gt;It's Not a Standalone Cloud Foundry Application (Usually)&lt;/FONT&gt;:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt; Unlike a typical backend service (e.g., a Node.js or Java application) that directly consumes Cloud Foundry resources and appears under "Applications" in a space, your Fiori app's static UI content (HTML, JavaScript, CSS, images) is usually &lt;/SPAN&gt;&lt;EM&gt;&lt;SPAN class=""&gt;not&lt;/SPAN&gt;&lt;/EM&gt;&lt;SPAN class=""&gt; deployed as an independent Cloud Foundry application instance.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;FONT color="#FF6600"&gt;Enter the HTML5 Application Repository&lt;/FONT&gt;:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt; Instead, your Fiori app's static content is deployed to the &lt;/SPAN&gt;&lt;FONT color="#99CC00"&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;HTML5 Application Repository service&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt;. Think of this as a highly optimized, dedicated storage and serving mechanism specifically for front-end web applications. It's designed for efficient content delivery.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;&lt;FONT color="#FF6600"&gt;The Approuter's Role&lt;/FONT&gt;:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt; Your Fiori project likely incl&lt;FONT color="#000000"&gt;udes an approuter&lt;/FONT&gt;&lt;/SPAN&gt;&lt;FONT color="#000000"&gt;&lt;SPAN class=""&gt; module (or leverages a managed approuter service). The approuter&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;is&lt;/SPAN&gt;&lt;SPAN class=""&gt; a Cloud Foundry application instance that you will see listed in your space under &lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;FONT face="arial,helvetica,sans-serif" color="#000000"&gt;Cloud Foundry&lt;/FONT&gt; -&lt;FONT color="#000000"&gt;-&lt;FONT face="arial,helvetica,sans-serif"&gt;&amp;gt; Spaces --&amp;gt; space &amp;gt; Applications&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;. This approuter&lt;/SPAN&gt;&lt;SPAN class=""&gt;&amp;nbsp;acts as the single-entry point for your Fiori application. It handles:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Authentication (often via XSUAA).&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Routing requests to your Fiori UI content (which is in the HTML5 Application Repository).&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Routing requests to any backend services your Fiori app consumes.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN class=""&gt;So, while the &lt;/SPAN&gt;&lt;FONT color="#000000"&gt;&lt;FONT color="#008000"&gt;&lt;SPAN class=""&gt;approuter&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt; is a visible Cloud Foundry application, your actual Fiori UI content lives in the &lt;/SPAN&gt;&lt;SPAN class=""&gt;&lt;FONT color="#000000"&gt;&lt;FONT color="#008080"&gt;HTML5 Application Repository&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;, which is a service backing the &lt;/SPAN&gt;&lt;FONT color="#339966"&gt;&lt;SPAN class=""&gt;HTML5 Applications&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN class=""&gt; view in the BTP Cockpit.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1142696611"&gt;&lt;SPAN class=""&gt;Checking Fiori App's True "Home"&lt;/SPAN&gt;&lt;/H2&gt;&lt;P&gt;&lt;SPAN class=""&gt;To truly visualize where your deployed Fiori app content resides, you need to check the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;HTML5 Applications&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt; section:&lt;/SPAN&gt;&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Log in to your &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;SAP BTP Cockpit&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Navigate to your &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Subaccount&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;In the left-hand navigation, click on &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;HTML5 Applications&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Here, you'll see a list of all your deployed HTML5 applications. Look for your Fiori app by its name.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;SPAN class=""&gt;Crucially, observe the &lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;"Space" column&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN class=""&gt; for your Fiori app. You should see your initial "dev" space listed there.&lt;/SPAN&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;SPAN class=""&gt;if you are unable to see, click on settings icon and add the space column there, by default it's not there&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="AkumaryafirAk_0-1749223207475.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/270945i20AD96217F600791/image-size/medium?v=v2&amp;amp;px=400" role="button" title="AkumaryafirAk_0-1749223207475.png" alt="AkumaryafirAk_0-1749223207475.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN class=""&gt;This confirms that your Fiori app's deployed content is indeed correctly placed within the HTML5 Application Repository associated with your &lt;/SPAN&gt;&lt;SPAN class=""&gt;dev&lt;/SPAN&gt;&lt;SPAN class=""&gt; space.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-946183106"&gt;&lt;SPAN class=""&gt;Points to Remember:&lt;/SPAN&gt;&lt;/H2&gt;&lt;UL&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#008000"&gt;&lt;SPAN class=""&gt;Fiori/UI5 apps are primarily deployed to the HTML5 Application Repository, not as direct Cloud Foundry application instances.&lt;/SPAN&gt;&lt;SPAN class=""&gt; The&amp;nbsp; &lt;STRONG&gt;approuter&lt;/STRONG&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;is the Cloud Foundry application that serves them.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;LI&gt;&lt;P&gt;&lt;FONT color="#008000"&gt;&lt;SPAN class=""&gt;The &lt;STRONG&gt;HTML Applications&lt;/STRONG&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;section in the BTP Cockpit is your go-to place to monitor and confirm the deployment space of your Fiori apps.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;FONT color="#008000"&gt;&lt;SPAN class=""&gt;#sap #sapcommunity #sapbtp #sapcloud #sapbas #BAS #BusinessApplicationStudio&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/fiori-app-deployment-in-sap-btp-why-your-app-isn-t-where-you-think-it-is/ba-p/14121564"/>
    <published>2025-06-10T20:02:42.937000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/application-frontend-service-now-generally-available-in-sap-btp-trail/ba-p/14134649</id>
    <title>Application Frontend Service now generally available in SAP BTP Trail Account [cf us10-XXX]</title>
    <updated>2025-06-23T17:44:52.329000+02:00</updated>
    <author>
      <name>Yogananda</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/75</uri>
    </author>
    <content>&lt;P&gt;As part of our exciting &amp;nbsp;&lt;A href="https://news.sap.com/2025/04/sap-build-sap-s4hana-cloud-simplify-development/" target="_blank" rel="noopener noreferrer"&gt;SAP Build&amp;nbsp;&lt;/A&gt;release, we're happy to announce the release of Application Frontend service, a new SaaS application on SAP Business Technology Platform (BTP) Trail account for US region for hosting, serving and operating frontend applications.&lt;/P&gt;&lt;P&gt;&lt;FONT color="#800080"&gt;&lt;STRONG&gt;SAP BTP Trial accounts can be deployed with limited to five(5) applications per subaccount.&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Now, you can enjoy the following benefits of Application Frontend Service&lt;/SPAN&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-23_17-38-48.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277755iE9E06693A5AA57C9/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-23_17-38-48.png" alt="2025-06-23_17-38-48.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1991416362"&gt;What is Application Frontend Service?&lt;/H4&gt;&lt;P&gt;Host, serve, and manage frontend applications to extend SAP business solutions.&lt;/P&gt;&lt;P&gt;Application Frontend service lets you host and serve frontend applications. It serves as a single entry point for hosting web-based UI applications to extend SAP's business solutions. The service provides tools for deploying and managing applications, serving static resources, routing backend calls to defined targets, and observability tools.&lt;/P&gt;&lt;P&gt;Application Frontend service is included in the &lt;STRONG&gt;SAP Build.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Application Frontend service&lt;/STRONG&gt; supports various channels for managing applications, such as the commonly used Generic Application Content Deployer (GACD) for multitarget applications (MTA), a dedicated UI in the cockpit, and a CLI. These options allow you to choose the channel that best suits your needs.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="loio6bb9594f083943cba1be41d78529d63e_LowRes.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277945iB09031D7D128BE84/image-size/large?v=v2&amp;amp;px=999" role="button" title="loio6bb9594f083943cba1be41d78529d63e_LowRes.png" alt="loio6bb9594f083943cba1be41d78529d63e_LowRes.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Application Frontend is a SaaS application which is not coupled to any specific SAP BTP runtime environment or other SAP BTP applications. You can find and subscribe to the service from the SAP BTP cockpit. Application Frontend is also equipped with a service broker to support interaction flows using service instances, for example when using MTA deploy in the CF environment.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;While there is native support in the good old MTA concept for lifecycle management, Application Frontend also provides a command line interface (CLI) as a first-class tool for managing your applications. With the CLI, you can directly interact with the service and execute all actions supported by Application Frontend to enjoy fast response times and new integration opportunities.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1665820138"&gt;&lt;FONT color="#000080"&gt;&lt;STRONG&gt;High Level Overview of Application Frontend Service - Deployment&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/H3&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Yogananda_0-1750692504909.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277750i367CF3645161F50B/image-size/large?v=v2&amp;amp;px=999" role="button" title="Yogananda_0-1750692504909.png" alt="Yogananda_0-1750692504909.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1598389352"&gt;&lt;FONT color="#0000FF"&gt;Prerequisites to enable Application Frontend Serivce&lt;/FONT&gt;&lt;/H4&gt;&lt;UL&gt;&lt;LI&gt;Go to your SAP BTP Trail Account - Subaccount&lt;/LI&gt;&lt;LI&gt;Go to your Instance and Subscription - Subscribe for SAP Cloud Identity Services&lt;/LI&gt;&lt;LI&gt;Enable SAP IAS and Trust &amp;amp; Auth with enabled SAP IAS&lt;/LI&gt;&lt;LI&gt;Go to Entitlements - Select Application Frontend Service&lt;/LI&gt;&lt;LI&gt;Select 2 checkbox for enabling the Plan (Developer and Application)&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Create a Role Collections and Assign to your User (SAP IAS enabled)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-23_16-52-00.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277717i65B8B0D72C2AE8A0/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-23_16-52-00.png" alt="2025-06-23_16-52-00.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Go to Instances and Subscription - Select&amp;nbsp;&lt;STRONG&gt;Application Frontend Service &lt;/STRONG&gt;from dropdown with&lt;STRONG&gt; Plan - Trial&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-23_17-15-43.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277739i6DBE24643606A45F/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-23_17-15-43.png" alt="2025-06-23_17-15-43.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Go to Instances and Subscription - Select&amp;nbsp;&lt;STRONG&gt;Application Frontend Service &lt;/STRONG&gt;with&lt;STRONG&gt; Plan - Developer&lt;/STRONG&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-23_17-17-55.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/277725i18BA3186F9BB8ED7/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-23_17-17-55.png" alt="2025-06-23_17-17-55.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1401875847"&gt;&lt;FONT color="#000080"&gt;Create a New Role Collection&lt;/FONT&gt;&lt;/H4&gt;&lt;P&gt;&lt;FONT color="#000080"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-26_09-06-10.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279037iCE7D01FBD3CA2ED8/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-26_09-06-10.png" alt="2025-06-26_09-06-10.png" /&gt;&lt;/span&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;H4 id="toc-hId-1205362342"&gt;&lt;FONT color="#000080"&gt;Assign Role to newly created Role Collection&lt;/FONT&gt;&lt;FONT color="#000080"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-26_09-07-30.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279038i0FA174F0ABE7EC0B/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-26_09-07-30.png" alt="2025-06-26_09-07-30.png" /&gt;&lt;/span&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;H4 id="toc-hId-1008848837"&gt;&lt;FONT color="#000080"&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="2025-06-26_09-08-05.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/279039iF7D252D50CC7E421/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-06-26_09-08-05.png" alt="2025-06-26_09-08-05.png" /&gt;&lt;/span&gt;&lt;/FONT&gt;&lt;/H4&gt;&lt;H4 id="toc-hId-812335332"&gt;&lt;FONT color="#000080"&gt;Application Frontend Service Library &amp;amp; CLI (Command Line)&lt;/FONT&gt;&lt;/H4&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;npm install -g /appfront-cli

afctl login --sso -a &amp;lt;api_endpoint&amp;gt;

afctl push&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-615821827"&gt;&amp;nbsp;&lt;/H4&gt;&lt;H4 id="toc-hId-419308322"&gt;Conclusion&lt;/H4&gt;&lt;P&gt;&lt;STRONG&gt;Application Frontend Service&lt;/STRONG&gt; is a game-changer for Cloud Foundry users. By simplifying UI development, enhancing scalability, and promoting consistency, AFS empowers developers to create high-quality applications more efficiently. As cloud-native development continues to evolve, integrating tools like AFS will be crucial in staying ahead of the curve and delivering exceptional user experiences.&lt;/P&gt;&lt;P&gt;For more detailed insights, you can check out the original blog posts :&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Introducing Application Frontend Service&amp;nbsp;:&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408" target="_blank"&gt;Application Frontend Service&lt;/A&gt;&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Simple UI Applications with Application Frontend Service&amp;nbsp;:&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/simple-ui-applications-with-application-frontend-service/ba-p/14096009" target="_blank"&gt;DEV Community&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Application Frontend Service Help Documentation : &lt;A href="https://help.sap.com/docs/application-frontend-service" target="_blank" rel="noopener noreferrer"&gt;Guide and Development&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Application Frontend Service Onboarding Service -&amp;nbsp;&amp;nbsp;&lt;A title="https://help.sap.com/docs/application-frontend-service/application-frontend-service/setup-in-sap-btp-trial" href="https://help.sap.com/docs/application-frontend-service/application-frontend-service/setup-in-sap-btp-trial" target="_blank" rel="noopener noreferrer"&gt;AppFront trial on-boarding help page&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/application-frontend-service-now-generally-available-in-sap-btp-trail/ba-p/14134649"/>
    <published>2025-06-23T17:44:52.329000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/running-a-sapui5-app-from-a-previous-commit-without-affecting-remote/ba-p/14139276</id>
    <title>Running a SAPUI5 App from a Previous Commit Without Affecting Remote Repository</title>
    <updated>2025-07-02T11:18:21.259000+02:00</updated>
    <author>
      <name>Myvizhipriya_Thangaraj_2810</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/1477011</uri>
    </author>
    <content>&lt;P&gt;&lt;STRONG&gt;Introduction&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Ever needed to test or run your SAPUI5 application from an earlier commit without disturbing your current branch or affecting the remote repository? Whether it's for debugging, rollback testing, or feature validation, Git provides a safe and clean way to do this — using detached HEAD state and local branches. Here's a step-by-step guide to achieve just that.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step-by-Step: Run an Older Version of Your SAPUI5 App Safely&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 1: View Commit History&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To identify which commit you want to revisit:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git log --oneline&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This will display recent commits with their short hash and message. Identify the one that's 4 commits back or use:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git checkout HEAD~4&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 2: Checkout the Older Commit&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git checkout &amp;lt;commit-hash&amp;gt;&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Or for 4 commits ago:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git checkout HEAD~4&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This moves you into a detached HEAD state, a safe mode where changes don’t impact your current branch.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 3: Run Your SAPUI5 Application&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Use your usual development server to run the app:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;EM&gt;ui5 serve&lt;/EM&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;or&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;npm start&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Your app now runs exactly as it existed 4 commits ago.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 4: (Optional) Create a Local Test Branch&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;If you want to make edits or test features in that older state:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git checkout -b temp-test-branch&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;This lets you commit and experiment locally — no impact on the remote repo.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Step 5: Return to Your Latest Code&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Once done, simply switch back to your latest working branch:&lt;/P&gt;&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;git checkout main&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Why This Approach is Safe?&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;-&lt;/STRONG&gt; No changes are pushed to the remote.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;-&lt;/STRONG&gt; The main branch and its history remain intact.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;-&lt;/STRONG&gt; You can safely test, debug, or demo older versions of your app.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;-&lt;/STRONG&gt; Great for testing fixes without branching off prematurely.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Conclusion&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Testing previous versions of your SAPUI5 app doesn't need to be risky. By using Git's detached HEAD mode and optional local branches, you gain full control without affecting your project's main history or remote repo. It’s a clean, safe, and professional way to revisit and test the past.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;Thank you for taking the time to read this blog!&lt;/P&gt;&lt;P&gt;If you found this helpful, feel free to share your thoughts, feedback, or questions in the comments! Let's keep learning and growing together. Happy coding!&amp;nbsp;&lt;/P&gt;&lt;P&gt;Hello experts, please feel free to correct me if any information is inaccurate.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/running-a-sapui5-app-from-a-previous-commit-without-affecting-remote/ba-p/14139276"/>
    <published>2025-07-02T11:18:21.259000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/version-control-made-simple-with-application-frontend-service/ba-p/14152775</id>
    <title>Version Control Made Simple with Application Frontend Service</title>
    <updated>2025-07-29T19:44:46.412000+02:00</updated>
    <author>
      <name>TaliaGurevich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/480172</uri>
    </author>
    <content>&lt;P&gt;As developers, we all know that deploying a new version of an application can be both exciting and risky. Whether you’re rolling out a minor UI fix or launching a major redesign, the ability to manage multiple versions with confidence is key to a smooth delivery process.&lt;/P&gt;&lt;P&gt;With &lt;A href="https://community.sap.com/t5/technology-blog-posts-by-sap/introducing-application-frontend-service/ba-p/14091408" target="_self"&gt;Application Frontend Service&lt;/A&gt;, version management is built in from the start, letting you deploy, view, roll back, and promote frontend versions directly from the CLI or SAP BTP Cockpit. In this post, we’ll show you how it works and how to make the most of it.&lt;/P&gt;&lt;H3 id="toc-hId-1864122153"&gt;&lt;STRONG&gt;Why Version Management Matters&lt;/STRONG&gt;&lt;/H3&gt;&lt;P&gt;Application Frontend Service allows you to host and serve UI applications in SAP BTP. But what happens when a bug slips through? Or when you need to test a new version without affecting your end users?&lt;/P&gt;&lt;P&gt;That’s where the versioning concept in Application Frontend Service comes in.&lt;/P&gt;&lt;P&gt;Application Frontend Service supports multiple coexisting versions of the same application, each one deployed independently and maintained separately.&lt;BR /&gt;In the manifest.json file of your application, you define the version name using the applicationVersion property. This allows you to deploy multiple versions of the same application, all sharing the same application ID but with different version identifiers.&lt;/P&gt;&lt;P&gt;Every version:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Has its dedicated version-specific URL&lt;/LI&gt;&lt;LI&gt;Can reference different services and codebases&lt;/LI&gt;&lt;LI&gt;Can be tested or validated in parallel with the current live version&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Each application has exactly one active version at any given time. The active version is served from the application’s main URL. All other versions are accessible only via their version-specific URLs.&lt;BR /&gt;The active version is the version that is available to the end users.&lt;/P&gt;&lt;P&gt;When you deploy an application, it becomes the active version by default, served at the application’s main URL. But you can also deploy a version without activating it, test it safely, and switch to it later with a single command.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-1667608648"&gt;Real-Life Example: Test and Promote with Zero Downtime&lt;BR /&gt;&lt;BR /&gt;&lt;/H3&gt;&lt;P&gt;Let’s say you’ve deployed version 0.0.1 of your application, myApp, and it’s running smoothly in production. You’re now working on version 0.0.2 with a few improvements or new features. With Application Frontend Service, you can deploy version 0.0.2 without making it active right away.&lt;/P&gt;&lt;P&gt;Each application in Application Frontend Service is assigned a unique &lt;STRONG&gt;main URL&lt;/STRONG&gt; when it is first deployed. For example:&lt;/P&gt;&lt;P&gt;https:&lt;SPAN&gt;//myapp-wscfr.eu10.appfront.cloud.sap&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;SPAN&gt;This main URL always returns the &lt;/SPAN&gt;currently active version&lt;SPAN&gt; of the application.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;In addition, each deployed version receives its&amp;nbsp;&lt;STRONG&gt;version-specific URL&lt;/STRONG&gt;, such as:&lt;/P&gt;&lt;P&gt;https:&lt;SPAN&gt;//myapp-wscfr-v0_0_1.eu10.appfront.cloud.sap&lt;BR /&gt;&lt;/SPAN&gt;https:&lt;SPAN&gt;//myapp-wscfr-v0_0_2.eu10.appfront.cloud.sap&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;With Application Frontend Service, you can:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Deploy version 0.0.2 without activating it&lt;/LI&gt;&lt;LI&gt;Access it directly through its version-specific URL:&lt;BR /&gt;&lt;A href="https://myapp-wscfr-v0_0_2.eu10.appfront.cloud.sap" target="_blank" rel="noopener nofollow noreferrer"&gt;https://myapp-wscfr-v0_0_2.eu10.appfront.cloud.sap&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;Let your testers or internal users try it out&lt;/LI&gt;&lt;LI&gt;Keep version 0.0.1 active and served via the main URL&lt;/LI&gt;&lt;LI&gt;Once validated, promote version 0.0.2 to active,&amp;nbsp;and your main URL:&amp;nbsp;&lt;A href="https://myapp-wscfr.eu10.appfront.cloud.sap" target="_blank" rel="noopener nofollow noreferrer"&gt;https://myapp-wscfr.eu10.appfront.cloud.sap&lt;/A&gt; will now serve the new version to all users&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;All of this happens without downtime, without breaking the existing deployment, and without overwriting any previously deployed version.&lt;/P&gt;&lt;H3 id="toc-hId-1471095143"&gt;Controlling Activation During Deployment&lt;BR /&gt;&lt;BR /&gt;&lt;/H3&gt;&lt;P&gt;In the previous example, we saw how useful it is to deploy a new version without activating it right away.&lt;BR /&gt;By default, any new deployment to the Application Frontend Service becomes the active version. But if you want to delay activation, for example, to perform internal validation, you can control this behavior in two ways, depending on how you deploy.&lt;/P&gt;&lt;H4 id="toc-hId-1403664357"&gt;When deploying an application using the GACD (Generic Application Content Deployer) module&lt;BR /&gt;&lt;BR /&gt;&lt;/H4&gt;&lt;P&gt;If you are deploying a multi-target application (MTA), you can prevent automatic activation by setting &lt;STRONG&gt;activateVersion: false&lt;/STRONG&gt; under the parameters of the GACD module in your &lt;STRONG&gt;mta.yaml&lt;/STRONG&gt; file:&lt;/P&gt;&lt;pre class="lia-code-sample language-yaml"&gt;&lt;code&gt;...
  parameters:
    config:
      activateVersion: false
      destinations:
        - name: ui5
          url: https://ui5.sap.com&lt;/code&gt;&lt;/pre&gt;&lt;H4 id="toc-hId-1207150852"&gt;When deploying with afctl push&lt;BR /&gt;&lt;BR /&gt;&lt;/H4&gt;&lt;P&gt;If you're using the &lt;A href="https://www.npmjs.com/package/@sap/appfront-cli" target="_blank" rel="noopener nofollow noreferrer"&gt;Application Frontend service CLI&lt;/A&gt; to deploy applications, you can achieve the same behavior using one of the following options:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Pass the&amp;nbsp;&lt;EM&gt;--no-activate&lt;/EM&gt;&amp;nbsp;(or&lt;EM&gt;-n&lt;/EM&gt;) flag to the &lt;STRONG&gt;afctl push&lt;/STRONG&gt; command:&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl push &amp;lt;path-to-app&amp;gt; -n&lt;/code&gt;&lt;/pre&gt;&lt;UL&gt;&lt;LI&gt;Or set &lt;STRONG&gt;"activateVersion": false&lt;/STRONG&gt; in the configuration file (e.g., conf.json):&lt;/LI&gt;&lt;/UL&gt;&lt;pre class="lia-code-sample language-json"&gt;&lt;code&gt;{
  "activateVersion": false
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; If both the CLI flag and the configuration file contain activation settings, the CLI flag takes precedence.&lt;/P&gt;&lt;P&gt;For example, the following command uses a configuration file that may contain "activateVersion": true, but the&amp;nbsp;&lt;EM&gt;-n&lt;/EM&gt;&amp;nbsp;flag overrides it and prevents activation:&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl push &amp;lt;path-to-app&amp;gt; -c conf.json -n&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;With either method, the new version will be deployed and accessible via its version-specific URL. Still, the application’s main URL will continue to serve the currently active version until you explicitly promote the new one.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H3 id="toc-hId-881554628"&gt;Managing Application Versions in SAP BTP Cockpit&lt;BR /&gt;&lt;BR /&gt;&lt;/H3&gt;&lt;P&gt;To access the Application Frontend UI in SAP BTP Cockpit, your user must be assigned the &lt;STRONG&gt;Application Frontend Viewer&lt;/STRONG&gt; role. To activate or delete versions, you need the &lt;STRONG&gt;Application Frontend Developer&lt;/STRONG&gt; role.&lt;BR /&gt;&lt;BR /&gt;&lt;/P&gt;&lt;H4 id="toc-hId-814123842"&gt;Viewing Your Applications&lt;BR /&gt;&lt;BR /&gt;&lt;/H4&gt;&lt;OL&gt;&lt;LI&gt;In the left-hand navigation bar of the SAP BTP Cockpit, choose &lt;STRONG&gt;HTML5 / Application Frontend&lt;/STRONG&gt;.&lt;/LI&gt;&lt;LI&gt;You'll see a list of applications that have been deployed to the Application Frontend Service in your subaccount.&lt;/LI&gt;&lt;LI&gt;For each application, you can see its active version.&lt;/LI&gt;&lt;LI&gt;To open and run an application, you can click either the application name or the active version.&lt;/LI&gt;&lt;LI&gt;If you choose to delete an application, all of its versions (including the active one) will be permanently deleted.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_0-1752574215819.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286821iB765808E3BEDD4DF/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_0-1752574215819.png" alt="talia_gurevich_0-1752574215819.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H4 id="toc-hId-617610337"&gt;Viewing and Managing Versions&lt;/H4&gt;&lt;P&gt;To see all deployed versions of an application:&lt;/P&gt;&lt;OL&gt;&lt;LI&gt;Click anywhere on the row of the application.&lt;/LI&gt;&lt;LI&gt;A detail pane will open on the right, showing all the deployed versions of that application.&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;Here you can activate versions, delete them, or view logs for a specific version.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_0-1752574583371.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286823i47BDD3711ADA2159/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_0-1752574583371.png" alt="talia_gurevich_0-1752574583371.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To change the active version of an application:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Click the &lt;STRONG&gt;Activate version&lt;/STRONG&gt; icon on the version you want to promote.&lt;/LI&gt;&lt;LI&gt;The active version indicator will move to that version.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Only one version of an application can be active at a time.&lt;/P&gt;&lt;P&gt;To delete a specific version of an application:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Click the &lt;STRONG&gt;Delete&lt;/STRONG&gt; icon on the version you want to remove&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; This action is permanent. Deleted versions cannot be recovered.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Additional Notes&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;You cannot delete an active version. To delete an active version, you must first activate another one.&lt;/LI&gt;&lt;LI&gt;An application can have a maximum of 10 versions. Once this limit is reached, you must delete older versions before deploying new ones.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Let’s see how all of this looks in a real example.&lt;/P&gt;&lt;P&gt;I have deployed an application called “employees.” It currently has a single version, 1.0.0, which was activated by default on deployment.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_2-1752574801668.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286833i0777E7B2C4222B47/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_2-1752574801668.png" alt="talia_gurevich_2-1752574801668.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;This is how the application looks:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_1-1752574776815.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286830iC8203176475E45A0/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_1-1752574776815.png" alt="talia_gurevich_1-1752574776815.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Note the URL. This is the main URL of the application.&lt;/P&gt;&lt;P&gt;I can also run the same version using its version-specific URL:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_3-1752574881947.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286836i038BCC78F7B6392B/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_3-1752574881947.png" alt="talia_gurevich_3-1752574881947.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now I want to enhance the application by adding search and sort controls, and I also want to remove the “Employees Overview” title.&lt;/P&gt;&lt;P&gt;After making these changes, I deploy version 2.0.0 of the application using the &lt;EM&gt;--no-activate&lt;/EM&gt; flag, meaning this version will not become active immediately.&lt;/P&gt;&lt;P&gt;At this point, two versions of the application exist:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_4-1752575034543.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286844i104F93FBD559FE5D/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_4-1752575034543.png" alt="talia_gurevich_4-1752575034543.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Since the new version was not activated, the main application URL still serves version 1.0.0 - without the new features:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_5-1752575090457.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286845iEC272255AAC6E48B/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_5-1752575090457.png" alt="talia_gurevich_5-1752575090457.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;However, I can access and test version 2.0.0 using its version-specific URL:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_6-1752575121321.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286846i1092433104C01773/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_6-1752575121321.png" alt="talia_gurevich_6-1752575121321.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The search and sort controls are visible, and everything is working as expected.&lt;/P&gt;&lt;P&gt;Next, I activate version 2.0.0.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_7-1752575154204.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286847i700C9109E4F22874/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_7-1752575154204.png" alt="talia_gurevich_7-1752575154204.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Now version 2.0.0 is active.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_8-1752575197088.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286848i6A8B3DCFF6CB104F/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_8-1752575197088.png" alt="talia_gurevich_8-1752575197088.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The main application URL serves the updated version with the new features:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_9-1752575228405.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286849iE2CDCB585133339F/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_9-1752575228405.png" alt="talia_gurevich_9-1752575228405.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The previous version, 1.0.0, remains available through its version-specific URL, and I can roll back to it if needed:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_10-1752575265942.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286850i0FC6ADD8D02D6CCA/image-size/large?v=v2&amp;amp;px=999" role="button" title="talia_gurevich_10-1752575265942.png" alt="talia_gurevich_10-1752575265942.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H3 id="toc-hId-292014113"&gt;Managing Application Versions with the Application Frontend Service CLI&lt;/H3&gt;&lt;P&gt;You can perform the same version management actions using the&amp;nbsp;&lt;A href="https://www.npmjs.com/package/@sap/appfront-cli" target="_blank" rel="noopener nofollow noreferrer"&gt;Application Frontend service CLI&lt;/A&gt;.&lt;BR /&gt;To activate or delete versions, you need the &lt;STRONG&gt;Application Frontend Developer&lt;/STRONG&gt; role.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Activate a version&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To activate a specific version of an application, use:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl activate APPLICATION VERSION&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;STRONG&gt;Arguments:&lt;/STRONG&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;APPLICATION – Name of the deployed application&lt;/LI&gt;&lt;LI&gt;VERSION – Name of the application version you want to activate&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;STRONG&gt;Delete a version&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To delete a specific version:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl delete APPLICATION VERSION&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&lt;FONT color="#FF0000"&gt;&lt;STRONG&gt;Caution: &lt;/STRONG&gt;&lt;/FONT&gt;If you don't specify an application version, all versions of the application will be deleted. This action cannot be undone.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;View all versions&lt;BR /&gt;&lt;/STRONG&gt;To view versions, your user must be assigned the &lt;STRONG&gt;Application Frontend Viewer&lt;/STRONG&gt; role.&lt;STRONG&gt;&lt;BR /&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;To list all deployed versions of an application:&lt;/P&gt;&lt;pre class="lia-code-sample language-bash"&gt;&lt;code&gt;afctl list APPLICATION&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;For example, if you run afctl list employees after activating version 2.0.0 in the example above, the output would show all available versions, including the active one.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="talia_gurevich_12-1752575684949.png" style="width: 400px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/286854i6E3210515F1D3057/image-size/medium?v=v2&amp;amp;px=400" role="button" title="talia_gurevich_12-1752575684949.png" alt="talia_gurevich_12-1752575684949.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you can see, with built-in versioning and flexible deployment options, Application Frontend Service makes it easy to deliver updates with confidence.&lt;BR /&gt;Whether you work in the SAP BTP Cockpit or prefer the CLI, you can roll out changes safely without impacting the live version during development or testing.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/version-control-made-simple-with-application-frontend-service/ba-p/14152775"/>
    <published>2025-07-29T19:44:46.412000+02:00</published>
  </entry>
</feed>
