<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/members/developer-advocates/nicoschoenteich.xml</id>
  <title>SAP Community - Nicolai Schoenteich</title>
  <updated>2025-07-29T11:30:18.698285+00:00</updated>
  <link href="https://community.sap.com/t5/user/viewprofilepage/user-id/898" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>Nicolai Schoenteich in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/can-we-deploy-sapui5-web-components-app-onto-s-4-hana-on-premise/qaa-p/13934291#M4891930</id>
    <title>Re: Can we deploy sapui5 web components app onto S/4 HANA...</title>
    <updated>2024-11-11T15:31:21.385000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Is this what you are looking for?&lt;/P&gt;&lt;P&gt;&lt;A href="https://www.npmjs.com/package/@sap/abap-deploy" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.npmjs.com/package/@sap/abap-deploy&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/can-we-deploy-sapui5-web-components-app-onto-s-4-hana-on-premise/qaa-p/13934291#M4891930"/>
    <published>2024-11-11T15:31:21.385000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/ba-p/13936047</id>
    <title>On what makes a great frontend framework and why UI5 is one</title>
    <updated>2024-11-12T17:32:10.336000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;H1 id="toc-hId-945751546"&gt;On what makes a great frontend framework and why UI5 is one&lt;/H1&gt;&lt;P&gt;&lt;EM&gt;This blog post is about the qualities of an effective frontend framework and highlights UI5 as the best choice for modern, scalable, and future-proof web applications in the enterprise context. The purpose of this post is not to help you decide which frontend framework to choose for your next project, be it &lt;A href="https://ui5.sap.com/" target="_blank" rel="noopener noreferrer"&gt;UI5&lt;/A&gt;, &lt;A href="https://react.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;React&lt;/A&gt;, &lt;A href="https://vuejs.org/" target="_blank" rel="noopener nofollow noreferrer"&gt;Vue.js&lt;/A&gt;, &lt;A href="https://svelte.dev/" target="_blank" rel="noopener nofollow noreferrer"&gt;Svelte&lt;/A&gt;, or any combination of these (&lt;A href="https://astro.build/" target="_blank" rel="noopener nofollow noreferrer"&gt;Astro&lt;/A&gt;). It's purpose is more to highlight the strengths of UI5 based on my personal experience. Therefore, any examples, details or explanations I present are not (meant to be) exhaustive and are presented from my personal point of view.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;I originally presented the content of this blog post at the &lt;A href="https://community.sap.com/t5/sap-community/flexso-tech-day-2024/ev-p/13897666" target="_self"&gt;Flexso Tech Day 2024&lt;/A&gt;.&lt;/EM&gt;&lt;/P&gt;&lt;H2 id="toc-hId-878320760"&gt;Qualities of a great frontend framework&lt;/H2&gt;&lt;P&gt;When we think about what makes a great frontend framework (or any programming framework for that matter), we usually think along the lines of the following criteria:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;performance&lt;/LI&gt;&lt;LI&gt;scalability&lt;/LI&gt;&lt;LI&gt;flexibility&lt;/LI&gt;&lt;LI&gt;stability&lt;/LI&gt;&lt;LI&gt;libraries&lt;/LI&gt;&lt;LI&gt;documentation&lt;/LI&gt;&lt;LI&gt;community&lt;/LI&gt;&lt;LI&gt;dev experience&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;These are all very important and valid aspects. In fact, a lot of frameworks have already checked those boxes. A few shine more in certain areas than others, but there is wide range frameworks that are great in these regards. However, there is one central aspect, that is by far the most important one (in my humble opinion):&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Getting things done.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;Even more importantly:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Getting things done, fast. And make them last.&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;In that regard, no other frameworks comes close to UI5. Let me explain.&lt;/P&gt;&lt;H2 id="toc-hId-681807255"&gt;(1) The controls libraries vs. (2) the framework&lt;/H2&gt;&lt;P&gt;I like to categorize UI5's capabilities and features in two main areas. One the one hand, there is the (1) control libraries. With more than 1000 controls available out-of-the-box, it is incredibly easy to build complex applications containing different layouts, tables, forms, charts, and more with little to no custom coding. Because of these controls, theming (SAP Fiori) and accessibility are also a breeze. Controls are well designed and simply enterprise ready. On the other hand, there is the (2) framework itself, with all its integrations, service connections, tooling, i18n features, and (closeness to the) core technology. See this quick list of built-in framework features (not exhaustive and in no particular order):&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;integration into Fiori Launchpad&lt;/LI&gt;&lt;LI&gt;service connections: OData(!), REST, you name it&lt;/LI&gt;&lt;LI&gt;i18n&lt;/LI&gt;&lt;LI&gt;p13n&lt;/LI&gt;&lt;LI&gt;routing&lt;/LI&gt;&lt;LI&gt;grow-as-you-go&lt;/LI&gt;&lt;LI&gt;custom controls&lt;/LI&gt;&lt;LI&gt;close to the core technologies: HTML, CSS, JavaScript&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;I will focus on this second area in this blog post and will now go into detail.&lt;/P&gt;&lt;H2 id="toc-hId-485293750"&gt;The framework&lt;/H2&gt;&lt;H3 id="toc-hId-417862964"&gt;Grow-as-you-go&lt;/H3&gt;&lt;P&gt;Unlike many other frontend frameworks, UI5 makes it very easy to get started. Essentially you only need two files: an &lt;FONT color="#339966"&gt;index.html&lt;/FONT&gt; and one JavaScript file. An application like this doesn't even require a web server to work, because it is that simple (we will cover the aspect "closeness to core technologies" later). Of course, this kind of application doesn't make use of all the UI5 goodies available, nor does it follow its best practices, but it works - and that shows UI5's great design. Let's take a look at this simple example:&lt;/P&gt;&lt;P&gt;index.html&lt;/P&gt;&lt;PRE&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;title&amp;gt;UI5 Walkthrough&amp;lt;/title&amp;gt;
        &amp;lt;script
            id="sap-ui-bootstrap"
            src="https://ui5.sap.com/resources/sap-ui-core.js"
            data-sap-ui-async="true"
            data-sap-ui-on-init="module:ui5/walkthrough/index"
            data-sap-ui-resource-roots='{ "ui5.walkthrough": "./" }'&amp;gt;
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class="sapUiBody" id="content"&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/PRE&gt;&lt;P&gt;index.js&lt;/P&gt;&lt;PRE&gt;sap.ui.define([
    "sap/m/IllustratedMessage",
], (IllustratedMessage) =&amp;gt; {
    "use strict"

    new IllustratedMessage({
        title: "Welcome to Flexso Tech Day 2024!",
        illustrationType: "sapIllus-SuccessHighFive"
    }).placeAt("content")
})&lt;/PRE&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="screen-shot0.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/190077iEE97C2DBA211C00C/image-size/large?v=v2&amp;amp;px=999" role="button" title="screen-shot0.png" alt="screen-shot0.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;As you can see in the screen shot above, I simply opened the &lt;FONT color="#339966"&gt;index.html&lt;/FONT&gt; file in my browser and the UI5 application was up and running. This is of course not how you would build "real" applications, but it does demonstrate how easy it is to get started. And I personally love starting with simple project setups like this and following a grow-as-you-go approach. It's just a nice feeling to actually know what each individual file is doing, instead of having 100 files and not knowing what half of them are for. And let's admit it, we've all been there.&lt;/P&gt;&lt;H3 id="toc-hId-221349459"&gt;Custom controls&lt;/H3&gt;&lt;P&gt;One of the great things about UI5 is that you can build your own custom controls. This sounds trivial, but it's actually a big deal, since you can operate within the UI5 framework and get all of its great features for free (see list above), while still being able to build anything you (or your customers) ever dreamed of. There is zero lock-in and you get the expensive part (in terms of coding effort) for free, like communicating with the backend. Fantastic, isn't it? Possibilities are endless. This is also due to the fact that UI5 itself is very close to its core technologies, namely HTML, CSS, and JavaScript. It means you can build your custom controls the same way, with technology you already know. Technically speaking, custom controls extend the &lt;FONT color="#339966"&gt;sap.ui.core.Control&lt;/FONT&gt; class (or any higher level class that itself extends the base class), which is how they become part of the framework and its lifecycle. Let's create a simple custom control to really show how flexible and powerful at the same time UI5 is.&lt;/P&gt;&lt;P&gt;I generated a little starter project using the &lt;A href="https://github.com/ui5-community/generator-ui5-project/" target="_blank" rel="noopener nofollow noreferrer"&gt;easy-ui5 project generator&lt;/A&gt;, which support a monorepo approach. This way, we can keep our whole project (frontend, backend, and everything in between) in one well-managed (thanks to &lt;A href="https://docs.npmjs.com/cli/v8/using-npm/workspaces" target="_blank" rel="noopener nofollow noreferrer"&gt;npm workspaces&lt;/A&gt;) project. I ran the following commands and selected all default options. For the custom controls I created one "BasicList" and one "BasicListItem":&lt;/P&gt;&lt;PRE&gt;yo easy-ui5 project project
cd com.myorg.myui5project/
yo easy-ui5 project cap
yo easy-ui5 project customcontrol
yo easy-ui5 project customcontrol&lt;/PRE&gt;&lt;P&gt;The generated project structure looks like this (some artifacts omitted for brevity):&lt;/P&gt;&lt;PRE&gt;- myui5app/
  - webapp/
    - control/
      - BasicList.js
      - BasicListItem.js
    - controller/
    - css/
    - i18n/
    - model/
    - test/
    - view/
    - Component.js
    - index.html
    - manifest.json
  - package.json
  - ui5.yaml
- server/
  - db/
    - data/
      - my.bookshop-Books.csv
    - schema.cds
  + srv/
  - package.json
  - xs-security.json
- mta.yaml
- package.json&lt;/PRE&gt;&lt;P&gt;The backend of the project is based on the SAP Cloud Application Programming Model and came with a tiny sample, the bookshop. I changed the data model to represent a session catalog (for the event this content was originally presented at) and added corresponding sample data. Since this blog post is about UI5, I will just show the new &lt;FONT color="#339966"&gt;schema.cds&lt;/FONT&gt;, but not go into any more detail about building the backend:&lt;/P&gt;&lt;PRE&gt;namespace my.sessions;

using {cuid} from '@sap/cds/common';

entity Sessions : cuid {
    title    : String;
    abstract : String;
    speaker  : String;
}&lt;/PRE&gt;&lt;P&gt;Now for the frontend, we want to build a list of sessions that renders into simple HTML elements. Not just because it's simple, but because it shows that UI5 (and the underlying core technologies) is a blank canvas. &lt;STRONG&gt;&lt;EM&gt;If you can use UI5 to write HTML, CSS, and JavaScript, you can use it to write anything.&lt;/EM&gt; &lt;/STRONG&gt;See it as your entry door to building frontend applications in the enterprise context. I know I am repeating myself, but with UI5 you have this flexibility &lt;STRONG&gt;&lt;EM&gt;on top&lt;/EM&gt;&lt;/STRONG&gt; of the (1) control libraries and (2) the framework.&lt;/P&gt;&lt;P&gt;Let's start with the &lt;FONT color="#339966"&gt;BasicList.js&lt;/FONT&gt;:&lt;/P&gt;&lt;PRE&gt;sap.ui.define([
    "sap/ui/core/Control"
], function(Control) {
    "use strict"

    return Control.extend("myui5app.control.BasicList", {
        metadata: {
            properties: {
                editable: { type: "boolean" }
            },
            aggregations: {
                items: { type: "sap.ui.core.Control" },
            },
            defaultAggregation: "items"
        },

        renderer(oRm, oControl) {
            oRm.write("&amp;lt;ul")
            oRm.writeControlData(oControl) // adds UI5 specific attributes to the HTML element
            oRm.write("&amp;gt;")
            oControl.getItems().forEach(item =&amp;gt; {
                oRm.renderControl(item)
            })
            oRm.write("&amp;lt;/ul&amp;gt;")
        },

    })
})&lt;/PRE&gt;&lt;P&gt;As already mentioned, this custom control extends the &lt;FONT color="#339966"&gt;sap.ui.core.Control&lt;/FONT&gt; class. We define some metadata, like the control's properties and aggregations (a fancy word for "its children"). These properties and aggregations can be used when consuming the control, for example in an XML view. Probably the most interesting part in the code above is the &lt;FONT color="#339966"&gt;renderer()&lt;/FONT&gt; method, where we essentially use the render manager (&lt;FONT color="#339966"&gt;oRm&lt;/FONT&gt; - opinions about hungarian notation anyone? &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;) to write our HTML. We open an unordered list (&lt;FONT color="#339966"&gt;&amp;lt;ul&amp;gt;&lt;/FONT&gt;), loop over all items (aggregations/children), call their respective renderer, and close the list. The great thing here is that we can combine UI5 internal methods (like &lt;FONT color="#339966"&gt;getItems()&lt;/FONT&gt;) with (more or less) plain HTML - again, we have great flexibility &lt;STRONG&gt;&lt;EM&gt;on top&lt;/EM&gt;&lt;/STRONG&gt; of the framework.&lt;/P&gt;&lt;P&gt;Let's now continue with the &lt;FONT color="#339966"&gt;BasicListItem.js&lt;/FONT&gt;:&lt;/P&gt;&lt;PRE&gt;sap.ui.define([
    "sap/ui/core/Control"
], function(Control) {
    "use strict"

    return Control.extend("myui5app.control.BasicListItem", {
        metadata: {
            properties: {
                title: { type: "string" },
                detail1: { type: "string" },
                detail2: { type: "string" }
            }
        },

        renderer(oRm, oControl) {
            oRm.write("&amp;lt;li")
            oRm.writeControlData(oControl)
            oRm.write("&amp;gt;")
            if (oControl.getParent().getEditable()) {
                oRm.write("&amp;lt;input")
                oRm.addStyle("width", "calc(100vw - 100px)")
                oRm.writeStyles()
                oRm.writeAttribute("value", oControl.getTitle())
                oRm.write("'&amp;gt;&amp;lt;/input&amp;gt;")
            } else {
                oRm.write(oControl.getTitle())
            }
            oRm.write("&amp;lt;ul&amp;gt;")
            oRm.write("&amp;lt;li&amp;gt;")
            oRm.writeEscaped(oControl.getDetail1())
            oRm.write("&amp;lt;/li&amp;gt;")
            oRm.write("&amp;lt;li&amp;gt;")
            oRm.writeEscaped(oControl.getDetail2())
            oRm.write("&amp;lt;/li&amp;gt;")
            oRm.write("&amp;lt;/ul&amp;gt;")
            oRm.write("&amp;lt;/li&amp;gt;")
        },

        onchange(e) {
            this.setProperty("title", e.target.value)
        }

    })
})&lt;/PRE&gt;&lt;P&gt;This implementation is arguably a little more complex, but only because we call the &lt;FONT color="#339966"&gt;oControl.getParent().getEditable()&lt;/FONT&gt; method to check whether the outer list is editable or not. If it is editable, we render an input element, if not, we render an simple text. Regarding that, did you notice that we never actually defined a &lt;FONT color="#339966"&gt;getEditable()&lt;/FONT&gt; method? UI5 created that for us automatically when we defined the property editable for the &lt;FONT color="#339966"&gt;BasicList&lt;/FONT&gt; - nice! Another nice thing is that we can use the &lt;FONT color="#339966"&gt;oRm.addStyle()&lt;/FONT&gt; method to essentially add CSS to our custom control. We now got all pieces of the puzzle: HTML, CSS, JavaScript.&lt;/P&gt;&lt;P&gt;Let's now use our custom controls in the &lt;FONT color="#339966"&gt;MainView.view.xml&lt;/FONT&gt;:&lt;/P&gt;&lt;PRE&gt;&amp;lt;mvc:View
    controllerName="myui5app.controller.MainView"
    xmlns:mvc="sap.ui.core.mvc"
    displayBlock="true"
    xmlns="sap.m"
    xmlns:cc="myui5app.control"&amp;gt;
    &amp;lt;VBox&amp;gt;
        &amp;lt;Title text="Flexso Tech Day 2024" /&amp;gt;
        &amp;lt;Button text="Edit" press=".edit" /&amp;gt;
    &amp;lt;/VBox&amp;gt;
    &amp;lt;cc:BasicList id="sessions" items="{/Sessions}" editable="false"&amp;gt;
        &amp;lt;cc:BasicListItem title="{title}" detail1="{abstract}" detail2="{speaker}"/&amp;gt;
    &amp;lt;/cc:BasicList&amp;gt;
&amp;lt;/mvc:View&amp;gt;&lt;/PRE&gt;&lt;P&gt;We make use of the data binding syntax to bind our default OData V4 model to our custom controls. This model was added to our application when we ran the &lt;FONT color="#339966"&gt;cap&lt;/FONT&gt; subgenerator of the easy-ui5 project generator. We will get back to this in just a second. Notice how we import our custom controls by defining a new &lt;FONT color="#339966"&gt;cc&lt;/FONT&gt; namespace pointing to the &lt;FONT color="#339966"&gt;control/&lt;/FONT&gt; directory within our application. Also notice how we combine our custom controls with standard UI5 controls like the &lt;FONT color="#339966"&gt;Title&lt;/FONT&gt; and &lt;FONT color="#339966"&gt;Button&lt;/FONT&gt;. Again, flexibility &lt;STRONG&gt;&lt;EM&gt;on top&lt;/EM&gt;&lt;/STRONG&gt; of the framework.&lt;/P&gt;&lt;P&gt;This is what the application now looks like:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="screen-shot1.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/190092iABA966A7C0E8BC57/image-size/large?v=v2&amp;amp;px=999" role="button" title="screen-shot1.png" alt="screen-shot1.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;To further undermine the tight integration of our custom controls with the rest of our UI5 application, let's add some logic to the &lt;FONT color="#339966"&gt;MainView.controller.js&lt;/FONT&gt; to make the custom list editable:&lt;/P&gt;&lt;PRE&gt;sap.ui.define(["sap/ui/core/mvc/Controller"],
    function(Controller) {
        "use strict"

        return Controller.extend("myui5app.controller.MainView", {
            edit: function() {
                const basicList = this.byId("sessions")
                basicList.setEditable(!basicList.getEditable())
            }

        })
    })&lt;/PRE&gt;&lt;P&gt;The &lt;FONT color="#339966"&gt;edit&lt;/FONT&gt; method was previously added to the press event of the &lt;FONT color="#339966"&gt;Button&lt;/FONT&gt; in the &lt;FONT color="#339966"&gt;MainView.view.xml&lt;/FONT&gt;. It simply toggles the &lt;FONT color="#339966"&gt;editable&lt;/FONT&gt; property of the &lt;FONT color="#339966"&gt;BasicList&lt;/FONT&gt; control. This is a very simple example, but it shows how easy it is to interact with your custom controls from somewhere else in your application.&lt;/P&gt;&lt;P&gt;Now comes my favorite part. If we press the "Edit" button and edit a title of a session, UI5 will actually submit the change to the backend. It will compose the correspoding OData batch request for us and the backend is automatically updated. This is what the OData V4 model as part of UI5 does for us, on top of custom controls! How great is that?! See the below screen shots for proof:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="screen-shot2.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/190093iE8DF318968B279A9/image-size/large?v=v2&amp;amp;px=999" role="button" title="screen-shot2.png" alt="screen-shot2.png" /&gt;&lt;/span&gt;&lt;BR /&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="screen-shot3.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/190082i8146E80EFCC1E58D/image-size/large?v=v2&amp;amp;px=999" role="button" title="screen-shot3.png" alt="screen-shot3.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId--104246765"&gt;UI5 2.x&lt;/H2&gt;&lt;P&gt;UI5 is currently still in major version 1, despite it being released in 2013. However, this doesn't mean that the framework is outdated. Over 130 minor versions have already been released. If anything, this shows the stability and maturity of the framework, as well as SAP's commitment to backwards compatibility, which is very important in the enterprise context.&lt;BR /&gt;The next major version, UI5 2.x, is already in the works and will bring a lot of new features and improvements. One of the most anticipated features (for me) is the native support for web components, which will allow you to use your own web components within the UI5 framework. This will bring even greater flexibility and compatibility to UI5, especially in the context of "custom controls".&lt;/P&gt;&lt;P&gt;To conclude, I don't know of any other frontend framework that offers such great flexibility on top of a being enterprise-ready out-of-the-box and having 1000+ built-in controls (which I barely touched here). This is what I mean when I say "Getting things done, fast. And make them last.".&lt;/P&gt;&lt;P&gt;I am looking forward to hearing your thoughts/input/experiences in the comments below. Happy coding!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/ba-p/13936047"/>
    <published>2024-11-12T17:32:10.336000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/bc-p/13936627#M176971</id>
    <title>Re: On what makes a great frontend framework and why UI5 is one</title>
    <updated>2024-11-13T08:56:22.081000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/25802"&gt;@frankmeertens&lt;/a&gt;, thanks for the feedback. And I agree!&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/bc-p/13936627#M176971"/>
    <published>2024-11-13T08:56:22.081000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/can-we-deploy-sapui5-web-components-app-onto-s-4-hana-on-premise/qaa-p/13937175#M4892278</id>
    <title>Re: Can we deploy sapui5 web components app onto S/4 HANA...</title>
    <updated>2024-11-13T16:38:23.525000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/1734257"&gt;@ThaaraSoft&lt;/a&gt; have you had a chance to try it?</content>
    <link href="https://community.sap.com/t5/technology-q-a/can-we-deploy-sapui5-web-components-app-onto-s-4-hana-on-premise/qaa-p/13937175#M4892278"/>
    <published>2024-11-13T16:38:23.525000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/creating-a-personal-development-environment-3-vim-keybindings/ba-p/13938067</id>
    <title>Creating a personal development environment #3 - Vim keybindings</title>
    <updated>2024-11-14T12:42:21.722000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;OL&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/creating-a-personal-development-environment-1-why-neovim/ba-p/13733533" target="_blank"&gt;#1 - Why Neovim?&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/creating-a-personal-development-environment-2-miscellaneous-status-line-and/ba-p/13922474" target="_blank"&gt;#2 - Miscellaneous, status line, and color scheme&lt;/A&gt;&lt;/LI&gt;&lt;LI&gt;#3 - Vim keybindings (this blog post)&lt;/LI&gt;&lt;/OL&gt;&lt;P&gt;&lt;EM&gt;Building on top of the previous two blog posts, this blog post will focus learning Vim keybindings, which is very central for using any Vim-based editor, let alone be productive with it.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;Before we get started with the keybindings though, let's do a quick recap of what my Neovim configuration, located at &lt;FONT color="#339966"&gt;~/.config/nvim/&lt;/FONT&gt;, looked like a this point:&lt;/P&gt;&lt;PRE&gt;- lua/
  - plugins/
    - filetree.lua
    - theme.lua
  - misc.lua
  - statusline.lua
- init.lua
- lazy-lock.json&lt;/PRE&gt;&lt;P&gt;What I did so far:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;configured &lt;A href="https://github.com/folke/lazy.nvim" target="_blank" rel="noopener nofollow noreferrer"&gt;lazy.nvim&lt;/A&gt; as a plugin manager&lt;/LI&gt;&lt;LI&gt;added &lt;A href="https://github.com/nvim-tree/nvim-tree.lua" target="_blank" rel="noopener nofollow noreferrer"&gt;nvim-tree&lt;/A&gt; as a file explorer&lt;/LI&gt;&lt;LI&gt;customized the status line&lt;/LI&gt;&lt;LI&gt;added a nice color scheme&lt;/LI&gt;&lt;LI&gt;other miscellaneous settings&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now while doing all of this, we implicitly already talked about keybindings. After all, Neovim is a keyboard-first editor. You shouldn't really be using the mouse at all (although you can if you want to), which is why you have to use keybindings. However, we only really talked about custom keybindings - the ones that relate to a plugin and where you define the shortcut and the associated operation. But the most important keybindings are the ones that are built into Neovim itself, and since Neovim is a fork of Vim (did I already mention that? &lt;span class="lia-unicode-emoji" title=":thinking_face:"&gt;🤔&lt;/span&gt;), we can simply refer to them as Vim keybindings (also when googling &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;). These are the ones you will use the most for moving around, switching modes, editing text, and so on. Vim keybindings can seem quite odd at first (from a modern perspective), but they are incredibly powerful and well though-out.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Regarding all my custom keybindings I mentioned that I like to group my keybindings by the category they fall into (in my understanding) and prefix them with the corresponding letter. For example, all keybinding related to the file system start with the letter &lt;FONT color="#339966"&gt;f&lt;/FONT&gt;, like &lt;FONT color="#339966"&gt;fe&lt;/FONT&gt; for opening the file explorer. Another example are all bindings related to the language server start with the letter &lt;FONT color="#339966"&gt;l&lt;/FONT&gt;, like &lt;FONT color="#339966"&gt;ld&lt;/FONT&gt; for "go to definition". This system helps me remembering them all. It somewhat different to what other people mostly do, which is prefixing all keybindings with a defined leader key, for example space.&lt;/EM&gt;&lt;/P&gt;&lt;H2 id="toc-hId-1074893909"&gt;Vim keybindings&lt;/H2&gt;&lt;P&gt;I will not even try to &lt;A href="https://vim.rtorr.com/" target="_blank" rel="noopener nofollow noreferrer"&gt;list&lt;/A&gt; or &lt;A href="https://world.hey.com/dhh/wonderful-vi-a1d034d3" target="_blank" rel="noopener nofollow noreferrer"&gt;explain the structure&lt;/A&gt; of all Vim keybindings in this blog post - others can do that better. I will also not extensively talk about &lt;A href="https://www.warp.dev/terminus/vim-modes" target="_blank" rel="noopener nofollow noreferrer"&gt;modes&lt;/A&gt;, I only really use normal, insert, and visual mode. But I can give you an insight into the keybindings I use on a daily basis and how I personally make sense of them. Hopefully this helps you prioritize which keybindings to learn first and how to remember them. The keybindings listed here work in normal and visual mode, but not in insert mode, where your keystrokes will obviously be interpreted as text input.&lt;/P&gt;&lt;P&gt;For navigating in a file, I use the following keybindings:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;G&lt;/FONT&gt;: Go to the end of the file&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;gg&lt;/FONT&gt;: Go to the beginning of the file&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;$&lt;/FONT&gt;: Go to the end of the line&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;0&lt;/FONT&gt;: Go to the beginning of the line&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;e&lt;/FONT&gt;: Move to the end of the current word&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;b&lt;/FONT&gt;: Move to the beginning of the current word&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;And I do have to confess I am one of the few Vim users who actually uses the arrow keys to move around (I know, I know), instead of &lt;FONT color="#339966"&gt;h&lt;/FONT&gt;, &lt;FONT color="#339966"&gt;j&lt;/FONT&gt;, &lt;FONT color="#339966"&gt;k&lt;/FONT&gt;, and &lt;FONT color="#339966"&gt;l&lt;/FONT&gt;. I have to reasons for that: First of all, I just couldn't get used to them. Second of all, I often find myself wanting to navigate around in insert mode, and the arrow keys are just more convenient in that situation than switching modes.&lt;/P&gt;&lt;P&gt;For editing text, I use the following keybindings:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;i&lt;/FONT&gt;: Enter insert mode&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;a&lt;/FONT&gt;: Enter insert mode after the current cursor position (one character further right than with i)&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;A&lt;/FONT&gt;: Enter insert mode at the end of the line&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;u&lt;/FONT&gt;: Undo the last change&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;Ctrl-r&lt;/FONT&gt;: Redo the last change&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;dw&lt;/FONT&gt;: Delete the current word&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;dd&lt;/FONT&gt;: Delete the current line&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;D&lt;/FONT&gt;: Delete from the current cursor position to the end of the line&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;For selecting text and copy-pasta magic, I use the following keybindings:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;v&lt;/FONT&gt;: Enter visual mode&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;V&lt;/FONT&gt;: Enter visual line mode (visually select whole line)&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;y&lt;/FONT&gt;: Yank (copy) the selected text (in visual mode)&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;d&lt;/FONT&gt;: Delete the selected text (in visual mode)&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;c&lt;/FONT&gt;: Change the selected text (in visual mode, delete and enter insert mode)&lt;/LI&gt;&lt;LI&gt;&lt;FONT color="#339966"&gt;p&lt;/FONT&gt;: Paste the yanked text after the cursor&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;With this set of keybindings (that barely scratches the surface of what's possible) you can actually accomplish a lot of things, especially when combining them. For example, for navigating to the end of the file and going into insert mode at the end of the last line, you can simply use &lt;FONT color="#339966"&gt;GA&lt;/FONT&gt;. There are probably more efficient ways to get certain things done, but this "minimalistic" set of keybindings works well for me and most importantly, I can remember them. This is just the start and there is a lot more to learn, but that takes time and practice. I will try and add more keybindings to my repertoire as I go along. It's a fun journey.&lt;/P&gt;&lt;P&gt;And that's it for this blog post. Let's talk about the language server and how you can tailor it to your liking next time - arguably the most important and coolest part of a modern development environment.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/creating-a-personal-development-environment-3-vim-keybindings/ba-p/13938067"/>
    <published>2024-11-14T12:42:21.722000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-use-destinations-during-local-development-cloud-foundry/bc-p/13948582#M177278</id>
    <title>Re: SAP Tech Bytes: Use Destinations During Local Development - Cloud Foundry Basics #4</title>
    <updated>2024-11-26T10:54:45.361000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/15456"&gt;@AdilBasha1SAP26&lt;/a&gt;,&amp;nbsp;these links work for me. Not sure why you can't access them. Maybe try another browser or a private window.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-use-destinations-during-local-development-cloud-foundry/bc-p/13948582#M177278"/>
    <published>2024-11-26T10:54:45.361000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/bc-p/13950700#M177338</id>
    <title>Re: On what makes a great frontend framework and why UI5 is one</title>
    <updated>2024-11-28T09:49:53.786000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/14806"&gt;@akuller&lt;/a&gt;, unfortunately not. There is a nightly build available though for OpenUI5 2.0: &lt;A href="https://sdk.openui5.org/nightly/2/resources/sap-ui-core.js" target="_blank" rel="nofollow noopener noreferrer"&gt;https://sdk.openui5.org/nightly/2/resources/sap-ui-core.js&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/on-what-makes-a-great-frontend-framework-and-why-ui5-is-one/bc-p/13950700#M177338"/>
    <published>2024-11-28T09:49:53.786000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-use-destinations-during-local-development-cloud-foundry/bc-p/13950706#M177339</id>
    <title>Re: SAP Tech Bytes: Use Destinations During Local Development - Cloud Foundry Basics #4</title>
    <updated>2024-11-28T09:56:29.198000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/15456"&gt;@AdilBasha1SAP26&lt;/a&gt;,&lt;/P&gt;&lt;P&gt;if you run your CAP server and UI5 (or Fiori elements) app in the same process, make sure to use the &lt;A href="https://www.npmjs.com/package/cds-plugin-ui5" target="_self" rel="nofollow noopener noreferrer"&gt;cds-plugin-ui5&lt;/A&gt;. This way, the UI5 Tooling will be hooked into your CAP server, so that the ui5.yaml configuration is being used as well.&lt;/P&gt;&lt;P&gt;The xs-app.json is the configuration file the approuter, it has nothing to do with the CAP server per se - it's a separate application. You can run the approuter locally as well. To have the full service connectivity (that you have on SAP BTP) you will need to add the respective environment variables to the approuter's default-env.json. I did a video about that:&amp;nbsp;&lt;A href="https://www.youtube.com/watch?v=Jbq6zaKEUyY" target="_blank" rel="nofollow noopener noreferrer"&gt;https://www.youtube.com/watch?v=Jbq6zaKEUyY&lt;/A&gt;&lt;BR /&gt;&lt;BR /&gt;Hope this helps.&lt;/P&gt;&lt;P&gt;Best, Nico&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-use-destinations-during-local-development-cloud-foundry/bc-p/13950706#M177339"/>
    <published>2024-11-28T09:56:29.198000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13977698#M178011</id>
    <title>Re: SAP Tech Bytes: Using the SAP Approuter at dev time - a full-stack journey with UI5 and SAP CAP</title>
    <updated>2025-01-06T13:43:04.120000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/868461"&gt;@ahmetdik&lt;/a&gt;,&lt;/P&gt;&lt;P&gt;maybe this helps:&amp;nbsp;&lt;A href="https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13577420/highlight/true#M167050" target="_blank"&gt;https://community.sap.com/t5/technology-blogs-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13577420/highlight/true#M167050&lt;/A&gt;&lt;/P&gt;&lt;P&gt;Best, Nico&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13977698#M178011"/>
    <published>2025-01-06T13:43:04.120000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13977791#M178015</id>
    <title>Re: SAP Tech Bytes: Using the SAP Approuter at dev time - a full-stack journey with UI5 and SAP CAP</title>
    <updated>2025-01-06T15:14:05.016000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/868461"&gt;@ahmetdik&lt;/a&gt;,&amp;nbsp;which CAP version are you using?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13977791#M178015"/>
    <published>2025-01-06T15:14:05.016000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13979402#M178063</id>
    <title>Re: SAP Tech Bytes: Using the SAP Approuter at dev time - a full-stack journey with UI5 and SAP CAP</title>
    <updated>2025-01-07T16:39:41.834000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/868461"&gt;@ahmetdik&lt;/a&gt;,&lt;/P&gt;&lt;P&gt;Did you do a proper cds bind in the CAP server root before running the dev-approuter?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13979402#M178063"/>
    <published>2025-01-07T16:39:41.834000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/ba-p/13982639</id>
    <title>SAP Developer Challenge - SAP Community Escape House - UI5</title>
    <updated>2025-01-13T00:00:00.016000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;&lt;EM&gt;The new year starts with a brand new SAP Developer Challenge! The Developer Advocates have created the &lt;A href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com" target="_blank" rel="noopener noreferrer"&gt;SAP Community Escape House&lt;/A&gt; - a virtual escape house (consisting of multiple rooms) that you can play in your browser. Read on for all the details.&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;SAP Developer Challenges are all about having fun, trying new things, and learning along the way. You can also earn a badge in the SAP Community upon successful completion. For this year, all SAP Developer Challenges will happen in the &lt;A href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com" target="_blank" rel="noopener noreferrer"&gt;SAP Community Escape House&lt;/A&gt;. For each challenge we will unlock a new room in the house, and they all have a specific focus topic. Completing a challenge means successfully escaping the room by solving a series of coding-related tasks. The first room we unlocked for January (see schedule below) is about &lt;A href="https://ui5.sap.com/" target="_self" rel="noopener noreferrer"&gt;UI5&lt;/A&gt;, more specifically about how to scaffold a UI5 application using the command line.&lt;EM&gt;&lt;BR /&gt;&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-950255724"&gt;How to participate&lt;/H1&gt;&lt;P&gt;Visit the &lt;A href="https://sap-community-escape-house.cfapps.us10.hana.ondemand.com" target="_blank" rel="noopener noreferrer"&gt;SAP Community Escape House&lt;/A&gt; and enter your numeric SAP Community user ID. If you don't know your user ID, go to your SAP Community profile. You can find the numeric ID at the end of the URL.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="2025-01-10_12-59-37.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210644i6A8DE5105EF0BDD3/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-01-10_12-59-37.png" alt="2025-01-10_12-59-37.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;Once you see the SAP Community Escape House, select the UI5 room and start exploring it.&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="2025-01-10_13-01-57.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210649i59D0107F614B54E0/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-01-10_13-01-57.png" alt="2025-01-10_13-01-57.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The user interface of an escape room includes the room itself as well as a terminal. You can click the objects in the room to receive tips. Like in a real (physical) escape room, you will have to try out a few things and explore the room until you receive helpful tips and eventually instructions. These tips and instructions are printed in the terminal next to the room. The terminal is also used to submit solutions to tasks. Read the instructions you receive carefully to understand how.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-center" image-alt="2025-01-10_13-02-11.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/210648i3DE9E1555455519A/image-size/large?v=v2&amp;amp;px=999" role="button" title="2025-01-10_13-02-11.png" alt="2025-01-10_13-02-11.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;If you successfully escape the room (you will know when that happens), you will receive a badge in the SAP Community. We will assign the badges once the challenge closes.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;H1 id="toc-hId-753742219"&gt;The schedule&lt;/H1&gt;&lt;P&gt;The UI5 room was unlocked on January 13th and will stay unlocked until the end of the year. However, the challenge closes on January 31st, so you will have to escape the room until then to qualify for a badge. Unlike the previous year, this SAP Developer Challenge does not consist of weekly sub-challenges. The next room (next challenge) will be unlocked in February.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;Good luck and happy escaping!&lt;/STRONG&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/ba-p/13982639"/>
    <published>2025-01-13T00:00:00.016000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/bc-p/13983957#M178255</id>
    <title>Re: SAP Developer Challenge - SAP Community Escape House - UI5</title>
    <updated>2025-01-13T11:03:39.549000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/61"&gt;@Marian_Zeis&lt;/a&gt;,&amp;nbsp;I'm glad you like it &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt; You know I love my terminal and half-force everyone to try it too &lt;span class="lia-unicode-emoji" title=":winking_face:"&gt;😉&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/bc-p/13983957#M178255"/>
    <published>2025-01-13T11:03:39.549000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/bc-p/13983962#M178256</id>
    <title>Re: SAP Developer Challenge - SAP Community Escape House - UI5</title>
    <updated>2025-01-13T11:04:40.172000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/6779"&gt;@Henning&lt;/a&gt;,&amp;nbsp;thanks for that - it can be confusing with the two distinct profile sections...&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-developer-challenge-sap-community-escape-house-ui5/bc-p/13983962#M178256"/>
    <published>2025-01-13T11:04:40.172000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13998077#M178590</id>
    <title>Re: SAP Tech Bytes: Using the SAP Approuter at dev time - a full-stack journey with UI5 and SAP CAP</title>
    <updated>2025-01-27T15:03:23.996000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/868461"&gt;@ahmetdik&lt;/a&gt;,&lt;/P&gt;&lt;P&gt;hm, I can't seem to wrap my head around this atm. But sounds like you have the CAP server all set up with XSUAA and HANA Cloud, that together with the cds-plugin-ui5 might even be the better alternative (unless you want to test your untranspiled TS UI5 app with real auth at dev time).&lt;/P&gt;&lt;P&gt;I will try to find the time to dig deeper into why the CDS_ENV doesn't seem to take effect when launching the CAP server through the dev-approuter.&lt;/P&gt;&lt;P&gt;Best, Nico&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/13998077#M178590"/>
    <published>2025-01-27T15:03:23.996000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-ui-theme-designer-applying-custom-theme-to-ui5-application/bc-p/14000531#M178671</id>
    <title>Re: SAP Tech Bytes: UI Theme Designer - Applying Custom Theme to UI5 Application</title>
    <updated>2025-01-29T15:32:47.156000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/885561"&gt;@aditi01&lt;/a&gt;&amp;nbsp;, does your exported directory contain the SAP-icons font face somewhere?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-ui-theme-designer-applying-custom-theme-to-ui5-application/bc-p/14000531#M178671"/>
    <published>2025-01-29T15:32:47.156000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/february-s-developer-challenge-in-sap-community-integration/bc-p/14006437#M1745</id>
    <title>Re: February's Developer Challenge in SAP Community - Integration 🧩</title>
    <updated>2025-02-04T09:56:07.480000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/175626"&gt;@Jwan_&lt;/a&gt;&amp;nbsp;, yours is&amp;nbsp;175626.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/february-s-developer-challenge-in-sap-community-integration/bc-p/14006437#M1745"/>
    <published>2025-02-04T09:56:07.480000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/integration-blog-posts/february-s-developer-challenge-in-sap-community-integration/bc-p/14021200#M1788</id>
    <title>Re: February's Developer Challenge in SAP Community - Integration 🧩</title>
    <updated>2025-02-19T10:02:03.147000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/6934"&gt;@SRudra&lt;/a&gt;&amp;nbsp;, have you to tried clicking on the integration suite logo on the fridge?&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/integration-blog-posts/february-s-developer-challenge-in-sap-community-integration/bc-p/14021200#M1788"/>
    <published>2025-02-19T10:02:03.147000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/artificial-intelligence-and-machine-learning-blogs/sap-developer-challenge-march-sap-community-escape-house-ai/bc-p/14046782#M657</id>
    <title>Re: SAP Developer Challenge March - SAP Community Escape House - AI 🤖🧠</title>
    <updated>2025-03-17T09:02:39.336000+01:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi&amp;nbsp;&lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/163296"&gt;@Markus_Hapke1&lt;/a&gt;,&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Can you please try runing a manual npm install in the "/Users/&amp;lt;user&amp;gt;/.npm/_generator-easy-ui5/plugin-generators/generator-ui5-project/" directory and then run the original command again?&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Hope this helps.&lt;BR /&gt;&lt;BR /&gt;Best, Nico&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/artificial-intelligence-and-machine-learning-blogs/sap-developer-challenge-march-sap-community-escape-house-ai/bc-p/14046782#M657"/>
    <published>2025-03-17T09:02:39.336000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/14084558#M180902</id>
    <title>Re: SAP Tech Bytes: Using the SAP Approuter at dev time - a full-stack journey with UI5 and SAP CAP</title>
    <updated>2025-04-23T13:52:23.095000+02:00</updated>
    <author>
      <name>nicoschoenteich</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/898</uri>
    </author>
    <content>&lt;P&gt;Hi &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/868461"&gt;@ahmetdik&lt;/a&gt;,&lt;BR /&gt;&lt;BR /&gt;probably too late now, but after some more digging I found a way to force CAP to use XSUAA when started in hybrid mode through the dev-approuter: &lt;A href="https://github.com/SAP-samples/sap-tech-bytes/blob/cloud-foundry-basics/post6/packages/cap-server/srv/server.js" target="_blank" rel="noopener nofollow noreferrer"&gt;https://github.com/SAP-samples/sap-tech-bytes/blob/cloud-foundry-basics/post6/packages/cap-server/srv/server.js&lt;/A&gt;&lt;/P&gt;&lt;P&gt;It's not pretty by any means, but it works. And since it's a dev time thing, I guess that's ok.&lt;/P&gt;&lt;P&gt;Please refer to this repo for the comprehensive sample.&lt;/P&gt;&lt;P&gt;Best, Nico&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-sap/sap-tech-bytes-using-the-sap-approuter-at-dev-time-a-full-stack-journey/bc-p/14084558#M180902"/>
    <published>2025-04-23T13:52:23.095000+02:00</published>
  </entry>
</feed>
