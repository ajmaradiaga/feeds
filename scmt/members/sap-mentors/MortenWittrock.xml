<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/members/sap-mentors/MortenWittrock.xml</id>
  <title>SAP Community - Morten Wittrock</title>
  <updated>2025-10-15T00:10:04.516288+00:00</updated>
  <link href="https://community.sap.com/t5/user/viewprofilepage/user-id/40" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>Morten Wittrock in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/cpi-sap-integration-suite-file-transfer-from-folder-to-sftp-server/qaa-p/12687376#M4760472</id>
    <title>Re: CPI ? SAP Integration Suite file transfer from folder to SFTP server</title>
    <updated>2023-12-26T16:14:06+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi &lt;SPAN class="mention-scrubbed"&gt;stefsnijders&lt;/SPAN&gt; &lt;/P&gt;&lt;P&gt;The Edge Integration Cell file adapter is still on the roadmap. It's scheduled for Q2 2024 at the moment. You can find the roadmap entry &lt;A href="https://roadmaps.sap.com/board?PRODUCT=000D3A47875C1EDB98A8A910864AC24B&amp;amp;q=file&amp;amp;range=CURRENT-LAST#;INNO=31F8B05650641EDDA39CFEFD2E2DB671" target="_blank" rel="noopener noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/cpi-sap-integration-suite-file-transfer-from-folder-to-sftp-server/qaa-p/12687376#M4760472"/>
    <published>2023-12-26T16:14:06+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/ba-p/13572030</id>
    <title>Generative AI and SAP Cloud Integration</title>
    <updated>2023-12-27T16:14:31+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P style="overflow: hidden;margin-bottom: 0px"&gt;&lt;IMG class="migrated-image" src="https://community.sap.com/legacyfs/online/storage/blog_attachments/2023/12/robot.jpg" /&gt;&lt;/P&gt;&lt;BR /&gt;
2023 has been the year of AI and of generative AI in particular. AI is not a new topic, of course. In fact it’s quite old. But since OpenAI launched ChatGPT in November of 2022, the pace of innovation in AI has gone through the roof with no sign of slowing down any time soon.&lt;BR /&gt;
&lt;BR /&gt;
So it probably didn’t come as a huge surprise, when Jürgen Müller announced in his SAP TechEd 2023 keynote, that SAP is embedding generative AI into SAP Integration Suite.&lt;BR /&gt;
&lt;BR /&gt;
(I’m going to refer to generative AI as GenAI in the rest of this blog post.)&lt;BR /&gt;
&lt;BR /&gt;
One of the areas where GenAI is making a huge impact is coding assistants. That is, an AI copilot that assists developers by generating code, documentation etc. We don’t yet know the details of how SAP intends to embed GenAI into SAP Integration Suite, but an AI copilot for creating integration flows seems a pretty safe bet.&lt;BR /&gt;
&lt;BR /&gt;
GenAI excels at creating text, so generating scripts in SAP Cloud Integration is another area where an AI copilot would make a lot of sense. And script generation is something we can experiment with already now, without having to wait for SAP’s AI copilot to launch.&lt;BR /&gt;
&lt;BR /&gt;
Creating Groovy scripts with GenAI is an area I’d been wanting to look into for a while, so when OpenAI launched their custom GPT feature, I decided to give it a go.&lt;BR /&gt;
&lt;H1 id="toc-hId-834809824"&gt;What are custom GPTs?&lt;/H1&gt;&lt;BR /&gt;
Custom GPTs were announced at OpenAI’s DevDay conference in San Francisco in November, 2023. You can check out the announcement &lt;A href="https://openai.com/blog/introducing-gpts" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;. Custom GPTs are a way to specialise ChatGPT in a particular field or topic. They are built on the GPT-4 foundation model, OpenAI’s most powerful model so far. The model is specialised via prompting and so-called knowledge files; there is no coding or complex (and costly) fine-tuning involved in the process. This made a custom GPT a perfect fit for my project.&lt;BR /&gt;
&lt;BR /&gt;
Custom GPTs can be shared, but at the moment, they are only available to ChatGPT Plus members (a paid subscription) and OpenAI enterprise customers. OpenAI plans to launch a store for custom GPTs at a later date.&lt;BR /&gt;
&lt;H1 id="toc-hId-638296319"&gt;Training GroovyScriptinator&lt;/H1&gt;&lt;BR /&gt;
An AI assistant needs a proper name, of course, and I named mine GroovyScriptinator. My approach to training was iterative: Try a prompt, identify anything that needs tweaking in the response, update the instructions accordingly and repeat.&lt;BR /&gt;
&lt;BR /&gt;
Out of the box, GPT-4 is already very capable of generating Groovy code. For that reason, I focused my training efforts on the following three more specific areas:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;The SAP Cloud Integration environment&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Best practices&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Creating idiomatic Groovy code&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Here are some examples of instructions from the first category:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;All generated code must be compatible with Groovy version 2.4&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Don’t use Java libraries that require a Java version newer than Java 8&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;The generated script function must either be called &lt;CODE&gt;processData&lt;/CODE&gt; or the Script step must be configured with the non-default function name&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Here are some examples of instructions from the second category:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Always pass the payload as a &lt;CODE&gt;Reader&lt;/CODE&gt; object to &lt;CODE&gt;XmlSlurper&lt;/CODE&gt; and &lt;CODE&gt;JsonSlurper&lt;/CODE&gt;&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Don’t pretty-print XML and JSON unless there is a reason to&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Use the log level at runtime or an externalized parameter to control logging&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
Here are some examples of instructions from the third category:&lt;BR /&gt;
&lt;UL&gt;&lt;BR /&gt;
 	&lt;LI&gt;Don’t add a semicolon at the end of a statement&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Don’t use both &lt;CODE&gt;def&lt;/CODE&gt; and a type when declaring a variable&lt;/LI&gt;&lt;BR /&gt;
 	&lt;LI&gt;Don’t import classes that are already imported automatically in Groovy&lt;/LI&gt;&lt;BR /&gt;
&lt;/UL&gt;&lt;BR /&gt;
At the moment, my instructions for GroovyScriptinator come in at around 1800 words, but that number will likely keep growing. 1800 words is roughly the length of this blog post without the code listings.&lt;BR /&gt;
&lt;H1 id="toc-hId-441782814"&gt;Taking GroovyScriptinator for a spin&lt;/H1&gt;&lt;BR /&gt;
While working on my custom GPT, I’ve been using a number of prompts for testing its performance. I’ve chosen four examples for this blog post to demonstrate what’s possible. For each example I’ve linked to the conversation, so you can see the full response for yourself.&lt;BR /&gt;
&lt;H2 id="toc-hId-374352028"&gt;Example 1: JSON processing&lt;/H2&gt;&lt;BR /&gt;
The first example is based on &lt;A href="https://answers.sap.com/questions/14012944/format-json-body-by-removing-an-object.html" target="_blank" rel="noopener noreferrer"&gt;this question&lt;/A&gt; from the SAP Community. I edited out the part about an existing script, because I wanted GroovyScriptinator to come up with a full solution to the problem. This is the script it generated in response:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;import com.sap.gateway.ip.core.customdev.util.Message&lt;BR /&gt;
import groovy.json.JsonSlurper&lt;BR /&gt;
import groovy.json.JsonOutput&lt;BR /&gt;
&lt;BR /&gt;
def Message processData(Message message) {&lt;BR /&gt;
    // Parse the JSON payload&lt;BR /&gt;
    def jsonPayload = new JsonSlurper().parseText(message.getBody(String))&lt;BR /&gt;
&lt;BR /&gt;
    // Remove the 'shippingPackages' object&lt;BR /&gt;
    jsonPayload.remove('shippingPackages')&lt;BR /&gt;
&lt;BR /&gt;
    // Set the modified JSON back to the message body&lt;BR /&gt;
    message.setBody(JsonOutput.toJson(jsonPayload))&lt;BR /&gt;
&lt;BR /&gt;
    return message&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This script works and generates the requested output. It’s nicely formatted and even has decent comments. It’s actually pretty similar to &lt;A href="https://answers.sap.com/answers/14016195/view.html" target="_blank" rel="noopener noreferrer"&gt;my own answer&lt;/A&gt; to the same question.&lt;BR /&gt;
&lt;BR /&gt;
The two scripts differ in one respect, though: The payload should really be passed to &lt;CODE&gt;JsonSlurper&lt;/CODE&gt; as a &lt;CODE&gt;Reader&lt;/CODE&gt; object instead of a &lt;CODE&gt;String&lt;/CODE&gt; object (that way a large payload is not read needlessly into memory). This best practice is actually part of my GroovyScriptinator instructions, but it seems to have temporarily forgotten that (more on that below).&lt;BR /&gt;
&lt;BR /&gt;
I asked it to correct this and received the following script in response:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;import com.sap.gateway.ip.core.customdev.util.Message&lt;BR /&gt;
import groovy.json.JsonSlurper&lt;BR /&gt;
import groovy.json.JsonOutput&lt;BR /&gt;
&lt;BR /&gt;
def Message processData(Message message) {&lt;BR /&gt;
    // Access the JSON payload as a Reader&lt;BR /&gt;
    def payloadReader = message.getBody(Reader)&lt;BR /&gt;
&lt;BR /&gt;
    // Parse the JSON payload&lt;BR /&gt;
    def jsonPayload = new JsonSlurper().parse(payloadReader)&lt;BR /&gt;
&lt;BR /&gt;
    // Remove the 'shippingPackages' object&lt;BR /&gt;
    jsonPayload.remove('shippingPackages')&lt;BR /&gt;
&lt;BR /&gt;
    // Set the modified JSON back to the message body&lt;BR /&gt;
    message.setBody(JsonOutput.toJson(jsonPayload))&lt;BR /&gt;
&lt;BR /&gt;
    return message&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This script also generates the requested output and correctly accesses the payload via the more efficient &lt;CODE&gt;Reader&lt;/CODE&gt;. You can view the full conversation &lt;A href="https://chat.openai.com/share/0e735400-ed50-4ea8-a061-b21e550ead9c" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;H2 id="toc-hId-177838523"&gt;Example 2: More JSON&lt;/H2&gt;&lt;BR /&gt;
My second example is based on &lt;A href="https://answers.sap.com/questions/14021759/unable-to-add-root-nodes-in-json-payload-using-gro.html" target="_blank" rel="noopener noreferrer"&gt;this&lt;/A&gt; SAP Community question (JSON is a popular Groovy scripting topic). I once again edited out the part about an existing script to see GroovyScriptinator’s own solution to the problem. This is the script it generated for me:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;import com.sap.gateway.ip.core.customdev.util.Message&lt;BR /&gt;
import groovy.json.JsonSlurper&lt;BR /&gt;
import groovy.json.JsonOutput&lt;BR /&gt;
&lt;BR /&gt;
def Message processData(Message message) {&lt;BR /&gt;
    // Parse the JSON payload&lt;BR /&gt;
    def jsonParser = new JsonSlurper()&lt;BR /&gt;
    def jsonPayload = message.getBody(Reader)&lt;BR /&gt;
    def parsedJson = jsonParser.parse(jsonPayload)&lt;BR /&gt;
&lt;BR /&gt;
    // Add the new root node&lt;BR /&gt;
    def modifiedJson = [data: parsedJson]&lt;BR /&gt;
&lt;BR /&gt;
    // Convert the modified JSON back to String&lt;BR /&gt;
    String jsonString = JsonOutput.toJson(modifiedJson)&lt;BR /&gt;
&lt;BR /&gt;
    // Set the modified JSON as the new payload&lt;BR /&gt;
    message.setBody(jsonString)&lt;BR /&gt;
&lt;BR /&gt;
    return message&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
The script works correctly and this time around, GroovyScriptinator correctly used a &lt;CODE&gt;Reader&lt;/CODE&gt; to access the payload. It even pointed out that the provided input JSON is, in fact, not valid and that the script only works, when the input is valid.&lt;BR /&gt;
&lt;BR /&gt;
The only thing I’d point out is that it’s a little odd to declare all variables with &lt;CODE&gt;def&lt;/CODE&gt; except &lt;CODE&gt;jsonString&lt;/CODE&gt;, which is declared with its type (&lt;CODE&gt;String&lt;/CODE&gt;). It's a tiny detail, though. You can view the full conversation &lt;A href="https://chat.openai.com/share/6f47a0d9-71bb-468d-b154-150b79f6c4ee" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;H2 id="toc-hId--18674982"&gt;Example 3: Environment variables&lt;/H2&gt;&lt;BR /&gt;
My third example is a script that I needed for myself. This is the prompt I used:&lt;BR /&gt;
&lt;BR /&gt;
“I need a script that creates a plain text payload containing the names of all environment variables and their values. I would like the output formatted as "NAME = VALUE", one name/value pair on each line.”&lt;BR /&gt;
&lt;BR /&gt;
This is the script I received in response:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;import com.sap.gateway.ip.core.customdev.util.Message&lt;BR /&gt;
&lt;BR /&gt;
def Message processData(Message message) {&lt;BR /&gt;
    // StringBuilder for constructing the output&lt;BR /&gt;
    def output = new StringBuilder()&lt;BR /&gt;
&lt;BR /&gt;
    // Iterate over all environment variables and append them to the output&lt;BR /&gt;
    System.env.each { key, value -&amp;gt;&lt;BR /&gt;
        output &amp;lt;&amp;lt; key &amp;lt;&amp;lt; " = " &amp;lt;&amp;lt; value &amp;lt;&amp;lt; '\n'&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
    // Set the generated string as the message payload&lt;BR /&gt;
    message.setBody(output.toString())&lt;BR /&gt;
&lt;BR /&gt;
    return message&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This script works and it’s a very decent solution to my problem. Short, sweet and to the point. It uses a &lt;CODE&gt;StringBuilder&lt;/CODE&gt; to compose the payload efficiently and even uses the Groovy way of appending to the &lt;CODE&gt;StringBuilder&lt;/CODE&gt; with the &lt;CODE&gt;&amp;lt;&amp;lt;&lt;/CODE&gt; operator. The only thing I’d point out is that the appended string with the equals sign really should be in single quotes, but that’s a very minor gripe. You can view the full conversation &lt;A href="https://chat.openai.com/share/87215775-b606-4cf0-88cc-62f8b46e865b" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;H2 id="toc-hId--215188487"&gt;Example 4: Fixed-length format to CSV&lt;/H2&gt;&lt;BR /&gt;
The last example is a requirement I made up specifically for testing GroovyScriptinator. I used the following prompt:&lt;BR /&gt;
&lt;BR /&gt;
“I need a script that turns a fixed-length format text payload into a comma-separated text payload.&lt;BR /&gt;
&lt;BR /&gt;
The payload contains a number of lines. The columns in the file has the following lengths: 3, 6, 3, 5, 2&lt;BR /&gt;
&lt;BR /&gt;
Trailing spaces should be removed from the fourth column (but only from the fourth column).&lt;BR /&gt;
&lt;BR /&gt;
Here is an example input line:&lt;BR /&gt;
&lt;BR /&gt;
xyz123456abcdef 99&lt;BR /&gt;
&lt;BR /&gt;
Here is the corresponding output line:&lt;BR /&gt;
&lt;BR /&gt;
xyz,123456,abc,def,99&lt;BR /&gt;
&lt;BR /&gt;
You can assume that each line has the same length, and this length is the sum of the column lengths.”&lt;BR /&gt;
&lt;BR /&gt;
Here’s the script that GroovyScriptinator responded with:&lt;BR /&gt;
&lt;PRE class="language-java"&gt;&lt;CODE&gt;import com.sap.gateway.ip.core.customdev.util.Message&lt;BR /&gt;
&lt;BR /&gt;
def Message processData(Message message) {&lt;BR /&gt;
    // Define column lengths&lt;BR /&gt;
    def columnLengths = [3, 6, 3, 5, 2]&lt;BR /&gt;
&lt;BR /&gt;
    // Get the payload as a string&lt;BR /&gt;
    def payload = message.getBody(String)&lt;BR /&gt;
    def lines = payload.split('\n')&lt;BR /&gt;
    def newLines = []&lt;BR /&gt;
&lt;BR /&gt;
    lines.each { line -&amp;gt;&lt;BR /&gt;
        def start = 0&lt;BR /&gt;
        def columns = columnLengths.collect { length -&amp;gt;&lt;BR /&gt;
            def column = line.substring(start, start + length)&lt;BR /&gt;
            start += length&lt;BR /&gt;
            column&lt;BR /&gt;
        }&lt;BR /&gt;
&lt;BR /&gt;
        // Trim trailing spaces from the fourth column&lt;BR /&gt;
        columns[3] = columns[3].trim()&lt;BR /&gt;
&lt;BR /&gt;
        // Join columns with commas&lt;BR /&gt;
        newLines &amp;lt;&amp;lt; columns.join(',')&lt;BR /&gt;
    }&lt;BR /&gt;
&lt;BR /&gt;
    // Set the modified payload back into the message&lt;BR /&gt;
    message.setBody(newLines.join('\n'))&lt;BR /&gt;
&lt;BR /&gt;
    return message&lt;BR /&gt;
}&lt;/CODE&gt;&lt;/PRE&gt;&lt;BR /&gt;
This script solves the problem as stated and is really quite nice. I basically don’t have any notes. It kept the column lengths in an appropriate data structure, rather than hardcoding them into the script. It even got it right that the fourth column has index 3. You can view the full conversation &lt;A href="https://chat.openai.com/share/ae03fc2f-b33a-49fa-87de-ca5ed60aa821" target="_blank" rel="nofollow noopener noreferrer"&gt;here&lt;/A&gt;.&lt;BR /&gt;
&lt;H1 id="toc-hId--540784711"&gt;So what’s the verdict?&lt;/H1&gt;&lt;BR /&gt;
The above examples are not staged and have not been doctored in any way. They are representative of the standard of the code created by the custom GPT. It does make mistakes (see the below FAQ), but in general the quality of the responses is very high. Many of the generated scripts are so good that they can be added to your integration flow as is or with minimal modifications. I’d like you to pause for a moment and think about how powerful that is!&lt;BR /&gt;
&lt;BR /&gt;
So my conclusion is rather obvious: An AI copilot is a perfect fit for Groovy scripting in SAP Cloud Integration and there is no question whatsoever about feasibility. I have no doubt that GenAI will be part of your daily work as an SAP Cloud Integration developer. And it will likely happen sooner rather than later.&lt;BR /&gt;
&lt;H1 id="toc-hId--737298216"&gt;FAQ&lt;/H1&gt;&lt;BR /&gt;
You probably have a lot of questions! I’ve tried to answer some of them in the following FAQ, but please feel free to ask questions in the comments as well. If I missed any obvious ones I’ll add them to the FAQ.&lt;BR /&gt;
&lt;H2 id="toc-hId--804729002"&gt;Does this mean I don’t have to learn Groovy?&lt;/H2&gt;&lt;BR /&gt;
No. You can do SAP Cloud Integration development without knowing Groovy, but if you want to add Groovy scripting to your toolbox (and I definitely think you should!), then you need to learn the language.&lt;BR /&gt;
&lt;H2 id="toc-hId--653988150"&gt;But whyyyy? Can’t I just use GenAI to write all the code?&lt;/H2&gt;&lt;BR /&gt;
You &lt;EM&gt;could&lt;/EM&gt;, of course. But what happens after the script has been generated? First off, you won’t know if it actually works. And even if it seems to work, you won’t know why or under which circumstances. If you then throw caution to the wind, deploy the script in production and it breaks, it will be your responsibility to fix it, but you’ll have no idea &lt;EM&gt;how&lt;/EM&gt; to fix it.&lt;BR /&gt;
&lt;BR /&gt;
This is the reason why it’s generally a really, really bad idea to add code that you do not understand to your integration solution. It will come back to &lt;DEL datetime="2023-12-26T19:56:43+00:00"&gt;bite you in the&lt;/DEL&gt; haunt you later on.&lt;BR /&gt;
&lt;H2 id="toc-hId--850501655"&gt;Does GenAI make mistakes?&lt;/H2&gt;&lt;BR /&gt;
Yes. If you have used ChatGPT or similar GenAI chatbots before, you have very likely experienced this yourself as well.&lt;BR /&gt;
&lt;BR /&gt;
I’m really impressed with the quality of the code generated by my custom GPT. That doesn’t mean it’s foolproof, though! It will still sometimes gladly and confidently present you with code that has syntax errors or code that is syntactically correct but just doesn’t work. It also sometimes forgets parts of its instructions.&lt;BR /&gt;
&lt;H2 id="toc-hId--1047015160"&gt;So if GenAI makes mistakes, does that mean it sucks and I can safely ignore it?&lt;/H2&gt;&lt;BR /&gt;
Absolutely not. It really just emphasizes the copilot role of GenAI coding assistants. A human in the pilot’s seat is still needed and with GenAI that person has a powerful productivity tool available to them.&lt;BR /&gt;
&lt;BR /&gt;
If you ignore GenAI right now, you do so at your peril. This is not another technology fad that can be waited out with a bit of patience. Love it or hate it, you need to understand what GenAI is, what it can and cannot do and how it can be applied in your context.&lt;BR /&gt;
&lt;H2 id="toc-hId--1243528665"&gt;Will you be releasing GroovyScriptinator?&lt;/H2&gt;&lt;BR /&gt;
If there’s interest, I might at some point. I'd like to tinker with it some more first, though.</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/ba-p/13572030"/>
    <published>2023-12-27T16:14:31+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/bc-p/13572034#M163781</id>
    <title>Re: Generative AI and SAP Cloud Integration</title>
    <updated>2023-12-29T13:29:18+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>Interesting idea, Eurico. Let me think about it.&lt;BR /&gt;
&lt;BR /&gt;
Regards,&lt;BR /&gt;
&lt;BR /&gt;
Morten</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/bc-p/13572034#M163781"/>
    <published>2023-12-29T13:29:18+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/bc-p/13572036#M163783</id>
    <title>Re: Generative AI and SAP Cloud Integration</title>
    <updated>2023-12-30T14:13:16+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>That's a use case as well, sure. As with the code, you should definitely still have a human in the loop, to determine if what you are getting is actually comprehensive. But GenAI can absolutely create test cases too.&lt;BR /&gt;
&lt;BR /&gt;
Regards,&lt;BR /&gt;
&lt;BR /&gt;
Morten</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/generative-ai-and-sap-cloud-integration/bc-p/13572036#M163783"/>
    <published>2023-12-30T14:13:16+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816482#M4812860</id>
    <title>Re: Success Factor Replication(Xslt Mappping /Standard Mapping)</title>
    <updated>2024-01-02T14:03:32+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi Fathi&lt;/P&gt;&lt;P&gt;Something happened to your screenshots. Also, please include sample XML as text, not graphics. That way it can be easily copypasted. Use the CODE button to insert the XML to preserve formatting and special characters.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816482#M4812860"/>
    <published>2024-01-02T14:03:32+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816484#M4812862</id>
    <title>Re: Success Factor Replication(Xslt Mappping /Standard Mapping)</title>
    <updated>2024-01-02T16:14:31+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi Fathi&lt;/P&gt;&lt;P&gt;This is very similar to your other question about mapping a SuccessFactors API response. This XSLT stylesheet will remove all employment_information elements with an end_date child element:&lt;/P&gt;&lt;PRE&gt;&lt;CODE&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema"&amp;gt;
	&amp;lt;xsl:output method="xml" /&amp;gt;
	&amp;lt;xsl:mode on-no-match="shallow-copy" /&amp;gt;
	&amp;lt;xsl:template match="employment_information[end_date]"/&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;&lt;BR /&gt;&lt;/CODE&gt;&lt;/PRE&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816484#M4812862"/>
    <published>2024-01-02T16:14:31+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/is-it-possible-to-read-parquet-file-in-cpi/qaa-p/12816530#M4812901</id>
    <title>Re: Is it possible to read Parquet file in CPI?</title>
    <updated>2024-01-03T11:12:53+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi Yuting&lt;/P&gt;&lt;P&gt;There are Java libraries available for parsing Parquet files, which means you can read Parquet content in a Groovy script. When evaluating libraries, keep in mind that the Java version in SAP Cloud Integration is still Java 8, so you can only use libraries that are compatible with Java 8.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/is-it-possible-to-read-parquet-file-in-cpi/qaa-p/12816530#M4812901"/>
    <published>2024-01-03T11:12:53+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816486#M4812864</id>
    <title>Re: Success Factor Replication(Xslt Mappping /Standard Mapping)</title>
    <updated>2024-01-03T16:36:11+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi &lt;SPAN class="mention-scrubbed"&gt;fethi_men&lt;/SPAN&gt; &lt;/P&gt;&lt;P&gt;The stylesheet works with the sample data you included. I tested it before posting, of couse. If some other part of your iflow fails, that really has nothing to do with this question.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/success-factor-replication-xslt-mappping-standard-mapping/qaa-p/12816486#M4812864"/>
    <published>2024-01-03T16:36:11+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/message-mapping-to-xslt/qaa-p/12817441#M4813312</id>
    <title>Re: Message Mapping to XSLT</title>
    <updated>2024-01-04T10:48:13+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi Federico&lt;/P&gt;&lt;P&gt;Interesting project. I don't think there is any documentation of the inner workings of message mappings, so it's probably reverse engineering all the way down.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/message-mapping-to-xslt/qaa-p/12817441#M4813312"/>
    <published>2024-01-04T10:48:13+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/my-favourite-sap-cloud-integration-feature-trading-partner-management/ba-p/13591619</id>
    <title>My favourite SAP Cloud Integration feature: Trading Partner Management</title>
    <updated>2024-02-01T17:16:50.865000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="TPM.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/58766iBC7C8FE9817965C8/image-size/large?v=v2&amp;amp;px=999" role="button" title="TPM.png" alt="TPM.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Welcome, fellow integrators, to the seventh installment of this blog post series, where I talk to SAP Cloud Integration practitioners, developers, architects and enthusiasts about their favourite feature of our favourite platform. This time around, I get to interview a true SAP integration veteran who has been a part of this community since the very beginning: Bhavesh Kantilal.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Welcome to the series, Bhavesh! Could you introduce yourself briefly, please?&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;My name is Bhavesh Kantilal. I am an independent freelance consultant based in Stockholm, Sweden, and I have been working with SAP integration technologies since SAP XI 3.0 and with SAP Cloud Integration from when it was called HCI &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Thank you very much! And now the central question of this blog post series: What’s your favourite SAP Cloud Integration feature?&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;There are many features of SAP Cloud Integration I admire, but my current favourite is Trading Partner Management coupled with B2B monitoring. This feature has captivated me so much that I have dedicated a whole blog post series (comprising 18 posts so far) to it on &lt;A href="https://www.sprintegrate.com/category/cpi/edi/" target="_blank" rel="noopener nofollow noreferrer"&gt;my personal blog&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Why that feature in particular?&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;In the evolving landscape of cloud integration, where SaaS applications are becoming more prevalent, classic EDI and B2B transactions continue to coexist and flourish within major customer enterprises.&lt;/P&gt;&lt;P&gt;Consider a customer landscape involving integration with thousands of suppliers. This is typical in sectors like manufacturing, retail, and automotive, where integration occurs with numerous suppliers across various EDI standards like EDIFACT and ANSIX12. These integrations might be point-to-point via protocols like AS2 or through other EDI gateways and VAN mailboxes. In these B2B transactions, each trading partner maintains its own unique set of parameters, identifiers, and transformations. Often, the mapping and transformation are consistent, but what varies is the trading partner connectivity and control records or identifiers.&lt;/P&gt;&lt;P&gt;Trading Partner Management (TPM) in SAP Cloud Integration offers a comprehensive solution from SAP, where most parameters varying across partners are configurable in TPM. Your main focus then shifts to building mappings via MAGs or classical message mappings, while TPM handles the complexities of EDI transformations, partner connectivity, and adapter configurations.&lt;/P&gt;&lt;P&gt;TPM extensively utilizes the Partner Directory in SAP Cloud Integration yet simplifies this with a user-friendly UI. Along with the standard iflows provided by SAP, TPM facilitates a plug-and-play B2B architecture that, despite initial complexity, becomes straightforward with experience.&lt;/P&gt;&lt;P&gt;Moreover, TPM enables out-of-the-box B2B monitoring. If you're familiar with SAP PO, the B2B monitoring in TPM resembles SAP PO monitoring, allowing you to view your B2B payloads and navigate from B2B monitoring to your SAP message logs. You get 90 days of payload logging with TPM (unlike the usual 30 days on MPLs).&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="B2B-monitor.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/58761iFA860487AA1CE24F/image-size/large?v=v2&amp;amp;px=999" role="button" title="B2B-monitor.png" alt="B2B-monitor.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&lt;EM&gt;How do you see the future of Trading Partner Management?&lt;/EM&gt;&lt;/P&gt;&lt;P&gt;One area for growth in TPM is out-of-the-box monitoring and alerting for failed B2B transactions, which is currently missing but is on the road map. If I were to predict the future, I'd expect SAP to soon release this as a pre-delivered feature, integrated either with Cloud ALM or the Alert Notification Service in BTP.&lt;/P&gt;&lt;P&gt;There are currently limitations in EDI and IDoc bundling, but I am confident that these will be addressed in upcoming releases. Similarly, EDI Functional Acknowledgments are presently supported only for AS2 adapters, and while workarounds exist (like using the ProcessDirect adapter), this feature is likely to be further enhanced by SAP.&lt;/P&gt;&lt;P&gt;Another missing feature is archival of your B2B messages to external services like the Document Management Service in BTP. This is a road map item from SAP and this is something that multiple customers need, considering that B2B transactions are legal documents and having a technical log and archive of these messages is mandatory for compliance reasons.&lt;/P&gt;&lt;P&gt;As customers transition their B2B migrations from SAP PO to SAP Cloud Integration, I foresee a scenario where SAP PO message mappings will be utilized in SAP Cloud Integration and integrated via TPM. This is a feature that will increasingly be adopted, particularly by customers who have been using SAP PO as their B2B gateway.&lt;/P&gt;&lt;P&gt;I explore alternative solutions to these challenges in my TPM blog series &lt;A href="https://www.sprintegrate.com/cpi/b2b-on-sap-integration-suite-cloud-integration-cpi-using-trading-partner-management-part-1-idoc-to-edi-flows/" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;&lt;EM&gt;Thanks a lot for sharing your insights, Bhavesh! It was great to catch up.&lt;/EM&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/my-favourite-sap-cloud-integration-feature-trading-partner-management/ba-p/13591619"/>
    <published>2024-02-01T17:16:50.865000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/i-ve-got-problems-with-cpilint-i-need-help/qaa-p/13630970#M4821080</id>
    <title>Re: I've got problems with CPILint , I need HELP !!</title>
    <updated>2024-03-07T10:24:03.905000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>Happy to help! I'm adding an FAQ to GitHub and this is one of the questions. Basically, after the unified Integration Suite UI, you can no longer copy the hostname from the browser on Cloud Foundry. Instead. you have to copy it from a service key. The approach is described here: &lt;A href="https://help.sap.com/docs/cloud-integration/sap-cloud-integration/http-calls-and-uri-components" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/docs/cloud-integration/sap-cloud-integration/http-calls-and-uri-components&lt;/A&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/i-ve-got-problems-with-cpilint-i-need-help/qaa-p/13630970#M4821080"/>
    <published>2024-03-07T10:24:03.905000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/coffee-corner-discussions/celebrating-international-pi-day/m-p/13638753#M2876</id>
    <title>Re: Celebrating International Pi Day</title>
    <updated>2024-03-14T18:59:34.159000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="mmm-pie.gif" style="width: 640px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/80954i6798A9C105561725/image-size/large?v=v2&amp;amp;px=999" role="button" title="mmm-pie.gif" alt="mmm-pie.gif" /&gt;&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/coffee-corner-discussions/celebrating-international-pi-day/m-p/13638753#M2876"/>
    <published>2024-03-14T18:59:34.159000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/cpilint-version-1-0-5-is-here/ba-p/13810431</id>
    <title>CPILint version 1.0.5 is here</title>
    <updated>2024-08-29T01:40:40.485000+02:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="CPILint-1.0.5.png" style="width: 796px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/159107i1095FE3FB0EE3D02/image-size/large?v=v2&amp;amp;px=999" role="button" title="CPILint-1.0.5.png" alt="CPILint-1.0.5.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The very first version of CPILint was released on August 31st, 2019. With the 5th anniversary just around the corner, I am excited to announce that version 1.0.5 is complete and ready for you to install.&lt;/P&gt;&lt;P&gt;If you already run version 1.0.4, you will automatically be notified that there is a new version available. You can also go &lt;A href="https://github.com/mwittrock/cpilint/releases/latest" target="_blank" rel="noopener nofollow noreferrer"&gt;directly to GitHub&lt;/A&gt; to download it.&lt;/P&gt;&lt;P&gt;In this blog post, I will give you an overview of what’s in version 1.0.5. If you are new to CPILint, let me start by giving you the elevator pitch:&lt;/P&gt;&lt;P&gt;CPILint is an open-source tool that automates your SAP Cloud Integration governance. It ships with a range of built-in rules covering topics like developer guidelines, naming conventions and security. You choose the rules you want to put in place, and CPILint does the heavy lifting of checking your integration flows for compliance.&lt;/P&gt;&lt;P&gt;Now, let’s take a look at all the good stuff in the new release!&lt;/P&gt;&lt;H2 id="toc-hId-1044183133"&gt;OAuth 2.0 support&lt;/H2&gt;&lt;P&gt;CPILint communicates with your SAP Cloud Integration tenant via the official OData API. This requires authorization, of course, and so far we’ve done this by providing a username and password.&lt;/P&gt;&lt;P&gt;In version 1.0.5, however, you can authorize simply by creating a service key for CPILint in the SAP BTP Cockpit and downloading it to your local machine. You use the new &lt;FONT face="courier new,courier"&gt;-key&lt;/FONT&gt; command line option to point to that key. CPILint then uses your key to authorize its API calls using the OAuth 2.0 client credentials flow.&lt;/P&gt;&lt;P&gt;This has several benefits for you. First off, you no longer need to provide a username and password. Second, since the tenant hostname is already in the key, you no longer need to provide that either. Third, running CPILint with minimal permissions is now very easy to get right. Finally, the OAuth 2.0 client credentials flow is more secure than basic authentication.&lt;/P&gt;&lt;P&gt;With the new OAuth 2.0 support, checking your entire tenant for compliance is now as simple as:&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier"&gt;cpilint -key my-key.json -rules my-rules.xml&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;Short and sweet!&lt;/P&gt;&lt;H2 id="toc-hId-847669628"&gt;Rules file import&lt;/H2&gt;&lt;P&gt;Up until now, every single rule you wanted to check had to be stored in a single rules file. With CPILint version 1.0.5, we get a lot more flexibility. The new version introduces the ability to import a rules file into another rules file. You do this using the new &lt;FONT face="courier new,courier"&gt;&amp;lt;import&amp;gt;&lt;/FONT&gt; element.&lt;/P&gt;&lt;P&gt;If you have, for instance, a separate rules file for a specific project package but also want to reuse naming conventions that apply to the entire tenant, you can now simply import those naming conventions into the project’s rules file like this:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;cpilint&amp;gt;
    &amp;lt;imports&amp;gt;
        &amp;lt;import src="/path/to/naming-conventions.xml"/&amp;gt;
    &amp;lt;/imports&amp;gt;
    &amp;lt;rules&amp;gt;
        &amp;lt;!-- Your project-specific rules would go here. --&amp;gt;
    &amp;lt;/rules&amp;gt;
&amp;lt;/cpilint&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This feature opens up entirely new ways to shape and mold your rules files and I’m excited to see how the community will put it to use! To learn more about rules file imports, visit &lt;A href="https://github.com/mwittrock/cpilint/wiki/Rules-and-the-rules-file" target="_blank" rel="noopener nofollow noreferrer"&gt;this wiki page&lt;/A&gt;.&lt;/P&gt;&lt;H2 id="toc-hId-651156123"&gt;New rule: UserRoles&lt;/H2&gt;&lt;P&gt;UserRoles is a new rule in CPILint 1.0.5 that lets you specify which user roles should and should not be used in sender channels that support user role authorization (meaning AS2, AS4, HTTPS, IDoc, SOAP, XI, and OData). If you, for instance, do not allow the use of the default user role (ESBMessaging.send), you would add this rule:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-markup"&gt;&lt;code&gt;&amp;lt;disallowed-user-roles&amp;gt;
    &amp;lt;disallow&amp;gt;ESBMessaging.send&amp;lt;/disallow&amp;gt;
&amp;lt;/disallowed-user-roles&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You can also use the UserRoles rule to require, for instance, that only certain custom user roles be used.&lt;/P&gt;&lt;H2 id="toc-hId-454642618"&gt;Other news&lt;/H2&gt;&lt;P&gt;1.0.5 adds 30 supported names to the NamingConventions rule. Check out &lt;A href="https://github.com/mwittrock/cpilint/wiki/The-NamingConventions-rule" target="_blank" rel="noopener nofollow noreferrer"&gt;this page&lt;/A&gt; in the CPILint wiki for the full list of supported names.&lt;/P&gt;&lt;P&gt;There’s a new command line option called &lt;FONT face="courier new,courier"&gt;-skipvercheck&lt;/FONT&gt; that skips the automatic check for a new version. If you run CPILint in a non-interactive way, like for instance in a CI/CD pipeline or other automation context, you might want to do this to save a little time and bandwidth.&lt;/P&gt;&lt;P&gt;The DuplicateResourcesNotAllowed rule now supports JSON resources.&lt;/P&gt;&lt;P&gt;There is now &lt;A href="https://github.com/mwittrock/cpilint/wiki/FAQ" target="_blank" rel="noopener nofollow noreferrer"&gt;an FAQ page&lt;/A&gt; in the project wiki.&lt;/P&gt;&lt;P&gt;Last but definitely not least: The CPILint ASCII art is now 3D. Yes, I saved the best for last!&lt;/P&gt;&lt;H2 id="toc-hId-258129113"&gt;Over to you&lt;/H2&gt;&lt;P&gt;That’s it for the CPILint 1.0.5 overview. Take the new release for a spin and please share your feedback with me in the comments below.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/cpilint-version-1-0-5-is-here/ba-p/13810431"/>
    <published>2024-08-29T01:40:40.485000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/five-years-of-cpilint/ba-p/13812638</id>
    <title>Five years of CPILint</title>
    <updated>2024-08-31T14:00:00.036000+02:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="CPILint-kagemand.jpg" style="width: 317px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/160628i953604117E2EA0AA/image-size/medium?v=v2&amp;amp;px=400" role="button" title="CPILint-kagemand.jpg" alt="CPILint-kagemand.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;On this day five years ago, I released the first version of CPILint on GitHub. I finished &lt;A href="https://community.sap.com/t5/technology-blogs-by-members/cpilint-version-1-0-5-is-here/ba-p/13810431" target="_blank"&gt;the latest version&lt;/A&gt; two days ago, so this feels like a good time to take a break, enjoy a piece of birthday cake, and look back at the project’s early days.&lt;/P&gt;&lt;P&gt;(The cake is a “Kagemand”, by the way, which translates literally to “Cake Man”. They’re served at birthday parties in Denmark, and they’re delicious &lt;span class="lia-unicode-emoji" title=":face_savoring_food:"&gt;😋&lt;/span&gt;)&lt;/P&gt;&lt;P&gt;Version 1.0.0 came out on August 31st, 2019, but my earliest notes are from the autumn of 2018. They were jotted down between meetings during a visit to SAP in Walldorf. Seeing those notes today, I’m quite surprised how many of the early ideas eventually made their way into CPILint.&lt;/P&gt;&lt;P&gt;Reading the notes also reminded me that I originally used a different name: Flowmon. I think it was supposed to be a portmanteau of “iflow” and “monitor”, but it’s not a very good name, is it? I’m glad I changed it &lt;span class="lia-unicode-emoji" title=":grinning_face_with_sweat:"&gt;😅&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Even though I ended up writing CPILint in Java, I initially wanted to implement it in pure XSLT. I had a Schematron-like meta-programming approach in mind with a stylesheet compiling rules into another stylesheet, that would then transform an iflow’s internal XML format into compliance notifications.&lt;/P&gt;&lt;P&gt;I still have half a prototype, but the technique ultimately felt too limiting and I abandoned it. I still quite like the idea, though. It’s quirky and just a little chaotic &lt;span class="lia-unicode-emoji" title=":upside_down_face:"&gt;🙃&lt;/span&gt; And it’s not a &lt;EM&gt;bad&lt;/EM&gt; thing that it didn’t work out, by the way! On the contrary, one of the wonderful things about hobby projects is that they let you follow new ideas to interesting places and generally - in the words of Kurt Vonnegut - fart around.&lt;/P&gt;&lt;P&gt;The first time I showed CPILint in public was at SAP Inside Track Walldorf in January 2019. I managed to have a prototype working just in time for the event. Committing publicly to doing a live demo in front of a large group of people is quite motivating after all 🫠&lt;/P&gt;&lt;P&gt;SIT Walldorf was also the first time I got to show off the CPILint logo:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="CPILint-logo.png" style="width: 475px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/160099iF469628E497D708A/image-dimensions/475x212?v=v2" width="475" height="212" role="button" title="CPILint-logo.png" alt="CPILint-logo.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;I was certain that someone would fairly quickly spot where the inspiration for the logo came from. However, five years later, no one has pointed out the connection. I’m a big fan of retro gaming, and the Atari 2600 console from 1977 is about as retro as it gets. This is the Asteroids game cartridge:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Asteroids.png" style="width: 485px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/160098i23A1298B60A76CC6/image-dimensions/485x584?v=v2" width="485" height="584" role="button" title="Asteroids.png" alt="Asteroids.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;Look familiar? &lt;span class="lia-unicode-emoji" title=":face_with_tongue:"&gt;😛&lt;/span&gt; For the fifth anniversary I’ve made these logo stickers:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Stickers.jpg" style="width: 498px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/160103iD488271AD26E2B08/image-dimensions/498x471?v=v2" width="498" height="471" role="button" title="Stickers.jpg" alt="Stickers.jpg" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;I’ll bring stickers with me to events in autumn, so if you’d like one, do come up and say hi!&lt;/P&gt;&lt;P&gt;Well, the “Kagemand” beckons, so let me wrap this up. Working on CPILint for the last five years has been so much fun, and I have no intention of stopping here! The list of features that I want to implement is still very long, and I’m excited to bring them to you in future releases.&lt;/P&gt;&lt;P&gt;Thank you for reading and thank you for supporting CPILint!&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/five-years-of-cpilint/ba-p/13812638"/>
    <published>2024-08-31T14:00:00.036000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/five-years-of-cpilint/bc-p/13851956#M169023</id>
    <title>Re: Five years of CPILint</title>
    <updated>2024-09-03T00:32:28.940000+02:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Interesting use case, &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/130169"&gt;@EuricoBorges&lt;/a&gt;.&amp;nbsp;It would be a great topic for a blog post &lt;span class="lia-unicode-emoji" title=":slightly_smiling_face:"&gt;🙂&lt;/span&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/five-years-of-cpilint/bc-p/13851956#M169023"/>
    <published>2024-09-03T00:32:28.940000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/devtoberfest/automate-your-sap-cloud-integration-governance-with-cpilint/ec-p/13877939#M828</id>
    <title>Re: 🔴 Automate your SAP Cloud Integration governance with CPILint</title>
    <updated>2024-09-25T21:39:30.749000+02:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Hi Mohamed&lt;/P&gt;&lt;P&gt;This is not necessarily a good fit for static analysis. You often want to measure, right? That's, by definition, not static. That said, the Design Guidelines have some checks that are performance-related, so you could take a look at those.&lt;/P&gt;&lt;P&gt;Regards,&lt;/P&gt;&lt;P&gt;Morten&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/devtoberfest/automate-your-sap-cloud-integration-governance-with-cpilint/ec-p/13877939#M828"/>
    <published>2024-09-25T21:39:30.749000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blog-posts-by-members/get-notified-about-apache-camel-updates-with-cpitracker/ba-p/13939973</id>
    <title>Get notified about Apache Camel updates with CPITracker</title>
    <updated>2024-11-17T19:18:55.265000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>&lt;P&gt;Many SAP Cloud Integration developers and administrators are keen to know exactly when their tenant is upgraded to the new version of the Apache Camel integration framework (from version 2.24 to version 3.14).&lt;/P&gt;&lt;P&gt;Fortunately, it’s easy to set up CPITracker to notify you when Camel is updated and in this blog post, I will show you how.&lt;/P&gt;&lt;P&gt;In case you are hearing about CPITracker for the first time: CPITracker tracks changes to the various underlying components of SAP Cloud Integration, like Apache Camel, the XSLT processor and the Java runtime. It is implemented as an integration flow and is available for free &lt;A href="https://github.com/mwittrock/cpitracker" target="_blank" rel="noopener nofollow noreferrer"&gt;on GitHub&lt;/A&gt;. You can find the instructions &lt;A href="https://github.com/mwittrock/cpitracker/wiki/Installing-and-configuring-CPITracker" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt; if you’d like to install it in your tenant.&lt;/P&gt;&lt;P&gt;CPITracker runs regularly and uses a handful of different techniques to check the supported components for updates. When it detects them, it passes information about the updates in XML form to an update handler integration flow (explained &lt;A href="https://github.com/mwittrock/cpitracker/wiki/Creating-an-update-handler" target="_blank" rel="noopener nofollow noreferrer"&gt;here&lt;/A&gt;) &lt;SPAN&gt;using the ProcessDirect adapter&lt;/SPAN&gt;. The update handler — which you develop — then performs whatever actions you want to take, like sending out an email, posting to a Slack channel or something else entirely.&lt;/P&gt;&lt;P&gt;Here is an example of the updates XML document:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Updates-XML.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/191708i315B3821C10F5551/image-size/large?v=v2&amp;amp;px=999" role="button" title="Updates-XML.png" alt="Updates-XML.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;(These are real updates that were detected in the trial environment earlier this year.)&lt;/P&gt;&lt;P&gt;Setting up an update handler to only focus on Apache Camel is easy. Here’s one I implemented, that notifies me by email when Apache Camel is updated:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-inline" image-alt="Iflow.png" style="width: 999px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/191707i7564C3CBC8021477/image-size/large?v=v2&amp;amp;px=999" role="button" title="Iflow.png" alt="Iflow.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;The Router step filters out messages that do &lt;EM&gt;not&lt;/EM&gt; contain an Apache Camel update. This is an implementation of the Message Filter pattern, by the way. The Router step branches on this XPath expression:&lt;/P&gt;&lt;P&gt;&lt;FONT face="courier new,courier"&gt;/updates/update[characteristic = 'camel.version']&lt;/FONT&gt;&lt;/P&gt;&lt;P&gt;If the updates XML document contains an Apache Camel update, this expression will evaluate to true. The default route goes directly to an End Event.&lt;/P&gt;&lt;P&gt;If an Apache Camel update is present, I extract the relevant information into the following three exchange properties in the "Get update information" Content Modifier step:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;TABLE border="1" width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD width="25%"&gt;&lt;STRONG&gt;Name&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="25%"&gt;&lt;STRONG&gt;Source Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="25%"&gt;&lt;STRONG&gt;Source Value&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD width="25%"&gt;&lt;STRONG&gt;Data Type&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;updateDiscovered&lt;/TD&gt;&lt;TD width="25%"&gt;XPath&lt;/TD&gt;&lt;TD width="25%"&gt;/updates/discovered&lt;/TD&gt;&lt;TD width="25%"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;previousCamelVersion&lt;/TD&gt;&lt;TD width="25%"&gt;XPath&lt;/TD&gt;&lt;TD width="25%"&gt;/updates/update[characteristic = 'camel.version']/previous-value&lt;/TD&gt;&lt;TD width="25%"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="25%"&gt;newCamelVersion&lt;/TD&gt;&lt;TD width="25%"&gt;XPath&lt;/TD&gt;&lt;TD width="25%"&gt;/updates/update[characteristic = 'camel.version']/current-value&lt;/TD&gt;&lt;TD width="25%"&gt;java.lang.String&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;(Please note that the date and time in the &lt;FONT face="courier new,courier"&gt;updateDiscovered&lt;/FONT&gt; property is in the UTC time zone.)&lt;/P&gt;&lt;P&gt;I then use these properties to compose an email message and finally send off the email. You can, of course, choose to be notified differently. To do so, you simply add the required configuration after the “Get update information” Content Modifier step.&lt;/P&gt;&lt;P&gt;That’s all there is to it. Have fun with CPITracker! If you have any questions or comments feel free to post them below.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blog-posts-by-members/get-notified-about-apache-camel-updates-with-cpitracker/ba-p/13939973"/>
    <published>2024-11-17T19:18:55.265000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/cloud-integration-getting-the-error-failed-to-start-bundle-from-path/qaa-p/14015347#M4903153</id>
    <title>Re: Cloud Integration - Getting the Error 'FAILED to start bundle from path:</title>
    <updated>2025-02-12T16:19:10.589000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>I think there is a general issue in the trial environment at the moment. I'm getting the same error when attempting to deploy.</content>
    <link href="https://community.sap.com/t5/technology-q-a/cloud-integration-getting-the-error-failed-to-start-bundle-from-path/qaa-p/14015347#M4903153"/>
    <published>2025-02-12T16:19:10.589000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/cloud-integration-getting-the-error-failed-to-start-bundle-from-path/qaa-p/14016945#M4903423</id>
    <title>Re: Cloud Integration - Getting the Error 'FAILED to start bundle from path:</title>
    <updated>2025-02-14T09:34:07.211000+01:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>This seems to have been resolved now.</content>
    <link href="https://community.sap.com/t5/technology-q-a/cloud-integration-getting-the-error-failed-to-start-bundle-from-path/qaa-p/14016945#M4903423"/>
    <published>2025-02-14T09:34:07.211000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/combine-two-xml-messages-in-cpi/qaa-p/14215155#M4926041</id>
    <title>Re: combine two xml messages in CPI</title>
    <updated>2025-09-11T22:26:18.090000+02:00</updated>
    <author>
      <name>MortenWittrock</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/40</uri>
    </author>
    <content>Thanks, &lt;a href="https://community.sap.com/t5/user/viewprofilepage/user-id/359654"&gt;@mathias_rohland&lt;/a&gt;. That &amp;lt;br&amp;gt; was some weird artifact of the editor; I've removed it. Thanks for pointing it out.</content>
    <link href="https://community.sap.com/t5/technology-q-a/combine-two-xml-messages-in-cpi/qaa-p/14215155#M4926041"/>
    <published>2025-09-11T22:26:18.090000+02:00</published>
  </entry>
</feed>
