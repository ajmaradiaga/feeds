<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://raw.githubusercontent.com/ajmaradiaga/feeds/main/scmt/members/sap-community-members/horst_keller.xml</id>
  <title>SAP Community - Horst Keller</title>
  <updated>2025-01-11T01:10:00.834909+00:00</updated>
  <link href="https://community.sap.com/t5/user/viewprofilepage/user-id/181866" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <subtitle>Horst Keller in SAP Community</subtitle>
  <entry>
    <id>https://community.sap.com/t5/application-development-blog-posts/abap-news-for-7-40-sp08-for-expressions/bc-p/13108289#M17505</id>
    <title>Re: ABAP News for 7.40, SP08 - FOR Expressions</title>
    <updated>2023-12-13T07:58:47+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>Hi Chistian,&lt;BR /&gt;
&lt;BR /&gt;
Seems to be a bug. The COUNT function is not recognized as an integer, only wrapping it in another expression does it. Outside FOR, the logical expression also works without that enforcement.&lt;BR /&gt;
&lt;BR /&gt;
I opened an internal incident for the language colleagues.&lt;BR /&gt;
&lt;BR /&gt;
Thanks for notifying that.&lt;BR /&gt;
&lt;BR /&gt;
Horst&lt;BR /&gt;
&lt;BR /&gt;
ABAP Documentation</content>
    <link href="https://community.sap.com/t5/application-development-blog-posts/abap-news-for-7-40-sp08-for-expressions/bc-p/13108289#M17505"/>
    <published>2023-12-13T07:58:47+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-blog-posts/abap-news-for-7-40-sp08-for-expressions/bc-p/13108290#M17506</id>
    <title>Re: ABAP News for 7.40, SP08 - FOR Expressions</title>
    <updated>2023-12-13T09:49:55+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>Hi Christian,&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;BR /&gt;
Language colleagues have fixed it in the current release 7.96/8.16 (2405/2025) but there will be no patch. Feel free to open a customer incident, if you require patching.&lt;BR /&gt;
&lt;BR /&gt;
Kind regards&lt;BR /&gt;
&lt;BR /&gt;
Horst&lt;BR /&gt;
&lt;BR /&gt;
ABAP Documentation&lt;BR /&gt;
&lt;BR /&gt;
&amp;nbsp;&lt;BR /&gt;
&lt;TABLE border=""&gt;&lt;BR /&gt;
&lt;TBODY&gt;&lt;BR /&gt;
&lt;TR&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;BR /&gt;
&lt;/TR&gt;&lt;BR /&gt;
&lt;/TBODY&gt;&lt;BR /&gt;
&lt;/TABLE&gt;</content>
    <link href="https://community.sap.com/t5/application-development-blog-posts/abap-news-for-7-40-sp08-for-expressions/bc-p/13108290#M17506"/>
    <published>2023-12-13T09:49:55+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blogs-by-sap/abap-cds-annotation-documentation-available-in-the-sap-help-portal/ba-p/13584536</id>
    <title>ABAP CDS Annotation Documentation Available in the SAP Help Portal</title>
    <updated>2024-01-29T09:57:15.071000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;ABAP CDS annotations&amp;nbsp;&lt;SPAN&gt;add metadata to a CDS object (mainly CDS entities)&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;that goes beyond the syntax features of the SQL (DDL) part of its&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;definition. An annotation is specified in the CDS source code of a CDS object&amp;nbsp;using the &lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abencds_annotations_syntax.htm" target="_self" rel="noopener noreferrer"&gt;annotation syntax&lt;/A&gt; &lt;FONT face="courier new,courier"&gt;@...&lt;/FONT&gt;&amp;nbsp;that is defined by a &lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abencds_anno_definition.htm" target="_self" rel="noopener noreferrer"&gt;CDS annotation definition&lt;/A&gt;. As a rule, only annotations can be used that are delivered by SAP as&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;a predefined set of SAP annotations, because only those are evaluated when a CDS object is used.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;SAP annotations are divided in:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;ABAP annotations that are evaluated when the object defined in the CDS source code is activated or when the object is used in the ABAP runtime framework. &lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Framework-specific annotations that are evaluated by frameworks of other software components. &lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Any annotations that are specified with&amp;nbsp;&lt;FONT face="courier new,courier"&gt;@...&lt;/FONT&gt;&amp;nbsp;but not evaluated by a framework lead to syntax warnings and are ignored at runtime.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Annotations can be&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenabap_versions_and_apis.htm" target="_self" rel="noopener noreferrer"&gt; released as APIs under the C1 contract.&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;As such they should be sufficently documented. For the API documentation of an annotation, ADT offers a so called&amp;nbsp;&lt;A href="http://Knowledge%20Transfer Document" target="_self" rel="nofollow noopener noreferrer"&gt;Knowledge Transfer Document (KTD)&lt;/A&gt;. You can reach the KTD documentation of an annotation for example by using F2 on an annotation in ADT. While a KTD is sufficient as long as you work in ADT, it might also be helpful to reach the annotation documentation from other environments, as e.g. programming guides or other framework-specific documentation. Since for the time being, the native display of KTDs is restricted to ADT, an effort was undertaken to integrate the content of annotation documentation that is available in KTDs into the ABAP Keyword Documentation. There it can be linked from within that documentation and becomes also available for general usage in form of the upload of the keyword documentation to the SAP Help Portal:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abencds_annotations_ktd_docu.htm" target="_self" rel="noopener noreferrer"&gt;&lt;SPAN&gt;ABAP CDS - Annotation Documentation&lt;/SPAN&gt;&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;This is the upload of the ABAP Keyword Documentation of the current ABAP Cloud release 2402, where all annotations that are released by SAP for ABAP Cloud are listed.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;For each annotation, there is a topic that contains:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;A table of the &lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abencds_sap_anno_props.htm" target="_self" rel="noopener noreferrer"&gt;annotation properties&lt;/A&gt; as found in a metadata table in the system.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The content of the respective KTD if available.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;A link to the annotation documentation in SAP Help portal if the annotation is documented there additionally to or instead of KTD (if available).&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Optional further information, especially for ABAP annotations&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;Example:&amp;nbsp;&lt;A href="https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abencds_2036691489-_anno.htm" target="_self" rel="noopener noreferrer"&gt;AbapCatalog.entityBuffer.definitionAllowed&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;We hope that it might be helpful.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blogs-by-sap/abap-cds-annotation-documentation-available-in-the-sap-help-portal/ba-p/13584536"/>
    <published>2024-01-29T09:57:15.071000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/what-s-new/what-you-need-to-know-about-blogging-post-migration/bc-p/13584594#M128</id>
    <title>Re: What You Need to Know About Blogging Post-Migration</title>
    <updated>2024-01-29T10:13:34.392000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Hi,&lt;/P&gt;&lt;P&gt;How can I correct typos in a blog, once it is published. I don't find the "edit" button any more&lt;/P&gt;&lt;P&gt;Thx&lt;/P&gt;&lt;P&gt;Horst&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/what-s-new/what-you-need-to-know-about-blogging-post-migration/bc-p/13584594#M128"/>
    <published>2024-01-29T10:13:34.392000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/what-s-new/what-you-need-to-know-about-blogging-post-migration/bc-p/13587871#M159</id>
    <title>Re: What You Need to Know About Blogging Post-Migration</title>
    <updated>2024-01-30T19:25:32.376000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Oh my, yes ...&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/what-s-new/what-you-need-to-know-about-blogging-post-migration/bc-p/13587871#M159"/>
    <published>2024-01-30T19:25:32.376000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-discussions/where-condition-alternative-for-is-not-initial/m-p/13590778#M2026337</id>
    <title>Re: Where condition alternative for is not initial</title>
    <updated>2024-02-01T11:51:29.787000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abennews-753-abap_sql.htm#!ABAP_MODIFICATION_4@4@" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abennews-753-abap_sql.htm#!ABAP_MODIFICATION_4@4@&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-discussions/where-condition-alternative-for-is-not-initial/m-p/13590778#M2026337"/>
    <published>2024-02-01T11:51:29.787000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/application-development-discussions/where-condition-alternative-for-is-not-initial/m-p/13590896#M2026339</id>
    <title>Re: Where condition alternative for is not initial</title>
    <updated>2024-02-01T12:27:06.202000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Of course, the ABAP SQL syntax cannot be transferred to the DB Cockpit. You enter native SQL in the SAP GUI SQL Editor. If the underlying DB does not support IS INITIAL, you cannot use it.&lt;/P&gt;&lt;P&gt;ABAP SQL's IS INTIAL depends on ABAP data types (built-in DDIC type) and must be translated by the DBI to a native SQL condition.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/application-development-discussions/where-condition-alternative-for-is-not-initial/m-p/13590896#M2026339"/>
    <published>2024-02-01T12:27:06.202000+01:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13764126/comment-id/4837370#M4837370</id>
    <title>Re: No check on foreign key in ADT-defined database table</title>
    <updated>2024-07-18T07:31:17.430000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;DDIC foreign keys are not considered in ABAP SQL.&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_database_tables_forkeyrel.htm" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_database_tables_forkeyrel.htm&lt;/A&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13764126/comment-id/4837370#M4837370"/>
    <published>2024-07-18T07:31:17.430000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13765735/comment-id/4837577#M4837577</id>
    <title>Re: No check on foreign key in ADT-defined database table</title>
    <updated>2024-07-19T09:51:25.358000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Let me try to explain some basic facts.&lt;/P&gt;&lt;P&gt;In ABAP we have two levels of metadata definitions:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;ABAP Dictionary (DDIC)&lt;BR /&gt;The old one. Here you can define global datatypes, classic DDIC database tables and DDIC database views. The tools are transaction SE11 and nowadays ADT. In ADT, a DDIC DDL is used that in the end does the same as transaction SE11. DDIC database tables can have a semantic property called foreign key relationship. The evaluation of that property is done by frameworks such as classic dynpros, classic database locks but not in the ABAP language (ABAP SQL) itself. ABAP SQL knows nothing of foreign keys.&lt;/LI&gt;&lt;LI&gt;ABAP CDS&lt;BR /&gt;The new one. ABAP CDS is still largely based on DDIC. Up to now, you can define some types (but no structures) and CDS entities such as CDS Views, CDS Table Functions, CDS Hierarchies, ... that access DDIC database tables. The relations between CDS entities are modelled by CDS associations that are instantiated as physical joins when accessed in a path expression. It depends on the framework using the CDS entities, if the foreign key relations of the underlying DDIC database tables are considered at all. Up to now there are no CDS table entities available in ABAP CDS. That means, you cannot define an ABAP-managed database table directly with ABAP CDS. Once, this will be available, a concept regarding foreign key relationships between CDS table entities might become available too, probably based on associations then.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;In the tutorial, you were working on a DDIC database table, whose properties are described here:&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_database_tables.htm" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenddic_database_tables.htm&lt;/A&gt;&lt;/P&gt;&lt;P&gt;CDS entities are described here:&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abencds_entities.htm" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abencds_entities.htm&lt;/A&gt;&lt;/P&gt;&lt;P&gt;And finally, RAP is a programming model based on CDS described here:&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenabap_rap.htm" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_cp_index_htm/CLOUD/en-US/index.htm?file=abenabap_rap.htm&lt;/A&gt;&lt;/P&gt;&lt;P&gt;BTP is a SAP product using these technologies.&amp;nbsp;&lt;/P&gt;&lt;P&gt;ADT is just a tool. It does not make sense to speak about "ADT database tables" or to say "&lt;SPAN&gt;access the ABAP dictionary when developing with ADT&lt;/SPAN&gt;". You can edit DDIC objects with ADT and access those in ABAP CDS, ABAP language and with frameworks built with ABAP.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13765735/comment-id/4837577#M4837577"/>
    <published>2024-07-19T09:51:25.358000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13775009/comment-id/4838738#M4838738</id>
    <title>Re: error in cl_sxml_string_writer, sXML Library</title>
    <updated>2024-07-29T07:58:31.086000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Workaround:&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;!--  StartFragment   --&gt;&lt;FONT face="courier new,courier"&gt;&lt;SPAN class=""&gt;CALL&amp;nbsp;&lt;/SPAN&gt;TRANSFORMATION&amp;nbsp;&lt;SPAN class=""&gt;id&amp;nbsp;&lt;/SPAN&gt;SOURCE&amp;nbsp;XML&amp;nbsp;xml_without_declaration&lt;/FONT&gt;&lt;BR /&gt;&lt;FONT face="courier new,courier"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RESULT&amp;nbsp;XML&amp;nbsp;xml_with_declaration&lt;SPAN class=""&gt;.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;BR /&gt;&lt;BR /&gt;&lt;/SPAN&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13775009/comment-id/4838738#M4838738"/>
    <published>2024-07-29T07:58:31.086000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-runtime-exception-itab-duplicate-key-behaves-differen/qaq-p/13776573/comment-id/4838916#M4838916</id>
    <title>Re: Runtime Exception ITAB_DUPLICATE_KEY behaves differen...</title>
    <updated>2024-07-30T09:15:47.327000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Indeed, there is a translation error in the documentation of INSERT LINES. The documentation was in German originally, where it read "unbehandelbare Ausnahme". Unfortunately. we are fighting, with lots of these. Corrected for 2411,&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-runtime-exception-itab-duplicate-key-behaves-differen/qaq-p/13776573/comment-id/4838916#M4838916"/>
    <published>2024-07-30T09:15:47.327000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13776872/comment-id/4838971#M4838971</id>
    <title>Re: No check on foreign key in ADT-defined database table</title>
    <updated>2024-07-30T12:04:41.148000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;You still mix the things up.&lt;/P&gt;&lt;P&gt;DDIC (short for ABAP Dictionary) is a metadata repository.&lt;/P&gt;&lt;P&gt;There are two tools for editing metadata such as DDIC database tables of the ABAP Dictionary:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;SE11 in SAP GUI&lt;/LI&gt;&lt;LI&gt;Source code based editors as well as from based editors in ADT.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;"&lt;SPAN&gt;when I create a database table in ADT, it is created using DDIC,&lt;/SPAN&gt;" is not correct.&lt;/P&gt;&lt;P&gt;Correct is: "you can use ADT (as well as SE11) to create a DDIC database table".&lt;/P&gt;&lt;P&gt;In fact, the source code that you see in ADT isn't even stored as such but created temporarily from the metadata in the ABAP Dictionary.&lt;/P&gt;&lt;P&gt;And also "&lt;SPAN&gt; using ADT I do use DDIC but - however, can not make use of the foreign key relationship feature of DDIC&lt;/SPAN&gt;" simply makes no sense,&lt;/P&gt;&lt;P&gt;ADT is a tool for creating repository objects, not for using them. You use a DDIC database table in ABAP language, in ABAP CDS, in classic dynpros, etc. It depends on the usage in these frameworks, whether a foreign key relationship is considered, not on ADT.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13776872/comment-id/4838971#M4838971"/>
    <published>2024-07-30T12:04:41.148000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13777398/comment-id/4839061#M4839061</id>
    <title>Re: error in cl_sxml_string_writer, sXML Library</title>
    <updated>2024-07-30T18:13:12.582000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Then:&lt;/P&gt;&lt;P&gt;&lt;!--  StartFragment   --&gt;&lt;SPAN&gt;cl_sxml_string_writer&lt;SPAN class=""&gt;=&amp;gt;&lt;/SPAN&gt;&lt;SPAN class=""&gt;create&lt;/SPAN&gt;&lt;SPAN class=""&gt;(&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;encoding&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN class=""&gt;=&amp;nbsp;&lt;/SPAN&gt;'UTF&lt;SPAN class=""&gt;-&lt;/SPAN&gt;8'&amp;nbsp;&lt;SPAN class=""&gt;)&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;That will give you the XML header.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13777398/comment-id/4839061#M4839061"/>
    <published>2024-07-30T18:13:12.582000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13778864/comment-id/4839239#M4839239</id>
    <title>Re: error in cl_sxml_string_writer, sXML Library</title>
    <updated>2024-07-31T18:13:42.358000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Ah jetzt ja.&lt;/P&gt;&lt;P&gt;In CL_DEMO_OUTPUT_STREAM=&amp;gt;WRITE_XML we format XML ourselves to achieve this. Maybe Debugger can do the same. I will ask the colleagues.&lt;/P&gt;&lt;P&gt;Using transformation ID adds the &amp;lt;xml&amp;gt;-Tag what would change the debugged content. This is not desirable.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13778864/comment-id/4839239#M4839239"/>
    <published>2024-07-31T18:13:42.358000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13779677/comment-id/4839397#M4839397</id>
    <title>Re: No check on foreign key in ADT-defined database table</title>
    <updated>2024-08-01T12:04:24.033000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;There is no name of the source code to define a DDIC database table in ADT. The source code is created on the fly when you call the editor and deleted after editing.&lt;/P&gt;&lt;P&gt;&lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_tools.htm" target="_blank" rel="noopener noreferrer"&gt;https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_tools.htm&lt;/A&gt;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13779677/comment-id/4839397#M4839397"/>
    <published>2024-08-01T12:04:24.033000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13782595/comment-id/4839827#M4839827</id>
    <title>Re: No check on foreign key in ADT-defined database table</title>
    <updated>2024-08-05T07:25:53.554000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;(1) The language to create a DDIC database table using ADT is named &lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddic_define_table.htm" target="_self" rel="noopener noreferrer"&gt;Dictionary DDL&lt;/A&gt;.&lt;/P&gt;&lt;P&gt;(2) It supports the definition of &lt;A href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenddicddl_define_table_forkey.htm" target="_self" rel="noopener noreferrer"&gt;foreign key relationships&lt;/A&gt;&amp;nbsp;as it was possible in SE11 for decades.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-no-check-on-foreign-key-in-adt-defined-database-table/qaq-p/13782595/comment-id/4839827#M4839827"/>
    <published>2024-08-05T07:25:53.554000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blogs-by-sap/cl-demo-output-goes-abap-cloud/ba-p/13782903</id>
    <title>CL_DEMO_OUTPUT goes ABAP Cloud</title>
    <updated>2024-08-05T11:36:31.726000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;The class CL_DEMO_OUTPUT and its interface IF_DEMO_OUTPUT format ABAP data and other data as output for demonstration and test purposes. Since its appearance, the following evolutionary steps took place:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Announcement of CL_DEMO_OUTPUT, &lt;A href="https://community.sap.com/t5/application-development-blog-posts/cl-demo-output-part-1-of-2-usage/ba-p/13193156" target="_self"&gt;Usage&lt;/A&gt; and &lt;A href="https://community.sap.com/t5/application-development-blog-posts/cl-demo-output-part-2-of-2-a-look-behind/ba-p/13194486" target="_self"&gt;Technology&lt;/A&gt;, restricted to non-nested data structures.&lt;/LI&gt;&lt;LI&gt;Extension of the capabilities to &lt;A href="https://community.sap.com/t5/application-development-blog-posts/cl-demo-output-invigorated/ba-p/13526791" target="_self"&gt;nested data structures and data references&lt;/A&gt;.&amp;nbsp;&lt;/LI&gt;&lt;LI&gt;Implementation of the &lt;A href="https://community.sap.com/t5/application-development-blog-posts/abap-console-reloaded/ba-p/13572710" target="_self"&gt;ADT ABAP Console by CL_DEMO_OUTPUT&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The latter already introduced the implicit usage of CL_DEMO_OUTPUT to ABAP Cloud. Either by implementing IF_OO_ADT_CLASSRUN or by inheriting from CL_DEMO_CLASSRUN, CL_DEMO_OUTPUT can be invoked in order to produce console output. Here, CL_DEMO_CLASSRUN offers more methods than IF_OO_ADT_CLASSRUN.&lt;/P&gt;&lt;P&gt;When using&amp;nbsp;IF_OO_ADT_CLASSRUN or&amp;nbsp;CL_DEMO_CLASSRUN, the instantiation and the handling of the output data are done internally by ADT. Since neither IF_DEMO_OUTPUT nor CL_DEMO_OUTPUT can be released as an API, they cannot be used directly in ABAP Cloud.&lt;/P&gt;&lt;P&gt;To close this gap, with ABAP 2408, IF_DEMO_OUTPUT_CLOUD and CL_DEMO_OUTPUT_CLOUD were released as APIs for usage in test and demonstration programs in ABAP Cloud. They wrap&amp;nbsp;CL_DEMO_OUTPUT and make only those features available that are suitable for ABAP Cloud. The main restrictions are:&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;There are no static methods. Only instance methods can be used via the interface IF_DEMO_OUTPUT_CLOUD.&lt;/LI&gt;&lt;LI&gt;There are no DISPLAY methods. The output produced by CL_DEMO_OUTPUT can be retrieved by method GET for further processing instead.&lt;/LI&gt;&lt;LI&gt;Some highly specialized methods of&amp;nbsp;CL_DEMO_OUTPUT are not supported.&lt;/LI&gt;&lt;LI&gt;The output formats HTML, TEXT, JSON and XML are specified by enumerated constants.&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Now you can write code in an ABAP class with ABAP language version "ABAP for Cloud Development" as follows:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;    DATA:
      BEGIN OF struc,
        col  TYPE i VALUE 333,
        itab TYPE TABLE OF i WITH EMPTY KEY,
      END OF struc.

    struc-itab = VALUE #( FOR i = 1 UNTIL i = 4 ( i * 111 ) ).

    FINAL(dref) = REF #( struc ).

    FINAL(html) =
      cl_demo_output_cloud=&amp;gt;new( cl_demo_output_cloud=&amp;gt;html
        )-&amp;gt;begin_section( 'HTML Output'
        )-&amp;gt;get( dref ).

    FINAL(text) =
      cl_demo_output_cloud=&amp;gt;new( cl_demo_output_cloud=&amp;gt;text
        )-&amp;gt;begin_section( 'Text Output'
        )-&amp;gt;get( dref ).

    FINAL(json) =
      cl_demo_output_cloud=&amp;gt;new( cl_demo_output_cloud=&amp;gt;json
        )-&amp;gt;begin_section( 'JSON Output'
        )-&amp;gt;get( dref ).

    FINAL(xml) =
      cl_demo_output_cloud=&amp;gt;new( cl_demo_output_cloud=&amp;gt;xml
        )-&amp;gt;begin_section( 'XML Output'
        )-&amp;gt;get( dref ).

    "Do what you want ...&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;As the comment says, you can do what you want with the output strings&amp;nbsp;returned by GET in HTML-, TEXT-, JSON- or XML-format.&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blogs-by-sap/cl-demo-output-goes-abap-cloud/ba-p/13782903"/>
    <published>2024-08-05T11:36:31.726000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/what-s-new/why-is-my-content-marked-as-spam/bc-p/13782949#M495</id>
    <title>Re: Why Is My Content Marked as Spam?</title>
    <updated>2024-08-05T12:05:07.561000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;After decades of blogging, my latest blog is marked as spam and is removed.&lt;BR /&gt;Thank you very much. I guess this is the end of my year long journey in SAP Community.&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/what-s-new/why-is-my-content-marked-as-spam/bc-p/13782949#M495"/>
    <published>2024-08-05T12:05:07.561000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-blogs-by-sap/client-handling-and-client-isolation-in-abap/ba-p/13851622</id>
    <title>Client Handling and Client Isolation in ABAP</title>
    <updated>2024-09-04T16:00:24.753000+02:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P style=" padding-left : 30px; "&gt;A client is an organizational unit of an AS ABAP (&lt;SPAN&gt;Application Server ABAP,&amp;nbsp;&lt;/SPAN&gt;that is the application layer of an ABAP system in which ABAP programs are executed). For each logon to an AS ABAP, a client ID must be specified. A logon can happen in a quite classical way using SAP Logon and SAP GUI, via the RFC interface and nowadays most prominently using Web UIs that are handled on AS ABAP by handler classes, called from ICF (Internet Connection Framework). For all of these logons, a client ID is requested with which a logon to a specific client takes place.&amp;nbsp;&amp;nbsp;Each user session is thus governed by its &lt;STRONG&gt;current client&lt;/STRONG&gt; whose client ID is set during logon and that is the nominal value of the ABAP system field &lt;FONT face="courier new,courier"&gt;sy-mandt&lt;/FONT&gt;&amp;nbsp;(where “mandt” is the abbreviation for “Mandant”, and "Mandant" is German for “client”).&amp;nbsp;&lt;/P&gt;&lt;P style=" padding-left : 30px; "&gt;Client isolation is a must for ABAP Cloud.&amp;nbsp;The different means for isolating the clients of an AS ABAP are described. The article supports &lt;A title="SAP Note 3472859" href="https://me.sap.com/notes/3472859" target="_self" rel="noopener noreferrer"&gt;SAP Note&amp;nbsp;3472859&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;and also summarizes the contents of AMDP documentation that will only be published with Release 2411 and Release 2502.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;On the database of an ABAP system, application tables defined in the ABAP Dictionary have a client column as their first key field. Any&amp;nbsp;database table that has a first column of built-in ABAP Dictionary type CLNT is client-dependent. &lt;SPAN&gt;System tables without a client column are client-independent.&amp;nbsp;&lt;/SPAN&gt;Other data sources, such as CDS views, that are &lt;SPAN&gt;based on tables with a client column are also client-dependent.&amp;nbsp;&lt;/SPAN&gt;The client column contains client IDs.&amp;nbsp;&lt;SPAN&gt;Each client ID uniquely assigns the data in the other columns to a client.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;As a rule, ABAP application programs executed in a user session should access only data of the &lt;STRONG&gt;current client&lt;/STRONG&gt; and no data of other clients (no cross-client access). This is called client isolation. Client isolation is strongly recommended in the ABAP language version &lt;EM&gt;Standard ABAP&lt;/EM&gt; and must be enforced in the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;The following sections show how client isolation is achieved and can be enforced for different data sources and different ways of accessing them.&lt;/P&gt;&lt;H2 id="toc-hId-1047908900"&gt;The Good&lt;/H2&gt;&lt;P&gt;In ABAP, the best you can do is to stay in the ABAP comfort zone and let the ABAP runtime framework do as much as possible for you. Regarding client isolation, ABAP supports you with an implicit client handling in the following cases:&lt;/P&gt;&lt;H3 id="toc-hId-980478114"&gt;ABAP SQL&lt;/H3&gt;&lt;P&gt;When accessing client-dependent data sources with a client column with ABAP SQL, an implicit client handling takes place. By default, you cannot specify conditions for the client column of a client-dependent data source explicitly. Instead, the&amp;nbsp;SQL statements passed to the database by the ABAP SQL interface contain implicit &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; and &lt;FONT face="courier new,courier"&gt;ON&lt;/FONT&gt; conditions for the client column that select the data of the current client only. This default behavior cannot be changed&lt;SPAN&gt;&amp;nbsp;in the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;. The following code snippet exemplifies this behavior:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT * FROM scarr
         "WHERE mandt = '...'           "Syntax error
         INTO TABLE (result).

SELECT * FROM scarr USING CLIENT '100'  "Forbidden in ABAP Cloud
         "WHERE mandt = '...'           "Syntax error
         INTO TABLE @result. 

SELECT * FROM scarr CLIENT SPECIFIED    "Obsolete:
         WHERE mandt = '200'            "Syntax warning in Standard ABAP
         INTO TABLE @result.            "Syntax error   in ABAP Cloud&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;Only the first &lt;FONT face="courier new,courier"&gt;SELECT&lt;/FONT&gt; statement is possible in&amp;nbsp;&lt;SPAN&gt;the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;.&amp;nbsp; Implicit client handling takes place with the default value for the client ID. An explicit &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition for the client column of the client-dependent database table SCARR is forbidden (in ABAP Cloud as well as in classic ABAP).&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The second &lt;FONT face="courier new,courier"&gt;SELECT&lt;/FONT&gt; statement is only possible in&amp;nbsp;ABAP language version &lt;EM&gt;Standard ABAP&lt;/EM&gt;. It switches the client ID used for implicit client handling from the current client to the client specified behind &lt;FONT face="courier new,courier"&gt;USING CLIENT&lt;/FONT&gt;. As this violates client isolation, the addition &lt;FONT face="courier new,courier"&gt;USING CLIENT&lt;/FONT&gt; is forbidden in&amp;nbsp;the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The third &lt;FONT face="courier new,courier"&gt;SELECT&lt;/FONT&gt; statement uses the obsolete addition &lt;FONT face="courier new,courier"&gt;CLIENT SPECIFIED&lt;/FONT&gt;. This addition disables the implicit client handling. The client column loses its special meaning and is handled like any other key field. In order to select the data of a specific client, the client column must be used in a &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition explicitly. If this is not done, the data of all clients are selected. In order to select the current client, the client column can be compared to the system field&amp;nbsp;&lt;FONT face="courier new,courier"&gt;sy-mandt&lt;/FONT&gt;, whose nominal value is the client ID of the current client. The addition&amp;nbsp;&lt;FONT face="courier new,courier"&gt;CLIENT SPECIFIED&lt;/FONT&gt; is forbidden in the ABAP language version &lt;/SPAN&gt;&lt;EM&gt;ABAP for Cloud Development &lt;/EM&gt;&lt;SPAN&gt;and leads to a syntax warning in &lt;EM&gt;Standard ABAP&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;The following SQL trace shows the native HANA SELECT statements that are passed by the ABAP SQL interface to the SAP HANA database for the ABAP SQL statements:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="SCARRpng.png" style="width: 461px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/161379i69DF281546C892E7/image-size/large?v=v2&amp;amp;px=999" role="button" title="SCARRpng.png" alt="SCARRpng.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;In the first two statements, the &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; conditions are introduced by ABAP SQL's implicit client handling. The first statement uses the default current client, the second statement uses the client specified behind &lt;FONT face="courier new,courier"&gt;USING CLIENT.&lt;/FONT&gt; In the third statement the &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition comes from the explicit &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition in ABAP SQL, where implicit client handling is switched off.&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;To summarize:&lt;/STRONG&gt; The default behavior of ABAP SQL's implicit client handling fully supports client isolation. This behavior cannot be changed in&amp;nbsp;&lt;SPAN&gt;the ABAP language version &lt;/SPAN&gt;&lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;&lt;SPAN&gt;. Using ABAP SQL in ABAP Cloud never violates client isolation.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId-783964609"&gt;ABAP CDS View Entities&lt;/H3&gt;&lt;P&gt;The client-dependency of ABAP CDS view entities (as well as of ABAP CDS hierarchies) is defined by the data sources used by the CDS entity. If one of the data sources used in the entity is client-dependent, the entity is client-dependent.&amp;nbsp;If none of the data sources used in the entity is client-dependent, the entity is client-independent.&lt;/P&gt;&lt;P&gt;The client handling of&amp;nbsp;ABAP CDS view entities (as well as of ABAP CDS hierarchies)&amp;nbsp;&lt;SPAN&gt;is done by implicitly restricting the&amp;nbsp;result set to the client ID that is contained in the HANA session variable CDS_CLIENT. This can be seen from the following example of a simple CDS view entity:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-sql"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_REQUIRED
define view entity DEMO_CDS_SCARR_ENTITY
  as select from scarr
{
  key scarr.carrid,
  key scarr.carrname,
      scarr.currcode,
      scarr.url
}&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The implementation of the SQL view on the HANA database can be displayed in ADT:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="sql_vew.png" style="width: 456px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/161710iE03F0F6C53E3EA92/image-size/large?v=v2&amp;amp;px=999" role="button" title="sql_vew.png" alt="sql_vew.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;H2 id="toc-hId-458368385"&gt;&amp;nbsp;&lt;/H2&gt;&lt;H2 id="toc-hId-261854880"&gt;&amp;nbsp;&lt;/H2&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The implicit client handling is achieved by the generated &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition:&lt;/P&gt;&lt;PRE&gt;... WHERE "SCARR"."MANDT" = SESSION_CONTEXT( 'CDS_CLIENT' )&lt;/PRE&gt;&lt;P&gt;The client column is compared with the result of the built-in HANA function SESSION_CONTEXT that reads the contents of the session variable CDS_CLIENT.&amp;nbsp;The procedure using an implicit &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition is the same as for ABAP SQL. As always, the difference between ABAP CDS and ABAP SQL is that CDS entities are instantiated as artifacts in the database, whereas an ABAP SQL statement is passed to the database for direct execution only. Note that from ABAP's perspective, the CDS view entity doesn't have a client column at all.&lt;/P&gt;&lt;P&gt;From the above it is clear that client isolation depends on how the HANA&amp;nbsp;session variable CDS_CLIENT is set. By default, CDS_CLIENT contains the client ID of the current client and thus is the same as the nominal value of the system field &lt;FONT face="courier new,courier"&gt;sy-mandt&lt;/FONT&gt; in ABAP programs. There is no way of changing the value of CDS_CLIENT from ABAP code&amp;nbsp;except the &lt;FONT face="courier new,courier"&gt;USING CLIENT&lt;/FONT&gt; addition of ABAP SQL.&lt;/P&gt;&lt;P&gt;After executing the following code snippet:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;SELECT * FROM demo_cds_scarr_entity USING CLIENT '200'
         INTO TABLE (result).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;You find the following statement in the SQL trace in front of the &lt;FONT face="courier new,courier"&gt;SELECT&lt;/FONT&gt; statement:&lt;/P&gt;&lt;P&gt;&lt;span class="lia-inline-image-display-wrapper lia-image-align-left" image-alt="sess_var.png" style="width: 276px;"&gt;&lt;img src="https://community.sap.com/t5/image/serverpage/image-id/161778i2F9FDDD804CCAF05/image-size/large?v=v2&amp;amp;px=999" role="button" title="sess_var.png" alt="sess_var.png" /&gt;&lt;/span&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;This statement switches the implicit client handling of the ABAP CDS view from the current client to an explicitly specified client. Behind the &lt;FONT face="courier new,courier"&gt;SELECT&lt;/FONT&gt; statement, the same statement is used to switch the session variable back to the current client. As for accessing database tables, the addition &lt;FONT face="courier new,courier"&gt;USING CLIENT&lt;/FONT&gt; violates client isolation. But as we know, it is forbidden in&amp;nbsp;&lt;SPAN&gt;the ABAP language version &lt;/SPAN&gt;&lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;To summarize:&lt;/STRONG&gt; The default behavior of ABAP CDS view entities when accessed with ABAP SQL (allowed in&amp;nbsp;the ABAP language version &lt;/SPAN&gt;&lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;&lt;SPAN&gt;) never violates client isolation.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId-65341375"&gt;The Bad&lt;/H2&gt;&lt;P&gt;When leaving the comfort zone of ABAP and ABAP SQL by using Native SQL, you must take care of client isolation yourself.&lt;/P&gt;&lt;H3 id="toc-hId--2089411"&gt;Native SQL&lt;/H3&gt;&lt;P&gt;Native SQL consists of HANA-specific SQL statements that you can specify in an ABAP program and that are passed unchanged directly to the HANA database using the Native SQL interface of the AS ABAP. Native SQL statements can be specified statically between the ABAP statements&lt;FONT face="courier new,courier"&gt; EXEC SQL&lt;/FONT&gt;, &lt;FONT face="courier new,courier"&gt;ENDEXEC&lt;/FONT&gt; and dynamically with the classes of ADBC (ABAP Database Connectivity). The main task of&amp;nbsp;the Native SQL interface is the mapping of ABAP data to database data and vice versa, but there is no manipulation of the SQL statement itself and thus, there is no implicit client handling.&lt;/P&gt;&lt;P&gt;When accessing client-dependent database tables, you must provide appropriate &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; conditions in order to achieve client isolation, as in the following examples:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;EXEC SQL&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;EXEC SQL.
  OPEN dbcur FOR
    SELECT carrid, carrname
           FROM scarr
           WHERE mandt  = :sy-mandt
ENDEXEC.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;ADBC&lt;/STRONG&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;  FINAL(result) = NEW cl_sql_statement( )-&amp;gt;execute_query(
    `SELECT CARRID, CARRNAME ` &amp;amp;&amp;amp;
    `FROM SCARR ` &amp;amp;&amp;amp;
    `WHERE MANDT  = ` &amp;amp;&amp;amp; `'` &amp;amp;&amp;amp; sy-mandt &amp;amp;&amp;amp; `'` ).&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;When accessing client-dependent CDS entities, you must avoid setting the HANA session variable CDS_CLIENT to another value than the client ID of the current client.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;To summarize:&lt;/STRONG&gt;&amp;nbsp; With Native SQL, client isolation can be achieved explicitly but not controlled implicitly and therefore Native SQL is not allowed in&amp;nbsp;the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;H2 id="toc-hId--327685635"&gt;The Others&lt;/H2&gt;&lt;P&gt;With AMDP (&lt;SPAN&gt;ABAP Managed Database Procedures&lt;/SPAN&gt;) we also leave the comfort zone of ABAP SQL and ABAP CDS.&amp;nbsp;&lt;/P&gt;&lt;H3 id="toc-hId--395116421"&gt;&lt;SPAN&gt;AMDP&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;AMDP enables implementing HANA database procedures and HANA database functions written in HANA SQLScript in so-called AMDP methods of AMDP classes. AMDP methods can be either called from other ABAP code or can be wrapped by CDS table or scalar functions and thus become available as data sources or operands for ABAP CDS queries and ABAP SQL queries. While the AMDP framework manages the instantiation, handling and calling of the&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;database procedures on the SAP HANA database, the implementation is in fact pure native SQL and cannot be controlled. But since t&lt;/SPAN&gt;&lt;SPAN&gt;here are good reasons for using AMDP (mainly for accessing functionality that is not yet wrapped by ABAP CDS DQL or ABAP SQL DQL), AMDP is released for ABAP Cloud and there must be a way to achieve client isolation.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;Before ABAP Cloud, client handling was done in AMDP in the same way as for Native SQL described above: As a rule, you had to take care of client isolation yourself. It was recommended to pass the current client ID as a parameter to an AMDP method and to use it in &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; conditions in the SQLScript method implementation. Furthermore, an AMDP method could be declared with the following AMDP options:&lt;/P&gt;&lt;PRE&gt;METHODS meth ... AMDP OPTIONS&amp;nbsp;CDS SESSION CLIENT CURRENT|clnt&lt;/PRE&gt;&lt;P&gt;&lt;SPAN&gt;These additions&amp;nbsp;set the HANA session variable CDS_CLIENT&amp;nbsp;when the AMDP method is called from ABAP. &lt;FONT face="courier new,courier"&gt;CURRENT&lt;/FONT&gt; sets the session variable to the client ID of the current client and when the name of an input parameter&amp;nbsp;&lt;FONT face="courier new,courier"&gt;clnt&lt;/FONT&gt; is specified its value is used. Inside the implementation, the session variable can determine the client handling of the database artifacts of CDS entities accessed there (see above) or it can be used explicitly in &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; conditions. &lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Unfortunately, both passing the current client as a parameter as well as using the AMDP option &lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT CURRENT&lt;/FONT&gt;&amp;nbsp;are not enough to guarantee client isolation. There is no control over whether the passed client ID or the session variable are used appropriately in the implementation to restrict access to the current client. In other words: An AMDP method whose client handling is defined by using no AMDP option for the client handling, or by using the AMDP option &lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT CURRENT&lt;/FONT&gt;, is not &lt;STRONG&gt;client-safe&lt;/STRONG&gt;. A development object that accesses client-dependent SQL data sources is client-safe&amp;nbsp;if it can access data of one client only. In order to achieve client isolation for AMDP, an AMDP method must be made client-safe.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;To achieve client safety for AMDP methods, new AMDP options have been introduced:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;ABAP release 7.93/7.58 (2308/2023)&lt;/SPAN&gt;&lt;/P&gt;&lt;PRE&gt;&lt;SPAN&gt;METHODS meth ... AMDP OPTIONS CLIENT INDEPENDENT&lt;/SPAN&gt;&lt;/PRE&gt;&lt;P&gt;&lt;SPAN&gt;The AMDP option &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt; declares&amp;nbsp;an AMDP method as client-independent. Only client-independent database objects can be accessed and specified after its &lt;FONT face="courier new,courier"&gt;USING&lt;/FONT&gt; addition. The AMDP method is client-safe since no client-dependent data sources can be accessed.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;ABAP release 7.96/8.16 (2405/2025)&lt;/SPAN&gt;&lt;/P&gt;&lt;PRE&gt;&lt;SPAN&gt;METHODS meth ... AMDP OPTIONS CDS SESSION CLIENT DEPENDENT&lt;/SPAN&gt;&lt;/PRE&gt;&lt;P&gt;&lt;SPAN&gt;The AMDP option &lt;/SPAN&gt;&lt;FONT face="courier new,courier"&gt;CDS SESSION&amp;nbsp;CLIENT DEPENDENT &lt;/FONT&gt;&lt;SPAN&gt;declares&amp;nbsp;an AMDP method as client-dependent. As the former&amp;nbsp;&lt;FONT face="courier new,courier"&gt;CDS SESSION&amp;nbsp;CLIENT CURRENT&lt;/FONT&gt;, it also sets the HANA session variable CDS_CLIENT to&amp;nbsp;the client ID of the current client. But in contrast to the former option&amp;nbsp;&lt;FONT face="courier new,courier"&gt;CDS SESSION&amp;nbsp;CLIENT CURRENT&lt;/FONT&gt;, it also restricts the &lt;FONT face="courier new,courier"&gt;USING&lt;/FONT&gt; list of the AMDP method to the following client-safe objects and thus makes the AMDP method itself client-safe:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;&lt;SPAN&gt;Client-dependent CDS view entities filtered by the HANA session variable CDS_CLIENT&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Client-dependent CDS table functions that are client-safe (see below)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Client-independent CDS objects or DDIC database tables (from Release 2502 on)&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Client-dependent or client-independent AMDP methods with the AMDP option &lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt; or &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;Client-dependent DDIC database tables (from Release 2502 on); client isolation is achieved by filtering a generated intermediate database view for the client that is contained in the HANA session variable&amp;nbsp;&lt;SPAN class=""&gt;CDS_CLIENT&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;Note, that client safety of AMDP methods is not achieved by implicit client handling during processing an AMDP method itself but by the explicit restriction to data sources (CDS view entities, generated database views for DDIC database tables) that support implicit client handling. The original plan was that&amp;nbsp;no direct access to client-dependent database tables is permitted in client-safe AMDP methods. From Release 2502 on, this restriction is lifted.&amp;nbsp;The generated database view used for this already existed before and was used to&amp;nbsp;&lt;SPAN&gt;preserve the order of fields as defined in the ABAP Dictionary.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;In ABAP Cloud, where client isolation is a must, only client-safe AMDP methods are permitted. AMDP methods that have&amp;nbsp;&lt;SPAN&gt;ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;&lt;/SPAN&gt;, or are released as APIs for ABAP Cloud, must have one of the AMDP options&amp;nbsp;&lt;SPAN&gt;&lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt; or &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt;&lt;/SPAN&gt; and their&amp;nbsp;&lt;FONT face="courier new,courier"&gt;USING&lt;/FONT&gt; lists are respectively restricted. AMDP methods that are not client-safe lead to syntax warnings in ABAP Cloud that will become syntax errors in the future.&amp;nbsp;&lt;/P&gt;&lt;P&gt;The following is an example of a client-dependent AMDP method that is client-safe by using a client-safe CDS view entity:&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS ...

  PUBLIC SECTION.
    INTERFACES if_amdp_marker_hdb .

    TYPES:
      t_carriers TYPE STANDARD TABLE OF demo_cds_scarr_entity
                 WITH EMPTY KEY .

    METHODS get_scarr
      AMDP OPTIONS
      READ-ONLY
      CDS SESSION CLIENT DEPENDENT
      EXPORTING
        VALUE(carriers) TYPE t_carriers
      RAISING
        cx_amdp_error .

ENDCLASS.

CLASS ... IMPLEMENTATION.

  METHOD get_scarr BY DATABASE PROCEDURE FOR HDB
                        LANGUAGE SQLSCRIPT
                        USING demo_cds_scarr_entity.
      carriers  = select carrid, carrname, currcode, url
                         from demo_cds_scarr_entity;
  ENDMETHOD.

ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Note, that no parameter for passing the client ID is needed anymore. When refactoring existing AMDP methods to client-safe AMDP methods you can remove such a parameter. If you must keep it for compatibility reasons, be aware that&amp;nbsp;the result is empty for all passed clients other than the current client, if the parameter is used in&amp;nbsp;&lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; conditions, since&amp;nbsp;the results of the allowed data sources are implicitly restricted to the current client.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;To summarize:&lt;/STRONG&gt; For AMDP methods, special AMDP options&amp;nbsp;&lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt; or &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt; must be applied in order to achieve client isolation by restricting the &lt;FONT face="courier new,courier"&gt;USING&lt;/FONT&gt; list. This is recommended in classic ABAP and mandatory in ABAP Cloud.&lt;/SPAN&gt;&lt;/P&gt;&lt;H3 id="toc-hId--591629926"&gt;&lt;SPAN&gt;CDS Table Functions&lt;/SPAN&gt;&lt;/H3&gt;&lt;P&gt;&lt;SPAN&gt;You may have noticed that the above discussion is valid for standalone AMDP methods that can be called from ABAP code only. For AMDP methods implementing ABAP CDS table functions, none of the above AMDP options are allowed. Instead, such AMDP methods are declared with:&lt;/SPAN&gt;&lt;/P&gt;&lt;PRE&gt;&lt;SPAN&gt;CLASS-METHODS meth FOR TABLE FUNCTION cds_tabfunc.&lt;/SPAN&gt;&lt;/PRE&gt;&lt;P&gt;&lt;SPAN&gt;In that case, the parameter interface as well as the client handling is determined by the CDS table function.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In the language version &lt;EM&gt;Standard ABAP&lt;/EM&gt;, the client handling of client-dependent CDS table functions can make a confusing impression. In contrast to CDS view entities, the client handling of table functions must be defined explicitly using annotations. There are many options, some of which are obsolete. I am only showing one of them:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-sql"&gt;&lt;code&gt;@ClientHandling.type: #CLIENT_DEPENDENT
define table function DEMO_CDS_GET_SCARR_SPFLI_INPCL
  with parameters
    @Environment.systemField: #CLIENT
    clnt   :abap.clnt,
    carrid :s_carr_id
  returns
  {
    client   :s_mandt;
    carrname :s_carrname;
    connid   :s_conn_id;
    cityfrom :s_from_cit;
    cityto   :s_to_city;
  }
  implemented by method
    CL_DEMO_AMDP_FUNCTIONS_INPCL=&amp;gt;GET_SCARR_SPFLI_FOR_CDS;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;Here, the table function is declared as client-dependent with the annotation &lt;FONT face="courier new,courier"&gt;@ClientHandling.type: #CLIENT_DEPENDENT&lt;/FONT&gt; and&amp;nbsp;has an input parameter&amp;nbsp;&lt;FONT face="courier new,courier"&gt;clnt&lt;/FONT&gt; annotated with &lt;FONT face="courier new,courier"&gt;@Environment.systemField: #CLIENT&lt;/FONT&gt;. When the table function is used as a data source in ABAP SQL, this parameter is not explicitly passed but implicitly supplied with the current client ID. The implementing AMDP method looks as follows:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS cl_demo_amdp_functions_inpcl  ...

  PUBLIC SECTION.
    INTERFACES if_amdp_marker_hdb.
  
   ...

    CLASS-METHODS get_scarr_spfli_for_cds
        FOR TABLE FUNCTION demo_cds_get_scarr_spfli_inpcl.

    ...

ENDCLASS.

CLASS CL_DEMO_AMDP_FUNCTIONS_INPCL IMPLEMENTATION.
  ...
  METHOD get_scarr_spfli_for_cds
         BY DATABASE FUNCTION FOR HDB
         LANGUAGE SQLSCRIPT
         OPTIONS READ-ONLY
         USING scarr spfli.
    RETURN SELECT sc.mandt as client,
                  sc.carrname, sp.connid, sp.cityfrom, sp.cityto
                  from scarr as sc
                    inner join spfli as sp on sc.mandt = sp.mandt and
                                              sc.carrid = sp.carrid
                    where sp.mandt = :clnt AND
                          sp.carrid = :carrid
                    ORDER BY sc.mandt, sc.carrname, sp.connid;
  ENDMETHOD.
  ...
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The implicitly defined parameter &lt;FONT face="courier new,courier"&gt;clnt&lt;/FONT&gt; is used in a &lt;FONT face="courier new,courier"&gt;WHERE&lt;/FONT&gt; condition. As stated above, such a method (and with it the CDS table function) is not client-safe because the implementation of the AMDP method cannot be controlled.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;In ABAP cloud, client handling of CDS table functions is restricted to exactly one option.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;From ABAP release 9.13/8.16 (2411/2025) and on, there is a new CDS annotation available that explicitly enforces that client handling for a CDS table function:&lt;/SPAN&gt;&lt;/P&gt;&lt;PRE&gt;&lt;SPAN&gt;@ClientHandling.clientSafe&lt;/SPAN&gt;&lt;/PRE&gt;&lt;P&gt;&lt;SPAN&gt;This annotation declares a CDS table function explicitly as client-safe and the following restrictions apply:&lt;/SPAN&gt;&lt;/P&gt;&lt;UL&gt;&lt;LI&gt;All used objects must be client-safe.&lt;/LI&gt;&lt;LI&gt;The table function must have one of the annotations&lt;UL&gt;&lt;LI&gt;&lt;FONT face="courier new,courier"&gt;@ClientHandling.type&lt;/FONT&gt; with the value &lt;FONT face="courier new,courier"&gt;#CLIENT_DEPENDENT&lt;/FONT&gt; together with &lt;FONT face="courier new,courier"&gt;@ClientHandling.algorithm&lt;/FONT&gt; with the value &lt;FONT face="courier new,courier"&gt;#SESSION_VARIABLE&lt;/FONT&gt;.&lt;/LI&gt;&lt;LI&gt;&lt;FONT face="courier new,courier"&gt;@ClientHandling.type&lt;/FONT&gt; with the value &lt;FONT face="courier new,courier"&gt;#CLIENT_INDEPENDENT&lt;/FONT&gt;.&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;LI&gt;&lt;SPAN&gt;The table function must not have a parameter of type CLNT. The annotation &lt;FONT face="courier new,courier"&gt;@Environment.systemField&lt;/FONT&gt; with the enumerated value &lt;FONT face="courier new,courier"&gt;#CLIENT&lt;/FONT&gt; cannot be used for a parameter.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;&lt;SPAN&gt;For a CDS table function that has&amp;nbsp;the ABAP language version &lt;EM&gt;ABAP for Cloud Development&lt;/EM&gt;&amp;nbsp;or one that is released as an API, the annotation&amp;nbsp;&lt;FONT face="courier new,courier"&gt;@ClientHandling.clientSafe&lt;/FONT&gt; is set implicitly. For CDS table functions with ABAP language version &lt;EM&gt;Standard ABAP&lt;/EM&gt;, it is recommended to use that annotation.&amp;nbsp;If the annotation is not yet available, the above rules specified by it can still be followed.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The restrictions imply that a client-safe table function is either client-dependent, and the client handling is done using the HANA session variable CDS_CLIENT, or it is client independent.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;The AMDP method that implements a client-safe table function is then implicitly defined as with the AMDP option &lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt; or &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt; respectively.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The following is an example of a client-dependent CDS table function that is client-safe:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-sql"&gt;&lt;code&gt;@AccessControl.authorizationCheck: #NOT_ALLOWED
@ClientHandling.type: #CLIENT_DEPENDENT
@ClientHandling.algorithm: #SESSION_VARIABLE
@ClientHandling.clientSafe: true
define table function DEMO_CDS_TABFUNC_SESS_VAR_CS
returns
{
  client   :s_mandt;
  carrid   :s_carrid;
  carrname :s_carrname;
}
implemented by method
  cl_demo_cds_tabfunc_sess_vr_cs=&amp;gt;get;&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The client handling is based on the HANA session variable CDS_CLIENT. The respective annotation&amp;nbsp;&lt;SPAN&gt;&lt;FONT face="courier new,courier"&gt;@ClientHandling.algorithm: #SESSION_VARIABLE&lt;/FONT&gt; is enforced by the annotation&amp;nbsp;&lt;FONT face="courier new,courier"&gt;@ClientHandling.clientSafe: true&lt;/FONT&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;The implementing AMDP class looks as follows:&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;pre class="lia-code-sample language-abap"&gt;&lt;code&gt;CLASS cl_demo_cds_tabfunc_sess_vr_cs DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES if_amdp_marker_hdb.
    TYPES:
      BEGIN OF scarr,
        client TYPE scarr-mandt,
        cyrrid TYPE scarr-carrid,
      END OF scarr,
      scarr_tab TYPE STANDARD TABLE OF scarr
                     WITH EMPTY KEY.
    CLASS-METHODS get
        FOR TABLE FUNCTION demo_cds_tabfunc_sess_var_cs.
ENDCLASS.

CLASS CL_DEMO_CDS_TABFUNC_SESS_VR_CS IMPLEMENTATION.

  METHOD get
         BY DATABASE FUNCTION FOR HDB
         LANGUAGE SQLSCRIPT
         OPTIONS READ-ONLY
         USING demo_cds_scarr_entity.
    RETURN select sc.mandt as client, sc.carrid, sc.carrname
                  from demo_cds_scarr_entity as sc
                  ORDER BY sc.carrid;
  ENDMETHOD.
ENDCLASS.&lt;/code&gt;&lt;/pre&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;The AMDP method &lt;FONT face="courier new,courier"&gt;GET&lt;/FONT&gt; is implicitly client-safe. For its&amp;nbsp;&lt;FONT face="courier new,courier"&gt;USING&lt;/FONT&gt; list, the same restrictions apply as if the AMDP option&amp;nbsp;&lt;SPAN&gt;&lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt;&lt;/SPAN&gt;&amp;nbsp;is used explicitly.&lt;/P&gt;&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;To summarize:&lt;/STRONG&gt; For client isolation, the client handling of client-dependent CDS table functions must be purely based on the HANA session variable CDS_CLIENT and AMDP methods that implement client-safe CDS table functions implicitly work as with the AMDP options&amp;nbsp;&lt;FONT face="courier new,courier"&gt;CDS SESSION CLIENT DEPENDENT&lt;/FONT&gt; or &lt;FONT face="courier new,courier"&gt;CLIENT INDEPENDENT&lt;/FONT&gt;&amp;nbsp;and are client-safe themself. Only client-safe CDS table functions are allowed in ABAP Cloud.&lt;/SPAN&gt;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-blogs-by-sap/client-handling-and-client-isolation-in-abap/ba-p/13851622"/>
    <published>2024-09-04T16:00:24.753000+02:00</published>
  </entry>
  <entry>
    <id>https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13936583/comment-id/4892179#M4892179</id>
    <title>Re: error in cl_sxml_string_writer, sXML Library</title>
    <updated>2024-11-13T08:33:03.700000+01:00</updated>
    <author>
      <name>horst_keller</name>
      <uri>https://community.sap.com/t5/user/viewprofilepage/user-id/181866</uri>
    </author>
    <content>&lt;P&gt;Due to the discussion here, our development has introduced the following enhancements with releases 9.14/2502, 8.16/2025:&lt;/P&gt;&lt;P&gt;&lt;STRONG&gt;&lt;SPAN class=""&gt;Header Options for sXML Library&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;P data-unlink="true"&gt;Header options&amp;nbsp;for the XML declaration are now available in the sXML Library:&lt;/P&gt;&lt;UL class=""&gt;&lt;LI&gt;&lt;SPAN class=""&gt;CO_OPT_VAL_NO&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(no XML header), this is the default option.&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;CO_OPT_VAL_WITHOUT_ENCODING&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(version)&lt;/LI&gt;&lt;LI&gt;&lt;SPAN class=""&gt;CO_OPT_VAL_WITHOUT_ENCODING&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;(version and encoding)&lt;/LI&gt;&lt;/UL&gt;&lt;P&gt;But regarding the debugger problem, I don't have any further information yet. You might report it as a customer incident.&lt;/P&gt;&lt;P&gt;&amp;nbsp;&lt;/P&gt;</content>
    <link href="https://community.sap.com/t5/technology-q-a/re-error-in-cl-sxml-string-writer-sxml-library/qaq-p/13936583/comment-id/4892179#M4892179"/>
    <published>2024-11-13T08:33:03.700000+01:00</published>
  </entry>
</feed>
